var search_data = {"index":{"searchIndex":["acl","aclentry","acllist","argf","abbrev","action","actionmap","addrinfo","animatedimagelabel","animatedtextlabel","animatedwavedemo","arc","argumenterror","array","arraycode","blt_calendar_sample","blt_graph_demo","bwidget_demo","bar","base64","basicobject","basicsocket","benchmark","tms","benchmarkdriver","biff","bigdecimal","bigmath","bignum","binding","bitmap","bitmapimage","board","branch","btnframe","button_with_frame","c","c1","c2","cc","cgi","cookie","htmlextension","invalidencoding","queryextension","session","filestore","memorystore","nullstore","pstore","chashdir","cmath","csv","malformedcsverror","row","table","cache","cal","certstore","chatclient","chatentry","chatserver","checkbutton","class","clock","clonemenu","commentstripper","comparable","complex","compositepublisher","conditionvariable","continuation","coverage","crlstore","curses","key","mouseevent","window","dbm","dbmerror","debugger__","context","dl","basictypes","cfunc","cparser","cptr","cstruct","cstructbuilder","cstructentity","cunion","cunionentity","carriedfunction","compositehandler","dlerror","dltypeerror","fiddle","function","handle","importer","packinfo","packer","stack","tempfunction","valueutil","win32types","dqentry","drb","drbarray","drbbadscheme","drbbaduri","drbconn","drbconnerror","drberror","drbidconv","drbidconv","drbmessage","drbobject","drbobject","drbobservable","drbprotocol","drbremoteerror","drbsslsocket","sslconfig","drbserver","invokemethod18mixin","drbservernotfound","drbtcpsocket","drbunixsocket","drbundumped","drbundumped","drbunknown","drbunknownerror","extserv","extservmanager","gw","gwidconv","http0","callback","clientside","server","serverside","strstream","timeridconv","timerholder2","invalidindexerror","drbex","drbex2","drbex3","drbex4","drbnamedidconv","drbnamedobject","data","date","datetime","delegator","demoapplication","demobasic","demodialog","demodnd","demomanager","demoselect","demoservlet","demotree","demovar","dhasen","digest","base","class","hmac","instance","sha2","dir","e2mm","env","eoferror","erb","defmethod","util","emojitable","encoding","compatibilityerror","converter","converternotfounderror","invalidbytesequenceerror","undefinedconversionerror","encodingerror","enumerable","enumerator","generator","yielder","errno","econnaborted","econnreset","eproto","etc","exception","e2mm","exports","bcc","cygwin","mingw","mswin","falseclass","fcntl","fiber","fibererror","fiddle","closure","blockcaller","function","pointer","file","file::constants","stat","filetest","fileutils","dryrun","lowmethods","nowrite","streamutils_","verbose","fileviewer","find","fixnum","float","floatdomainerror","font","foo","unknown","fooerror","forwardable","front","function","gc","profiler","gdbm","gdbmerror","gdbmfatalerror","gserver","gem","builder","command","commandlineerror","commandmanager","commands","buildcommand","certcommand","checkcommand","cleanupcommand","contentscommand","dependencycommand","environmentcommand","fetchcommand","generateindexcommand","helpcommand","installcommand","listcommand","lockcommand","outdatedcommand","ownercommand","pristinecommand","pushcommand","querycommand","rdoccommand","searchcommand","servercommand","setupcommand","sourcescommand","specificationcommand","stalecommand","uninstallcommand","unpackcommand","updatecommand","whichcommand","configfile","consoleui","defaultuserinteraction","dependency","dependencyerror","dependencyinstaller","dependencylist","dependencyremovalexception","deprecate","docmanager","documenterror","endofyamlexception","errorreason","exception","ext","builder","configurebuilder","extconfbuilder","rakebuilder","filepermissionerror","format","formatexception","gemnotfoundexception","gemnotinhomeexception","gempathsearcher","gemrunner","gemcutterutilities","indexer","installerror","installupdateoptions","installer","extensionbuilderror","invalidspecificationexception","loaderror","localremoteoptions","mockgemui","systemexitexception","tty","termerror","noaliasyamltree","oldformat","operationnotsupportederror","package","badchecksum","closedio","error","fsyncdir","formaterror","nonseekableio","tarheader","tarinput","tarinvaliderror","taroutput","tarreader","entry","unexpectedeof","tarwriter","boundedstream","fileoverflow","restrictedstream","toolongfilename","packagetask","pathsupport","platform","platformmismatch","remoteerror","remotefetcher","fetcherror","remoteinstallationcancelled","remoteinstallationskipped","remotesourceexception","requirepathsbuilder","requirement","ssl","pkey_rsa","security","exception","policy","signer","server","silentui","sourceindex","specfetcher","specification","streamui","silentdownloadreporter","silentprogressreporter","simpleprogressreporter","verbosedownloadreporter","verboseprogressreporter","systemexitexception","text","uninstaller","userinteraction","validator","verificationerror","versionoption","getoptlong","ambiguousoption","error","invalidoption","missingargument","needlessargument","grid","hash","ordered","helloservlet","helloworld","hi_exception","hoge","httpserver","request","response","table","iehandler","ie_const","interp","interp","interp","io","waitreadable","waitwritable","readable","writable","ioerror","ipaddr","ipsocket","irb","abort","context","contextextender","ce","extendcommand","changeworkspace","currentworkingworkspace","foreground","fork","help","irbcommand","jobs","kill","load","nop","popworkspace","pushworkspace","require","source","workspaces","extendcommandbundle","excb","fileinputmethod","frame","history","historysavingability","inputcompletor","inputmethod","inspector","irb","irbloader","jobmanager","loadabort","locale","methodextender","notifier","abstractnotifier","compositenotifier","levelednotifier","nomsgnotifier","outputmethod","readlineinputmethod","slex","node","stdioinputmethod","stdiooutputmethod","workspace","ixmldomattribute","ixmldomcdatasection","ixmldomcharacterdata","ixmldomcomment","ixmldomdocument","ixmldomdocumentfragment","ixmldomdocumenttype","ixmldomelement","ixmldomentity","ixmldomentityreference","ixmldomimplementation","ixmldomnamednodemap","ixmldomnode","ixmldomnodelist","ixmldomnotation","ixmldomparseerror","ixmldomprocessinginstruction","ixmldomtext","ixmlhttprequest","ixtlruntime","iconv","brokenlibrary","failure","illegalsequence","invalidcharacter","invalidencoding","outofrange","indexerror","inspector","integer","interrupt","jisx0208","char","json","circulardatastructure","ext","generator","generatormethods","array","bignum","falseclass","fixnum","float","hash","nilclass","object","string","extend","trueclass","state","parser","generatorerror","jsonerror","missingunicodesupport","nestingerror","parsererror","unparsererror","jacobian","kconv","kernel","keyerror","knights_tour","lusolve","labelframe","line","lo_exception","loaderror","localjumperror","logger","application","formatter","logdevice","logdevicemutex","severity","logging","mail","marshal","matchdata","math","domainerror","matrix","eigenvaluedecomposition","lupdecomposition","mdoc2man","menubutton","method","microsoft_freethreadedxmldom_1_0","microsoft_xmldom_1_0","microsoft_xmldso_1_0","microsoft_xmlhttp_1","module","monitor","monitormixin","conditionvariable","timeout","msxml","interp","command_queue","threadgroup","multitkip_ok","multitkip_pseudotoplevel_evaluable","mutex","mutex_m","myapp","myelem","mylist","mytimeout","nkf","nqxml","node","nameerror","net","apop","apopsession","exception_type","exception_type","exception_type","exception_type","ftp","nullsocket","ftpconnectionerror","ftperror","ftppermerror","ftpprotoerror","ftpreplyerror","ftptemperror","http","copy","delete","get","head","lock","mkcol","move","options","patch","post","propfind","proppatch","put","trace","unlock","httpaccepted","httpbadgateway","httpbadrequest","httpbadresponse","httpclienterror","httpconflict","httpcontinue","httpcreated","httperror","httpexceptions","httpexpectationfailed","httpfatalerror","httpforbidden","httpfound","httpgatewaytimeout","httpgenericrequest","httpgone","httpheader","httpheadersyntaxerror","httpinformation","httpinternalservererror","httplengthrequired","httpmethodnotallowed","httpmovedpermanently","httpmultiplechoice","httpnocontent","httpnonauthoritativeinformation","httpnotacceptable","httpnotfound","httpnotimplemented","httpnotmodified","httpok","httppartialcontent","httppaymentrequired","httppreconditionfailed","httpproxyauthenticationrequired","httpredirection","httprequest","httprequest","httprequestentitytoolarge","httprequesttimeout","httprequesturitoolong","httprequestedrangenotsatisfiable","httpresetcontent","httpresponse","httpretriableerror","httpseeother","httpservererror","httpserverexception","httpserviceunavailable","httpsession","httpsuccess","httpswitchprotocol","httptemporaryredirect","httpunauthorized","httpunknownresponse","httpunsupportedmediatype","httpuseproxy","httpversionnotsupported","imap","badresponseerror","bodytypebasic","bodytypemessage","bodytypemultipart","bodytypetext","byeresponseerror","crammd5authenticator","dataformaterror","digestmd5authenticator","error","flagcounterror","loginauthenticator","noresponseerror","plainauthenticator","responseerror","responseparseerror","internetmessageio","netprivate","writeadapter","pop","pop3","pop3session","popauthenticationerror","popbadresponse","poperror","popmail","popsession","protoautherror","protocommanderror","protofatalerror","protoretriableerror","protoservererror","protosyntaxerror","protounknownerror","protocretryerror","protocolerror","smtp","response","smtpauthenticationerror","smtperror","smtpfatalerror","smtpserverbusy","smtpsession","smtpsyntaxerror","smtpunknownerror","smtpunsupportedcommand","telnet","newton","nilclass","nomemoryerror","nomethoderror","notimplementederror","notify","nthtoggle","numeric","oleproperty","oletagdomnodetype","oletagxmlemem_type","object","parseerror","syck","badalias","defaultkey","domaintype","emitter","map","mergekey","node","object","out","parser","privatetype","resolver","scalar","seq","timeouterror","tknamedvirtualevent","tksystemmenu","ttk","objectspace","observable","open3","openssl","asn1","asn1data","asn1error","constructive","primitive","bn","bnerror","buffering","cipher","cipher","ciphererror","config","configerror","digest","digest","digesterror","engine","engineerror","hmac","hmacerror","netscape","spki","spkierror","ocsp","basicresponse","certificateid","ocsperror","request","response","opensslerror","pkcs12","pkcs12error","pkcs5","pkcs5error","pkcs7","pkcs7error","recipientinfo","signerinfo","pkey","dh","dherror","dsa","dsaerror","ec","group","error","point","error","ecerror","pkey","pkeyerror","rsa","rsaerror","random","randomerror","ssl","nonblock","sslcontext","sslerror","sslserver","sslsocket","session","sessionerror","socketforwarder","x509","attribute","attributeerror","crl","crlerror","certificate","certificateerror","extension","extensionerror","extensionfactory","name","rfc2253dn","nameerror","request","requesterror","revoked","revokederror","store","storecontext","storeerror","openstruct","openuri","httperror","httpredirect","meta","openread","optionmenubutton","optionparser","acceptables","ambiguousargument","ambiguousoption","arguable","completinghash","completion","invalidargument","invalidoption","list","missingargument","needlessargument","optionmap","parseerror","switch","noargument","optionalargument","placedargument","requiredargument","oval","pkcs7","pkey","pp","objectmixin","ppmethods","singleline","pstore","error","pty","childexited","pack","panedwindow","pathname","pendulumanimationdemo","photocanvas","photoimage","pidigitspigot","place","planet","point","polygon","prelude","prettyprint","breakable","group","groupqueue","singleline","text","prime","eratosthenesgenerator","eratosthenessieve","generator23","oldcompatibility","pseudoprimegenerator","trialdivision","trialdivisiongenerator","proc","process","gid","status","sys","uid","profiler__","psych","badalias","coder","emitter","exception","handler","dumperoptions","handlers","json","stream","treebuilder","nodes","alias","document","mapping","node","scalar","sequence","stream","omap","parser","mark","privatetype","scalarscanner","set","stream","streaming","syntaxerror","treebuilder","visitors","depthfirst","emitter","jsontree","toruby","visitor","yamltree","queue","rdoc","alias","anonclass","anymethod","attr","classmodule","codeobject","constant","context","section","crossreference","erbio","encoding","error","generator","darkfish","markup","ri","ghostmethod","include","markup","attrchanger","attrspan","attribute","attributemanager","blankline","document","formatter","heading","indentedparagraph","list","listitem","paragraph","parser","error","parseerror","preprocess","raw","rule","special","toansi","tobs","tohtml","tohtmlcrossref","tordoc","tottonly","verbatim","metamethod","methodattr","normalclass","normalmodule","options","page","parser","c","ruby","rubytools","simple","rdoc","ri","driver","error","notfounderror","error","paths","store","require","rubylex","rubytoken","tkerror","tkid","tkkw","tknode","tkopasgn","tkop","tksymbol","tkunknownchar","tkval","token","rubygemshook","singleclass","stats","normal","quiet","verbose","task","text","tokenstream","toplevel","rexml","attlistdecl","attribute","attributes","cdata","child","comment","dtd","attlistdecl","elementdecl","entitydecl","notationdecl","parser","declaration","doctype","document","element","elementdecl","elements","encoding","entity","entityconst","externalentity","formatters","default","pretty","transitive","functions","iosource","instruction","light","node","namespace","node","notationdecl","output","parent","parseexception","parsers","baseparser","lightparser","pullevent","pullparser","sax2parser","streamparser","treeparser","ultralightparser","xpathparser","quickpath","sax2listener","source","sourcefactory","streamlistener","syncenumerator","text","undefinednamespaceexception","validation","choice","event","interleave","oneormore","optional","ref","relaxng","sequence","state","validationexception","validator","zeroormore","xmldecl","xmltokens","xpath","xpathparser","romp","rss","atom","commonmodel","contentmodel","classmethods","dateconstruct","duplicatelinkchecker","entry","feed","author","category","contributor","entry","content","published","source","summary","generator","icon","id","link","logo","rights","subtitle","title","updated","personconstruct","email","name","uri","textconstruct","uricontentmodel","basedublincoremodel","baselistener","basemodel","baseparser","basetrackbackmodel","contentmodel","conversionerror","converter","dublincoremodel","dublincoremodel","element","error","itunesbasemodel","ituneschannelmodel","itunescategory","itunesimage","itunesowner","itunesitemmodel","itunesduration","itunesmodelutils","imagefaviconmodel","imagefavicon","imageitemmodel","imageitem","imagemodelutils","invalidrsserror","listenermixin","maker","atom","entry","channel","cloud","description","generator","skipdays","day","skiphours","hour","image","items","item","textinput","feed","channel","categories","category","cloud","generator","links","link","skipdays","day","skiphours","hour","image","items","item","categories","category","content","enclosure","guid","links","link","source","categories","category","generator","icon","links","link","logo","textinput","atomcategory","atomgenerator","atomlink","atomlogo","atompersonconstructbase","atompersons","atomtextconstruct","atomtextconstructbase","ensurexmlcontent","base","channelbase","authorsbase","authorbase","categoriesbase","categorybase","cloudbase","contributorsbase","contributorbase","copyrightbase","descriptionbase","generatorbase","itunescategories","itunescategory","itunesimage","itunesowner","linksbase","linkbase","skipdaysbase","daybase","skiphoursbase","hourbase","titlebase","contentmodel","dublincoremodel","itunesbasemodel","ituneschannelmodel","itunescategoriesbase","itunescategorybase","itunesimagebase","itunesownerbase","itunesitemmodel","itunesdurationbase","imagebase","imagefaviconmodel","imagefaviconbase","imageitemmodel","imageitembase","itemsbase","itembase","contentbase","descriptionbase","enclosurebase","guidbase","itunesduration","rightsbase","sourcebase","iconbase","logobase","rightsbase","subtitlebase","titlebase","titlebase","rss09","rss091","channel","image","items","item","textinput","rss092","channel","image","items","item","textinput","channel","authors","author","categories","category","cloud","contributors","contributor","copyright","description","generator","links","link","skipdays","day","skiphours","hour","title","image","items","item","authors","author","categories","category","content","contributors","contributor","description","enclosure","guid","links","link","rights","source","authors","author","categories","category","contributors","contributor","generator","icon","links","link","logo","rights","subtitle","title","title","textinput","rss10","channel","authors","author","categories","category","cloud","contributors","contributor","copyright","description","generator","links","link","skipdays","day","skiphours","hour","title","image","items","item","authors","author","categories","category","content","contributors","contributor","description","enclosure","guid","links","link","rights","source","authors","author","categories","category","contributors","contributor","generator","icon","links","link","logo","rights","subtitle","title","title","textinput","rss20","channel","categories","category","cloud","generator","skipdays","day","skiphours","hour","image","items","item","authors","author","categories","category","enclosure","guid","source","links","link","textinput","rssbase","setupdefaultdate","setupdefaultlanguage","slashmodel","syndicationmodel","taxonomytopicmodel","taxonomytopicsbase","taxonomytopicbase","taxonomytopicsmodel","taxonomytopicsbase","textinputbase","trackbackmodel","trackbackaboutsbase","trackbackaboutbase","xmlstylesheets","xmlstylesheet","missingattributeerror","missingtagerror","nserror","notavailablevalueerror","notexceptedtagerror","notexpectedtagerror","notseterror","notvalidxmlparser","notwellformederror","overlappedprefixerror","parser","rdf","bag","channel","image","items","textinput","image","item","li","li","seq","seq","li","textinput","rexmllikexmlparser","rexmllistener","rexmlparser","rss09","rss10","rootelementmixin","rss","channel","cloud","image","item","category","enclosure","guid","source","skipdays","day","skiphours","hour","textinput","setupmaker","slashmodel","syndicationmodel","taxonomytopicmodel","taxonomytopic","taxonomytopicsmodel","taxonomytopics","bag","toomuchtagerror","trackbackmodel10","trackbackabout","trackbackping","trackbackmodel20","trackbackabout","trackbackping","trackbackutils","unknownconversionmethoderror","unknownconvertmethod","unknowntagerror","unsupportedmakerversionerror","utils","csv","inheritedreader","yescleanother","yesother","xml","element","xmlparserlistener","xmlparsernotfound","xmlparserparser","xmlscanlistener","xmlscanparser","xmlstylesheet","xmlstylesheetmixin","racc","cparseparams","parseerror","parseerror","parser","radiobutton","rake","altsystem","application","cloneable","compositepublisher","dsl","defaultloader","earlytime","filecreationtask","filelist","filetask","fileutilsext","ftpfile","ftpuploader","invocationchain","emptyinvocationchain","invocationexceptionmixin","makefileloader","multitask","namespace","packagetask","pseudostatus","rdoctask","rakeapp","rubyforgepublisher","rulerecursionoverflowerror","sshdirpublisher","sshfilepublisher","sshfreshdirpublisher","task","taskargumenterror","taskarguments","tasklib","taskmanager","win32","win32homeerror","random","range","rangeerror","rational","rbconfig","readline","rectangle","regexp","regexperror","remotetkip","resolv","dns","config","nxdomain","otherresolverror","decodeerror","encodeerror","name","query","requester","requesterror","resource","any","cname","domainname","generic","hinfo","in","a","aaaa","srv","wks","minfo","mx","ns","ptr","soa","txt","hosts","ipv4","ipv6","resolverror","resolvtimeout","rinda","drbobjecttemplate","invalidhashtuplekey","notifytemplateentry","requestcancelederror","requestexpirederror","rindaerror","ringfinger","ringprovider","ringserver","simplerenewer","template","templateentry","tuple","tuplebag","tuplebin","tupleentry","tuplespace","tuplespaceproxy","waittemplateentry","ringecho","ripper","filter","tokenpattern","compileerror","error","matchdata","matcherror","ruby2html","rubylex","rubytoken","tkerror","tkid","tknode","tkopasgn","tkop","tkunknownchar","tkval","token","rubyvm","env","insnsincgenerator","insnsinfoincgenerator","instruction","instructionsequence","instructionsloader","minsnsincgenerator","optinsnincgenerator","optscincgenerator","optunifsincgenerator","sourcecodegenerator","vpath","vmbodygenerator","vmtcincgenerator","yarvdocgenerator","yasmdatarbgenerator","runtimeerror","sdbm","sdbmerror","sm","sockssocket","string_or_failed_format","scanf","formatspecifier","formatstring","scrlistbox","scripterror","securerandom","securityerror","selection","seq","set","shell","appendfile","appendio","builtincommand","cat","commandprocessor","concat","echo","error","filter","glob","processcontroller","systemcommand","tee","void","shellwords","signal","signalexception","simpledelegator","simpletuplespace","singleforwardable","singleton","sizedqueue","socket","ancillarydata","option","udpsource","socketerror","sortedset","spinbox","spinner_demo","sshdirpublisher","sshfilepublisher","sshfreshdirpublisher","standarderror","stopiteration","string","stringio","stringscanner","error","struct","syck","syck","baseemitter","basenode","defaultkey","domaintype","error","loader","mapping","node","object","omap","pairs","parseerror","privatetype","sequence","set","specialhash","stream","typeerror","ypath","yamlnode","symbol","symbol","synchronizer","synchronizer_m","err","lockmodefailer","unknownlocker","synchronizer","synchronizer_m","syntaxerror","sys","syslog","constants","systemcallerror","systemexit","systemstackerror","tcpserver","tcpsocket","tsort","cyclic","tzinfo","tcltkip","tcltklib","eventflag","release_type","varaccessflag","tempfile","remover","test1","textitem","thwait","thread","threaderror","threadgroup","thwait","tick","time","timeout","error","timeouterror","tk","blt","barchart","bitmap","busy","shield","container","cutbuffer","dnd","dragdrop","dnd_handle","packagecommand","validateargs","sitecommand","validateargs","token","eps","graph","graphcommand","hiertable","htext","plotcomponent","axis","bar","bitmapmarker","crosshairs","element","gridline","imagemarker","legend","line","linemarker","marker","optkeys","pen","polygonmarker","postscript","textmarker","windowmarker","printer","spline","stripchart","table","tablecontainer","tabnotebook","tab","tabset","namedtab","tab","ted","tile","button","checkbutton","checkbutton","frame","label","radiobutton","radiobutton","scrollbar","toplevel","tree","node","notify","tag","trace","treeview","configmethod","findexecflagvalue","validateargs","node","openclosecommand","validateargs","tag","tagorid_methods","vector","vectoraccess","watch","winop","winop","bwidget","arrowbutton","bitmap","button","buttonbox","combobox","dialog","dragsite","dropsite","dynamichelp","entry","label","labelentry","labelframe","listbox","event_for_items","item","mainframe","messagedlg","notebook","event_for_tabs","pagesmanager","panedwindow","panelframe","passwddlg","progressbar","progressdlg","scrollview","scrollableframe","scrolledwindow","selectcolor","dialog","menubutton","menubutton","selectfont","dialog","toolbar","separator","spinbox","statusbar","titleframe","tree","event_for_items","node","widget","binarystring","busy","button","canvas","checkbutton","clock","encodedstring","entry","frame","html_widget","clippingwindow","icons","img","bmp","gif","ico","jpeg","pcx","pixmap","png","ppm","ps","sgi","sun","tga","tiff","window","xbm","xpm","itcl","itclobject","itemvalidateconfigure","itk","archetype","component","toplevel","widget","iwidgets","buttonbox","calendar","calendarcommand","validateargs","canvasprintbox","canvasprintdialog","checkbox","combobox","dateentry","datefield","dialog","dialogshell","disjointlistbox","entryfield","entryfieldvalidate","validateargs","extbutton","extfileselectionbox","extfileselectiondialog","feedback","fileselectionbox","fileselectiondialog","finddialog","hierarchy","iconcommand","validateargs","indicatorcommand","validateargs","querycommand","validateargs","hyperhelp","labeledframe","labeledwidget","mainwindow","menubar","messagebox","messagedialog","notebook","optionmenu","panedwindow","promptdialog","pushbutton","radiobox","scopedobject","scrolledcanvas","scrolledframe","scrolledhtml","scrolledlistbox","scrolledtext","scrolledwidget","selectionbox","selectiondialog","shell","spindate","spinint","spinner","entryfieldvalidate","validateargs","spintime","tabnotebook","tabset","timeentry","timefield","toolbar","watch","label","labelframe","listbox","macresource","menu","tkinternalfunction","clonemenu","menubutton","message","optionmenubutton","optionmenu","optionobj","panedwindow","radiobutton","rbwidget","alignbox","autoscrolllistbox","balloonhelp","combobox","editable_listbox","hbox","hrbox","scrollframe","vbbox","vbox","root","scale","scrollable","scrollbar","scrollbarcomposite","spinbox","spincommand","validateargs","sysmenu_apple","sysmenu_help","sysmenu_system","systemmenu","toplevel_aliases","tclx","xpg3_msgcat","tcllib","autoscroll","ctext","chatwidget","crosshair","cursor","datefield","datefield","diagrams","getstring_dialog","history","ico","ip6_entry","ipentry","ipentry6","ipentry","ip6_entry","khim","help","tk::tcllib::ntext","plotchart","barchart","barchart3d","boxplot","chartmethod","ganttchart","histogram","horizontalbarchart","isometricplot","isometricplot","piechart","plot3d","plotseries","polarplot","polarplot","radialchart","ribbonchart3d","rightaxis","stripchart","txplot","timechart","xlogyplot","xyplot","style","swaplist_dialog","tablelist","tablelist_tile","tablelist","tablelistitemconfig","tablelist_tile","tkpiechart","boxlabeler","configmethod","label","peripherallabeler","pie","piechartobj","slice","tooltip","widget","calendar","canvas_sqmap","canvas_zoom","dateentry","dateentry","dialog","menuentry","menuentry","panelframe","panelframe","ruler","screenruler","screenruler","scrolledwindow","scrolledwindow","statusbar","superframe","toolbar","toolbaritem","toolbaritemconfig","text","indexmodmethods","indexstring","tile","button","checkbutton","checkbutton","combobox","dialog","entry","font","frame","keynav","label","labelframe","labelframe","menubutton","menubutton","notebook","parsestylelayout","progress","progressbar","radiobutton","radiobutton","scale","scrollbar","separator","sizegrip","sizegrip","spinbox","square","style","button","checkbutton","tcheckbutton","combobox","entry","frame","label","tlabelframe","labelframe","tmenubutton","menubutton","notebook","tpaned","progress","progressbar","radiobutton","tradiobutton","scale","scrollbar","separator","spinbox","spincommand","validateargs","square","tilewidget","treeview","item","root","tag","treeviewconfig","xscrollbar","yscrollbar","tkdnd","dnd","dnd_subst","shape","tksystemmenu","tktable","browsecommand","validateargs","cellcommand","validateargs","celltag","configmethod","namedcelltag","selectioncommand","validateargs","validatecommand","validateargs","tktrans","toplevel","treectrl_widget","bindcallback","bitmapelement","borderelement","column","configmethod","element","imageelement","item","notifyevent","rectangleelement","style","treectrl_widget","trofs","ttk","utf8_string","validateconfigure","vu","bargraph","chartsconfig","dial","namedpieslice","pie","pieslice","piesliceconfigmethod","tkcbarchart","tkcsticker","tkcstripchart","windde","winregistry","winico","winico_callback","validateargs","wm","wm_for_general","xscrollable","xscrollbar","x_scrollable","yscrollable","yscrollbar","y_scrollable","tkafter","tkbgerror","tkbindtag","bitmapimage","tkcallbackbreak","tkcallbackcontinue","tkcallbackentry","tkcallbackredo","tkcallbackretry","tkcallbackreturn","tkcallbackthrow","tkcanvasitemconfig","tkclipboard","tkcomm","tkcomposite","tkconsole","tkcore","tk_object_table","tkdialog","tkdialog2","tkdialog2","tkdialog_demo1","tkdialog_demo2","tkevent","event","grp","statemask","typenum","font","chooser","coremethods","descendantfont","tkgoldberg_demo","grid","tkhtml_file_viewer","tkimage","tkimg_demo","tkitemconfigmethod","tkitemconfigoptkeys","tkitemfontoptkeys","tkkernel","tkkinput","tklistitemconfig","tklocaljumperror","tkmanagefocus","tkmenuentryconfig","tkmenuspec","tkmenubar","tkmsgcat","tkmsgcat","tkmulticolumnlist","tkmultilistframe","tkmultilistbox","tknamedfont","tknamespace","ensemble","nscode","scopeargs","tkobject","tkoption","tkresourcedb","priority","pack","tkpackage","tkpalette","photoimage","tkpixmapimage","place","tkrttimer","tkresourcedb","tkscrollbox","tkscrolledcanvas","selection","tktextframe","tktextio","tktimage","tktmark","tktmarkanchor","tktmarkcurrent","tktmarkinsert","tktnamedmark","tktnamedtag","tkttag","tktexttagconfig","tkttagsel","tktextwin","tktwindow","tkafter","tktreatitemfont","tktreattagfont","tktree","tktreectrl_demo","tkutil","callbacksubst","info","tkvalidatecommand","validateargs","tkvalidation","validatecmd","action","tkvaraccess","variable","virtualevent","predefvirtevent","tknamedvirtualevent","tkwarning","tkwarning2","tkwarning2","tkwindow","winfo","tkxim","arc","bitmap","tkcgroup","tkcimage","tkcitem","line","tkcnamedtag","oval","polygon","rectangle","tkctag","tkctagaccess","tkctagall","tkctagcurrent","tkcnamedtag","textitem","windowitem","tktimage","tktmark","tktmarkanchor","tktmarkcurrent","tktmarkinsert","tktnamedmark","tktnamedtag","tkttag","tkttagsel","tktwindow","toggle","tracer","transformation","trueclass","tuplespace","template","typeerror","udpsocket","unixserver","unixsocket","uri","badurierror","error","escape","ftp","generic","http","https","invalidcomponenterror","invalidurierror","ldap","ldaps","mailto","parser","regexp","pattern","unboundmethod","unicodeout_sampleframe","vcs","git","notfounderror","svn","variable","vector","zerovectorerror","version","requirement","viewicons","virtualevent","webrick","accesslog","accesslogerror","basiclog","cgi","socket","config","cookie","daemon","fakeproxyuri","genericserver","htmlutils","httpauth","authenticator","basicauth","digestauth","htdigest","htgroup","htpasswd","proxyauthenticator","proxybasicauth","proxydigestauth","userdb","httpproxyserver","httprequest","httpresponse","httpserver","mounttable","httpservererror","httpservlet","abstractservlet","cgihandler","defaultfilehandler","erbhandler","filehandler","httpservleterror","prochandler","httpstatus","clienterror","eoferror","error","info","redirect","servererror","status","success","httputils","formdata","httpversion","log","nullreader","servererror","simpleserver","utils","timeouthandler","win32comgen","win32ole","variant","win32oleruntimeerror","win32ole_event","win32ole_method","win32ole_param","win32ole_type","win32ole_typelib","win32ole_variable","win32ole_variant","weakref","referror","win32","registry","api","constants","error","kernel32","predefinedkey","resolv","kernel32","sspi","api","identity","negotiateauth","sspiresult","securitybuffer","securityhandle","timestamp","win32api","windowitem","winfo","x509","xml","parser","xmlencoding_ja","sjishandler","xmlrpc","base64","basicserver","cgiserver","client","proxy","config","convert","create","datetime","faultexception","marshal","marshallable","modrubyserver","parsecontenttype","parserwriterchoosemixin","server","service","basicinterface","interface","publicinstancemethodsinterface","webrickservlet","xmlparser","abstractstreamparser","abstracttreeparser","nqxmlparser","nqxmlstreamparser","xmlrpcparser","nqxmltreeparser","rexmlstreamparser","streamlistener","streamparsermixin","xmlparser","xmlscanstreamparser","xmlscanparser","xmlstreamparser","xmltreeparser","xmlwriter","abstract","simple","xmlparser","xmp","stringinputmethod","yaml","dbm","store","zerodivisionerror","zlib","buferror","dataerror","deflate","error","gzipfile","crcerror","error","lengtherror","nofooter","gzipreader","gzipwriter","inflate","memerror","needdict","streamend","streamerror","versionerror","zstream","fatal","unknown","unknown","!()","!()","!=()","!=()","!~~()","=~()","=~()","=~()","=~()","=~()","=~()","=~()","=~()","=~()","=~()",">()",">()",">()",">()",">()",">()",">()",">=()",">=()",">=()",">=()",">=()",">=()",">>()",">>()",">>()",">>()",">>()",">>()",">>()","apop()","apop()","apop()","apop()","array()","bigdecimal()","binarystring()","csv()","call()","closekey()","complex()","createkey()","currentcontext()","debug()","debug=()","delegateclass()","deletekey()","deletevalue()","digest()","e()","escdelay()","escdelay=()","encodedstring()","enumkey()","enumvalue()","fail()","fail()","fail()","fail()","fail()","fail()","fail()","float()","flushkey()","grid()","i()","inspector()","integer()","javadsocompatible()","javadsocompatible=()","jobmanager()","log_mask()","log_mask()","log_upto()","log_upto()","mainloop()","marshal()","openkey()","pi()","pack()","pathname()","permalink?()","place()","proxy()","proxy()","queryinfokey()","queryvalue()","raise()","raise()","raise()","raise()","rational()","setvalue()","string()","string()","tabsize()","tabsize=()","tkgrid()","tkpack()","tkplace()","token()","utf8_string()","validencoding()","xlfdfont()","xmldocument()","xmldocumentdefault_master()","_default_master()","_default_master()","_default_master()","_ip_table()","_ip_table()","_ip_table()","_ip_table()","_n()","_permalink?()","_tk_table_list()","_tk_table_list()","_tk_table_list()","_tk_table_list()","__blt_eps_item_boolval_optkeys()","__blt_eps_item_strval_optkeys()","__ignore_unknown_configure_option__()","__import_tile_widgets__!()","__import_tile_widgets__!()","__import_tile_widgets__!()","__boolval_optkeys()","__callee__()","__cget_cmd()","__cget_cmd()","__cget_cmd()","__check_available_itemconfigure_options()","__check_proc_string__()","__config_cmd()","__config_cmd()","__conv_item_keyonly_opts()","__conv_item_vcmd_on_hash_kv()","__conv_vcmd_on_hash_kv()","__create_safe_slave_obj()","__create_safe_slave_obj()","__create_safe_slave_obj()","__create_safe_slave_obj()","__create_trusted_slave_obj()","__create_trusted_slave_obj()","__create_trusted_slave_obj()","__create_trusted_slave_obj()","__create_widget_set__()","__current_itemconfiginfo()","__def_validcmd()","__def_validcmd()","__define_loadimages_proc_for_compatibility__!()","__define_loadimages_proc_for_compatibility__!()","__define_loadimages_proc_for_compatibility__!()","__define_wrapper_proc_for_compatibility__!()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__destroy_hook__()","__disable_toplevel_control__()","__drbref()","__drbref()","__drburi()","__drburi()","__encoding()","__eval()","__eval()","__eval()","__eval()","__eval()","__eval()","__eval__()","__evaluate__()","__exit__()","__font_optkeys()","__get_item_validate_key2class()","__get_validate_key2class()","__getip()","__getip()","__getip()","__getip()","__getobj__()","__getobj__()","__id__()","__import_toplevel_aliases__()","__init_ip_env__()","__init_ip_env__()","__init_ip_env__()","__init_ip_env__()","__initialize__()","__inspect__()","__instance_eval()","__instance_variable_get()","__instance_variable_set()","__instance_variables()","__invoke()","__invoke()","__invoke()","__invoke()","__invoke()","__invoke()","__invoke__()","__item_validation_class_list()","__item_validation_class_list()","__item_validcmd_call()","__itemcget()","__itemcget()","__itemcget_strict()","__itemcget_strict()","__itemcget_tkstring()","__itemcget_tkstring()","__itemconfiginfo()","__itemconfiginfo_core()","__itemconfigure()","__method__()","__method_missing_alias_for_multitkip__()","__methodcall_optkeys()","__new()","__new()","__new()","__new()","__new__()","__pathname()","__pathname()","__pseudo_toplevel()","__pseudo_toplevel()","__pseudo_toplevel()","__pseudo_toplevel()","__pseudo_toplevel()","__pseudo_toplevel()","__pseudo_toplevel()","__pseudo_toplevel()","__pseudo_toplevel=()","__pseudo_toplevel=()","__pseudo_toplevel=()","__pseudo_toplevel=()","__pseudo_toplevel=()","__pseudo_toplevel=()","__pseudo_toplevel=()","__pseudo_toplevel=()","__pseudo_toplevel_evaluable=()","__pseudo_toplevel_evaluable=()","__pseudo_toplevel_evaluable=()","__pseudo_toplevel_evaluable=()","__pseudo_toplevel_evaluable=()","__pseudo_toplevel_evaluable=()","__pseudo_toplevel_evaluable=()","__pseudo_toplevel_evaluable=()","__pseudo_toplevel_evaluable?()","__pseudo_toplevel_evaluable?()","__pseudo_toplevel_evaluable?()","__pseudo_toplevel_evaluable?()","__pseudo_toplevel_evaluable?()","__pseudo_toplevel_evaluable?()","__pseudo_toplevel_evaluable?()","__pseudo_toplevel_evaluable?()","__regist_toplevel_aliases__()","__remove_toplevel_aliases__()","__reset_toplevel_owner__()","__send__()","__set_ignore_unknown_configure_option__!()","__set_loaded_toplevel_aliases__()","__set_toplevel_aliases__()","__setobj__()","__setobj__()","__tile_specific_item_optkeys()","__to_s__()","__toplevel_alias_setup_proc__()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validation_class_list()","__validcmd_call()","_add_new_tables()","_add_new_tables()","_add_new_tables()","_add_new_tables()","_add_tk_procs()","_add_tk_procs()","_add_tk_procs()","_add_tk_procs()","_at()","_barmcmd()","_brelief()","_bside()","_bstate()","_butcmd()","_button()","_callback_entry?()","_callback_entry_class?()","_cancel_eval()","_cancel_eval_unwind()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_config_keys()","_conv_args()","_conv_args()","_conv_listelement()","_conv_listelement()","_conv_listelement()","_conv_listelement()","_conv_listelement()","_conv_listelement()","_conv_listelement()","_conv_listelement()","_create()","_create_console()","_create_console()","_create_console()","_create_console()","_create_console()","_create_console()","_create_intro()","_create_marks()","_create_slave_object()","_create_slave_object()","_create_slave_object()","_create_slave_object()","_curr_cmd_id()","_default_delete_hook()","_default_delete_hook()","_default_delete_hook()","_default_delete_hook()","_define_attribute_aliases()","_delete_slice()","_destroy_slaves_of_slaveip()","_destroy_slaves_of_slaveip()","_destroy_slaves_of_slaveip()","_destroy_slaves_of_slaveip()","_dump()","_dump()","_dump()","_dump()","_dump()","_dump()","_dump()","_dump()","_element_value()","_element_value()","_entry()","_entry_slice()","_eval()","_eval()","_eval()","_eval()","_eval()","_eval()","_eval_with_enc()","_eval_with_enc()","_eval_with_enc()","_eval_with_enc()","_eval_with_enc()","_eval_without_enc()","_eval_without_enc()","_eval_without_enc()","_eval_without_enc()","_eval_without_enc()","_eval_without_enc()","_exit()","_find_exec_flag_value()","_fromutf8()","_fromutf8()","_fromutf8()","_fromutf8()","_fromutf8()","_fromutf8()","_fromutf8()","_fromutf8()","_fromutf8()","_genobj_for_tkwidget()","_get_all_subst_keys()","_get_eval_enc_str()","_get_eval_enc_str()","_get_eval_string()","_get_eval_string()","_get_extra_args_tbl()","_get_extra_args_tbl()","_get_extra_args_tbl()","_get_extra_args_tbl()","_get_global_var()","_get_global_var()","_get_global_var()","_get_global_var()","_get_global_var()","_get_global_var()","_get_global_var2()","_get_global_var2()","_get_global_var2()","_get_global_var2()","_get_global_var2()","_get_global_var2()","_get_subst_key()","_get_variable()","_get_variable()","_get_variable()","_get_variable()","_get_variable()","_get_variable()","_get_variable2()","_get_variable2()","_get_variable2()","_get_variable2()","_get_variable2()","_get_variable2()","_getproperty()","_httpdate()","_id2ref()","_immediate_invoke()","_init_ip_env()","_init_ip_env()","_init_ip_env()","_init_ip_env()","_init_ip_internal()","_init_ip_internal()","_init_ip_internal()","_init_ip_internal()","_initialize_for_cb_class()","_invoke()","_invoke()","_invoke()","_invoke()","_invoke()","_invoke()","_invoke()","_invoke_with_enc()","_invoke_with_enc()","_invoke_with_enc()","_invoke_with_enc()","_invoke_with_enc()","_invoke_without_enc()","_invoke_without_enc()","_invoke_without_enc()","_invoke_without_enc()","_invoke_without_enc()","_invoke_without_enc()","_ip_id_()","_ip_id_()","_ip_id_()","_ip_id_()","_ip_id_()","_ip_id_()","_ip_id_()","_ip_id_()","_ip_id_()","_ip_id_()","_is_master_of?()","_is_master_of?()","_is_master_of?()","_is_master_of?()","_is_master_of?()","_iso8601()","_jisx0301()","_label()","_load()","_load()","_load()","_load()","_load()","_load()","_load()","_mainframe()","_make_menu_embeddable()","_make_menu_embeddable()","_make_menu_embeddable()","_make_menu_embeddable()","_make_menu_embeddable()","_merge_tklist()","_merge_tklist()","_merge_tklist()","_merge_tklist()","_merge_tklist()","_merge_tklist()","_merge_tklist()","_merge_tklist()","_msgdlg()","_next_cmd_id()","_notebook()","_paned()","_parse()","_parse_menu_spec()","_proc_on_current_safelevel()","_proc_on_current_safelevel()","_proc_on_current_safelevel()","_proc_on_current_safelevel()","_proc_on_current_safelevel()","_proc_on_current_safelevel()","_proc_on_current_safelevel()","_proc_on_current_safelevel()","_proc_on_safelevel()","_proc_on_safelevel()","_proc_on_safelevel()","_proc_on_safelevel()","_proc_on_safelevel()","_proc_on_safelevel()","_proc_on_safelevel()","_proc_on_safelevel()","_puts()","_receiver_mainloop()","_receiver_mainloop()","_receiver_mainloop()","_receiver_mainloop()","_remove_tk_procs()","_remove_tk_procs()","_remove_tk_procs()","_remove_tk_procs()","_return_value()","_return_value()","_return_value()","_return_value()","_return_value()","_return_value()","_rfc2822()","_rfc3339()","_rfc822()","_round_poly2()","_set_global_var()","_set_global_var()","_set_global_var()","_set_global_var()","_set_global_var()","_set_global_var()","_set_global_var2()","_set_global_var2()","_set_global_var2()","_set_global_var2()","_set_global_var2()","_set_global_var2()","_set_last_value()","_set_variable()","_set_variable()","_set_variable()","_set_variable()","_set_variable()","_set_variable()","_set_variable2()","_set_variable2()","_set_variable2()","_set_variable2()","_set_variable2()","_set_variable2()","_setproperty()","_setup_subst_table()","_show_color()","_show_fontdlg()","_show_msgdlg()","_show_passdlg()","_show_progdlg()","_show_progress()","_show_tmpldlg()","_split_tklist()","_split_tklist()","_split_tklist()","_split_tklist()","_split_tklist()","_split_tklist()","_split_tklist()","_stddlg()","_stop()","_strptime()","_strptime()","_subst_tcl_backslash()","_subst_utf_backslash()","_sym2subst()","_symbolkey2str()","_symbolkey2str()","_thread_tkwait()","_thread_tkwait()","_thread_tkwait()","_thread_tkwait()","_thread_tkwait()","_thread_tkwait()","_thread_vwait()","_thread_vwait()","_thread_vwait()","_thread_vwait()","_thread_vwait()","_thread_vwait()","_tk_cmd_tbl()","_tk_cmd_tbl()","_tk_cmd_tbl()","_tk_cmd_tbl()","_tk_table_list()","_tk_table_list()","_tk_table_list()","_tk_table_list()","_tk_windows()","_tk_windows()","_tk_windows()","_tk_windows()","_tmpldlg()","_toutf8()","_toutf8()","_toutf8()","_toutf8()","_toutf8()","_toutf8()","_toutf8()","_toutf8()","_toutf8()","_unset_global_var()","_unset_global_var()","_unset_global_var()","_unset_global_var()","_unset_global_var()","_unset_global_var()","_unset_global_var2()","_unset_global_var2()","_unset_global_var2()","_unset_global_var2()","_unset_global_var2()","_unset_global_var2()","_unset_variable()","_unset_variable()","_unset_variable()","_unset_variable()","_unset_variable()","_unset_variable()","_unset_variable2()","_unset_variable2()","_unset_variable2()","_unset_variable2()","_unset_variable2()","_unset_variable2()","_update_progdlg()","_update_progress()","_value()","_value()","_xmlschema()","`()","a()","abbrev()","abbrev()","abbreviate()","abbreviate()","abort()","abort()","abort()","abort()","abort()","abort()","abort()","abort()","abort()","abort()","abort()","abort()","abort()","abort()","abort_on_exception()","abort_on_exception()","abort_on_exception=()","abort_on_exception=()","about()","above()","abs()","abs()","abs()","abs()","abs()","abs()","abs2()","abs2()","absolute()","absolute?()","absolute?()","absolute?()","absolutechildnumber()","absolute_path()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept_blank_line()","accept_blank_line()","accept_blank_line()","accept_charset()","accept_charset=()","accept_document()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_indented_paragraph()","accept_list_end()","accept_list_end()","accept_list_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_loop()","accept_nonblock()","accept_nonblock()","accept_nonblock()","accept_nonblock()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_raw()","accept_raw()","accept_raw()","accept_rule()","accept_rule()","accept_rule()","accept_uri_http()","accept_verbatim()","accept_verbatim()","accept_verbatim()","access_log()","acct()","ack()","acos()","acos()","acos!()","acosh()","acosh()","acosh!()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate()","activate_dependencies()","active()","active?()","active?()","active?()","active?()","active?()","active?()","active?()","active?()","active_gui()","active_job?()","active_jobs()","active_jobs_exist?()","active_legend()","active_legend()","active_process_controllers()","actual()","actual()","actual()","actual()","actual_displayof()","actual_displayof()","actual_displayof()","actual_displayof()","actual_hash()","actual_hash()","actual_hash()","actual_hash()","actual_hash_displayof()","actual_hash_displayof()","actual_hash_displayof()","actual_hash_displayof()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add!()","add?()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_also_in()","add_attribute()","add_attribute()","add_attribute()","add_attribute()","add_attributes()","add_authenticator()","add_bindir()","add_builtin_type()","add_builtin_type()","add_bulk_threshold_option()","add_cascade()","add_cell()","add_cert()","add_certid()","add_certificate()","add_checkbutton()","add_class()","add_class()","add_class()","add_class_or_module()","add_clear_sources_option()","add_col()","add_command()","add_comment()","add_common_option()","add_constant()","add_constant()","add_constant()","add_crl()","add_crl()","add_crl()","add_data()","add_date()","add_delegate_command_to_shell()","add_dependency()","add_description()","add_development_dependency()","add_domain_type()","add_domain_type()","add_element()","add_element()","add_entry()","add_event_to_arry()","add_event_to_arry()","add_extension()","add_extension()","add_extension()","add_extra_args()","add_field()","add_file()","add_file()","add_file()","add_file_simple()","add_filter()","add_found_dependencies()","add_from()","add_gem_contents()","add_generator()","add_handler()","add_handler()","add_have_children_element()","add_highlight_class()","add_highlight_class_for_regexp()","add_highlight_class_for_special_chars()","add_highlight_class_with_only_char_start()","add_html()","add_html()","add_import()","add_import()","add_include()","add_include()","add_includes()","add_indicator()","add_install_update_options()","add_introspection()","add_key_option()","add_line_numbers()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_loader()","add_loader()","add_local_remote_options()","add_maker()","add_map()","add_member()","add_menu()","add_menu()","add_menu()","add_menubar()","add_menubar()","add_metadata()","add_method()","add_method()","add_method()","add_method()","add_method_list()","add_module()","add_module()","add_module_alias()","add_multicall()","add_name()","add_namespace()","add_need_initialize_variable()","add_need_initialize_variable()","add_nonce()","add_nonce()","add_observer()","add_optimized()","add_option()","add_other_element()","add_owners()","add_path()","add_path()","add_platform()","add_platform_option()","add_plural_form()","add_prerelease_option()","add_private_type()","add_private_type()","add_private_type()","add_procs()","add_procs()","add_protocol()","add_proxy_option()","add_radiobutton()","add_recipient()","add_require()","add_response_handler()","add_revoked()","add_row()","add_row()","add_ruby_type()","add_ruby_type()","add_ruby_type()","add_rubygems_trusted_certs()","add_runtime_dependency()","add_sample()","add_sc()","add_schedule()","add_section()","add_self_to_load_path()","add_separator()","add_signatures()","add_signer()","add_source_option()","add_spec()","add_spec()","add_spec()","add_special()","add_special()","add_specific_extra_args()","add_specs()","add_specs()","add_specs()","add_status()","add_tag()","add_target()","add_text()","add_tk_procs()","add_tk_procs()","add_tk_procs()","add_tk_procs()","add_to()","add_to_classes_or_modules()","add_to_element_method()","add_to_list()","add_to_taskbar()","add_token()","add_token_listener()","add_tokens()","add_toolbar()","add_trace_func()","add_trusted_cert()","add_type()","add_unif()","add_update_sources_option()","add_value()","add_version_option()","add_word_pair()","add_word_pair()","addch()","addch()","addmon()","addr()","addr()","addr()","addstr()","addstr()","addtag()","addtag()","addtag()","addtag_above()","addtag_above()","addtag_all()","addtag_all()","addtag_below()","addtag_below()","addtag_closest()","addtag_closest()","addtag_enclosed()","addtag_enclosed()","addtag_overlapping()","addtag_overlapping()","addtag_withtag()","addtag_withtag()","adler()","adler32()","adler32_combine()","advise()","afamily()","after()","ajd()","alert()","alert()","alert_error()","alert_error()","alert_warning()","alert_warning()","alias()","alias()","alias()","alias_command()","alias_command()","alias_delete()","alias_delete()","alias_delete()","alias_delete()","alias_delete()","alias_delete()","alias_delete()","alias_delete()","alias_extension()","alias_info()","alias_info()","alias_info()","alias_info()","alias_info()","alias_info()","alias_info()","alias_info()","alias_map()","alias_target()","alias_target()","alias_target()","alias_target()","alias_target()","alias_target()","alias_target()","alias_target()","aliases()","aliases()","aliases()","aliases()","aliases()","aliases()","aliases()","aliases()","aliases()","alien()","align()","align()","align()","alignlabels()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","alive?()","all()","all()","all()","all=()","all?()","all_classes()","all_classes_and_modules()","all_classes_hash()","all_files()","all_files_hash()","all_gems()","all_gems()","all_load_paths()","all_modules()","all_modules_hash()","all_names()","all_symbols()","all_waits()","all_waits()","all_waits()","all_waits()","allocate()","allow_addr?()","allow_nan?()","allow_ruby_exit=()","allow_ruby_exit=()","allow_ruby_exit=()","allow_ruby_exit=()","allow_ruby_exit=()","allow_ruby_exit=()","allow_ruby_exit?()","allow_ruby_exit?()","allow_ruby_exit?()","allow_ruby_exit?()","allow_ruby_exit?()","allow_ruby_exit?()","allow_socket?()","alternate=()","amjd()","ancestorchildnumber()","ancestors()","ancestors()","ancestors()","ancestors()","ancestors()","ancestors_of()","anchor()","anchor()","anchor()","angle()","angle()","angle()","annotate()","annotate()","any?()","anyunreaddescendants()","any_char()","any_chars()","any_content()","any_indices()","any_line()","any_lines()","api_key()","apop?()","apop?()","apop?()","apop?()","apop?()","apop?()","app_script_text()","append()","append()","append()","append()","append()","append()","append()","append()","append()","append()","append()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appendchild()","appenddata()","appenddata()","appenddata()","appenddata()","append_data()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_on_display()","applet_cmd()","application()","application=()","apply()","apply()","appname()","appname()","appsend()","area()","areabind()","areabind_append()","areabind_remove()","areabindinfo()","aref()","aref()","aref()","aref_prefix()","aref_prefix()","aref_prefix()","aref_to()","arg()","arg()","arg()","arg_names()","arglists()","args()","arguments()","argv()","arity()","arity()","arity()","arrange()","array()","array2tk_list()","array_attributes()","array_nl()","array_nl=()","arrow()","arrowmove1()","arrowmove2()","arrowmove3()","arrowsetup()","as_href()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_string()","ascend()","ascii_actual()","ascii_actual()","ascii_actual_displayof()","ascii_actual_displayof()","ascii_compatible?()","ascii_configinfo()","ascii_configinfo()","ascii_configure()","ascii_configure()","ascii_font()","ascii_font()","ascii_metrics()","ascii_metrics()","ascii_only?()","ascii_only?()","ascii_replace()","ascii_replace()","ascii_text()","asciicompat_encoding()","asciifont()","asciifont()","asciifont_configure()","asciifont_copy()","asciitagfont_configure()","asciitagfont_copy()","asctime()","asctime()","asin()","asin()","asin!()","asinh()","asinh()","asinh!()","ask()","ask()","ask_for_password()","ask_for_password()","ask_for_password_on_unix()","ask_for_password_on_windows()","ask_if_ok()","ask_yes_no()","ask_yes_no()","asn1_flag()","asn1_flag=()","aspect()","aspect()","assert()","assign()","assign()","assign_names()","assign_receiver_and_watchdog()","assign_receiver_and_watchdog()","assign_receiver_and_watchdog()","assign_receiver_and_watchdog()","assigned_list()","assoc()","assoc()","assoc()","async()","async()","async()","async()","async=()","async=()","async=()","async=()","async_eval()","async_execute()","at()","at()","at()","at_end()","at_end()","at_exit()","atan()","atan()","atan()","atan!()","atan2()","atan2()","atan2!()","atanh()","atanh()","atanh!()","atime()","atime()","atime()","atime()","atom()","atom()","atom_validate()","atom_validate()","atom_validate()","atomname()","atomname()","attach()","attlistdecl()","attlistdecl()","attlistdecl?()","attribute()","attribute()","attribute()","attribute_config()","attribute_info()","attribute_names()","attribute_of()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes()","attributes=()","attributes=()","attributes_of()","attroff()","attroff()","attron()","attron()","attrset()","attrset()","auth_cram_md5()","auth_cram_md5()","auth_login()","auth_login()","auth_only()","auth_only()","auth_only()","auth_only()","auth_only()","auth_only()","auth_only()","auth_only()","auth_plain()","auth_plain()","authenticate()","authenticate()","authenticate()","authenticate()","authenticate()","author()","author=()","authors()","authors=()","autoclose=()","autoclose?()","autoload()","autoload()","autoload?()","autoload?()","autoscroll()","autoscroll()","autoscroll()","avail_in()","avail_out()","avail_out=()","available?()","available_tags()","average()","axe()","axis_bind()","axis_bind_append()","axis_bind_remove()","axis_bindinfo()","axis_cget()","axis_cget_strict()","axis_cget_tkstring()","axis_configinfo()","axis_configure()","axis_create()","axis_delete()","axis_invtransform()","axis_limits()","axis_names()","axis_transform()","axis_use()","axis_view()","back()","background()","background_call()","background_call()","background_call()","background_call()","background_eval()","background_eval()","background_eval()","background_eval()","background_eval_proc()","background_eval_proc()","background_eval_proc()","background_eval_proc()","background_eval_str()","background_eval_str()","background_eval_str()","background_eval_str()","background_eval_string()","background_eval_string()","background_eval_string()","background_eval_string()","backticks()","backtrace()","backtrace()","backtrace()","badoptionstring()","balloon()","balloonconfig()","banner()","bar()","bar()","bar_activate()","bar_bind()","bar_bind_append()","bar_bind_remove()","bar_bindinfo()","bar_cget()","bar_cget_strict()","bar_cget_tkstring()","bar_closest()","bar_configinfo()","bar_configure()","bar_create()","bar_deactivate()","bar_delete()","bar_exist?()","bar_names()","bar_show()","bar_type()","base()","base()","base64()","base64()","base64_decode()","base64_encode()","base64digest()","base64digest()","base64digest!()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","basename()","base_dir()","base_name()","basename()","basename()","basic()","basicmotion()","basic_auth()","basic_auth()","basic_quote_characters()","basic_quote_characters=()","basic_word_break_characters()","basic_word_break_characters=()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","bbox()","beep()","beep()","before()","before_running_rdoc()","begin()","begin()","begin_adding()","begin_adding()","beginning_of_line?()","begins?()","begx()","begy()","below()","bench()","bench_each()","benchmark()","benchmark()","benchmark()","between?()","bg_call()","bg_call()","bg_call()","bg_call()","bg_eval()","bg_eval()","bg_eval()","bg_eval()","bg_eval_proc()","bg_eval_proc()","bg_eval_proc()","bg_eval_proc()","bg_eval_str()","bg_eval_str()","bg_eval_str()","bg_eval_str()","bg_eval_string()","bg_eval_string()","bg_eval_string()","bg_eval_string()","bgerror()","bgerror()","bgerror()","bgerror()","bgerror()","bgexec()","bgimage()","bin_dir()","bin_file()","bin_path()","binary=()","binary?()","binary_base64()","binary_mode()","binary_request()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bind()","bindmousewheel()","bind_all()","bind_append()","bind_append()","bind_append()","bind_append()","bind_append()","bind_append()","bind_append()","bind_append()","bind_append()","bind_append_all()","bind_at_call()","bind_at_call()","bind_at_call()","bind_function()","bind_remove()","bind_remove()","bind_remove()","bind_remove()","bind_remove()","bind_remove()","bind_remove()","bind_remove()","bind_remove()","bind_remove_all()","bindinfo()","bindinfo()","bindinfo()","bindinfo()","bindinfo()","bindinfo()","bindinfo()","bindinfo()","bindinfo()","bindinfo_all()","binding()","binding()","bindir()","binmode()","binmode()","binmode()","binmode()","binmode()","binmode=()","binmode?()","binmode?()","binread()","binread()","binread()","binwrite()","bisque()","bit_set?()","bitmaprow()","bitmap_for()","bkgd()","bkgd()","bkgdset()","bkgdset()","blank()","blank()","blinding_off!()","blinding_off!()","blinding_on!()","blinding_on!()","blksize()","block()","block_given?()","block_input()","block_length()","block_length()","block_length()","block_length()","block_output_synchronize()","block_params=()","block_scanf()","block_yield()","blockdev?()","blockdev?()","blockdev?()","blockdev?()","blockquote()","blocks()","blowup()","blt_table_add()","blt_table_arrange()","blt_table_cget()","blt_table_cget_strict()","blt_table_cget_tkstring()","blt_table_configinfo()","blt_table_configure()","blt_table_current_configinfo()","blt_table_current_itemconfiginfo()","blt_table_delete()","blt_table_extents()","blt_table_insert()","blt_table_insert_after()","blt_table_insert_before()","blt_table_itemcget()","blt_table_itemcget_strict()","blt_table_itemcget_tkstring()","blt_table_itemconfiginfo()","blt_table_itemconfigure()","blt_table_iteminfo()","blt_table_join()","blt_table_locate()","blt_table_save()","blt_table_search()","blt_table_split()","bltdebug()","bm()","bm()","bmbm()","body()","body()","body()","body()","body=()","body=()","body_exist?()","body_permitted?()","body_stream=()","bool()","bool()","bool()","bool()","bool()","bool()","bool=()","bool=()","bool_element()","bool_element()","bool_type=()","bool_type=()","boolean()","boolean()","border_dragto()","border_mark()","border_mark_col()","border_mark_row()","both?()","bottom()","bottom()","bound?()","box()","box()","box()","box_and_whiskers()","box_whiskers()","boxcoords()","bracket()","break()","break?()","break_outmost_groups()","break_points()","break_points()","break_text()","breakable()","breakable()","broadcast()","broadcast()","broadcast()","browse()","browsedir()","buffersize()","buffertype()","bufsize()","bufsize=()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build2()","build_args()","build_args=()","build_cert()","build_extensions()","build_heading()","build_indicies()","build_legacy_indicies()","build_list()","build_marshal_gemspecs()","build_modern_index()","build_modern_indicies()","build_paragraph()","build_rss()","build_self_signed_cert()","build_string()","build_tree()","build_verbatim()","builtin_curves()","bump()","busy()","busy_cget()","busy_configinfo()","busy_configure()","busy_current?()","busy_current_configinfo()","busy_forget()","busy_hold()","busy_status()","butpress()","button_activate()","button_activate()","button_bind()","button_bind()","button_bind_append()","button_bind_append()","button_bind_remove()","button_bind_remove()","button_bindinfo()","button_bindinfo()","button_cget()","button_cget_strict()","button_cget_tkstring()","button_configinfo()","button_configure()","bwinclude()","by_col()","by_col!()","by_col_or_row()","by_col_or_row!()","by_id()","by_row()","by_row!()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes_read()","bytesize()","byteslice()","c_esc()","c_esc()","c_str()","cache()","cache_dir()","cache_dir()","cache_dir()","cache_file()","cache_gem()","cache_gem()","cache_path()","cachesize=()","calc_each()","calc_stat()","calculate()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call2()","call2_async()","call_async()","call_font_configure()","call_font_configure()","call_method()","call_proc()","callable_methods()","callback()","callback()","callback()","callback()","callback()","callback()","callback()","callback()","callback_break()","callback_continue()","callback_return()","callcc()","caller()","calltype()","calltype=()","can_change_color?()","can_parse()","cancel()","cancel()","cancel()","cancel()","cancel()","cancel()","cancel()","cancel()","cancel()","cancel_on_exception=()","cancel_on_exception=()","cancel_on_exception?()","cancel_on_exception?()","canceled?()","candidate()","candidate()","candidate()","canonical()","canonical=()","canonical_each()","canonname()","canvas()","canvas_x()","canvas_y()","canvasx()","canvasx()","canvasy()","canvasy()","capabilities()","capability()","capable_auth_types()","capable_auth_types()","capable_cram_md5_auth?()","capable_cram_md5_auth?()","capable_login_auth?()","capable_login_auth?()","capable_plain_auth?()","capable_plain_auth?()","capable_starttls?()","capable_starttls?()","capitalize()","capitalize()","capitalize!()","caption()","capture2()","capture2e()","capture3()","captures()","caret()","caret()","casecmp()","casecmp()","casefold?()","cat()","catch()","cb_call()","cb_call()","cb_call()","cb_entry_class()","cb_entry_class()","cb_entry_class()","cb_entry_class()","cb_error()","cb_error()","cb_error()","cb_error()","cb_eval()","cb_eval()","cb_eval()","cb_eval()","cbreak()","cbreak()","cbrt()","cbrt()","cbrt!()","cd()","cd()","cdata()","cdata()","cdata?()","cdatas()","ceil()","ceil()","ceil()","ceil()","ceil()","ceil()","ceiling()","cell()","cells()","cells()","center()","center()","centroid()","cert()","cert()","cert2text()","certid()","certificates()","certificates=()","certs()","certs()","certs()","certs()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_strict()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","cget_tkstring()","chain()","chain=()","challenge()","challenge()","challenge()","challenge=()","changestate()","changetoolbars()","change_attribute()","change_privilege()","change_privilege()","change_workspace()","changed()","changed?()","changed_attribute_by_name()","changepage()","changes()","changes()","char()","character()","character()","characters()","chardev?()","chardev?()","chardev?()","chardev?()","chars()","chars()","chars()","chars()","chars()","charset()","charset()","charset=()","charset_alias()","charset_map()","chat_widget()","chdir()","chdir()","chdir()","chdir()","check()","check()","check()","check()","check()","check()","check()","check_ng_path()","check_arity()","check_break_points()","check_circular?()","check_closed()","check_encoding()","check_files()","check_generator()","check_insecure_method()","check_inspect_key()","check_key()","check_names()","check_nonce()","check_pkg()","check_point()","check_private_key()","check_ruby_version()","check_shlib_search_path()","check_signedness()","check_sizeof()","check_square()","check_suspend()","check_tcl_ng_path()","check_tcltk_version()","check_that_user_bin_dir_is_in_path()","check_tk_ng_path()","check_until()","check_validity()","checkbox()","checkbox_group()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnodes()","childnumber()","child_name()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site()","child_site_list()","child_site_list()","child_site_list()","children()","children()","children()","children()","children()","children()","children()","children_with_index()","chmod()","chmod()","chmod()","chmod()","chmod()","chmod_r()","chomp()","chomp()","chomp!()","choose_from_list()","choose_from_list()","chop()","chop()","chop!()","chown()","chown()","chown()","chown()","chown_r()","chr()","chr()","chr()","chroot()","chunk()","chunked=()","chunked?()","chunked?()","cipher()","cipher()","cipher()","cipher=()","ciphers()","ciphers()","ciphers()","ciphers=()","circle()","citrus_cstomb()","citrus_decode_mapsrc()","citrus_euc_cstomb()","citrus_mskanji_cstomb()","citrus_stateless_iso_cstomb()","civil()","civil()","class()","class()","class_attributes()","class_dir()","class_document()","class_eval()","class_exec()","class_file()","class_method_list()","class_methods()","class_name()","class_name()","class_name()","class_path()","class_variable_defined?()","class_variable_get()","class_variable_set()","class_variables()","classes()","classes()","classes()","classes()","classes_and_includes_for()","classes_and_modules()","classes_hash()","classes_hash()","classicanchor()","classicanchor=()","classicextras()","classicextras=()","classicmouseselect()","classicmouseselect=()","classicwordbreak()","classicwordbreak=()","classicwrap()","classicwrap=()","classify()","classname()","classname()","cleanpath()","cleanup()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear_actions()","clear_all()","clear_cache()","clear_cache()","clear_children()","clear_comment()","clear_exclude()","clear_glob()","clear_highlight_classes()","clear_items()","clear_items()","clear_on_display()","clear_on_display()","clear_on_display()","clear_paths()","clear_prerequisites()","clear_screen()","clear_selection()","clear_selection()","clear_sizes()","clear_suspend()","clear_tags()","clear_value()","clear_widgets()","clearvalue()","clicks()","client()","client()","client()","client_ca()","client_error?()","client_frame()","clipping_window()","clipwin()","clobber_task_description()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clonenode()","clone_menu()","clonename()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close!()","close_enabled?()","close_on_exec=()","close_on_exec?()","close_read()","close_read()","close_read()","close_read()","close_recurse()","close_recurse()","close_screen()","close_tree()","close_tree()","close_write()","close_write()","close_write()","close_write()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed_read?()","closed_write?()","closest()","closest()","closest_point()","closest_point()","clrtoeol()","clrtoeol()","cmd()","cmds()","cmp()","cmp()","cmp()","cmp_issuer()","cmsg_is?()","code()","code()","code_in_namespace()","codepage()","codepage=()","codepoints()","codepoints()","codepoints()","codepoints()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","cofactor()","col_index()","collapse()","collect()","collect()","collect()","collect()","collect!()","collect!()","collect2()","collect_concat()","collect_first_comment()","collect_specs()","collect_tasks()","collect_tasks()","collect_tcltk_defs()","collect_tokens()","color()","color()","color()","color_content()","color_map()","color_of_part()","color_pair()","color_pairs()","color_set()","colorize()","colormap()","colormap()","colormapfull()","colormapfull()","colormapwindows()","colormapwindows()","colors()","colors()","colors()","colors()","colors()","colour()","colour()","colours()","colours()","colours()","colours()","cols()","column()","column()","column()","column()","column_activate()","column_cget()","column_cget()","column_cget()","column_cget_strict()","column_cget_strict()","column_cget_strict()","column_cget_tkstring()","column_cget_tkstring()","column_cget_tkstring()","column_configinfo()","column_configinfo()","column_configinfo()","column_configure()","column_configure()","column_configure()","column_delete()","column_dragcget()","column_dragcget_strict()","column_dragcget_tkstring()","column_dragconfiginfo()","column_dragconfigure()","column_insert()","column_invoke()","column_move()","column_names()","column_nearest()","column_vector()","column_vectors()","columncget()","columncget_strict()","columncget_tkstring()","columnconfiginfo()","columnconfiginfo()","columnconfiginfo()","columnconfigure()","columnconfigure()","columnconfigure()","columns()","columns()","columns()","columns()","combination()","comma_breakable()","command()","command()","command()","command()","command()","command()","command()","command=()","command_names()","comment()","comment()","comment()","comment()","comment=()","comment=()","comment=()","comment=()","comment=()","comment?()","comments()","commercial()","commercial()","commit()","commit()","common_options()","compact()","compact!()","compact_specs()","compare()","compare()","compareonoff()","compare_by_identity()","compare_by_identity?()","compare_file()","compare_language()","compare_stream()","compatible?()","compile()","compile()","compile()","compile()","compile_file()","compile_option()","compile_option=()","compiled?()","complain()","complete()","complete()","complete()","complete()","complete()","complete?()","complete?()","complete_authentication()","completer_quote_characters()","completer_quote_characters=()","completer_word_break_characters()","completer_word_break_characters=()","completion_append_character()","completion_append_character=()","completion_case_fold()","completion_case_fold=()","completion_proc()","completion_proc=()","component()","component()","component()","component()","component()","component_ary()","component_invoke()","component_obj()","component_path()","component_widget()","compose()","compose()","compose_with_name()","compress()","compress_indicies()","compute_key()","compute_size()","compute_size()","computepos()","concat()","concat()","concat()","concat()","concat()","conf()","config()","config()","config=()","config_file()","config_file_name()","configbody()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configinfo()","configuration()","configuration=()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure_cmd()","configure_cmd()","configure_connection_for_https()","configured_args()","configured_args=()","conflicts()","confuginfo()","confugure()","conj()","conj()","conj()","conjugate()","conjugate()","conjugate()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect_address()","connect_from()","connect_nonblock()","connect_nonblock()","connect_to()","connecting()","connection_close?()","connection_for()","connection_keep_alive?()","connections()","console()","console_size()","const_defined?()","const_defined_in?()","const_get()","const_load()","const_missing()","const_missing()","const_missing()","const_missing()","const_missing()","const_set()","const_warning()","const_warning()","constantize_agename()","constants()","constants()","constrain()","construct()","consume()","consume()","consume()","containers()","containers_pattern()","containers_slave()","containing()","containing()","contains()","contains_requirable_file?()","content=()","content=()","content_encoding()","content_length()","content_length()","content_length()","content_length()","content_length=()","content_length=()","content_range()","content_setup()","content_type()","content_type()","content_type()","content_type()","content_type()","content_type=()","content_type=()","context()","context()","context()","context()","context=()","continue()","continue()","continue()","continue()","continue?()","continue_timeout=()","continue_timeout=()","contourbox()","contourfill()","contourlines()","conv()","conv()","conversion()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert_attrs()","convert_flow()","convert_html()","convert_special()","convert_special()","convert_specials()","convert_string()","convert_string()","convert_string()","converter=()","converters()","convertible_int()","convolve()","convolve()","convpath()","cooked()","cooked()","cooked!()","coords()","coords()","coords()","coords()","coords()","coords()","coords_3d_to_pixel()","coords_3d_to_pixel()","coords_to_pixel()","coords_to_pixel()","coords_to_time()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy_entry()","copy_file()","copy_files()","copy_nonce()","copy_stream()","copy_stream()","copy_string()","copy_to()","coredump?()","correct?()","correct_for_windows_path()","cos()","cos()","cos()","cos!()","cosh()","cosh()","cosh!()","count()","count()","count()","count()","count()","count()","count_objects()","count_observers()","covector()","cover?()","coverage_level=()","cp()","cp()","cp_r()","cram_md5_challenge()","crc()","crc32()","crc32()","crc32_combine()","crc32_data()","crc32_file()","crc_table()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create=()","create=()","createattribute()","createattribute()","createattribute()","createcdatasection()","createcdatasection()","createcdatasection()","createcomment()","createcomment()","createcomment()","createdocumentfragment()","createdocumentfragment()","createdocumentfragment()","createelement()","createelement()","createelement()","createelement()","createentityreference()","createentityreference()","createentityreference()","creatematchpatterns()","createnode()","createnode()","createnode()","createprocessinginstruction()","createprocessinginstruction()","createprocessinginstruction()","createtextnode()","createtextnode()","createtextnode()","create_archive()","create_asciifont()","create_asciifont()","create_carried_function()","create_carrier()","create_compoundfont()","create_compoundfont()","create_container()","create_copy()","create_copy()","create_dummy_encoding_for_tk()","create_ext()","create_ext_from_array()","create_ext_from_hash()","create_ext_from_string()","create_extension()","create_from()","create_gui()","create_guid()","create_header()","create_itcl_class()","create_itemobj_from_id()","create_kanjifont()","create_kanjifont()","create_latinfont()","create_latinfont()","create_listeners()","create_local_obj()","create_makefile()","create_pie()","create_rule()","create_rule()","create_self()","create_self()","create_self()","create_self()","create_self()","create_self()","create_self()","create_self()","create_self_signed_cert()","create_slave()","create_slave()","create_ssl_params()","create_ssl_params()","create_ssl_params()","create_ssl_params()","create_subnode()","create_table()","create_table()","create_table()","create_table()","create_temp_function()","create_type()","create_value()","create_win32ole_makefile()","created?()","credentials_path()","critical=()","critical?()","crl=()","crls()","crls=()","crmode()","cross_reference()","crosshair()","crosshair_cget()","crosshair_configinfo()","crosshair_configure()","crosshair_current_configinfo()","crosshair_off()","crosshair_on()","crosshair_track_off()","crosshair_track_on()","crosshairs()","crosshairs()","crosshairs_cget()","crosshairs_cget_strict()","crosshairs_cget_tkstring()","crosshairs_configinfo()","crosshairs_configure()","crosshairs_off()","crosshairs_on()","crosshairs_toggle()","crypt()","crypt_by_password()","ctime()","ctime()","ctime()","ctime()","ctime()","ctime()","ctlmethods()","ctrl_cmd()","ctype()","ctype=()","current()","current()","current()","current()","current()","current()","current()","current()","current()","current=()","current=()","current=()","current=()","current=()","current_axis_configinfo()","current_bar_configinfo()","current_button_configinfo()","current_column_configinfo()","current_column_configinfo()","current_column_configinfo()","current_column_dragconfiginfo()","current_columnconfiginfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_configinfo()","current_crosshairs_configinfo()","current_debug_configinfo()","current_dragimage_configinfo()","current_element_configinfo()","current_element_configinfo()","current_entry_configinfo()","current_entryconfiginfo()","current_entryconfiginfo()","current_gridline_configinfo()","current_group()","current_heading_configinfo()","current_headingconfiginfo()","current_image_configinfo()","current_item_configinfo()","current_item_element_configinfo()","current_itemconfiginfo()","current_itemconfiginfo()","current_legend_configinfo()","current_line()","current_line()","current_line()","current_line_configinfo()","current_marker_configinfo()","current_marquee_configinfo()","current_menuconfiginfo()","current_menuconfiginfo()","current_notify_configinfo()","current_pane_configinfo()","current_pane_configinfo()","current_pane_configinfo()","current_paneconfiginfo()","current_paneconfiginfo()","current_paneconfiginfo()","current_pen_configinfo()","current_postscript_configinfo()","current_scope()","current_section()","current_server()","current_sort_configinfo()","current_source_configinfo()","current_status()","current_status()","current_style_configinfo()","current_tag_configinfo()","current_tag_configinfo()","current_tag_configinfo()","current_tagconfiginfo()","current_text_configinfo()","current_token_configinfo()","current_token_windowconfiginfo()","current_window_configinfo()","current_window_configinfo()","current_x2axis_configinfo()","current_xaxis_configinfo()","current_y2axis_configinfo()","current_yaxis_configinfo()","currentpos()","curry()","curs_set()","curselection()","curselection()","curselection()","curselection()","curselection()","curselection()","curselection=()","cursor()","cursor=()","cursor=()","cursor=()","cursor=()","cursor_display()","cursor_display()","cursor_propagate()","cursor_propagate()","cursor_restore()","cursor_restore()","cursor_window()","curvalue()","curvalue=()","curve_name()","curx()","cury()","cut()","cvs_url()","cvs_url()","cwday()","cweek()","cwyear()","cycle()","cycle()","d()","daemon()","darken()","data()","data()","data()","data()","data()","data()","data()","data()","data()","data()","data()","data()","data()","data()","data()","data=()","data=()","data=()","data=()","data=()","data=()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","datatype=()","data_type()","database_class()","database_class()","database_class()","database_class()","database_classname()","database_classname()","database_classname()","database_classname()","database_classname()","dataconfig()","dataconfig()","dataconfig()","dataconfig()","datadir()","date()","date()","date=()","datetime()","datetime_format()","datetime_format=()","day()","day()","day=()","day_fraction()","dchars()","dchars()","dchars()","dclone()","dclone()","dclone()","dclone()","dclone()","deactivate()","deactivate()","deactivate()","deactivate()","deafen()","debug()","debug()","debug()","debug()","debug()","debug()","debug()","debug=()","debug=()","debug=()","debug=()","debug=()","debug?()","debug?()","debug?()","debug?()","debug_cget()","debug_cget_strict()","debug_cget_tkstring()","debug_command()","debug_configinfo()","debug_configure()","debug_eval()","debug_funcname()","debug_level=()","debug_method_info()","debug_msg()","debug_output=()","debug_output=()","debug_print_help()","debug_silent_eval()","debug_thread_info()","debug_variable_info()","declare()","decode()","decode()","decode()","decode()","decode64()","decode_all()","decode_utf7()","decode_www_form()","decode_www_form_component()","decoded()","decrypt()","decrypt()","deep_clone()","def_alias()","def_alias()","def_alias()","def_alias()","def_alias()","def_alias()","def_alias()","def_alias()","def_array_element()","def_atom_persons()","def_atom_text_construct()","def_builtin_commands()","def_class()","def_class_accessor()","def_class_accessor()","def_classed_element()","def_classed_element_without_accessor()","def_classed_elements()","def_convert()","def_corresponded_attr_reader()","def_corresponded_attr_writer()","def_csv_accessor()","def_csv_element()","def_delegator()","def_delegator()","def_delegators()","def_delegators()","def_e2message()","def_e2message()","def_e2message()","def_e2message()","def_element_class_accessor()","def_elements_class_accessor()","def_elements_class_accessor()","def_else_enc()","def_erb_method()","def_exception()","def_exception()","def_exception()","def_exception()","def_extend_command()","def_extend_command()","def_extend_command()","def_extend_command()","def_head_option()","def_iconv_convert()","def_instance_delegator()","def_instance_delegators()","def_intern()","def_method()","def_module()","def_name_to_int()","def_notifier()","def_notifier()","def_option()","def_options()","def_options()","def_other_element()","def_other_element_without_accessor()","def_post_proc()","def_pre_proc()","def_prog_mode()","def_puzzleswitch_proc()","def_rule()","def_rules()","def_same_enc()","def_single_delegator()","def_single_delegators()","def_system_command()","def_system_command()","def_tail_option()","def_to_euc_jp_from_iso_2022_jp()","def_to_euc_jp_from_shift_jis()","def_to_euc_jp_from_utf_8()","def_to_iso_2022_jp_from_euc_jp()","def_to_iso_8859_1_from_utf_8()","def_to_shift_jis_from_euc_jp()","def_to_shift_jis_from_utf_8()","def_to_utf_8_from_euc_jp()","def_to_utf_8_from_iso_8859_1()","def_to_utf_8_from_shift_jis()","def_token()","def_uconv_convert_if_can()","def_unknown_proc()","def_unknown_proc()","def_unknown_proc()","def_unknown_proc()","def_yes_clean_other_accessor()","def_yes_other_accessor()","default()","default()","default()","default()","default()","default()","default()","default()","default=()","defaultbutton()","default_acl()","default_argc_limit()","default_bindir()","default_console_size()","default_dir()","default_element_value_type()","default_element_value_type()","default_encoding()","default_encoding()","default_encoding()","default_encoding()","default_encoding=()","default_encoding=()","default_encoding=()","default_encoding=()","default_event_sources()","default_exec_format()","default_executable()","default_external()","default_external=()","default_handler()","default_id_conv()","default_internal()","default_internal=()","default_load_limit()","default_master?()","default_master?()","default_master?()","default_master?()","default_merge_branch()","default_ole_types()","default_options()","default_parser()","default_parser=()","default_path()","default_pop3_port()","default_pop3_port()","default_pop3_port()","default_pop3_port()","default_pop3s_port()","default_pop3s_port()","default_pop3s_port()","default_pop3s_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_proc()","default_proc()","default_proc()","default_proc=()","default_record_separator()","default_record_separator=()","default_rubygems_dirs()","default_safe_level()","default_sources()","default_src_encoding()","default_ssl_context()","default_ssl_context()","default_ssl_port()","default_ssl_port()","default_submission_port()","default_submission_port()","default_system_path()","default_system_path=()","default_system_source_cache_dir()","default_title=()","default_tls_port()","default_tls_port()","default_user_source_cache_dir()","default_value()","default_value()","default_value()","default_value=()","default_value=()","default_value_type()","default_value_type()","default_value_type=()","default_value_type=()","default_widget_set()","default_widget_set=()","defaults()","defaults_str()","defaults_str()","define()","define()","define()","define()","define()","define_aliases()","define_aliases()","define_aliases()","define_class()","define_dialog_type()","define_finalizer()","define_head()","define_include()","define_initialize()","define_instance_variables()","define_method_missing()","define_module()","define_module_function()","define_posix_props()","define_singleton_method()","define_tail()","define_task()","define_task()","defined_in?()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","definition()","deflate()","deflate()","deflate()","deflate()","degree()","degree()","deiconify()","deiconify()","del()","del()","delay()","delay=()","delch()","delch()","delegate()","delegate()","delegate()","delegate_alias()","delegating_block()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete!()","delete!()","delete?()","deletedata()","deletedata()","deletedata()","deletedata()","delete_active()","delete_all()","delete_all()","delete_all()","delete_all()","delete_all()","delete_all()","delete_all()","delete_all()","delete_all()","delete_at()","delete_at()","delete_at()","delete_at()","delete_attribute()","delete_caller()","delete_cmd()","delete_cmd()","delete_cmd()","delete_cmd()","delete_cmd()","delete_cmd()","delete_cmd()","delete_cmd()","delete_cols()","delete_crl()","delete_element()","delete_entry()","delete_field()","delete_from_taskbar()","delete_highlight_class()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_itcl_class()","delete_itcl_object()","delete_key()","delete_legacy_args()","delete_list()","delete_name()","delete_namespace()","delete_namespace()","delete_observer()","delete_observers()","delete_passwd()","delete_passwd()","delete_procs()","delete_procs()","delete_rows()","delete_slaves()","delete_slaves()","delete_slaves()","delete_slaves()","delete_slaves()","delete_slaves()","delete_slaves()","delete_slaves()","delete_slice()","delete_source()","delete_target()","delete_unless_alive()","delete_value()","deleted?()","deleted?()","deleted?()","deleted?()","deleted?()","deleted?()","deleted?()","deleteln()","deleteln()","delitem()","delta()","deltag()","deltag()","demobitmaps()","demoexploreraux()","demoexplorerdetails()","demoexplorerlargeicons()","demoexplorerlist()","demoexplorersmallicons()","demohelpcontents()","demohelpcontents2()","demoimovie()","demointernetoptions()","demointernetoptions_2()","demolayout()","demomailwasher()","demooutlookfolders()","demooutlooknewsgroup()","demooutlooknewsgroup2()","demorandom()","demorandom2()","denominator()","denominator()","denominator()","denominator()","denominator()","denominator()","depend_rules()","dependencies()","dependencies_ok?()","dependency_order()","dependent_gems()","dependent_specs()","deprecate()","deprecate()","deprecate()","depth()","depth()","depth()","depth()","depth()","depth=()","deq()","deq()","deq()","dequote()","desc()","desc_en()","desc_ja()","descend()","description()","description()","description=()","deselect()","deselect()","deselect()","deselect()","destination_encoding()","destination_encoding()","destination_encoding()","destination_encoding_name()","destination_encoding_name()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","det()","det()","det_e()","detach()","detach_bgexec()","detached()","detached=()","detached?()","detect()","detect()","detect_implicit()","detect_implicit()","detect_implicit()","detect_implicit()","determinant()","determinant()","determinant_e()","determine_scale()","determine_scale()","dev()","dev_major()","dev_minor()","development_dependencies()","dfdxi()","dh_compute_key()","diagonal()","diagonal?()","dialog()","diamond()","diff2index()","difference()","digest()","digest()","digest()","digest()","digest()","digest()","digest!()","digest_length()","digest_length()","digest_length()","digest_length()","dir()","dir()","dir()","dir_config()","direction()","directory?()","directory?()","directory?()","directory?()","directory?()","directory?()","dirname()","dirname()","dirname()","dirs()","dirs=()","disable()","disable()","disable()","disable()","disable_c_comments()","disable_close()","disable_ssl()","disable_ssl()","disable_ssl()","disable_ssl()","disable_ssl()","disable_ssl()","disable_ssl()","disable_ssl()","disable_ssl()","disable_ssl()","disable_starttls()","disable_starttls()","disable_tls()","disable_tls()","disasm()","disasm()","disassemble()","disassemble()","discard_ilseq=()","discard_ilseq?()","disconnect()","disconnected?()","disconnecting()","dispid()","display()","display()","display()","display()","display()","display()","display()","display()","display()","display()","display()","display()","display()","display?()","display_attributes()","display_char()","display_chars()","display_class()","display_error_message()","display_error_message()","display_expression()","display_expressions()","display_frames()","display_indices()","display_line()","display_lineend()","display_lines()","display_linestart()","display_list()","display_method()","display_name()","display_names()","display_prerequisites()","display_prerequisites()","display_tasks_and_comments()","display_tasks_and_comments()","display_wordend()","display_wordstart()","distribute()","div()","div()","div()","div()","divide()","divmod()","divmod()","divmod()","divmod()","divmod()","dlineinfo()","dlineinfo()","dlload()","dlopen()","dlunwrap()","dlwrap()","dn()","dn=()","dnd_bindsource()","dnd_bindsource_info()","dnd_bindtarget()","dnd_bindtarget_info()","dnd_clearsource()","dnd_cleartarget()","dnd_drag()","do_connect()","do_get()","do_get()","do_get()","do_get()","do_get()","do_get()","do_get()","do_get()","do_get()","do_head()","do_head()","do_options()","do_options()","do_options()","do_options()","do_post()","do_post()","do_post()","do_post()","do_post()","do_post()","do_post()","do_aliases()","do_attrs()","do_button()","do_callback()","do_callback()","do_classes()","do_constants()","do_ctrl_frame()","do_detail_frame()","do_display()","do_includes()","do_it()","do_log()","do_methods()","do_motion()","do_not_reverse_lookup()","do_not_reverse_lookup()","do_not_reverse_lookup=()","do_not_reverse_lookup=()","do_nothing()","do_one_event()","do_one_event()","do_one_event()","do_one_event()","do_one_event()","do_one_event()","do_one_event()","do_one_event()","do_press()","do_release()","do_reply()","do_thread_callback()","do_validate()","do_validate=()","do_write()","doc_dir()","doc_stats()","doctype()","doctype()","doctype()","doctype()","doctype()","doctype()","doctype()","doctype()","doctype()","doctype?()","doctype_end()","document()","document()","document()","document()","document()","document()","documentelement()","documentelement()","documentelement()","document_children=()","document_self=()","document_to_str()","document_to_str()","documented?()","documented?()","documented?()","dom_attr()","dom_form_element()","dom_formel()","dom_id()","dom_ids()","dom_name_index()","dom_nameidx()","dom_radio_index()","dom_radioidx()","dom_tree()","dom_value()","done()","done()","done()","done()","done()","done()","done?()","done_adding()","done_adding()","done_documenting=()","dot()","dotconfig()","double()","double()","double_fig()","doupdate()","down()","down()","downcase()","downcase()","downcase!()","download()","download_reporter()","download_reporter()","download_to_cache()","downto()","downto()","downto()","dowrite()","drag()","drag()","drag_end()","drag_motion()","drag_start()","dragimage_cget()","dragimage_cget_strict()","dragimage_cget_tkstring()","dragimage_configinfo()","dragimage_configure()","dragto()","dragto()","dragto()","dragto()","draw()","draw()","draw0()","draw1()","draw10()","draw11()","draw12()","draw13()","draw14()","draw14a()","draw15()","draw16()","draw17()","draw18()","draw19()","draw2()","draw20()","draw21()","draw22()","draw23()","draw24()","draw3()","draw4()","draw5()","draw6()","draw6a()","draw7()","draw8()","draw9()","draw_all()","drawin()","drawlines()","drb_name=()","drop()","drop()","drop()","drop()","drop_while()","drop_while()","drum()","dsa_sign_asn1()","dsa_verify_asn1()","dst?()","dtag()","dtag()","dtag()","dummy?()","dummy_makefile()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump_call()","dump_response()","dump_stream()","dump_stream()","dump_stream()","dump_to_file()","dup()","dup()","dup()","dup()","dup()","dup_vector()","dynamic_width()","dynamic_width()","dynamic_width_stty()","dynamic_width_stty()","dynamic_width_tput()","dynamic_width_tput()","e2mm_message()","e2mm_message()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each2()","each_active_object()","each_address()","each_address()","each_address()","each_address()","each_ancestor()","each_attribute()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_capitalized()","each_capitalized_name()","each_char()","each_char()","each_char()","each_char()","each_char()","each_char()","each_child()","each_child()","each_classmodule()","each_codepoint()","each_codepoint()","each_codepoint()","each_codepoint()","each_cons()","each_const()","each_const()","each_constant()","each_data()","each_document()","each_document()","each_element()","each_element_with_attribute()","each_element_with_text()","each_entry()","each_entry()","each_entry()","each_export()","each_export()","each_export()","each_export()","each_filename()","each_firstbyte_range()","each_header()","each_include()","each_index()","each_index()","each_installed_parser()","each_installed_writer()","each_key()","each_key()","each_key()","each_key()","each_key()","each_key()","each_key()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_mail()","each_mail()","each_mail()","each_mail()","each_method()","each_name()","each_name()","each_name()","each_name()","each_name()","each_name()","each_name_of()","each_names_with_len()","each_node()","each_node()","each_object()","each_option()","each_option()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_parent()","each_path()","each_prime()","each_prime()","each_recursive()","each_resource()","each_section()","each_slice()","each_strongly_connected_component()","each_strongly_connected_component_from()","each_top_level_statement()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_with_index()","each_with_index()","each_with_index()","each_with_object()","each_with_object()","eat()","echo()","echo()","echo()","echo=()","echo?()","edgemost()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","egid()","egid=()","ehlo()","ehlo()","eid()","eid()","eigen()","eigensystem()","eigenvalue_matrix()","eigenvalues()","eigenvector_matrix()","eigenvector_matrix_inv()","eigenvectors()","ele()","element()","element()","element()","element()","element=()","element_activate()","element_bind()","element_bind_append()","element_bind_remove()","element_bindinfo()","element_cget()","element_cget()","element_cget_strict()","element_cget_strict()","element_cget_tkstring()","element_cget_tkstring()","element_closest()","element_configinfo()","element_configinfo()","element_configure()","element_configure()","element_create()","element_create()","element_create_image()","element_create_vsapi()","element_deactivate()","element_delete()","element_exist?()","element_initialize_arguments?()","element_lappend()","element_lappend()","element_lget()","element_lget()","element_lget_f()","element_lget_f()","element_lget_i()","element_lget_i()","element_lindex()","element_lindex()","element_lset()","element_lset()","element_names()","element_names()","element_options()","element_show()","element_to_a()","element_to_a()","element_to_f()","element_to_f()","element_to_i()","element_to_i()","element_to_s()","element_to_s()","element_to_sym()","element_to_sym()","element_type()","elementdecl()","elementdecl()","elementdecl?()","elements()","elements_to_f()","elements_to_f()","elements_to_i()","elements_to_i()","elements_to_r()","elements_to_r()","emacs_editing_mode()","emacs_editing_mode?()","email_to_name()","embdefbg()","embdefbg2()","embplotdown()","embplotdown2()","embplotmove()","embplotmove2()","emit()","emit()","emit()","emit()","emitter()","emitter()","empty()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty_action()","enable()","enable()","enable()","enable()","enablemnemonics()","enable_c_comments()","enable_close()","enable_config()","enable_ssl()","enable_ssl()","enable_ssl()","enable_ssl()","enable_ssl()","enable_ssl()","enable_ssl()","enable_ssl()","enable_ssl()","enable_ssl()","enable_starttls()","enable_starttls()","enable_starttls_auto()","enable_starttls_auto()","enable_tls()","enable_tls()","enable_traversal()","enable_traversal()","enabled?()","enc_key()","enclose()","enclosed()","enclosed?()","encode()","encode()","encode()","encode()","encode!()","encode64()","encode_fallback()","encode_utf7()","encode_utf8()","encode_www_form()","encode_www_form_component()","encoded()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding=()","encoding=()","encoding=()","encoding=()","encoding=()","encoding=()","encoding=()","encoding=()","encoding=()","encoding_convert_from()","encoding_convert_from()","encoding_convert_from()","encoding_convert_from()","encoding_convert_to()","encoding_convert_to()","encoding_convert_to()","encoding_convert_to()","encoding_convertfrom()","encoding_convertfrom()","encoding_convertfrom()","encoding_convertfrom()","encoding_convertto()","encoding_convertto()","encoding_convertto()","encoding_convertto()","encoding_name()","encoding_name()","encoding_name()","encoding_name()","encoding_obj()","encoding_obj()","encoding_obj()","encoding_obj()","encoding_obj()","encoding_system()","encoding_system=()","encoding_table()","encoding_table()","encoding_table()","encoding_table()","encoding_table()","encrypt()","encrypt()","end()","end()","end()","endelement()","endelement()","end_accepting()","end_accepting()","end_accepting()","end_document()","end_document()","end_document()","end_document()","end_element()","end_element?()","end_mapping()","end_mapping()","end_prefix_mapping()","end_sequence()","end_sequence()","end_stream()","end_stream()","end_stream()","end_with?()","enddialog()","ended?()","endgrent()","endpwent()","energy()","engines()","england()","enhance()","enhance_with_matching_rule()","enq()","enq()","enq()","enq()","ensemble()","ensure_dependencies_met()","ensure_dependency()","ensure_gem_subdirectories()","ensure_required_ruby_version_met()","ensure_required_rubygems_version_met()","ensure_ssl_available()","entities()","entity()","entity()","entity()","entity()","entity?()","entity_class()","entity_class()","entity_expansion_limit()","entity_expansion_limit=()","entity_expansion_text_limit()","entity_expansion_text_limit()","entity_expansion_text_limit=()","entity_expansion_text_limit=()","entitydecl()","entitydecl()","entitydecl?()","entries()","entries()","entries()","entry_activate()","entry_activate()","entry_before?()","entry_before?()","entry_cget()","entry_cget_strict()","entry_cget_tkstring()","entry_children()","entry_children()","entry_configinfo()","entry_configure()","entry_delete()","entry_delete()","entry_hidden?()","entry_hidden?()","entry_open?()","entry_open?()","entry_size()","entry_size()","entry_size_recurse()","entry_size_recurse()","entry_widget()","entrybind()","entrybind()","entrybind_append()","entrybind_append()","entrybind_remove()","entrybind_remove()","entrybindinfo()","entrybindinfo()","entrycget()","entrycget()","entrycget_strict()","entrycget_strict()","entryconfiginfo()","entryconfiginfo()","entryconfigure()","entryconfigure()","enum()","enum_for()","environment()","eof()","eof()","eof()","eof()","eof()","eof()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eos?()","epath()","epath()","epath()","eps()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equal?()","erase()","erase()","erase()","erf()","erfc()","err()","errno()","error()","error()","error()","error()","error()","error()","error()","error?()","error?()","error?()","error?()","errorcode()","error_bytes()","error_char()","error_message()","errors()","errors()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escapeelement()","escapehtml()","escape_element()","escape_html()","euid()","euid=()","eval()","eval()","eval()","eval()","eval()","eval()","eval()","eval()","eval()","eval_a()","eval_a_times_u()","eval_ata_times_u()","eval_at_times_u()","eval_callback()","eval_callback()","eval_callback()","eval_callback()","eval_cmd()","eval_history=()","eval_input()","eval_proc()","eval_proc()","eval_proc()","eval_proc()","eval_str()","eval_str()","eval_str()","eval_str()","eval_string()","eval_string()","eval_string()","eval_string()","eval_under_random_base()","eval_under_random_base()","eval_under_random_base()","evaluate()","evaluate()","even?()","even?()","even?()","even?()","event?()","event_interface()","event_type()","eventloop_tkwait()","eventloop_tkwait()","eventloop_tkwait()","eventloop_tkwait()","eventloop_wait()","eventloop_wait()","eventloop_wait()","eventloop_wait()","examine()","exception()","exception()","exception()","exception_class()","exclude()","exclude()","exclude_end?()","exclusive()","excn_handle()","exe_to_ico()","exec()","exec()","exec_cmd()","exec_command()","exec_format()","exec_if()","executable()","executable=()","executable?()","executable?()","executable?()","executable?()","executable_real?()","executable_real?()","executable_real?()","executable_real?()","executables()","executables=()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exist?()","exists?()","exists?()","exists?()","exists?()","exit()","exit()","exit()","exit()","exit()","exit()","exit()","exit()","exit()","exit!()","exit!()","exit!()","exit!()","exit!()","exit!()","exit_value()","exited?()","exited?()","exitstatus()","exp()","exp()","exp()","exp!()","exp_state()","expand()","expand()","expand()","expand()","expand()","expand_class()","expand_environ()","expand_hexstring()","expand_name()","expand_pair()","expand_path()","expand_path()","expand_path()","expand_path()","expand_rec()","expand_ref_in()","expand_state()","expand_tabs()","expand_value()","expanded?()","expanded_list()","expanded_name()","expect()","expected()","expected()","expected()","expected()","expected()","expected()","expired?()","expires()","expires=()","explorerheaderinvoke()","exponent()","export()","export()","export()","export()","export()","export()","exports()","exports()","expose_cmd()","expose_cmd()","expose_cmd()","expose_cmd()","expose_cmd()","expose_cmd()","expose_cmd()","expose_cmd()","expr()","expr()","expunge()","ext()","extend()","extend_object()","extend_object()","extend_object()","extend_object()","extend_object()","extend_object()","extend_object()","extend_object()","extend_object()","extended()","extended()","extensions()","extensions()","extensions()","extensions()","extensions()","extensions=()","extensions=()","extensions=()","extensions=()","extensions=()","extents()","extents()","extents()","extents()","extern()","external_encoding()","external_encoding()","external_encoding()","extmake()","extname()","extname()","extra_args()","extra_args=()","extra_rdoc_files()","extra_rdoc_files=()","extract()","extract()","extract()","extract()","extract_call_seq()","extract_comment()","extract_entry()","extract_files()","extract_makefile()","facility()","fact()","fade()","fade?()","fail()","fail()","fail()","failed()","failsafe()","failsafe()","false()","families()","families()","family()","family()","family_addrinfo()","fannkuch()","fast_delete()","fast_generate()","fast_insert()","fastmode=()","fatal()","fatal()","fatal?()","fatal?()","fault()","fcntl()","fcntl()","fcntl()","fdatasync()","fdiv()","fdiv()","fdiv()","fdiv()","fdiv()","fdiv()","feed()","feed_info()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch_file()","fetch_http()","fetch_https()","fetch_path()","fetch_server()","fetch_size()","fetch_spec()","fetch_with_errors()","fetcher()","fetcher()","fib()","fiddle?()","field()","field?()","field_row?()","fields()","fig_erase()","file()","file()","file()","file?()","file?()","file?()","file?()","file?()","filedialog()","file_dir()","file_field()","file_input?()","file_name()","file_name()","filename()","filename()","filename_quote_characters()","filename_quote_characters=()","fileno()","fileno()","fileno()","fileno()","filepos()","files()","files()","files()","files()","files=()","files_hash()","fill()","fillmenu()","filltree()","fill_breakable()","fill_headers()","fill_table()","fillcolor()","filter()","filter()","filter()","filter()","filter()","filter()","filter()","filter=()","filter_backtrace()","filter_backtrace()","filter_methods()","final()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find_x11()","find_above()","find_above()","find_active()","find_alias_comment()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all_by_name()","find_all_template()","find_ancestor_local_symbol()","find_attr_comment()","find_attribute()","find_attribute_named()","find_below()","find_below()","find_body()","find_by_name()","find_by_path()","find_child()","find_class()","find_class_comment()","find_class_method_named()","find_class_named()","find_class_named()","find_class_named_from()","find_class_or_module()","find_class_or_module()","find_classes()","find_closest()","find_closest()","find_command()","find_command()","find_command_possibilities()","find_const_comment()","find_constant_named()","find_crl()","find_enclosed()","find_enclosed()","find_enclosing_module_named()","find_executable()","find_external_alias()","find_external_alias_named()","find_file_named()","find_file_named()","find_files()","find_first_recursive()","find_framework()","find_gems_with_sources()","find_header()","find_in_cache()","find_in_unresolved()","find_in_unresolved()","find_in_unresolved_tree()","find_in_unresolved_tree()","find_include_file()","find_index()","find_index()","find_index()","find_instance_method_named()","find_library()","find_line()","find_local_symbol()","find_local_symbol()","find_macosx_framework()","find_matching()","find_matching_with_errors()","find_method()","find_method_named()","find_methods()","find_modifiers()","find_module_named()","find_module_named()","find_module_named()","find_name()","find_name()","find_name()","find_name()","find_next_char()","find_next_space()","find_objects()","find_overlapping()","find_overlapping()","find_override_comment()","find_paths()","find_position()","find_previous_space()","find_proxy()","find_rakefile_location()","find_rakefile_location()","find_reverse_dependencies()","find_runnable()","find_seq()","find_spec_by_name_and_version()","find_spec_for_file()","find_symbol()","find_symbol_module()","find_system_command()","find_tcl()","find_tcltk_header()","find_tcltk_library()","find_tk()","find_type()","find_unique()","find_withtag()","find_withtag()","finger()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish_all_jobs()","finished?()","finished?()","finished?()","finite?()","finite?()","first()","first()","first()","first()","first()","first()","first()","first()","first?()","first?()","first?()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","firstchild()","first_child()","fix()","fix_basic_object_inheritance()","fixed_encoding?()","fixup()","flags=()","flash()","flash()","flash()","flash()","flash()","flash()","flat_map()","flatten()","flatten()","flatten()","flatten!()","flatten!()","flock()","floor()","floor()","floor()","floor()","floor()","floor()","floor()","floor2_bg1()","floor2_bg2()","floor2_bg3()","floor2_fg1()","floor2_fg2()","floor2_fg3()","floordisplay()","floordisplay2()","floor_bg1()","floor_bg2()","floor_bg3()","floor_fg1()","floor_fg2()","floor_fg3()","flow()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush_left()","flush_next_in()","flush_next_out()","flush_sessions()","fnmatch()","fnmatch()","fnmatch?()","fnmatch?()","focus()","focus()","focus()","focus()","focus()","focusandflash()","focusmonitor()","focusnext()","focusprev()","focus_next()","focus_ok()","focus_prev()","focusmodel()","focusmodel()","fold()","follow_link()","followsmouse()","font()","font()","font()","font_configinfo()","font_configure()","font_copy()","font_id()","font_id()","font_id()","font_of_part()","foo()","foobar()","for()","for_cache()","for_fd()","for_fd()","for_files()","force_default_encoding=()","force_default_encoding=()","force_default_encoding=()","force_default_encoding=()","force_default_encoding?()","force_default_encoding?()","force_default_encoding?()","force_default_encoding?()","force_documentation=()","force_encoding()","force_quotes?()","foreach()","foreach()","foreach()","foreach()","foreach()","foreach()","foreach()","foreach()","foreach()","foreach()","foreachwidget()","foreach_proc_entry()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","forget()","fork()","fork()","fork()","form()","form_cmd()","form_data=()","form_info()","format()","format()","format()","format()","format()","format()","format()","formatdate()","formatgmt()","formatindex()","formatnumber()","formattime()","format_date()","format_datetime()","format_frame()","format_infos()","format_offsets()","format_text()","formatted_program_filename()","formatted_program_filename()","formatter()","formatter()","forminfo()","forward()","forwarding()","fpixels()","fpixels()","frac()","fraction()","fraction()","fragment=()","frame()","frame()","frame_set_pos()","frecuency()","free()","free()","free()","free=()","free=()","freeze()","freeze()","freeze()","freeze()","frexp()","friday?()","friday?()","friendly_path()","from()","from_file_by_path()","from_file_by_path()","from_gems_in()","from_gems_in()","from_installed_gems()","from_installed_gems()","from_io()","from_io()","from_main()","from_module()","from_prime_division()","from_prime_division()","from_sjis()","from_source_index()","from_specs()","from_state()","from_yaml()","fromout()","front()","front()","frozen?()","frozen?()","fsync()","fsync()","fsync()","ftype()","ftype()","ftype()","full_gem_path()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name=()","full_old_name()","fullpath()","fullscreen()","fullscreen_off()","fully_documented?()","fully_documented?()","fully_expanded_name()","func_name()","funcall_style()","function()","gamma()","garbage_collect()","garbage_collect()","gather_dependencies()","gather_files()","gcd()","gcd()","gcdlcm()","gcdlcm()","gem()","gem_dir()","gem_dir()","gem_file_list()","gem_original_require()","gem_paths()","gem_signature()","gem_signature()","gemdirs()","gems_dir()","gen()","gen_callback_file()","gen_push_addr_ary()","gen_push_proc_ary()","gen_random()","gen_relative_url()","gen_str()","gen_sub_directories()","gen_url()","gen_url()","gencallback()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate_args()","generate_argtype()","generate_argtypes()","generate_bin()","generate_bin_script()","generate_bin_symlink()","generate_cert()","generate_class()","generate_class_files()","generate_constants()","generate_default_dirs()","generate_doc()","generate_event()","generate_eventids1()","generate_eventids2_table()","generate_file_files()","generate_from_insnname()","generate_from_ucs()","generate_func_methods()","generate_index()","generate_index()","generate_info()","generate_key()","generate_key!()","generate_line()","generate_lookup_node()","generate_method()","generate_method_args_help()","generate_method_body()","generate_method_help()","generate_methods()","generate_node()","generate_prime()","generate_properties_with_args()","generate_propget_methods()","generate_propput_methods()","generate_propputref_methods()","generate_rdoc()","generate_ri()","generate_to_ucs()","generate_widget_doc()","generate_windows_script()","generation_hook()","generator()","generator_descriptions()","generic_parser()","generic_parser()","gennode()","geometry()","geometry()","geometry()","geometry()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get2()","get2()","get3dcolor()","getallresponseheaders()","getallresponseheaders()","getattribute()","getattributenode()","getelementsbytagname()","getelementsbytagname()","getelementsbytagname()","getelementsbytagname()","getnameditem()","getqualifieditem()","getresponseheader()","getresponseheader()","get_all_gem_names()","get_area()","get_attributes()","get_attrs()","get_bgerror_handler()","get_bgerror_handler()","get_bgerror_handler()","get_bgerror_handler()","get_bool()","get_buttonbox()","get_by_hash()","get_by_hash()","get_by_hash()","get_by_name()","get_byte()","get_cb_entry()","get_cb_entry()","get_cb_entry()","get_cb_entry()","get_certs()","get_class_or_module()","get_class_specification()","get_clicks()","get_clicks()","get_clicks()","get_clicks()","get_clicks()","get_clicks()","get_config()","get_constant()","get_constant_with_optional_parens()","get_crls()","get_curselection()","get_curselection()","get_data()","get_data()","get_default_handler()","get_displaychars()","get_elements()","get_eventloop_tick()","get_eventloop_tick()","get_eventloop_tick()","get_eventloop_tick()","get_eventloop_tick()","get_eventloop_tick()","get_eventloop_tick()","get_eventloop_tick()","get_eventloop_weight()","get_eventloop_weight()","get_eventloop_weight()","get_eventloop_weight()","get_eventloop_weight()","get_eventloop_weight()","get_eventloop_weight()","get_eventloop_weight()","get_eventloop_window_mode()","get_ext_list()","get_fields()","get_file()","get_file_and_line_from_caller()","get_fileicon()","get_files()","get_first()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_frame()","get_full()","get_full()","get_highlight_classes()","get_hosts_path()","get_icon()","get_icon_by_name()","get_id()","get_image()","get_index_of_value()","get_indicator()","get_initial_token()","get_instance()","get_instance()","get_instance()","get_item()","get_label()","get_lhs()","get_libpath()","get_limit()","get_limit()","get_limit()","get_limit()","get_limit()","get_limit()","get_limit()","get_limit()","get_list_contents()","get_listbox()","get_mailfile()","get_members()","get_menu()","get_menustate()","get_metadata()","get_methods()","get_methods()","get_name()","get_name()","get_namespace()","get_no_event_wait()","get_no_event_wait()","get_no_event_wait()","get_no_event_wait()","get_no_event_wait()","get_no_event_wait()","get_no_event_wait()","get_no_event_wait()","get_node()","get_obj()","get_obj()","get_obj()","get_objs()","get_on_display()","get_on_display()","get_on_display()","get_one_gem_name()","get_one_optional_argument()","get_option()","get_option()","get_options()","get_output()","get_output()","get_owner()","get_owner()","get_owner()","get_owner()","get_owner_on_display()","get_owner_on_display()","get_page()","get_page()","get_passwd()","get_passwd()","get_passwd()","get_path()","get_pkg_list()","get_position()","get_print()","get_print()","get_procs()","get_procs()","get_proxy_from_env()","get_range()","get_readed()","get_release_type_name()","get_resolv_info()","get_response()","get_response()","get_revisions()","get_revisions()","get_revisions()","get_rhs()","get_screen_size()","get_scrollbarwidth()","get_select()","get_selected()","get_service_hook()","get_shlib_path_head()","get_shlib_versions()","get_sorted_module_list()","get_step()","get_string()","get_string()","get_string()","get_string()","get_string()","get_string()","get_svninfo()","get_symbol_or_name()","get_tab()","get_tab()","get_tabobj()","get_tabobj()","get_tag()","get_tag()","get_tags()","get_tclconfig()","get_tclconfig_dirs()","get_text()","get_textborderwidth()","get_texts()","get_thread()","get_tk()","get_tk_until()","get_tkread()","get_toolbar()","get_transparency()","get_transparency()","get_valid_ip()","get_value()","get_value()","get_value()","get_value()","get_value()","get_value_index()","get_variable()","get_version()","getacl()","getaddress()","getaddress()","getaddress()","getaddress()","getaddress()","getaddress()","getaddresses()","getaddresses()","getaddresses()","getaddresses()","getaddrinfo()","getaddrinfo()","getbinaryfile()","getbkgd()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getc()","getc()","getc()","getc()","getc()","getc()","getc()","getc()","getc_of_rests()","getch()","getch()","getch()","getch()","getch()","getdir()","getdir()","getegid()","geteuid()","getframe()","getframe()","getframe()","getframe()","getgid()","getgm()","getgrent()","getgrgid()","getgrnam()","gethostbyaddr()","gethostbyname()","gethostbyname()","gethostname()","getlocal()","getlogin()","getmouse()","getname()","getname()","getname()","getname()","getname()","getnameinfo()","getnameinfo()","getnames()","getnames()","getnames()","getnames()","getopts()","getopts()","getopts()","getpeereid()","getpeername()","getpgid()","getpgrp()","getpos()","getpriority()","getpty()","getpwent()","getpwnam()","getpwuid()","getquota()","getquotaroot()","getresource()","getresources()","getrlimit()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","getselection()","getservbyname()","getservbyport()","getservername()","getservername()","getsockname()","getsockopt()","getstr()","getstr()","gettags()","gettags()","gettags()","getter()","gettextfile()","getuid()","getutc()","getwd()","getwd()","getwd()","gid()","gid()","gid=()","glob()","glob()","glob()","global_variables()","gm()","gmt?()","gmt_offset()","gmtime()","gmtoff()","go()","goto_line()","grab()","grammar()","grant_privilege()","grant_privilege()","gravity()","gravity()","gravity=()","gravity=()","great_job()","greeting()","gregorian()","gregorian?()","gregorian_leap?()","grep()","grid()","grid()","grid()","grid_cells()","grid_size()","gridline_cget()","gridline_cget_strict()","gridline_cget_tkstring()","gridline_configinfo()","gridline_configure()","gridline_off()","gridline_on()","gridline_toggle()","group()","group()","group()","group()","group()","group()","group()","group()","group=()","group_by()","group_flag()","group_sub()","groups()","groups=()","grpowned?()","grpowned?()","grpowned?()","grpowned?()","gsub()","gsub()","gsub!()","guard_inspect_key()","guess()","guess()","guess()","guid()","guid()","gunzip()","gunzip_data()","gunzip_file()","gzip()","gzip()","gzip_data()","gzip_file()","h()","h()","h20()","handle()","handle()","handle()","handle()","handle()","handle_arguments()","handle_attr()","handle_class_module()","handle_constants()","handle_directive()","handle_ifdefs_in()","handle_method()","handle_options()","handle_options()","handle_options()","handle_pipe()","handle_singleton()","handle_special_crossref()","handle_special_hyperlink()","handle_special_hyperlink()","handle_special_suppressed_crossref()","handle_special_tidylink()","handle_tab_width()","handle_target()","handler()","handler()","handler=()","handlers()","handles?()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","haschildnodes()","hasfeature()","has_attributes?()","has_changed()","has_colors?()","has_elements?()","has_expires?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_mainwindow?()","has_mainwindow?()","has_mainwindow?()","has_mainwindow?()","has_mainwindow?()","has_mainwindow?()","has_name?()","has_name?()","has_next?()","has_rdoc()","has_rdoc=()","has_rdoc?()","has_text?()","has_unit_tests?()","has_value?()","has_value?()","has_value?()","has_value?()","has_value?()","has_value?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash_dir()","hash_kv()","hash_kv()","hash_old()","have_author?()","have_author?()","have_author?()","have_author?()","have_children_elements()","have_const()","have_content?()","have_framework()","have_func()","have_header()","have_library()","have_libvar()","have_macro()","have_rakefile()","have_rakefile()","have_readline_func()","have_readline_header()","have_readline_macro()","have_readline_var()","have_required_elements?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_struct_member()","have_type()","have_var()","have_xml_content?()","have_xml_content?()","have_xml_content?()","head()","head()","head2()","head2()","header()","header()","header()","header()","header?()","header_convert()","header_converters()","header_row?()","header_row?()","headers()","headers()","headers()","headers=()","heading_cget()","heading_cget_strict()","heading_cget_tkstring()","heading_configinfo()","heading_configure()","headingcget()","headingcget_strict()","headingcget_tkstring()","headingconfiginfo()","headingconfigure()","height()","height()","height()","height()","height()","height()","height_list()","hello()","hello()","hello()","helo()","helo()","help()","help()","help()","helpbutton1()","helpleave1()","helpmotion()","helpmotion1()","helpmotion2()","helprelease1()","help_msg()","helpcontext()","helpcontext()","helpfile()","helpfile()","helpstring()","helpstring()","here?()","here?()","hermitian?()","hex()","hex()","hexdigest()","hexdigest()","hexdigest()","hexdigest()","hexdigest!()","hexencode()","hi()","hi_function()","hidden()","hidden?()","hidden_cmds()","hidden_cmds()","hidden_cmds()","hidden_cmds()","hidden_cmds()","hidden_cmds()","hidden_cmds()","hidden_cmds()","hidden_list()","hide()","hide()","hide()","hide()","hide()","hide()","hide()","hide()","hide()","hide()","hide()","hide()","hide_cmd()","hide_cmd()","hide_cmd()","hide_cmd()","hide_cmd()","hide_cmd()","hide_cmd()","hide_cmd()","hide_each_hscr()","hide_each_hscr()","hide_names()","hide_topic()","hide_win_hscr()","hide_win_hscr()","hierarchical?()","hierarchical?()","highlight()","highlight()","history_add()","history_clear()","history_configinfo()","history_configure()","history_file()","history_file=()","history_get()","history_remove()","hold()","hold()","home()","home_workspace()","hook_add()","hook_hscroll_off()","hook_hscroll_on()","hook_list()","hook_remove()","hook_run()","host()","host()","host=()","host=()","hostname()","hostname=()","hour()","hour=()","hour=()","hour=()","href()","href=()","href_binding()","hscroll()","hscroll()","hscroll()","hscroll()","hscroll()","hscroll=()","hscroll=()","html()","html_escape()","html_escape()","html_list_name()","html_name()","html_name()","html_text()","htmlclip()","hton()","http_default_port()","http_default_port()","http_url()","http_url()","httpd()","httpdate()","httpdate()","httpdate()","httpdate()","https?()","https_default_port()","https_default_port()","hyper_cmd()","hypot()","i()","imoviebutton1()","ipimethods()","i_move()","i_move()","icon_info()","iconbitmap()","iconbitmap()","iconify()","iconify()","iconmask()","iconmask()","iconname()","iconname()","iconphoto()","iconphoto()","iconphoto_default()","iconphoto_default()","iconposition()","iconposition()","icons()","iconv()","iconv()","iconv()","iconwindow()","iconwindow()","icursor()","icursor()","icursor()","icursor()","icursor()","icursor()","icursor()","icursor()","icursor()","icursor=()","icursor_set()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id()","id2name()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","id2obj()","ident()","identical?()","identical?()","identical?()","identify()","identify()","identify()","identify()","identify()","identify()","identify()","identify()","identify_comment()","identify_gvar()","identify_here_document()","identify_identifier()","identify_number()","identify_quotation()","identify_string()","identify_string_dvar()","identity()","idle()","idle_done()","idlok()","if_needed()","iflush()","ignore()","ignore_unknown_element()","ignore_unknown_element=()","ignore_whitespace_nodes()","ignored?()","imag()","imag()","imag()","image()","image()","image()","image=()","image=()","image_add()","image_at()","image_button()","image_cget()","image_cget_strict()","image_cget_tkstring()","image_cmd()","image_configinfo()","image_configure()","image_convolve()","image_convolve()","image_gradient()","image_gradient()","image_names()","image_obj()","image_read_jpeg()","image_read_jpeg()","image_resample()","image_resample()","image_rotate()","image_rotate()","image_set()","image_set()","image_size=()","image_snap()","image_snap()","image_subsample()","image_subsample()","image_tint()","image_tint()","image_unset()","image_update()","imagebind()","imagebind()","imagebind_append()","imagebind_append()","imagebind_remove()","imagebind_remove()","imagebindinfo()","imagebindinfo()","images()","imaginary()","imaginary()","imaginary()","imconfiginfo()","imconfigure()","img()","imove()","imove()","implementation()","implementation()","implementation()","implemented_ole_types()","import()","import()","import_function()","import_link()","import_symbol()","import_ucm()","import_value()","in()","in()","in_namespace()","in_path?()","in_service?()","in_tt?()","inactivate()","inc()","inc()","inch()","inch()","include()","include()","include()","include()","include()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include_file()","included()","included_modules()","incompatible_argument_styles()","incompatible_argument_styles()","incomplete_input?()","indent()","indent()","indent()","indent!()","indent=()","indent_text()","indent_text()","indentation()","indentation=()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index_at()","index_at_path()","index_in_parent()","index_name()","index_path()","index_pos()","index_pos=()","index_signature()","index_signature()","indices()","indir()","infinite?()","infinite?()","infinity?()","inflate()","inflate()","inflate()","inflate()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info()","info?()","info?()","info?()","info_class()","info_function()","info_heritage()","info_inherit()","info_variable()","infox()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited_array_reader()","inherited_base()","inherited_base()","inherited_hash_reader()","inherited_reader()","init()","init()","init()","init()","init()","init()","init()","init()","init_color()","init_config()","init_curses()","init_error()","init_gemspecs()","init_ip_env()","init_ip_env()","init_ip_env()","init_ip_env()","init_ip_internal()","init_ip_internal()","init_ip_internal()","init_ip_internal()","init_pair()","init_pics()","init_save_history()","init_screen()","init_source()","init_tags()","init_tags()","init_tags()","init_tags()","init_widget_font()","init_widget_font()","initaialize()","initgroups()","initialize()","initialize()","initializematchpatterns()","initialize_composite()","initialize_composite()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_http_header()","initialize_input()","initialize_methods_etc()","initialize_tracer()","inittoplevel()","inject()","inline_html?()","inline_other?()","inline_other_base64?()","inline_other_text?()","inline_other_xml?()","inline_text?()","inline_xhtml?()","inner_product()","ino()","inplace_mode()","inplace_mode=()","input()","input=()","input=()","input=()","input=()","input=()","input?()","input_end()","input_start()","insch()","insch()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insert()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertbefore()","insertdata()","insertdata()","insertdata()","insertdata()","insert_active()","insert_after()","insert_after()","insert_at()","insert_at_last()","insert_before()","insert_before()","insert_cols()","insert_cursor()","insert_entry()","insert_items()","insert_items()","insert_lhs()","insert_list()","insert_output()","insert_rhs()","insert_rows()","insert_selection()","insert_selection()","insert_tabs()","insertln()","insertln()","inside()","inside()","inside()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect?()","inspect_last_value()","inspect_mode=()","inspect_sockaddr()","inspect_value()","install()","install()","install()","install()","install()","install_acl()","install_alias_method()","install_alias_method()","install_bind()","install_bind_for_event_class()","install_builtin_commands()","install_class_name()","install_cmd()","install_cmd()","install_cmd()","install_date_element()","install_dublin_core()","install_executables()","install_extend_commands()","install_extend_commands()","install_extend_commands()","install_extend_commands()","install_get_attribute()","install_get_text_element()","install_have_attribute_element()","install_have_child_element()","install_have_children_element()","install_id_conv()","install_image_favicon()","install_image_item()","install_indicies()","install_lib()","install_list()","install_model()","install_must_call_validator()","install_ns()","install_rdoc()","install_rdoc()","install_ri()","install_siginfo_handler()","install_siginfo_handler()","install_system_commands()","install_system_commands()","install_taxo_topic()","install_taxo_topics()","install_text_element()","install_update_defaults_str()","installation_path()","installation_satisfies_dependency?()","installed_spec_directories()","installed_spec_directories()","instance()","instance()","instance()","instance()","instance_attributes()","instance_delegate()","instance_eval()","instance_eval()","instance_exec()","instance_method()","instance_method_list()","instance_methods()","instance_methods()","instance_of?()","instance_variable_defined?()","instance_variable_get()","instance_variable_get()","instance_variable_set()","instance_variable_set()","instance_variables()","instance_variables()","instruction()","instruction()","instruction?()","instructions()","int()","int()","int()","int()","int()","int_from_prime_division()","integer?()","integer?()","integer?()","interact()","interactive()","interactive()","interface()","intern()","intern()","intern()","internal_encoding()","internal_encoding()","internal_encoding()","interps()","interps()","interrupt()","interrupt()","intersection()","interval()","interval()","inuse()","inuse()","inv()","invalid_namespace?()","invalid_namespace?()","invalid_namespace?()","invalid_namespace?()","invalid_namespace?()","invalid_namespace?()","inverse()","invert()","invert()","invert()","invert()","invert()","invert()","invert!()","investigation()","invkind()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke_hidden()","invoke_hidden()","invoke_hidden()","invoke_hidden()","invoke_hidden()","invoke_hidden()","invoke_hidden()","invoke_hidden()","invoke_hidden_on_global()","invoke_hidden_on_global()","invoke_hidden_on_global()","invoke_hidden_on_global()","invoke_hidden_on_global()","invoke_hidden_on_global()","invoke_hidden_on_global()","invoke_hidden_on_global()","invoke_hidden_on_namespace()","invoke_hidden_on_namespace()","invoke_hidden_on_namespace()","invoke_hidden_on_namespace()","invoke_hidden_on_namespace()","invoke_hidden_on_namespace()","invoke_hidden_on_namespace()","invoke_hidden_on_namespace()","invoke_kind()","invoke_task()","invoke_task()","invoke_validate()","invtransform()","invtransform()","invtransform()","invtransform()","ioctl()","ioctrl()","ioflush()","ip()","ip6_arpa()","ip6_int()","ip?()","ip_address()","ip_address_list()","ip_name()","ip_name()","ip_name()","ip_name()","ip_name()","ip_name()","ip_name()","ip_name()","ip_pktinfo()","ip_pktinfo()","ip_port()","ip_unpack()","ipv4?()","ipv4?()","ipv4_compat()","ipv4_compat?()","ipv4_loopback?()","ipv4_mapped()","ipv4_mapped?()","ipv4_multicast?()","ipv4_private?()","ipv6?()","ipv6?()","ipv6_linklocal?()","ipv6_loopback?()","ipv6_mc_global?()","ipv6_mc_linklocal?()","ipv6_mc_nodelocal?()","ipv6_mc_orglocal?()","ipv6_mc_sitelocal?()","ipv6_multicast?()","ipv6_pktinfo()","ipv6_pktinfo()","ipv6_pktinfo_addr()","ipv6_pktinfo_ifindex()","ipv6_sitelocal?()","ipv6_to_ipv4()","ipv6_unspecified?()","ipv6_v4compat?()","ipv6_v4mapped?()","irb()","irb()","irb()","irb_abort()","irb_at_exit()","irb_context()","irb_context()","irb_exit()","irb_exit()","irb_exit()","irb_level()","irb_load()","irb_load()","irb_load()","irb_original_method_name()","irb_original_method_name()","irb_require()","irb_require()","isequal()","is_a?()","is_a?()","is_binary_data?()","is_busy()","is_ca?()","is_complex_yaml?()","is_complex_yaml?()","is_complex_yaml?()","is_hash?()","is_hash?()","is_itcl_class()","is_itcl_instance()","is_itcl_object()","is_macosx?()","is_rubytk?()","is_scalar?()","is_scalar?()","is_system_font?()","is_system_font?()","is_version_1_2?()","is_version_1_2?()","is_win32?()","isa()","isa()","isatty()","isatty()","isatty()","isdst()","iseuc()","iseuc()","isjis()","isjis()","iso8601()","iso8601()","iso8601()","iso8601()","iso8601()","issetugid()","issjis()","issjis()","issue()","issuer()","issuer()","issuer()","issuer()","issuer=()","issuer=()","issuer_certificate=()","isutf8()","isutf8()","isvalid?()","isvalid?()","italy()","itcl_kind_of?()","item()","item()","itemdrag()","itementer()","itemleave()","itemmark()","itemstartdrag()","itemstroke()","item_cget()","item_cget_strict()","item_cget_tkstring()","item_configinfo()","item_configure()","item_element_cget()","item_element_cget_strict()","item_element_cget_tkstring()","item_element_configinfo()","item_element_configure()","itembind()","itembind()","itembind_append()","itembind_append()","itembind_remove()","itembind_remove()","itembindinfo()","itembindinfo()","itemcget()","itemcget()","itemcget_strict()","itemcget_strict()","itemcget_tkstring()","itemcget_tkstring()","itemconfig_hash_kv()","itemconfiginfo()","itemconfiginfo()","itemconfigure()","itemconfigure()","itemconfigure()","itemfocus()","itemfocus()","itemid()","itemid()","iteminfo()","items()","items()","items()","items()","items()","items()","items()","items()","items()","itemsunderarea()","itemtype()","itemtype()","itemtype()","itemtype()","iterator?()","iv=()","jacobian()","jd()","jd()","jd()","jisx0301()","jisx0301()","jisx0301()","jisx0301()","jobs()","jobs()","jobs_exist?()","join()","join()","join()","join()","join()","join()","join()","join()","join()","join()","join()","join_nowait()","join_nowait()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","julian()","julian?()","julian_leap?()","justify()","justify()","justify()","justify()","kanji_actual()","kanji_actual()","kanji_actual_displayof()","kanji_actual_displayof()","kanji_actual_hash()","kanji_actual_hash()","kanji_actual_hash_displayof()","kanji_actual_hash_displayof()","kanji_configinfo()","kanji_configinfo()","kanji_configure()","kanji_configure()","kanji_current_configinfo()","kanji_current_configinfo()","kanji_font()","kanji_font()","kanji_font_id()","kanji_font_id()","kanji_font_id()","kanji_input_end()","kanji_input_start()","kanji_metrics()","kanji_metrics()","kanji_metrics_displayof()","kanji_metrics_displayof()","kanji_metrics_hash()","kanji_metrics_hash()","kanji_metrics_hash_displayof()","kanji_metrics_hash_displayof()","kanji_replace()","kanji_replace()","kanjifont()","kanjifont()","kanjifont_configure()","kanjifont_copy()","kanjifont_copy()","kanjitagfont_configure()","kconv()","kconv()","keep_alive?()","keep_alive?()","keep_if()","keep_if()","keep_if()","keep_if()","keep_minsize()","keep_minsize()","keep_minsize?()","keep_minsize?()","key()","key()","key()","key()","key()","key=()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key_len=()","key_press()","keyname()","keypad()","keypad=()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","kikaku()","kill()","kill()","kill()","kill()","kill()","kill()","killclone()","kill_job()","kind_of?()","kind_of?()","kinput_attribute_config()","kinput_attribute_info()","kinput_send_spot()","kinput_start()","kjust()","kroc_rb_settings()","l()","label()","label()","label=()","labelat()","labelwidget()","lambda()","lambda?()","lang()","lappend()","lappend()","last()","last()","last()","last()","last()","last()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","lastchild()","last_child()","last_error()","last_error()","last_error()","last_error=()","last_match()","last_modified()","last_modified()","last_update()","last_update=()","latest_load_paths()","latest_rubygems_version()","latest_spec_for()","latest_specs()","latest_specs()","latest_specs()","latest_specs()","latest_version_for()","latin_actual()","latin_actual()","latin_actual_displayof()","latin_actual_displayof()","latin_actual_hash()","latin_actual_hash()","latin_actual_hash_displayof()","latin_actual_hash_displayof()","latin_configinfo()","latin_configinfo()","latin_configure()","latin_configure()","latin_current_configinfo()","latin_current_configinfo()","latin_font()","latin_font()","latin_font_id()","latin_font_id()","latin_font_id()","latin_metrics()","latin_metrics()","latin_metrics_displayof()","latin_metrics_displayof()","latin_metrics_hash()","latin_metrics_hash()","latin_metrics_hash_displayof()","latin_metrics_hash_displayof()","latin_replace()","latin_replace()","latinfont()","latinfont()","latinfont_configure()","latinfont_copy()","latintagfont_configure()","latintagfont_copy()","launch()","layout()","layout()","lchmod()","lchmod()","lchown()","lchown()","lcm()","lcm()","ld()","ldexp()","leaf?()","leap?()","leap?()","left()","legend()","legend_activate()","legend_bind()","legend_bind_append()","legend_bind_remove()","legend_bindinfo()","legend_cget()","legend_cget_strict()","legend_cget_tkstring()","legend_configinfo()","legend_configure()","legend_deactivate()","legend_get()","legend_window_create()","legendconfig()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length=()","level()","level()","level()","level=()","level=()","level_notifier=()","levenshtein_distance()","lex()","lex()","lex_init()","lex_int2()","lfenablebuttons()","lgamma()","lget()","lget()","lget_f()","lget_f()","lget_i()","lget_i()","lib_dirs_for()","lib_dirs_glob()","lib_files()","libcheck_for_tclconfig()","library()","library_name()","libyaml_version()","license()","license=()","licenses()","licenses=()","limit()","limits()","lindex()","lindex()","line()","line()","line()","line()","line()","line()","line()","line()","line_activate()","line_at()","line_bind()","line_bind_append()","line_bind_remove()","line_bindinfo()","line_buffer()","line_cget()","line_cget_strict()","line_cget_tkstring()","line_closest()","line_configinfo()","line_configure()","line_create()","line_deactivate()","line_delete()","line_exist?()","line_names()","line_pos()","line_show()","line_type()","line_width()","line_width=()","lineend()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno=()","lineno=()","lineno=()","lineno=()","lineno=()","linepos()","lines()","lines()","lines()","lines()","lines()","lines()","lines()","linestart()","linestyle()","linewidth()","linger()","linger()","link()","link()","link()","link()","link?()","link_files()","list()","list()","list()","list()","list()","list()","list()","list()","list()","list()","list()","list()","list()","list()","list()","list()","list=()","list=()","list_element()","list_element()","list_end_for()","list_files_in_directory()","list_index()","list_item_start()","list_known_classes()","list_methods_matching()","list_name()","list_name_full()","list_place()","list_type=()","list_type=()","listbox()","listboxborder()","listboxborder()","listboxrelief()","listboxrelief()","listen()","listen()","listen()","listen()","listen()","listen()","listen()","listen()","listener()","listener()","listener()","listener=()","listup()","ljust()","ln()","ln()","ln_s()","ln_sf()","lo()","lo_function()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","loaddir()","loaddir3()","loadicons()","loadimage()","loadimage3()","loadxml()","loadxml()","loadxml()","load_api_keys()","load_cache()","load_call()","load_class()","load_documents()","load_documents()","load_documents()","load_documents()","load_env_plugins()","load_file()","load_file()","load_file()","load_file()","load_file()","load_file()","load_file()","load_font()","load_gems_in()","load_gems_in()","load_gemspec()","load_gemspec()","load_history()","load_images()","load_images()","load_images()","load_imports()","load_imports()","load_method()","load_method()","load_methods_matching()","load_mime_types()","load_modules()","load_path_insert_index()","load_pem_file()","load_photo()","load_plugin_files()","load_plugins()","load_private_key()","load_public_key()","load_rakefile()","load_rakefile()","load_rakefile()","load_rb()","load_rb()","load_rb()","load_rb()","load_rdoc()","load_rdoc()","load_response()","load_specification()","load_specification()","load_specs()","load_stream()","load_stream()","load_stream()","load_tclscript_rsrc()","load_tclscript_rsrcid()","load_tk()","load_tk()","load_tk()","load_tk()","load_yaml()","loaded_from=()","loaded_path?()","local()","local()","local?()","local_address()","local_name()","local_name()","local_name=()","local_variables()","locale()","locale()","locale()","locale()","locale()","locale=()","locale=()","locale=()","locale=()","locale=()","locale_charmap()","localtime()","locate()","location()","location()","location()","location_of_caller()","lock()","lock()","lock()","lockcopy()","locked?()","log()","log()","log()","log()","log()","log()","log()","log()","log()","log()","log!()","log10()","log10()","log10!()","log2()","log2()","log2!()","log=()","logger()","logger=()","logging()","logging()","logging()","logging()","login()","login()","login()","logout()","look_for_directives_in()","look_for_directives_in()","lookup()","lookup()","lookup()","lookup_ring()","lookup_ring_any()","lookup_server()","loop()","loop_rest()","loop_rest()","loop_rest=()","loop_rest=()","loupe()","loupe()","lower()","lower()","lower()","lower()","lower()","lower()","lower()","lower()","lower()","lower_triangular?()","lreorder()","ls()","lset()","lset()","lstat()","lstat()","lstat()","lstat()","lstrip()","lstrip!()","lsub()","ludecomp()","lup()","lup_decomposition()","lusolve()","m()","m()","m()","m()","m()","magnitude()","magnitude()","magnitude()","magnitude()","magnitude()","magnitude()","mail()","mailfrom()","mailfrom()","mails()","mails()","mails()","mails()","main()","main()","main()","main_irb()","main_thread()","main_type()","maininterp_eval()","maininterp_record()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop()","mainloop_abort_on_exception()","mainloop_abort_on_exception()","mainloop_abort_on_exception()","mainloop_abort_on_exception()","mainloop_abort_on_exception()","mainloop_abort_on_exception()","mainloop_abort_on_exception()","mainloop_abort_on_exception=()","mainloop_abort_on_exception=()","mainloop_abort_on_exception=()","mainloop_abort_on_exception=()","mainloop_abort_on_exception=()","mainloop_abort_on_exception=()","mainloop_abort_on_exception=()","mainloop_thread?()","mainloop_watchdog()","mainloop_watchdog()","mainloop_watchdog()","mainloop_watchdog()","mainloop_watchdog()","mainloop_watchdog()","mainloop_watchdog()","mainloop_watchdog()","major_version()","major_version()","make()","make()","makeclone()","makecompoundmenu()","makenotebook()","makethemecontrol()","makethememenu()","maketoolbars()","make_seedismiss()","make_affine!()","make_const()","make_destination_dirs()","make_expires()","make_link()","make_message()","make_pairs()","make_partial_content()","make_passwd()","make_passwd()","make_passwd()","make_random_fasta()","make_regexp()","make_repeat_fasta()","make_safe()","make_safe()","make_safe()","make_safe()","make_safe()","make_safe()","make_signature()","make_stream()","make_stream()","make_switch()","make_symlink()","make_temp_directories()","make_thread_list()","make_tuple()","makedirs()","makedirs()","makedirs()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","makers()","malloc()","malloc()","malloc()","malloc()","malloc()","malloc_allocated_size()","malloc_allocations()","manage()","manage_owners()","manager()","manager()","mandelbrot?()","manipulable?()","manipulable?()","manipulable?()","manipulable?()","manipulable?()","manipulable?()","manipulable?()","manipulable?()","manipulable?()","manipulable?()","map()","map()","map()","map()","map()","map()","map()","map()","map()","map()","map!()","map!()","map2()","map=()","map_configinfo()","map_default_configinfo()","map_gems_to_specs()","mapped?()","mapped?()","mark()","mark()","mark()","mark()","mark()","mark()","mark()","mark()","mark()","mark()","mark_add()","mark_clear()","mark_get()","mark_gravity()","mark_names()","mark_next()","mark_previous()","mark_remove()","mark_set()","mark_trusted()","mark_trusted()","mark_trusted()","mark_trusted()","mark_trusted()","mark_trusted()","mark_trusted()","mark_trusted()","mark_unset()","mark_version()","marker_after()","marker_before()","marker_bind()","marker_bind_append()","marker_bind_remove()","marker_bindinfo()","marker_cget()","marker_cget_strict()","marker_cget_tkstring()","marker_configinfo()","marker_configure()","marker_create()","marker_delete()","marker_exist?()","marker_names()","marker_type()","markup()","markup_code()","marquee_cget()","marquee_cget_strict()","marquee_cget_tkstring()","marquee_configinfo()","marquee_configure()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_version()","mask()","mask()","mask!()","mask=()","mask_protected_sequences()","master?()","master?()","master?()","master?()","master?()","master?()","master?()","master?()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match?()","match?()","match_cert()","match_io()","match_path()","match_segment()","match_to()","match_to_consume()","matched()","matched?()","matched_size()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches_for_glob()","matches_spec?()","matching_file?()","matching_files()","matching_methods()","matching_paths()","matching_specs()","math_mode=()","matzruby_exec()","max()","max()","max()","max=()","max_by()","max_flag_count()","max_flag_count=()","max_input_length()","max_input_length_rec()","max_nesting()","max_nesting=()","maxgroups()","maxgroups=()","maxlen()","maxlen()","maxlen()","maxlen()","maxsize()","maxsize()","maxx()","maxy()","maybe_64bit?()","mc()","mc()","mc()","mc()","mday()","mday()","mdoc2man()","mdoc2man()","mdtm()","measure()","measure()","measure()","measure()","measure()","measure()","measure()","measure2()","measure_displayof()","measure_displayof()","measure_displayof()","measure_displayof()","measure_file()","media_subtype()","media_subtype()","media_subtype()","media_subtype()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","members()","members()","memberwise()","menu()","menu()","menu()","menubar()","menubuttons()","menucget()","menucget()","menucget_strict()","menucget_strict()","menuconfiginfo()","menuconfiginfo()","menuconfigure()","menuconfigure()","menupath()","menupath_glob()","menupath_tclregexp()","menutype()","merge()","merge()","merge()","merge()","merge()","merge()","merge()","merge()","merge()","merge()","merge!()","merge!()","merge2()","merge_options()","merge_rects()","merged?()","message()","message()","message()","message()","message()","message()","message()","message()","message()","messagereaddelayed()","message_loop()","message_print()","meta()","meta_vars()","metafile()","metafile()","method()","methodcall()","methodresponse()","method_added()","method_defined?()","method_document()","method_file()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_type()","methods()","methods()","methods_by_type()","methods_matching()","metrics()","metrics()","metrics()","metrics()","metrics_displayof()","metrics_displayof()","metrics_displayof()","metrics_displayof()","metrics_hash()","metrics_hash()","metrics_hash()","metrics_hash()","metrics_hash_displayof()","metrics_hash_displayof()","metrics_hash_displayof()","metrics_hash_displayof()","microseconds()","milestone()","milestone()","milliseconds()","mime_split()","mime_type()","min()","min()","min()","min=()","min_by()","minmax()","minmax_by()","minor()","minor_version()","minor_version()","minsize()","minsize()","minute=()","minute=()","mjd()","mktextconfig()","mkboard()","mkcol()","mkcol()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir_p()","mkmatrix()","mkmf()","mkpath()","mkpath()","mkpieces()","mktime()","mktmpdir()","mmult()","moddir()","mode()","mode()","mode()","mode()","mode()","models()","modifiable()","modified?()","modified?()","modify_taskbar()","module()","module?()","module?()","module_eval()","module_exec()","modules()","modules()","modules()","modules_hash()","modules_hash()","modulo()","modulo()","modulo()","modulo()","modulo()","mon()","mon()","mon=()","mon_enter()","mon_exit()","mon_synchronize()","mon_try_enter()","monday?()","monday?()","month()","month()","month=()","monthly()","mount()","mount()","mount_proc()","mountpoint?()","mousebar()","mouseinterval()","mousemask()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move()","move0()","move1()","move10()","move11()","move12()","move13()","move14()","move15()","move15a()","move16()","move17()","move18()","move19()","move2()","move20()","move21()","move22()","move23()","move24()","move25()","move26()","move3()","move4()","move5()","move6()","move7()","move8()","move9()","move_abs()","move_after()","move_after()","move_after()","move_after()","move_before()","move_before()","move_before()","move_before()","move_big_image()","move_from_i()","move_into()","move_into()","move_piece()","move_to()","move_to()","moveobject()","moveto()","moveto()","moveto()","msgd()","mtime()","mtime()","mtime()","mtime()","mtime()","mtime()","mtime=()","mu_extended()","mu_lock()","mu_locked?()","mu_synchronize()","mu_try_lock()","mu_unlock()","mult()","multicall()","multicall2()","multicall2_async()","multicall_async()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart_form()","must_c_version()","must_call_validators()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mutex()","mv()","mv()","mv()","n_bytes()","n_bytes()","n_bytes()","n_bytes()","n_jobs()","n_mails()","n_mails()","n_mails()","n_mails()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name=()","name=()","name=()","name_for_path()","name_for_path()","name_list()","name_prefix()","name_prefix()","name_regexp()","named_captures()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names()","names_widget()","namespace()","namespace()","namespace()","namespace=()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespaceuri()","namespace_context()","namespace_context=()","namespace_uri()","namespaces()","namespaces=()","namespaces=()","nan?()","nan?()","native()","natural()","navigate()","nearest()","nearest()","nearest()","nearest()","nearest()","nearest()","nearest()","need_base64_encode?()","need_base64_encode?()","need_initialize_variables()","need_initialize_variables()","need_parent?()","need_parent?()","needed?()","needed?()","needed?()","nest()","nest()","nesting()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new2()","new2()","new3()","newroom()","newroom2()","newwrapregexp()","newwrapregexp=()","new_alias_name()","new_cond()","new_from_file()","new_from_resource()","new_hash()","new_hash()","new_hash()","new_master()","new_master()","new_master()","new_master()","new_menuspec()","new_ntoh()","new_ostruct_member()","new_proc_class()","new_proc_class()","new_proc_class()","new_proc_class_random()","new_proc_class_random()","new_proc_class_random()","new_safe_slave()","new_safe_slave()","new_safe_slave()","new_safe_slave()","new_scope()","new_seed()","new_slave()","new_slave()","new_slave()","new_slave()","new_slice()","new_start()","new_with()","new_with()","new_with_name()","new_with_uri()","new_with_uri()","new_with_utf_backslash()","new_with_value_if_need()","new_without_utf_backslash()","newitem()","newobj()","newobj()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next!()","next!()","next!()","nextnode()","nextnode()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","nextsibling()","next_current()","next_day()","next_element()","next_entry()","next_mark()","next_menu()","next_month()","next_sibling()","next_sibling=()","next_sibling_node()","next_square()","next_step()","next_to()","next_update()","next_update=()","next_value()","next_values()","next_wait()","next_wait()","next_year()","nextrange()","nextrange()","nil?()","nil?()","nkf()","nl()","nlink()","nlsolve()","nlst()","nm()","nocbreak()","nocrmode()","nodefromid()","nodefromid()","nodefromid()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodename()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetype()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypestring()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodetypedvalue=()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","nodevalue=()","node_export()","node_import()","node_text()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","nodelay=()","nodes()","nodes()","nodoc()","noecho()","noecho()","noecho()","non_aliases()","non_nil_attributes()","none?()","none?()","none?()","nonl()","nonzero?()","nonzero?()","nonzero?()","nonzero?()","noop()","noop()","noraw()","norm()","norm()","normal?()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize()","normalize!()","normalize_comment()","normalize_path()","normalize_propname()","normalize_space()","normalize_uri()","normalize_yaml_input()","normalized()","normalized_file_list()","not()","not_after()","not_after=()","not_available()","not_available()","not_available()","not_before()","not_before=()","not_modified?()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","notation()","notationname()","notationdecl()","notationdecl()","notationdecl?()","notations()","notations()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify?()","notify?()","notify?()","notify_cget()","notify_cget_strict()","notify_cget_tkstring()","notify_configinfo()","notify_configure()","notify_observers()","notify_observers()","noutrefresh()","now()","now()","nowrite()","nowrite()","nread()","nsec()","ntop()","null?()","null?()","num_of_mainwindows()","num_or_nil()","num_or_nil()","num_or_str()","num_or_str()","num_waiting()","num_waiting()","number()","number()","number()","numerator()","numerator()","numerator()","numerator()","numerator()","numerator()","numeric()","numeric()","numeric=()","numeric=()","numeric_element()","numeric_element()","numeric_type=()","numeric_type=()","numlist()","numlist()","numlist=()","numlist=()","numlist_element()","numlist_element()","numlist_type=()","numlist_type=()","object_address_group()","object_class()","object_group()","object_id()","object_maker()","object_maker()","object_maker()","object_nl()","object_nl=()","observ_info()","observs()","oct()","odd?()","odd?()","odd?()","odd?()","off()","off()","off()","off()","off()","off_event()","off_tags()","offset()","offset()","offset=()","offset_momentum()","offset_vtbl()","oflush()","oid()","oid()","oid=()","oid=()","ok?()","ok?()","ok_to_remove?()","old()","old_enc=()","old_inspect()","old_to_s()","old_to_s()","ole_activex_initialize()","ole_classes()","ole_classes()","ole_classes()","ole_free()","ole_free()","ole_func_methods()","ole_get_methods()","ole_initialize()","ole_method()","ole_method_help()","ole_methods()","ole_methods()","ole_obj_help()","ole_put_methods()","ole_query_interface()","ole_reference_count()","ole_respond_to?()","ole_show_help()","ole_type()","ole_type()","ole_type()","ole_type()","ole_type_detail()","ole_type_detail()","ole_typelib()","ole_typelib()","ole_types()","ole_uninitialize()","on()","on()","on()","on()","on()","on()","onnavigatecomplete2()","ononquit()","on_attr_charref()","on_attr_charref_hex()","on_attr_entityref()","on_attr_value()","on_attribute()","on_cdata()","on_chardata()","on_charref()","on_charref()","on_charref_hex()","on_charref_hex()","on_comment()","on_comment()","on_curve?()","on_default()","on_default()","on_entityref()","on_entityref()","on_etag()","on_event()","on_event_with_outargs()","on_head()","on_kw()","on_screen()","on_stag()","on_stag_end()","on_stag_end()","on_stag_end_empty()","on_stag_end_empty()","on_tags()","on_tail()","on_tstring_beg()","on_tstring_end()","on_xmldecl_encoding()","on_xmldecl_end()","on_xmldecl_standalone()","on_xmldecl_version()","ondataavailable()","ondataavailable()","ondataavailable=()","ondataavailable=()","ondataavailable=()","one()","one?()","ongoing_visibility=()","onreadystatechange()","onreadystatechange()","onreadystatechange=()","onreadystatechange=()","onreadystatechange=()","onreadystatechange=()","onreadystatechange=()","onsig()","ontransformnode=()","ontransformnode=()","ontransformnode=()","opaque=()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open!()","open?()","open?()","open?()","open_file()","open_message_stream()","open_message_stream()","open_recurse()","open_recurse()","open_server()","open_server()","open_server()","open_server()","open_server()","open_server_inaddr_any()","open_tree()","open_tree()","open_uri_or_path()","opendir()","opened?()","opt_c()","opt_j()","opt_m()","opt_t()","opt_y()","optionbutton1()","optionbutton1_2()","optionleave1()","optionmenu()","optionmotion1()","optionrelease1()","option_list()","option_methods()","optional?()","options()","options()","options()","options()","options()","options()","options()","options()","options=()","options=()","optname()","ord()","ord()","ord()","order()","order()","order!()","order!()","ordering=()","ordinal()","ordinal()","org_initialize()","orig_meta_vars()","orig_name()","orig_name=()","orig_parse()","orig_parse_uri()","original_dir()","orthogonal?()","os_code()","other_elements()","out()","out()","out()","out()","out_of_line?()","outdated()","outdated()","outdated()","output()","output()","output()","output()","output()","output()","output=()","output=()","output?()","output_encoding=()","output_flag_file()","output_path()","output_value()","over()","over()","over?()","over_attr()","over_markup()","overlapping()","overrideredirect()","overrideredirect()","overwrite()","overwrite=()","overwrite=()","overwrite?()","owned?()","owned?()","owned?()","owned?()","owner()","owner()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","ownerdocument()","p()","p()","pack()","pack()","pack()","pack()","pack()","pack()","pack_sockaddr_in()","pack_sockaddr_un()","package_dir_path()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_name()","package_patchlevel()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","package_version()","packdw()","packqw()","padding=()","padx()","pady()","page()","pages()","pages()","paging?()","pair()","pair()","pair_codepoints()","pair_content()","pair_number()","pane_cget()","pane_cget_strict()","pane_cget_tkstring()","pane_config()","pane_config()","pane_config()","pane_configinfo()","pane_configinfo()","pane_configinfo()","pane_configure()","panecget()","panecget()","panecget()","panecget_strict()","panecget_strict()","panecget_strict()","panecget_tkstring()","paneconfiginfo()","paneconfiginfo()","paneconfiginfo()","paneconfigure()","paneconfigure()","paneconfigure()","panes()","panes()","panes()","param_list()","param_seq()","parameters()","parameters()","parameters()","params()","params()","params()","params()","params()","params()","params=()","params_ok?()","paranoid()","parent()","parent()","parent()","parent()","parent()","parent()","parent()","parent=()","parent=()","parent=()","parent?()","parent?()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parentnode()","parent_file_name()","parent_name()","parent_name()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parseerror()","parseerror()","parseerror()","parsemethodcall()","parsemethodcall()","parsemethodresponse()","parsemethodresponse()","parse_tk_libs()","parse_age()","parse_alias()","parse_aliases()","parse_args()","parse_args()","parse_attr()","parse_attr_accessor()","parse_call_parameters()","parse_class()","parse_comment()","parse_config()","parse_constant()","parse_content_type()","parse_csv()","parse_ctype()","parse_documents()","parse_documents()","parse_dot_doc_file()","parse_file()","parse_file()","parse_file()","parse_file()","parse_files()","parse_files_matching()","parse_header()","parse_helper()","parse_include()","parse_line()","parse_macro()","parse_meta_attr()","parse_meta_method()","parse_method()","parse_method_or_yield_parameters()","parse_method_parameters()","parse_module()","parse_name()","parse_openssl()","parse_opts()","parse_printf_format()","parse_qvalues()","parse_range_header()","parse_require()","parse_result()","parse_rfc2253()","parse_scripts()","parse_set_cookie()","parse_set_cookies()","parse_signature()","parse_source()","parse_source()","parse_statements()","parse_stream()","parse_stream()","parse_struct_signature()","parse_symbol_arg()","parse_symbol_in_arg()","parse_task_string()","parse_task_string()","parse_tclconfig()","parse_time()","parse_to_rects()","parse_top_level_statements()","parse_unicode_data()","parse_uri()","parse_uri()","parse_visibility()","parse_yield()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parsed()","parser()","parser()","parser()","parser()","parsetext()","partition()","partition()","pass()","passwd()","password()","password=()","password=()","password_field()","paste()","patch()","patch()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path=()","path_ok?()","pathmap()","pathmap_explode()","pathmap_partial()","pathmap_replace()","paths()","paths=()","pattern()","pattern()","pbmode()","pbstart()","pbstop()","pbkdf2_hmac()","pbkdf2_hmac_sha1()","pboard()","peek()","peek()","peek()","peek()","peek()","peek()","peek_equal?()","peek_match?()","peek_read()","peek_tk()","peek_token()","peek_values()","peep()","peer_cert()","peer_cert()","peer_cert()","peer_cert()","peer_cert_chain()","peer_cert_chain()","peeraddr()","peeraddr()","peeraddr()","peeraddr()","pen_cget()","pen_cget_strict()","pen_cget_tkstring()","pen_configinfo()","pen_configure()","pen_create()","pen_delete()","pen_names()","pending()","percent_doc()","perforation_activate()","perforation_highlight()","perforation_highlight()","perforation_invoke()","perforation_invoke()","perform_with_block()","period()","permutation()","permutation?()","permute()","permute!()","permute!()","pfamily()","phase()","phase()","phase()","philosopher()","phoneskipleft()","phoneskipright()","pi()","pi()","pick_font()","pick_font_fs()","pict()","pid()","pid()","pid()","pid()","pid()","pie()","piece()","pipe()","pipe?()","pipe?()","pipe?()","pipe?()","pipeline()","pipeline_r()","pipeline_rw()","pipeline_start()","pipeline_w()","pixel_to_coords()","pixel_to_coords()","pixels()","pixels()","pkcs5_keyivgen()","place()","place()","place()","plain_text()","plaintext()","plaintext()","platform()","platform=()","platforms()","platforms=()","plot()","plot()","plot()","plot()","plot()","plot()","plot()","plot()","plot()","plot()","plot()","plotdown()","plotmove()","plot_circle()","plot_circle()","plot_data()","plot_filled_circle()","plot_filled_circle()","plot_filled_rectangle()","plot_filled_rectangle()","plot_funcont()","plot_function()","plot_line()","plot_rectangle()","plot_rectangle()","plotconfig()","plotpack()","plotpack()","plural_forms()","point()","point_conversion_form()","point_conversion_form=()","pointer()","pointer=()","pointerx()","pointerx()","pointerxy()","pointerxy()","pointery()","pointery()","poke()","polar()","polar()","polar()","polar_coordinates()","polar_coordinates()","polar_to_pixel()","polar_to_pixel()","pop()","pop()","pop()","pop()","pop()","pop_inspect_key()","pop_token()","pop_up()","pop_workspace()","popd()","popdir()","popen()","popen2()","popen2e()","popen3()","popstate()","populate()","populate_roots()","populate_tree()","popup()","popup_menu()","port()","port()","port()","port()","port()","port=()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos=()","pos=()","pos=()","pos=()","pos=()","pos=()","pos=()","pos=()","pos=()","pos_gravity()","pos_gravity=()","position()","position()","position()","position()","position()","position()","position()","positionfrom()","positionfrom()","post()","post()","post()","post()","post()","post()","post()","post2()","post2()","post_build()","post_form()","post_form()","post_install()","post_match()","post_match()","post_reset()","post_uninstall()","postcascade()","postcommand()","postproc()","postscript()","postscript()","postscript()","postscript_cget()","postscript_cget_strict()","postscript_cget_tkstring()","postscript_configinfo()","postscript_configure()","postscript_output()","power()","power!()","power!()","power!()","pp()","pp()","pp()","pp()","pp()","pp()","pp_hash()","pp_object()","ppid()","ppx()","ppx()","pre_install()","pre_match()","pre_match()","pre_reset()","pre_uninstall()","precs()","pred()","pred()","predicate()","predicate()","predicate()","predicate_to_string()","prefer()","preferences()","preferences()","preferences()","preferences()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefix()","prefixes()","prelude()","prelude_base()","prelude_name()","prepare_backtrace()","prepare_backtrace()","prepare_fasta_output()","prepare_range()","prepare_wc_input()","prepend()","prepend()","preproc()","preprocess()","prerelease?()","prerelease?()","prerelease?()","prerelease?()","prerelease_gems()","prerelease_gems()","prerelease_specs()","prerelease_specs()","prerequisite_tasks()","present()","present_exact()","preservewhitespace()","preservewhitespace()","preservewhitespace()","preservewhitespace=()","preservewhitespace=()","preservewhitespace=()","pretty()","pretty_generate()","pretty_inspect()","pretty_name()","pretty_name()","pretty_new_name()","pretty_old_name()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_cycle()","pretty_print_inspect()","pretty_print_instance_variables()","prev()","prev()","prev()","prev()","prev_day()","prev_month()","prev_sibling()","prev_year()","previous()","previous()","previous()","previous=()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previoussibling()","previous_element()","previous_mark()","previous_sibling=()","previous_sibling_node()","prevrange()","prevrange()","primary()","primary()","prime?()","prime?()","prime?()","prime?()","prime_division()","prime_division()","prime_division()","prime_fasttest?()","primes()","primes_so_far()","primitive_convert()","primitive_errinfo()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print_alias()","print_attribute()","print_class()","print_constant()","print_dependencies()","print_file()","print_file()","print_header()","print_key()","print_key()","print_method()","print_module()","print_profile()","print_rakefile_directory()","print_rakefile_directory()","print_usage()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printn()","printn()","priority()","priority=()","private?()","private?()","private?()","private?()","private_class_method()","private_decrypt()","private_decrypt()","private_encrypt()","private_encrypt()","private_instance_methods()","private_key()","private_key=()","private_key?()","private_method_defined?()","private_methods()","proc()","procedure()","procedure()","procedure()","procedure=()","procedure=()","procedure_element()","procedure_element()","procedure_type=()","procedure_type=()","process()","process()","process()","process()","process()","process()","process_args()","process_args()","process_directive()","process_options()","process_url()","processinginstruction()","processing_instruction()","processing_instruction()","produce()","product()","progid()","progids()","program_name()","progress()","progress()","progress_message()","progress_reporter()","progress_reporter()","promote_load_path()","prompt()","prompt()","prompt()","prompt_mode=()","prompting?()","propagate()","propagate()","propagate()","propagate()","propagate_set()","proper_subset?()","proper_superset?()","propfind()","propfind()","proppatch()","proppatch()","protected_instance_methods()","protected_method_defined?()","protected_methods()","protected_methods()","protocol()","protocol()","protocol()","protocols()","protocols()","provide()","provide()","proxy()","proxy2()","proxy2_async()","proxy?()","proxy?()","proxy_address()","proxy_address()","proxy_async()","proxy_auth()","proxy_auth_get()","proxy_basic_auth()","proxy_basic_auth()","proxy_class?()","proxy_class?()","proxy_coord()","proxy_coord()","proxy_forget()","proxy_forget()","proxy_pass()","proxy_pass()","proxy_place()","proxy_place()","proxy_port()","proxy_port()","proxy_service()","proxy_uri()","proxy_user()","proxy_user()","proxyaddr()","proxyaddr()","proxyport()","proxyport()","prune()","prune()","ps_print()","pseudo_toplevel_evaluable=()","pseudo_toplevel_evaluable?()","psych_to_yaml()","psych_y()","psych_yaml_as()","pthread_check()","ptr()","ptr()","ptr()","ptr=()","public()","public?()","public?()","public?()","public?()","publicid()","publicid()","public_class_method()","public_decrypt()","public_decrypt()","public_encrypt()","public_encrypt()","public_instance_method()","public_instance_methods()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key=()","public_key=()","public_key=()","public_key=()","public_key?()","public_method()","public_method_defined?()","public_methods()","public_methods()","public_send()","pull()","pull()","pull()","purpose=()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push()","push_inspect_key()","push_workspace()","pushd()","pushdir()","pushstate()","put()","put()","put()","put()","put_urls()","putback()","putbinaryfile()","putc()","putc()","putc()","putc()","putc()","putc()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puttextfile()","puzzleswitch()","pwd()","pwd()","pwd()","pwd()","pwd()","qrst()","quadratic()","quantize()","quantize()","query()","query()","query()","query()","query()","query=()","quick()","quick_emit()","quick_emit()","quiet()","quiet()","quiet=()","quirks_mode()","quirks_mode=()","quirks_mode?()","quirks_mode?()","quit()","quit()","quit()","quit()","quit()","quo()","quo()","quo()","quo()","quo()","quote()","quote()","quote()","quux()","quux()","r()","racc_runtime_type()","radio_button()","radio_group()","raise()","raise()","raise()","raise()","raise()","raise()","raise()","raise()","raise()","raise()","raise()","raise()","raise_for_undefined_entity?()","raise_for_undefined_entity?()","raise_for_undefined_entity?()","raise_if_conflicts()","rake_check_options()","rake_extension()","rake_merge_option()","rake_original_const_missing()","rake_original_time_compare()","rake_output_message()","rake_require()","rake_require()","rake_system()","rakefile_location()","rakefile_location()","rand()","rand()","rand()","rand_bool()","random()","randomautoscancheck()","randomautoscancheckaux()","randombutton1()","randomdrop()","randomleave1()","randommotion()","randommotion1()","randomrelease1()","random_n()","random_bytes()","random_iv()","random_key()","random_number()","random_string()","ranf()","range()","range()","range()","range()","range=()","range_length()","range_open()","range_open_to()","range_to()","ranges()","ranges()","rank()","rank_e()","rassoc()","rassoc()","rassoc()","rationalize()","rationalize()","rationalize()","rationalize()","rationalize()","rationalize()","raw()","raw()","raw()","raw!()","raw_cookie()","raw_cookie2()","raw_path()","rb_appsend()","rb_scan_args()","rc_file()","rc_file_generators()","rchars()","rchars()","rchart()","rcptto()","rcptto()","rcptto_list()","rcptto_list()","rd()","rd_order()","rdev()","rdev_major()","rdev_minor()","rdoc()","rdoc_installed?()","rdoc_installed?()","rdoc_options()","rdoc_options=()","rdoc_task_description()","rdoc_version()","re_exchange()","re_exchange()","re_exchangeable?()","re_exchangeable?()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read_all()","read_all()","read_bin()","read_binary()","read_body()","read_directive()","read_documentation_modifiers()","read_entries()","read_entries()","read_entries()","read_escape()","read_file()","read_file()","read_file()","read_file()","read_file()","read_i()","read_ids1()","read_ids1_with_locations()","read_ids2()","read_jpeg()","read_jpeg()","read_nonblock()","read_nonblock()","read_nonblock()","read_nonblock()","read_s()","read_s_expand()","read_smime()","read_timeout=()","read_timeout=()","read_timeout=()","read_timeout=()","read_timeout=()","read_timeout=()","read_timeout=()","read_timeout=()","read_type_class()","read_type_class()","read_type_class()","read_with_encoding()","read_with_encoding()","read_with_encoding()","read_with_substitution()","readable?()","readable?()","readable?()","readable?()","readable_atfer_eof?()","readable_atfer_eof?()","readable_atfer_eof?()","readable_real?()","readable_real?()","readable_real?()","readable_real?()","readagain_bytes()","readbyte()","readbyte()","readbyte()","readbyte()","readchar()","readchar()","readchar()","readchar()","readchar()","readchar()","readfile()","readfile()","readfile()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlink()","readlink()","readpartial()","readpartial()","readpartial()","readpartial()","readpartial()","readpartial()","ready()","ready()","ready?()","ready?()","readystate()","readystate()","readystate()","readystate()","readystate()","readystate()","readystate()","real()","real()","real()","real?()","real?()","real?()","real_inspect()","realdirpath()","realdirpath()","realloc()","really_verbose()","realpath()","realpath()","realtime()","reason()","reason()","reason()","reason_phrase()","reason_phrase()","receive()","receiver()","recipients()","recolortree()","recolortree()","recomputeangle()","record_entity_expansion()","record_location()","record_location()","recover()","rect()","rect()","rect()","rect()","rectangular()","rectangular()","rectangular()","rectangular()","recurse_proc()","recursion_limit()","recursion_limit()","recursion_limit()","recursion_limit()","recursion_limit()","recursion_limit()","recursion_limit()","recursion_limit()","recv()","recv_io()","recv_nonblock()","recv_reply()","recv_reply()","recv_request()","recv_request()","recvfrom()","recvfrom()","recvfrom()","recvfrom_nonblock()","recvfrom_nonblock()","recvmsg()","recvmsg_nonblock()","redirect?()","redirector()","redither()","redither()","redraw()","reduce()","reenable()","ref()","ref()","ref()","ref()","reformat()","refresh()","refresh()","refresh()","refresh()","refresh()","refresh()","refresh()","refresh()","refresh!()","refresh!()","refresh_line()","regexp()","regexp()","regexp()","regist()","regist_server()","register()","register()","register()","register()","register()","register()","register()","register()","register()","register_command()","register_uri()","registered()","registry=()","regular?()","rehash()","rehash()","rehash()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject!()","reject!()","reject!()","reject!()","reject!()","reject!()","reject!()","relative?()","relative?()","relative_path_from()","relative_to()","release()","release()","release()","released_gems()","released_gems()","released_specs()","released_specs()","reload()","reload()","reload()","reload()","remainder()","remainder()","remainder()","remote?()","remote_address()","remote_ip()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","removeattribute()","removeattributenode()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removechild()","removenameditem()","removequalifieditem()","remove_all()","remove_by_name()","remove_callback()","remove_callback_internal()","remove_cdecl_callback()","remove_class_variable()","remove_coding_comment()","remove_commented_out_lines()","remove_destroy()","remove_destroy()","remove_dir()","remove_entry()","remove_entry_secure()","remove_executables()","remove_file()","remove_from_documentation?()","remove_handler()","remove_invisible()","remove_leading_dot_dir()","remove_nodoc()","remove_nodoc_children()","remove_old_bin_files()","remove_option()","remove_owners()","remove_private_comments()","remove_private_comments()","remove_private_comments()","remove_response_handler()","remove_server()","remove_siginfo_handler()","remove_siginfo_handler()","remove_spec()","remove_spec()","remove_spec()","remove_specs_unsatisfied_by()","remove_stdcall_callback()","remove_tk_procs()","remove_tk_procs()","remove_tk_procs()","remove_tk_procs()","remove_token_listener()","remove_unparseable()","remove_with_destroy()","remove_with_destroy()","remove_with_destroy()","remove_with_destroy()","remove_with_destroy()","rename()","rename()","rename()","rename()","render()","render_template()","renew()","renew()","reopen()","reopen()","reopen()","reopen()","reorder()","reorder()","reorder()","reorganize()","rep()","repair_command()","repeat()","repeatdemo()","repeated_combination()","repeated_permutation()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacechild()","replacedata()","replacedata()","replacedata()","replacedata()","replace_chars()","replace_chars()","replace_child()","replace_coords()","replace_coords()","replace_with()","replacement()","replacement=()","replicate()","reply()","reply()","reply_service()","report()","report()","report_attributes()","report_class_module()","report_constants()","report_methods()","represent_map()","represent_object()","represent_scalar()","represent_seq()","req_body()","reqheight()","reqheight()","request()","request()","request()","request()","request_body_permitted?()","request_get()","request_get()","request_head()","request_head()","request_post()","request_post()","request_uri()","require()","require()","require_exact()","require_path()","require_path=()","require_path_info?()","require_relative()","required_attribute?()","required_attributes()","required_location()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_ruby_version=()","required_rubygems_version=()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","requirement()","requirements()","requirements=()","requirements_list()","reqwidth()","reqwidth()","rerdoc_task_description()","reread()","resample()","resample()","rescale()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset_pointadjust()","reset_pointadjust()","reset_prog_mode()","reset_region()","reset_step()","resizable()","resizable()","resize()","resize()","resizeterm()","resolve()","resolve()","resolveexternals()","resolveexternals()","resolveexternals()","resolveexternals=()","resolveexternals=()","resolveexternals=()","resolve_add()","resolve_aliases()","resolve_args()","resolver()","resolver()","resolver()","resources()","respond_to?()","respond_to?()","respond_to?()","respond_to_missing?()","respond_to_missing?()","responsebody()","responsebody()","responsestream()","responsestream()","responsetext()","responsetext()","responsexml()","responsexml()","response_body_permitted?()","rest()","rest?()","rest_size()","restart()","restart()","restart()","restart()","restart()","restart()","restart()","restart()","restart()","restore()","restore()","restore()","restore()","restore()","restore()","restore()","restore_from_file()","restore_overwrite()","restore_overwrite_from_file()","restsize()","result()","result()","result()","result()","resume()","resume()","resume_all()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","ret_val()","retrbinary()","retrlines()","return_headers?()","return_type()","return_type_detail()","return_vtype()","retval?()","revcomp()","reverse()","reverse()","reverse()","reverse!()","reverse!()","reverse_each()","reverse_each()","reverse_each_name()","reverse_each_name_with_prefix_optional()","reverser()","revoked()","revoked=()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rfc1123_date()","rfc2822()","rfc2822()","rfc2822()","rfc2822()","rfc3339()","rfc3339()","rfc3339()","rfc3339()","rfc822()","rfc822()","rfc822()","rfc822()","rgb()","rgb()","ri_dir()","ri_installed?()","ri_installed?()","rid()","rid()","right()","rindex()","rindex()","rjust()","rl()","rm()","rm()","rm_f()","rm_f()","rm_r()","rm_rf()","rmdir()","rmdir()","rmdir()","rmdir()","rmdir()","rmdir()","rmtree()","rmtree()","roomchanged()","roomchanged2()","root()","root()","root()","root()","root()","root()","root()","root?()","root?()","root?()","root_node()","roots()","rootx()","rootx()","rooty()","rooty()","rotate()","rotate()","rotate!()","rotate_c()","rotate_item()","round()","round()","round()","round()","round()","round()","round()","round()","round()","round_poly()","round_rect()","route_from()","route_to()","row()","row()","row()","row()","row_index()","row_size()","row_vector()","row_vectors()","rowconfiginfo()","rowconfiginfo()","rowconfigure()","rowconfigure()","rows()","rpartition()","rsearch()","rsearch_with_length()","rsqrt()","rss()","rstrip()","rstrip!()","ruby()","ruby()","ruby()","ruby2html()","ruby_engine()","ruby_exec()","ruby_version()","rubygems_api_key=()","rubygems_api_request()","rulermktab()","rulermovetab()","rulernewtab()","rulerreleasetab()","rulerselecttab()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_applet()","run_config()","run_config()","run_rdoc()","run_rdoc()","runfile()","running?()","running?()","running_mainloop?()","running_mainloop?()","running_mainloop?()","running_mainloop?()","runtime_dependencies()","safe?()","safe?()","safe?()","safe?()","safe?()","safe?()","safe?()","safe_base?()","safe_base?()","safe_base?()","safe_base?()","safe_base?()","safe_level()","safe_level()","safe_level()","safe_level()","safe_level()","safe_level()","safe_level()","safe_level()","safe_level()","safe_level=()","safe_level=()","safe_level=()","safe_level=()","safe_level=()","safe_level=()","safe_level=()","safe_level=()","safe_ln()","safe_unlink()","safeip_add_to_access_path()","safeip_add_to_access_path()","safeip_add_to_access_path()","safeip_add_to_access_path()","safeip_configinfo()","safeip_configinfo()","safeip_configinfo()","safeip_configinfo()","safeip_configure()","safeip_configure()","safeip_configure()","safeip_configure()","safeip_delete()","safeip_delete()","safeip_delete()","safeip_delete()","safeip_find_in_access_path()","safeip_find_in_access_path()","safeip_find_in_access_path()","safeip_find_in_access_path()","safeip_set_log_cmd()","safeip_set_log_cmd()","safeip_set_log_cmd()","safeip_set_log_cmd()","sample()","sample()","sample()","sample()","sanitize()","sanitize_string()","sans_arguments()","sash_coord()","sash_coord()","sash_dragto()","sash_dragto()","sash_mark()","sash_mark()","sash_place()","sash_place()","sashpos()","satisfied_by?()","satisfied_by?()","satisfies_requirement?()","saturday?()","saturday?()","save()","save()","save()","save()","save_cache()","save_class()","save_exception_mode()","save_history()","save_history()","save_history=()","save_limit()","save_memo()","save_method()","save_plot()","save_rounding_mode()","saveps()","say()","say()","say()","sbstub()","scalar()","scalar()","scalar()","scalar()","scalar()","scalar()","scalar=()","scale()","scale()","scale()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scangmt()","scan_args()","scan_certs()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_dragto()","scan_full()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_mark()","scan_until()","scanf()","scanf()","scanf()","scheme=()","scheme_list()","scope()","scope()","scope=()","scope_name()","screen()","screen()","screen_bbox()","screen_bbox()","screencells()","screencells()","screendepth()","screendepth()","screenheight()","screenheight()","screenmmheight()","screenmmheight()","screenmmwidth()","screenmmwidth()","screenvisual()","screenvisual()","screenwidth()","screenwidth()","script_cmd()","scrl()","scrl()","scroll()","scroll()","scrollbutton()","scrollenter()","scrollleave()","scroll_down()","scroll_pages()","scroll_units()","scroll_up()","scrollbar()","scrollbar()","scrollbar()","scrollbar()","scrollbarresizedemo()","scrollbarborder()","scrollbarborder()","scrollbarwidth()","scrollbarwidth()","scrollbarwidth()","scrollbarwidth()","scrollbarwidth()","scrollcommand()","scrollcommand()","scrollcommand()","scrolledwidget()","scrolling_list()","scrollok()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search()","search_x_libraries()","search_const()","search_convpath()","search_file_from_ruby_path()","search_full()","search_servlet()","search_tclconfig()","search_vers_on_path()","search_with_length()","searcher()","sec()","sec=()","second=()","second=()","seconds()","section()","sections()","sections()","secure=()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see()","see_anchor()","see_anchor()","seed()","seed()","seed=()","seek()","seek()","seek()","seek()","seek()","sel_load()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select!()","select!()","select!()","select!()","select!()","selectandloaddir3()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectnodes()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","selectsinglenode()","select_adjust()","select_adjust()","select_adjust()","select_clear()","select_clear()","select_clear()","select_clear()","select_from()","select_from()","select_from()","select_index()","select_item()","select_item()","select_item()","select_item()","select_message()","select_node()","select_set()","select_set()","select_to()","select_to()","select_to()","selected()","selected()","selected()","selected_item_count()","selected_slices()","selection_add()","selection_add()","selection_add()","selection_add()","selection_add()","selection_adjust()","selection_adjust()","selection_adjust()","selection_adjust()","selection_adjust()","selection_anchor()","selection_anchor()","selection_anchor()","selection_anchor()","selection_anchor()","selection_anchor()","selection_anchor()","selection_anchor()","selection_anchor()","selection_anchor()","selection_cancel()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear()","selection_clear_all()","selection_clear_all()","selection_from()","selection_from()","selection_from()","selection_from()","selection_from()","selection_get()","selection_get()","selection_get()","selection_include?()","selection_include?()","selection_include?()","selection_include?()","selection_includes()","selection_includes()","selection_includes()","selection_includes()","selection_includes()","selection_line()","selection_mark()","selection_mark()","selection_present()","selection_present()","selection_present()","selection_present()","selection_present()","selection_present()","selection_present?()","selection_range()","selection_range()","selection_range()","selection_range()","selection_range()","selection_range()","selection_remove()","selection_remove()","selection_remove()","selection_remove()","selection_remove()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_set()","selection_to()","selection_to()","selection_to()","selection_to()","selection_to()","selection_toggle()","selection_toggle()","selection_toggle()","selection_toggle()","selection_toggle()","selection_word()","send()","send()","send()","send()","send()","send()","send_body()","send_gem()","send_header()","send_io()","send_mail()","send_mail()","send_message()","send_message()","send_reply()","send_reply()","send_request()","send_request()","send_request()","send_request()","send_response()","send_spot()","sendcmd()","sender()","sendmail()","sendmail()","sendmsg()","sendmsg_nonblock()","separator()","seplist()","seq()","seq()","seq()","seq=()","seq_map_shortcut()","sequence()","serial()","serial()","serial()","serial()","serial()","serial=()","serial=()","serve()","serve()","serve()","serve()","server()","server()","server()","server_error?()","server_name()","servername()","service()","service()","service()","service()","service()","service()","service()","services()","session=()","session_add()","session_cache_mode()","session_cache_mode=()","session_cache_size()","session_cache_size=()","session_cache_stats()","session_remove()","session_reused?()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","set()","setattribute()","setattributenode()","setcolor()","setcolor_helper()","setheight()","setnameditem()","setpalette()","setrequestheader()","setrequestheader()","setstate()","settheme()","setwidth()","set_arg_names()","set_attributes()","set_attrs()","set_attrs()","set_backtrace()","set_backtrace()","set_bgerror_handler()","set_bgerror_handler()","set_bgerror_handler()","set_bgerror_handler()","set_bool()","set_bool()","set_bool_element()","set_bool_element()","set_bool_element_type()","set_bool_element_type()","set_bool_type()","set_bool_type()","set_callback()","set_callback()","set_callback()","set_callback_internal()","set_canvas()","set_canvas()","set_cb_error()","set_cb_error()","set_cb_error()","set_cb_error()","set_cbreak()","set_cdecl_callback()","set_close_on_exec()","set_col()","set_color()","set_config()","set_content_type()","set_ctypes()","set_ctypes()","set_current_section()","set_cursor()","set_data()","set_debug_output()","set_debug_output()","set_debug_output()","set_debug_output()","set_debug_output()","set_debug_output()","set_debug_output()","set_debug_output()","set_default()","set_default()","set_default_element_value_type()","set_default_element_value_type()","set_default_handler()","set_default_paths()","set_default_value()","set_default_value()","set_default_value_type()","set_default_value_type()","set_delay()","set_dictionary()","set_dictionary()","set_dn()","set_drag()","set_drop()","set_element_value()","set_element_value()","set_element_value_type()","set_element_value_type()","set_encoding()","set_encoding()","set_encoding()","set_encoding()","set_eoutvar()","set_eoutvar()","set_error()","set_error()","set_eventloop_tick()","set_eventloop_tick()","set_eventloop_tick()","set_eventloop_tick()","set_eventloop_tick()","set_eventloop_tick()","set_eventloop_tick()","set_eventloop_tick()","set_eventloop_weight()","set_eventloop_weight()","set_eventloop_weight()","set_eventloop_weight()","set_eventloop_weight()","set_eventloop_weight()","set_eventloop_weight()","set_eventloop_weight()","set_eventloop_window_mode()","set_extensions()","set_filter()","set_focus()","set_focus()","set_focus()","set_focus()","set_for()","set_form()","set_form_data()","set_fragment()","set_generator()","set_get_line_procs()","set_handler()","set_hands()","set_headers()","set_height()","set_host()","set_index_value()","set_input()","set_interval()","set_interval()","set_interval()","set_label()","set_label_constrain()","set_last_thread()","set_last_thread()","set_last_value()","set_lhs()","set_limit()","set_limit()","set_limit()","set_limit()","set_limit()","set_limit()","set_limit()","set_limit()","set_list()","set_list()","set_list_element()","set_list_element()","set_list_element_type()","set_list_element_type()","set_list_type()","set_list_type()","set_log()","set_mark()","set_max_block_time()","set_max_block_time()","set_menustate()","set_msg()","set_next_callback()","set_next_callback()","set_next_callback()","set_next_element()","set_no_event_wait()","set_no_event_wait()","set_no_event_wait()","set_no_event_wait()","set_no_event_wait()","set_no_event_wait()","set_no_event_wait()","set_no_event_wait()","set_non_blocking()","set_numeric()","set_numeric()","set_numeric_element()","set_numeric_element()","set_numeric_element_type()","set_numeric_element_type()","set_numeric_type()","set_numeric_type()","set_numlist()","set_numlist()","set_numlist_element()","set_numlist_element()","set_numlist_element_type()","set_numlist_element_type()","set_numlist_type()","set_numlist_type()","set_on_display()","set_opaque()","set_operation()","set_option()","set_option()","set_options()","set_owner()","set_owner()","set_owner()","set_owner()","set_params()","set_params()","set_parser()","set_passwd()","set_passwd()","set_passwd()","set_password()","set_path()","set_path()","set_port()","set_procedure()","set_procedure()","set_procedure_element()","set_procedure_element()","set_procedure_element_type()","set_procedure_element_type()","set_procedure_type()","set_procedure_type()","set_procs()","set_procs()","set_prompt()","set_query()","set_range()","set_redirect()","set_registry()","set_resolver()","set_resolver()","set_rhs()","set_row()","set_safe_level()","set_safe_level()","set_safe_level()","set_safe_level()","set_safe_level()","set_safe_level()","set_safe_level()","set_safe_level()","set_sc()","set_scheme()","set_scope()","set_screen_size()","set_scrollbarwidth()","set_service_hook()","set_size()","set_socket()","set_sockopt()","set_spans()","set_start_proc()","set_start_proc()","set_stdcall_callback()","set_string()","set_string()","set_string_element()","set_string_element()","set_string_element_type()","set_string_element_type()","set_string_type()","set_string_type()","set_suspend()","set_symbol()","set_symbol()","set_symbol_element()","set_symbol_element()","set_symbol_element_type()","set_symbol_element_type()","set_symbol_type()","set_symbol_type()","set_tag()","set_tag_constrain()","set_textborderwidth()","set_theme()","set_theme()","set_theme()","set_to()","set_to_above()","set_to_all()","set_to_below()","set_to_closest()","set_to_enclosed()","set_to_infinity!()","set_to_overlapping()","set_to_withtag()","set_topic()","set_trace()","set_trace()","set_trace_all()","set_trace_func()","set_trace_func()","set_translation()","set_translation()","set_translation()","set_translation()","set_translation_list()","set_translation_list()","set_translation_list()","set_translation_list()","set_transparency()","set_transparency()","set_typecode()","set_update_proc()","set_user()","set_userinfo()","set_valid_byte_pattern()","set_valid_ip()","set_value()","set_value()","set_value()","set_value()","set_value()","set_value_by_index()","set_value_type()","set_value_type()","set_variable()","set_variable()","set_variable_element()","set_variable_element()","set_variable_element_type()","set_variable_element_type()","set_variable_type()","set_variable_type()","set_visibility_for()","set_widget()","set_widget()","set_widget()","set_widget()","set_widget()","set_widget()","set_width()","set_window()","set_window()","set_window()","set_window_element()","set_window_element()","set_window_element_type()","set_window_element_type()","set_window_type()","set_window_type()","set_writer()","set_zoom_pan()","set_zoom_pan()","setacl()","setbyte()","setegid()","seteuid()","setgid()","setgid?()","setgid?()","setgid?()","setgid?()","setgrent()","sethelp()","setpgid()","setpgrp()","setpiece()","setpos()","setpos()","setpriority()","setproperty()","setpwent()","setquota()","setregid()","setresgid()","setresuid()","setreuid()","setrgid()","setrlimit()","setruid()","setscrreg()","setscrreg()","setselection()","setsid()","setsockopt()","setter()","setuid()","setuid?()","setuid?()","setuid?()","setuid?()","setup()","setup()","setup()","setup()","setup_certificate()","setup_for_macosx_framework()","setup_generator()","setup_header()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker_elements()","setup_output_dir()","setup_pager()","setup_params()","setup_rdoc()","setup_ssl_context()","setup_ssl_context()","setup_webrick()","setwidget()","setwidget()","sexp()","sexp_raw()","sfork()","sh()","shade()","shape_bounds()","shape_get()","shape_offset()","shape_set()","shape_update()","share_stderr()","share_stderr()","share_stderr()","share_stderr()","share_stderr()","share_stderr()","share_stderr()","share_stderr()","share_stdin()","share_stdin()","share_stdin()","share_stdin()","share_stdin()","share_stdin()","share_stdin()","share_stdin()","share_stdio()","share_stdio()","share_stdio()","share_stdio()","share_stdio()","share_stdio()","share_stdio()","share_stdio()","share_stdout()","share_stdout()","share_stdout()","share_stdout()","share_stdout()","share_stdout()","share_stdout()","share_stdout()","shebang()","shellescape()","shellescape()","shelljoin()","shelljoin()","shellsplit()","shellsplit()","shellwords()","shield_path()","shield_path()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shorten()","shortest_abbreviation()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","showhelp()","showhelp()","showmessagebox()","showmessagebox2()","showpendulum()","showphase()","show_animated_gif()","show_ctrl()","show_each_hscr()","show_each_hscr()","show_help()","show_image()","show_lookup_failure()","show_loupe()","show_message()","show_mode()","show_mode=()","show_names()","show_now()","show_now()","show_now()","show_now()","show_now()","show_now()","show_owners()","show_rdoc_for_pattern()","show_results()","show_statusbar()","show_tab()","show_tab()","show_toolbar()","show_topic()","show_topic()","show_version()","show_win_hscr()","show_win_hscr()","shuffle()","shuffle!()","shutdown()","shutdown()","shutdown()","shutdown()","sid_available?()","sid_available?()","sieve()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign_cert()","sign_in()","signal()","signal()","signal()","signal()","signal_handle()","signal_restart()","signal_status()","signaled?()","signature_algorithm()","signature_algorithm()","signature_algorithm()","signed_time()","signed_value()","signers()","signo()","simple()","simplelist()","sin()","sin()","sin()","sin!()","sine()","single()","single?()","single_delegate()","singleline_format()","singleline_pp()","singleton_class()","singleton_method_added()","singleton_methods()","singular?()","singular?()","sinh()","sinh()","sinh!()","site()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size=()","size=()","size=()","size?()","size?()","size?()","size?()","size_opt_params()","size_params()","sizefrom()","sizefrom()","sizeof()","sizewindow()","skip()","skip()","skip()","skip()","skip()","skip_blanks?()","skip_during()","skip_for_variable()","skip_method()","skip_optional_do_after_expression()","skip_tkspace()","skip_tkspace_comment()","skip_until()","slanted()","slave?()","slave?()","slave?()","slave?()","slave?()","slave?()","slave?()","slave?()","slave_of?()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","slaves()","sleep()","sleep()","sleep()","slice()","slice()","slice()","slice()","slice!()","slice!()","slice_ary()","slice_before()","snap()","snap()","snap()","snap()","snap()","snap()","sockaddr_in()","sockaddr_un()","socket?()","socket?()","socket?()","socket?()","socketpair()","socketpair()","socktype()","solve()","some_function()","sort()","sort()","sort()","sort()","sort()","sort()","sort()","sort()","sort!()","sort_ascending()","sort_ascending()","sort_ascending()","sort_auto()","sort_auto=()","sort_auto?()","sort_by()","sort_by()","sort_by!()","sort_by_freq()","sort_cget()","sort_cget_strict()","sort_cget_tkstring()","sort_configinfo()","sort_configure()","sort_descending()","sort_descending()","sort_descending()","sort_obj()","sort_once()","sort_once()","sort_once_recurse()","sort_once_recurse()","sort_reverse()","source()","source()","source()","source()","source()","source()","source()","source()","source_configinfo()","source_configure()","source_encoding()","source_encoding()","source_encoding()","source_encoding_name()","source_encoding_name()","source_file()","source_handler()","source_handler_info()","source_handler_list()","source_index()","source_location()","source_location()","source_location()","source_menu()","source_menu()","source_names()","source_ole_types()","sources()","sources()","sources=()","sp_increase_c_expr()","space()","space=()","space_before()","space_before=()","span()","span_list()","spans()","sparkle()","sparse()","spawn()","spawn()","spawn()","spec()","spec_dir()","spec_file()","spec_name()","spec_path()","spec_predecessors()","specific?()","specific?()","specific?()","specific_class()","specific_extra_args()","specific_extra_args_hash()","specification()","specification()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specified()","specs()","spermy_recommendation()","spin_month()","spindown()","spindown()","spinup()","spinup()","split()","split()","split()","split()","split()","split()","split()","split()","split()","splittext()","splittext()","split_all()","split_all()","split_header_value()","split_into_flow()","sprintf()","sqrt()","sqrt()","sqrt()","sqrt()","sqrt!()","square?()","squeeze()","squeeze!()","srand()","srand()","srctext()","src_type()","ssl?()","ssl?()","ssl?()","ssl_available?()","ssl_context()","ssl_params()","ssl_params()","ssl_params()","ssl_params()","ssl_version=()","stack()","stackorder()","stackorder()","stackorder_is_above()","stackorder_is_above()","stackorder_is_below()","stackorder_is_below()","stackorder_isabove()","stackorder_isabove()","stackorder_isbelow()","stackorder_isbelow()","stand_alone?()","standard_exception_handling()","standard_exception_handling()","standard_rake_options()","standard_rake_options()","standend()","standend()","standout()","standout()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","startelement()","startelement()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_collecting_tokens()","start_color()","start_doc()","start_document()","start_document()","start_document()","start_document()","start_element()","start_element?()","start_export()","start_import()","start_job()","start_mapping()","start_mapping()","start_prefix_mapping()","start_profile()","start_random()","start_sequence()","start_sequence()","start_service()","start_stream()","start_stream()","start_stream()","start_with?()","started?()","started?()","started?()","started?()","started?()","started?()","started?()","started?()","starting()","starts_with()","starttls()","starttls()","starttls()","starttls?()","starttls?()","starttls_always?()","starttls_always?()","starttls_auto?()","starttls_auto?()","stat()","stat()","stat()","stat()","stat()","stat()","stat()","state()","state()","state()","statemonitor()","status()","status()","status()","status()","status()","status()","status()","status()","status()","status()","status()","status()","status()","status=()","statustext()","statustext()","status_line()","status_string()","status_type_char()","stdchan()","stdout()","stdout()","stdout=()","stdscr()","step()","step()","step()","step()","step()","step()","sticky?()","sticky?()","sticky?()","sticky?()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop?()","stop_doc()","stop_msg_loop()","stop_next()","stop_profile()","stop_service()","stop_service()","stop_service()","stopped?()","stopped?()","stopped?()","stopping()","stopsig()","storbinary()","store()","store()","store()","store()","store()","store()","store()","store()","storlines()","str_name()","stream()","stream()","stream=()","stream_end?()","streaming?()","stress()","stress=()","strftime()","strftime()","strftime()","strict_decode64()","strict_encode64()","string()","string()","string()","string()","string()","string()","string()","string()","string()","string=()","string=()","string=()","string=()","string_element()","string_element()","string_length()","string_type=()","string_type=()","string_value()","strip()","strip()","strip!()","strip_hashes()","strip_locations()","strip_newlines()","strip_stars()","strongly_connected_components()","strptime()","strptime()","strptime()","struct()","struct()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style()","style=()","style=()","style=()","style_cget()","style_cget_strict()","style_cget_tkstring()","style_configinfo()","style_configure()","su()","sub()","sub()","sub()","sub()","sub!()","sub_cget()","sub_cget_strict()","sub_ext()","sub_type()","subdir_check()","subdomain_of?()","subject()","subject()","subject=()","subject=()","subject_certificate=()","subject_request=()","submit()","subsample()","subsample()","subscribe()","subsec()","subset?()","subst()","subst_arg()","subst_tk_backslash()","subst_utf_backslash()","substring()","substringdata()","substringdata()","substringdata()","substringdata()","substring_after()","substring_before()","subtract()","subwin()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ!()","succ=()","success()","success()","success?()","success?()","success?()","success?()","suffix_pattern()","suffixes()","suggest_gems_from_name()","sum()","sum()","summarize()","summarize()","summarize()","summary()","summary()","summary=()","sunday?()","sunday?()","super_each()","superclass()","superclass()","superclass()","superclass=()","superset?()","supported?()","suspend()","suspend_all()","suspend_context()","suspend_input_method()","suspend_name()","suspend_workspace()","swapcase()","swapcase()","swapcase!()","switch()","switch()","switch()","switch_name()","syck_to_yaml()","sym()","sym()","sym()","symbol()","symbol()","symbol=()","symbol=()","symbol_element()","symbol_element()","symbol_type=()","symbol_type=()","symlink()","symlink()","symlink()","symlink?()","symlink?()","symlink?()","symlink?()","symlink?()","symlink_files()","symmetric?()","sync()","sync()","sync()","sync()","sync()","sync()","sync=()","sync=()","sync=()","sync=()","sync_exclusive?()","sync_exclusive?()","sync_extend()","sync_extend()","sync_inspect()","sync_inspect()","sync_lock()","sync_lock()","sync_locked?()","sync_locked?()","sync_options()","sync_point?()","sync_shared?()","sync_shared?()","sync_synchronize()","sync_synchronize()","sync_try_lock()","sync_try_lock()","sync_unlock()","sync_unlock()","synchronize()","synchronize()","syncmode=()","synthesize_file_task()","sysaccept()","sysaccept()","sysaccept()","syscall()","sysclose()","sysconfdir()","sysopen()","sysopen()","sysquote()","sysread()","sysread()","sysread()","sysread()","sysread()","sysseek()","sysseek()","syssign()","system()","system()","system()","system()","system()","systemid()","systemid()","system_dir()","system_dir()","system_path=()","systmpdir()","sysverify()","syswrite()","syswrite()","syswrite()","t()","tab_dockall()","tab_ids()","tab_names()","tab_objs()","tab_pageheight()","tab_pagewidth()","tab_tearoff()","tabbind()","tabbind()","tabbind_append()","tabbind_append()","tabbind_remove()","tabbind_remove()","tabbindinfo()","tabbindinfo()","tabcget()","tabcget()","tabcget_strict()","tabcget_strict()","tabcget_tkstring()","tabcget_tkstring()","table()","table()","table()","table()","table()","table_validate()","tabs()","tabs()","tag()","tag()","tag()","tag()","tagname()","tag_add()","tag_bind()","tag_bind_append()","tag_bind_remove()","tag_bindinfo()","tag_cell()","tag_cget()","tag_cget()","tag_cget()","tag_cget_strict()","tag_cget_strict()","tag_cget_strict()","tag_cget_tkstring()","tag_cget_tkstring()","tag_cget_tkstring()","tag_class()","tag_class()","tag_col()","tag_col_reset()","tag_configinfo()","tag_configinfo()","tag_configinfo()","tag_configure()","tag_configure()","tag_configure()","tag_delete()","tag_delete()","tag_end()","tag_end()","tag_exist?()","tag_focus()","tag_forget()","tag_include?()","tag_key()","tag_key()","tag_lower()","tag_name()","tag_names()","tag_names()","tag_nodes()","tag_raise()","tag_reset()","tag_row()","tag_row_reset()","tag_start()","tag_start()","tag_subclasses?()","tag_subclasses?()","tag_subclasses?()","tagcget()","tagcget_strict()","tagcget_tkstring()","tagconfiginfo()","tagconfigure()","tagfont_configinfo()","tagfont_configure()","tagfont_copy()","tagfontobj()","tagged_classes()","tagged_classes()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid()","tagid2obj()","tagid2obj()","tagid2obj()","tagindex()","tagurize()","tagurize()","tagurize()","tagurize()","taint()","taint()","taint()","tainted?()","tak()","take()","take()","take()","take()","take()","take_while()","take_while()","tan()","tan()","tan!()","tanh()","tanh()","tanh!()","tap()","tar_bz2_file()","tar_gz_file()","tarai()","target()","target()","target_handler()","target_handler_list()","target_names()","task()","task_defined?()","taskbar_add()","taskbar_delete()","taskbar_modify()","tasks()","tasks()","tasks()","tasks_in_scope()","tcl_match_endofword()","tcl_match_endofword=()","tcl_match_startofnextword()","tcl_match_startofnextword=()","tcl_match_startofpreviousword()","tcl_match_startofpreviousword=()","tcl_match_wordbreakafter()","tcl_match_wordbreakafter=()","tcl_match_wordbreakbefore()","tcl_match_wordbreakbefore=()","tcp()","tcp_server_loop()","tcp_server_sockets()","tearoff()","tearoffcommand()","tee()","tell()","tell()","tell()","tell()","tell()","tell()","tell()","tell_index()","telnetmode()","telnetmode=()","template_dir_for()","template_for()","template_result()","ten()","terminal_width()","terminal_width()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate_interaction()","terminate_interaction()","terminate_interaction()","terminate_job()","terminated?()","terminated?()","termsig()","test()","test()","test_button()","test_canvas()","test_checkbutton()","test_entry()","test_file()","test_file=()","test_files()","test_files=()","test_label()","test_listbox()","test_lists()","test_menu()","test_modal()","test_radiobutton()","test_raise()","test_scale()","test_text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text=()","text?()","textb1move()","textb1press()","textbs()","textdel()","textenter()","textinsert()","textloadfile()","textpaste()","textsearch()","texttoggle()","textwinbigb2()","textwinbigh2()","textwinbigp2()","textwinsmallb2()","textwinsmallh2()","textwinsmallp2()","textwinddel()","textwinddel2()","textwindoff()","textwindoff2()","textwindon()","textwindon2()","textwindplot()","textwindplot2()","text_apply()","text_ascii()","text_break()","text_cancel()","text_cget()","text_cget_strict()","text_cget_tkstring()","text_configinfo()","text_configure()","text_delete()","text_delete()","text_field()","text_find()","text_format()","text_get()","text_get_root()","text_html()","text_icursor()","text_index()","text_insert()","text_insert()","text_layout()","text_layout()","text_selection_adjust()","text_selection_clear()","text_selection_from()","text_selection_present()","text_selection_range()","text_selection_to()","text_table()","textarea()","textbackground()","textbg_info()","textbind()","textbind()","textbind_append()","textbind_append()","textbind_remove()","textbind_remove()","textbindinfo()","textbindinfo()","textborderwidth()","textcolor()","textfont()","textinput()","textrelief()","texts()","textvariable()","tgz_file()","the_answer_to_life_the_universe_and_everything()","theme_create()","theme_names()","theme_settings()","theme_use()","themes()","themes()","themes()","think()","thnum()","thread()","thread()","thread()","thread_eval_proc()","thread_eval_proc()","thread_eval_proc()","thread_eval_proc()","thread_list()","thread_list_all()","thread_tkwait()","thread_tkwait()","thread_tkwait()","thread_tkwait()","thread_wait()","thread_wait()","thread_wait()","thread_wait()","throw()","thursday?()","thursday?()","tick()","time()","time()","time()","time()","time2wtime()","time=()","time=()","time=()","time_delta_string()","timeout()","timeout()","timeout()","timeout()","timeout=()","timeout=()","timeout=()","timeout=()","times()","times()","times()","timestamp()","timestamp()","timestamp()","timestamp()","title()","title()","title()","title()","title()","titlebackground()","titlebackground()","titleborder()","titleborder()","titlecommand()","titlecommand()","titleconfig()","titlefont()","titlefont()","titleforeground()","titleforeground()","titleinvoke()","titleinvoke()","titlelabels()","titlelabels()","titlelabels()","tk_cmd_tbl()","tk_cmd_tbl()","tk_cmd_tbl()","tk_cmd_tbl()","tk_object_table()","tk_object_table()","tk_object_table()","tk_object_table()","tk_tcl2ruby()","tk_windows()","tk_windows()","tk_windows()","tk_windows()","tkerror()","tkinclude()","tksearch()","tksearch_with_count()","tktrans_get_image()","tktrans_get_image()","tktrans_get_image()","tktrans_set_image()","tktrans_set_image()","tktrans_set_image()","tkwait()","tkwait()","tkwait()","tkwait()","tls?()","tls?()","tmpdir()","to=()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_ary()","to_ary()","to_ary()","to_ary()","to_ary()","to_atom()","to_backslash()","to_backslash_sequence()","to_backslash_sequence()","to_bn()","to_bn()","to_bn()","to_bn()","to_c()","to_c()","to_c()","to_class_name()","to_csv()","to_csv()","to_csv()","to_d()","to_d()","to_d()","to_d()","to_d()","to_d()","to_date()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_digits()","to_element_methods()","to_enum()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_eval()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed_for_categories()","to_h()","to_h()","to_h()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_html()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_id()","to_id()","to_id()","to_id()","to_id()","to_id()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_io()","to_io()","to_io()","to_io()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json_raw()","to_json_raw_object()","to_mailtext()","to_name()","to_name()","to_obj()","to_obj()","to_obj()","to_obj()","to_obj()","to_obj()","to_obj()","to_p()","to_p()","to_p()","to_p()","to_path()","to_path()","to_path()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_proc()","to_proc()","to_proc()","to_proc()","to_proc()","to_ptr()","to_ptr()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_range()","to_rfc822text()","to_rss()","to_ruby()","to_ruby()","to_ruby_for_cache()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_set()","to_sjis()","to_sockaddr()","to_spec()","to_specs()","to_str()","to_str()","to_str()","to_str()","to_str()","to_string()","to_string()","to_sym()","to_sym()","to_sym()","to_sym()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_time()","to_time()","to_time()","to_time()","to_value()","to_value()","to_write_io()","to_xml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml()","to_yaml_properties()","to_yaml_style()","today()","toeuc()","toeuc()","toggle()","toggle()","toggle()","toggle()","toggle()","toggle()","toggle()","toggle()","toggle()","toggle()","toggle_console()","tojis()","tojis()","token()","token()","token()","token()","token_dom()","token_append()","token_attrs()","token_cget()","token_cget_strict()","token_cget_tkstring()","token_configinfo()","token_configure()","token_define()","token_delete()","token_dom()","token_dom_tokens()","token_domtokens()","token_find()","token_get()","token_get_attr()","token_get_end()","token_getend()","token_handler()","token_insert()","token_list()","token_listener()","token_markup()","token_offset()","token_on_events()","token_pos()","token_set_attr()","token_stream()","token_unique()","token_windowconfiginfo()","token_windowconfigure()","tokenize()","tokenize()","tokenize()","tokenize()","tokens_to_s()","tolocale()","tolocale()","toolbar()","top()","top()","top()","top()","top()","top_level()","top_level()","top_level()","top_level()","top_level_test()","toplevel()","toplevel()","toplevel_aliases_on_widget_set()","toplevel_load()","tosjis()","tosjis()","total_in()","total_out()","total_time()","touch()","touch()","tour()","toutf16()","toutf16()","toutf32()","toutf32()","toutf8()","toutf8()","tr()","tr()","tr!()","tr_cpp()","tr_s()","tr_s!()","trace()","trace()","trace()","trace()","trace()","trace?()","trace_callback()","trace_callback()","trace_delete()","trace_delete()","trace_delete_for_element()","trace_delete_for_element()","trace_element()","trace_element()","trace_func()","trace_func()","trace_func()","trace_info()","trace_info()","trace_info_for_element()","trace_info_for_element()","trace_remove()","trace_remove()","trace_remove_for_element()","trace_remove_for_element()","trace_var()","trace_vdelete()","trace_vdelete()","trace_vdelete_for_element()","trace_vdelete_for_element()","trace_vinfo()","trace_vinfo()","trace_vinfo_for_element()","trace_vinfo_for_element()","trackfocus()","trackstates()","track_off()","track_on()","trancate()","trans()","transact()","transaction()","transcode_compile_tree()","transcode_generate_node()","transcode_generated_code()","transcode_register_code()","transcode_tbl_only()","transcode_tblgen()","transfer()","transfer()","transfer()","transfer()","transfer_stderr()","transfer_stderr()","transfer_stderr()","transfer_stderr()","transfer_stderr()","transfer_stderr()","transfer_stderr()","transfer_stderr()","transfer_stdin()","transfer_stdin()","transfer_stdin()","transfer_stdin()","transfer_stdin()","transfer_stdin()","transfer_stdin()","transfer_stdin()","transfer_stdio()","transfer_stdio()","transfer_stdio()","transfer_stdio()","transfer_stdio()","transfer_stdio()","transfer_stdio()","transfer_stdio()","transfer_stdout()","transfer_stdout()","transfer_stdout()","transfer_stdout()","transfer_stdout()","transfer_stdout()","transfer_stdout()","transfer_stdout()","transform()","transform()","transform()","transform()","transform()","transform()","transform()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnode()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transformnodetoobject()","transient()","transient()","translate()","translate()","translate()","translate()","translate()","translate()","transliterate=()","transliterate?()","transparent_color()","transparent_color()","transpose()","transpose()","trap()","trap()","traverse()","traverse()","tree()","tree()","treectrl_tagid()","trend()","trivial?()","true()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate_output?()","truncate_output?()","trust()","trust()","trust=()","trusted_cert_path()","try_activate()","try_const()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","try_cpp()","try_func()","try_header()","try_implicit()","try_implicit()","try_libvar()","try_lock()","try_mon_enter()","try_type()","try_var()","tsort()","tsort_each()","tsort_each_child()","tsort_each_child()","tsort_each_node()","tsort_each_node()","tt?()","tt_sections()","tty?()","tty?()","tty?()","tty?()","tty?()","tty_output=()","tty_output=()","tty_output?()","tty_output?()","tuesday?()","tuesday?()","tv_nsec()","tv_sec()","tv_usec()","two()","type()","type()","type()","type()","type()","type()","type()","type()","type()","type()","type2class()","type2class()","type2class()","type2name()","type=()","type_add()","type_id()","type_id=()","type_name()","type_params()","typealias()","typecode=()","typekind()","typelibs()","typelibs()","types()","types()","types()","u()","u()","ud()","udp()","udp_server_loop()","udp_server_loop_on()","udp_server_recv()","udp_server_sockets()","ui()","ui()","ui()","ui=()","ui=()","uid()","uid()","uid=()","uid_copy()","uid_fetch()","uid_search()","uid_sort()","uid_store()","uid_thread()","uidl()","umask()","umount()","umount()","unadvise()","unalias_command()","unalias_command()","unambiguous_action()","unassign()","unautoscroll()","unautoscroll()","unautoscroll()","unbind()","unbind()","unbind_at_call()","unbind_at_call()","unconverted_fields?()","undef_default()","undef_default()","undef_system_command()","undef_system_command()","undefine_finalizer()","undoc_params()","unescape()","unescape()","unescape()","unescape()","unescape()","unescape()","unescapeelement()","unescapehtml()","unescape_element()","unescape_html()","unget()","unget_tk()","ungetbyte()","ungetbyte()","ungetbyte()","ungetc()","ungetc()","ungetc()","ungetc()","ungetc()","ungetc()","ungetch()","ungetmouse()","uninstall()","uninstall_cmd()","uninstall_cmd()","uninstall_cmd()","uninstall_doc()","uninstall_gem()","uninstall_old_gemcutter()","union()","union()","union()","uniq()","uniq!()","uniqueid()","unique_classes()","unique_classes_and_modules()","unique_id()","unique_modules()","unit()","unitary?()","unix()","unix()","unix?()","unix?()","unix?()","unix_path()","unix_rights()","unix_rights()","unix_server_loop()","unix_server_socket()","unknown()","unknown_proc()","unlines()","unlink()","unlink()","unlink()","unlink()","unlink()","unlock()","unlock()","unlock()","unmap()","unmap()","unmask_protected_sequences()","unmount()","unnormalize()","unnormalize()","unnormalized()","unpack()","unpack()","unpack()","unpack()","unpack()","unpack_sockaddr_in()","unpack_sockaddr_un()","unpackdw()","unpackqw()","unpost()","unpost()","unpost()","unpost()","unregist()","unregister_command()","unresolved_deps()","unscan()","unset()","unset()","unset()","unset()","unset()","unset()","unset()","unset_mark()","unshift()","unshift()","unshift()","unshift()","unsigned_value()","unsubscribe()","untaint()","untaint()","untaint()","untrace_var()","untrust()","untrust()","untrust()","untrusted?()","unused()","up()","up()","upcase()","upcase()","upcase!()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","updatestates()","update_aliases()","update_animated_gif()","update_checksum()","update_font()","update_gem()","update_gems()","update_includes()","update_index()","update_output_dir()","update_ri_cache()","update_rubygems()","update_specs_index()","update_without_notify()","updated()","updated()","updated()","upgrade_to_class()","upload()","upload()","upload()","upload()","upload()","upload()","upload()","upload()","upload_files()","upper()","upper_bound()","upper_bound=()","upper_triangular?()","upstream_proxy()","upto()","upto()","upto()","upto()","uptodate?()","uri()","uri_escaper()","uri_option()","uri_option()","uri_option()","uri_option()","uri_option()","uri_registered?()","url()","url()","url()","url()","url()","url=()","url_encode()","url_join()","url_split()","urlsafe_base64()","urlsafe_decode64()","urlsafe_encode64()","usage()","usage()","use()","use()","use_tile?()","use_tile?()","use_tile?()","use_tile?()","use_as()","use_const?()","use_default_colors()","use_loader()","use_loader=()","use_loader?()","use_paths()","use_prefix()","use_readline=()","use_registry()","use_ssl=()","use_ssl=()","use_ssl?()","use_ssl?()","use_ssl?()","use_ssl?()","use_ssl?()","use_ssl?()","use_ssl?()","use_ssl?()","use_ssl?()","use_ssl?()","use_tracer=()","use_types_at()","use_ui()","use_ui()","usec()","used()","used()","used_on()","used_on()","usegap()","useinputmethods()","useinputmethods()","useinputmethods_displayof()","user()","user=()","user=()","user_agent()","user_dir()","user_home()","usercode()","userinfo()","userinfo=()","usual()","usual_names()","utc()","utc()","utc?()","utc_offset()","utf_backslash()","utf_to_backslash()","utf_to_backslash_sequence()","utime()","utime()","uuid()","v()","v_inv()","valid?()","valid?()","valid?()","valid_civil?()","valid_commercial?()","valid_date?()","valid_encoding?()","valid_fields()","valid_for_generate()","valid_jd?()","valid_moves()","valid_ordinal?()","validate()","validate()","validate()","validate()","validate()","validate()","validateonparse()","validateonparse()","validateonparse()","validateonparse=()","validateonparse=()","validateonparse=()","validatephonechange()","validate_duplicate_links()","validate_for_stream()","validate_one_tag_name()","validate_proc()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value=()","value?()","value?()","value?()","value?()","value?()","value_type=()","value_type=()","values()","values()","values()","values()","values()","values()","values()","values()","values()","values()","values()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","var_list()","variable()","variable()","variable()","variable()","variable=()","variable=()","variable_element()","variable_element()","variable_is_set?()","variable_kind()","variable_type=()","variable_type=()","variables()","variables()","variables=()","variables=()","varkind()","vartype()","vcompare()","vector()","vectorconfig()","ver()","ver()","verbose()","verbose()","verbose()","verbose()","verbose=()","verbose=()","verbose?()","verbose?()","verbose?()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify_api_key()","verify_callback=()","verify_gem()","verify_gem()","verify_gem_file()","verify_gem_home()","verify_result()","verify_trust_dir()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version=()","version=()","version=()","version=()","version?()","version_1_2()","version_1_2()","version_1_2?()","version_1_2?()","version_up()","versions()","versions()","vertline()","vertline()","vi_editing_mode()","vi_editing_mode?()","view()","view()","view()","view()","view_moveto()","view_moveto()","view_port()","view_port()","view_scroll()","view_scroll()","viewable()","viewable()","virtual_host()","visible()","visible()","visible?()","visible?()","visible?()","visible?()","visit_array()","visit_bigdecimal()","visit_class()","visit_complex()","visit_date()","visit_datetime()","visit_exception()","visit_falseclass()","visit_float()","visit_hash()","visit_integer()","visit_module()","visit_nilclass()","visit_object()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_document()","visit_psych_nodes_document()","visit_psych_nodes_mapping()","visit_psych_nodes_mapping()","visit_psych_nodes_scalar()","visit_psych_nodes_scalar()","visit_psych_nodes_sequence()","visit_psych_nodes_sequence()","visit_psych_nodes_stream()","visit_psych_nodes_stream()","visit_psych_omap()","visit_psych_set()","visit_range()","visit_rational()","visit_regexp()","visit_string()","visit_string()","visit_struct()","visit_symbol()","visit_time()","visit_trueclass()","visual()","visual()","visualid()","visualid()","visualsavailable()","visualsavailable()","voidcmd()","vpath()","vrootheight()","vrootheight()","vrootwidth()","vrootwidth()","vrootx()","vrootx()","vrooty()","vrooty()","vsatisfies()","vscroll()","vscroll()","vscroll()","vscroll()","vscroll=()","vscroll=()","w3cdtf()","wait()","wait()","wait()","wait()","wait()","wait()","wait()","wait()","wait()","wait()","wait2()","wait?()","wait?()","wait_all_jobs_execution()","wait_on_mainloop=()","wait_on_mainloop=()","wait_on_mainloop=()","wait_on_mainloop=()","wait_on_mainloop?()","wait_on_mainloop?()","wait_on_mainloop?()","wait_on_mainloop?()","wait_to_finish_all_process_controllers()","wait_until()","wait_while()","wait_writable()","waitall()","waitfor()","waiting()","waiting_job?()","waiting_jobs()","waiting_jobs_exist?()","waitpid()","waitpid2()","wakeup()","warn()","warn()","warn()","warn()","warn()","warn?()","warn?()","warpto()","warpto()","watch()","watcher()","wday()","wday()","weakref_alive?()","wednesday?()","wednesday?()","when_invoked()","when_writing()","which_to_update()","whitespace()","why_not_ok?()","widget()","widget()","widget_set_symbols()","width()","width()","width()","width()","width()","width()","width_list()","win32_last_error()","win32_last_error()","win32_last_error=()","win_platform?()","window()","window()","window()","window()","window()","window=()","window=()","window=()","window=()","window_cget()","window_cget()","window_cget_strict()","window_cget_strict()","window_cget_tkstring()","window_cget_tkstring()","window_configinfo()","window_configinfo()","window_configure()","window_configure()","window_delete()","window_element()","window_element()","window_move()","window_names()","window_type=()","window_type=()","windows()","windows?()","windows?()","windows?()","windows_stub_script()","winfo_appname()","winfo_appname()","winfo_atom()","winfo_atom()","winfo_atomname()","winfo_atomname()","winfo_cells()","winfo_cells()","winfo_children()","winfo_children()","winfo_class()","winfo_class()","winfo_classname()","winfo_classname()","winfo_colormapfull()","winfo_colormapfull()","winfo_containing()","winfo_containing()","winfo_depth()","winfo_depth()","winfo_exist?()","winfo_exist?()","winfo_fpixels()","winfo_fpixels()","winfo_geometry()","winfo_geometry()","winfo_height()","winfo_height()","winfo_id()","winfo_id()","winfo_interps()","winfo_interps()","winfo_manager()","winfo_manager()","winfo_mapped?()","winfo_mapped?()","winfo_parent()","winfo_parent()","winfo_pixels()","winfo_pixels()","winfo_pointerx()","winfo_pointerx()","winfo_pointerxy()","winfo_pointerxy()","winfo_pointery()","winfo_pointery()","winfo_reqheight()","winfo_reqheight()","winfo_reqwidth()","winfo_reqwidth()","winfo_rgb()","winfo_rgb()","winfo_rootx()","winfo_rootx()","winfo_rooty()","winfo_rooty()","winfo_screen()","winfo_screen()","winfo_screencells()","winfo_screencells()","winfo_screendepth()","winfo_screendepth()","winfo_screenheight()","winfo_screenheight()","winfo_screenmmheight()","winfo_screenmmheight()","winfo_screenmmwidth()","winfo_screenmmwidth()","winfo_screenvisual()","winfo_screenvisual()","winfo_screenwidth()","winfo_screenwidth()","winfo_server()","winfo_server()","winfo_toplevel()","winfo_toplevel()","winfo_viewable()","winfo_viewable()","winfo_visual()","winfo_visual()","winfo_visualid()","winfo_visualid()","winfo_visualsavailable()","winfo_visualsavailable()","winfo_vrootheight()","winfo_vrootheight()","winfo_vrootwidth()","winfo_vrootwidth()","winfo_vrootx()","winfo_vrootx()","winfo_vrooty()","winfo_vrooty()","winfo_widget()","winfo_widget()","winfo_width()","winfo_width()","winfo_x()","winfo_x()","winfo_y()","winfo_y()","winsize()","winsize=()","with()","with_config()","with_defaults()","with_friend()","with_friend()","with_index()","with_object()","with_object()","with_response()","withdraw()","withdraw()","withdraw()","withdraw()","withtag()","wm_aspect()","wm_attributes()","wm_client()","wm_colormapwindows()","wm_command()","wm_deiconify()","wm_focusmodel()","wm_forget()","wm_frame()","wm_geometry()","wm_grid()","wm_group()","wm_iconbitmap()","wm_iconify()","wm_iconmask()","wm_iconname()","wm_iconphoto()","wm_iconphoto_default()","wm_iconposition()","wm_iconwindow()","wm_manage()","wm_maxsize()","wm_minsize()","wm_overrideredirect()","wm_positionfrom()","wm_protocol()","wm_protocols()","wm_resizable()","wm_sizefrom()","wm_stackorder()","wm_stackorder_is_above()","wm_stackorder_is_below()","wm_stackorder_isabove()","wm_stackorder_isbelow()","wm_state()","wm_title()","wm_transient()","wm_withdraw()","wordend()","wordstart()","wordy()","workspaces()","world_3d_coordinates()","world_3d_coordinates()","world_coordinates()","world_coordinates()","world_readable?()","world_readable?()","world_readable?()","world_readable?()","world_writable?()","world_writable?()","world_writable?()","world_writable?()","wrap()","wrap()","wrap()","wrap()","wrap()","wrapindent()","wrap_arg()","wrap_args()","wrap_result()","writable?()","writable?()","writable?()","writable?()","writable_real?()","writable_real?()","writable_real?()","writable_real?()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","writeto()","write_bin()","write_cdata()","write_cdata()","write_comment()","write_comment()","write_document()","write_document()","write_element()","write_element()","write_element()","write_headers?()","write_i()","write_instruction()","write_nonblock()","write_nonblock()","write_require_paths_file_if_needed()","write_s()","write_service()","write_smime()","write_spec()","write_style_sheet()","write_text()","write_text()","write_text()","write_with_substitution()","write_with_title()","writer()","wrongnumargsstring()","wtime2time()","x()","x()","x2axis_bind()","x2axis_bind_append()","x2axis_bind_remove()","x2axis_bindinfo()","x2axis_cget()","x2axis_cget_strict()","x2axis_cget_tkstring()","x2axis_configinfo()","x2axis_configure()","x2axis_invtransform()","x2axis_limits()","x2axis_transform()","x2axis_use()","xaxis_bind()","xaxis_bind_append()","xaxis_bind_remove()","xaxis_bindinfo()","xaxis_cget()","xaxis_cget_strict()","xaxis_cget_tkstring()","xaxis_configinfo()","xaxis_configure()","xaxis_invtransform()","xaxis_limits()","xaxis_transform()","xaxis_use()","xconfig()","xgap()","xhtml()","xhtml()","xlist()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xml()","xmldecl()","xml_decl()","xml_getter()","xml_getter()","xml_setter()","xml_setter()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl?()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmp()","xor()","xpath()","xpath()","xpath()","xposition()","xposition()","xposition()","xscrollbar()","xscrollbar()","xscrollbar()","xscrollbar()","xscrollcommand()","xscrollcommand()","xscrollcommand()","xscrollcommand()","xscrollcommand()","xtext()","xticklines()","xview()","xview()","xview()","xview()","xview()","xview()","xview()","xview()","xview()","xview()","xview()","xview()","xview()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_moveto()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xview_scroll()","xy()","y()","y()","y2axis_bind()","y2axis_bind_append()","y2axis_bind_remove()","y2axis_bindinfo()","y2axis_cget()","y2axis_cget_strict()","y2axis_cget_tkstring()","y2axis_configinfo()","y2axis_configure()","y2axis_invtransform()","y2axis_limits()","y2axis_transform()","y2axis_use()","yaml()","yaml?()","yaml_as()","yaml_initialize()","yaml_initialize()","yaml_initialize()","yaml_initialize()","yaml_initialize()","yaml_initialize()","yaml_new()","yaml_new()","yaml_new()","yaml_new()","yaml_new()","yaml_new()","yaml_new()","yaml_new()","yaml_new()","yaml_tag()","yaml_tag_class_name()","yaml_tag_read_class()","yarv_exec()","yaxis_bind()","yaxis_bind_append()","yaxis_bind_remove()","yaxis_bindinfo()","yaxis_cget()","yaxis_cget_strict()","yaxis_cget_tkstring()","yaxis_configinfo()","yaxis_configure()","yaxis_invtransform()","yaxis_limits()","yaxis_transform()","yaxis_use()","yconfig()","yday()","yday()","year()","year()","year=()","yearly()","ygap()","yield()","yield()","yposition()","yposition()","yposition()","yposition()","yscrollbar()","yscrollbar()","yscrollbar()","yscrollbar()","yscrollcommand()","yscrollcommand()","yscrollcommand()","yscrollcommand()","ytext()","yticklines()","yview()","yview()","yview()","yview()","yview()","yview()","yview()","yview()","yview()","yview()","yview_moveto()","yview_moveto()","yview_moveto()","yview_moveto()","yview_moveto()","yview_moveto()","yview_moveto()","yview_moveto()","yview_moveto()","yview_scroll()","yview_scroll()","yview_scroll()","yview_scroll()","yview_scroll()","yview_scroll()","yview_scroll()","yview_scroll()","yview_scroll()","zconfig()","zconfig()","zero()","zero()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zip()","zip()","zip?()","zip_file()","zipped_stream()","zlib_version()","zone()","zone()","zone_offset()","zoom_stack()","zoom_stack()","|()","|()","|()","|()","|()","|()","|()","|()","|()","|()","|()","|()","~()","~()","~()","~()","~()","rubydocs","command_line_usage","glossary","proto_rake","rakefile","rational","rake-0.8.7","re","readme"],"longSearchIndex":["acl","acl::aclentry","acl::acllist","argf","abbrev","action","actionmap","addrinfo","animatedimagelabel","animatedtextlabel","animatedwavedemo","arc","argumenterror","array","arraycode","blt_calendar_sample","blt_graph_demo","bwidget_demo","bar","base64","basicobject","basicsocket","benchmark","benchmark::tms","benchmarkdriver","biff","bigdecimal","bigmath","bignum","binding","bitmap","bitmapimage","board","branch","btnframe","button_with_frame","c","c1","c2","cc","cgi","cgi::cookie","cgi::htmlextension","cgi::invalidencoding","cgi::queryextension","cgi::session","cgi::session::filestore","cgi::session::memorystore","cgi::session::nullstore","cgi::session::pstore","chashdir","cmath","csv","csv::malformedcsverror","csv::row","csv::table","cache","cal","certstore","chatclient","chatentry","chatserver","checkbutton","class","clock","clonemenu","commentstripper","comparable","complex","compositepublisher","conditionvariable","continuation","coverage","crlstore","curses","curses::key","curses::mouseevent","curses::window","dbm","dbmerror","debugger__","debugger__::context","dl","dl::basictypes","dl::cfunc","dl::cparser","dl::cptr","dl::cstruct","dl::cstructbuilder","dl::cstructentity","dl::cunion","dl::cunionentity","dl::carriedfunction","dl::compositehandler","dl::dlerror","dl::dltypeerror","dl::fiddle","dl::function","dl::handle","dl::importer","dl::packinfo","dl::packer","dl::stack","dl::tempfunction","dl::valueutil","dl::win32types","dqentry","drb","drb::drbarray","drb::drbbadscheme","drb::drbbaduri","drb::drbconn","drb::drbconnerror","drb::drberror","drb::drbidconv","drb::drbidconv","drb::drbmessage","drb::drbobject","drb::drbobject","drb::drbobservable","drb::drbprotocol","drb::drbremoteerror","drb::drbsslsocket","drb::drbsslsocket::sslconfig","drb::drbserver","drb::drbserver::invokemethod18mixin","drb::drbservernotfound","drb::drbtcpsocket","drb::drbunixsocket","drb::drbundumped","drb::drbundumped","drb::drbunknown","drb::drbunknownerror","drb::extserv","drb::extservmanager","drb::gw","drb::gwidconv","drb::http0","drb::http0::callback","drb::http0::clientside","drb::http0::server","drb::http0::serverside","drb::http0::strstream","drb::timeridconv","drb::timeridconv::timerholder2","drb::timeridconv::timerholder2::invalidindexerror","drbex","drbex2","drbex3","drbex4","drbnamedidconv","drbnamedobject","data","date","datetime","delegator","demoapplication","demobasic","demodialog","demodnd","demomanager","demoselect","demoservlet","demotree","demovar","dhasen","digest","digest::base","digest::class","digest::hmac","digest::instance","digest::sha2","dir","e2mm","env","eoferror","erb","erb::defmethod","erb::util","emojitable","encoding","encoding::compatibilityerror","encoding::converter","encoding::converternotfounderror","encoding::invalidbytesequenceerror","encoding::undefinedconversionerror","encodingerror","enumerable","enumerator","enumerator::generator","enumerator::yielder","errno","errno::econnaborted","errno::econnreset","errno::eproto","etc","exception","exception2messagemapper","exports","exports::bcc","exports::cygwin","exports::mingw","exports::mswin","falseclass","fcntl","fiber","fibererror","fiddle","fiddle::closure","fiddle::closure::blockcaller","fiddle::function","fiddle::pointer","file","file::constants","file::stat","filetest","fileutils","fileutils::dryrun","fileutils::lowmethods","fileutils::nowrite","fileutils::streamutils_","fileutils::verbose","fileviewer","find","fixnum","float","floatdomainerror","font","foo","foo::unknown","fooerror","forwardable","front","function","gc","gc::profiler","gdbm","gdbmerror","gdbmfatalerror","gserver","gem","gem::builder","gem::command","gem::commandlineerror","gem::commandmanager","gem::commands","gem::commands::buildcommand","gem::commands::certcommand","gem::commands::checkcommand","gem::commands::cleanupcommand","gem::commands::contentscommand","gem::commands::dependencycommand","gem::commands::environmentcommand","gem::commands::fetchcommand","gem::commands::generateindexcommand","gem::commands::helpcommand","gem::commands::installcommand","gem::commands::listcommand","gem::commands::lockcommand","gem::commands::outdatedcommand","gem::commands::ownercommand","gem::commands::pristinecommand","gem::commands::pushcommand","gem::commands::querycommand","gem::commands::rdoccommand","gem::commands::searchcommand","gem::commands::servercommand","gem::commands::setupcommand","gem::commands::sourcescommand","gem::commands::specificationcommand","gem::commands::stalecommand","gem::commands::uninstallcommand","gem::commands::unpackcommand","gem::commands::updatecommand","gem::commands::whichcommand","gem::configfile","gem::consoleui","gem::defaultuserinteraction","gem::dependency","gem::dependencyerror","gem::dependencyinstaller","gem::dependencylist","gem::dependencyremovalexception","gem::deprecate","gem::docmanager","gem::documenterror","gem::endofyamlexception","gem::errorreason","gem::exception","gem::ext","gem::ext::builder","gem::ext::configurebuilder","gem::ext::extconfbuilder","gem::ext::rakebuilder","gem::filepermissionerror","gem::format","gem::formatexception","gem::gemnotfoundexception","gem::gemnotinhomeexception","gem::gempathsearcher","gem::gemrunner","gem::gemcutterutilities","gem::indexer","gem::installerror","gem::installupdateoptions","gem::installer","gem::installer::extensionbuilderror","gem::invalidspecificationexception","gem::loaderror","gem::localremoteoptions","gem::mockgemui","gem::mockgemui::systemexitexception","gem::mockgemui::tty","gem::mockgemui::termerror","gem::noaliasyamltree","gem::oldformat","gem::operationnotsupportederror","gem::package","gem::package::badchecksum","gem::package::closedio","gem::package::error","gem::package::fsyncdir","gem::package::formaterror","gem::package::nonseekableio","gem::package::tarheader","gem::package::tarinput","gem::package::tarinvaliderror","gem::package::taroutput","gem::package::tarreader","gem::package::tarreader::entry","gem::package::tarreader::unexpectedeof","gem::package::tarwriter","gem::package::tarwriter::boundedstream","gem::package::tarwriter::fileoverflow","gem::package::tarwriter::restrictedstream","gem::package::toolongfilename","gem::packagetask","gem::pathsupport","gem::platform","gem::platformmismatch","gem::remoteerror","gem::remotefetcher","gem::remotefetcher::fetcherror","gem::remoteinstallationcancelled","gem::remoteinstallationskipped","gem::remotesourceexception","gem::requirepathsbuilder","gem::requirement","gem::ssl","gem::ssl::pkey_rsa","gem::security","gem::security::exception","gem::security::policy","gem::security::signer","gem::server","gem::silentui","gem::sourceindex","gem::specfetcher","gem::specification","gem::streamui","gem::streamui::silentdownloadreporter","gem::streamui::silentprogressreporter","gem::streamui::simpleprogressreporter","gem::streamui::verbosedownloadreporter","gem::streamui::verboseprogressreporter","gem::systemexitexception","gem::text","gem::uninstaller","gem::userinteraction","gem::validator","gem::verificationerror","gem::versionoption","getoptlong","getoptlong::ambiguousoption","getoptlong::error","getoptlong::invalidoption","getoptlong::missingargument","getoptlong::needlessargument","grid","hash","hash::ordered","helloservlet","helloworld","hi_exception","hoge","httpserver","httpserver::request","httpserver::response","httpserver::table","iehandler","ie_const","interp","interp","interp","io","io::waitreadable","io::waitwritable","io::readable","io::writable","ioerror","ipaddr","ipsocket","irb","irb::abort","irb::context","irb::contextextender","irb::contextextender::ce","irb::extendcommand","irb::extendcommand::changeworkspace","irb::extendcommand::currentworkingworkspace","irb::extendcommand::foreground","irb::extendcommand::fork","irb::extendcommand::help","irb::extendcommand::irbcommand","irb::extendcommand::jobs","irb::extendcommand::kill","irb::extendcommand::load","irb::extendcommand::nop","irb::extendcommand::popworkspace","irb::extendcommand::pushworkspace","irb::extendcommand::require","irb::extendcommand::source","irb::extendcommand::workspaces","irb::extendcommandbundle","irb::extendcommandbundle::excb","irb::fileinputmethod","irb::frame","irb::history","irb::historysavingability","irb::inputcompletor","irb::inputmethod","irb::inspector","irb::irb","irb::irbloader","irb::jobmanager","irb::loadabort","irb::locale","irb::methodextender","irb::notifier","irb::notifier::abstractnotifier","irb::notifier::compositenotifier","irb::notifier::levelednotifier","irb::notifier::nomsgnotifier","irb::outputmethod","irb::readlineinputmethod","irb::slex","irb::slex::node","irb::stdioinputmethod","irb::stdiooutputmethod","irb::workspace","ixmldomattribute","ixmldomcdatasection","ixmldomcharacterdata","ixmldomcomment","ixmldomdocument","ixmldomdocumentfragment","ixmldomdocumenttype","ixmldomelement","ixmldomentity","ixmldomentityreference","ixmldomimplementation","ixmldomnamednodemap","ixmldomnode","ixmldomnodelist","ixmldomnotation","ixmldomparseerror","ixmldomprocessinginstruction","ixmldomtext","ixmlhttprequest","ixtlruntime","iconv","iconv::brokenlibrary","iconv::failure","iconv::illegalsequence","iconv::invalidcharacter","iconv::invalidencoding","iconv::outofrange","indexerror","inspector","integer","interrupt","jisx0208","jisx0208::char","json","json::circulardatastructure","json::ext","json::ext::generator","json::ext::generator::generatormethods","json::ext::generator::generatormethods::array","json::ext::generator::generatormethods::bignum","json::ext::generator::generatormethods::falseclass","json::ext::generator::generatormethods::fixnum","json::ext::generator::generatormethods::float","json::ext::generator::generatormethods::hash","json::ext::generator::generatormethods::nilclass","json::ext::generator::generatormethods::object","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods::string::extend","json::ext::generator::generatormethods::trueclass","json::ext::generator::state","json::ext::parser","json::generatorerror","json::jsonerror","json::missingunicodesupport","json::nestingerror","json::parsererror","json::unparsererror","jacobian","kconv","kernel","keyerror","knights_tour","lusolve","labelframe","line","lo_exception","loaderror","localjumperror","logger","logger::application","logger::formatter","logger::logdevice","logger::logdevice::logdevicemutex","logger::severity","logging","mail","marshal","matchdata","math","math::domainerror","matrix","matrix::eigenvaluedecomposition","matrix::lupdecomposition","mdoc2man","menubutton","method","microsoft_freethreadedxmldom_1_0","microsoft_xmldom_1_0","microsoft_xmldso_1_0","microsoft_xmlhttp_1","module","monitor","monitormixin","monitormixin::conditionvariable","monitormixin::conditionvariable::timeout","msxml","multitkip","multitkip::command_queue","multitkip::threadgroup","multitkip_ok","multitkip_pseudotoplevel_evaluable","mutex","mutex_m","myapp","myelem","mylist","mytimeout","nkf","nqxml","nqxml::node","nameerror","net","net::apop","net::apopsession","net::exception_type","net::exception_type","net::exception_type","net::exception_type","net::ftp","net::ftp::nullsocket","net::ftpconnectionerror","net::ftperror","net::ftppermerror","net::ftpprotoerror","net::ftpreplyerror","net::ftptemperror","net::http","net::http::copy","net::http::delete","net::http::get","net::http::head","net::http::lock","net::http::mkcol","net::http::move","net::http::options","net::http::patch","net::http::post","net::http::propfind","net::http::proppatch","net::http::put","net::http::trace","net::http::unlock","net::httpaccepted","net::httpbadgateway","net::httpbadrequest","net::httpbadresponse","net::httpclienterror","net::httpconflict","net::httpcontinue","net::httpcreated","net::httperror","net::httpexceptions","net::httpexpectationfailed","net::httpfatalerror","net::httpforbidden","net::httpfound","net::httpgatewaytimeout","net::httpgenericrequest","net::httpgone","net::httpheader","net::httpheadersyntaxerror","net::httpinformation","net::httpinternalservererror","net::httplengthrequired","net::httpmethodnotallowed","net::httpmovedpermanently","net::httpmultiplechoice","net::httpnocontent","net::httpnonauthoritativeinformation","net::httpnotacceptable","net::httpnotfound","net::httpnotimplemented","net::httpnotmodified","net::httpok","net::httppartialcontent","net::httppaymentrequired","net::httppreconditionfailed","net::httpproxyauthenticationrequired","net::httpredirection","net::httprequest","net::httprequest","net::httprequestentitytoolarge","net::httprequesttimeout","net::httprequesturitoolong","net::httprequestedrangenotsatisfiable","net::httpresetcontent","net::httpresponse","net::httpretriableerror","net::httpseeother","net::httpservererror","net::httpserverexception","net::httpserviceunavailable","net::httpsession","net::httpsuccess","net::httpswitchprotocol","net::httptemporaryredirect","net::httpunauthorized","net::httpunknownresponse","net::httpunsupportedmediatype","net::httpuseproxy","net::httpversionnotsupported","net::imap","net::imap::badresponseerror","net::imap::bodytypebasic","net::imap::bodytypemessage","net::imap::bodytypemultipart","net::imap::bodytypetext","net::imap::byeresponseerror","net::imap::crammd5authenticator","net::imap::dataformaterror","net::imap::digestmd5authenticator","net::imap::error","net::imap::flagcounterror","net::imap::loginauthenticator","net::imap::noresponseerror","net::imap::plainauthenticator","net::imap::responseerror","net::imap::responseparseerror","net::internetmessageio","net::internetmessageio::netprivate","net::internetmessageio::writeadapter","net::pop","net::pop3","net::pop3session","net::popauthenticationerror","net::popbadresponse","net::poperror","net::popmail","net::popsession","net::protoautherror","net::protocommanderror","net::protofatalerror","net::protoretriableerror","net::protoservererror","net::protosyntaxerror","net::protounknownerror","net::protocretryerror","net::protocolerror","net::smtp","net::smtp::response","net::smtpauthenticationerror","net::smtperror","net::smtpfatalerror","net::smtpserverbusy","net::smtpsession","net::smtpsyntaxerror","net::smtpunknownerror","net::smtpunsupportedcommand","net::telnet","newton","nilclass","nomemoryerror","nomethoderror","notimplementederror","notify","nthtoggle","numeric","oleproperty","oletagdomnodetype","oletagxmlemem_type","object","object::parseerror","object::syck","object::syck::badalias","object::syck::defaultkey","object::syck::domaintype","object::syck::emitter","object::syck::map","object::syck::mergekey","object::syck::node","object::syck::object","object::syck::out","object::syck::parser","object::syck::privatetype","object::syck::resolver","object::syck::scalar","object::syck::seq","object::timeouterror","object::tknamedvirtualevent","object::tksystemmenu","object::ttk","objectspace","observable","open3","openssl","openssl::asn1","openssl::asn1::asn1data","openssl::asn1::asn1error","openssl::asn1::constructive","openssl::asn1::primitive","openssl::bn","openssl::bnerror","openssl::buffering","openssl::cipher","openssl::cipher::cipher","openssl::cipher::ciphererror","openssl::config","openssl::configerror","openssl::digest","openssl::digest::digest","openssl::digest::digesterror","openssl::engine","openssl::engine::engineerror","openssl::hmac","openssl::hmacerror","openssl::netscape","openssl::netscape::spki","openssl::netscape::spkierror","openssl::ocsp","openssl::ocsp::basicresponse","openssl::ocsp::certificateid","openssl::ocsp::ocsperror","openssl::ocsp::request","openssl::ocsp::response","openssl::opensslerror","openssl::pkcs12","openssl::pkcs12::pkcs12error","openssl::pkcs5","openssl::pkcs5::pkcs5error","openssl::pkcs7","openssl::pkcs7::pkcs7error","openssl::pkcs7::recipientinfo","openssl::pkcs7::signerinfo","openssl::pkey","openssl::pkey::dh","openssl::pkey::dherror","openssl::pkey::dsa","openssl::pkey::dsaerror","openssl::pkey::ec","openssl::pkey::ec::group","openssl::pkey::ec::group::error","openssl::pkey::ec::point","openssl::pkey::ec::point::error","openssl::pkey::ecerror","openssl::pkey::pkey","openssl::pkey::pkeyerror","openssl::pkey::rsa","openssl::pkey::rsaerror","openssl::random","openssl::random::randomerror","openssl::ssl","openssl::ssl::nonblock","openssl::ssl::sslcontext","openssl::ssl::sslerror","openssl::ssl::sslserver","openssl::ssl::sslsocket","openssl::ssl::session","openssl::ssl::session::sessionerror","openssl::ssl::socketforwarder","openssl::x509","openssl::x509::attribute","openssl::x509::attributeerror","openssl::x509::crl","openssl::x509::crlerror","openssl::x509::certificate","openssl::x509::certificateerror","openssl::x509::extension","openssl::x509::extensionerror","openssl::x509::extensionfactory","openssl::x509::name","openssl::x509::name::rfc2253dn","openssl::x509::nameerror","openssl::x509::request","openssl::x509::requesterror","openssl::x509::revoked","openssl::x509::revokederror","openssl::x509::store","openssl::x509::storecontext","openssl::x509::storeerror","openstruct","openuri","openuri::httperror","openuri::httpredirect","openuri::meta","openuri::openread","optionmenubutton","optionparser","optionparser::acceptables","optionparser::ambiguousargument","optionparser::ambiguousoption","optionparser::arguable","optionparser::completinghash","optionparser::completion","optionparser::invalidargument","optionparser::invalidoption","optionparser::list","optionparser::missingargument","optionparser::needlessargument","optionparser::optionmap","optionparser::parseerror","optionparser::switch","optionparser::switch::noargument","optionparser::switch::optionalargument","optionparser::switch::placedargument","optionparser::switch::requiredargument","oval","pkcs7","pkey","pp","pp::objectmixin","pp::ppmethods","pp::singleline","pstore","pstore::error","pty","pty::childexited","pack","panedwindow","pathname","pendulumanimationdemo","photocanvas","photoimage","pidigitspigot","place","planet","point","polygon","prelude","prettyprint","prettyprint::breakable","prettyprint::group","prettyprint::groupqueue","prettyprint::singleline","prettyprint::text","prime","prime::eratosthenesgenerator","prime::eratosthenessieve","prime::generator23","prime::oldcompatibility","prime::pseudoprimegenerator","prime::trialdivision","prime::trialdivisiongenerator","proc","process","process::gid","process::status","process::sys","process::uid","profiler__","psych","psych::badalias","psych::coder","psych::emitter","psych::exception","psych::handler","psych::handler::dumperoptions","psych::handlers","psych::json","psych::json::stream","psych::json::treebuilder","psych::nodes","psych::nodes::alias","psych::nodes::document","psych::nodes::mapping","psych::nodes::node","psych::nodes::scalar","psych::nodes::sequence","psych::nodes::stream","psych::omap","psych::parser","psych::parser::mark","psych::privatetype","psych::scalarscanner","psych::set","psych::stream","psych::streaming","psych::syntaxerror","psych::treebuilder","psych::visitors","psych::visitors::depthfirst","psych::visitors::emitter","psych::visitors::jsontree","psych::visitors::toruby","psych::visitors::visitor","psych::visitors::yamltree","queue","rdoc","rdoc::alias","rdoc::anonclass","rdoc::anymethod","rdoc::attr","rdoc::classmodule","rdoc::codeobject","rdoc::constant","rdoc::context","rdoc::context::section","rdoc::crossreference","rdoc::erbio","rdoc::encoding","rdoc::error","rdoc::generator","rdoc::generator::darkfish","rdoc::generator::markup","rdoc::generator::ri","rdoc::ghostmethod","rdoc::include","rdoc::markup","rdoc::markup::attrchanger","rdoc::markup::attrspan","rdoc::markup::attribute","rdoc::markup::attributemanager","rdoc::markup::blankline","rdoc::markup::document","rdoc::markup::formatter","rdoc::markup::heading","rdoc::markup::indentedparagraph","rdoc::markup::list","rdoc::markup::listitem","rdoc::markup::paragraph","rdoc::markup::parser","rdoc::markup::parser::error","rdoc::markup::parser::parseerror","rdoc::markup::preprocess","rdoc::markup::raw","rdoc::markup::rule","rdoc::markup::special","rdoc::markup::toansi","rdoc::markup::tobs","rdoc::markup::tohtml","rdoc::markup::tohtmlcrossref","rdoc::markup::tordoc","rdoc::markup::tottonly","rdoc::markup::verbatim","rdoc::metamethod","rdoc::methodattr","rdoc::normalclass","rdoc::normalmodule","rdoc::options","rdoc::page","rdoc::parser","rdoc::parser::c","rdoc::parser::ruby","rdoc::parser::rubytools","rdoc::parser::simple","rdoc::rdoc","rdoc::ri","rdoc::ri::driver","rdoc::ri::driver::error","rdoc::ri::driver::notfounderror","rdoc::ri::error","rdoc::ri::paths","rdoc::ri::store","rdoc::require","rdoc::rubylex","rdoc::rubytoken","rdoc::rubytoken::tkerror","rdoc::rubytoken::tkid","rdoc::rubytoken::tkkw","rdoc::rubytoken::tknode","rdoc::rubytoken::tkopasgn","rdoc::rubytoken::tkop","rdoc::rubytoken::tksymbol","rdoc::rubytoken::tkunknownchar","rdoc::rubytoken::tkval","rdoc::rubytoken::token","rdoc::rubygemshook","rdoc::singleclass","rdoc::stats","rdoc::stats::normal","rdoc::stats::quiet","rdoc::stats::verbose","rdoc::task","rdoc::text","rdoc::tokenstream","rdoc::toplevel","rexml","rexml::attlistdecl","rexml::attribute","rexml::attributes","rexml::cdata","rexml::child","rexml::comment","rexml::dtd","rexml::dtd::attlistdecl","rexml::dtd::elementdecl","rexml::dtd::entitydecl","rexml::dtd::notationdecl","rexml::dtd::parser","rexml::declaration","rexml::doctype","rexml::document","rexml::element","rexml::elementdecl","rexml::elements","rexml::encoding","rexml::entity","rexml::entityconst","rexml::externalentity","rexml::formatters","rexml::formatters::default","rexml::formatters::pretty","rexml::formatters::transitive","rexml::functions","rexml::iosource","rexml::instruction","rexml::light","rexml::light::node","rexml::namespace","rexml::node","rexml::notationdecl","rexml::output","rexml::parent","rexml::parseexception","rexml::parsers","rexml::parsers::baseparser","rexml::parsers::lightparser","rexml::parsers::pullevent","rexml::parsers::pullparser","rexml::parsers::sax2parser","rexml::parsers::streamparser","rexml::parsers::treeparser","rexml::parsers::ultralightparser","rexml::parsers::xpathparser","rexml::quickpath","rexml::sax2listener","rexml::source","rexml::sourcefactory","rexml::streamlistener","rexml::syncenumerator","rexml::text","rexml::undefinednamespaceexception","rexml::validation","rexml::validation::choice","rexml::validation::event","rexml::validation::interleave","rexml::validation::oneormore","rexml::validation::optional","rexml::validation::ref","rexml::validation::relaxng","rexml::validation::sequence","rexml::validation::state","rexml::validation::validationexception","rexml::validation::validator","rexml::validation::zeroormore","rexml::xmldecl","rexml::xmltokens","rexml::xpath","rexml::xpathparser","romp","rss","rss::atom","rss::atom::commonmodel","rss::atom::contentmodel","rss::atom::contentmodel::classmethods","rss::atom::dateconstruct","rss::atom::duplicatelinkchecker","rss::atom::entry","rss::atom::feed","rss::atom::feed::author","rss::atom::feed::category","rss::atom::feed::contributor","rss::atom::feed::entry","rss::atom::feed::entry::content","rss::atom::feed::entry::published","rss::atom::feed::entry::source","rss::atom::feed::entry::summary","rss::atom::feed::generator","rss::atom::feed::icon","rss::atom::feed::id","rss::atom::feed::link","rss::atom::feed::logo","rss::atom::feed::rights","rss::atom::feed::subtitle","rss::atom::feed::title","rss::atom::feed::updated","rss::atom::personconstruct","rss::atom::personconstruct::email","rss::atom::personconstruct::name","rss::atom::personconstruct::uri","rss::atom::textconstruct","rss::atom::uricontentmodel","rss::basedublincoremodel","rss::baselistener","rss::basemodel","rss::baseparser","rss::basetrackbackmodel","rss::contentmodel","rss::conversionerror","rss::converter","rss::dublincoremodel","rss::dublincoremodel","rss::element","rss::error","rss::itunesbasemodel","rss::ituneschannelmodel","rss::ituneschannelmodel::itunescategory","rss::ituneschannelmodel::itunesimage","rss::ituneschannelmodel::itunesowner","rss::itunesitemmodel","rss::itunesitemmodel::itunesduration","rss::itunesmodelutils","rss::imagefaviconmodel","rss::imagefaviconmodel::imagefavicon","rss::imageitemmodel","rss::imageitemmodel::imageitem","rss::imagemodelutils","rss::invalidrsserror","rss::listenermixin","rss::maker","rss::maker::atom","rss::maker::atom::entry","rss::maker::atom::entry::channel","rss::maker::atom::entry::channel::cloud","rss::maker::atom::entry::channel::description","rss::maker::atom::entry::channel::generator","rss::maker::atom::entry::channel::skipdays","rss::maker::atom::entry::channel::skipdays::day","rss::maker::atom::entry::channel::skiphours","rss::maker::atom::entry::channel::skiphours::hour","rss::maker::atom::entry::image","rss::maker::atom::entry::items","rss::maker::atom::entry::items::item","rss::maker::atom::entry::textinput","rss::maker::atom::feed","rss::maker::atom::feed::channel","rss::maker::atom::feed::channel::categories","rss::maker::atom::feed::channel::categories::category","rss::maker::atom::feed::channel::cloud","rss::maker::atom::feed::channel::generator","rss::maker::atom::feed::channel::links","rss::maker::atom::feed::channel::links::link","rss::maker::atom::feed::channel::skipdays","rss::maker::atom::feed::channel::skipdays::day","rss::maker::atom::feed::channel::skiphours","rss::maker::atom::feed::channel::skiphours::hour","rss::maker::atom::feed::image","rss::maker::atom::feed::items","rss::maker::atom::feed::items::item","rss::maker::atom::feed::items::item::categories","rss::maker::atom::feed::items::item::categories::category","rss::maker::atom::feed::items::item::content","rss::maker::atom::feed::items::item::enclosure","rss::maker::atom::feed::items::item::guid","rss::maker::atom::feed::items::item::links","rss::maker::atom::feed::items::item::links::link","rss::maker::atom::feed::items::item::source","rss::maker::atom::feed::items::item::source::categories","rss::maker::atom::feed::items::item::source::categories::category","rss::maker::atom::feed::items::item::source::generator","rss::maker::atom::feed::items::item::source::icon","rss::maker::atom::feed::items::item::source::links","rss::maker::atom::feed::items::item::source::links::link","rss::maker::atom::feed::items::item::source::logo","rss::maker::atom::feed::textinput","rss::maker::atomcategory","rss::maker::atomgenerator","rss::maker::atomlink","rss::maker::atomlogo","rss::maker::atompersonconstructbase","rss::maker::atompersons","rss::maker::atomtextconstruct","rss::maker::atomtextconstructbase","rss::maker::atomtextconstructbase::ensurexmlcontent","rss::maker::base","rss::maker::channelbase","rss::maker::channelbase::authorsbase","rss::maker::channelbase::authorsbase::authorbase","rss::maker::channelbase::categoriesbase","rss::maker::channelbase::categoriesbase::categorybase","rss::maker::channelbase::cloudbase","rss::maker::channelbase::contributorsbase","rss::maker::channelbase::contributorsbase::contributorbase","rss::maker::channelbase::copyrightbase","rss::maker::channelbase::descriptionbase","rss::maker::channelbase::generatorbase","rss::maker::channelbase::itunescategories","rss::maker::channelbase::itunescategories::itunescategory","rss::maker::channelbase::itunesimage","rss::maker::channelbase::itunesowner","rss::maker::channelbase::linksbase","rss::maker::channelbase::linksbase::linkbase","rss::maker::channelbase::skipdaysbase","rss::maker::channelbase::skipdaysbase::daybase","rss::maker::channelbase::skiphoursbase","rss::maker::channelbase::skiphoursbase::hourbase","rss::maker::channelbase::titlebase","rss::maker::contentmodel","rss::maker::dublincoremodel","rss::maker::itunesbasemodel","rss::maker::ituneschannelmodel","rss::maker::ituneschannelmodel::itunescategoriesbase","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase","rss::maker::ituneschannelmodel::itunesimagebase","rss::maker::ituneschannelmodel::itunesownerbase","rss::maker::itunesitemmodel","rss::maker::itunesitemmodel::itunesdurationbase","rss::maker::imagebase","rss::maker::imagefaviconmodel","rss::maker::imagefaviconmodel::imagefaviconbase","rss::maker::imageitemmodel","rss::maker::imageitemmodel::imageitembase","rss::maker::itemsbase","rss::maker::itemsbase::itembase","rss::maker::itemsbase::itembase::contentbase","rss::maker::itemsbase::itembase::descriptionbase","rss::maker::itemsbase::itembase::enclosurebase","rss::maker::itemsbase::itembase::guidbase","rss::maker::itemsbase::itembase::itunesduration","rss::maker::itemsbase::itembase::rightsbase","rss::maker::itemsbase::itembase::sourcebase","rss::maker::itemsbase::itembase::sourcebase::iconbase","rss::maker::itemsbase::itembase::sourcebase::logobase","rss::maker::itemsbase::itembase::sourcebase::rightsbase","rss::maker::itemsbase::itembase::sourcebase::subtitlebase","rss::maker::itemsbase::itembase::sourcebase::titlebase","rss::maker::itemsbase::itembase::titlebase","rss::maker::rss09","rss::maker::rss091","rss::maker::rss091::channel","rss::maker::rss091::image","rss::maker::rss091::items","rss::maker::rss091::items::item","rss::maker::rss091::textinput","rss::maker::rss092","rss::maker::rss092::channel","rss::maker::rss092::image","rss::maker::rss092::items","rss::maker::rss092::items::item","rss::maker::rss092::textinput","rss::maker::rss09::channel","rss::maker::rss09::channel::authors","rss::maker::rss09::channel::authors::author","rss::maker::rss09::channel::categories","rss::maker::rss09::channel::categories::category","rss::maker::rss09::channel::cloud","rss::maker::rss09::channel::contributors","rss::maker::rss09::channel::contributors::contributor","rss::maker::rss09::channel::copyright","rss::maker::rss09::channel::description","rss::maker::rss09::channel::generator","rss::maker::rss09::channel::links","rss::maker::rss09::channel::links::link","rss::maker::rss09::channel::skipdays","rss::maker::rss09::channel::skipdays::day","rss::maker::rss09::channel::skiphours","rss::maker::rss09::channel::skiphours::hour","rss::maker::rss09::channel::title","rss::maker::rss09::image","rss::maker::rss09::items","rss::maker::rss09::items::item","rss::maker::rss09::items::item::authors","rss::maker::rss09::items::item::authors::author","rss::maker::rss09::items::item::categories","rss::maker::rss09::items::item::categories::category","rss::maker::rss09::items::item::content","rss::maker::rss09::items::item::contributors","rss::maker::rss09::items::item::contributors::contributor","rss::maker::rss09::items::item::description","rss::maker::rss09::items::item::enclosure","rss::maker::rss09::items::item::guid","rss::maker::rss09::items::item::links","rss::maker::rss09::items::item::links::link","rss::maker::rss09::items::item::rights","rss::maker::rss09::items::item::source","rss::maker::rss09::items::item::source::authors","rss::maker::rss09::items::item::source::authors::author","rss::maker::rss09::items::item::source::categories","rss::maker::rss09::items::item::source::categories::category","rss::maker::rss09::items::item::source::contributors","rss::maker::rss09::items::item::source::contributors::contributor","rss::maker::rss09::items::item::source::generator","rss::maker::rss09::items::item::source::icon","rss::maker::rss09::items::item::source::links","rss::maker::rss09::items::item::source::links::link","rss::maker::rss09::items::item::source::logo","rss::maker::rss09::items::item::source::rights","rss::maker::rss09::items::item::source::subtitle","rss::maker::rss09::items::item::source::title","rss::maker::rss09::items::item::title","rss::maker::rss09::textinput","rss::maker::rss10","rss::maker::rss10::channel","rss::maker::rss10::channel::authors","rss::maker::rss10::channel::authors::author","rss::maker::rss10::channel::categories","rss::maker::rss10::channel::categories::category","rss::maker::rss10::channel::cloud","rss::maker::rss10::channel::contributors","rss::maker::rss10::channel::contributors::contributor","rss::maker::rss10::channel::copyright","rss::maker::rss10::channel::description","rss::maker::rss10::channel::generator","rss::maker::rss10::channel::links","rss::maker::rss10::channel::links::link","rss::maker::rss10::channel::skipdays","rss::maker::rss10::channel::skipdays::day","rss::maker::rss10::channel::skiphours","rss::maker::rss10::channel::skiphours::hour","rss::maker::rss10::channel::title","rss::maker::rss10::image","rss::maker::rss10::items","rss::maker::rss10::items::item","rss::maker::rss10::items::item::authors","rss::maker::rss10::items::item::authors::author","rss::maker::rss10::items::item::categories","rss::maker::rss10::items::item::categories::category","rss::maker::rss10::items::item::content","rss::maker::rss10::items::item::contributors","rss::maker::rss10::items::item::contributors::contributor","rss::maker::rss10::items::item::description","rss::maker::rss10::items::item::enclosure","rss::maker::rss10::items::item::guid","rss::maker::rss10::items::item::links","rss::maker::rss10::items::item::links::link","rss::maker::rss10::items::item::rights","rss::maker::rss10::items::item::source","rss::maker::rss10::items::item::source::authors","rss::maker::rss10::items::item::source::authors::author","rss::maker::rss10::items::item::source::categories","rss::maker::rss10::items::item::source::categories::category","rss::maker::rss10::items::item::source::contributors","rss::maker::rss10::items::item::source::contributors::contributor","rss::maker::rss10::items::item::source::generator","rss::maker::rss10::items::item::source::icon","rss::maker::rss10::items::item::source::links","rss::maker::rss10::items::item::source::links::link","rss::maker::rss10::items::item::source::logo","rss::maker::rss10::items::item::source::rights","rss::maker::rss10::items::item::source::subtitle","rss::maker::rss10::items::item::source::title","rss::maker::rss10::items::item::title","rss::maker::rss10::textinput","rss::maker::rss20","rss::maker::rss20::channel","rss::maker::rss20::channel::categories","rss::maker::rss20::channel::categories::category","rss::maker::rss20::channel::cloud","rss::maker::rss20::channel::generator","rss::maker::rss20::channel::skipdays","rss::maker::rss20::channel::skipdays::day","rss::maker::rss20::channel::skiphours","rss::maker::rss20::channel::skiphours::hour","rss::maker::rss20::image","rss::maker::rss20::items","rss::maker::rss20::items::item","rss::maker::rss20::items::item::authors","rss::maker::rss20::items::item::authors::author","rss::maker::rss20::items::item::categories","rss::maker::rss20::items::item::categories::category","rss::maker::rss20::items::item::enclosure","rss::maker::rss20::items::item::guid","rss::maker::rss20::items::item::source","rss::maker::rss20::items::item::source::links","rss::maker::rss20::items::item::source::links::link","rss::maker::rss20::textinput","rss::maker::rssbase","rss::maker::setupdefaultdate","rss::maker::setupdefaultlanguage","rss::maker::slashmodel","rss::maker::syndicationmodel","rss::maker::taxonomytopicmodel","rss::maker::taxonomytopicmodel::taxonomytopicsbase","rss::maker::taxonomytopicmodel::taxonomytopicsbase::taxonomytopicbase","rss::maker::taxonomytopicsmodel","rss::maker::taxonomytopicsmodel::taxonomytopicsbase","rss::maker::textinputbase","rss::maker::trackbackmodel","rss::maker::trackbackmodel::trackbackaboutsbase","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase","rss::maker::xmlstylesheets","rss::maker::xmlstylesheets::xmlstylesheet","rss::missingattributeerror","rss::missingtagerror","rss::nserror","rss::notavailablevalueerror","rss::notexceptedtagerror","rss::notexpectedtagerror","rss::notseterror","rss::notvalidxmlparser","rss::notwellformederror","rss::overlappedprefixerror","rss::parser","rss::rdf","rss::rdf::bag","rss::rdf::channel","rss::rdf::channel::image","rss::rdf::channel::items","rss::rdf::channel::textinput","rss::rdf::image","rss::rdf::item","rss::rdf::li","rss::rdf::li","rss::rdf::seq","rss::rdf::seq","rss::rdf::seq::li","rss::rdf::textinput","rss::rexmllikexmlparser","rss::rexmllistener","rss::rexmlparser","rss::rss09","rss::rss10","rss::rootelementmixin","rss::rss","rss::rss::channel","rss::rss::channel::cloud","rss::rss::channel::image","rss::rss::channel::item","rss::rss::channel::item::category","rss::rss::channel::item::enclosure","rss::rss::channel::item::guid","rss::rss::channel::item::source","rss::rss::channel::skipdays","rss::rss::channel::skipdays::day","rss::rss::channel::skiphours","rss::rss::channel::skiphours::hour","rss::rss::channel::textinput","rss::setupmaker","rss::slashmodel","rss::syndicationmodel","rss::taxonomytopicmodel","rss::taxonomytopicmodel::taxonomytopic","rss::taxonomytopicsmodel","rss::taxonomytopicsmodel::taxonomytopics","rss::taxonomytopicsmodel::taxonomytopics::bag","rss::toomuchtagerror","rss::trackbackmodel10","rss::trackbackmodel10::trackbackabout","rss::trackbackmodel10::trackbackping","rss::trackbackmodel20","rss::trackbackmodel20::trackbackabout","rss::trackbackmodel20::trackbackping","rss::trackbackutils","rss::unknownconversionmethoderror","rss::unknownconvertmethod","rss::unknowntagerror","rss::unsupportedmakerversionerror","rss::utils","rss::utils::csv","rss::utils::inheritedreader","rss::utils::yescleanother","rss::utils::yesother","rss::xml","rss::xml::element","rss::xmlparserlistener","rss::xmlparsernotfound","rss::xmlparserparser","rss::xmlscanlistener","rss::xmlscanparser","rss::xmlstylesheet","rss::xmlstylesheetmixin","racc","racc::cparseparams","racc::parseerror","racc::parseerror","racc::parser","radiobutton","rake","rake::altsystem","rake::application","rake::cloneable","rake::compositepublisher","rake::dsl","rake::defaultloader","rake::earlytime","rake::filecreationtask","rake::filelist","rake::filetask","rake::fileutilsext","rake::ftpfile","rake::ftpuploader","rake::invocationchain","rake::invocationchain::emptyinvocationchain","rake::invocationexceptionmixin","rake::makefileloader","rake::multitask","rake::namespace","rake::packagetask","rake::pseudostatus","rake::rdoctask","rake::rakeapp","rake::rubyforgepublisher","rake::rulerecursionoverflowerror","rake::sshdirpublisher","rake::sshfilepublisher","rake::sshfreshdirpublisher","rake::task","rake::taskargumenterror","rake::taskarguments","rake::tasklib","rake::taskmanager","rake::win32","rake::win32::win32homeerror","random","range","rangeerror","rational","rbconfig","readline","rectangle","regexp","regexperror","remotetkip","resolv","resolv::dns","resolv::dns::config","resolv::dns::config::nxdomain","resolv::dns::config::otherresolverror","resolv::dns::decodeerror","resolv::dns::encodeerror","resolv::dns::name","resolv::dns::query","resolv::dns::requester","resolv::dns::requester::requesterror","resolv::dns::resource","resolv::dns::resource::any","resolv::dns::resource::cname","resolv::dns::resource::domainname","resolv::dns::resource::generic","resolv::dns::resource::hinfo","resolv::dns::resource::in","resolv::dns::resource::in::a","resolv::dns::resource::in::aaaa","resolv::dns::resource::in::srv","resolv::dns::resource::in::wks","resolv::dns::resource::minfo","resolv::dns::resource::mx","resolv::dns::resource::ns","resolv::dns::resource::ptr","resolv::dns::resource::soa","resolv::dns::resource::txt","resolv::hosts","resolv::ipv4","resolv::ipv6","resolv::resolverror","resolv::resolvtimeout","rinda","rinda::drbobjecttemplate","rinda::invalidhashtuplekey","rinda::notifytemplateentry","rinda::requestcancelederror","rinda::requestexpirederror","rinda::rindaerror","rinda::ringfinger","rinda::ringprovider","rinda::ringserver","rinda::simplerenewer","rinda::template","rinda::templateentry","rinda::tuple","rinda::tuplebag","rinda::tuplebag::tuplebin","rinda::tupleentry","rinda::tuplespace","rinda::tuplespaceproxy","rinda::waittemplateentry","ringecho","ripper","ripper::filter","ripper::tokenpattern","ripper::tokenpattern::compileerror","ripper::tokenpattern::error","ripper::tokenpattern::matchdata","ripper::tokenpattern::matcherror","ruby2html","rubylex","rubytoken","rubytoken::tkerror","rubytoken::tkid","rubytoken::tknode","rubytoken::tkopasgn","rubytoken::tkop","rubytoken::tkunknownchar","rubytoken::tkval","rubytoken::token","rubyvm","rubyvm::env","rubyvm::insnsincgenerator","rubyvm::insnsinfoincgenerator","rubyvm::instruction","rubyvm::instructionsequence","rubyvm::instructionsloader","rubyvm::minsnsincgenerator","rubyvm::optinsnincgenerator","rubyvm::optscincgenerator","rubyvm::optunifsincgenerator","rubyvm::sourcecodegenerator","rubyvm::vpath","rubyvm::vmbodygenerator","rubyvm::vmtcincgenerator","rubyvm::yarvdocgenerator","rubyvm::yasmdatarbgenerator","runtimeerror","sdbm","sdbmerror","sm","sockssocket","string_or_failed_format","scanf","scanf::formatspecifier","scanf::formatstring","scrlistbox","scripterror","securerandom","securityerror","selection","seq","set","shell","shell::appendfile","shell::appendio","shell::builtincommand","shell::cat","shell::commandprocessor","shell::concat","shell::echo","shell::error","shell::filter","shell::glob","shell::processcontroller","shell::systemcommand","shell::tee","shell::void","shellwords","signal","signalexception","simpledelegator","simpletuplespace","singleforwardable","singleton","sizedqueue","socket","socket::ancillarydata","socket::option","socket::udpsource","socketerror","sortedset","spinbox","spinner_demo","sshdirpublisher","sshfilepublisher","sshfreshdirpublisher","standarderror","stopiteration","string","stringio","stringscanner","stringscanner::error","struct","syck","syck","syck::baseemitter","syck::basenode","syck::defaultkey","syck::domaintype","syck::error","syck::loader","syck::mapping","syck::node","syck::object","syck::omap","syck::pairs","syck::parseerror","syck::privatetype","syck::sequence","syck::set","syck::specialhash","syck::stream","syck::typeerror","syck::ypath","syck::yamlnode","symbol","symbol","sync","sync_m","sync_m::err","sync_m::err::lockmodefailer","sync_m::err::unknownlocker","synchronizer","synchronizer_m","syntaxerror","sys","syslog","syslog::constants","systemcallerror","systemexit","systemstackerror","tcpserver","tcpsocket","tsort","tsort::cyclic","tzinfo","tcltkip","tcltklib","tcltklib::eventflag","tcltklib::release_type","tcltklib::varaccessflag","tempfile","tempfile::remover","test1","textitem","thwait","thread","threaderror","threadgroup","threadswait","tick","time","timeout","timeout::error","timeout::timeouterror","tk","tk::blt","tk::blt::barchart","tk::blt::bitmap","tk::blt::busy","tk::blt::busy::shield","tk::blt::container","tk::blt::cutbuffer","tk::blt::dnd","tk::blt::dragdrop","tk::blt::dragdrop::dnd_handle","tk::blt::dragdrop::packagecommand","tk::blt::dragdrop::packagecommand::validateargs","tk::blt::dragdrop::sitecommand","tk::blt::dragdrop::sitecommand::validateargs","tk::blt::dragdrop::token","tk::blt::eps","tk::blt::graph","tk::blt::graphcommand","tk::blt::hiertable","tk::blt::htext","tk::blt::plotcomponent","tk::blt::plotcomponent::axis","tk::blt::plotcomponent::bar","tk::blt::plotcomponent::bitmapmarker","tk::blt::plotcomponent::crosshairs","tk::blt::plotcomponent::element","tk::blt::plotcomponent::gridline","tk::blt::plotcomponent::imagemarker","tk::blt::plotcomponent::legend","tk::blt::plotcomponent::line","tk::blt::plotcomponent::linemarker","tk::blt::plotcomponent::marker","tk::blt::plotcomponent::optkeys","tk::blt::plotcomponent::pen","tk::blt::plotcomponent::polygonmarker","tk::blt::plotcomponent::postscript","tk::blt::plotcomponent::textmarker","tk::blt::plotcomponent::windowmarker","tk::blt::printer","tk::blt::spline","tk::blt::stripchart","tk::blt::table","tk::blt::table::tablecontainer","tk::blt::tabnotebook","tk::blt::tabnotebook::tab","tk::blt::tabset","tk::blt::tabset::namedtab","tk::blt::tabset::tab","tk::blt::ted","tk::blt::tile","tk::blt::tile::button","tk::blt::tile::checkbutton","tk::blt::tile::checkbutton","tk::blt::tile::frame","tk::blt::tile::label","tk::blt::tile::radiobutton","tk::blt::tile::radiobutton","tk::blt::tile::scrollbar","tk::blt::tile::toplevel","tk::blt::tree","tk::blt::tree::node","tk::blt::tree::notify","tk::blt::tree::tag","tk::blt::tree::trace","tk::blt::treeview","tk::blt::treeview::configmethod","tk::blt::treeview::findexecflagvalue","tk::blt::treeview::findexecflagvalue::validateargs","tk::blt::treeview::node","tk::blt::treeview::openclosecommand","tk::blt::treeview::openclosecommand::validateargs","tk::blt::treeview::tag","tk::blt::treeview::tagorid_methods","tk::blt::vector","tk::blt::vectoraccess","tk::blt::watch","tk::blt::winop","tk::blt::winop","tk::bwidget","tk::bwidget::arrowbutton","tk::bwidget::bitmap","tk::bwidget::button","tk::bwidget::buttonbox","tk::bwidget::combobox","tk::bwidget::dialog","tk::bwidget::dragsite","tk::bwidget::dropsite","tk::bwidget::dynamichelp","tk::bwidget::entry","tk::bwidget::label","tk::bwidget::labelentry","tk::bwidget::labelframe","tk::bwidget::listbox","tk::bwidget::listbox::event_for_items","tk::bwidget::listbox::item","tk::bwidget::mainframe","tk::bwidget::messagedlg","tk::bwidget::notebook","tk::bwidget::notebook::event_for_tabs","tk::bwidget::pagesmanager","tk::bwidget::panedwindow","tk::bwidget::panelframe","tk::bwidget::passwddlg","tk::bwidget::progressbar","tk::bwidget::progressdlg","tk::bwidget::scrollview","tk::bwidget::scrollableframe","tk::bwidget::scrolledwindow","tk::bwidget::selectcolor","tk::bwidget::selectcolor::dialog","tk::bwidget::selectcolor::menubutton","tk::bwidget::selectcolor::menubutton","tk::bwidget::selectfont","tk::bwidget::selectfont::dialog","tk::bwidget::selectfont::toolbar","tk::bwidget::separator","tk::bwidget::spinbox","tk::bwidget::statusbar","tk::bwidget::titleframe","tk::bwidget::tree","tk::bwidget::tree::event_for_items","tk::bwidget::tree::node","tk::bwidget::widget","tk::binarystring","tk::busy","tk::button","tk::canvas","tk::checkbutton","tk::clock","tk::encodedstring","tk::entry","tk::frame","tk::html_widget","tk::html_widget::clippingwindow","tk::icons","tk::img","tk::img::bmp","tk::img::gif","tk::img::ico","tk::img::jpeg","tk::img::pcx","tk::img::pixmap","tk::img::png","tk::img::ppm","tk::img::ps","tk::img::sgi","tk::img::sun","tk::img::tga","tk::img::tiff","tk::img::window","tk::img::xbm","tk::img::xpm","tk::itcl","tk::itcl::itclobject","tk::itemvalidateconfigure","tk::itk","tk::itk::archetype","tk::itk::component","tk::itk::toplevel","tk::itk::widget","tk::iwidgets","tk::iwidgets::buttonbox","tk::iwidgets::calendar","tk::iwidgets::calendar::calendarcommand","tk::iwidgets::calendar::calendarcommand::validateargs","tk::iwidgets::canvasprintbox","tk::iwidgets::canvasprintdialog","tk::iwidgets::checkbox","tk::iwidgets::combobox","tk::iwidgets::dateentry","tk::iwidgets::datefield","tk::iwidgets::dialog","tk::iwidgets::dialogshell","tk::iwidgets::disjointlistbox","tk::iwidgets::entryfield","tk::iwidgets::entryfield::entryfieldvalidate","tk::iwidgets::entryfield::entryfieldvalidate::validateargs","tk::iwidgets::extbutton","tk::iwidgets::extfileselectionbox","tk::iwidgets::extfileselectiondialog","tk::iwidgets::feedback","tk::iwidgets::fileselectionbox","tk::iwidgets::fileselectiondialog","tk::iwidgets::finddialog","tk::iwidgets::hierarchy","tk::iwidgets::hierarchy::iconcommand","tk::iwidgets::hierarchy::iconcommand::validateargs","tk::iwidgets::hierarchy::indicatorcommand","tk::iwidgets::hierarchy::indicatorcommand::validateargs","tk::iwidgets::hierarchy::querycommand","tk::iwidgets::hierarchy::querycommand::validateargs","tk::iwidgets::hyperhelp","tk::iwidgets::labeledframe","tk::iwidgets::labeledwidget","tk::iwidgets::mainwindow","tk::iwidgets::menubar","tk::iwidgets::messagebox","tk::iwidgets::messagedialog","tk::iwidgets::notebook","tk::iwidgets::optionmenu","tk::iwidgets::panedwindow","tk::iwidgets::promptdialog","tk::iwidgets::pushbutton","tk::iwidgets::radiobox","tk::iwidgets::scopedobject","tk::iwidgets::scrolledcanvas","tk::iwidgets::scrolledframe","tk::iwidgets::scrolledhtml","tk::iwidgets::scrolledlistbox","tk::iwidgets::scrolledtext","tk::iwidgets::scrolledwidget","tk::iwidgets::selectionbox","tk::iwidgets::selectiondialog","tk::iwidgets::shell","tk::iwidgets::spindate","tk::iwidgets::spinint","tk::iwidgets::spinner","tk::iwidgets::spinner::entryfieldvalidate","tk::iwidgets::spinner::entryfieldvalidate::validateargs","tk::iwidgets::spintime","tk::iwidgets::tabnotebook","tk::iwidgets::tabset","tk::iwidgets::timeentry","tk::iwidgets::timefield","tk::iwidgets::toolbar","tk::iwidgets::watch","tk::label","tk::labelframe","tk::listbox","tk::macresource","tk::menu","tk::menu::tkinternalfunction","tk::menuclone","tk::menubutton","tk::message","tk::optionmenubutton","tk::optionmenubutton::optionmenu","tk::optionobj","tk::panedwindow","tk::radiobutton","tk::rbwidget","tk::rbwidget::alignbox","tk::rbwidget::autoscrolllistbox","tk::rbwidget::balloonhelp","tk::rbwidget::combobox","tk::rbwidget::editable_listbox","tk::rbwidget::hbox","tk::rbwidget::hrbox","tk::rbwidget::scrollframe","tk::rbwidget::vbbox","tk::rbwidget::vbox","tk::root","tk::scale","tk::scrollable","tk::scrollbar","tk::scrollbarcomposite","tk::spinbox","tk::spinbox::spincommand","tk::spinbox::spincommand::validateargs","tk::sysmenu_apple","tk::sysmenu_help","tk::sysmenu_system","tk::systemmenu","tk::toplevel_aliases","tk::tclx","tk::tclx::xpg3_msgcat","tk::tcllib","tk::tcllib::autoscroll","tk::tcllib::ctext","tk::tcllib::chatwidget","tk::tcllib::crosshair","tk::tcllib::cursor","tk::tcllib::datefield","tk::tcllib::datefield","tk::tcllib::diagrams","tk::tcllib::getstring_dialog","tk::tcllib::history","tk::tcllib::ico","tk::tcllib::ip6_entry","tk::tcllib::ipentry","tk::tcllib::ipentry6","tk::tcllib::ip_entry","tk::tcllib::ip_entry6","tk::tcllib::khim","tk::tcllib::khim::help","tk::tcllib::ntext","tk::tcllib::plotchart","tk::tcllib::plotchart::barchart","tk::tcllib::plotchart::barchart3d","tk::tcllib::plotchart::boxplot","tk::tcllib::plotchart::chartmethod","tk::tcllib::plotchart::ganttchart","tk::tcllib::plotchart::histogram","tk::tcllib::plotchart::horizontalbarchart","tk::tcllib::plotchart::isometricplot","tk::tcllib::plotchart::isometricplot","tk::tcllib::plotchart::piechart","tk::tcllib::plotchart::plot3d","tk::tcllib::plotchart::plotseries","tk::tcllib::plotchart::polarplot","tk::tcllib::plotchart::polarplot","tk::tcllib::plotchart::radialchart","tk::tcllib::plotchart::ribbonchart3d","tk::tcllib::plotchart::rightaxis","tk::tcllib::plotchart::stripchart","tk::tcllib::plotchart::txplot","tk::tcllib::plotchart::timechart","tk::tcllib::plotchart::xlogyplot","tk::tcllib::plotchart::xyplot","tk::tcllib::style","tk::tcllib::swaplist_dialog","tk::tcllib::tablelist","tk::tcllib::tablelist_tile","tk::tcllib::tablelist","tk::tcllib::tablelistitemconfig","tk::tcllib::tablelist_tile","tk::tcllib::tkpiechart","tk::tcllib::tkpiechart::boxlabeler","tk::tcllib::tkpiechart::configmethod","tk::tcllib::tkpiechart::label","tk::tcllib::tkpiechart::peripherallabeler","tk::tcllib::tkpiechart::pie","tk::tcllib::tkpiechart::piechartobj","tk::tcllib::tkpiechart::slice","tk::tcllib::tooltip","tk::tcllib::widget","tk::tcllib::widget::calendar","tk::tcllib::widget::canvas_sqmap","tk::tcllib::widget::canvas_zoom","tk::tcllib::widget::dateentry","tk::tcllib::widget::dateentry","tk::tcllib::widget::dialog","tk::tcllib::widget::menuentry","tk::tcllib::widget::menuentry","tk::tcllib::widget::panelframe","tk::tcllib::widget::panelframe","tk::tcllib::widget::ruler","tk::tcllib::widget::screenruler","tk::tcllib::widget::screenruler","tk::tcllib::widget::scrolledwindow","tk::tcllib::widget::scrolledwindow","tk::tcllib::widget::statusbar","tk::tcllib::widget::superframe","tk::tcllib::widget::toolbar","tk::tcllib::widget::toolbaritem","tk::tcllib::widget::toolbaritemconfig","tk::text","tk::text::indexmodmethods","tk::text::indexstring","tk::tile","tk::tile::button","tk::tile::checkbutton","tk::tile::checkbutton","tk::tile::combobox","tk::tile::dialog","tk::tile::entry","tk::tile::font","tk::tile::frame","tk::tile::keynav","tk::tile::label","tk::tile::labelframe","tk::tile::labelframe","tk::tile::menubutton","tk::tile::menubutton","tk::tile::notebook","tk::tile::parsestylelayout","tk::tile::progress","tk::tile::progressbar","tk::tile::radiobutton","tk::tile::radiobutton","tk::tile::scale","tk::tile::scrollbar","tk::tile::separator","tk::tile::sizegrip","tk::tile::sizegrip","tk::tile::spinbox","tk::tile::square","tk::tile::style","tk::tile::tbutton","tk::tile::tcheckbutton","tk::tile::tcheckbutton","tk::tile::tcombobox","tk::tile::tentry","tk::tile::tframe","tk::tile::tlabel","tk::tile::tlabelframe","tk::tile::tlabelframe","tk::tile::tmenubutton","tk::tile::tmenubutton","tk::tile::tnotebook","tk::tile::tpaned","tk::tile::tprogress","tk::tile::tprogressbar","tk::tile::tradiobutton","tk::tile::tradiobutton","tk::tile::tscale","tk::tile::tscrollbar","tk::tile::tseparator","tk::tile::tspinbox","tk::tile::tspinbox::spincommand","tk::tile::tspinbox::spincommand::validateargs","tk::tile::tsquare","tk::tile::tilewidget","tk::tile::treeview","tk::tile::treeview::item","tk::tile::treeview::root","tk::tile::treeview::tag","tk::tile::treeviewconfig","tk::tile::xscrollbar","tk::tile::yscrollbar","tk::tkdnd","tk::tkdnd::dnd","tk::tkdnd::dnd_subst","tk::tkdnd::shape","tk::tksystemmenu","tk::tktable","tk::tktable::browsecommand","tk::tktable::browsecommand::validateargs","tk::tktable::cellcommand","tk::tktable::cellcommand::validateargs","tk::tktable::celltag","tk::tktable::configmethod","tk::tktable::namedcelltag","tk::tktable::selectioncommand","tk::tktable::selectioncommand::validateargs","tk::tktable::validatecommand","tk::tktable::validatecommand::validateargs","tk::tktrans","tk::toplevel","tk::treectrl","tk::treectrl::bindcallback","tk::treectrl::bitmapelement","tk::treectrl::borderelement","tk::treectrl::column","tk::treectrl::configmethod","tk::treectrl::element","tk::treectrl::imageelement","tk::treectrl::item","tk::treectrl::notifyevent","tk::treectrl::rectangleelement","tk::treectrl::style","tk::treectrl_widget","tk::trofs","tk::ttk","tk::utf8_string","tk::validateconfigure","tk::vu","tk::vu::bargraph","tk::vu::chartsconfig","tk::vu::dial","tk::vu::namedpieslice","tk::vu::pie","tk::vu::pieslice","tk::vu::piesliceconfigmethod","tk::vu::tkcbarchart","tk::vu::tkcsticker","tk::vu::tkcstripchart","tk::windde","tk::winregistry","tk::winico","tk::winico::winico_callback","tk::winico::winico_callback::validateargs","tk::wm","tk::wm_for_general","tk::xscrollable","tk::xscrollbar","tk::x_scrollable","tk::yscrollable","tk::yscrollbar","tk::y_scrollable","tkafter","tkbgerror","tkbindtag","tkbitmapimage","tkcallbackbreak","tkcallbackcontinue","tkcallbackentry","tkcallbackredo","tkcallbackretry","tkcallbackreturn","tkcallbackthrow","tkcanvasitemconfig","tkclipboard","tkcomm","tkcomposite","tkconsole","tkcore","tkcore::tk_object_table","tkdialog","tkdialog2","tkdialogobj","tkdialog_demo1","tkdialog_demo2","tkevent","tkevent::event","tkevent::event::grp","tkevent::event::statemask","tkevent::event::typenum","tkfont","tkfont::chooser","tkfont::coremethods","tkfont::descendantfont","tkgoldberg_demo","tkgrid","tkhtml_file_viewer","tkimage","tkimg_demo","tkitemconfigmethod","tkitemconfigoptkeys","tkitemfontoptkeys","tkkernel","tkkinput","tklistitemconfig","tklocaljumperror","tkmanagefocus","tkmenuentryconfig","tkmenuspec","tkmenubar","tkmsgcat","tkmsgcatalog","tkmulticolumnlist","tkmultilistframe","tkmultilistbox","tknamedfont","tknamespace","tknamespace::ensemble","tknamespace::nscode","tknamespace::scopeargs","tkobject","tkoption","tkoptiondb","tkoptiondb::priority","tkpack","tkpackage","tkpalette","tkphotoimage","tkpixmapimage","tkplace","tkrttimer","tkresourcedb","tkscrollbox","tkscrolledcanvas","tkselection","tktextframe","tktextio","tktextimage","tktextmark","tktextmarkanchor","tktextmarkcurrent","tktextmarkinsert","tktextnamedmark","tktextnamedtag","tktexttag","tktexttagconfig","tktexttagsel","tktextwin","tktextwindow","tktimer","tktreatitemfont","tktreattagfont","tktree","tktreectrl_demo","tkutil","tkutil::callbacksubst","tkutil::callbacksubst::info","tkvalidatecommand","tkvalidatecommand::validateargs","tkvalidation","tkvalidation::validatecmd","tkvalidation::validatecmd::action","tkvaraccess","tkvariable","tkvirtualevent","tkvirtualevent::predefvirtevent","tkvirtualevent::tknamedvirtualevent","tkwarning","tkwarning2","tkwarningobj","tkwindow","tkwinfo","tkxim","tkcarc","tkcbitmap","tkcgroup","tkcimage","tkcitem","tkcline","tkcnamedtag","tkcoval","tkcpolygon","tkcrectangle","tkctag","tkctagaccess","tkctagall","tkctagcurrent","tkctagstring","tkctext","tkcwindow","tktimage","tktmark","tktmarkanchor","tktmarkcurrent","tktmarkinsert","tktnamedmark","tktnamedtag","tkttag","tkttagsel","tktwindow","toggle","tracer","transformation","trueclass","tuplespace","tuplespace::template","typeerror","udpsocket","unixserver","unixsocket","uri","uri::badurierror","uri::error","uri::escape","uri::ftp","uri::generic","uri::http","uri::https","uri::invalidcomponenterror","uri::invalidurierror","uri::ldap","uri::ldaps","uri::mailto","uri::parser","uri::regexp","uri::regexp::pattern","unboundmethod","unicodeout_sampleframe","vcs","vcs::git","vcs::notfounderror","vcs::svn","variable","vector","vector::zerovectorerror","version","version::requirement","viewicons","virtualevent","webrick","webrick::accesslog","webrick::accesslog::accesslogerror","webrick::basiclog","webrick::cgi","webrick::cgi::socket","webrick::config","webrick::cookie","webrick::daemon","webrick::fakeproxyuri","webrick::genericserver","webrick::htmlutils","webrick::httpauth","webrick::httpauth::authenticator","webrick::httpauth::basicauth","webrick::httpauth::digestauth","webrick::httpauth::htdigest","webrick::httpauth::htgroup","webrick::httpauth::htpasswd","webrick::httpauth::proxyauthenticator","webrick::httpauth::proxybasicauth","webrick::httpauth::proxydigestauth","webrick::httpauth::userdb","webrick::httpproxyserver","webrick::httprequest","webrick::httpresponse","webrick::httpserver","webrick::httpserver::mounttable","webrick::httpservererror","webrick::httpservlet","webrick::httpservlet::abstractservlet","webrick::httpservlet::cgihandler","webrick::httpservlet::defaultfilehandler","webrick::httpservlet::erbhandler","webrick::httpservlet::filehandler","webrick::httpservlet::httpservleterror","webrick::httpservlet::prochandler","webrick::httpstatus","webrick::httpstatus::clienterror","webrick::httpstatus::eoferror","webrick::httpstatus::error","webrick::httpstatus::info","webrick::httpstatus::redirect","webrick::httpstatus::servererror","webrick::httpstatus::status","webrick::httpstatus::success","webrick::httputils","webrick::httputils::formdata","webrick::httpversion","webrick::log","webrick::nullreader","webrick::servererror","webrick::simpleserver","webrick::utils","webrick::utils::timeouthandler","win32comgen","win32ole","win32ole::variant","win32oleruntimeerror","win32ole_event","win32ole_method","win32ole_param","win32ole_type","win32ole_typelib","win32ole_variable","win32ole_variant","weakref","weakref::referror","win32","win32::registry","win32::registry::api","win32::registry::constants","win32::registry::error","win32::registry::error::kernel32","win32::registry::predefinedkey","win32::resolv","win32::resolv::kernel32","win32::sspi","win32::sspi::api","win32::sspi::identity","win32::sspi::negotiateauth","win32::sspi::sspiresult","win32::sspi::securitybuffer","win32::sspi::securityhandle","win32::sspi::timestamp","win32api","windowitem","winfo","x509","xml","xml::parser","xmlencoding_ja","xmlencoding_ja::sjishandler","xmlrpc","xmlrpc::base64","xmlrpc::basicserver","xmlrpc::cgiserver","xmlrpc::client","xmlrpc::client::proxy","xmlrpc::config","xmlrpc::convert","xmlrpc::create","xmlrpc::datetime","xmlrpc::faultexception","xmlrpc::marshal","xmlrpc::marshallable","xmlrpc::modrubyserver","xmlrpc::parsecontenttype","xmlrpc::parserwriterchoosemixin","xmlrpc::server","xmlrpc::service","xmlrpc::service::basicinterface","xmlrpc::service::interface","xmlrpc::service::publicinstancemethodsinterface","xmlrpc::webrickservlet","xmlrpc::xmlparser","xmlrpc::xmlparser::abstractstreamparser","xmlrpc::xmlparser::abstracttreeparser","xmlrpc::xmlparser::nqxmlparser","xmlrpc::xmlparser::nqxmlstreamparser","xmlrpc::xmlparser::nqxmlstreamparser::xmlrpcparser","xmlrpc::xmlparser::nqxmltreeparser","xmlrpc::xmlparser::rexmlstreamparser","xmlrpc::xmlparser::rexmlstreamparser::streamlistener","xmlrpc::xmlparser::streamparsermixin","xmlrpc::xmlparser::xmlparser","xmlrpc::xmlparser::xmlscanstreamparser","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser","xmlrpc::xmlparser::xmlstreamparser","xmlrpc::xmlparser::xmltreeparser","xmlrpc::xmlwriter","xmlrpc::xmlwriter::abstract","xmlrpc::xmlwriter::simple","xmlrpc::xmlwriter::xmlparser","xmp","xmp::stringinputmethod","yaml","yaml::dbm","yaml::store","zerodivisionerror","zlib","zlib::buferror","zlib::dataerror","zlib::deflate","zlib::error","zlib::gzipfile","zlib::gzipfile::crcerror","zlib::gzipfile::error","zlib::gzipfile::lengtherror","zlib::gzipfile::nofooter","zlib::gzipreader","zlib::gzipwriter","zlib::inflate","zlib::memerror","zlib::needdict","zlib::streamend","zlib::streamerror","zlib::versionerror","zlib::zstream","fatal","unknown","unknown","basicobject#!()","delegator#!()","basicobject#!=()","delegator#!=()","object#!~()","bigdecimal#%()","bignum#%()","fixnum#%()","float#%()","numeric#%()","string_or_failed_format::%()","string#%()","tkvariable#%()","tkvariable#%()","array#&()","bignum#&()","falseclass#&()","fixnum#&()","ipaddr#&()","nilclass#&()","process::status#&()","set#&()","tkvariable#&()","tkvariable#&()","tkctagaccess#&()","trueclass#&()","array#*()","benchmark::tms#*()","bigdecimal#*()","bignum#*()","complex#*()","fixnum#*()","float#*()","matrix#*()","rake::filelist#*()","rational#*()","string#*()","tk::blt::vector#*()","tkvariable#*()","tkvariable#*()","vector#*()","bigdecimal#**()","bignum#**()","complex#**()","fixnum#**()","float#**()","matrix#**()","rational#**()","tkvariable#**()","tkvariable#**()","array#+()","benchmark::tms#+()","bigdecimal#+()","bignum#+()","complex#+()","dl::cptr#+()","dl::cptr#+()","date#+()","fixnum#+()","float#+()","matrix#+()","pathname#+()","rational#+()","set#+()","shell::filter#+()","string#+()","time#+()","tk::blt::vector#+()","tk::optionobj#+()","tk::text::indexmodmethods#+()","tkvariable#+()","tkvariable#+()","uri::generic#+()","vector#+()","bigdecimal#+@()","dl::cptr#+@()","dl::cptr#+@()","numeric#+@()","tkvariable#+@()","tkvariable#+@()","array#-()","benchmark::tms#-()","bigdecimal#-()","bignum#-()","complex#-()","dl::cptr#-()","dl::cptr#-()","date#-()","fixnum#-()","float#-()","matrix#-()","rational#-()","set#-()","time#-()","tk::blt::vector#-()","tk::text::indexmodmethods#-()","tkvariable#-()","tkvariable#-()","uri::generic#-()","vector#-()","bigdecimal#-@()","bignum#-@()","complex#-@()","dl::cptr#-@()","dl::cptr#-@()","fixnum#-@()","float#-@()","numeric#-@()","tkvariable#-@()","tkvariable#-@()","tkctagaccess#-@()","benchmark::tms#/()","bigdecimal#/()","bignum#/()","complex#/()","fixnum#/()","float#/()","matrix#/()","openssl::bn#/()","rational#/()","string#/()","tk::blt::vector#/()","tkvariable#/()","tkvariable#/()","vector#/()","bigdecimal#<()","bignum#<()","comparable#<()","fixnum#<()","float#<()","module#<()","shell::filter#<()","array#<<()","bignum#<<()","csv#<<()","csv::row#<<()","csv::table#<<()","curses::window#<<()","date#<<()","digest::hmac#<<()","digest::instance#<<()","digest::sha2#<<()","fixnum#<<()","io#<<()","io::writable#<<()","ipaddr#<<()","logger#<<()","multitkip::command_queue#<<()","net::internetmessageio::writeadapter#<<()","openssl::buffering#<<()","openssl::digest#<<()","openssl::hmac#<<()","psych::visitors::yamltree#<<()","queue#<<()","rdoc::markup::document#<<()","rdoc::markup::list#<<()","rdoc::markup::listitem#<<()","rdoc::markup::raw#<<()","rexml::document#<<()","rexml::light::node#<<()","rexml::output#<<()","rexml::parent#<<()","rexml::text#<<()","rexml::validation::choice#<<()","rexml::validation::state#<<()","rss::xml::element#<<()","set#<<()","sizedqueue#<<()","string#<<()","stringscanner#<<()","tk::rbwidget::alignbox#<<()","tktextio#<<()","webrick::basiclog#<<()","webrick::cgi::socket#<<()","webrick::httputils::formdata#<<()","zlib::deflate#<<()","zlib::gzipwriter#<<()","zlib::inflate#<<()","bigdecimal#<=()","bignum#<=()","comparable#<=()","fixnum#<=()","float#<=()","module#<=()","array#<=>()","bigdecimal#<=>()","bignum#<=>()","dl::cptr#<=>()","dl::cptr#<=>()","date#<=>()","file::stat#<=>()","fixnum#<=>()","float#<=>()","gem::dependency#<=>()","ipaddr#<=>()","irb::notifier::levelednotifier#<=>()","module#<=>()","numeric#<=>()","object#<=>()","object::syck::badalias#<=>()","openssl::x509::name#<=>()","pathname#<=>()","rdoc::alias#<=>()","rdoc::constant#<=>()","rdoc::context#<=>()","rdoc::include#<=>()","rdoc::methodattr#<=>()","rexml::comment#<=>()","rexml::text#<=>()","rake::earlytime#<=>()","rational#<=>()","string#<=>()","symbol#<=>()","time#<=>()","tkvariable#<=>()","tkvariable#<=>()","version#<=>()","webrick::httpversion#<=>()","action#==()","array#==()","basicobject#==()","bigdecimal#==()","bignum#==()","branch#==()","csv::row#==()","csv::table#==()","comparable#==()","complex#==()","dl::cptr#==()","dl::cptr#==()","drb::drbobject#==()","drb::drbobject#==()","delegator#==()","digest::instance#==()","encoding::converter#==()","exception#==()","fixnum#==()","float#==()","gem::platform#==()","hash#==()","ipaddr#==()","jisx0208::char#==()","matchdata#==()","matrix#==()","method#==()","module#==()","openssl::bn#==()","openssl::pkey::ec::group#==()","openssl::pkey::ec::point#==()","openssl::ssl::session#==()","openstruct#==()","pathname#==()","proc#==()","process::status#==()","rdoc::attr#==()","rdoc::constant#==()","rdoc::context::section#==()","rdoc::markup::special#==()","rdoc::toplevel#==()","rexml::attribute#==()","rexml::comment#==()","rexml::instruction#==()","rexml::validation::event#==()","rexml::xmldecl#==()","rss::xml::element#==()","rake::filelist#==()","random#==()","range#==()","rational#==()","regexp#==()","set#==()","string#==()","struct#==()","symbol#==()","tkvariable#==()","tkvariable#==()","uri::generic#==()","unboundmethod#==()","vector#==()","win32::sspi::sspiresult#==()","xmlrpc::datetime#==()","bigdecimal#===()","bignum#===()","date#===()","fixnum#===()","float#===()","gem::platform#===()","gem::requirement#===()","gem::requirement#===()","ipaddr#===()","module#===()","object#===()","openssl::bn#===()","pathname#===()","proc#===()","range#===()","regexp#===()","rinda::drbobjecttemplate#===()","rinda::template#===()","rinda::templateentry#===()","string#===()","symbol#===()","systemcallerror::===()","tkvariable#===()","tkvariable#===()","gem::dependency#=~()","gem::platform#=~()","gem::requirement#=~()","gem::requirement#=~()","object#=~()","rexml::light::node#=~()","regexp#=~()","string#=~()","symbol#=~()","tkvariable#=~()","tkvariable#=~()","bigdecimal#>()","bignum#>()","comparable#>()","fixnum#>()","float#>()","module#>()","shell::filter#>()","bigdecimal#>=()","bignum#>=()","comparable#>=()","fixnum#>=()","float#>=()","module#>=()","bignum#>>()","date#>>()","fixnum#>>()","ipaddr#>>()","process::status#>>()","rake::pseudostatus#>>()","shell::filter#>>()","net::pop3::apop()","net::pop3::apop()","net::pop3::apop()","net::pop3::apop()","kernel#array()","kernel#bigdecimal()","tk::binarystring()","object#csv()","win32api#call()","win32::registry::api#closekey()","kernel#complex()","win32::registry::api#createkey()","irb::currentcontext()","thread::debug()","thread::debug=()","object#delegateclass()","win32::registry::api#deletekey()","win32::registry::api#deletevalue()","object#digest()","bigmath#e()","curses::escdelay()","curses::escdelay=()","tk::encodedstring()","win32::registry::api#enumkey()","win32::registry::api#enumvalue()","e2mm::fail()","e2mm::fail()","exception2messagemapper#fail()","exception2messagemapper#fail()","sync_m::err::fail()","sync_m::err::lockmodefailer::fail()","sync_m::err::unknownlocker::fail()","kernel#float()","win32::registry::api#flushkey()","tk#grid()","matrix::i()","irb::inspector()","kernel#integer()","microsoft_xmldso_1_0#javadsocompatible()","microsoft_xmldso_1_0#javadsocompatible=()","irb::jobmanager()","syslog::log_mask()","syslog::constants::log_mask()","syslog::log_upto()","syslog::constants::log_upto()","object#mainloop()","gem::server#marshal()","win32::registry::api#openkey()","bigmath#pi()","tk#pack()","kernel#pathname()","rss::rss::channel::item::guid#permalink?()","tk#place()","net::http::proxy()","net::http::proxy()","win32::registry::api#queryinfokey()","win32::registry::api#queryvalue()","e2mm::raise()","e2mm::raise()","exception2messagemapper#raise()","exception2messagemapper#raise()","kernel#rational()","win32::registry::api#setvalue()","irb::locale#string()","kernel#string()","curses::tabsize()","curses::tabsize=()","object#tkgrid()","object#tkpack()","object#tkplace()","rubytoken#token()","tk::utf8_string()","object#validencoding()","tk::bwidget::xlfdfont()","microsoft_xmldso_1_0#xmldocument()","microsoft_xmldso_1_0#xmldocument=()","array#[]()","array::[]()","bignum#[]()","cgi::queryextension#[]()","cgi::session#[]()","csv::row#[]()","csv::table#[]()","continuation#[]()","dbm#[]()","dl::cfunc#[]()","dl::cptr#[]()","dl::cptr::[]()","dl::cptr#[]()","dl::cptr::[]()","dl::cstructentity#[]()","dl::compositehandler#[]()","dl::handle#[]()","dl::handle::[]()","dl::importer#[]()","dl::packer::[]()","dl::stack::[]()","drb::drbsslsocket::sslconfig#[]()","drb::gw#[]()","dir::[]()","env::[]()","fixnum#[]()","front#[]()","gdbm#[]()","gem::commandmanager#[]()","gem::configfile#[]()","hash#[]()","hash::[]()","httpserver::table#[]()","irb::history#[]()","json#[]()","json::ext::generator::state#[]()","matchdata#[]()","matrix#[]()","matrix::[]()","method#[]()","nqxml::node#[]()","net::httpheader#[]()","oleproperty#[]()","openssl::config#[]()","pstore#[]()","prime::trialdivision#[]()","proc#[]()","psych::coder#[]()","rdoc::markup::attrspan#[]()","rexml::attlistdecl#[]()","rexml::light::node#[]()","rexml::parent#[]()","rexml::parsers::pullevent#[]()","rss::maker#[]()","rss::xml::element#[]()","rake::namespace#[]()","rake::task#[]()","rake::taskarguments#[]()","rake::taskmanager#[]()","rinda::tuple#[]()","rinda::tupleentry#[]()","rubyvm::instructionsloader#[]()","sdbm#[]()","set::[]()","shell::commandprocessor#[]()","string#[]()","stringscanner#[]()","struct#[]()","syck::basenode#[]()","syck::omap#[]()","syck::omap::[]()","syck::pairs#[]()","syck::pairs::[]()","syck::stream#[]()","symbol#[]()","thread#[]()","tk::blt::vector#[]()","tk::bwidget::listbox::item#[]()","tk::bwidget::tree::node#[]()","tk::entry#[]()","tk::optionobj#[]()","tk::tcllib::widget::toolbaritem#[]()","tkfont#[]()","tkfont#[]()","tkfont::chooser#[]()","tkfont::descendantfont#[]()","tkmenubar#[]()","tkmsgcatalog::[]()","tkmsgcatalog#[]()","tkmsgcatalog#[]()","tkmsgcatalog::[]()","tktextimage#[]()","tktextimage#[]()","tktexttag#[]()","tktexttag#[]()","tktextwindow#[]()","tktextwindow#[]()","tkvariable#[]()","tkvariable#[]()","vector#[]()","vector::[]()","webrick::cgi#[]()","webrick::genericserver#[]()","webrick::httprequest#[]()","webrick::httpresponse#[]()","webrick::httpserver::mounttable#[]()","webrick::httpstatus::[]()","webrick::httputils::formdata#[]()","win32ole#[]()","win32ole_variant#[]()","win32::registry#[]()","yaml::dbm#[]()","array#[]=()","cgi::session#[]=()","csv::row#[]=()","csv::table#[]=()","dbm#[]=()","dl::cptr#[]=()","dl::cptr#[]=()","dl::cstructentity#[]=()","drb::gw#[]=()","env::[]=()","gdbm#[]=()","gem::configfile#[]=()","hash#[]=()","httpserver::table#[]=()","net::httpheader#[]=()","oleproperty#[]=()","openssl::config#[]=()","pstore#[]=()","psych::coder#[]=()","rexml::light::node#[]=()","rexml::parent#[]=()","rexml::xpathparser#[]=()","rss::xml::element#[]=()","sdbm#[]=()","string#[]=()","struct#[]=()","syck::omap#[]=()","syck::pairs#[]=()","thread#[]=()","tk::blt::vector#[]=()","tk::bwidget::listbox::item#[]=()","tk::bwidget::tree::node#[]=()","tk::entry#[]=()","tk::optionobj#[]=()","tk::tcllib::widget::toolbaritem#[]=()","tkfont#[]=()","tkfont#[]=()","tkfont::chooser#[]=()","tkfont::descendantfont#[]=()","tktextimage#[]=()","tktextimage#[]=()","tktexttag#[]=()","tktexttag#[]=()","tktextwindow#[]=()","tktextwindow#[]=()","tkvariable#[]=()","tkvariable#[]=()","webrick::httpresponse#[]=()","webrick::httpserver::mounttable#[]=()","win32ole#[]=()","win32ole_variant#[]=()","win32::registry#[]=()","yaml::dbm#[]=()","bignum#^()","falseclass#^()","fixnum#^()","nilclass#^()","set#^()","tkctagaccess#^()","trueclass#^()","multitkip::_default_master()","multitkip::_default_master()","multitkip::_default_master()","multitkip::_default_master()","multitkip::_ip_table()","multitkip::_ip_table()","multitkip::_ip_table()","multitkip::_ip_table()","knights_tour#_n()","rss::rss::channel::item::guid#_permalink?()","multitkip::_tk_table_list()","multitkip::_tk_table_list()","multitkip::_tk_table_list()","multitkip::_tk_table_list()","tk::canvas#__blt_eps_item_boolval_optkeys()","tk::canvas#__blt_eps_item_strval_optkeys()","tkitemconfigmethod::__ignore_unknown_configure_option__()","tk::tile::__import_tile_widgets__!()","tk::tile::__import_tile_widgets__!()","tk::tile::__import_tile_widgets__!()","tk::blt::tabset#__boolval_optkeys()","kernel#__callee__()","tk::bwidget::dynamichelp::__cget_cmd()","tk::bwidget::widget::__cget_cmd()","tk::tcllib::tkpiechart::configmethod#__cget_cmd()","tkitemconfigmethod#__check_available_itemconfigure_options()","object#__check_proc_string__()","tk::bwidget::dynamichelp::__config_cmd()","tk::bwidget::widget::__config_cmd()","tkitemconfigoptkeys#__conv_item_keyonly_opts()","tk::itemvalidateconfigure#__conv_item_vcmd_on_hash_kv()","tk::validateconfigure#__conv_vcmd_on_hash_kv()","multitkip#__create_safe_slave_obj()","multitkip#__create_safe_slave_obj()","multitkip#__create_safe_slave_obj()","multitkip#__create_safe_slave_obj()","multitkip#__create_trusted_slave_obj()","multitkip#__create_trusted_slave_obj()","multitkip#__create_trusted_slave_obj()","multitkip#__create_trusted_slave_obj()","tk#__create_widget_set__()","tk::blt::plotcomponent#__current_itemconfiginfo()","tk::itemvalidateconfigure::__def_validcmd()","tk::validateconfigure::__def_validcmd()","tk::tile::__define_loadimages_proc_for_compatibility__!()","tk::tile::__define_loadimages_proc_for_compatibility__!()","tk::tile::__define_loadimages_proc_for_compatibility__!()","tk::tile::style#__define_wrapper_proc_for_compatibility__!()","tk::blt::plotcomponent#__destroy_hook__()","tk::blt::tabset#__destroy_hook__()","tk::blt::treeview#__destroy_hook__()","tk::canvas#__destroy_hook__()","tk::itk::archetype#__destroy_hook__()","tk::tcllib::plotchart::barchart#__destroy_hook__()","tk::tcllib::plotchart::boxplot#__destroy_hook__()","tk::tcllib::plotchart::polarplot#__destroy_hook__()","tk::tcllib::plotchart::polarplot#__destroy_hook__()","tk::tcllib::plotchart::radialchart#__destroy_hook__()","tk::tcllib::plotchart::rightaxis#__destroy_hook__()","tk::tcllib::plotchart::xyplot#__destroy_hook__()","tk::tcllib::widget::toolbar#__destroy_hook__()","tk::tktable#__destroy_hook__()","tk#__disable_toplevel_control__()","drb::drbobject#__drbref()","drb::drbobject#__drbref()","drb::drbobject#__drburi()","drb::drbobject#__drburi()","tk::encodedstring#__encoding()","multitkip#__eval()","multitkip#__eval()","multitkip#__eval()","multitkip#__eval()","remotetkip#__eval()","tcltkip#__eval()","tcltkip#__eval__()","irb::workspace#__evaluate__()","irb::context#__exit__()","tk::bwidget::selectfont::dialog#__font_optkeys()","tk::itemvalidateconfigure#__get_item_validate_key2class()","tk::validateconfigure#__get_validate_key2class()","multitkip::__getip()","multitkip::__getip()","multitkip::__getip()","multitkip::__getip()","delegator#__getobj__()","simpledelegator#__getobj__()","basicobject#__id__()","tk#__import_toplevel_aliases__()","multitkip::__init_ip_env__()","multitkip::__init_ip_env__()","multitkip::__init_ip_env__()","multitkip::__init_ip_env__()","tcltkip#__initialize__()","irb::context#__inspect__()","tk::encodedstring#__instance_eval()","tk::encodedstring#__instance_variable_get()","tk::encodedstring#__instance_variable_set()","tk::encodedstring#__instance_variables()","multitkip#__invoke()","multitkip#__invoke()","multitkip#__invoke()","multitkip#__invoke()","remotetkip#__invoke()","tcltkip#__invoke()","tcltkip#__invoke__()","tk::blt::treeview#__item_validation_class_list()","tk::itemvalidateconfigure#__item_validation_class_list()","tk::itemvalidateconfigure#__item_validcmd_call()","tk::blt::plotcomponent#__itemcget()","tk::tile::treeviewconfig#__itemcget()","tk::blt::plotcomponent#__itemcget_strict()","tk::tile::treeviewconfig#__itemcget_strict()","tk::blt::plotcomponent#__itemcget_tkstring()","tk::tile::treeviewconfig#__itemcget_tkstring()","tk::blt::plotcomponent#__itemconfiginfo()","tk::tile::treeviewconfig#__itemconfiginfo_core()","tk::tile::treeviewconfig#__itemconfigure()","kernel#__method__()","object#__method_missing_alias_for_multitkip__()","tk::iwidgets::menubar#__methodcall_optkeys()","multitkip::__new()","multitkip::__new()","multitkip::__new()","multitkip::__new()","tcltkip::__new__()","tk::bwidget::dynamichelp::__pathname()","tk::bwidget::widget::__pathname()","multitkip::__pseudo_toplevel()","multitkip#__pseudo_toplevel()","multitkip#__pseudo_toplevel()","multitkip#__pseudo_toplevel()","multitkip::__pseudo_toplevel()","multitkip::__pseudo_toplevel()","multitkip#__pseudo_toplevel()","multitkip::__pseudo_toplevel()","multitkip#__pseudo_toplevel=()","multitkip::__pseudo_toplevel=()","multitkip#__pseudo_toplevel=()","multitkip#__pseudo_toplevel=()","multitkip::__pseudo_toplevel=()","multitkip#__pseudo_toplevel=()","multitkip::__pseudo_toplevel=()","multitkip::__pseudo_toplevel=()","multitkip#__pseudo_toplevel_evaluable=()","multitkip#__pseudo_toplevel_evaluable=()","multitkip#__pseudo_toplevel_evaluable=()","multitkip::__pseudo_toplevel_evaluable=()","multitkip::__pseudo_toplevel_evaluable=()","multitkip::__pseudo_toplevel_evaluable=()","multitkip#__pseudo_toplevel_evaluable=()","multitkip::__pseudo_toplevel_evaluable=()","multitkip::__pseudo_toplevel_evaluable?()","multitkip#__pseudo_toplevel_evaluable?()","multitkip#__pseudo_toplevel_evaluable?()","multitkip::__pseudo_toplevel_evaluable?()","multitkip#__pseudo_toplevel_evaluable?()","multitkip::__pseudo_toplevel_evaluable?()","multitkip::__pseudo_toplevel_evaluable?()","multitkip#__pseudo_toplevel_evaluable?()","tk#__regist_toplevel_aliases__()","tk#__remove_toplevel_aliases__()","tk#__reset_toplevel_owner__()","basicobject#__send__()","tkitemconfigmethod::__set_ignore_unknown_configure_option__!()","tk#__set_loaded_toplevel_aliases__()","tk#__set_toplevel_aliases__()","delegator#__setobj__()","simpledelegator#__setobj__()","tk::tile::treeviewconfig#__tile_specific_item_optkeys()","irb::context#__to_s__()","tk#__toplevel_alias_setup_proc__()","tk::blt::dragdrop::__validation_class_list()","tk::blt::treeview#__validation_class_list()","tk::iwidgets::calendar#__validation_class_list()","tk::iwidgets::entryfield#__validation_class_list()","tk::iwidgets::hierarchy#__validation_class_list()","tk::iwidgets::spinner#__validation_class_list()","tk::spinbox#__validation_class_list()","tk::spinbox#__validation_class_list()","tk::tile::tspinbox#__validation_class_list()","tk::tile::tspinbox#__validation_class_list()","tk::tktable#__validation_class_list()","tk::validateconfigure#__validation_class_list()","tkvalidation#__validation_class_list()","tk::validateconfigure#__validcmd_call()","multitkip#_add_new_tables()","multitkip#_add_new_tables()","multitkip#_add_new_tables()","multitkip#_add_new_tables()","multitkip#_add_tk_procs()","multitkip#_add_tk_procs()","multitkip#_add_tk_procs()","multitkip#_add_tk_procs()","tkcomm::_at()","demobasic::_barmcmd()","demobasic::_brelief()","demobasic::_bside()","demobasic::_bstate()","demobasic::_butcmd()","demobasic::_button()","tkcomm::_callback_entry?()","tkcomm::_callback_entry_class?()","tcltkip#_cancel_eval()","tcltkip#_cancel_eval_unwind()","tk::blt::dragdrop::packagecommand::_config_keys()","tk::blt::dragdrop::sitecommand::_config_keys()","tk::blt::treeview::findexecflagvalue::_config_keys()","tk::blt::treeview::openclosecommand::_config_keys()","tk::iwidgets::calendar::calendarcommand::_config_keys()","tk::iwidgets::entryfield::entryfieldvalidate::_config_keys()","tk::iwidgets::hierarchy::iconcommand::_config_keys()","tk::iwidgets::hierarchy::indicatorcommand::_config_keys()","tk::iwidgets::hierarchy::querycommand::_config_keys()","tk::iwidgets::spinner::entryfieldvalidate::_config_keys()","tk::spinbox::spincommand::_config_keys()","tk::tile::tspinbox::spincommand::_config_keys()","tk::tktable::browsecommand::_config_keys()","tk::tktable::cellcommand::_config_keys()","tk::tktable::selectioncommand::_config_keys()","tk::tktable::validatecommand::_config_keys()","tk::winico::winico_callback::_config_keys()","tkvalidatecommand::_config_keys()","tkutil::_conv_args()","tkutil#_conv_args()","multitkip#_conv_listelement()","multitkip#_conv_listelement()","multitkip#_conv_listelement()","multitkip#_conv_listelement()","remotetkip#_conv_listelement()","tcltkip#_conv_listelement()","tcltklib#_conv_listelement()","tcltklib::_conv_listelement()","bwidget_demo#_create()","multitkip#_create_console()","multitkip#_create_console()","multitkip#_create_console()","multitkip#_create_console()","remotetkip#_create_console()","tcltkip#_create_console()","bwidget_demo#_create_intro()","clock#_create_marks()","multitkip#_create_slave_object()","multitkip#_create_slave_object()","multitkip#_create_slave_object()","multitkip#_create_slave_object()","tkcomm::_curr_cmd_id()","multitkip#_default_delete_hook()","multitkip#_default_delete_hook()","multitkip#_default_delete_hook()","multitkip#_default_delete_hook()","tkutil::callbacksubst::_define_attribute_aliases()","tk::tcllib::tkpiechart::pie#_delete_slice()","multitkip#_destroy_slaves_of_slaveip()","multitkip#_destroy_slaves_of_slaveip()","multitkip#_destroy_slaves_of_slaveip()","multitkip#_destroy_slaves_of_slaveip()","bigdecimal#_dump()","drb::drbarray#_dump()","drb::drbobject#_dump()","drb::drbobject#_dump()","gem::specification#_dump()","singleton#_dump()","time#_dump()","win32::registry#_dump()","tkvariable#_element_value()","tkvariable#_element_value()","demobasic::_entry()","tk::tcllib::tkpiechart::pie#_entry_slice()","multitkip#_eval()","multitkip#_eval()","multitkip#_eval()","multitkip#_eval()","remotetkip#_eval()","tcltkip#_eval()","multitkip#_eval_with_enc()","multitkip#_eval_with_enc()","multitkip#_eval_with_enc()","multitkip#_eval_with_enc()","remotetkip#_eval_with_enc()","multitkip#_eval_without_enc()","multitkip#_eval_without_enc()","multitkip#_eval_without_enc()","multitkip#_eval_without_enc()","remotetkip#_eval_without_enc()","tcltkip#_eval_without_enc()","knights_tour#_exit()","tk::blt::treeview#_find_exec_flag_value()","multitkip#_fromutf8()","multitkip#_fromutf8()","multitkip#_fromutf8()","multitkip#_fromutf8()","remotetkip#_fromutf8()","tcltkip#_fromutf8()","tcltklib::_fromutf8()","tkcomm::_fromutf8()","tkutil#_fromutf8()","tkcomm::_genobj_for_tkwidget()","tkutil::callbacksubst::_get_all_subst_keys()","tkutil::_get_eval_enc_str()","tkutil#_get_eval_enc_str()","tkutil::_get_eval_string()","tkutil#_get_eval_string()","tk::bwidget::listbox::event_for_items::_get_extra_args_tbl()","tk::bwidget::notebook::event_for_tabs::_get_extra_args_tbl()","tk::bwidget::tree::event_for_items::_get_extra_args_tbl()","tkutil::callbacksubst::_get_extra_args_tbl()","multitkip#_get_global_var()","multitkip#_get_global_var()","multitkip#_get_global_var()","multitkip#_get_global_var()","remotetkip#_get_global_var()","tcltkip#_get_global_var()","multitkip#_get_global_var2()","multitkip#_get_global_var2()","multitkip#_get_global_var2()","multitkip#_get_global_var2()","remotetkip#_get_global_var2()","tcltkip#_get_global_var2()","tkutil::callbacksubst::_get_subst_key()","multitkip#_get_variable()","multitkip#_get_variable()","multitkip#_get_variable()","multitkip#_get_variable()","remotetkip#_get_variable()","tcltkip#_get_variable()","multitkip#_get_variable2()","multitkip#_get_variable2()","multitkip#_get_variable2()","multitkip#_get_variable2()","remotetkip#_get_variable2()","tcltkip#_get_variable2()","win32ole#_getproperty()","date::_httpdate()","objectspace::_id2ref()","tcltkip#_immediate_invoke()","multitkip#_init_ip_env()","multitkip#_init_ip_env()","multitkip#_init_ip_env()","multitkip#_init_ip_env()","multitkip#_init_ip_internal()","multitkip#_init_ip_internal()","multitkip#_init_ip_internal()","multitkip#_init_ip_internal()","tkvalidatecommand#_initialize_for_cb_class()","multitkip#_invoke()","multitkip#_invoke()","multitkip#_invoke()","multitkip#_invoke()","remotetkip#_invoke()","tcltkip#_invoke()","win32ole#_invoke()","multitkip#_invoke_with_enc()","multitkip#_invoke_with_enc()","multitkip#_invoke_with_enc()","multitkip#_invoke_with_enc()","remotetkip#_invoke_with_enc()","multitkip#_invoke_without_enc()","multitkip#_invoke_without_enc()","multitkip#_invoke_without_enc()","multitkip#_invoke_without_enc()","remotetkip#_invoke_without_enc()","tcltkip#_invoke_without_enc()","multitkip::_ip_id_()","multitkip::_ip_id_()","multitkip#_ip_id_()","multitkip::_ip_id_()","multitkip#_ip_id_()","multitkip::_ip_id_()","multitkip#_ip_id_()","multitkip#_ip_id_()","remotetkip#_ip_id_()","tcltkip#_ip_id_()","multitkip#_is_master_of?()","multitkip#_is_master_of?()","multitkip#_is_master_of?()","multitkip#_is_master_of?()","remotetkip#_is_master_of?()","date::_iso8601()","date::_jisx0301()","demobasic::_label()","bigdecimal::_load()","drb::drbarray::_load()","drb::drbobject::_load()","drb::drbobject::_load()","gem::specification::_load()","singleton::_load()","time::_load()","demomanager::_mainframe()","multitkip#_make_menu_embeddable()","multitkip#_make_menu_embeddable()","multitkip#_make_menu_embeddable()","multitkip#_make_menu_embeddable()","tcltkip#_make_menu_embeddable()","multitkip#_merge_tklist()","multitkip#_merge_tklist()","multitkip#_merge_tklist()","multitkip#_merge_tklist()","remotetkip#_merge_tklist()","tcltkip#_merge_tklist()","tcltklib#_merge_tklist()","tcltklib::_merge_tklist()","demodialog::_msgdlg()","tkcomm::_next_cmd_id()","demomanager::_notebook()","demomanager::_paned()","date::_parse()","tk::iwidgets::menubar#_parse_menu_spec()","multitkip#_proc_on_current_safelevel()","multitkip::_proc_on_current_safelevel()","multitkip::_proc_on_current_safelevel()","multitkip::_proc_on_current_safelevel()","multitkip#_proc_on_current_safelevel()","multitkip#_proc_on_current_safelevel()","multitkip#_proc_on_current_safelevel()","multitkip::_proc_on_current_safelevel()","multitkip#_proc_on_safelevel()","multitkip::_proc_on_safelevel()","multitkip::_proc_on_safelevel()","multitkip::_proc_on_safelevel()","multitkip#_proc_on_safelevel()","multitkip#_proc_on_safelevel()","multitkip::_proc_on_safelevel()","multitkip#_proc_on_safelevel()","object#_puts()","multitkip#_receiver_mainloop()","multitkip#_receiver_mainloop()","multitkip#_receiver_mainloop()","multitkip#_receiver_mainloop()","multitkip#_remove_tk_procs()","multitkip#_remove_tk_procs()","multitkip#_remove_tk_procs()","multitkip#_remove_tk_procs()","multitkip#_return_value()","multitkip#_return_value()","multitkip#_return_value()","multitkip#_return_value()","remotetkip#_return_value()","tcltkip#_return_value()","date::_rfc2822()","date::_rfc3339()","date::_rfc822()","tkgoldberg_demo#_round_poly2()","multitkip#_set_global_var()","multitkip#_set_global_var()","multitkip#_set_global_var()","multitkip#_set_global_var()","remotetkip#_set_global_var()","tcltkip#_set_global_var()","multitkip#_set_global_var2()","multitkip#_set_global_var2()","multitkip#_set_global_var2()","multitkip#_set_global_var2()","remotetkip#_set_global_var2()","tcltkip#_set_global_var2()","irb::context#_set_last_value()","multitkip#_set_variable()","multitkip#_set_variable()","multitkip#_set_variable()","multitkip#_set_variable()","remotetkip#_set_variable()","tcltkip#_set_variable()","multitkip#_set_variable2()","multitkip#_set_variable2()","multitkip#_set_variable2()","multitkip#_set_variable2()","remotetkip#_set_variable2()","tcltkip#_set_variable2()","win32ole#_setproperty()","tkutil::callbacksubst::_setup_subst_table()","demodialog::_show_color()","demodialog::_show_fontdlg()","demodialog::_show_msgdlg()","demodialog::_show_passdlg()","demodialog::_show_progdlg()","demomanager::_show_progress()","demodialog::_show_tmpldlg()","multitkip#_split_tklist()","multitkip#_split_tklist()","multitkip#_split_tklist()","multitkip#_split_tklist()","remotetkip#_split_tklist()","tcltkip#_split_tklist()","tcltklib::_split_tklist()","demodialog::_stddlg()","knights_tour#_stop()","date::_strptime()","datetime::_strptime()","tcltklib::_subst_tcl_backslash()","tcltklib::_subst_utf_backslash()","tkutil::callbacksubst::_sym2subst()","tkutil::_symbolkey2str()","tkutil#_symbolkey2str()","multitkip#_thread_tkwait()","multitkip#_thread_tkwait()","multitkip#_thread_tkwait()","multitkip#_thread_tkwait()","remotetkip#_thread_tkwait()","tcltkip#_thread_tkwait()","multitkip#_thread_vwait()","multitkip#_thread_vwait()","multitkip#_thread_vwait()","multitkip#_thread_vwait()","remotetkip#_thread_vwait()","tcltkip#_thread_vwait()","multitkip#_tk_cmd_tbl()","multitkip#_tk_cmd_tbl()","multitkip#_tk_cmd_tbl()","multitkip#_tk_cmd_tbl()","multitkip#_tk_table_list()","multitkip#_tk_table_list()","multitkip#_tk_table_list()","multitkip#_tk_table_list()","multitkip#_tk_windows()","multitkip#_tk_windows()","multitkip#_tk_windows()","multitkip#_tk_windows()","demodialog::_tmpldlg()","multitkip#_toutf8()","multitkip#_toutf8()","multitkip#_toutf8()","multitkip#_toutf8()","remotetkip#_toutf8()","tcltkip#_toutf8()","tcltklib::_toutf8()","tkcomm::_toutf8()","tkutil#_toutf8()","multitkip#_unset_global_var()","multitkip#_unset_global_var()","multitkip#_unset_global_var()","multitkip#_unset_global_var()","remotetkip#_unset_global_var()","tcltkip#_unset_global_var()","multitkip#_unset_global_var2()","multitkip#_unset_global_var2()","multitkip#_unset_global_var2()","multitkip#_unset_global_var2()","remotetkip#_unset_global_var2()","tcltkip#_unset_global_var2()","multitkip#_unset_variable()","multitkip#_unset_variable()","multitkip#_unset_variable()","multitkip#_unset_variable()","remotetkip#_unset_variable()","tcltkip#_unset_variable()","multitkip#_unset_variable2()","multitkip#_unset_variable2()","multitkip#_unset_variable2()","multitkip#_unset_variable2()","remotetkip#_unset_variable2()","tcltkip#_unset_variable2()","demodialog::_update_progdlg()","demomanager::_update_progress()","tkvariable#_value()","tkvariable#_value()","date::_xmlschema()","kernel#`()","cgi::htmlextension#a()","abbrev::abbrev()","array#abbrev()","gem::indexer#abbreviate()","rexml::parsers::xpathparser#abbreviate()","ixmldomdocument#abort()","ixmlhttprequest#abort()","kernel#abort()","microsoft_freethreadedxmldom_1_0#abort()","microsoft_xmldom_1_0#abort()","microsoft_xmlhttp_1#abort()","multitkip#abort()","multitkip#abort()","multitkip#abort()","multitkip#abort()","net::ftp#abort()","optionparser#abort()","pstore#abort()","process::abort()","thread::abort_on_exception()","thread#abort_on_exception()","thread::abort_on_exception=()","thread#abort_on_exception=()","tkgoldberg_demo#about()","tkctag#above()","bigdecimal#abs()","bignum#abs()","complex#abs()","fixnum#abs()","float#abs()","numeric#abs()","complex#abs2()","numeric#abs2()","uri::generic#absolute()","pathname#absolute?()","resolv::dns::name#absolute?()","uri::generic#absolute?()","ixtlruntime#absolutechildnumber()","file::absolute_path()","drb::drbsslsocket#accept()","drb::drbsslsocket::sslconfig#accept()","drb::drbtcpsocket#accept()","drb::drbunixsocket#accept()","drb::http0::server#accept()","openssl::ssl::sslsocket#accept()","optionparser::accept()","optionparser#accept()","optionparser::list#accept()","psych::visitors::jsontree#accept()","psych::visitors::toruby#accept()","psych::visitors::visitor#accept()","psych::visitors::yamltree#accept()","rdoc::markup::blankline#accept()","rdoc::markup::document#accept()","rdoc::markup::heading#accept()","rdoc::markup::indentedparagraph#accept()","rdoc::markup::list#accept()","rdoc::markup::listitem#accept()","rdoc::markup::paragraph#accept()","rdoc::markup::raw#accept()","rdoc::markup::rule#accept()","rdoc::markup::verbatim#accept()","socket#accept()","tcpserver#accept()","unixserver#accept()","rdoc::markup::tohtml#accept_blank_line()","rdoc::markup::tordoc#accept_blank_line()","rdoc::markup::tottonly#accept_blank_line()","cgi::accept_charset()","cgi::accept_charset=()","rdoc::markup::formatter#accept_document()","rdoc::markup::tobs#accept_heading()","rdoc::markup::tohtml#accept_heading()","rdoc::markup::tordoc#accept_heading()","rdoc::markup::tottonly#accept_heading()","rdoc::markup::tordoc#accept_indented_paragraph()","rdoc::markup::tohtml#accept_list_end()","rdoc::markup::tordoc#accept_list_end()","rdoc::markup::tottonly#accept_list_end()","rdoc::markup::toansi#accept_list_item_end()","rdoc::markup::tohtml#accept_list_item_end()","rdoc::markup::tordoc#accept_list_item_end()","rdoc::markup::tottonly#accept_list_item_end()","rdoc::markup::toansi#accept_list_item_start()","rdoc::markup::tohtml#accept_list_item_start()","rdoc::markup::tordoc#accept_list_item_start()","rdoc::markup::tottonly#accept_list_item_start()","rdoc::markup::tohtml#accept_list_start()","rdoc::markup::tordoc#accept_list_start()","rdoc::markup::tottonly#accept_list_start()","socket::accept_loop()","openssl::ssl::sslsocket#accept_nonblock()","socket#accept_nonblock()","tcpserver#accept_nonblock()","unixserver#accept_nonblock()","rdoc::markup::tohtml#accept_paragraph()","rdoc::markup::tordoc#accept_paragraph()","rdoc::markup::tottonly#accept_paragraph()","rdoc::markup::tohtml#accept_raw()","rdoc::markup::tordoc#accept_raw()","rdoc::markup::tottonly#accept_raw()","rdoc::markup::tohtml#accept_rule()","rdoc::markup::tordoc#accept_rule()","rdoc::markup::tottonly#accept_rule()","gem::localremoteoptions#accept_uri_http()","rdoc::markup::tohtml#accept_verbatim()","rdoc::markup::tordoc#accept_verbatim()","rdoc::markup::tottonly#accept_verbatim()","webrick::httpserver#access_log()","net::ftp#acct()","object#ack()","cmath::acos()","math::acos()","cmath::acos!()","cmath::acosh()","math::acosh()","cmath::acosh!()","gem::activate()","gem::specification#activate()","nthtoggle#activate()","shell::processcontroller#activate()","tk::blt::plotcomponent::element#activate()","tk::blt::plotcomponent::legend#activate()","tk::blt::tabset#activate()","tk::blt::watch#activate()","tk::iwidgets::scrolledlistbox#activate()","tk::iwidgets::shell#activate()","tk::listbox#activate()","tk::menu#activate()","tk::optionmenubutton#activate()","tk::optionmenubutton#activate()","tk::scrollbar#activate()","tk::tktable#activate()","tkmultilistframe#activate()","tkmultilistbox#activate()","toggle#activate()","gem::specification#activate_dependencies()","tk::blt::dragdrop::active()","net::http#active?()","net::http#active?()","net::pop3#active?()","net::pop3#active?()","net::pop3#active?()","net::pop3#active?()","shell::builtincommand#active?()","shell::systemcommand#active?()","tkgoldberg_demo#active_gui()","shell::processcontroller#active_job?()","shell::processcontroller#active_jobs()","shell::processcontroller#active_jobs_exist?()","tk::blt::active_legend()","tk::blt::graphcommand#active_legend()","shell::processcontroller#active_process_controllers()","tkfont::actual()","tkfont#actual()","tkfont::actual()","tkfont#actual()","tkfont::actual_displayof()","tkfont::actual_displayof()","tkfont#actual_displayof()","tkfont#actual_displayof()","tkfont::actual_hash()","tkfont#actual_hash()","tkfont#actual_hash()","tkfont::actual_hash()","tkfont::actual_hash_displayof()","tkfont#actual_hash_displayof()","tkfont#actual_hash_displayof()","tkfont::actual_hash_displayof()","acl::acllist#add()","benchmark::tms#add()","bigdecimal#add()","compositepublisher#add()","drb::timeridconv::timerholder2#add()","gem::dependencylist#add()","logger#add()","object::syck::map#add()","object::syck::seq#add()","prettyprint::text#add()","psych::coder#add()","rexml::doctype#add()","rexml::document#add()","rexml::parent#add()","rake::compositepublisher#add()","rake::filelist#add()","rinda::tuplebag::tuplebin#add()","set#add()","syck::mapping#add()","syck::sequence#add()","syck::stream#add()","threadgroup#add()","tk::blt::table#add()","tk::blt::tree::tag#add()","tk::bwidget::buttonbox#add()","tk::bwidget::dialog#add()","tk::bwidget::dynamichelp::add()","tk::bwidget::notebook#add()","tk::bwidget::pagesmanager#add()","tk::bwidget::panedwindow#add()","tk::bwidget::panelframe#add()","tk::bwidget::statusbar#add()","tk::clock::add()","tk::iwidgets::buttonbox#add()","tk::iwidgets::checkbox#add()","tk::iwidgets::dialogshell#add()","tk::iwidgets::menubar#add()","tk::iwidgets::notebook#add()","tk::iwidgets::panedwindow#add()","tk::iwidgets::radiobox#add()","tk::iwidgets::tabnotebook#add()","tk::iwidgets::tabset#add()","tk::iwidgets::toolbar#add()","tk::menu#add()","tk::optionmenubutton#add()","tk::optionmenubutton#add()","tk::panedwindow#add()","tk::panedwindow#add()","tk::rbwidget::alignbox#add()","tk::rbwidget::combobox#add()","tk::tcllib::widget::dialog#add()","tk::tcllib::widget::panelframe#add()","tk::tcllib::widget::panelframe#add()","tk::tcllib::widget::statusbar#add()","tk::tcllib::widget::toolbar#add()","tk::tile::tnotebook#add()","tk::tile::tnotebook#add()","tk::tile::tpaned#add()","tkgrid::add()","tkgrid::add()","tkoptiondb::add()","tkoptiondb::add()","tkoptiondb::add()","tktexttag#add()","tktexttag#add()","tkcgroup#add()","webrick::httpauth::htgroup#add()","benchmark::tms#add!()","set#add?()","rdoc::anymethod#add_alias()","rdoc::attr#add_alias()","rdoc::context#add_alias()","rdoc::methodattr#add_alias()","rdoc::stats#add_alias()","rdoc::toplevel#add_alias()","rdoc::ri::driver#add_also_in()","openssl::x509::request#add_attribute()","rdoc::context#add_attribute()","rdoc::stats#add_attribute()","rexml::element#add_attribute()","rexml::element#add_attributes()","net::imap::add_authenticator()","gem::specification#add_bindir()","syck::add_builtin_type()","syck::add_builtin_type()","gem::localremoteoptions#add_bulk_threshold_option()","tk::menu#add_cascade()","tk::tktable::celltag#add_cell()","openssl::x509::store#add_cert()","openssl::ocsp::request#add_certid()","openssl::pkcs7#add_certificate()","tk::menu#add_checkbutton()","rdoc::context#add_class()","rdoc::ri::driver#add_class()","rdoc::stats#add_class()","rdoc::context#add_class_or_module()","gem::localremoteoptions#add_clear_sources_option()","tk::tktable::celltag#add_col()","tk::menu#add_command()","rdoc::classmodule#add_comment()","gem::command::add_common_option()","rdoc::context#add_constant()","rdoc::stats#add_constant()","rdoc::toplevel#add_constant()","chashdir#add_crl()","openssl::pkcs7#add_crl()","openssl::x509::store#add_crl()","openssl::pkcs7#add_data()","gem::server#add_date()","shell::commandprocessor::add_delegate_command_to_shell()","gem::specification#add_dependency()","rake::task#add_description()","gem::specification#add_development_dependency()","syck::add_domain_type()","syck::add_domain_type()","rexml::document#add_element()","rexml::element#add_element()","openssl::x509::name#add_entry()","rexml::validation::choice#add_event_to_arry()","rexml::validation::state#add_event_to_arry()","openssl::x509::crl#add_extension()","openssl::x509::certificate#add_extension()","openssl::x509::revoked#add_extension()","gem::command#add_extra_args()","net::httpheader#add_field()","gem::package::tarwriter#add_file()","openssl::x509::store#add_file()","rdoc::stats#add_file()","gem::package::tarwriter#add_file_simple()","tracer::add_filter()","gem::dependencyinstaller#add_found_dependencies()","rdoc::ri::driver#add_from()","gem::package::taroutput#add_gem_contents()","rdoc::rdoc::add_generator()","webrick::httpservlet::filehandler::add_handler()","xmlrpc::basicserver#add_handler()","rss::element#add_have_children_element()","tk::tcllib::ctext#add_highlight_class()","tk::tcllib::ctext#add_highlight_class_for_regexp()","tk::tcllib::ctext#add_highlight_class_for_special_chars()","tk::tcllib::ctext#add_highlight_class_with_only_char_start()","rdoc::markup#add_html()","rdoc::markup::attributemanager#add_html()","rake::application#add_import()","rake::application#add_import()","rdoc::context#add_include()","rdoc::toplevel#add_include()","rdoc::ri::driver#add_includes()","tk::bwidget::mainframe#add_indicator()","gem::installupdateoptions#add_install_update_options()","xmlrpc::basicserver#add_introspection()","gem::gemcutterutilities#add_key_option()","rdoc::anymethod#add_line_numbers()","rexml::parsers::baseparser#add_listener()","rexml::parsers::lightparser#add_listener()","rexml::parsers::pullparser#add_listener()","rexml::parsers::sax2parser#add_listener()","rexml::parsers::streamparser#add_listener()","rexml::parsers::treeparser#add_listener()","rexml::parsers::ultralightparser#add_listener()","rake::application#add_loader()","rake::application#add_loader()","gem::localremoteoptions#add_local_remote_options()","rss::maker#add_maker()","tk::bwidget::widget::add_map()","chatserver#add_member()","tk::root#add_menu()","tk::toplevel#add_menu()","tkmenubar#add_menu()","tk::root#add_menubar()","tk::toplevel#add_menubar()","gem::package::taroutput#add_metadata()","rdoc::context#add_method()","rdoc::stats#add_method()","rdoc::toplevel#add_method()","xmlrpc::service::basicinterface#add_method()","rdoc::ri::driver#add_method_list()","rdoc::context#add_module()","rdoc::stats#add_module()","rdoc::context#add_module_alias()","xmlrpc::basicserver#add_multicall()","tk::tcllib::chatwidget#add_name()","rexml::element#add_namespace()","rss::element#add_need_initialize_variable()","rss::maker::base#add_need_initialize_variable()","openssl::ocsp::basicresponse#add_nonce()","openssl::ocsp::request#add_nonce()","observable#add_observer()","rubyvm::instruction#add_optimized()","gem::command#add_option()","rss::maker::base#add_other_element()","gem::commands::ownercommand#add_owners()","openssl::x509::store#add_path()","tkpackage#add_path()","gem::platformmismatch#add_platform()","gem::versionoption#add_platform_option()","rss::element#add_plural_form()","gem::versionoption#add_prerelease_option()","psych::add_private_type()","syck::add_private_type()","syck::add_private_type()","tktimer#add_procs()","tktimer#add_procs()","drb::drbprotocol::add_protocol()","gem::localremoteoptions#add_proxy_option()","tk::menu#add_radiobutton()","openssl::pkcs7#add_recipient()","rdoc::context#add_require()","net::imap#add_response_handler()","openssl::x509::crl#add_revoked()","csv#add_row()","tk::tktable::celltag#add_row()","psych::add_ruby_type()","syck::add_ruby_type()","syck::add_ruby_type()","gem::remotefetcher#add_rubygems_trusted_certs()","gem::specification#add_runtime_dependency()","unicodeout_sampleframe#add_sample()","rubyvm::instruction#add_sc()","shell::processcontroller#add_schedule()","rdoc::context#add_section()","gem::specification#add_self_to_load_path()","tk::menu#add_separator()","gem::package::taroutput#add_signatures()","openssl::pkcs7#add_signer()","gem::localremoteoptions#add_source_option()","gem::sourceindex#add_spec()","gem::sourceindex#add_spec()","gem::specification::add_spec()","rdoc::markup#add_special()","rdoc::markup::attributemanager#add_special()","gem::command::add_specific_extra_args()","gem::sourceindex#add_specs()","gem::sourceindex#add_specs()","gem::specification::add_specs()","openssl::ocsp::basicresponse#add_status()","rdoc::markup::formatter#add_tag()","rake::rulerecursionoverflowerror#add_target()","rexml::element#add_text()","multitkip::add_tk_procs()","multitkip::add_tk_procs()","multitkip::add_tk_procs()","multitkip::add_tk_procs()","rdoc::context#add_to()","rdoc::toplevel#add_to_classes_or_modules()","rss::element#add_to_element_method()","mylist#add_to_list()","tk::winico#add_to_taskbar()","rdoc::tokenstream#add_token()","rdoc::parser::rubytools#add_token_listener()","rdoc::tokenstream#add_tokens()","tk::bwidget::mainframe#add_toolbar()","thread#add_trace_func()","gem::security::add_trusted_cert()","object::syck::resolver#add_type()","rubyvm::instruction#add_unif()","gem::localremoteoptions#add_update_sources_option()","openssl::config#add_value()","gem::versionoption#add_version_option()","rdoc::markup#add_word_pair()","rdoc::markup::attributemanager#add_word_pair()","curses::addch()","curses::window#addch()","cal#addmon()","ipsocket#addr()","unixsocket#addr()","webrick::cgi::socket#addr()","curses::addstr()","curses::window#addstr()","tk::canvas#addtag()","tk::iwidgets::scrolledcanvas#addtag()","tkctagaccess#addtag()","tk::canvas#addtag_above()","tk::iwidgets::scrolledcanvas#addtag_above()","tk::canvas#addtag_all()","tk::iwidgets::scrolledcanvas#addtag_all()","tk::canvas#addtag_below()","tk::iwidgets::scrolledcanvas#addtag_below()","tk::canvas#addtag_closest()","tk::iwidgets::scrolledcanvas#addtag_closest()","tk::canvas#addtag_enclosed()","tk::iwidgets::scrolledcanvas#addtag_enclosed()","tk::canvas#addtag_overlapping()","tk::iwidgets::scrolledcanvas#addtag_overlapping()","tk::canvas#addtag_withtag()","tk::iwidgets::scrolledcanvas#addtag_withtag()","zlib::zstream#adler()","zlib::adler32()","zlib::adler32_combine()","io#advise()","addrinfo#afamily()","tk::blt::plotcomponent::marker#after()","date#ajd()","gem::streamui#alert()","gem::userinteraction#alert()","gem::streamui#alert_error()","gem::userinteraction#alert_error()","gem::streamui#alert_warning()","gem::userinteraction#alert_warning()","psych::emitter#alias()","psych::handler#alias()","psych::treebuilder#alias()","shell::alias_command()","shell::commandprocessor::alias_command()","multitkip#alias_delete()","multitkip::alias_delete()","multitkip#alias_delete()","multitkip::alias_delete()","multitkip#alias_delete()","multitkip::alias_delete()","multitkip#alias_delete()","multitkip::alias_delete()","rdoc::parser::alias_extension()","multitkip::alias_info()","multitkip#alias_info()","multitkip::alias_info()","multitkip::alias_info()","multitkip#alias_info()","multitkip#alias_info()","multitkip#alias_info()","multitkip::alias_info()","shell::commandprocessor::alias_map()","multitkip#alias_target()","multitkip#alias_target()","multitkip::alias_target()","multitkip#alias_target()","multitkip#alias_target()","multitkip::alias_target()","multitkip::alias_target()","multitkip::alias_target()","encoding::aliases()","multitkip::aliases()","multitkip#aliases()","multitkip#aliases()","multitkip#aliases()","multitkip::aliases()","multitkip#aliases()","multitkip::aliases()","multitkip::aliases()","gem::validator#alien()","dl::packinfo::align()","tk::bwidget::labelframe::align()","tk::rbwidget::alignbox#align()","tk::iwidgets::labeledwidget::alignlabels()","drb::drbserver#alive?()","drb::drbtcpsocket#alive?()","drb::extserv#alive?()","drb::http0::clientside#alive?()","drb::http0::serverside#alive?()","fiber#alive?()","multitkip#alive?()","multitkip#alive?()","multitkip#alive?()","multitkip#alive?()","multitkip::alive?()","multitkip::alive?()","multitkip::alive?()","multitkip::alive?()","rinda::tupleentry#alive?()","thread#alive?()","gem::specification::all()","net::popmail#all()","tkctag#all()","gem::specification::all=()","enumerable#all?()","rdoc::toplevel::all_classes()","rdoc::toplevel::all_classes_and_modules()","rdoc::toplevel::all_classes_hash()","rdoc::toplevel::all_files()","rdoc::toplevel::all_files_hash()","gem::sourceindex#all_gems()","gem::sourceindex#all_gems()","gem::all_load_paths()","rdoc::toplevel::all_modules()","rdoc::toplevel::all_modules_hash()","gem::specification::all_names()","symbol::all_symbols()","threadswait::all_waits()","threadswait#all_waits()","threadswait#all_waits()","threadswait::all_waits()","class#allocate()","acl#allow_addr?()","json::ext::generator::state#allow_nan?()","multitkip#allow_ruby_exit=()","multitkip#allow_ruby_exit=()","multitkip#allow_ruby_exit=()","multitkip#allow_ruby_exit=()","remotetkip#allow_ruby_exit=()","tcltkip#allow_ruby_exit=()","multitkip#allow_ruby_exit?()","multitkip#allow_ruby_exit?()","multitkip#allow_ruby_exit?()","multitkip#allow_ruby_exit?()","remotetkip#allow_ruby_exit?()","tcltkip#allow_ruby_exit?()","acl#allow_socket?()","rss::xmlstylesheet#alternate=()","date#amjd()","ixtlruntime#ancestorchildnumber()","module#ancestors()","rdoc::classmodule#ancestors()","rdoc::normalclass#ancestors()","rdoc::ri::store#ancestors()","rdoc::singleclass#ancestors()","rdoc::ri::driver#ancestors_of()","tkgoldberg_demo#anchor()","tkgrid::anchor()","tkgrid::anchor()","complex#angle()","float#angle()","numeric#angle()","rdoc::markup::formatter#annotate()","rdoc::markup::tobs#annotate()","enumerable#any?()","object#anyunreaddescendants()","tk::text::indexmodmethods#any_char()","tk::text::indexmodmethods#any_chars()","rdoc::context#any_content()","tk::text::indexmodmethods#any_indices()","tk::text::indexmodmethods#any_line()","tk::text::indexmodmethods#any_lines()","gem::gemcutterutilities#api_key()","net::apop#apop?()","net::apop#apop?()","net::pop3#apop?()","net::pop3#apop?()","net::pop3#apop?()","net::pop3#apop?()","gem::installer#app_script_text()","net::imap#append()","optionparser::list#append()","rake::invocationchain#append()","rake::invocationchain::append()","rake::invocationchain::emptyinvocationchain#append()","shell::commandprocessor#append()","tk::blt::htext#append()","tk::blt::vector#append()","tk::tcllib::ctext#append()","tkclipboard#append()","tkclipboard::append()","ixmldomattribute#appendchild()","ixmldomcdatasection#appendchild()","ixmldomcharacterdata#appendchild()","ixmldomcomment#appendchild()","ixmldomdocument#appendchild()","ixmldomdocumentfragment#appendchild()","ixmldomdocumenttype#appendchild()","ixmldomelement#appendchild()","ixmldomentity#appendchild()","ixmldomentityreference#appendchild()","ixmldomnode#appendchild()","ixmldomnotation#appendchild()","ixmldomprocessinginstruction#appendchild()","ixmldomtext#appendchild()","ixtlruntime#appendchild()","microsoft_freethreadedxmldom_1_0#appendchild()","microsoft_xmldom_1_0#appendchild()","ixmldomcdatasection#appenddata()","ixmldomcharacterdata#appenddata()","ixmldomcomment#appenddata()","ixmldomtext#appenddata()","webrick::httputils::formdata#append_data()","mutex_m::append_features()","rss::atom::commonmodel::append_features()","rss::atom::contentmodel#append_features()","rss::atom::dateconstruct::append_features()","rss::atom::personconstruct::append_features()","rss::atom::textconstruct::append_features()","rss::atom::uricontentmodel#append_features()","rss::basedublincoremodel#append_features()","rss::basetrackbackmodel#append_features()","rss::contentmodel::append_features()","rss::ituneschannelmodel#append_features()","rss::itunesitemmodel#append_features()","rss::imagefaviconmodel::append_features()","rss::imageitemmodel::append_features()","rss::maker::contentmodel::append_features()","rss::maker::dublincoremodel::append_features()","rss::maker::ituneschannelmodel#append_features()","rss::maker::itunesitemmodel#append_features()","rss::maker::imagefaviconmodel::append_features()","rss::maker::imageitemmodel::append_features()","rss::maker::slashmodel::append_features()","rss::maker::syndicationmodel::append_features()","rss::maker::taxonomytopicmodel::append_features()","rss::maker::taxonomytopicsmodel::append_features()","rss::maker::trackbackmodel::append_features()","rss::rss09::append_features()","rss::rss10::append_features()","rss::slashmodel#append_features()","rss::syndicationmodel::append_features()","rss::taxonomytopicmodel::append_features()","rss::taxonomytopicsmodel::append_features()","sync_m::append_features()","sync_m::append_features()","tkclipboard::append_on_display()","tkhtml_file_viewer#applet_cmd()","rake#application()","rake#application=()","tk::blt::tree::node#apply()","tk::optionobj#apply()","tkwinfo::appname()","tkwinfo::appname()","remotetkip#appsend()","tk::tcllib::plotchart::ribbonchart3d#area()","tk::bwidget::tree#areabind()","tk::bwidget::tree#areabind_append()","tk::bwidget::tree#areabind_remove()","tk::bwidget::tree#areabindinfo()","rdoc::alias#aref()","rdoc::context::section#aref()","rdoc::methodattr#aref()","rdoc::anymethod#aref_prefix()","rdoc::attr#aref_prefix()","rdoc::methodattr#aref_prefix()","rdoc::generator::markup#aref_to()","complex#arg()","float#arg()","numeric#arg()","rake::task#arg_names()","rdoc::anymethod#arglists()","nomethoderror#args()","gem::command#arguments()","argf#argv()","method#arity()","proc#arity()","unboundmethod#arity()","tk::blt::table#arrange()","win32ole_variant::array()","tkcomm::array2tk_list()","gem::specification::array_attributes()","json::ext::generator::state#array_nl()","json::ext::generator::state#array_nl=()","tk::tcllib::diagrams#arrow()","object#arrowmove1()","object#arrowmove2()","object#arrowmove3()","object#arrowsetup()","rdoc::generator::markup#as_href()","complex#as_json()","date#as_json()","datetime#as_json()","exception#as_json()","range#as_json()","rational#as_json()","regexp#as_json()","struct#as_json()","symbol#as_json()","time#as_json()","rdoc::markup::attribute::as_string()","pathname#ascend()","tkfont#ascii_actual()","tkfont#ascii_actual()","tkfont#ascii_actual_displayof()","tkfont#ascii_actual_displayof()","encoding#ascii_compatible?()","tkfont#ascii_configinfo()","tkfont#ascii_configinfo()","tkfont#ascii_configure()","tkfont#ascii_configure()","tkfont#ascii_font()","tkfont#ascii_font()","tkfont#ascii_metrics()","tkfont#ascii_metrics()","json::ext::generator::state#ascii_only?()","string#ascii_only?()","tkfont#ascii_replace()","tkfont#ascii_replace()","tk::html_widget#ascii_text()","encoding::converter::asciicompat_encoding()","tkfont#asciifont()","tkfont#asciifont()","tktreattagfont#asciifont_configure()","tktreattagfont#asciifont_copy()","tktreatitemfont#asciitagfont_configure()","tktreatitemfont#asciitagfont_copy()","date#asctime()","time#asctime()","cmath::asin()","math::asin()","cmath::asin!()","cmath::asinh()","math::asinh()","cmath::asinh!()","gem::streamui#ask()","gem::userinteraction#ask()","gem::streamui#ask_for_password()","gem::userinteraction#ask_for_password()","gem::streamui#ask_for_password_on_unix()","gem::streamui#ask_for_password_on_windows()","gem::uninstaller#ask_if_ok()","gem::streamui#ask_yes_no()","gem::userinteraction#ask_yes_no()","openssl::pkey::ec::group#asn1_flag()","openssl::pkey::ec::group#asn1_flag=()","tk::wm#aspect()","tk::wm::aspect()","tk::bwidget::assert()","tk::optionobj#assign()","tk::scrollbar#assign()","dl::cstructentity#assign_names()","multitkip::assign_receiver_and_watchdog()","multitkip::assign_receiver_and_watchdog()","multitkip::assign_receiver_and_watchdog()","multitkip::assign_receiver_and_watchdog()","tk::scrollbar#assigned_list()","array#assoc()","env::assoc()","hash#assoc()","ixmldomdocument#async()","microsoft_freethreadedxmldom_1_0#async()","microsoft_xmldom_1_0#async()","msxml#async()","ixmldomdocument#async=()","microsoft_freethreadedxmldom_1_0#async=()","microsoft_xmldom_1_0#async=()","msxml#async=()","tk::windde#async_eval()","tk::windde::async_execute()","array#at()","syck::basenode#at()","time::at()","tktimer#at_end()","tktimer#at_end()","kernel#at_exit()","bigmath#atan()","cmath::atan()","math::atan()","cmath::atan!()","cmath::atan2()","math::atan2()","cmath::atan2!()","cmath::atanh()","math::atanh()","cmath::atanh!()","file::atime()","file#atime()","file::stat#atime()","pathname#atime()","tkwinfo::atom()","tkwinfo::atom()","rss::atom::dateconstruct#atom_validate()","rss::atom::feed::entry::content#atom_validate()","rss::atom::textconstruct#atom_validate()","tkwinfo::atomname()","tkwinfo::atomname()","tk::tcllib::diagrams#attach()","rexml::sax2listener#attlistdecl()","rexml::streamlistener#attlistdecl()","rexml::parsers::pullevent#attlistdecl?()","rdoc::markup::attributemanager#attribute()","rexml::element#attribute()","rexml::quickpath::attribute()","tkkinput::attribute_config()","tkkinput::attribute_info()","gem::specification::attribute_names()","rexml::doctype#attribute_of()","ixmldomattribute#attributes()","ixmldomcdatasection#attributes()","ixmldomcharacterdata#attributes()","ixmldomcomment#attributes()","ixmldomdocument#attributes()","ixmldomdocumentfragment#attributes()","ixmldomdocumenttype#attributes()","ixmldomelement#attributes()","ixmldomentity#attributes()","ixmldomentityreference#attributes()","ixmldomnode#attributes()","ixmldomnotation#attributes()","ixmldomprocessinginstruction#attributes()","ixmldomtext#attributes()","ixtlruntime#attributes()","microsoft_freethreadedxmldom_1_0#attributes()","microsoft_xmldom_1_0#attributes()","openssl::x509::request#attributes()","rdoc::markup::tordoc#attributes()","rdoc::ri::store#attributes()","tk::wm::attributes()","tk::wm#attributes()","uri::ldap#attributes()","openssl::x509::request#attributes=()","uri::ldap#attributes=()","rexml::doctype#attributes_of()","curses::attroff()","curses::window#attroff()","curses::attron()","curses::window#attron()","curses::attrset()","curses::window#attrset()","net::smtp#auth_cram_md5()","net::smtp#auth_cram_md5()","net::smtp#auth_login()","net::smtp#auth_login()","net::pop3#auth_only()","net::pop3::auth_only()","net::pop3::auth_only()","net::pop3::auth_only()","net::pop3#auth_only()","net::pop3#auth_only()","net::pop3#auth_only()","net::pop3::auth_only()","net::smtp#auth_plain()","net::smtp#auth_plain()","net::imap#authenticate()","net::smtp#authenticate()","net::smtp#authenticate()","webrick::httpauth::basicauth#authenticate()","webrick::httpauth::digestauth#authenticate()","gem::specification#author()","gem::specification#author=()","gem::specification#authors()","gem::specification#authors=()","io#autoclose=()","io#autoclose?()","kernel#autoload()","module#autoload()","kernel#autoload?()","module#autoload?()","tk::scrollable#autoscroll()","tk::scrollbar#autoscroll()","tk::tcllib::autoscroll::autoscroll()","zlib::zstream#avail_in()","zlib::zstream#avail_out()","zlib::zstream#avail_out=()","gem::available?()","rss::baselistener#available_tags()","benchmarkdriver#average()","rexml::quickpath::axe()","tk::blt::plotcomponent#axis_bind()","tk::blt::plotcomponent#axis_bind_append()","tk::blt::plotcomponent#axis_bind_remove()","tk::blt::plotcomponent#axis_bindinfo()","tk::blt::plotcomponent#axis_cget()","tk::blt::plotcomponent#axis_cget_strict()","tk::blt::plotcomponent#axis_cget_tkstring()","tk::blt::plotcomponent#axis_configinfo()","tk::blt::plotcomponent#axis_configure()","tk::blt::plotcomponent#axis_create()","tk::blt::plotcomponent#axis_delete()","tk::blt::plotcomponent#axis_invtransform()","tk::blt::plotcomponent#axis_limits()","tk::blt::plotcomponent#axis_names()","tk::blt::plotcomponent#axis_transform()","tk::blt::plotcomponent#axis_use()","tk::blt::plotcomponent#axis_view()","tk::iwidgets::hyperhelp#back()","tk::tcllib::plotchart::chartmethod#background()","multitkip#background_call()","multitkip#background_call()","multitkip#background_call()","multitkip#background_call()","multitkip#background_eval()","multitkip#background_eval()","multitkip#background_eval()","multitkip#background_eval()","multitkip#background_eval_proc()","multitkip#background_eval_proc()","multitkip#background_eval_proc()","multitkip#background_eval_proc()","multitkip#background_eval_str()","multitkip#background_eval_str()","multitkip#background_eval_str()","multitkip#background_eval_str()","multitkip#background_eval_string()","multitkip#background_eval_string()","multitkip#background_eval_string()","multitkip#background_eval_string()","rake::altsystem#backticks()","exception#backtrace()","gem::configfile#backtrace()","thread#backtrace()","tk::bwidget::badoptionstring()","tk::tcllib::plotchart::chartmethod#balloon()","tk::tcllib::plotchart::chartmethod#balloonconfig()","optionparser#banner()","foo#bar()","tk::blt::plotcomponent#bar()","tk::blt::plotcomponent#bar_activate()","tk::blt::plotcomponent#bar_bind()","tk::blt::plotcomponent#bar_bind_append()","tk::blt::plotcomponent#bar_bind_remove()","tk::blt::plotcomponent#bar_bindinfo()","tk::blt::plotcomponent#bar_cget()","tk::blt::plotcomponent#bar_cget_strict()","tk::blt::plotcomponent#bar_cget_tkstring()","tk::blt::plotcomponent#bar_closest()","tk::blt::plotcomponent#bar_configinfo()","tk::blt::plotcomponent#bar_configure()","tk::blt::plotcomponent#bar_create()","tk::blt::plotcomponent#bar_deactivate()","tk::blt::plotcomponent#bar_delete()","tk::blt::plotcomponent#bar_exist?()","tk::blt::plotcomponent#bar_names()","tk::blt::plotcomponent#bar_show()","tk::blt::plotcomponent#bar_type()","cgi::htmlextension#base()","optionparser#base()","securerandom::base64()","xmlrpc::convert::base64()","tk::html_widget::base64_decode()","tk::html_widget::base64_encode()","digest::class::base64digest()","digest::instance#base64digest()","digest::instance#base64digest!()","ixmldomattribute#basename()","ixmldomcdatasection#basename()","ixmldomcharacterdata#basename()","ixmldomcomment#basename()","ixmldomdocument#basename()","ixmldomdocumentfragment#basename()","ixmldomdocumenttype#basename()","ixmldomelement#basename()","ixmldomentity#basename()","ixmldomentityreference#basename()","ixmldomnode#basename()","ixmldomnotation#basename()","ixmldomprocessinginstruction#basename()","ixmldomtext#basename()","ixtlruntime#basename()","microsoft_freethreadedxmldom_1_0#basename()","microsoft_xmldom_1_0#basename()","gem::specification#base_dir()","rdoc::toplevel#base_name()","file::basename()","pathname#basename()","openssl::ocsp::response#basic()","animatedwavedemo#basicmotion()","net::httpheader#basic_auth()","webrick::httpauth#basic_auth()","readline::basic_quote_characters()","readline::basic_quote_characters=()","readline::basic_word_break_characters()","readline::basic_word_break_characters=()","tk::blt::treeview#bbox()","tk::blt::treeview::tagorid_methods#bbox()","tk::canvas#bbox()","tk::entry#bbox()","tk::iwidgets::hierarchy#bbox()","tk::iwidgets::scrolledcanvas#bbox()","tk::iwidgets::scrolledlistbox#bbox()","tk::iwidgets::scrolledtext#bbox()","tk::tktable#bbox()","tkgrid::bbox()","tkgrid::bbox()","tkmultilistframe#bbox()","tkmultilistbox#bbox()","tktextwin#bbox()","tkctagaccess#bbox()","curses::beep()","tk::blt::beep()","tk::blt::plotcomponent::marker#before()","rdoc::task#before_running_rdoc()","matchdata#begin()","range#begin()","rdoc::stats#begin_adding()","rdoc::stats::quiet#begin_adding()","stringscanner#beginning_of_line?()","gem::command#begins?()","curses::window#begx()","curses::window#begy()","tkctag#below()","object#bench()","object#bench_each()","benchmark::benchmark()","benchmarkdriver::benchmark()","object#benchmark()","comparable#between?()","multitkip#bg_call()","multitkip#bg_call()","multitkip#bg_call()","multitkip#bg_call()","multitkip#bg_eval()","multitkip#bg_eval()","multitkip#bg_eval()","multitkip#bg_eval()","multitkip#bg_eval_proc()","multitkip#bg_eval_proc()","multitkip#bg_eval_proc()","multitkip#bg_eval_proc()","multitkip#bg_eval_str()","multitkip#bg_eval_str()","multitkip#bg_eval_str()","multitkip#bg_eval_str()","multitkip#bg_eval_string()","multitkip#bg_eval_string()","multitkip#bg_eval_string()","multitkip#bg_eval_string()","multitkip::bgerror()","multitkip::bgerror()","multitkip::bgerror()","multitkip::bgerror()","tkbgerror::bgerror()","tk::blt::bgexec()","tk::html_widget#bgimage()","gem::specification#bin_dir()","gem::specification#bin_file()","gem::bin_path()","net::ftp#binary=()","rdoc::parser::binary?()","syck::baseemitter#binary_base64()","gem::binary_mode()","tk::windde#binary_request()","addrinfo#bind()","dl::function#bind()","dl::importer#bind()","exception2messagemapper#bind()","exception2messagemapper#bind()","socket#bind()","tk::blt::tabset::tab#bind()","tk::blt::treeview::tagorid_methods#bind()","tk::frame::bind()","tk::rbwidget::scrollframe#bind()","tk::toplevel::bind()","tkcomm#bind()","tktexttag#bind()","tktexttag#bind()","tkctagaccess#bind()","udpsocket#bind()","unboundmethod#bind()","tk::bwidget::bindmousewheel()","tkcomm#bind_all()","tk::blt::tabset::tab#bind_append()","tk::blt::treeview::tagorid_methods#bind_append()","tk::frame::bind_append()","tk::rbwidget::scrollframe#bind_append()","tk::toplevel::bind_append()","tkcomm#bind_append()","tktexttag#bind_append()","tktexttag#bind_append()","tkctagaccess#bind_append()","tkcomm#bind_append_all()","dl::carriedfunction#bind_at_call()","dl::function#bind_at_call()","dl::tempfunction#bind_at_call()","dl::importer#bind_function()","tk::blt::tabset::tab#bind_remove()","tk::blt::treeview::tagorid_methods#bind_remove()","tk::frame::bind_remove()","tk::rbwidget::scrollframe#bind_remove()","tk::toplevel::bind_remove()","tkcomm#bind_remove()","tktexttag#bind_remove()","tktexttag#bind_remove()","tkctagaccess#bind_remove()","tkcomm#bind_remove_all()","tk::blt::tabset::tab#bindinfo()","tk::blt::treeview::tagorid_methods#bindinfo()","tk::frame::bindinfo()","tk::rbwidget::scrollframe#bindinfo()","tk::toplevel::bindinfo()","tkcomm#bindinfo()","tktexttag#bindinfo()","tktexttag#bindinfo()","tkctagaccess#bindinfo()","tkcomm#bindinfo_all()","kernel#binding()","proc#binding()","gem::bindir()","argf#binmode()","io#binmode()","net::telnet#binmode()","stringio#binmode()","tktextio#binmode()","net::telnet#binmode=()","argf#binmode?()","io#binmode?()","io::binread()","pathname#binread()","tk::blt::vector#binread()","io::binwrite()","tkpalette::bisque()","openssl::bn#bit_set?()","object#bitmaprow()","rdoc::markup::attribute::bitmap_for()","curses::bkgd()","curses::window#bkgd()","curses::bkgdset()","curses::window#bkgdset()","tkphotoimage#blank()","tkphotoimage#blank()","openssl::pkey::rsa#blinding_off!()","openssl::pkey::rsa#blinding_off!()","openssl::pkey::rsa#blinding_on!()","openssl::pkey::rsa#blinding_on!()","file::stat#blksize()","cal#block()","kernel#block_given?()","spinner_demo#block_input()","digest::hmac#block_length()","digest::instance#block_length()","digest::sha2#block_length()","openssl::digest#block_length()","shell::processcontroller#block_output_synchronize()","rdoc::methodattr#block_params=()","string#block_scanf()","drb::drbserver::invokemethod18mixin#block_yield()","file::blockdev?()","file::stat#blockdev?()","filetest#blockdev?()","pathname#blockdev?()","cgi::htmlextension#blockquote()","file::stat#blocks()","object#blowup()","tk::blt::table::tablecontainer#blt_table_add()","tk::blt::table::tablecontainer#blt_table_arrange()","tk::blt::table::tablecontainer#blt_table_cget()","tk::blt::table::tablecontainer#blt_table_cget_strict()","tk::blt::table::tablecontainer#blt_table_cget_tkstring()","tk::blt::table::tablecontainer#blt_table_configinfo()","tk::blt::table::tablecontainer#blt_table_configure()","tk::blt::table::tablecontainer#blt_table_current_configinfo()","tk::blt::table::tablecontainer#blt_table_current_itemconfiginfo()","tk::blt::table::tablecontainer#blt_table_delete()","tk::blt::table::tablecontainer#blt_table_extents()","tk::blt::table::tablecontainer#blt_table_insert()","tk::blt::table::tablecontainer#blt_table_insert_after()","tk::blt::table::tablecontainer#blt_table_insert_before()","tk::blt::table::tablecontainer#blt_table_itemcget()","tk::blt::table::tablecontainer#blt_table_itemcget_strict()","tk::blt::table::tablecontainer#blt_table_itemcget_tkstring()","tk::blt::table::tablecontainer#blt_table_itemconfiginfo()","tk::blt::table::tablecontainer#blt_table_itemconfigure()","tk::blt::table::tablecontainer#blt_table_iteminfo()","tk::blt::table::tablecontainer#blt_table_join()","tk::blt::table::tablecontainer#blt_table_locate()","tk::blt::table::tablecontainer#blt_table_save()","tk::blt::table::tablecontainer#blt_table_search()","tk::blt::table::tablecontainer#blt_table_split()","tk::blt::bltdebug()","benchmark::bm()","object#bm()","benchmark::bmbm()","mail#body()","net::httpresponse#body()","tk::itcl::body()","webrick::httprequest#body()","net::httpgenericrequest#body=()","net::httpresponse#body=()","net::httpgenericrequest#body_exist?()","net::httpresponse::body_permitted?()","net::httpgenericrequest#body_stream=()","socket::option::bool()","socket::option#bool()","tkutil::bool()","tkutil#bool()","tkvariable#bool()","tkvariable#bool()","tkvariable#bool=()","tkvariable#bool=()","tkvariable#bool_element()","tkvariable#bool_element()","tkvariable#bool_type=()","tkvariable#bool_type=()","rexml::functions::boolean()","xmlrpc::convert::boolean()","tk::tktable#border_dragto()","tk::tktable#border_mark()","tk::tktable#border_mark_col()","tk::tktable#border_mark_row()","gem::localremoteoptions#both?()","irb::frame::bottom()","irb::frame#bottom()","dl::function#bound?()","curses::window#box()","tk::tcllib::diagrams#box()","tkgoldberg_demo#box()","tk::tcllib::plotchart::xyplot#box_and_whiskers()","tk::tcllib::plotchart::xyplot#box_whiskers()","tk::tcllib::diagrams#boxcoords()","tk::tcllib::diagrams#bracket()","prettyprint::group#break()","prettyprint::group#break?()","prettyprint#break_outmost_groups()","debugger__#break_points()","debugger__::context#break_points()","tk::html_widget#break_text()","prettyprint#breakable()","prettyprint::singleline#breakable()","conditionvariable#broadcast()","monitormixin::conditionvariable#broadcast()","tk::winregistry#broadcast()","object#browse()","object#browsedir()","win32::sspi::securitybuffer#buffersize()","win32::sspi::securitybuffer#buffertype()","object::syck::parser#bufsize()","object::syck::parser#bufsize=()","gem::builder#build()","gem::ext::configurebuilder::build()","gem::ext::extconfbuilder::build()","gem::ext::rakebuilder::build()","matrix::build()","object#build()","rubyvm::sourcecodegenerator::build()","uri::ftp::build()","uri::generic::build()","uri::http::build()","uri::ldap::build()","uri::mailto::build()","uri::generic::build2()","gem::command::build_args()","gem::command::build_args=()","gem::security::build_cert()","gem::installer#build_extensions()","rdoc::markup::parser#build_heading()","gem::indexer#build_indicies()","gem::indexer#build_legacy_indicies()","rdoc::markup::parser#build_list()","gem::indexer#build_marshal_gemspecs()","gem::indexer#build_modern_index()","gem::indexer#build_modern_indicies()","rdoc::markup::parser#build_paragraph()","gem::indexer#build_rss()","gem::security::build_self_signed_cert()","rubyvm::sourcecodegenerator#build_string()","actionmap::build_tree()","rdoc::markup::parser#build_verbatim()","openssl::pkey::ec::builtin_curves()","version#bump()","tk::busy#busy()","tk::busy#busy_cget()","tk::busy#busy_configinfo()","tk::busy#busy_configure()","tk::busy#busy_current?()","tk::busy#busy_current_configinfo()","tk::busy#busy_forget()","tk::busy#busy_hold()","tk::busy#busy_status()","object#butpress()","tk::blt::treeview#button_activate()","tk::blt::treeview::tagorid_methods#button_activate()","tk::blt::treeview#button_bind()","tk::blt::treeview::tagorid_methods#button_bind()","tk::blt::treeview#button_bind_append()","tk::blt::treeview::tagorid_methods#button_bind_append()","tk::blt::treeview#button_bind_remove()","tk::blt::treeview::tagorid_methods#button_bind_remove()","tk::blt::treeview#button_bindinfo()","tk::blt::treeview::tagorid_methods#button_bindinfo()","tk::blt::treeview::configmethod#button_cget()","tk::blt::treeview::configmethod#button_cget_strict()","tk::blt::treeview::configmethod#button_cget_tkstring()","tk::blt::treeview::configmethod#button_configinfo()","tk::blt::treeview::configmethod#button_configure()","tk::bwidget::widget::bwinclude()","csv::table#by_col()","csv::table#by_col!()","csv::table#by_col_or_row()","csv::table#by_col_or_row!()","openssl::engine::by_id()","csv::table#by_row()","csv::table#by_row!()","argf#bytes()","io#bytes()","rexml::child#bytes()","random#bytes()","string#bytes()","stringio#bytes()","zlib::gzipreader#bytes()","gem::package::tarreader::entry#bytes_read()","string#bytesize()","string#byteslice()","object#c_esc()","prelude#c_esc()","object#c_str()","prime::trialdivision#cache()","gem::cache_dir()","gem::specfetcher#cache_dir()","gem::specification#cache_dir()","gem::specification#cache_file()","gem::cache_gem()","gem::specification#cache_gem()","rdoc::ri::store#cache_path()","gdbm#cachesize=()","object#calc_each()","object#calc_stat()","rdoc::stats#calculate()","continuation#call()","dl::cfunc#call()","dl::function#call()","fiddle::closure::blockcaller#call()","fiddle::function#call()","logger::formatter#call()","method#call()","multitkip#call()","multitkip#call()","multitkip#call()","multitkip#call()","proc#call()","symbol#call()","tkcore#call()","win32api#call()","xmlrpc::client#call()","xmlrpc::client#call2()","xmlrpc::client#call2_async()","xmlrpc::client#call_async()","tkfont#call_font_configure()","tkfont#call_font_configure()","tk::itcl::itclobject#call_method()","tk::itcl::itclobject::call_proc()","object#callable_methods()","tkcore::callback()","tkmsgcatalog::callback()","tkmsgcatalog::callback()","tktimer::callback()","tktimer::callback()","tkutil::callback()","tkvariable::callback()","tkvariable::callback()","tkcore#callback_break()","tkcore#callback_continue()","tkcore#callback_return()","kernel#callcc()","kernel#caller()","dl::cfunc#calltype()","dl::cfunc#calltype=()","curses::can_change_color?()","rdoc::parser::can_parse()","rinda::tupleentry#cancel()","rinda::waittemplateentry#cancel()","tk::blt::dnd::cancel()","tk::tcllib::widget::dialog#cancel()","tkrttimer#cancel()","tktimer#cancel()","tktimer#cancel()","webrick::utils::timeouthandler#cancel()","webrick::utils::timeouthandler::cancel()","tktimer#cancel_on_exception=()","tktimer#cancel_on_exception=()","tktimer#cancel_on_exception?()","tktimer#cancel_on_exception?()","rinda::tupleentry#canceled?()","optionparser#candidate()","optionparser::completion::candidate()","optionparser::completion#candidate()","psych::emitter#canonical()","psych::emitter#canonical=()","net::httpheader#canonical_each()","addrinfo#canonname()","tk::tcllib::tkpiechart::pie#canvas()","tk::canvas#canvas_x()","tk::canvas#canvas_y()","tk::canvas#canvasx()","tk::iwidgets::scrolledcanvas#canvasx()","tk::canvas#canvasy()","tk::iwidgets::scrolledcanvas#canvasy()","net::smtp::response#capabilities()","net::imap#capability()","net::smtp#capable_auth_types()","net::smtp#capable_auth_types()","net::smtp#capable_cram_md5_auth?()","net::smtp#capable_cram_md5_auth?()","net::smtp#capable_login_auth?()","net::smtp#capable_login_auth?()","net::smtp#capable_plain_auth?()","net::smtp#capable_plain_auth?()","net::smtp#capable_starttls?()","net::smtp#capable_starttls?()","string#capitalize()","symbol#capitalize()","string#capitalize!()","cgi::htmlextension#caption()","open3::capture2()","open3::capture2e()","open3::capture3()","matchdata#captures()","tkxim::caret()","tkxim#caret()","string#casecmp()","symbol#casecmp()","regexp#casefold?()","shell::commandprocessor#cat()","kernel#catch()","tkrttimer#cb_call()","tktimer#cb_call()","tktimer#cb_call()","multitkip::cb_entry_class()","multitkip::cb_entry_class()","multitkip::cb_entry_class()","multitkip::cb_entry_class()","multitkip#cb_error()","multitkip#cb_error()","multitkip#cb_error()","multitkip#cb_error()","multitkip#cb_eval()","multitkip#cb_eval()","multitkip#cb_eval()","multitkip#cb_eval()","curses::cbreak()","object#cbreak()","cmath::cbrt()","math::cbrt()","cmath::cbrt!()","fileutils::cd()","shell#cd()","rexml::sax2listener#cdata()","rexml::streamlistener#cdata()","rexml::parsers::pullevent#cdata?()","rexml::element#cdatas()","bigdecimal#ceil()","float#ceil()","integer#ceil()","integer#ceil()","numeric#ceil()","rational#ceil()","rexml::functions::ceiling()","jisx0208::char#cell()","tkwinfo::cells()","tkwinfo::cells()","string#center()","tk::iwidgets::shell#center()","tkgoldberg_demo#centroid()","openssl::ssl::sslsocket#cert()","webrick::cgi::socket#cert()","object#cert2text()","openssl::ocsp::request#certid()","openssl::pkcs7#certificates()","openssl::pkcs7#certificates=()","net::pop3::certs()","net::pop3::certs()","net::pop3::certs()","net::pop3::certs()","tk::blt::dnd#cget()","tk::blt::plotcomponent::axis#cget()","tk::blt::plotcomponent::crosshairs#cget()","tk::blt::plotcomponent::element#cget()","tk::blt::plotcomponent::gridline#cget()","tk::blt::plotcomponent::legend#cget()","tk::blt::plotcomponent::marker#cget()","tk::blt::plotcomponent::pen#cget()","tk::blt::plotcomponent::postscript#cget()","tk::blt::table#cget()","tk::blt::tabset::tab#cget()","tk::blt::ted#cget()","tk::blt::watch#cget()","tk::bwidget::dialog#cget()","tk::bwidget::dynamichelp::cget()","tk::bwidget::listbox::item#cget()","tk::bwidget::messagedlg#cget()","tk::bwidget::tree::node#cget()","tk::bwidget::widget::cget()","tk::optionobj#cget()","tk::tcllib::crosshair#cget()","tk::tcllib::getstring_dialog#cget()","tk::tcllib::swaplist_dialog#cget()","tk::tcllib::widget::toolbaritem#cget()","tk::tile::dialog#cget()","tk::tktable::celltag#cget()","tkcomposite#cget()","tkfont::chooser#cget()","tknamespace::ensemble#cget()","tkphotoimage#cget()","tkphotoimage#cget()","tktextimage#cget()","tktextimage#cget()","tktexttag#cget()","tktexttag#cget()","tktextwindow#cget()","tktextwindow#cget()","tkctagaccess#cget()","tk::blt::dnd#cget_strict()","tk::blt::plotcomponent::axis#cget_strict()","tk::blt::plotcomponent::crosshairs#cget_strict()","tk::blt::plotcomponent::element#cget_strict()","tk::blt::plotcomponent::gridline#cget_strict()","tk::blt::plotcomponent::legend#cget_strict()","tk::blt::plotcomponent::marker#cget_strict()","tk::blt::plotcomponent::pen#cget_strict()","tk::blt::plotcomponent::postscript#cget_strict()","tk::blt::table#cget_strict()","tk::blt::tabset::tab#cget_strict()","tk::blt::ted#cget_strict()","tk::blt::watch#cget_strict()","tk::bwidget::dialog#cget_strict()","tk::bwidget::dynamichelp::cget_strict()","tk::bwidget::listbox::item#cget_strict()","tk::bwidget::messagedlg#cget_strict()","tk::bwidget::tree::node#cget_strict()","tk::bwidget::widget::cget_strict()","tk::tcllib::getstring_dialog#cget_strict()","tk::tcllib::swaplist_dialog#cget_strict()","tk::tcllib::widget::toolbaritem#cget_strict()","tk::tile::dialog#cget_strict()","tk::tktable::celltag#cget_strict()","tkcomposite#cget_strict()","tknamespace::ensemble#cget_strict()","tkphotoimage#cget_strict()","tkphotoimage#cget_strict()","tktextimage#cget_strict()","tktextimage#cget_strict()","tktexttag#cget_strict()","tktexttag#cget_strict()","tktextwindow#cget_strict()","tktextwindow#cget_strict()","tkctagaccess#cget_strict()","tk::blt::dnd#cget_tkstring()","tk::blt::plotcomponent::axis#cget_tkstring()","tk::blt::plotcomponent::crosshairs#cget_tkstring()","tk::blt::plotcomponent::element#cget_tkstring()","tk::blt::plotcomponent::gridline#cget_tkstring()","tk::blt::plotcomponent::legend#cget_tkstring()","tk::blt::plotcomponent::marker#cget_tkstring()","tk::blt::plotcomponent::pen#cget_tkstring()","tk::blt::plotcomponent::postscript#cget_tkstring()","tk::blt::table#cget_tkstring()","tk::blt::tabset::tab#cget_tkstring()","tk::blt::ted#cget_tkstring()","tk::bwidget::dialog#cget_tkstring()","tk::bwidget::listbox::item#cget_tkstring()","tk::bwidget::tree::node#cget_tkstring()","tk::tcllib::widget::toolbaritem#cget_tkstring()","tk::tktable::celltag#cget_tkstring()","tkcomposite#cget_tkstring()","tktexttag#cget_tkstring()","tktexttag#cget_tkstring()","tkctagaccess#cget_tkstring()","rake::invocationexceptionmixin#chain()","rake::invocationexceptionmixin#chain=()","openssl::netscape::spki#challenge()","webrick::httpauth::basicauth#challenge()","webrick::httpauth::digestauth#challenge()","openssl::netscape::spki#challenge=()","object#changestate()","object#changetoolbars()","rdoc::markup::attributemanager#change_attribute()","process::gid::change_privilege()","process::uid::change_privilege()","irb::context#change_workspace()","observable#changed()","observable#changed?()","rdoc::markup::attributemanager#changed_attribute_by_name()","object#changepage()","tk::blt::winop#changes()","tk::blt::winop#changes()","tk::text::indexmodmethods#char()","rss::rexmllikexmlparser#character()","xmlrpc::xmlparser::streamparsermixin#character()","rexml::sax2listener#characters()","file::chardev?()","file::stat#chardev?()","filetest#chardev?()","pathname#chardev?()","argf#chars()","io#chars()","string#chars()","stringio#chars()","tk::text::indexmodmethods#chars()","msxml#charset()","openuri::meta#charset()","msxml#charset=()","object#charset_alias()","iconv::charset_map()","tk::tcllib::chatwidget#chat_widget()","dir::chdir()","fileutils::chdir()","net::ftp#chdir()","shell#chdir()","net::imap#check()","object#check()","pty::check()","rexml::text::check()","stringscanner#check()","tk::blt::busy#check()","win32::registry::api#check()","object#check_ng_path()","object#check_arity()","debugger__::context#check_break_points()","json::ext::generator::state#check_circular?()","gem::package::tarwriter#check_closed()","rexml::encoding#check_encoding()","rdoc::options#check_files()","rdoc::options#check_generator()","drb::drbserver#check_insecure_method()","pp::ppmethods#check_inspect_key()","openssl::pkey::ec#check_key()","rdoc::task#check_names()","openssl::ocsp::request#check_nonce()","object#check_pkg()","shell::commandprocessor#check_point()","openssl::x509::certificate#check_private_key()","gem::commands::setupcommand#check_ruby_version()","object#check_shlib_search_path()","object#check_signedness()","object#check_sizeof()","knights_tour#check_square()","debugger__::context#check_suspend()","object#check_tcl_ng_path()","object#check_tcltk_version()","gem::installer#check_that_user_bin_dir_is_in_path()","object#check_tk_ng_path()","stringscanner#check_until()","openssl::x509::certificate#check_validity()","cgi::htmlextension#checkbox()","cgi::htmlextension#checkbox_group()","ixmldomattribute#childnodes()","ixmldomcdatasection#childnodes()","ixmldomcharacterdata#childnodes()","ixmldomcomment#childnodes()","ixmldomdocument#childnodes()","ixmldomdocumentfragment#childnodes()","ixmldomdocumenttype#childnodes()","ixmldomelement#childnodes()","ixmldomentity#childnodes()","ixmldomentityreference#childnodes()","ixmldomnode#childnodes()","ixmldomnotation#childnodes()","ixmldomprocessinginstruction#childnodes()","ixmldomtext#childnodes()","ixtlruntime#childnodes()","microsoft_freethreadedxmldom_1_0#childnodes()","microsoft_xmldom_1_0#childnodes()","nqxml::node#childnodes()","ixtlruntime#childnumber()","rdoc::context#child_name()","tk::iwidgets::extfileselectionbox#child_site()","tk::iwidgets::extfileselectiondialog#child_site()","tk::iwidgets::fileselectionbox#child_site()","tk::iwidgets::fileselectiondialog#child_site()","tk::iwidgets::labeledframe#child_site()","tk::iwidgets::labeledwidget#child_site()","tk::iwidgets::mainwindow#child_site()","tk::iwidgets::notebook#child_site()","tk::iwidgets::panedwindow#child_site()","tk::iwidgets::scrolledcanvas#child_site()","tk::iwidgets::scrolledframe#child_site()","tk::iwidgets::scrolledtext#child_site()","tk::iwidgets::selectionbox#child_site()","tk::iwidgets::selectiondialog#child_site()","tk::iwidgets::shell#child_site()","tk::iwidgets::tabnotebook#child_site()","tk::iwidgets::notebook#child_site_list()","tk::iwidgets::panedwindow#child_site_list()","tk::iwidgets::tabnotebook#child_site_list()","pathname#children()","rexml::light::node#children()","rexml::parent#children()","syck::basenode#children()","tk::blt::tree::node#children()","tkwinfo::children()","tkwinfo::children()","syck::basenode#children_with_index()","file::chmod()","file#chmod()","fileutils::chmod()","object#chmod()","pathname#chmod()","fileutils::chmod_r()","kernel#chomp()","string#chomp()","string#chomp!()","gem::streamui#choose_from_list()","gem::userinteraction#choose_from_list()","kernel#chop()","string#chop()","string#chop!()","file::chown()","file#chown()","fileutils::chown()","pathname#chown()","fileutils::chown_r()","integer#chr()","integer#chr()","string#chr()","dir::chroot()","enumerable#chunk()","webrick::httpresponse#chunked=()","net::httpheader#chunked?()","webrick::httpresponse#chunked?()","openssl::engine#cipher()","openssl::ssl::sslsocket#cipher()","webrick::cgi::socket#cipher()","openssl::pkcs7#cipher=()","object#ciphers()","openssl::cipher::ciphers()","openssl::ssl::sslcontext#ciphers()","openssl::ssl::sslcontext#ciphers=()","tk::tcllib::diagrams#circle()","object#citrus_cstomb()","object#citrus_decode_mapsrc()","object#citrus_euc_cstomb()","object#citrus_mskanji_cstomb()","object#citrus_stateless_iso_cstomb()","date::civil()","datetime::civil()","object#class()","win32::registry::predefinedkey#class()","rdoc::context#class_attributes()","rdoc::generator::darkfish#class_dir()","rdoc::ri::driver#class_document()","module#class_eval()","module#class_exec()","rdoc::ri::store#class_file()","rdoc::context#class_method_list()","rdoc::ri::store#class_methods()","gem::ext::builder::class_name()","rss::baselistener#class_name()","win32comgen#class_name()","rdoc::ri::store#class_path()","module#class_variable_defined?()","module#class_variable_get()","module#class_variable_set()","module#class_variables()","rdoc::context#classes()","rdoc::ri::driver#classes()","rdoc::toplevel::classes()","tk::bwidget::classes()","rdoc::ri::driver#classes_and_includes_for()","rdoc::context#classes_and_modules()","rdoc::context#classes_hash()","rdoc::toplevel::classes_hash()","tk::tcllib::ntext#classicanchor()","tk::tcllib::ntext#classicanchor=()","tk::tcllib::ntext#classicextras()","tk::tcllib::ntext#classicextras=()","tk::tcllib::ntext#classicmouseselect()","tk::tcllib::ntext#classicmouseselect=()","tk::tcllib::ntext#classicwordbreak()","tk::tcllib::ntext#classicwordbreak=()","tk::tcllib::ntext#classicwrap()","tk::tcllib::ntext#classicwrap=()","set#classify()","tkwinfo::classname()","tkwinfo::classname()","pathname#cleanpath()","openssl::engine::cleanup()","array#clear()","curses::clear()","curses::window#clear()","dbm#clear()","env::clear()","gc::profiler::clear()","gdbm#clear()","gem::dependencylist#clear()","hash#clear()","queue#clear()","rake::task#clear()","rake::taskmanager#clear()","sdbm#clear()","set#clear()","sizedqueue#clear()","string#clear()","stringscanner#clear()","tk::blt::vector#clear()","tk::html_widget#clear()","tk::iwidgets::combobox#clear()","tk::iwidgets::entryfield#clear()","tk::iwidgets::finddialog#clear()","tk::iwidgets::hierarchy#clear()","tk::iwidgets::messagebox#clear()","tk::iwidgets::promptdialog#clear()","tk::iwidgets::scrolledlistbox#clear()","tk::iwidgets::scrolledtext#clear()","tk::iwidgets::spinner#clear()","tk::listbox#clear()","tk::tcllib::tooltip::clear()","tkclipboard::clear()","tkclipboard#clear()","tkoptiondb::clear()","tkoptiondb::clear()","tkoptiondb::clear()","tkselection::clear()","tkselection#clear()","tkselection::clear()","tkselection#clear()","tkvariable#clear()","tkvariable#clear()","rake::task#clear_actions()","tk::tktable#clear_all()","tk::tcllib::ico::clear_cache()","tk::tktable#clear_cache()","tk::tcllib::tooltip::clear_children()","rdoc::classmodule#clear_comment()","rake::filelist#clear_exclude()","tk::tcllib::tooltip::clear_glob()","tk::tcllib::ctext#clear_highlight_classes()","tk::iwidgets::selectionbox#clear_items()","tk::iwidgets::selectiondialog#clear_items()","tkclipboard::clear_on_display()","tkselection::clear_on_display()","tkselection::clear_on_display()","gem::clear_paths()","rake::task#clear_prerequisites()","tkhtml_file_viewer#clear_screen()","tk::iwidgets::selectionbox#clear_selection()","tk::iwidgets::selectiondialog#clear_selection()","tk::tktable#clear_sizes()","debugger__::context#clear_suspend()","tk::tktable#clear_tags()","tk::bwidget::combobox#clear_value()","tk::tcllib::tooltip::clear_widgets()","tk::bwidget::combobox#clearvalue()","tk::clock::clicks()","object#client()","tk::wm::client()","tk::wm#client()","openssl::ssl::sslsocket#client_ca()","webrick::httpstatus::client_error?()","tk::tile::dialog#client_frame()","tk::html_widget#clipping_window()","tk::html_widget#clipwin()","rdoc::task#clobber_task_description()","matrix#clone()","method#clone()","object#clone()","rexml::attribute#clone()","rexml::cdata#clone()","rexml::comment#clone()","rexml::doctype#clone()","rexml::document#clone()","rexml::element#clone()","rexml::instruction#clone()","rexml::text#clone()","rexml::xmldecl#clone()","rake::cloneable#clone()","singleton#clone()","tkfont::descendantfont#clone()","tktextio#clone()","unboundmethod#clone()","vector#clone()","ixmldomattribute#clonenode()","ixmldomcdatasection#clonenode()","ixmldomcharacterdata#clonenode()","ixmldomcomment#clonenode()","ixmldomdocument#clonenode()","ixmldomdocumentfragment#clonenode()","ixmldomdocumenttype#clonenode()","ixmldomelement#clonenode()","ixmldomentity#clonenode()","ixmldomentityreference#clonenode()","ixmldomnode#clonenode()","ixmldomnotation#clonenode()","ixmldomprocessinginstruction#clonenode()","ixmldomtext#clonenode()","ixtlruntime#clonenode()","microsoft_freethreadedxmldom_1_0#clonenode()","microsoft_xmldom_1_0#clonenode()","tk::menu#clone_menu()","tk::bwidget::clonename()","argf#close()","cgi::session#close()","cgi::session::filestore#close()","cgi::session::memorystore#close()","cgi::session::nullstore#close()","cgi::session::pstore#close()","curses::window#close()","dbm#close()","dl::handle#close()","drb::drbsslsocket#close()","drb::drbtcpsocket#close()","drb::drbunixsocket#close()","drb::http0::callback#close()","drb::http0::clientside#close()","drb::http0::server#close()","drb::http0::serverside#close()","dir#close()","gdbm#close()","gem::package::tarinput#close()","gem::package::taroutput#close()","gem::package::tarreader#close()","gem::package::tarreader::entry#close()","gem::package::tarwriter#close()","io#close()","iconv#close()","logger#close()","logger::logdevice#close()","multitkip::command_queue#close()","net::ftp#close()","net::imap#close()","net::telnet#close()","openssl::buffering#close()","rake::ftpuploader#close()","resolv::dns#close()","sdbm#close()","sockssocket#close()","stringio#close()","syslog::close()","tempfile#close()","tk::blt::printer#close()","tk::blt::treeview#close()","tk::blt::treeview::tagorid_methods#close()","tk::macresource::close()","tk::tclx::xpg3_msgcat#close()","tk::tcllib::widget::dialog#close()","tktextio#close()","webrick::basiclog#close()","win32::registry#close()","win32::registry::predefinedkey#close()","zlib::gzipfile#close()","zlib::zstream#close()","tempfile#close!()","dl::handle#close_enabled?()","io#close_on_exec=()","io#close_on_exec?()","basicsocket#close_read()","io#close_read()","stringio#close_read()","tktextio#close_read()","tk::blt::treeview#close_recurse()","tk::blt::treeview::tagorid_methods#close_recurse()","curses::close_screen()","tk::bwidget::tree#close_tree()","tk::bwidget::tree::node#close_tree()","basicsocket#close_write()","io#close_write()","stringio#close_write()","tktextio#close_write()","argf#closed?()","curses::closed?()","dbm#closed?()","gdbm#closed?()","gem::package::tarreader::entry#closed?()","gem::package::tarwriter#closed?()","io#closed?()","net::ftp#closed?()","sdbm#closed?()","stringio#closed?()","tktextio#closed?()","zlib::gzipfile#closed?()","zlib::zstream#closed?()","stringio#closed_read?()","stringio#closed_write?()","tk::blt::plotcomponent::element#closest()","tkctag#closest()","tk::blt::closest_point()","tk::blt::graphcommand#closest_point()","curses::clrtoeol()","curses::window#clrtoeol()","net::telnet#cmd()","openssl::engine#cmds()","fileutils::cmp()","openssl::ocsp::certificateid#cmp()","openssl::x509::name#cmp()","openssl::ocsp::certificateid#cmp_issuer()","socket::ancillarydata#cmsg_is?()","tk::itcl::code()","webrick::httpstatus::status#code()","tk::itcl::code_in_namespace()","win32ole::codepage()","win32ole::codepage=()","argf#codepoints()","io#codepoints()","string#codepoints()","stringio#codepoints()","bigdecimal#coerce()","bignum#coerce()","float#coerce()","matrix#coerce()","numeric#coerce()","openssl::bn#coerce()","tkvariable#coerce()","tkvariable#coerce()","uri::generic#coerce()","vector#coerce()","openssl::pkey::ec::group#cofactor()","tk::tktable#col_index()","tk::iwidgets::hierarchy#collapse()","array#collect()","enumerable#collect()","matrix#collect()","vector#collect()","array#collect!()","set#collect!()","vector#collect2()","enumerable#collect_concat()","rdoc::parser::ruby#collect_first_comment()","gem::indexer#collect_specs()","rake::application#collect_tasks()","rake::application#collect_tasks()","object#collect_tcltk_defs()","rdoc::tokenstream#collect_tokens()","tk::tcllib::diagrams#color()","tk::tcllib::plotchart::barchart#color()","tk::tcllib::plotchart::plot3d#color()","curses::color_content()","tk::tcllib::plotchart::xyplot#color_map()","tk::tcllib::plotchart::ganttchart#color_of_part()","curses::color_pair()","curses::color_pairs()","curses::window#color_set()","object#colorize()","tk::blt::winop#colormap()","tk::blt::winop#colormap()","tkwinfo::colormapfull()","tkwinfo::colormapfull()","tk::wm#colormapwindows()","tk::wm::colormapwindows()","curses::colors()","tk::tcllib::plotchart::barchart#colors()","tk::tcllib::plotchart::piechart#colors()","tk::tcllib::plotchart::plot3d#colors()","tk::tcllib::plotchart::radialchart#colors()","tk::tcllib::plotchart::barchart#colour()","tk::tcllib::plotchart::plot3d#colour()","tk::tcllib::plotchart::barchart#colours()","tk::tcllib::plotchart::piechart#colours()","tk::tcllib::plotchart::plot3d#colours()","tk::tcllib::plotchart::radialchart#colours()","curses::cols()","matrix#column()","ripper::filter#column()","tkgrid::column()","tkgrid::column()","tk::blt::treeview#column_activate()","tk::blt::treeview::configmethod#column_cget()","tk::tile::treeviewconfig#column_cget()","tk::treectrl::configmethod#column_cget()","tk::blt::treeview::configmethod#column_cget_strict()","tk::tile::treeviewconfig#column_cget_strict()","tk::treectrl::configmethod#column_cget_strict()","tk::blt::treeview::configmethod#column_cget_tkstring()","tk::tile::treeviewconfig#column_cget_tkstring()","tk::treectrl::configmethod#column_cget_tkstring()","tk::blt::treeview::configmethod#column_configinfo()","tk::tile::treeviewconfig#column_configinfo()","tk::treectrl::configmethod#column_configinfo()","tk::blt::treeview::configmethod#column_configure()","tk::tile::treeviewconfig#column_configure()","tk::treectrl::configmethod#column_configure()","tk::blt::treeview#column_delete()","tk::treectrl::configmethod#column_dragcget()","tk::treectrl::configmethod#column_dragcget_strict()","tk::treectrl::configmethod#column_dragcget_tkstring()","tk::treectrl::configmethod#column_dragconfiginfo()","tk::treectrl::configmethod#column_dragconfigure()","tk::blt::treeview#column_insert()","tk::blt::treeview#column_invoke()","tk::blt::treeview#column_move()","tk::blt::treeview#column_names()","tk::blt::treeview#column_nearest()","matrix::column_vector()","matrix#column_vectors()","tk::tile::treeviewconfig#columncget()","tk::tile::treeviewconfig#columncget_strict()","tk::tile::treeviewconfig#columncget_tkstring()","tk::tile::treeviewconfig#columnconfiginfo()","tkgrid::columnconfiginfo()","tkgrid::columnconfiginfo()","tk::tile::treeviewconfig#columnconfigure()","tkgrid::columnconfigure()","tkgrid::columnconfigure()","matrix::columns()","tkmulticolumnlist#columns()","tkmultilistframe#columns()","tkmultilistbox#columns()","array#combination()","pp::ppmethods#comma_breakable()","drb::extservmanager::command()","tk::blt::plotcomponent::axis#command()","tk::rbwidget::balloonhelp#command()","tk::scale#command()","tk::wm::command()","tkfont::chooser#command()","tkmulticolumnlist#command()","drb::extservmanager::command=()","gem::commandmanager#command_names()","rexml::sax2listener#comment()","rexml::streamlistener#comment()","rubyvm::sourcecodegenerator#comment()","zlib::gzipfile#comment()","rdoc::classmodule#comment=()","rdoc::codeobject#comment=()","rdoc::context::section#comment=()","rake::task#comment=()","zlib::gzipwriter#comment=()","rexml::parsers::pullevent#comment?()","rexml::element#comments()","date::commercial()","datetime::commercial()","pstore#commit()","rubyvm::sourcecodegenerator#commit()","gem::command::common_options()","array#compact()","array#compact!()","gem::indexer#compact_specs()","tk::iwidgets::hierarchy#compare()","tk::iwidgets::scrolledtext#compare()","object#compareonoff()","hash#compare_by_identity()","hash#compare_by_identity?()","fileutils::compare_file()","rexml::functions::compare_language()","fileutils::compare_stream()","encoding::compatible?()","object::syck::compile()","regexp::compile()","ruby2html::compile()","rubyvm::instructionsequence::compile()","rubyvm::instructionsequence::compile_file()","rubyvm::instructionsequence::compile_option()","rubyvm::instructionsequence::compile_option=()","object#compiled?()","gem::commands::lockcommand#complain()","optionparser::completion#complete()","optionparser::list#complete()","rdoc::classmodule#complete()","rdoc::ri::driver#complete()","rdoc::toplevel::complete()","tk::tcllib::ip_entry#complete?()","tk::tcllib::ip_entry#complete?()","win32::sspi::negotiateauth#complete_authentication()","readline::completer_quote_characters()","readline::completer_quote_characters=()","readline::completer_word_break_characters()","readline::completer_word_break_characters=()","readline::completion_append_character()","readline::completion_append_character=()","readline::completion_case_fold()","readline::completion_case_fold=()","readline::completion_proc()","readline::completion_proc=()","matrix#component()","tk::itk::archetype#component()","uri::generic#component()","uri::generic::component()","vector#component()","uri::generic#component_ary()","tk::itk::archetype#component_invoke()","tk::itk::archetype#component_obj()","tk::itk::archetype#component_path()","tk::itk::archetype#component_widget()","tk::blt::bitmap#compose()","transformation#compose()","tk::blt::bitmap#compose_with_name()","gem::indexer#compress()","gem::indexer#compress_indicies()","openssl::pkey::dh#compute_key()","tk::bwidget::notebook#compute_size()","tk::bwidget::pagesmanager#compute_size()","tk::tcllib::diagrams#computepos()","array#concat()","rexml::functions::concat()","shell::commandprocessor#concat()","string#concat()","stringscanner#concat()","irb::conf()","drb::config()","tk::tcllib::plotchart::barchart3d#config()","openssl::x509::extensionfactory#config=()","gem::config_file()","gem::configfile#config_file_name()","tk::itcl::configbody()","tk::blt::dnd#configinfo()","tk::blt::plotcomponent::axis#configinfo()","tk::blt::plotcomponent::crosshairs#configinfo()","tk::blt::plotcomponent::element#configinfo()","tk::blt::plotcomponent::gridline#configinfo()","tk::blt::plotcomponent::legend#configinfo()","tk::blt::plotcomponent::marker#configinfo()","tk::blt::plotcomponent::pen#configinfo()","tk::blt::plotcomponent::postscript#configinfo()","tk::blt::table#configinfo()","tk::blt::tabset::tab#configinfo()","tk::blt::ted#configinfo()","tk::blt::watch#configinfo()","tk::bwidget::dialog#configinfo()","tk::bwidget::listbox::item#configinfo()","tk::bwidget::messagedlg#configinfo()","tk::bwidget::tree::node#configinfo()","tk::tcllib::getstring_dialog#configinfo()","tk::tcllib::swaplist_dialog#configinfo()","tk::tcllib::widget::toolbaritem#configinfo()","tk::tile::dialog#configinfo()","tk::tktable::celltag#configinfo()","tkcomposite#configinfo()","tkfont::configinfo()","tkfont#configinfo()","tkfont::configinfo()","tkfont#configinfo()","tkfont::chooser#configinfo()","tknamespace::ensemble#configinfo()","tkplace::configinfo()","tkplace::configinfo()","tktextimage#configinfo()","tktextimage#configinfo()","tktexttag#configinfo()","tktexttag#configinfo()","tktextwindow#configinfo()","tktextwindow#configinfo()","tkxim::configinfo()","tkctagaccess#configinfo()","gem::configuration()","gem::configuration=()","json::ext::generator::state#configure()","tk::blt::dnd#configure()","tk::blt::plotcomponent::axis#configure()","tk::blt::plotcomponent::crosshairs#configure()","tk::blt::plotcomponent::element#configure()","tk::blt::plotcomponent::gridline#configure()","tk::blt::plotcomponent::legend#configure()","tk::blt::plotcomponent::marker#configure()","tk::blt::plotcomponent::pen#configure()","tk::blt::plotcomponent::postscript#configure()","tk::blt::table#configure()","tk::blt::tabset::tab#configure()","tk::blt::ted#configure()","tk::bwidget::dialog#configure()","tk::bwidget::listbox::item#configure()","tk::bwidget::messagedlg#configure()","tk::bwidget::selectfont::dialog#configure()","tk::bwidget::tree::node#configure()","tk::optionobj#configure()","tk::rbwidget::editable_listbox#configure()","tk::scale#configure()","tk::scrollbar#configure()","tk::tcllib::getstring_dialog#configure()","tk::tcllib::swaplist_dialog#configure()","tk::tcllib::widget::toolbaritem#configure()","tk::tile::dialog#configure()","tk::tile::style#configure()","tk::tktable::celltag#configure()","tk::validateconfigure#configure()","tkcomposite#configure()","tkfont::configure()","tkfont#configure()","tkfont::configure()","tkfont#configure()","tkfont::chooser#configure()","tkgrid::configure()","tkgrid::configure()","tkpack::configure()","tkpack::configure()","tkplace::configure()","tkplace::configure()","tktextimage#configure()","tktextimage#configure()","tktexttag#configure()","tktexttag#configure()","tktextwindow#configure()","tktextwindow#configure()","tkxim::configure()","tkctagaccess#configure()","tk::scale#configure_cmd()","tkfont::chooser#configure_cmd()","gem::remotefetcher#configure_connection_for_https()","gem::docmanager::configured_args()","gem::docmanager::configured_args=()","gem::specification#conflicts()","tk::tcllib::crosshair#confuginfo()","tk::tcllib::crosshair#confugure()","complex#conj()","matrix#conj()","numeric#conj()","complex#conjugate()","matrix#conjugate()","numeric#conjugate()","addrinfo#connect()","drb::drbsslsocket::sslconfig#connect()","net::ftp#connect()","openssl::ssl::sslsocket#connect()","rake::ftpuploader#connect()","socket#connect()","tk::tcllib::plotchart::ganttchart#connect()","udpsocket#connect()","win32ole::connect()","basicsocket#connect_address()","addrinfo#connect_from()","openssl::ssl::sslsocket#connect_nonblock()","socket#connect_nonblock()","addrinfo#connect_to()","gserver#connecting()","net::httpheader#connection_close?()","gem::remotefetcher#connection_for()","net::httpheader#connection_keep_alive?()","gserver#connections()","io::console()","io::console_size()","module#const_defined?()","json::const_defined_in?()","module#const_get()","win32ole::const_load()","module#const_missing()","object::const_missing()","tk::tile::const_missing()","tk::tile::const_missing()","tk::tile::const_missing()","module#const_set()","rake::application#const_warning()","rake::application#const_warning()","object#constantize_agename()","module#constants()","module::constants()","tk::vu::dial#constrain()","rss::itunesitemmodel::itunesduration#construct()","pidigitspigot#consume()","rexml::iosource#consume()","rexml::source#consume()","tk::blt::table#containers()","tk::blt::table#containers_pattern()","tk::blt::table#containers_slave()","tkwinfo::containing()","tkwinfo::containing()","rexml::functions::contains()","gem::specification#contains_requirable_file?()","rss::itunesitemmodel::itunesduration#content=()","rss::maker::itunesitemmodel::itunesdurationbase#content=()","openuri::meta#content_encoding()","httpserver::request#content_length()","net::httpheader#content_length()","webrick::httprequest#content_length()","webrick::httpresponse#content_length()","net::httpheader#content_length=()","webrick::httpresponse#content_length=()","net::httpheader#content_range()","rss::element#content_setup()","net::httpheader#content_type()","openuri::meta#content_type()","rss::atom::contentmodel::classmethods#content_type()","webrick::httprequest#content_type()","webrick::httpresponse#content_type()","net::httpheader#content_type=()","webrick::httpresponse#content_type=()","debugger__#context()","debugger__::context#context()","rexml::doctype#context()","rexml::parseexception#context()","rexml::functions::context=()","tkrttimer#continue()","tktimer#continue()","tktimer#continue()","webrick::httprequest#continue()","net::smtp::response#continue?()","net::http#continue_timeout=()","net::http#continue_timeout=()","tk::tcllib::plotchart::xyplot#contourbox()","tk::tcllib::plotchart::xyplot#contourfill()","tk::tcllib::plotchart::xyplot#contourlines()","iconv::conv()","iconv#conv()","emojitable#conversion()","csv#convert()","encoding::converter#convert()","optionparser::completion#convert()","rdoc::markup#convert()","rdoc::markup::formatter#convert()","rss::converter#convert()","rss::element#convert()","webrick::httpversion::convert()","rdoc::markup::attributemanager#convert_attrs()","rdoc::markup::formatter#convert_flow()","rdoc::markup::attributemanager#convert_html()","rdoc::markup::formatter#convert_special()","rdoc::markup::tobs#convert_special()","rdoc::markup::attributemanager#convert_specials()","rdoc::markup::formatter#convert_string()","rdoc::markup::tobs#convert_string()","rdoc::markup::tohtml#convert_string()","rss::element#converter=()","csv#converters()","object#convertible_int()","tk::blt::winop#convolve()","tk::blt::winop#convolve()","encoding::converter#convpath()","io#cooked()","object#cooked()","io#cooked!()","tk::canvas#coords()","tk::html_widget#coords()","tk::iwidgets::scrolledcanvas#coords()","tk::scale#coords()","tk::vu::dial#coords()","tkctagaccess#coords()","tk::tcllib::plotchart::coords_3d_to_pixel()","tk::tcllib::plotchart::chartmethod#coords_3d_to_pixel()","tk::tcllib::plotchart::coords_to_pixel()","tk::tcllib::plotchart::chartmethod#coords_to_pixel()","clock#coords_to_time()","fileutils::copy()","net::http#copy()","net::http#copy()","net::imap#copy()","openssl::bn#copy()","sys#copy()","tk::blt::tree::node#copy()","tk::tcllib::ctext#copy()","tk::tcllib::ico::copy()","tkphotoimage#copy()","tkphotoimage#copy()","fileutils::copy_entry()","fileutils::copy_file()","sys#copy_files()","openssl::ocsp::basicresponse#copy_nonce()","fileutils::copy_stream()","io::copy_stream()","rdoc::markup::attributemanager#copy_string()","tk::blt::tree::node#copy_to()","process::status#coredump?()","version::correct?()","gem::remotefetcher#correct_for_windows_path()","bigmath#cos()","cmath::cos()","math::cos()","cmath::cos!()","cmath::cosh()","math::cosh()","cmath::cosh!()","array#count()","board#count()","enumerable#count()","gc::count()","rexml::functions::count()","string#count()","objectspace::count_objects()","observable#count_observers()","vector#covector()","range#cover?()","rdoc::stats#coverage_level=()","fileutils::cp()","object#cp()","fileutils::cp_r()","net::smtp::response#cram_md5_challenge()","zlib::gzipfile#crc()","tk::html_widget::crc32()","zlib::crc32()","zlib::crc32_combine()","tk::blt::crc32_data()","tk::blt::crc32_file()","zlib::crc_table()","dl::cstructbuilder::create()","demobasic::create()","demodialog::create()","demodnd::create()","demomanager::create()","demoselect::create()","demotree::create()","exports::create()","gem::requirement::create()","gem::requirement::create()","irb::slex#create()","net::imap#create()","openssl::ocsp::response::create()","openssl::pkcs12::create()","resolv::dns::name::create()","resolv::ipv4::create()","resolv::ipv6::create()","tk::blt::plotcomponent::marker::create()","tk::blt::vector::create()","tk::bwidget::messagedlg#create()","tk::bwidget::passwddlg#create()","tk::bwidget::progressdlg#create()","tk::bwidget::selectcolor::dialog#create()","tk::bwidget::selectfont#create()","tk::bwidget::selectfont::dialog#create()","tk::bwidget::widget::create()","tk::canvas#create()","tk::icons::create()","tk::iwidgets::scrolledcanvas#create()","tkconsole::create()","tktextwindow#create()","tktextwindow#create()","tkcitem::create()","tkctext::create()","tkctext::create()","tkcwindow::create()","tkcwindow::create()","version::create()","win32::registry#create()","win32::registry::create()","tktextwindow#create=()","tktextwindow#create=()","ixmldomdocument#createattribute()","microsoft_freethreadedxmldom_1_0#createattribute()","microsoft_xmldom_1_0#createattribute()","ixmldomdocument#createcdatasection()","microsoft_freethreadedxmldom_1_0#createcdatasection()","microsoft_xmldom_1_0#createcdatasection()","ixmldomdocument#createcomment()","microsoft_freethreadedxmldom_1_0#createcomment()","microsoft_xmldom_1_0#createcomment()","ixmldomdocument#createdocumentfragment()","microsoft_freethreadedxmldom_1_0#createdocumentfragment()","microsoft_xmldom_1_0#createdocumentfragment()","ixmldomdocument#createelement()","microsoft_freethreadedxmldom_1_0#createelement()","microsoft_xmldom_1_0#createelement()","msxml#createelement()","ixmldomdocument#createentityreference()","microsoft_freethreadedxmldom_1_0#createentityreference()","microsoft_xmldom_1_0#createentityreference()","tk::tcllib::ntext#creatematchpatterns()","ixmldomdocument#createnode()","microsoft_freethreadedxmldom_1_0#createnode()","microsoft_xmldom_1_0#createnode()","ixmldomdocument#createprocessinginstruction()","microsoft_freethreadedxmldom_1_0#createprocessinginstruction()","microsoft_xmldom_1_0#createprocessinginstruction()","ixmldomdocument#createtextnode()","microsoft_freethreadedxmldom_1_0#createtextnode()","microsoft_xmldom_1_0#createtextnode()","tk::trofs::create_archive()","tkfont#create_asciifont()","tkfont#create_asciifont()","dl::importer#create_carried_function()","dl::carriedfunction#create_carrier()","tkfont#create_compoundfont()","tkfont#create_compoundfont()","tk::blt::table#create_container()","tkfont::create_copy()","tkfont::create_copy()","tcltkip#create_dummy_encoding_for_tk()","openssl::x509::extensionfactory#create_ext()","openssl::x509::extensionfactory#create_ext_from_array()","openssl::x509::extensionfactory#create_ext_from_hash()","openssl::x509::extensionfactory#create_ext_from_string()","openssl::x509::extensionfactory#create_extension()","rexml::sourcefactory::create_from()","knights_tour#create_gui()","win32ole::create_guid()","object#create_header()","tk::itcl::create_itcl_class()","tk::canvas#create_itemobj_from_id()","tkfont#create_kanjifont()","tkfont#create_kanjifont()","tkfont#create_latinfont()","tkfont#create_latinfont()","webrick::utils::create_listeners()","tk::itcl::create_local_obj()","object#create_makefile()","clock#create_pie()","rake::task#create_rule()","rake::taskmanager#create_rule()","button_with_frame#create_self()","tk::bwidget::dialog#create_self()","tk::bwidget::progressdlg#create_self()","tk::bwidget::selectcolor::dialog#create_self()","tk::bwidget::selectfont::dialog#create_self()","tk::rbwidget::editable_listbox#create_self()","tk::tcllib::khim#create_self()","tktree#create_self()","webrick::utils::create_self_signed_cert()","remotetkip#create_slave()","tcltkip#create_slave()","net::pop3::create_ssl_params()","net::pop3::create_ssl_params()","net::pop3::create_ssl_params()","net::pop3::create_ssl_params()","irb::slex::node#create_subnode()","multitkip::create_table()","multitkip::create_table()","multitkip::create_table()","multitkip::create_table()","dl::importer#create_temp_function()","tk::blt::plotcomponent::marker::create_type()","dl::importer#create_value()","object#create_win32ole_makefile()","win32::registry#created?()","gem::configfile#credentials_path()","openssl::x509::extension#critical=()","openssl::x509::extension#critical?()","openssl::x509::extensionfactory#crl=()","openssl::pkcs7#crls()","openssl::pkcs7#crls=()","curses::crmode()","rdoc::markup::tohtmlcrossref#cross_reference()","tk::tcllib::crosshair::crosshair()","tk::tcllib::crosshair#crosshair_cget()","tk::tcllib::crosshair#crosshair_configinfo()","tk::tcllib::crosshair#crosshair_configure()","tk::tcllib::crosshair#crosshair_current_configinfo()","tk::tcllib::crosshair#crosshair_off()","tk::tcllib::crosshair#crosshair_on()","tk::tcllib::crosshair#crosshair_track_off()","tk::tcllib::crosshair#crosshair_track_on()","tk::blt::crosshairs()","tk::blt::graphcommand#crosshairs()","tk::blt::plotcomponent#crosshairs_cget()","tk::blt::plotcomponent#crosshairs_cget_strict()","tk::blt::plotcomponent#crosshairs_cget_tkstring()","tk::blt::plotcomponent#crosshairs_configinfo()","tk::blt::plotcomponent#crosshairs_configure()","tk::blt::plotcomponent#crosshairs_off()","tk::blt::plotcomponent#crosshairs_on()","tk::blt::plotcomponent#crosshairs_toggle()","string#crypt()","object#crypt_by_password()","date#ctime()","file::ctime()","file#ctime()","file::stat#ctime()","pathname#ctime()","time#ctime()","iconv::ctlmethods()","openssl::engine#ctrl_cmd()","dl::cfunc#ctype()","dl::cfunc#ctype=()","fiber::current()","rdoc::rdoc::current()","thread::current()","tk::busy#current()","tk::iwidgets::hierarchy#current()","tk::tile::tcombobox#current()","tk::tile::tcombobox#current()","tk::tile::tspinbox#current()","tk::tile::tspinbox#current()","rdoc::rdoc::current=()","tk::tile::tcombobox#current=()","tk::tile::tcombobox#current=()","tk::tile::tspinbox#current=()","tk::tile::tspinbox#current=()","tk::blt::plotcomponent#current_axis_configinfo()","tk::blt::plotcomponent#current_bar_configinfo()","tk::blt::treeview::configmethod#current_button_configinfo()","tk::blt::treeview::configmethod#current_column_configinfo()","tk::tile::treeviewconfig#current_column_configinfo()","tk::treectrl::configmethod#current_column_configinfo()","tk::treectrl::configmethod#current_column_dragconfiginfo()","tk::tile::treeviewconfig#current_columnconfiginfo()","tk::blt::dnd#current_configinfo()","tk::blt::plotcomponent::axis#current_configinfo()","tk::blt::plotcomponent::crosshairs#current_configinfo()","tk::blt::plotcomponent::element#current_configinfo()","tk::blt::plotcomponent::gridline#current_configinfo()","tk::blt::plotcomponent::legend#current_configinfo()","tk::blt::plotcomponent::marker#current_configinfo()","tk::blt::plotcomponent::pen#current_configinfo()","tk::blt::plotcomponent::postscript#current_configinfo()","tk::blt::table#current_configinfo()","tk::blt::tabset::tab#current_configinfo()","tk::blt::ted#current_configinfo()","tk::bwidget::listbox::item#current_configinfo()","tk::bwidget::tree::node#current_configinfo()","tk::tcllib::crosshair#current_configinfo()","tk::tcllib::widget::toolbaritem#current_configinfo()","tk::tktable::celltag#current_configinfo()","tkfont#current_configinfo()","tkfont::current_configinfo()","tkfont::current_configinfo()","tkfont#current_configinfo()","tkfont::chooser#current_configinfo()","tkplace::current_configinfo()","tkplace::current_configinfo()","tktextimage#current_configinfo()","tktextimage#current_configinfo()","tktexttag#current_configinfo()","tktexttag#current_configinfo()","tktextwindow#current_configinfo()","tktextwindow#current_configinfo()","tkxim::current_configinfo()","tkctagaccess#current_configinfo()","tk::blt::plotcomponent#current_crosshairs_configinfo()","tk::treectrl::configmethod#current_debug_configinfo()","tk::treectrl::configmethod#current_dragimage_configinfo()","tk::blt::plotcomponent#current_element_configinfo()","tk::treectrl::configmethod#current_element_configinfo()","tk::blt::treeview::configmethod#current_entry_configinfo()","tk::optionmenubutton#current_entryconfiginfo()","tk::optionmenubutton#current_entryconfiginfo()","tk::blt::plotcomponent#current_gridline_configinfo()","prettyprint#current_group()","tk::tile::treeviewconfig#current_heading_configinfo()","tk::tile::treeviewconfig#current_headingconfiginfo()","tk::iwidgets::scrolledtext#current_image_configinfo()","tk::treectrl::configmethod#current_item_configinfo()","tk::treectrl::configmethod#current_item_element_configinfo()","tk::blt::table#current_itemconfiginfo()","tk::tile::treeviewconfig#current_itemconfiginfo()","tk::blt::plotcomponent#current_legend_configinfo()","rexml::iosource#current_line()","rexml::source#current_line()","tk::blt::htext#current_line()","tk::blt::plotcomponent#current_line_configinfo()","tk::blt::plotcomponent#current_marker_configinfo()","tk::treectrl::configmethod#current_marquee_configinfo()","tk::optionmenubutton#current_menuconfiginfo()","tk::optionmenubutton#current_menuconfiginfo()","tk::treectrl::configmethod#current_notify_configinfo()","tk::panedwindow#current_pane_configinfo()","tk::panedwindow#current_pane_configinfo()","tk::tile::tpaned#current_pane_configinfo()","tk::panedwindow#current_paneconfiginfo()","tk::panedwindow#current_paneconfiginfo()","tk::tile::tpaned#current_paneconfiginfo()","tk::blt::plotcomponent#current_pen_configinfo()","tk::blt::plotcomponent#current_postscript_configinfo()","rake::taskmanager#current_scope()","rdoc::context#current_section()","drb::current_server()","tk::blt::treeview::configmethod#current_sort_configinfo()","tk::blt::dragdrop#current_source_configinfo()","tktimer#current_status()","tktimer#current_status()","tk::treectrl::configmethod#current_style_configinfo()","tk::tile::treeviewconfig#current_tag_configinfo()","tk::tktable::configmethod#current_tag_configinfo()","tktexttagconfig#current_tag_configinfo()","tk::tile::treeviewconfig#current_tagconfiginfo()","tk::blt::treeview::configmethod#current_text_configinfo()","tk::blt::dnd#current_token_configinfo()","tk::blt::dnd#current_token_windowconfiginfo()","tk::tktable::configmethod#current_window_configinfo()","tktexttagconfig#current_window_configinfo()","tk::blt::plotcomponent#current_x2axis_configinfo()","tk::blt::plotcomponent#current_xaxis_configinfo()","tk::blt::plotcomponent#current_y2axis_configinfo()","tk::blt::plotcomponent#current_yaxis_configinfo()","tk::tcllib::diagrams#currentpos()","proc#curry()","curses::curs_set()","tk::blt::treeview#curselection()","tk::iwidgets::scrolledlistbox#curselection()","tk::iwidgets::selectionbox#curselection()","tk::iwidgets::selectiondialog#curselection()","tk::listbox#curselection()","tk::tktable#curselection()","tk::tktable#curselection=()","tk::entry#cursor()","tk::entry#cursor=()","tk::iwidgets::entryfield#cursor=()","tk::iwidgets::promptdialog#cursor=()","tk::iwidgets::spinner#cursor=()","tk::cursor_display()","tk::tcllib::cursor::cursor_display()","tk::tcllib::cursor::cursor_propagate()","tkwindow#cursor_propagate()","tk::tcllib::cursor::cursor_restore()","tkwindow#cursor_restore()","object#cursor_window()","tk::tktable#curvalue()","tk::tktable#curvalue=()","openssl::pkey::ec::group#curve_name()","curses::window#curx()","curses::window#cury()","tk::tcllib::ctext#cut()","rdoc::generator::markup#cvs_url()","rdoc::toplevel#cvs_url()","date#cwday()","date#cweek()","date#cwyear()","array#cycle()","enumerable#cycle()","matrix::eigenvaluedecomposition#d()","process::daemon()","tkpalette::darken()","ixmldomcdatasection#data()","ixmldomcharacterdata#data()","ixmldomcomment#data()","ixmldomprocessinginstruction#data()","ixmldomtext#data()","myelem#data()","net::smtp#data()","net::smtp#data()","openssl::config#data()","resolv::dns::resource::txt#data()","socket::ancillarydata#data()","socket::option#data()","tk::blt::bitmap::data()","tkphotoimage#data()","tkphotoimage#data()","ixmldomcdatasection#data=()","ixmldomcharacterdata#data=()","ixmldomcomment#data=()","ixmldomprocessinginstruction#data=()","ixmldomtext#data=()","openssl::pkcs7#data=()","ixmldomattribute#datatype()","ixmldomcdatasection#datatype()","ixmldomcharacterdata#datatype()","ixmldomcomment#datatype()","ixmldomdocument#datatype()","ixmldomdocumentfragment#datatype()","ixmldomdocumenttype#datatype()","ixmldomelement#datatype()","ixmldomentity#datatype()","ixmldomentityreference#datatype()","ixmldomnode#datatype()","ixmldomnotation#datatype()","ixmldomprocessinginstruction#datatype()","ixmldomtext#datatype()","ixtlruntime#datatype()","microsoft_freethreadedxmldom_1_0#datatype()","microsoft_xmldom_1_0#datatype()","ixmldomattribute#datatype=()","ixmldomcdatasection#datatype=()","ixmldomcharacterdata#datatype=()","ixmldomcomment#datatype=()","ixmldomdocument#datatype=()","ixmldomdocumentfragment#datatype=()","ixmldomdocumenttype#datatype=()","ixmldomelement#datatype=()","ixmldomentity#datatype=()","ixmldomentityreference#datatype=()","ixmldomnode#datatype=()","ixmldomnotation#datatype=()","ixmldomprocessinginstruction#datatype=()","ixmldomtext#datatype=()","ixtlruntime#datatype=()","microsoft_freethreadedxmldom_1_0#datatype=()","microsoft_xmldom_1_0#datatype=()","zlib::zstream#data_type()","tk::frame::database_class()","tk::tcllib::tooltip::database_class()","tk::toplevel::database_class()","tkcomposite#database_class()","tk::frame#database_classname()","tk::frame::database_classname()","tk::tcllib::tooltip::database_classname()","tk::toplevel::database_classname()","tkcomposite#database_classname()","tk::tcllib::plotchart::plotseries#dataconfig()","tk::tcllib::plotchart::polarplot#dataconfig()","tk::tcllib::plotchart::polarplot#dataconfig()","tk::tcllib::plotchart::xyplot#dataconfig()","gem::datadir()","gem::specification#date()","rake::ftpfile::date()","gem::specification#date=()","xmlrpc::convert::datetime()","logger#datetime_format()","logger#datetime_format=()","date#day()","time#day()","xmlrpc::datetime#day=()","date#day_fraction()","tk::canvas#dchars()","tk::iwidgets::scrolledcanvas#dchars()","tkctagaccess#dchars()","array#dclone()","fixnum#dclone()","float#dclone()","object#dclone()","symbol#dclone()","tk::blt::plotcomponent::element#deactivate()","tk::blt::plotcomponent::legend#deactivate()","tk::blt::watch#deactivate()","tk::iwidgets::shell#deactivate()","rexml::parsers::sax2parser#deafen()","gem::streamui#debug()","logger#debug()","net::imap::debug()","openssl::debug()","tk::iwidgets::hierarchy#debug()","tk::iwidgets::scrolledtext#debug()","webrick::basiclog#debug()","net::imap::debug=()","openssl::debug=()","shell#debug=()","tk::iwidgets::hierarchy#debug=()","tk::iwidgets::scrolledtext#debug=()","irb::context#debug?()","logger#debug?()","rubylex#debug?()","webrick::basiclog#debug?()","tk::treectrl::configmethod#debug_cget()","tk::treectrl::configmethod#debug_cget_strict()","tk::treectrl::configmethod#debug_cget_tkstring()","debugger__::context#debug_command()","tk::treectrl::configmethod#debug_configinfo()","tk::treectrl::configmethod#debug_configure()","debugger__::context#debug_eval()","debugger__::context#debug_funcname()","irb::context#debug_level=()","debugger__::context#debug_method_info()","rdoc::generator::darkfish#debug_msg()","net::smtp#debug_output=()","net::smtp#debug_output=()","debugger__::context#debug_print_help()","debugger__::context#debug_silent_eval()","debugger__#debug_thread_info()","debugger__::context#debug_variable_info()","tk::bwidget::widget::declare()","openssl::asn1::decode()","rexml::encoding#decode()","uri::escape#decode()","xmlrpc::base64::decode()","base64#decode64()","openssl::asn1::decode_all()","net::imap::decode_utf7()","uri::decode_www_form()","uri::decode_www_form_component()","xmlrpc::base64#decoded()","openssl::cipher#decrypt()","openssl::pkcs7#decrypt()","rexml::parent#deep_clone()","multitkip#def_alias()","multitkip::def_alias()","multitkip#def_alias()","multitkip::def_alias()","multitkip::def_alias()","multitkip::def_alias()","multitkip#def_alias()","multitkip#def_alias()","rss::maker::base#def_array_element()","rss::maker::atompersons#def_atom_persons()","rss::maker::atomtextconstruct#def_atom_text_construct()","shell::commandprocessor::def_builtin_commands()","erb#def_class()","rss::itunesmodelutils#def_class_accessor()","rss::maker::itunesbasemodel#def_class_accessor()","rss::maker::base#def_classed_element()","rss::maker::base#def_classed_element_without_accessor()","rss::maker::base#def_classed_elements()","rss::converter#def_convert()","rss::element#def_corresponded_attr_reader()","rss::element#def_corresponded_attr_writer()","rss::maker::itunesbasemodel#def_csv_accessor()","rss::maker::base#def_csv_element()","forwardable#def_delegator()","singleforwardable#def_delegator()","forwardable#def_delegators()","singleforwardable#def_delegators()","e2mm::def_e2message()","e2mm::def_e2message()","exception2messagemapper#def_e2message()","exception2messagemapper#def_e2message()","rss::itunesmodelutils#def_element_class_accessor()","rss::itunesmodelutils#def_elements_class_accessor()","rss::maker::itunesbasemodel#def_elements_class_accessor()","rss::converter#def_else_enc()","erb::defmethod::def_erb_method()","e2mm::def_exception()","e2mm::def_exception()","exception2messagemapper#def_exception()","exception2messagemapper#def_exception()","irb::contextextender::def_extend_command()","irb::contextextender::def_extend_command()","irb::extendcommandbundle::def_extend_command()","irb::extendcommandbundle::def_extend_command()","optionparser#def_head_option()","rss::converter#def_iconv_convert()","forwardable#def_instance_delegator()","forwardable#def_instance_delegators()","object#def_intern()","erb#def_method()","erb#def_module()","object#def_name_to_int()","irb::notifier::def_notifier()","irb::notifier::compositenotifier#def_notifier()","optionparser#def_option()","rubyvm::sourcecodegenerator::def_options()","rubyvm::vpath::def_options()","rss::maker::base#def_other_element()","rss::maker::base#def_other_element_without_accessor()","irb::methodextender#def_post_proc()","irb::methodextender#def_pre_proc()","curses::def_prog_mode()","object#def_puzzleswitch_proc()","irb::slex#def_rule()","irb::slex#def_rules()","rss::converter#def_same_enc()","singleforwardable#def_single_delegator()","singleforwardable#def_single_delegators()","shell::def_system_command()","shell::commandprocessor::def_system_command()","optionparser#def_tail_option()","rss::converter#def_to_euc_jp_from_iso_2022_jp()","rss::converter#def_to_euc_jp_from_shift_jis()","rss::converter#def_to_euc_jp_from_utf_8()","rss::converter#def_to_iso_2022_jp_from_euc_jp()","rss::converter#def_to_iso_8859_1_from_utf_8()","rss::converter#def_to_shift_jis_from_euc_jp()","rss::converter#def_to_shift_jis_from_utf_8()","rss::converter#def_to_utf_8_from_euc_jp()","rss::converter#def_to_utf_8_from_iso_8859_1()","rss::converter#def_to_utf_8_from_shift_jis()","rubytoken::def_token()","rss::converter#def_uconv_convert_if_can()","tkmsgcatalog::def_unknown_proc()","tkmsgcatalog#def_unknown_proc()","tkmsgcatalog::def_unknown_proc()","tkmsgcatalog#def_unknown_proc()","rss::maker::itunesbasemodel#def_yes_clean_other_accessor()","rss::maker::itunesbasemodel#def_yes_other_accessor()","gem::requirement::default()","gem::requirement::default()","hash#default()","rexml::xmldecl::default()","tk::iwidgets::buttonbox#default()","tk::iwidgets::dialogshell#default()","tk::iwidgets::promptdialog#default()","win32ole_param#default()","hash#default=()","tk::tile::keynav::defaultbutton()","drb::drbserver::default_acl()","drb::drbserver::default_argc_limit()","gem::default_bindir()","io::default_console_size()","gem::default_dir()","tkvariable#default_element_value_type()","tkvariable#default_element_value_type()","multitkip#default_encoding()","multitkip#default_encoding()","multitkip#default_encoding()","multitkip#default_encoding()","multitkip#default_encoding=()","multitkip#default_encoding=()","multitkip#default_encoding=()","multitkip#default_encoding=()","win32ole_type#default_event_sources()","gem::default_exec_format()","gem::specification#default_executable()","encoding::default_external()","encoding::default_external=()","object#default_handler()","drb::drbserver::default_id_conv()","encoding::default_internal()","encoding::default_internal=()","drb::drbserver::default_load_limit()","multitkip::default_master?()","multitkip::default_master?()","multitkip::default_master?()","multitkip::default_master?()","object#default_merge_branch()","win32ole_type#default_ole_types()","rdoc::ri::driver::default_options()","rss::parser#default_parser()","rss::parser#default_parser=()","gem::default_path()","net::pop3::default_pop3_port()","net::pop3::default_pop3_port()","net::pop3::default_pop3_port()","net::pop3::default_pop3_port()","net::pop3::default_pop3s_port()","net::pop3::default_pop3s_port()","net::pop3::default_pop3s_port()","net::pop3::default_pop3s_port()","net::http::default_port()","net::http::default_port()","net::pop3::default_port()","net::pop3::default_port()","net::pop3::default_port()","net::pop3::default_port()","net::smtp::default_port()","net::smtp::default_port()","uri::generic#default_port()","uri::generic::default_port()","hash#default_proc()","tkvariable#default_proc()","tkvariable#default_proc()","hash#default_proc=()","shell#default_record_separator()","shell#default_record_separator=()","gem::default_rubygems_dirs()","drb::drbserver::default_safe_level()","gem::default_sources()","object#default_src_encoding()","net::smtp::default_ssl_context()","net::smtp::default_ssl_context()","net::smtp::default_ssl_port()","net::smtp::default_ssl_port()","net::smtp::default_submission_port()","net::smtp::default_submission_port()","shell#default_system_path()","shell#default_system_path=()","gem::default_system_source_cache_dir()","rdoc::options#default_title=()","net::smtp::default_tls_port()","net::smtp::default_tls_port()","gem::default_user_source_cache_dir()","gem::specification#default_value()","tkvariable#default_value()","tkvariable#default_value()","tkvariable#default_value=()","tkvariable#default_value=()","tkvariable#default_value_type()","tkvariable#default_value_type()","tkvariable#default_value_type=()","tkvariable#default_value_type=()","tk#default_widget_set()","tk#default_widget_set=()","rdoc::task#defaults()","gem::command#defaults_str()","gem::commands::sourcescommand#defaults_str()","gem::packagetask#define()","optionparser#define()","rdoc::task#define()","rake::packagetask#define()","tk::bwidget::widget::define()","mutex_m::define_aliases()","sync_m::define_aliases()","sync_m::define_aliases()","win32comgen#define_class()","tk::tile::dialog::define_dialog_type()","objectspace::define_finalizer()","optionparser#define_head()","win32comgen#define_include()","win32comgen#define_initialize()","win32comgen#define_instance_variables()","win32comgen#define_method_missing()","win32comgen#define_module()","rake::altsystem#define_module_function()","object#define_posix_props()","object#define_singleton_method()","optionparser#define_tail()","rake::task#define_task()","rake::taskmanager#define_task()","rdoc::context#defined_in?()","ixmldomattribute#definition()","ixmldomcdatasection#definition()","ixmldomcharacterdata#definition()","ixmldomcomment#definition()","ixmldomdocument#definition()","ixmldomdocumentfragment#definition()","ixmldomdocumenttype#definition()","ixmldomelement#definition()","ixmldomentity#definition()","ixmldomentityreference#definition()","ixmldomnode#definition()","ixmldomnotation#definition()","ixmldomprocessinginstruction#definition()","ixmldomtext#definition()","ixtlruntime#definition()","microsoft_freethreadedxmldom_1_0#definition()","microsoft_xmldom_1_0#definition()","rdoc::attr#definition()","rdoc::normalclass#definition()","rdoc::normalmodule#definition()","rdoc::singleclass#definition()","gem::deflate()","zlib::deflate()","zlib::deflate::deflate()","zlib::deflate#deflate()","openssl::pkey::ec::group#degree()","tk::blt::tree::node#degree()","tk::wm#deiconify()","tk::wm::deiconify()","tk::panedwindow#del()","tk::panedwindow#del()","tk::tcllib::tooltip::delay()","tk::tcllib::tooltip::delay=()","curses::delch()","curses::window#delch()","forwardable#delegate()","singleforwardable#delegate()","tkcomposite#delegate()","tkcomposite#delegate_alias()","delegator::delegating_block()","array#delete()","cgi::session#delete()","cgi::session::filestore#delete()","cgi::session::memorystore#delete()","cgi::session::nullstore#delete()","cgi::session::pstore#delete()","csv::row#delete()","csv::table#delete()","dbm#delete()","dir::delete()","env::delete()","file::delete()","gdbm#delete()","hash#delete()","irb::jobmanager#delete()","multitkip#delete()","multitkip#delete()","multitkip#delete()","multitkip#delete()","net::ftp#delete()","net::http#delete()","net::http#delete()","net::httpheader#delete()","net::imap#delete()","net::popmail#delete()","pstore#delete()","pathname#delete()","prettyprint::groupqueue#delete()","rexml::parent#delete()","remotetkip#delete()","rinda::tuplebag#delete()","rinda::tuplebag::tuplebin#delete()","sdbm#delete()","set#delete()","string#delete()","sys#delete()","tcltkip#delete()","tempfile#delete()","tk::blt::dnd::delete()","tk::blt::plotcomponent::axis#delete()","tk::blt::plotcomponent::element#delete()","tk::blt::plotcomponent::marker#delete()","tk::blt::plotcomponent::pen#delete()","tk::blt::table#delete()","tk::blt::tabset#delete()","tk::blt::tabset::tab#delete()","tk::blt::tree::node#delete()","tk::blt::tree::tag#delete()","tk::blt::treeview#delete()","tk::blt::treeview::tagorid_methods#delete()","tk::blt::vector#delete()","tk::blt::watch#delete()","tk::bwidget::buttonbox#delete()","tk::bwidget::dynamichelp::delete()","tk::bwidget::listbox#delete()","tk::bwidget::listbox::item#delete()","tk::bwidget::notebook#delete()","tk::bwidget::pagesmanager#delete()","tk::bwidget::panelframe#delete()","tk::bwidget::statusbar#delete()","tk::bwidget::tree#delete()","tk::bwidget::tree::node#delete()","tk::canvas#delete()","tk::entry#delete()","tk::icons::delete()","tk::icons#delete()","tk::iwidgets::buttonbox#delete()","tk::iwidgets::checkbox#delete()","tk::iwidgets::dialogshell#delete()","tk::iwidgets::entryfield#delete()","tk::iwidgets::hierarchy#delete()","tk::iwidgets::menubar#delete()","tk::iwidgets::notebook#delete()","tk::iwidgets::optionmenu#delete()","tk::iwidgets::panedwindow#delete()","tk::iwidgets::promptdialog#delete()","tk::iwidgets::radiobox#delete()","tk::iwidgets::scrolledcanvas#delete()","tk::iwidgets::scrolledlistbox#delete()","tk::iwidgets::scrolledtext#delete()","tk::iwidgets::selectionbox#delete()","tk::iwidgets::selectiondialog#delete()","tk::iwidgets::spinner#delete()","tk::iwidgets::tabnotebook#delete()","tk::iwidgets::tabset#delete()","tk::iwidgets::toolbar#delete()","tk::macresource::delete()","tk::menu#delete()","tk::optionmenubutton#delete()","tk::optionmenubutton#delete()","tk::panedwindow#delete()","tk::panedwindow#delete()","tk::rbwidget::alignbox#delete()","tk::tcllib::tkpiechart::pie#delete()","tk::tcllib::tkpiechart::slice#delete()","tk::tcllib::widget::panelframe#delete()","tk::tcllib::widget::panelframe#delete()","tk::tcllib::widget::statusbar#delete()","tk::tcllib::widget::toolbar#delete()","tk::tcllib::widget::toolbaritem#delete()","tk::tktable::celltag#delete()","tk::winregistry::delete()","tk::winico#delete()","tkfont#delete()","tkfont#delete()","tkimage#delete()","tkmulticolumnlist#delete()","tkmultilistframe#delete()","tkmultilistbox#delete()","tktextwin#delete()","tkcitem#delete()","tkctag#delete()","webrick::httpserver::mounttable#delete()","win32::registry#delete()","yaml::dbm#delete()","net::popmail#delete!()","string#delete!()","set#delete?()","ixmldomcdatasection#deletedata()","ixmldomcharacterdata#deletedata()","ixmldomcomment#deletedata()","ixmldomtext#deletedata()","tk::tktable#delete_active()","net::pop3::delete_all()","net::pop3#delete_all()","net::pop3#delete_all()","net::pop3::delete_all()","net::pop3#delete_all()","net::pop3#delete_all()","net::pop3::delete_all()","net::pop3::delete_all()","sys#delete_all()","array#delete_at()","rexml::parent#delete_at()","tktimer#delete_at()","tktimer#delete_at()","rexml::element#delete_attribute()","irb::delete_caller()","multitkip#delete_cmd()","multitkip#delete_cmd()","multitkip#delete_cmd()","multitkip::delete_cmd()","multitkip::delete_cmd()","multitkip::delete_cmd()","multitkip::delete_cmd()","multitkip#delete_cmd()","tk::tktable#delete_cols()","chashdir#delete_crl()","rexml::element#delete_element()","tk::iwidgets::combobox#delete_entry()","openstruct#delete_field()","tk::winico#delete_from_taskbar()","tk::tcllib::ctext#delete_highlight_class()","array#delete_if()","csv::row#delete_if()","csv::table#delete_if()","dbm#delete_if()","env::delete_if()","gdbm#delete_if()","hash#delete_if()","rexml::parent#delete_if()","sdbm#delete_if()","set#delete_if()","yaml::dbm#delete_if()","tk::itcl::delete_itcl_class()","tk::itcl::delete_itcl_object()","win32::registry#delete_key()","rdoc::rubygemshook#delete_legacy_args()","tk::iwidgets::combobox#delete_list()","tk::tcllib::chatwidget#delete_name()","rexml::element#delete_namespace()","tk::itcl::delete_namespace()","observable#delete_observer()","observable#delete_observers()","webrick::httpauth::htdigest#delete_passwd()","webrick::httpauth::htpasswd#delete_passwd()","tktimer#delete_procs()","tktimer#delete_procs()","tk::tktable#delete_rows()","multitkip::delete_slaves()","multitkip#delete_slaves()","multitkip::delete_slaves()","multitkip::delete_slaves()","multitkip::delete_slaves()","multitkip#delete_slaves()","multitkip#delete_slaves()","multitkip#delete_slaves()","tk::tcllib::tkpiechart::pie#delete_slice()","tk::blt::dnd::delete_source()","tk::blt::dnd::delete_target()","rinda::tuplebag#delete_unless_alive()","win32::registry#delete_value()","multitkip#deleted?()","multitkip#deleted?()","multitkip#deleted?()","multitkip#deleted?()","net::popmail#deleted?()","remotetkip#deleted?()","tcltkip#deleted?()","curses::deleteln()","curses::window#deleteln()","tktree#delitem()","tk::scrollbar#delta()","tk::canvas#deltag()","tkctagaccess#deltag()","object#demobitmaps()","object#demoexploreraux()","object#demoexplorerdetails()","object#demoexplorerlargeicons()","object#demoexplorerlist()","object#demoexplorersmallicons()","object#demohelpcontents()","object#demohelpcontents2()","object#demoimovie()","object#demointernetoptions()","object#demointernetoptions_2()","object#demolayout()","object#demomailwasher()","object#demooutlookfolders()","object#demooutlooknewsgroup()","object#demooutlooknewsgroup2()","object#demorandom()","object#demorandom2()","complex#denominator()","float#denominator()","integer#denominator()","integer#denominator()","numeric#denominator()","rational#denominator()","object#depend_rules()","gem::specification#dependencies()","gem::uninstaller#dependencies_ok?()","gem::dependencylist#dependency_order()","gem::specification#dependent_gems()","gem::specification#dependent_specs()","gem::deprecate::deprecate()","rake::application#deprecate()","rake::application#deprecate()","ixtlruntime#depth()","json::ext::generator::state#depth()","tk::blt::tree::node#depth()","tkwinfo::depth()","tkwinfo::depth()","json::ext::generator::state#depth=()","prettyprint::groupqueue#deq()","queue#deq()","sizedqueue#deq()","webrick::httputils::dequote()","rubyvm::yarvdocgenerator#desc()","rubyvm::yarvdocgenerator#desc_en()","rubyvm::yarvdocgenerator#desc_ja()","pathname#descend()","gem::command#description()","rdoc::generator::markup#description()","gem::specification#description=()","tk::iwidgets::checkbox#deselect()","tk::iwidgets::radiobox#deselect()","tk::radiobutton#deselect()","tk::radiobutton#deselect()","encoding::converter#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding()","encoding::undefinedconversionerror#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding_name()","encoding::undefinedconversionerror#destination_encoding_name()","tk::blt::vector::destroy()","tk::blt::vector#destroy()","tk::bwidget::widget::destroy()","tk::rbwidget::balloonhelp#destroy()","tk::root::destroy()","tk::tktable::celltag#destroy()","tk::winico#destroy()","tktextio#destroy()","tktextmark#destroy()","tktextmark#destroy()","tktexttag#destroy()","tktexttag#destroy()","tkcitem#destroy()","tkctag#destroy()","matrix#det()","matrix::lupdecomposition#det()","matrix#det_e()","process::detach()","tk::blt::detach_bgexec()","openssl::pkcs7#detached()","openssl::pkcs7#detached=()","openssl::pkcs7#detached?()","enumerable#detect()","vcs::detect()","object::syck::resolver#detect_implicit()","psych::detect_implicit()","syck::detect_implicit()","syck::detect_implicit()","matrix#determinant()","matrix::lupdecomposition#determinant()","matrix#determinant_e()","tk::tcllib::plotchart::determine_scale()","tk::tcllib::plotchart::chartmethod#determine_scale()","file::stat#dev()","file::stat#dev_major()","file::stat#dev_minor()","gem::specification#development_dependencies()","jacobian#dfdxi()","openssl::pkey::ec#dh_compute_key()","matrix::diagonal()","matrix#diagonal?()","tk::bwidget::selectcolor#dialog()","tk::tcllib::diagrams#diamond()","object#diff2index()","set#difference()","digest::class::digest()","digest::instance#digest()","openssl::digest::digest()","openssl::engine#digest()","openssl::hmac::digest()","openssl::hmac#digest()","digest::instance#digest!()","digest::hmac#digest_length()","digest::instance#digest_length()","digest::sha2#digest_length()","openssl::digest#digest_length()","gem::dir()","gem::installer#dir()","net::ftp#dir()","object#dir_config()","tk::tcllib::diagrams#direction()","file::directory?()","file::stat#directory?()","filetest#directory?()","gem::package::tarreader::entry#directory?()","pathname#directory?()","rake::ftpfile#directory?()","file::dirname()","object#dirname()","pathname#dirname()","gem::specification::dirs()","gem::specification::dirs=()","gc::disable()","gc::profiler::disable()","tk::iwidgets::optionmenu#disable()","tk::tcllib::tooltip::disable()","tk::tcllib::ctext#disable_c_comments()","dl::handle#disable_close()","net::pop3#disable_ssl()","net::pop3#disable_ssl()","net::pop3::disable_ssl()","net::pop3#disable_ssl()","net::pop3::disable_ssl()","net::pop3::disable_ssl()","net::pop3#disable_ssl()","net::pop3::disable_ssl()","net::smtp#disable_ssl()","net::smtp#disable_ssl()","net::smtp#disable_starttls()","net::smtp#disable_starttls()","net::smtp#disable_tls()","net::smtp#disable_tls()","rubyvm::instructionsequence#disasm()","rubyvm::instructionsequence::disasm()","rubyvm::instructionsequence::disassemble()","rubyvm::instructionsequence#disassemble()","iconv#discard_ilseq=()","iconv#discard_ilseq?()","net::imap#disconnect()","net::imap#disconnected?()","gserver#disconnecting()","win32ole_method#dispid()","debugger__#display()","debugger__::context#display()","object#display()","rdoc::ri::driver#display()","tk::tcllib::getstring_dialog#display()","tk::tcllib::getstring_dialog::display()","tk::tcllib::swaplist_dialog#display()","tk::tcllib::swaplist_dialog::display()","tk::tcllib::widget::dialog#display()","tk::tcllib::widget::screenruler#display()","tk::tcllib::widget::screenruler#display()","tk::tile::dialog::display()","tk::tile::dialog#display()","rdoc::codeobject#display?()","rdoc::markup::attributemanager#display_attributes()","tk::text::indexmodmethods#display_char()","tk::text::indexmodmethods#display_chars()","rdoc::ri::driver#display_class()","rake::application#display_error_message()","rake::application#display_error_message()","debugger__::context#display_expression()","debugger__::context#display_expressions()","debugger__::context#display_frames()","tk::text::indexmodmethods#display_indices()","tk::text::indexmodmethods#display_line()","tk::text::indexmodmethods#display_lineend()","tk::text::indexmodmethods#display_lines()","tk::text::indexmodmethods#display_linestart()","debugger__::context#display_list()","rdoc::ri::driver#display_method()","rdoc::ri::driver#display_name()","rdoc::ri::driver#display_names()","rake::application#display_prerequisites()","rake::application#display_prerequisites()","rake::application#display_tasks_and_comments()","rake::application#display_tasks_and_comments()","tk::text::indexmodmethods#display_wordend()","tk::text::indexmodmethods#display_wordstart()","chatserver#distribute()","bigdecimal#div()","bignum#div()","fixnum#div()","numeric#div()","set#divide()","bigdecimal#divmod()","bignum#divmod()","fixnum#divmod()","float#divmod()","numeric#divmod()","tk::iwidgets::hierarchy#dlineinfo()","tk::iwidgets::scrolledtext#dlineinfo()","dl::importer#dlload()","dl::dlopen()","dl::dlunwrap()","dl::dlwrap()","uri::ldap#dn()","uri::ldap#dn=()","tk::tkdnd::dnd#dnd_bindsource()","tk::tkdnd::dnd#dnd_bindsource_info()","tk::tkdnd::dnd#dnd_bindtarget()","tk::tkdnd::dnd#dnd_bindtarget_info()","tk::tkdnd::dnd#dnd_clearsource()","tk::tkdnd::dnd#dnd_cleartarget()","tk::tkdnd::dnd#dnd_drag()","webrick::httpproxyserver#do_connect()","demoapplication#do_get()","helloservlet#do_get()","webrick::httpproxyserver#do_get()","webrick::httpservlet::abstractservlet#do_get()","webrick::httpservlet::cgihandler#do_get()","webrick::httpservlet::defaultfilehandler#do_get()","webrick::httpservlet::erbhandler#do_get()","webrick::httpservlet::filehandler#do_get()","webrick::httpservlet::prochandler#do_get()","webrick::httpproxyserver#do_head()","webrick::httpservlet::abstractservlet#do_head()","webrick::httpproxyserver#do_options()","webrick::httpserver#do_options()","webrick::httpservlet::abstractservlet#do_options()","webrick::httpservlet::filehandler#do_options()","drb::http0::callback#do_post()","demoapplication#do_post()","webrick::httpproxyserver#do_post()","webrick::httpservlet::cgihandler#do_post()","webrick::httpservlet::erbhandler#do_post()","webrick::httpservlet::filehandler#do_post()","webrick::httpservlet::prochandler#do_post()","rdoc::parser::c#do_aliases()","rdoc::parser::c#do_attrs()","tkgoldberg_demo#do_button()","tktimer#do_callback()","tktimer#do_callback()","rdoc::parser::c#do_classes()","rdoc::parser::c#do_constants()","tkgoldberg_demo#do_ctrl_frame()","tkgoldberg_demo#do_detail_frame()","tkgoldberg_demo#do_display()","rdoc::parser::c#do_includes()","object#do_it()","object#do_log()","rdoc::parser::c#do_methods()","object#do_motion()","basicsocket::do_not_reverse_lookup()","basicsocket#do_not_reverse_lookup()","basicsocket::do_not_reverse_lookup=()","basicsocket#do_not_reverse_lookup=()","rdoc::markup::tottonly#do_nothing()","multitkip#do_one_event()","multitkip#do_one_event()","multitkip#do_one_event()","multitkip#do_one_event()","remotetkip#do_one_event()","tcltkip#do_one_event()","tcltklib#do_one_event()","tcltklib::do_one_event()","object#do_press()","object#do_release()","rinda::ringserver#do_reply()","tcltklib::do_thread_callback()","rss::baseparser#do_validate()","rss::baseparser#do_validate=()","rinda::ringserver#do_write()","gem::specification#doc_dir()","rdoc::stats#doc_stats()","ixmldomdocument#doctype()","microsoft_freethreadedxmldom_1_0#doctype()","microsoft_xmldom_1_0#doctype()","msxml#doctype()","rexml::attribute#doctype()","rexml::document#doctype()","rexml::sax2listener#doctype()","rexml::streamlistener#doctype()","rexml::text#doctype()","rexml::parsers::pullevent#doctype?()","rexml::streamlistener#doctype_end()","rdoc::rdoc#document()","rdoc::rubygemshook#document()","rexml::child#document()","rexml::element#document()","xmlrpc::xmlwriter::simple#document()","xmlrpc::xmlwriter::xmlparser#document()","ixmldomdocument#documentelement()","microsoft_freethreadedxmldom_1_0#documentelement()","microsoft_xmldom_1_0#documentelement()","rdoc::codeobject#document_children=()","rdoc::codeobject#document_self=()","xmlrpc::xmlwriter::simple#document_to_str()","xmlrpc::xmlwriter::xmlparser#document_to_str()","rdoc::codeobject#documented?()","rdoc::constant#documented?()","rdoc::methodattr#documented?()","tk::html_widget#dom_attr()","tk::html_widget#dom_form_element()","tk::html_widget#dom_formel()","tk::html_widget#dom_id()","tk::html_widget#dom_ids()","tk::html_widget#dom_name_index()","tk::html_widget#dom_nameidx()","tk::html_widget#dom_radio_index()","tk::html_widget#dom_radioidx()","tk::html_widget#dom_tree()","tk::html_widget#dom_value()","gem::streamui::silentdownloadreporter#done()","gem::streamui::silentprogressreporter#done()","gem::streamui::simpleprogressreporter#done()","gem::streamui::verbosedownloadreporter#done()","gem::streamui::verboseprogressreporter#done()","notify#done()","rexml::validation::event#done?()","rdoc::stats#done_adding()","rdoc::stats::quiet#done_adding()","rdoc::codeobject#done_documenting=()","tk::tcllib::plotchart::xyplot#dot()","tk::tcllib::plotchart::xyplot#dotconfig()","syck::baseemitter#double()","xmlrpc::convert::double()","bigdecimal::double_fig()","curses::doupdate()","board#down()","tk::iwidgets::spinner#down()","string#downcase()","symbol#downcase()","string#downcase!()","gem::remotefetcher#download()","gem::silentui#download_reporter()","gem::streamui#download_reporter()","gem::remotefetcher#download_to_cache()","date#downto()","integer#downto()","integer#downto()","rexml::xmldecl#dowrite()","tk::blt::dnd::drag()","tk::blt::dragdrop::drag()","knights_tour#drag_end()","knights_tour#drag_motion()","knights_tour#drag_start()","tk::treectrl::configmethod#dragimage_cget()","tk::treectrl::configmethod#dragimage_cget_strict()","tk::treectrl::configmethod#dragimage_cget_tkstring()","tk::treectrl::configmethod#dragimage_configinfo()","tk::treectrl::configmethod#dragimage_configure()","tk::entry#dragto()","tk::iwidgets::entryfield#dragto()","tk::iwidgets::promptdialog#dragto()","tk::iwidgets::spinner#dragto()","tk::bwidget::dialog#draw()","tk::iwidgets::hierarchy#draw()","tkgoldberg_demo#draw0()","tkgoldberg_demo#draw1()","tkgoldberg_demo#draw10()","tkgoldberg_demo#draw11()","tkgoldberg_demo#draw12()","tkgoldberg_demo#draw13()","tkgoldberg_demo#draw14()","tkgoldberg_demo#draw14a()","tkgoldberg_demo#draw15()","tkgoldberg_demo#draw16()","tkgoldberg_demo#draw17()","tkgoldberg_demo#draw18()","tkgoldberg_demo#draw19()","tkgoldberg_demo#draw2()","tkgoldberg_demo#draw20()","tkgoldberg_demo#draw21()","tkgoldberg_demo#draw22()","tkgoldberg_demo#draw23()","tkgoldberg_demo#draw24()","tkgoldberg_demo#draw3()","tkgoldberg_demo#draw4()","tkgoldberg_demo#draw5()","tkgoldberg_demo#draw6()","tkgoldberg_demo#draw6a()","tkgoldberg_demo#draw7()","tkgoldberg_demo#draw8()","tkgoldberg_demo#draw9()","tkgoldberg_demo#draw_all()","tk::tcllib::diagrams#drawin()","object#drawlines()","drbnamedobject#drb_name=()","array#drop()","enumerable#drop()","tk::blt::dnd::drop()","tk::blt::dragdrop::drop()","array#drop_while()","enumerable#drop_while()","tk::tcllib::diagrams#drum()","openssl::pkey::ec#dsa_sign_asn1()","openssl::pkey::ec#dsa_verify_asn1()","time#dst?()","tk::canvas#dtag()","tk::iwidgets::scrolledcanvas#dtag()","tkctagaccess#dtag()","encoding#dummy?()","object#dummy_makefile()","csv::dump()","gem::sourceindex#dump()","gem::sourceindex#dump()","json#dump()","marshal::dump()","psych::dump()","rdoc::ri::driver::dump()","rexml::validation::validator#dump()","string#dump()","syck::dump()","syck::dump()","tk::blt::tree::node#dump()","xmlrpc::marshal#dump_call()","xmlrpc::marshal#dump_response()","psych::dump_stream()","syck::dump_stream()","syck::dump_stream()","tk::blt::tree::node#dump_to_file()","object#dup()","rake::cloneable#dup()","singleton#dup()","tkfont::descendantfont#dup()","tktextio#dup()","tk::blt::vector#dup_vector()","rake::application#dynamic_width()","rake::application#dynamic_width()","rake::application#dynamic_width_stty()","rake::application#dynamic_width_stty()","rake::application#dynamic_width_tput()","rake::application#dynamic_width_tput()","e2mm::e2mm_message()","e2mm::e2mm_message()","argf#each()","array#each()","csv#each()","csv::row#each()","csv::table#each()","dbm#each()","dir#each()","env::each()","enumerator#each()","gdbm#each()","gem::configfile#each()","gem::dependencylist#each()","gem::package::tarinput#each()","gem::package::tarreader#each()","gem::sourceindex#each()","gem::sourceindex#each()","gem::specification::each()","getoptlong#each()","hash#each()","httpserver::table#each()","io#each()","integer#each()","integer#each()","matrix#each()","mylist#each()","net::httpheader#each()","net::pop3#each()","net::pop3#each()","net::pop3#each()","net::pop3#each()","openssl::asn1::constructive#each()","openssl::buffering#each()","openssl::config#each()","prime#each()","prime::oldcompatibility#each()","prime::pseudoprimegenerator#each()","psych::nodes::node#each()","rdoc::ri::paths::each()","rexml::attlistdecl#each()","rexml::light::node#each()","rexml::parent#each()","rexml::parsers::pullparser#each()","rexml::quickpath::each()","rexml::syncenumerator#each()","rexml::xpath::each()","rss::xml::element#each()","rake::taskarguments#each()","range#each()","rinda::notifytemplateentry#each()","rinda::ringfinger#each()","rinda::tuple#each()","rubyvm::instructionsloader#each()","sdbm#each()","set#each()","shell::cat#each()","shell::concat#each()","shell::echo#each()","shell::filter#each()","shell::glob#each()","shell::systemcommand#each()","shell::tee#each()","shell::void#each()","stringio#each()","struct#each()","tktextio#each()","vector#each()","webrick::cgi::socket#each()","webrick::httpauth::htdigest#each()","webrick::httpauth::htpasswd#each()","webrick::httprequest#each()","webrick::httpresponse#each()","win32ole#each()","win32::registry#each()","yaml::dbm#each()","zlib::gzipreader#each()","vector#each2()","shell::processcontroller#each_active_object()","resolv::each_address()","resolv#each_address()","resolv::dns#each_address()","resolv::hosts#each_address()","rdoc::classmodule#each_ancestor()","rdoc::context#each_attribute()","argf#each_byte()","io#each_byte()","openssl::buffering#each_byte()","string#each_byte()","stringio#each_byte()","tktextio#each_byte()","zlib::gzipreader#each_byte()","net::httpheader#each_capitalized()","net::httpheader#each_capitalized_name()","argf#each_char()","io#each_char()","string#each_char()","stringio#each_char()","tktextio#each_char()","zlib::gzipreader#each_char()","pathname#each_child()","rexml::parent#each_child()","rdoc::context#each_classmodule()","argf#each_codepoint()","io#each_codepoint()","string#each_codepoint()","stringio#each_codepoint()","enumerable#each_cons()","object#each_const()","optionparser#each_const()","rdoc::context#each_constant()","webrick::httputils::formdata#each_data()","syck::each_document()","syck::each_document()","rexml::element#each_element()","rexml::element#each_element_with_attribute()","rexml::element#each_element_with_text()","enumerable#each_entry()","gem::package::tarreader#each_entry()","pathname#each_entry()","exports::bcc#each_export()","exports::cygwin#each_export()","exports::mingw#each_export()","exports::mswin#each_export()","pathname#each_filename()","actionmap::each_firstbyte_range()","net::httpheader#each_header()","rdoc::context#each_include()","array#each_index()","rexml::parent#each_index()","xmlrpc::xmlparser::each_installed_parser()","xmlrpc::xmlwriter::each_installed_writer()","dbm#each_key()","env::each_key()","gdbm#each_key()","hash#each_key()","net::httpheader#each_key()","sdbm#each_key()","win32::registry#each_key()","argf#each_line()","exports::bcc#each_line()","exports::cygwin#each_line()","exports::mswin#each_line()","io#each_line()","openssl::buffering#each_line()","pathname#each_line()","string#each_line()","stringio#each_line()","tktextio#each_line()","zlib::gzipreader#each_line()","net::pop3#each_mail()","net::pop3#each_mail()","net::pop3#each_mail()","net::pop3#each_mail()","rdoc::context#each_method()","net::httpheader#each_name()","object#each_name()","resolv#each_name()","resolv::each_name()","resolv::dns#each_name()","resolv::hosts#each_name()","rdoc::markup::attribute::each_name_of()","object#each_names_with_len()","syck::each_node()","syck::each_node()","objectspace::each_object()","getoptlong#each_option()","optionparser::list#each_option()","dbm#each_pair()","env::each_pair()","gdbm#each_pair()","hash#each_pair()","sdbm#each_pair()","struct#each_pair()","yaml::dbm#each_pair()","rdoc::codeobject#each_parent()","syck::ypath::each_path()","integer::each_prime()","integer::each_prime()","rexml::node#each_recursive()","resolv::dns#each_resource()","rdoc::context#each_section()","enumerable#each_slice()","tsort#each_strongly_connected_component()","tsort#each_strongly_connected_component_from()","rubylex#each_top_level_statement()","dbm#each_value()","env::each_value()","gdbm#each_value()","hash#each_value()","net::httpheader#each_value()","sdbm#each_value()","win32::registry#each_value()","yaml::dbm#each_value()","enumerable#each_with_index()","enumerator#each_with_index()","matrix#each_with_index()","enumerable#each_with_object()","enumerator#each_with_object()","object#eat()","curses::echo()","ringecho#echo()","shell::commandprocessor#echo()","io#echo=()","io#echo?()","knights_tour#edgemost()","demotree::edit()","syck::stream#edit()","tk::blt::ted::edit()","tk::bwidget::listbox#edit()","tk::bwidget::listbox::item#edit()","tk::bwidget::tree#edit()","tk::bwidget::tree::node#edit()","tk::tcllib::ctext#edit()","process::egid()","process::egid=()","net::smtp#ehlo()","net::smtp#ehlo()","process::gid::eid()","process::uid::eid()","matrix#eigen()","matrix#eigensystem()","matrix::eigenvaluedecomposition#eigenvalue_matrix()","matrix::eigenvaluedecomposition#eigenvalues()","matrix::eigenvaluedecomposition#eigenvector_matrix()","matrix::eigenvaluedecomposition#eigenvector_matrix_inv()","matrix::eigenvaluedecomposition#eigenvectors()","xmlrpc::xmlwriter::abstract#ele()","matrix#element()","vector#element()","xmlrpc::xmlwriter::simple#element()","xmlrpc::xmlwriter::xmlparser#element()","rexml::attribute#element=()","tk::blt::plotcomponent#element_activate()","tk::blt::plotcomponent#element_bind()","tk::blt::plotcomponent#element_bind_append()","tk::blt::plotcomponent#element_bind_remove()","tk::blt::plotcomponent#element_bindinfo()","tk::blt::plotcomponent#element_cget()","tk::treectrl::configmethod#element_cget()","tk::blt::plotcomponent#element_cget_strict()","tk::treectrl::configmethod#element_cget_strict()","tk::blt::plotcomponent#element_cget_tkstring()","tk::treectrl::configmethod#element_cget_tkstring()","tk::blt::plotcomponent#element_closest()","tk::blt::plotcomponent#element_configinfo()","tk::treectrl::configmethod#element_configinfo()","tk::blt::plotcomponent#element_configure()","tk::treectrl::configmethod#element_configure()","tk::blt::plotcomponent#element_create()","tk::tile::style#element_create()","tk::tile::style#element_create_image()","tk::tile::style#element_create_vsapi()","tk::blt::plotcomponent#element_deactivate()","tk::blt::plotcomponent#element_delete()","tk::blt::plotcomponent#element_exist?()","rss::utils#element_initialize_arguments?()","tkvariable#element_lappend()","tkvariable#element_lappend()","tkvariable#element_lget()","tkvariable#element_lget()","tkvariable#element_lget_f()","tkvariable#element_lget_f()","tkvariable#element_lget_i()","tkvariable#element_lget_i()","tkvariable#element_lindex()","tkvariable#element_lindex()","tkvariable#element_lset()","tkvariable#element_lset()","tk::blt::plotcomponent#element_names()","tk::tile::style#element_names()","tk::tile::style#element_options()","tk::blt::plotcomponent#element_show()","tkvariable#element_to_a()","tkvariable#element_to_a()","tkvariable#element_to_f()","tkvariable#element_to_f()","tkvariable#element_to_i()","tkvariable#element_to_i()","tkvariable#element_to_s()","tkvariable#element_to_s()","tkvariable#element_to_sym()","tkvariable#element_to_sym()","tk::blt::plotcomponent#element_type()","rexml::sax2listener#elementdecl()","rexml::streamlistener#elementdecl()","rexml::parsers::pullevent#elementdecl?()","vector::elements()","matrix#elements_to_f()","vector#elements_to_f()","matrix#elements_to_i()","vector#elements_to_i()","matrix#elements_to_r()","vector#elements_to_r()","readline::emacs_editing_mode()","readline::emacs_editing_mode?()","gem::security::email_to_name()","object#embdefbg()","object#embdefbg2()","object#embplotdown()","object#embplotdown2()","object#embplotmove()","object#embplotmove2()","object::syck::emitter#emit()","prelude#emit()","syck::basenode#emit()","syck::stream#emit()","syck::emitter()","syck::emitter()","matrix::empty()","psych::handler#empty()","array#empty?()","dbm#empty?()","env::empty?()","gdbm#empty?()","gem::package::tarheader#empty?()","gem::platform#empty?()","hash#empty?()","matrix#empty?()","queue#empty?()","rdoc::markup::document#empty?()","rdoc::markup::list#empty?()","rdoc::markup::listitem#empty?()","rexml::iosource#empty?()","rexml::parsers::baseparser#empty?()","rexml::source#empty?()","rexml::text#empty?()","sdbm#empty?()","set#empty?()","string#empty?()","stringscanner#empty?()","symbol#empty?()","threadswait#empty?()","threadswait#empty?()","actionmap#empty_action()","gc::enable()","gc::profiler::enable()","tk::iwidgets::optionmenu#enable()","tk::tcllib::tooltip::enable()","tk::tile::keynav::enablemnemonics()","tk::tcllib::ctext#enable_c_comments()","dl::handle#enable_close()","object#enable_config()","net::pop3::enable_ssl()","net::pop3#enable_ssl()","net::pop3#enable_ssl()","net::pop3::enable_ssl()","net::pop3#enable_ssl()","net::pop3::enable_ssl()","net::pop3#enable_ssl()","net::pop3::enable_ssl()","net::smtp#enable_ssl()","net::smtp#enable_ssl()","net::smtp#enable_starttls()","net::smtp#enable_starttls()","net::smtp#enable_starttls_auto()","net::smtp#enable_starttls_auto()","net::smtp#enable_tls()","net::smtp#enable_tls()","tk::tile::tnotebook#enable_traversal()","tk::tile::tnotebook#enable_traversal()","gc::profiler::enabled?()","openssl::pkcs7::recipientinfo#enc_key()","threadgroup#enclose()","tkctag#enclosed()","threadgroup#enclosed?()","rexml::encoding#encode()","string#encode()","uri::escape#encode()","xmlrpc::base64::encode()","string#encode!()","base64#encode64()","rdoc::text::encode_fallback()","net::imap::encode_utf7()","object#encode_utf8()","uri::encode_www_form()","uri::encode_www_form_component()","xmlrpc::base64#encoded()","irb::fileinputmethod#encoding()","irb::readlineinputmethod#encoding()","irb::stdioinputmethod#encoding()","multitkip#encoding()","multitkip#encoding()","multitkip#encoding()","multitkip#encoding()","rexml::document#encoding()","regexp#encoding()","string#encoding()","symbol#encoding()","tcltklib::encoding()","tk#encoding()","tk::encodedstring#encoding()","multitkip#encoding=()","multitkip#encoding=()","multitkip#encoding=()","multitkip#encoding=()","rexml::encoding#encoding=()","rexml::source#encoding=()","rexml::xmldecl#encoding=()","tcltklib::encoding=()","tk#encoding=()","multitkip#encoding_convert_from()","multitkip#encoding_convert_from()","multitkip#encoding_convert_from()","multitkip#encoding_convert_from()","multitkip#encoding_convert_to()","multitkip#encoding_convert_to()","multitkip#encoding_convert_to()","multitkip#encoding_convert_to()","multitkip#encoding_convertfrom()","multitkip#encoding_convertfrom()","multitkip#encoding_convertfrom()","multitkip#encoding_convertfrom()","multitkip#encoding_convertto()","multitkip#encoding_convertto()","multitkip#encoding_convertto()","multitkip#encoding_convertto()","multitkip#encoding_name()","multitkip#encoding_name()","multitkip#encoding_name()","multitkip#encoding_name()","multitkip#encoding_obj()","multitkip#encoding_obj()","multitkip#encoding_obj()","multitkip#encoding_obj()","tk::encodedstring#encoding_obj()","tcltklib::encoding_system()","tcltklib::encoding_system=()","multitkip#encoding_table()","multitkip#encoding_table()","multitkip#encoding_table()","multitkip#encoding_table()","tcltkip#encoding_table()","openssl::cipher#encrypt()","openssl::pkcs7::encrypt()","matchdata#end()","range#end()","zlib::zstream#end()","rss::rexmllikexmlparser#endelement()","xmlrpc::xmlparser::streamparsermixin#endelement()","rdoc::markup::tohtml#end_accepting()","rdoc::markup::tordoc#end_accepting()","rdoc::markup::tottonly#end_accepting()","psych::emitter#end_document()","psych::handler#end_document()","psych::treebuilder#end_document()","rexml::sax2listener#end_document()","rexml::sax2listener#end_element()","rexml::parsers::pullevent#end_element?()","psych::emitter#end_mapping()","psych::handler#end_mapping()","rexml::sax2listener#end_prefix_mapping()","psych::emitter#end_sequence()","psych::handler#end_sequence()","psych::emitter#end_stream()","psych::handler#end_stream()","psych::treebuilder#end_stream()","string#end_with?()","tk::bwidget::dialog#enddialog()","zlib::zstream#ended?()","etc::endgrent()","etc::endpwent()","object#energy()","openssl::engine::engines()","date#england()","rake::task#enhance()","rake::taskmanager#enhance_with_matching_rule()","multitkip::command_queue#enq()","prettyprint::groupqueue#enq()","queue#enq()","sizedqueue#enq()","tk::itcl::ensemble()","gem::installer#ensure_dependencies_met()","gem::installer#ensure_dependency()","gem::ensure_gem_subdirectories()","gem::installer#ensure_required_ruby_version_met()","gem::installer#ensure_required_rubygems_version_met()","gem#ensure_ssl_available()","ixmldomdocumenttype#entities()","net::httpresponse#entity()","rexml::doctype#entity()","rexml::parsers::baseparser#entity()","rexml::streamlistener#entity()","rexml::parsers::pullevent#entity?()","dl::cstruct::entity_class()","dl::cunion::entity_class()","rexml::document::entity_expansion_limit()","rexml::document::entity_expansion_limit=()","rexml::entity_expansion_text_limit()","rexml::document::entity_expansion_text_limit()","rexml::entity_expansion_text_limit=()","rexml::document::entity_expansion_text_limit=()","rexml::sax2listener#entitydecl()","rexml::streamlistener#entitydecl()","rexml::parsers::pullevent#entitydecl?()","dir::entries()","enumerable#entries()","pathname#entries()","tk::blt::treeview#entry_activate()","tk::blt::treeview::tagorid_methods#entry_activate()","tk::blt::treeview#entry_before?()","tk::blt::treeview::tagorid_methods#entry_before?()","tk::blt::treeview::configmethod#entry_cget()","tk::blt::treeview::configmethod#entry_cget_strict()","tk::blt::treeview::configmethod#entry_cget_tkstring()","tk::blt::treeview#entry_children()","tk::blt::treeview::tagorid_methods#entry_children()","tk::blt::treeview::configmethod#entry_configinfo()","tk::blt::treeview::configmethod#entry_configure()","tk::blt::treeview#entry_delete()","tk::blt::treeview::tagorid_methods#entry_delete()","tk::blt::treeview#entry_hidden?()","tk::blt::treeview::tagorid_methods#entry_hidden?()","tk::blt::treeview#entry_open?()","tk::blt::treeview::tagorid_methods#entry_open?()","tk::blt::treeview#entry_size()","tk::blt::treeview::tagorid_methods#entry_size()","tk::blt::treeview#entry_size_recurse()","tk::blt::treeview::tagorid_methods#entry_size_recurse()","tk::tcllib::chatwidget#entry_widget()","tk::bwidget::labelentry#entrybind()","tk::bwidget::spinbox#entrybind()","tk::bwidget::labelentry#entrybind_append()","tk::bwidget::spinbox#entrybind_append()","tk::bwidget::labelentry#entrybind_remove()","tk::bwidget::spinbox#entrybind_remove()","tk::bwidget::labelentry#entrybindinfo()","tk::bwidget::spinbox#entrybindinfo()","tk::optionmenubutton#entrycget()","tk::optionmenubutton#entrycget()","tk::optionmenubutton#entrycget_strict()","tk::optionmenubutton#entrycget_strict()","tk::optionmenubutton#entryconfiginfo()","tk::optionmenubutton#entryconfiginfo()","tk::optionmenubutton#entryconfigure()","tk::optionmenubutton#entryconfigure()","tk::blt::printer::enum()","object#enum_for()","optionparser#environment()","argf#eof()","io#eof()","openssl::buffering#eof()","stringio#eof()","tktextio#eof()","zlib::gzipreader#eof()","argf#eof?()","gem::package::tarreader::entry#eof?()","io#eof?()","irb::fileinputmethod#eof?()","irb::readlineinputmethod#eof?()","irb::stdioinputmethod#eof?()","openssl::buffering#eof?()","rubylex#eof?()","stringio#eof?()","tktextio#eof?()","webrick::cgi::socket#eof?()","xmp::stringinputmethod#eof?()","zlib::gzipreader#eof?()","stringscanner#eos?()","button_with_frame#epath()","tk::rbwidget::balloonhelp#epath()","tkcomposite#epath()","function#eps()","action#eql?()","array#eql?()","bigdecimal#eql?()","bignum#eql?()","branch#eql?()","dl::cptr#eql?()","dl::cptr#eql?()","drb::drbobject#eql?()","drb::drbobject#eql?()","float#eql?()","gem::platform#eql?()","hash#eql?()","ipaddr#eql?()","matchdata#eql?()","matrix#eql?()","method#eql?()","numeric#eql?()","object#eql?()","openssl::bn#eql?()","openssl::pkey::ec::group#eql?()","openssl::pkey::ec::point#eql?()","openssl::x509::name#eql?()","pathname#eql?()","proc#eql?()","rdoc::toplevel#eql?()","range#eql?()","regexp#eql?()","string#eql?()","struct#eql?()","time#eql?()","uri::generic#eql?()","unboundmethod#eql?()","vector#eql?()","version#eql?()","basicobject#equal?()","tk::listbox#erase()","tk::rbwidget::balloonhelp#erase()","tk::tcllib::tooltip::erase()","math::erf()","math::erfc()","drbex#err()","systemcallerror#errno()","gserver#error()","gem::mockgemui#error()","logger#error()","object#error()","rdoc::parser::ruby#error()","rdoc::rdoc#error()","webrick::basiclog#error()","logger#error?()","rexml::parsers::pullevent#error?()","webrick::basiclog#error?()","webrick::httpstatus::error?()","ixmldomparseerror#errorcode()","encoding::invalidbytesequenceerror#error_bytes()","encoding::undefinedconversionerror#error_char()","getoptlong#error_message()","openssl::errors()","tk::blt::dragdrop::errors()","cgi::escape()","gem::remotefetcher#escape()","regexp::escape()","shellwords::escape()","syck::escape()","syck::escape()","uri::escape#escape()","uri::parser#escape()","webrick::accesslog#escape()","webrick::htmlutils::escape()","cgi::escapeelement()","cgi::escapehtml()","cgi::escape_element()","cgi::escape_html()","process::euid()","process::euid=()","binding#eval()","kernel#eval()","multitkip#eval()","multitkip#eval()","multitkip#eval()","multitkip#eval()","rubyvm::instructionsequence#eval()","tk::windde::eval()","tkconsole::eval()","object#eval_a()","object#eval_a_times_u()","object#eval_ata_times_u()","object#eval_at_times_u()","multitkip#eval_callback()","multitkip#eval_callback()","multitkip#eval_callback()","multitkip#eval_callback()","tkutil::eval_cmd()","irb::context#eval_history=()","irb::irb#eval_input()","multitkip#eval_proc()","multitkip#eval_proc()","multitkip#eval_proc()","multitkip#eval_proc()","multitkip#eval_str()","multitkip#eval_str()","multitkip#eval_str()","multitkip#eval_str()","multitkip#eval_string()","multitkip#eval_string()","multitkip#eval_string()","multitkip#eval_string()","tkoptiondb::eval_under_random_base()","tkoptiondb::eval_under_random_base()","tkoptiondb::eval_under_random_base()","irb::context#evaluate()","irb::workspace#evaluate()","bignum#even?()","fixnum#even?()","integer#even?()","integer#even?()","win32ole_method#event?()","win32ole_method#event_interface()","rexml::parsers::pullevent#event_type()","tktimer#eventloop_tkwait()","tktimer#eventloop_tkwait()","tkvariable#eventloop_tkwait()","tkvariable#eventloop_tkwait()","tktimer#eventloop_wait()","tktimer#eventloop_wait()","tkvariable#eventloop_wait()","tkvariable#eventloop_wait()","net::imap#examine()","drb::drbunknown#exception()","exception#exception()","exception::exception()","net::smtp::response#exception_class()","rake::filelist#exclude()","tkcgroup#exclude()","range#exclude_end?()","thread::exclusive()","debugger__::context#excn_handle()","tk::tcllib::ico::exe_to_ico()","kernel#exec()","process::exec()","object#exec_cmd()","object#exec_command()","gem::installer#exec_format()","irb::notifier::abstractnotifier#exec_if()","gem::specification#executable()","gem::specification#executable=()","file::executable?()","file::stat#executable?()","filetest#executable?()","pathname#executable?()","file::executable_real?()","file::stat#executable_real?()","filetest#executable_real?()","pathname#executable_real?()","gem::specification#executables()","gem::specification#executables=()","gem::command#execute()","gem::commands::buildcommand#execute()","gem::commands::certcommand#execute()","gem::commands::checkcommand#execute()","gem::commands::cleanupcommand#execute()","gem::commands::contentscommand#execute()","gem::commands::dependencycommand#execute()","gem::commands::environmentcommand#execute()","gem::commands::fetchcommand#execute()","gem::commands::generateindexcommand#execute()","gem::commands::helpcommand#execute()","gem::commands::installcommand#execute()","gem::commands::listcommand#execute()","gem::commands::lockcommand#execute()","gem::commands::outdatedcommand#execute()","gem::commands::ownercommand#execute()","gem::commands::pristinecommand#execute()","gem::commands::pushcommand#execute()","gem::commands::querycommand#execute()","gem::commands::rdoccommand#execute()","gem::commands::searchcommand#execute()","gem::commands::servercommand#execute()","gem::commands::setupcommand#execute()","gem::commands::sourcescommand#execute()","gem::commands::specificationcommand#execute()","gem::commands::stalecommand#execute()","gem::commands::uninstallcommand#execute()","gem::commands::unpackcommand#execute()","gem::commands::updatecommand#execute()","gem::commands::whichcommand#execute()","irb::extendcommand::changeworkspace#execute()","irb::extendcommand::currentworkingworkspace#execute()","irb::extendcommand::foreground#execute()","irb::extendcommand::fork#execute()","irb::extendcommand::help#execute()","irb::extendcommand::irbcommand#execute()","irb::extendcommand::jobs#execute()","irb::extendcommand::kill#execute()","irb::extendcommand::load#execute()","irb::extendcommand::nop#execute()","irb::extendcommand::nop::execute()","irb::extendcommand::popworkspace#execute()","irb::extendcommand::pushworkspace#execute()","irb::extendcommand::require#execute()","irb::extendcommand::source#execute()","irb::extendcommand::workspaces#execute()","rake::task#execute()","tk::windde::execute()","dir::exist?()","file::exist?()","filetest#exist?()","multitkip#exist?()","multitkip::exist?()","multitkip::exist?()","multitkip#exist?()","multitkip::exist?()","multitkip#exist?()","multitkip::exist?()","multitkip#exist?()","pathname#exist?()","stringscanner#exist?()","tk::blt::bitmap::exist?()","tk::blt::bitmap#exist?()","tk::blt::plotcomponent::element#exist?()","tk::blt::plotcomponent::marker#exist?()","tk::blt::tree::node#exist?()","tk::bwidget::listbox#exist?()","tk::bwidget::listbox::item#exist?()","tk::bwidget::tree#exist?()","tk::bwidget::tree::node#exist?()","tk::tktable::celltag#exist?()","tknamespace::ensemble::exist?()","tktextmark#exist?()","tktextmark#exist?()","tktexttag#exist?()","tktexttag#exist?()","tkvariable#exist?()","tkvariable#exist?()","tkwinfo::exist?()","tkwinfo::exist?()","tkcitem#exist?()","tkctag#exist?()","dir::exists?()","file::exists?()","filetest#exists?()","tknamespace::ensemble#exists?()","irb::context#exit()","kernel#exit()","multitkip#exit()","multitkip#exit()","multitkip#exit()","multitkip#exit()","process::exit()","thread::exit()","thread#exit()","kernel#exit!()","multitkip#exit!()","multitkip#exit!()","multitkip#exit!()","multitkip#exit!()","process::exit!()","localjumperror#exit_value()","process::status#exited?()","rake::pseudostatus#exited?()","process::status#exitstatus()","bigmath::exp()","cmath::exp()","math::exp()","cmath::exp!()","tk::iwidgets::hierarchy#exp_state()","actionmap::expand()","demotree::expand()","rexml::parsers::xpathparser#expand()","rexml::text::expand()","tk::iwidgets::hierarchy#expand()","rdoc::ri::driver#expand_class()","win32::registry::expand_environ()","openssl::x509::name::rfc2253dn#expand_hexstring()","rdoc::ri::driver#expand_name()","openssl::x509::name::rfc2253dn#expand_pair()","file::expand_path()","pathname#expand_path()","shell#expand_path()","shell::commandprocessor#expand_path()","actionmap::expand_rec()","rexml::validation::state#expand_ref_in()","tk::iwidgets::hierarchy#expand_state()","rdoc::text#expand_tabs()","openssl::x509::name::rfc2253dn#expand_value()","tk::iwidgets::hierarchy#expanded?()","tk::iwidgets::hierarchy#expanded_list()","rexml::document#expanded_name()","io#expect()","rexml::validation::choice#expected()","rexml::validation::interleave#expected()","rexml::validation::oneormore#expected()","rexml::validation::optional#expected()","rexml::validation::state#expected()","rexml::validation::zeroormore#expected()","rinda::tupleentry#expired?()","webrick::cookie#expires()","webrick::cookie#expires=()","object#explorerheaderinvoke()","bigdecimal#exponent()","openssl::pkey::dh#export()","openssl::pkey::dsa#export()","openssl::pkey::rsa#export()","openssl::pkey::rsa#export()","tk::iwidgets::messagebox#export()","tk::iwidgets::scrolledtext#export()","exports#exports()","exports::cygwin#exports()","multitkip#expose_cmd()","multitkip::expose_cmd()","multitkip::expose_cmd()","multitkip#expose_cmd()","multitkip#expose_cmd()","multitkip::expose_cmd()","multitkip#expose_cmd()","multitkip::expose_cmd()","tk::blt::vector#expr()","tk::blt::vector::expr()","net::imap#expunge()","string#ext()","object#extend()","e2mm::extend_object()","e2mm::extend_object()","irb::extendcommandbundle::extend_object()","irb::extendcommandbundle::extend_object()","monitormixin::extend_object()","mutex_m::extend_object()","optionparser::arguable::extend_object()","sync_m::extend_object()","sync_m::extend_object()","irb::historysavingability::extended()","multitkip_pseudotoplevel_evaluable::extended()","gem::specification#extensions()","openssl::x509::crl#extensions()","openssl::x509::certificate#extensions()","openssl::x509::revoked#extensions()","uri::ldap#extensions()","gem::specification#extensions=()","openssl::x509::crl#extensions=()","openssl::x509::certificate#extensions=()","openssl::x509::revoked#extensions=()","uri::ldap#extensions=()","tk::blt::barchart#extents()","tk::blt::graph#extents()","tk::blt::stripchart#extents()","tk::blt::table#extents()","dl::importer#extern()","argf#external_encoding()","io#external_encoding()","stringio#external_encoding()","object#extmake()","file::extname()","pathname#extname()","gem::command::extra_args()","gem::command::extra_args=()","gem::specification#extra_rdoc_files()","gem::specification#extra_rdoc_files=()","exports::extract()","transformation#extract()","uri::extract()","uri::parser#extract()","rdoc::parser::ruby#extract_call_seq()","rdoc::context::section#extract_comment()","gem::package::tarinput#extract_entry()","gem::installer#extract_files()","object#extract_makefile()","syslog::facility()","object#fact()","tk::tcllib::tooltip::fade()","tk::tcllib::tooltip::fade?()","exception2messagemapper#fail()","exception2messagemapper#fail()","kernel#fail()","iconv::failure#failed()","tkfont::failsafe()","tkfont::failsafe()","rexml::functions::false()","tkfont::families()","tkfont::families()","socket::ancillarydata#family()","socket::option#family()","addrinfo#family_addrinfo()","object#fannkuch()","tk::tcllib::ctext#fast_delete()","json#fast_generate()","tk::tcllib::ctext#fast_insert()","gdbm#fastmode=()","logger#fatal()","webrick::basiclog#fatal()","logger#fatal?()","webrick::basiclog#fatal?()","xmlrpc::convert::fault()","io#fcntl()","stringio#fcntl()","tktextio#fcntl()","io#fdatasync()","bignum#fdiv()","complex#fdiv()","fixnum#fdiv()","float#fdiv()","numeric#fdiv()","rational#fdiv()","enumerator#feed()","rss::rootelementmixin#feed_info()","array#fetch()","board#fetch()","dbm#fetch()","drb::timeridconv::timerholder2#fetch()","env::fetch()","gdbm#fetch()","gem::specfetcher#fetch()","gem::streamui::silentdownloadreporter#fetch()","gem::streamui::verbosedownloadreporter#fetch()","hash#fetch()","net::httpheader#fetch()","net::imap#fetch()","pstore#fetch()","rinda::tuple#fetch()","rinda::tupleentry#fetch()","sdbm#fetch()","yaml::dbm#fetch()","gem::remotefetcher#fetch_file()","gem::remotefetcher#fetch_http()","gem::remotefetcher#fetch_https()","gem::remotefetcher#fetch_path()","drb::fetch_server()","gem::remotefetcher#fetch_size()","gem::specfetcher#fetch_spec()","gem::specfetcher#fetch_with_errors()","gem::remotefetcher::fetcher()","gem::specfetcher::fetcher()","object#fib()","dl::fiddle?()","csv::row#field()","csv::row#field?()","csv::row#field_row?()","csv::row#fields()","photocanvas#fig_erase()","argf#file()","digest::class::file()","digest::instance#file()","file::file?()","file::stat#file?()","filetest#file?()","gem::package::tarreader::entry#file?()","pathname#file?()","object#filedialog()","rdoc::generator::darkfish#file_dir()","cgi::htmlextension#file_field()","irb::context#file_input?()","gem::specification#file_name()","rdoc::codeobject#file_name()","argf#filename()","ripper::filter#filename()","readline::filename_quote_characters()","readline::filename_quote_characters=()","argf#fileno()","io#fileno()","stringio#fileno()","tktextio#fileno()","ixmldomparseerror#filepos()","benchmarkdriver#files()","gem::specification#files()","rdoc::toplevel::files()","tk::macresource::files()","gem::specification#files=()","rdoc::toplevel::files_hash()","array#fill()","object#fillmenu()","object#filltree()","prettyprint#fill_breakable()","object#fill_headers()","object#fill_table()","tk::tcllib::diagrams#fillcolor()","csv::filter()","rexml::quickpath::filter()","tk::iwidgets::extfileselectionbox#filter()","tk::iwidgets::extfileselectiondialog#filter()","tk::iwidgets::fileselectionbox#filter()","tk::iwidgets::fileselectiondialog#filter()","uri::ldap#filter()","uri::ldap#filter=()","irb::workspace#filter_backtrace()","optionparser::parseerror::filter_backtrace()","rdoc::ri::driver#filter_methods()","openssl::cipher#final()","encoding::find()","enumerable#find()","find::find()","gem::gempathsearcher#find()","irb::locale#find()","pathname#find()","rinda::tuplebag#find()","rinda::tuplebag::tuplebin#find()","tk::blt::tree::node#find()","tk::blt::treeview#find()","tk::bwidget::tree#find()","tk::canvas#find()","tk::iwidgets::finddialog#find()","tk::iwidgets::scrolledcanvas#find()","tknamedfont::find()","tkctagaccess#find()","object#find_x11()","tk::canvas#find_above()","tk::iwidgets::scrolledcanvas#find_above()","gem::gempathsearcher#find_active()","rdoc::parser::c#find_alias_comment()","enumerable#find_all()","gem::gempathsearcher#find_all()","rinda::tuplebag#find_all()","tk::canvas#find_all()","tk::iwidgets::scrolledcanvas#find_all()","gem::specification::find_all_by_name()","rinda::tuplebag#find_all_template()","rdoc::classmodule#find_ancestor_local_symbol()","rdoc::parser::c#find_attr_comment()","rdoc::context#find_attribute()","rdoc::context#find_attribute_named()","tk::canvas#find_below()","tk::iwidgets::scrolledcanvas#find_below()","rdoc::parser::c#find_body()","gem::specification::find_by_name()","gem::specification::find_by_path()","tk::blt::tree::node#find_child()","rdoc::parser::c#find_class()","rdoc::parser::c#find_class_comment()","rdoc::context#find_class_method_named()","rdoc::classmodule#find_class_named()","rdoc::toplevel::find_class_named()","rdoc::toplevel::find_class_named_from()","rdoc::toplevel#find_class_or_module()","rdoc::toplevel::find_class_or_module()","tk::itcl::find_classes()","tk::canvas#find_closest()","tk::iwidgets::scrolledcanvas#find_closest()","gem::commandmanager#find_command()","tk::blt::container#find_command()","gem::commandmanager#find_command_possibilities()","rdoc::parser::c#find_const_comment()","rdoc::context#find_constant_named()","crlstore#find_crl()","tk::canvas#find_enclosed()","tk::iwidgets::scrolledcanvas#find_enclosed()","rdoc::context#find_enclosing_module_named()","object#find_executable()","rdoc::context#find_external_alias()","rdoc::context#find_external_alias_named()","rdoc::context#find_file_named()","rdoc::toplevel::find_file_named()","gem::find_files()","rexml::node#find_first_recursive()","object#find_framework()","gem::dependencyinstaller#find_gems_with_sources()","object#find_header()","gem::commands::unpackcommand#find_in_cache()","gem::gempathsearcher#find_in_unresolved()","gem::specification::find_in_unresolved()","gem::gempathsearcher#find_in_unresolved_tree()","gem::specification::find_in_unresolved_tree()","rdoc::markup::preprocess#find_include_file()","array#find_index()","enumerable#find_index()","matrix#find_index()","rdoc::context#find_instance_method_named()","object#find_library()","tk::bwidget::tree#find_line()","rdoc::context#find_local_symbol()","rdoc::toplevel#find_local_symbol()","object#find_macosx_framework()","gem::specfetcher#find_matching()","gem::specfetcher#find_matching_with_errors()","rdoc::context#find_method()","rdoc::context#find_method_named()","rdoc::ri::driver#find_methods()","rdoc::parser::c#find_modifiers()","rdoc::context#find_module_named()","rdoc::toplevel::find_module_named()","rdoc::toplevel#find_module_named()","gem::dependencylist#find_name()","gem::sourceindex#find_name()","gem::sourceindex#find_name()","tk::blt::container#find_name()","tk::tcllib::ctext#find_next_char()","tk::tcllib::ctext#find_next_space()","tk::itcl::find_objects()","tk::canvas#find_overlapping()","tk::iwidgets::scrolledcanvas#find_overlapping()","rdoc::parser::c#find_override_comment()","gem::commands::whichcommand#find_paths()","tk::bwidget::tree#find_position()","tk::tcllib::ctext#find_previous_space()","uri::generic#find_proxy()","rake::application#find_rakefile_location()","rake::application#find_rakefile_location()","gem::commands::dependencycommand#find_reverse_dependencies()","rake::altsystem#find_runnable()","object#find_seq()","gem::dependencyinstaller#find_spec_by_name_and_version()","gem::gempathsearcher#find_spec_for_file()","rdoc::context#find_symbol()","rdoc::context#find_symbol_module()","shell::commandprocessor#find_system_command()","object#find_tcl()","object#find_tcltk_header()","object#find_tcltk_library()","object#find_tk()","object#find_type()","rdoc::toplevel::find_unique()","tk::canvas#find_withtag()","tk::iwidgets::scrolledcanvas#find_withtag()","rinda::ringfinger::finger()","encoding::converter#finish()","net::http#finish()","net::http#finish()","net::pop3#finish()","net::pop3#finish()","net::pop3#finish()","net::pop3#finish()","net::smtp#finish()","net::smtp#finish()","openssl::engine#finish()","psych::visitors::yamltree#finish()","rdoc::options#finish()","zlib::gzipfile#finish()","zlib::zstream#finish()","shell::commandprocessor#finish_all_jobs()","threadswait#finished?()","threadswait#finished?()","zlib::zstream#finished?()","bigdecimal#finite?()","float#finite?()","array#first()","enumerable#first()","rexml::quickpath::first()","rexml::xpath::first()","rexml::xpathparser#first()","range#first()","tktexttag#first()","tktexttag#first()","prettyprint#first?()","prettyprint::group#first?()","prettyprint::singleline#first?()","ixmldomattribute#firstchild()","ixmldomcdatasection#firstchild()","ixmldomcharacterdata#firstchild()","ixmldomcomment#firstchild()","ixmldomdocument#firstchild()","ixmldomdocumentfragment#firstchild()","ixmldomdocumenttype#firstchild()","ixmldomelement#firstchild()","ixmldomentity#firstchild()","ixmldomentityreference#firstchild()","ixmldomnode#firstchild()","ixmldomnotation#firstchild()","ixmldomprocessinginstruction#firstchild()","ixmldomtext#firstchild()","ixtlruntime#firstchild()","microsoft_freethreadedxmldom_1_0#firstchild()","microsoft_xmldom_1_0#firstchild()","tk::blt::tree::node#first_child()","bigdecimal#fix()","rdoc::toplevel::fix_basic_object_inheritance()","regexp#fixed_encoding?()","webrick::httprequest#fixup()","openssl::x509::store#flags=()","curses::flash()","tk::button#flash()","tk::iwidgets::checkbox#flash()","tk::iwidgets::extbutton#flash()","tk::iwidgets::pushbutton#flash()","tk::iwidgets::radiobox#flash()","enumerable#flat_map()","array#flatten()","hash#flatten()","set#flatten()","array#flatten!()","set#flatten!()","file#flock()","bigdecimal#floor()","float#floor()","integer#floor()","integer#floor()","numeric#floor()","rexml::functions::floor()","rational#floor()","object#floor2_bg1()","object#floor2_bg2()","object#floor2_bg3()","object#floor2_fg1()","object#floor2_fg2()","object#floor2_fg3()","object#floordisplay()","object#floordisplay2()","object#floor_bg1()","object#floor_bg2()","object#floor_bg3()","object#floor_fg1()","object#floor_fg2()","object#floor_fg3()","rdoc::markup::attributemanager#flow()","gem::package::tarwriter#flush()","io#flush()","logger#flush()","openssl::buffering#flush()","prettyprint#flush()","prettyprint::singleline#flush()","shell::systemcommand#flush()","stringio#flush()","tk::tcllib::widget::canvas_sqmap#flush()","tktextio#flush()","webrick::httpauth::htdigest#flush()","webrick::httpauth::htgroup#flush()","webrick::httpauth::htpasswd#flush()","win32::registry#flush()","zlib::deflate#flush()","zlib::gzipwriter#flush()","rdoc::text#flush_left()","zlib::zstream#flush_next_in()","zlib::zstream#flush_next_out()","openssl::ssl::sslcontext#flush_sessions()","file::fnmatch()","pathname#fnmatch()","file::fnmatch?()","pathname#fnmatch?()","tk::blt::tabset#focus()","tk::blt::tabset::tab#focus()","tk::blt::treeview::tagorid_methods#focus()","tk::bwidget::focus()","tkctagaccess#focus()","object#focusandflash()","object#focusmonitor()","tkmanagefocus#focusnext()","tkmanagefocus#focusprev()","tk::bwidget::widget::focus_next()","tk::bwidget::widget::focus_ok()","tk::bwidget::widget::focus_prev()","tk::wm::focusmodel()","tk::wm#focusmodel()","syck::baseemitter#fold()","tk::iwidgets::hyperhelp#follow_link()","tkmanagefocus::followsmouse()","tkfont#font()","tkfont#font()","tkfont::descendantfont#font()","tktreattagfont#font_configinfo()","tktreattagfont#font_configure()","tktreattagfont#font_copy()","tkfont#font_id()","tkfont#font_id()","tkfont::descendantfont#font_id()","tk::tcllib::plotchart::ganttchart#font_of_part()","foo#foo()","object#foobar()","rdoc::parser::for()","gem::specification#for_cache()","basicsocket::for_fd()","io::for_fd()","sys#for_files()","multitkip#force_default_encoding=()","multitkip#force_default_encoding=()","multitkip#force_default_encoding=()","multitkip#force_default_encoding=()","multitkip#force_default_encoding?()","multitkip#force_default_encoding?()","multitkip#force_default_encoding?()","multitkip#force_default_encoding?()","rdoc::codeobject#force_documentation=()","string#force_encoding()","csv#force_quotes?()","addrinfo::foreach()","csv::foreach()","dir::foreach()","io::foreach()","net::pop3::foreach()","net::pop3::foreach()","net::pop3::foreach()","net::pop3::foreach()","rubyvm::vpath#foreach()","shell::commandprocessor#foreach()","object#foreachwidget()","object#foreach_proc_entry()","tk::blt::busy#forget()","tk::blt::table#forget()","tk::blt::tree::tag#forget()","tk::busy#forget()","tk::panedwindow#forget()","tk::panedwindow#forget()","tk::tile::tnotebook#forget()","tk::tile::tnotebook#forget()","tk::tile::tpaned#forget()","tk::wm::forget()","tkgrid::forget()","tkgrid::forget()","tkpack::forget()","tkpack::forget()","tkpackage#forget()","tkplace::forget()","tkplace::forget()","kernel#fork()","process::fork()","thread::fork()","cgi::htmlextension#form()","tkhtml_file_viewer#form_cmd()","net::httpheader#form_data=()","tk::html_widget#form_info()","benchmark::tms#format()","gem::installer#format()","irb::locale#format()","kernel#format()","prettyprint::format()","tk::clock::format()","webrick::accesslog#format()","ixtlruntime#formatdate()","tk::clock::formatgmt()","ixtlruntime#formatindex()","ixtlruntime#formatnumber()","ixtlruntime#formattime()","net::imap::format_date()","net::imap::format_datetime()","debugger__::context#format_frame()","actionmap#format_infos()","actionmap#format_offsets()","gem::text#format_text()","gem::installer#formatted_program_filename()","gem::uninstaller#formatted_program_filename()","rdoc::generator::markup#formatter()","rdoc::ri::driver#formatter()","tk::html_widget#forminfo()","tk::iwidgets::hyperhelp#forward()","exports::bcc#forwarding()","tkwinfo::fpixels()","tkwinfo::fpixels()","bigdecimal#frac()","tk::iwidgets::panedwindow#fraction()","tk::scrollbar#fraction()","uri::generic#fragment=()","tk::wm#frame()","tk::wm::frame()","debugger__::context#frame_set_pos()","object#frecuency()","dl::free()","dl::cptr#free()","dl::cptr#free()","dl::cptr#free=()","dl::cptr#free=()","delegator#freeze()","module#freeze()","object#freeze()","pathname#freeze()","math::frexp()","date#friday?()","time#friday?()","rdoc::ri::store#friendly_path()","gem::package::tarheader::from()","gem::format::from_file_by_path()","gem::oldformat::from_file_by_path()","gem::sourceindex::from_gems_in()","gem::sourceindex::from_gems_in()","gem::sourceindex::from_installed_gems()","gem::sourceindex::from_installed_gems()","gem::format::from_io()","gem::oldformat::from_io()","object#from_main()","rdoc::classmodule::from_module()","integer::from_prime_division()","integer::from_prime_division()","jisx0208::char#from_sjis()","gem::dependencylist::from_source_index()","gem::dependencylist::from_specs()","json::ext::generator::state::from_state()","gem::specification::from_yaml()","object#fromout()","drb::front()","drb::extserv#front()","array#frozen?()","object#frozen?()","io#fsync()","stringio#fsync()","tktextio#fsync()","file::ftype()","file::stat#ftype()","pathname#ftype()","gem::specification#full_gem_path()","gem::package::tarreader::entry#full_name()","gem::specification#full_name()","rdoc::classmodule#full_name()","rdoc::context#full_name()","rdoc::include#full_name()","rdoc::methodattr#full_name()","rdoc::toplevel#full_name()","rss::element#full_name()","rss::ituneschannelmodel::itunescategory#full_name()","rss::ituneschannelmodel::itunesimage#full_name()","rss::ituneschannelmodel::itunesowner#full_name()","rss::itunesitemmodel::itunesduration#full_name()","rss::imagefaviconmodel::imagefavicon#full_name()","rss::imageitemmodel::imageitem#full_name()","rss::rdf#full_name()","rss::rdf::li#full_name()","rss::rdf::li#full_name()","rss::rdf::li#full_name()","rss::rdf::seq#full_name()","rss::rdf::seq#full_name()","rss::taxonomytopicmodel::taxonomytopic#full_name()","rss::taxonomytopicsmodel::taxonomytopics#full_name()","rss::trackbackmodel10::trackbackabout#full_name()","rss::trackbackmodel10::trackbackping#full_name()","rss::trackbackmodel20::trackbackabout#full_name()","rss::trackbackmodel20::trackbackping#full_name()","rss::xml::element#full_name()","rdoc::codeobject#full_name=()","rdoc::alias#full_old_name()","tk::blt::tree::node#fullpath()","tkhtml_file_viewer#fullscreen()","tkhtml_file_viewer#fullscreen_off()","rdoc::context#fully_documented?()","rdoc::stats#fully_documented?()","rexml::namespace#fully_expanded_name()","object#func_name()","string#funcall_style()","rexml::quickpath::function()","math::gamma()","gc#garbage_collect()","objectspace::garbage_collect()","gem::dependencyinstaller#gather_dependencies()","rdoc::rdoc#gather_files()","integer#gcd()","integer#gcd()","integer#gcdlcm()","integer#gcdlcm()","kernel#gem()","gem::installer#gem_dir()","gem::specification#gem_dir()","gem::indexer#gem_file_list()","kernel#gem_original_require()","gem::commands::whichcommand#gem_paths()","gem::sourceindex#gem_signature()","gem::sourceindex#gem_signature()","rdoc::ri::paths::gemdirs()","gem::specification#gems_dir()","drbex4#gen()","object#gen_callback_file()","object#gen_push_addr_ary()","object#gen_push_proc_ary()","object#gen_random()","rdoc::markup::tohtml::gen_relative_url()","actionmap#gen_str()","rdoc::generator::darkfish#gen_sub_directories()","rdoc::markup::tohtml#gen_url()","rdoc::markup::tohtmlcrossref#gen_url()","object#gencallback()","csv::generate()","emojitable#generate()","json#generate()","json::ext::generator::state#generate()","openssl::pkey::dh::generate()","openssl::pkey::dsa::generate()","openssl::pkey::rsa::generate()","openssl::pkey::rsa::generate()","rdoc::generator::darkfish#generate()","rdoc::generator::ri#generate()","rdoc::rdoc#generate()","rdoc::rubygemshook#generate()","rubyvm::insnsincgenerator#generate()","rubyvm::insnsinfoincgenerator#generate()","rubyvm::minsnsincgenerator#generate()","rubyvm::optinsnincgenerator#generate()","rubyvm::optscincgenerator#generate()","rubyvm::optunifsincgenerator#generate()","rubyvm::sourcecodegenerator#generate()","rubyvm::vmbodygenerator#generate()","rubyvm::vmtcincgenerator#generate()","rubyvm::yarvdocgenerator#generate()","rubyvm::yasmdatarbgenerator#generate()","tkevent::event#generate()","win32comgen#generate()","win32comgen#generate_args()","win32comgen#generate_argtype()","win32comgen#generate_argtypes()","gem::installer#generate_bin()","gem::installer#generate_bin_script()","gem::installer#generate_bin_symlink()","certstore#generate_cert()","win32comgen#generate_class()","rdoc::generator::darkfish#generate_class_files()","win32comgen#generate_constants()","gem::commands::setupcommand#generate_default_dirs()","tk::bwidget::widget::generate_doc()","rexml::validation::state#generate_event()","object#generate_eventids1()","object#generate_eventids2_table()","rdoc::generator::darkfish#generate_file_files()","rubyvm::vmbodygenerator#generate_from_insnname()","object#generate_from_ucs()","win32comgen#generate_func_methods()","gem::indexer#generate_index()","rdoc::generator::darkfish#generate_index()","actionmap#generate_info()","openssl::pkey::ec#generate_key()","openssl::pkey::dh#generate_key!()","csv::generate_line()","actionmap#generate_lookup_node()","win32comgen#generate_method()","win32comgen#generate_method_args_help()","win32comgen#generate_method_body()","win32comgen#generate_method_help()","win32comgen#generate_methods()","actionmap#generate_node()","openssl::bn::generate_prime()","win32comgen#generate_properties_with_args()","win32comgen#generate_propget_methods()","win32comgen#generate_propput_methods()","win32comgen#generate_propputref_methods()","gem::docmanager#generate_rdoc()","gem::docmanager#generate_ri()","object#generate_to_ucs()","tk::bwidget::widget::generate_widget_doc()","gem::installer#generate_windows_script()","rdoc::rubygemshook::generation_hook()","openssl::pkey::ec::group#generator()","rdoc::options#generator_descriptions()","syck::generic_parser()","syck::generic_parser()","actionmap#gennode()","tk::wm#geometry()","tk::wm::geometry()","tkwinfo::geometry()","tkwinfo::geometry()","getoptlong#get()","net::ftp#get()","net::http::get()","net::http#get()","net::http#get()","net::http::get()","rdoc::markup::parser#get()","tk::blt::cutbuffer::get()","tk::blt::plotcomponent::legend#get()","tk::blt::tree::node#get()","tk::blt::treeview#get()","tk::blt::treeview::tagorid_methods#get()","tk::entry#get()","tk::iwidgets::calendar#get()","tk::iwidgets::checkbox#get()","tk::iwidgets::datefield#get()","tk::iwidgets::entryfield#get()","tk::iwidgets::extfileselectionbox#get()","tk::iwidgets::extfileselectiondialog#get()","tk::iwidgets::fileselectionbox#get()","tk::iwidgets::fileselectiondialog#get()","tk::iwidgets::hierarchy#get()","tk::iwidgets::optionmenu#get()","tk::iwidgets::promptdialog#get()","tk::iwidgets::radiobox#get()","tk::iwidgets::scrolledlistbox#get()","tk::iwidgets::scrolledtext#get()","tk::iwidgets::selectionbox#get()","tk::iwidgets::selectiondialog#get()","tk::iwidgets::spindate#get()","tk::iwidgets::spinner#get()","tk::iwidgets::spintime#get()","tk::iwidgets::timefield#get()","tk::iwidgets::watch#get()","tk::listbox#get()","tk::scale#get()","tk::scrollbar#get()","tk::tclx::xpg3_msgcat#get()","tk::tcllib::ico::get()","tk::tcllib::widget::calendar#get()","tk::tktable#get()","tk::vu::bargraph#get()","tk::vu::dial#get()","tk::winregistry::get()","tkclipboard::get()","tkclipboard#get()","tkmulticolumnlist#get()","tkmultilistframe#get()","tkmultilistbox#get()","tkoptiondb::get()","tkoptiondb::get()","tkoptiondb::get()","tkphotoimage#get()","tkphotoimage#get()","tkselection::get()","tkselection#get()","tkselection#get()","tkselection::get()","tktextwin#get()","tuplespace#get()","net::http#get2()","net::http#get2()","tk::bwidget::get3dcolor()","ixmlhttprequest#getallresponseheaders()","microsoft_xmlhttp_1#getallresponseheaders()","ixmldomelement#getattribute()","ixmldomelement#getattributenode()","ixmldomdocument#getelementsbytagname()","ixmldomelement#getelementsbytagname()","microsoft_freethreadedxmldom_1_0#getelementsbytagname()","microsoft_xmldom_1_0#getelementsbytagname()","ixmldomnamednodemap#getnameditem()","ixmldomnamednodemap#getqualifieditem()","ixmlhttprequest#getresponseheader()","microsoft_xmlhttp_1#getresponseheader()","gem::command#get_all_gem_names()","tk::tktable#get_area()","rss::element#get_attributes()","tk::blt::printer#get_attrs()","multitkip#get_bgerror_handler()","multitkip#get_bgerror_handler()","multitkip#get_bgerror_handler()","multitkip#get_bgerror_handler()","rdoc::parser::ruby#get_bool()","tk::bwidget::dialog#get_buttonbox()","tkmulticolumnlist#get_by_hash()","tkmultilistframe#get_by_hash()","tkmultilistbox#get_by_hash()","tk::tcllib::ico::get_by_name()","stringscanner#get_byte()","multitkip::get_cb_entry()","multitkip::get_cb_entry()","multitkip::get_cb_entry()","multitkip::get_cb_entry()","chashdir#get_certs()","rdoc::parser::ruby#get_class_or_module()","rdoc::parser::ruby#get_class_specification()","tk::iwidgets::calendar#get_clicks()","tk::iwidgets::datefield#get_clicks()","tk::iwidgets::spindate#get_clicks()","tk::iwidgets::spintime#get_clicks()","tk::iwidgets::timefield#get_clicks()","tk::iwidgets::watch#get_clicks()","tk::tcllib::khim::get_config()","rdoc::parser::ruby#get_constant()","rdoc::parser::ruby#get_constant_with_optional_parens()","chashdir#get_crls()","tk::iwidgets::combobox#get_curselection()","tk::iwidgets::scrolledlistbox#get_curselection()","tk::blt::dnd::get_data()","tk::tcllib::ico::get_data()","xmlrpc::basicserver#get_default_handler()","tk::iwidgets::scrolledtext#get_displaychars()","rexml::element#get_elements()","multitkip#get_eventloop_tick()","multitkip#get_eventloop_tick()","multitkip#get_eventloop_tick()","multitkip#get_eventloop_tick()","remotetkip#get_eventloop_tick()","tcltkip#get_eventloop_tick()","tcltklib#get_eventloop_tick()","tcltklib::get_eventloop_tick()","multitkip#get_eventloop_weight()","multitkip#get_eventloop_weight()","multitkip#get_eventloop_weight()","multitkip#get_eventloop_weight()","remotetkip#get_eventloop_weight()","tcltkip#get_eventloop_weight()","tcltklib#get_eventloop_weight()","tcltklib::get_eventloop_weight()","tcltklib::get_eventloop_window_mode()","object#get_ext_list()","net::httpheader#get_fields()","object#get_file()","rss::utils#get_file_and_line_from_caller()","tk::tcllib::ico::get_fileicon()","object#get_files()","rexml::xpathparser#get_first()","scrolledwindow#get_frame()","scrolledwindow#get_frame()","tk::bwidget::dialog#get_frame()","tk::bwidget::labelframe#get_frame()","tk::bwidget::mainframe#get_frame()","tk::bwidget::notebook#get_frame()","tk::bwidget::pagesmanager#get_frame()","tk::bwidget::panedwindow#get_frame()","tk::bwidget::panelframe#get_frame()","tk::bwidget::scrollableframe#get_frame()","tk::bwidget::scrolledwindow#get_frame()","tk::bwidget::statusbar#get_frame()","tk::bwidget::titleframe#get_frame()","tk::tcllib::widget::dialog#get_frame()","tk::tcllib::widget::statusbar#get_frame()","tk::tcllib::widget::toolbar#get_frame()","tk::blt::treeview#get_full()","tk::blt::treeview::tagorid_methods#get_full()","tk::tcllib::ctext#get_highlight_classes()","win32::resolv::get_hosts_path()","tk::tcllib::ico::get_icon()","tk::tcllib::ico::get_icon_by_name()","tk::blt::tabnotebook#get_id()","tk::tcllib::ico::get_image()","tk::bwidget::spinbox#get_index_of_value()","tk::bwidget::mainframe#get_indicator()","win32::sspi::negotiateauth#get_initial_token()","webrick::httpservlet::abstractservlet::get_instance()","webrick::httpservlet::prochandler#get_instance()","xmlrpc::webrickservlet#get_instance()","tk::bwidget::listbox#get_item()","tk::vu::dial#get_label()","tk::iwidgets::disjointlistbox#get_lhs()","object#get_libpath()","multitkip::get_limit()","multitkip::get_limit()","multitkip::get_limit()","multitkip#get_limit()","multitkip#get_limit()","multitkip#get_limit()","multitkip#get_limit()","multitkip::get_limit()","tk::iwidgets::combobox#get_list_contents()","tk::bwidget::combobox#get_listbox()","object#get_mailfile()","tk::tcllib::ico::get_members()","tk::bwidget::mainframe#get_menu()","tk::bwidget::mainframe#get_menustate()","gem::commands::unpackcommand#get_metadata()","xmlrpc::service::interface#get_methods()","xmlrpc::service::publicinstancemethodsinterface#get_methods()","tk::blt::tabset::tab#get_name()","tk::tcllib::chatwidget#get_name()","rexml::functions::get_namespace()","multitkip#get_no_event_wait()","multitkip#get_no_event_wait()","multitkip#get_no_event_wait()","multitkip#get_no_event_wait()","remotetkip#get_no_event_wait()","tcltkip#get_no_event_wait()","tcltklib#get_no_event_wait()","tcltklib::get_no_event_wait()","tk::bwidget::tree#get_node()","tk::iwidgets::radiobox#get_obj()","tkfont::get_obj()","tkfont::get_obj()","tk::iwidgets::checkbox#get_objs()","tkclipboard::get_on_display()","tkselection::get_on_display()","tkselection::get_on_display()","gem::command#get_one_gem_name()","gem::command#get_one_optional_argument()","getoptlong#get_option()","tk::bwidget::widget::get_option()","tk::tcllib::khim::get_options()","tk::iwidgets::canvasprintbox#get_output()","tk::iwidgets::canvasprintdialog#get_output()","tkselection#get_owner()","tkselection#get_owner()","tkselection::get_owner()","tkselection::get_owner()","tkselection::get_owner_on_display()","tkselection::get_owner_on_display()","tk::bwidget::notebook#get_page()","tk::bwidget::pagesmanager#get_page()","webrick::httpauth::htdigest#get_passwd()","webrick::httpauth::htpasswd#get_passwd()","webrick::httpauth::userdb#get_passwd()","gem::commands::unpackcommand#get_path()","object#get_pkg_list()","object#get_position()","net::http::get_print()","net::http::get_print()","tktimer#get_procs()","tktimer#get_procs()","gem::remotefetcher#get_proxy_from_env()","tk::iwidgets::optionmenu#get_range()","rubylex#get_readed()","tcltklib::get_release_type_name()","win32::resolv::get_resolv_info()","net::http::get_response()","net::http::get_response()","vcs#get_revisions()","vcs::git::get_revisions()","vcs::svn::get_revisions()","tk::iwidgets::disjointlistbox#get_rhs()","readline::get_screen_size()","tk::scrollbarcomposite#get_scrollbarwidth()","tkmulticolumnlist#get_select()","tk::iwidgets::optionmenu#get_selected()","xmlrpc::basicserver#get_service_hook()","object#get_shlib_path_head()","object#get_shlib_versions()","rdoc::generator::darkfish#get_sorted_module_list()","tkgoldberg_demo#get_step()","tk::iwidgets::calendar#get_string()","tk::iwidgets::datefield#get_string()","tk::iwidgets::spindate#get_string()","tk::iwidgets::spintime#get_string()","tk::iwidgets::timefield#get_string()","tk::iwidgets::watch#get_string()","rdoc::generator::darkfish#get_svninfo()","rdoc::parser::ruby#get_symbol_or_name()","tk::blt::tabnotebook#get_tab()","tk::blt::tabset#get_tab()","tk::blt::tabnotebook#get_tabobj()","tk::blt::tabset#get_tabobj()","tk::iwidgets::radiobox#get_tag()","tk::vu::dial#get_tag()","tk::iwidgets::checkbox#get_tags()","object#get_tclconfig()","object#get_tclconfig_dirs()","rexml::element#get_text()","tktextframe#get_textborderwidth()","photocanvas#get_texts()","debugger__#get_thread()","rdoc::parser::rubytools#get_tk()","rdoc::parser::rubytools#get_tk_until()","rdoc::parser::rubytools#get_tkread()","tk::bwidget::mainframe#get_toolbar()","tkphotoimage#get_transparency()","tkphotoimage#get_transparency()","xmlrpc::webrickservlet#get_valid_ip()","openssl::config#get_value()","tk::blt::tree::node#get_value()","tk::bwidget::spinbox#get_value()","tk::radiobutton#get_value()","tk::radiobutton#get_value()","tk::bwidget::spinbox#get_value_index()","tk::bwidget::widget::get_variable()","tcltklib::get_version()","net::imap#getacl()","ipsocket#getaddress()","ipsocket::getaddress()","resolv::getaddress()","resolv#getaddress()","resolv::dns#getaddress()","resolv::hosts#getaddress()","resolv::getaddresses()","resolv#getaddresses()","resolv::dns#getaddresses()","resolv::hosts#getaddresses()","addrinfo::getaddrinfo()","socket::getaddrinfo()","net::ftp#getbinaryfile()","curses::window#getbkgd()","argf#getbyte()","io#getbyte()","string#getbyte()","stringio#getbyte()","stringscanner#getbyte()","zlib::gzipreader#getbyte()","argf#getc()","gem::package::tarreader::entry#getc()","io#getc()","openssl::buffering#getc()","rubylex#getc()","stringio#getc()","tktextio#getc()","zlib::gzipreader#getc()","rubylex#getc_of_rests()","curses::getch()","curses::window#getch()","io#getch()","io::readable#getch()","stringscanner#getch()","demotree::getdir()","net::ftp#getdir()","process::sys::getegid()","process::sys::geteuid()","scrolledwindow#getframe()","scrolledwindow#getframe()","tk::tcllib::widget::statusbar#getframe()","tk::tcllib::widget::toolbar#getframe()","process::sys::getgid()","time#getgm()","etc::getgrent()","etc::getgrgid()","etc::getgrnam()","socket::gethostbyaddr()","socket::gethostbyname()","tcpsocket::gethostbyname()","socket::gethostname()","time#getlocal()","etc::getlogin()","curses::getmouse()","resolv::getname()","resolv#getname()","resolv::dns#getname()","resolv::hosts#getname()","tk::bwidget::getname()","addrinfo#getnameinfo()","socket::getnameinfo()","resolv::getnames()","resolv#getnames()","resolv::dns#getnames()","resolv::hosts#getnames()","optionparser::getopts()","optionparser#getopts()","optionparser::arguable#getopts()","basicsocket#getpeereid()","basicsocket#getpeername()","process::getpgid()","process::getpgrp()","tk::tcllib::diagrams#getpos()","process::getpriority()","pty::getpty()","etc::getpwent()","etc::getpwnam()","etc::getpwuid()","net::imap#getquota()","net::imap#getquotaroot()","resolv::dns#getresource()","resolv::dns#getresources()","process::getrlimit()","argf#gets()","csv#gets()","io#gets()","irb::fileinputmethod#gets()","irb::inputmethod#gets()","irb::locale#gets()","irb::readlineinputmethod#gets()","irb::stdioinputmethod#gets()","kernel#gets()","openssl::buffering#gets()","rubylex#gets()","stringio#gets()","tktextio#gets()","webrick::cgi::socket#gets()","xmp::stringinputmethod#gets()","zlib::gzipreader#gets()","tktree#getselection()","socket::getservbyname()","socket::getservbyport()","drb::drbtcpsocket::getservername()","webrick::utils::getservername()","basicsocket#getsockname()","basicsocket#getsockopt()","curses::getstr()","curses::window#getstr()","tk::canvas#gettags()","tk::iwidgets::scrolledcanvas#gettags()","tkctagaccess#gettags()","rss::baselistener#getter()","net::ftp#gettextfile()","process::sys::getuid()","time#getutc()","dir::getwd()","fileutils::getwd()","pathname::getwd()","file::stat#gid()","process::gid()","process::gid=()","dir::glob()","pathname::glob()","shell::commandprocessor#glob()","kernel#global_variables()","time::gm()","time#gmt?()","time#gmt_offset()","time#gmtime()","time#gmtoff()","tkgoldberg_demo#go()","tk::blt::htext#goto_line()","tk::bwidget::grab()","object#grammar()","process::gid::grant_privilege()","process::uid::grant_privilege()","tktextmark#gravity()","tktextmark#gravity()","tktextmark#gravity=()","tktextmark#gravity=()","rdoc::stats#great_job()","dqentry#greeting()","date#gregorian()","date#gregorian?()","date::gregorian_leap?()","enumerable#grep()","tk::wm::grid()","tkgrid::grid()","tkgrid::grid()","tk::tcllib::plotchart::xyplot#grid_cells()","tk::tcllib::plotchart::plot3d#grid_size()","tk::blt::plotcomponent#gridline_cget()","tk::blt::plotcomponent#gridline_cget_strict()","tk::blt::plotcomponent#gridline_cget_tkstring()","tk::blt::plotcomponent#gridline_configinfo()","tk::blt::plotcomponent#gridline_configure()","tk::blt::plotcomponent#gridline_off()","tk::blt::plotcomponent#gridline_on()","tk::blt::plotcomponent#gridline_toggle()","cal#group()","etc::group()","openssl::pkey::ec#group()","prettyprint#group()","prettyprint::singleline#group()","thread#group()","tk::wm::group()","tk::wm#group()","openssl::pkey::ec#group=()","enumerable#group_by()","tkevent::event::group_flag()","prettyprint#group_sub()","process::groups()","process::groups=()","file::grpowned?()","file::stat#grpowned?()","filetest#grpowned?()","pathname#grpowned?()","kernel#gsub()","string#gsub()","string#gsub!()","pp::ppmethods#guard_inspect_key()","kconv::guess()","nkf::guess()","optionparser::switch::guess()","win32ole_type#guid()","win32ole_typelib#guid()","gem::gunzip()","tk::html_widget::gunzip_data()","tk::html_widget::gunzip_file()","gem::gzip()","gem::indexer#gzip()","tk::html_widget::gzip_data()","tk::html_widget::gzip_file()","erb::util::h()","rss::utils#h()","tkgoldberg_demo#h20()","rdoc::markup::preprocess#handle()","tkselection::handle()","tkselection#handle()","tkselection::handle()","tkselection#handle()","gem::configfile#handle_arguments()","rdoc::parser::c#handle_attr()","rdoc::parser::c#handle_class_module()","rdoc::parser::c#handle_constants()","rdoc::markup::preprocess#handle_directive()","rdoc::parser::c#handle_ifdefs_in()","rdoc::parser::c#handle_method()","gem::command#handle_options()","rake::application#handle_options()","rake::application#handle_options()","rdoc::rdoc#handle_pipe()","rdoc::parser::c#handle_singleton()","rdoc::markup::tohtmlcrossref#handle_special_crossref()","rdoc::markup::tohtml#handle_special_hyperlink()","rdoc::markup::tohtmlcrossref#handle_special_hyperlink()","rdoc::markup::tordoc#handle_special_suppressed_crossref()","rdoc::markup::tohtml#handle_special_tidylink()","rdoc::parser::c#handle_tab_width()","tk::blt::dragdrop::handle_target()","dl::importer#handler()","win32ole_event#handler()","win32ole_event#handler=()","dl::compositehandler#handlers()","gem::command#handles?()","ixmldomattribute#haschildnodes()","ixmldomcdatasection#haschildnodes()","ixmldomcharacterdata#haschildnodes()","ixmldomcomment#haschildnodes()","ixmldomdocument#haschildnodes()","ixmldomdocumentfragment#haschildnodes()","ixmldomdocumenttype#haschildnodes()","ixmldomelement#haschildnodes()","ixmldomentity#haschildnodes()","ixmldomentityreference#haschildnodes()","ixmldomnode#haschildnodes()","ixmldomnotation#haschildnodes()","ixmldomprocessinginstruction#haschildnodes()","ixmldomtext#haschildnodes()","ixtlruntime#haschildnodes()","microsoft_freethreadedxmldom_1_0#haschildnodes()","microsoft_xmldom_1_0#haschildnodes()","nqxml::node#haschildnodes()","ixmldomimplementation#hasfeature()","rexml::element#has_attributes?()","tk::bwidget::widget::has_changed()","curses::has_colors?()","rexml::element#has_elements?()","rinda::tuplebag#has_expires?()","cgi::queryextension#has_key?()","dbm#has_key?()","env::has_key?()","gdbm#has_key?()","hash#has_key?()","sdbm#has_key?()","syck::omap#has_key?()","syck::pairs#has_key?()","multitkip#has_mainwindow?()","multitkip#has_mainwindow?()","multitkip#has_mainwindow?()","multitkip#has_mainwindow?()","remotetkip#has_mainwindow?()","tcltkip#has_mainwindow?()","rexml::light::node#has_name?()","rexml::namespace#has_name?()","rexml::parsers::baseparser#has_next?()","gem::specification#has_rdoc()","gem::specification#has_rdoc=()","gem::specification#has_rdoc?()","rexml::element#has_text?()","gem::specification#has_unit_tests?()","dbm#has_value?()","env::has_value?()","gdbm#has_value?()","hash#has_value?()","sdbm#has_value?()","yaml::dbm#has_value?()","action#hash()","array#hash()","bigdecimal#hash()","bignum#hash()","drb::drbobject#hash()","drb::drbobject#hash()","float#hash()","hash#hash()","ipaddr#hash()","matchdata#hash()","matrix#hash()","method#hash()","object#hash()","openssl::x509::name#hash()","proc#hash()","rdoc::toplevel#hash()","rexml::attribute#hash()","range#hash()","regexp#hash()","string#hash()","struct#hash()","time#hash()","uri::generic#hash()","unboundmethod#hash()","vector#hash()","chashdir#hash_dir()","tkutil#hash_kv()","tkutil::hash_kv()","openssl::x509::name#hash_old()","rss::atom::entry#have_author?()","rss::atom::feed#have_author?()","rss::atom::feed::entry#have_author?()","rss::atom::feed::entry::source#have_author?()","rss::element#have_children_elements()","object#have_const()","rss::element#have_content?()","object#have_framework()","object#have_func()","object#have_header()","object#have_library()","object#have_libvar()","object#have_macro()","rake::application#have_rakefile()","rake::application#have_rakefile()","object#have_readline_func()","object#have_readline_header()","object#have_readline_macro()","object#have_readline_var()","rss::element#have_required_elements?()","rss::maker::atom::feed::channel#have_required_values?()","rss::maker::atom::feed::items::item#have_required_values?()","rss::maker::base#have_required_values?()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#have_required_values?()","rss::maker::imagefaviconmodel::imagefaviconbase#have_required_values?()","rss::maker::imageitemmodel::imageitembase#have_required_values?()","rss::maker::rss10::image#have_required_values?()","rss::maker::rss10::textinput#have_required_values?()","rss::maker::taxonomytopicmodel::taxonomytopicsbase::taxonomytopicbase#have_required_values?()","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase#have_required_values?()","object#have_struct_member()","object#have_type()","object#have_var()","rss::atom::feed::entry::content#have_xml_content?()","rss::atom::textconstruct#have_xml_content?()","rss::element#have_xml_content?()","net::http#head()","net::http#head()","net::http#head2()","net::http#head2()","cgi#header()","mail#header()","net::popmail#header()","object#header()","csv::row#header?()","csv#header_convert()","csv#header_converters()","csv#header_row?()","csv::row#header_row?()","csv#headers()","csv::row#headers()","csv::table#headers()","uri::mailto#headers=()","tk::tile::treeviewconfig#heading_cget()","tk::tile::treeviewconfig#heading_cget_strict()","tk::tile::treeviewconfig#heading_cget_tkstring()","tk::tile::treeviewconfig#heading_configinfo()","tk::tile::treeviewconfig#heading_configure()","tk::tile::treeviewconfig#headingcget()","tk::tile::treeviewconfig#headingcget_strict()","tk::tile::treeviewconfig#headingcget_tkstring()","tk::tile::treeviewconfig#headingconfiginfo()","tk::tile::treeviewconfig#headingconfigure()","tk::blt::bitmap#height()","tk::blt::bitmap::height()","tk::tktable#height()","tkimage#height()","tkwinfo::height()","tkwinfo::height()","tk::tktable#height_list()","drbex#hello()","foo#hello()","helloworld#hello()","net::smtp#helo()","net::smtp#helo()","net::ftp#help()","object#help()","optionparser#help()","object#helpbutton1()","object#helpleave1()","object#helpmotion()","object#helpmotion1()","object#helpmotion2()","object#helprelease1()","object#help_msg()","win32ole_method#helpcontext()","win32ole_type#helpcontext()","win32ole_method#helpfile()","win32ole_type#helpfile()","win32ole_method#helpstring()","win32ole_type#helpstring()","drb::here?()","drb::drbserver#here?()","matrix#hermitian?()","securerandom::hex()","string#hex()","digest::class::hexdigest()","digest::instance#hexdigest()","openssl::hmac::hexdigest()","openssl::hmac#hexdigest()","digest::instance#hexdigest!()","digest::hexencode()","jisx0208::char#hi()","object#hi_function()","cgi::htmlextension#hidden()","tk::tktable#hidden?()","multitkip::hidden_cmds()","multitkip#hidden_cmds()","multitkip#hidden_cmds()","multitkip#hidden_cmds()","multitkip::hidden_cmds()","multitkip::hidden_cmds()","multitkip#hidden_cmds()","multitkip::hidden_cmds()","tk::tktable#hidden_list()","tk::blt::treeview#hide()","tk::blt::treeview::tagorid_methods#hide()","tk::iwidgets::buttonbox#hide()","tk::iwidgets::dialogshell#hide()","tk::iwidgets::panedwindow#hide()","tk::iwidgets::promptdialog#hide()","tk::tcllib::widget::screenruler#hide()","tk::tcllib::widget::screenruler#hide()","tk::tile::tnotebook#hide()","tk::tile::tnotebook#hide()","tkconsole::hide()","tkfont::chooser#hide()","multitkip#hide_cmd()","multitkip#hide_cmd()","multitkip#hide_cmd()","multitkip#hide_cmd()","multitkip::hide_cmd()","multitkip::hide_cmd()","multitkip::hide_cmd()","multitkip::hide_cmd()","tkmulticolumnlist#hide_each_hscr()","tkmultilistframe#hide_each_hscr()","tk::tcllib::chatwidget#hide_names()","tk::tcllib::chatwidget#hide_topic()","tkmulticolumnlist#hide_win_hscr()","tkmultilistframe#hide_win_hscr()","uri::generic#hierarchical?()","uri::ldap#hierarchical?()","tk::blt::tabset#highlight()","tk::tcllib::ctext#highlight()","tk::tcllib::history#history_add()","tk::tcllib::history#history_clear()","tk::tcllib::history#history_configinfo()","tk::tcllib::history#history_configure()","irb::context#history_file()","irb::context#history_file=()","tk::tcllib::history#history_get()","tk::tcllib::history#history_remove()","tk::blt::busy#hold()","tk::busy#hold()","dir::home()","irb::context#home_workspace()","tk::tcllib::chatwidget#hook_add()","tktextframe#hook_hscroll_off()","tktextframe#hook_hscroll_on()","tk::tcllib::chatwidget#hook_list()","tk::tcllib::chatwidget#hook_remove()","tk::tcllib::chatwidget#hook_run()","gem::host()","webrick::httprequest#host()","gem::host=()","uri::generic#host=()","uri::generic#hostname()","uri::generic#hostname=()","time#hour()","rss::itunesitemmodel::itunesduration#hour=()","rss::maker::itunesitemmodel::itunesdurationbase#hour=()","xmlrpc::datetime#hour=()","tk::html_widget#href()","rss::xmlstylesheet#href=()","tkhtml_file_viewer#href_binding()","tk::rbwidget::scrollframe#hscroll()","tk::scrollbarcomposite#hscroll()","tk::tcllib::plotchart::ganttchart#hscroll()","tk::tcllib::plotchart::timechart#hscroll()","tktextframe#hscroll()","tk::tcllib::plotchart::ganttchart#hscroll=()","tk::tcllib::plotchart::timechart#hscroll=()","cgi::htmlextension#html()","erb::util::html_escape()","rss::utils#html_escape()","rdoc::markup::tohtml#html_list_name()","rdoc::alias#html_name()","rdoc::methodattr#html_name()","tk::html_widget#html_text()","tk::html_widget#htmlclip()","ipaddr#hton()","net::http::http_default_port()","net::http::http_default_port()","rdoc::context#http_url()","rdoc::toplevel#http_url()","object#httpd()","date#httpdate()","date::httpdate()","datetime::httpdate()","time#httpdate()","gem::remotefetcher#https?()","net::http::https_default_port()","net::http::https_default_port()","tkhtml_file_viewer#hyper_cmd()","math::hypot()","numeric#i()","object#imoviebutton1()","xmlrpc::ipimethods()","tk::canvas#i_move()","tkctagaccess#i_move()","tk::winico::icon_info()","tk::wm#iconbitmap()","tk::wm::iconbitmap()","tk::wm::iconify()","tk::wm#iconify()","tk::wm#iconmask()","tk::wm::iconmask()","tk::wm#iconname()","tk::wm::iconname()","tk::wm::iconphoto()","tk::wm#iconphoto()","tk::wm#iconphoto_default()","tk::wm::iconphoto_default()","tk::wm#iconposition()","tk::wm::iconposition()","tk::tcllib::ico::icons()","iconv::iconv()","iconv#iconv()","json::iconv()","tk::wm#iconwindow()","tk::wm::iconwindow()","tk::bwidget::combobox#icursor()","tk::canvas#icursor()","tk::entry#icursor()","tk::iwidgets::entryfield#icursor()","tk::iwidgets::promptdialog#icursor()","tk::iwidgets::scrolledcanvas#icursor()","tk::iwidgets::spinner#icursor()","tk::tktable#icursor()","tkctagaccess#icursor()","tk::entry#icursor=()","tk::tktable#icursor_set()","openssl::engine#id()","openssl::ssl::session#id()","rexml::functions::id()","tk::blt::plotcomponent::axis#id()","tk::blt::plotcomponent::crosshairs#id()","tk::blt::plotcomponent::element#id()","tk::blt::plotcomponent::gridline#id()","tk::blt::plotcomponent::legend#id()","tk::blt::plotcomponent::marker#id()","tk::blt::plotcomponent::pen#id()","tk::blt::plotcomponent::postscript#id()","tk::blt::tree::node#id()","tk::blt::tree::tag#id()","tk::bwidget::listbox::item#id()","tk::bwidget::tree::node#id()","tk::tktable::celltag#id()","tk::winico#id()","tkfont#id()","tkfont#id()","tktextimage#id()","tktextimage#id()","tktextmark#id()","tktextmark#id()","tktexttag#id()","tktexttag#id()","tktextwindow#id()","tktextwindow#id()","tkvariable#id()","tkvariable#id()","tkwinfo::id()","tkwinfo::id()","tkcitem#id()","tkctag#id()","symbol#id2name()","tk::blt::plotcomponent::axis::id2obj()","tk::blt::plotcomponent::element::id2obj()","tk::blt::plotcomponent::marker::id2obj()","tk::blt::plotcomponent::pen::id2obj()","tk::blt::tabset::tab::id2obj()","tk::blt::tree::node::id2obj()","tk::blt::tree::tag::id2obj()","tk::bwidget::listbox::item::id2obj()","tk::bwidget::tree::node::id2obj()","tk::tcllib::plotchart::plotseries::id2obj()","tk::tcllib::widget::toolbaritem::id2obj()","tk::tktable::celltag::id2obj()","tk::winico::id2obj()","tknamespace::id2obj()","tktextmark::id2obj()","tktextmark::id2obj()","tktexttag::id2obj()","tktexttag::id2obj()","tkcitem::id2obj()","tkctag::id2obj()","syslog::ident()","file::identical?()","filetest#identical?()","fileutils::identical?()","tk::panedwindow#identify()","tk::panedwindow#identify()","tk::scale#identify()","tk::scrollbar#identify()","tk::spinbox#identify()","tk::spinbox#identify()","tk::tile::tpaned#identify()","tk::vu::dial#identify()","rubylex#identify_comment()","rubylex#identify_gvar()","rubylex#identify_here_document()","rubylex#identify_identifier()","rubylex#identify_number()","rubylex#identify_quotation()","rubylex#identify_string()","rubylex#identify_string_dvar()","matrix::identity()","net::imap#idle()","net::imap#idle_done()","curses::window#idlok()","tkpackage#if_needed()","io#iflush()","rdoc::codeobject#ignore()","rss::baseparser#ignore_unknown_element()","rss::baseparser#ignore_unknown_element=()","rexml::element#ignore_whitespace_nodes()","rdoc::codeobject#ignored?()","complex#imag()","matrix#imag()","numeric#imag()","rss::rss#image()","tktextimage#image()","tktextimage#image()","tktextimage#image=()","tktextimage#image=()","tk::html_widget#image_add()","tk::html_widget#image_at()","cgi::htmlextension#image_button()","tk::iwidgets::scrolledtext#image_cget()","tk::iwidgets::scrolledtext#image_cget_strict()","tk::iwidgets::scrolledtext#image_cget_tkstring()","tkhtml_file_viewer#image_cmd()","tk::iwidgets::scrolledtext#image_configinfo()","tk::iwidgets::scrolledtext#image_configure()","tk::blt::winop#image_convolve()","tk::blt::winop#image_convolve()","tk::blt::winop#image_gradient()","tk::blt::winop#image_gradient()","tk::iwidgets::scrolledtext#image_names()","tkcomm::image_obj()","tk::blt::winop#image_read_jpeg()","tk::blt::winop#image_read_jpeg()","tk::blt::winop#image_resample()","tk::blt::winop#image_resample()","tk::blt::winop#image_rotate()","tk::blt::winop#image_rotate()","tk::html_widget#image_set()","tk::tcllib::widget::canvas_sqmap#image_set()","rss::imagefaviconmodel::imagefavicon#image_size=()","tk::blt::winop#image_snap()","tk::blt::winop#image_snap()","tk::blt::winop#image_subsample()","tk::blt::winop#image_subsample()","tk::treectrl::image_tint()","tk::treectrl::image_tint()","tk::tcllib::widget::canvas_sqmap#image_unset()","tk::html_widget#image_update()","tk::bwidget::listbox#imagebind()","tk::bwidget::tree#imagebind()","tk::bwidget::listbox#imagebind_append()","tk::bwidget::tree#imagebind_append()","tk::bwidget::listbox#imagebind_remove()","tk::bwidget::tree#imagebind_remove()","tk::bwidget::listbox#imagebindinfo()","tk::bwidget::tree#imagebindinfo()","tk::html_widget#images()","complex#imaginary()","matrix#imaginary()","numeric#imaginary()","tkxim#imconfiginfo()","tkxim#imconfigure()","cgi::htmlextension#img()","tk::canvas#imove()","tkctagaccess#imove()","ixmldomdocument#implementation()","microsoft_freethreadedxmldom_1_0#implementation()","microsoft_xmldom_1_0#implementation()","win32ole_type#implemented_ole_types()","tk::iwidgets::scrolledhtml#import()","tk::iwidgets::scrolledtext#import()","dl::importer#import_function()","tk::iwidgets::scrolledhtml#import_link()","dl::importer#import_symbol()","object#import_ucm()","dl::importer#import_value()","simpletuplespace#in()","tuplespace#in()","rake::taskmanager#in_namespace()","rdoc::ri::driver#in_path?()","gserver::in_service?()","rdoc::markup::formatter#in_tt?()","shell::processcontroller#inactivate()","optionparser::inc()","optionparser#inc()","curses::inch()","curses::window#inch()","rake::filelist#include()","tk::bwidget::dragsite::include()","tk::bwidget::dropsite::include()","tk::bwidget::dynamichelp::include()","tkcgroup#include()","array#include?()","cgi::queryextension#include?()","csv::row#include?()","dbm#include?()","drb::timeridconv::timerholder2#include?()","env::include?()","enumerable#include?()","gdbm#include?()","hash#include?()","ipaddr#include?()","module#include?()","rexml::attlistdecl#include?()","range#include?()","sdbm#include?()","set#include?()","string#include?()","tk::tktable::celltag#include?()","rdoc::markup::preprocess#include_file()","json::ext::generator::generatormethods::string::included()","module#included_modules()","optionparser::switch::incompatible_argument_styles()","optionparser::switch::noargument::incompatible_argument_styles()","encoding::invalidbytesequenceerror#incomplete_input?()","json::ext::generator::state#indent()","rexml::node#indent()","syck::baseemitter#indent()","syck::baseemitter#indent!()","json::ext::generator::state#indent=()","rexml::text#indent_text()","syck::baseemitter#indent_text()","psych::emitter#indentation()","psych::emitter#indentation=()","array#index()","csv::row#index()","env::index()","matrix#index()","rexml::parent#index()","sdbm#index()","string#index()","tk::blt::htext#index()","tk::blt::tabset#index()","tk::blt::tabset::tab#index()","tk::blt::tree::node#index()","tk::blt::treeview#index()","tk::blt::treeview::tagorid_methods#index()","tk::blt::vector#index()","tk::bwidget::buttonbox#index()","tk::bwidget::dialog#index()","tk::bwidget::listbox#index()","tk::bwidget::listbox::item#index()","tk::bwidget::notebook#index()","tk::bwidget::tree#index()","tk::bwidget::tree::node#index()","tk::canvas#index()","tk::entry#index()","tk::html_widget#index()","tk::iwidgets::buttonbox#index()","tk::iwidgets::checkbox#index()","tk::iwidgets::dialogshell#index()","tk::iwidgets::entryfield#index()","tk::iwidgets::hierarchy#index()","tk::iwidgets::menubar#index()","tk::iwidgets::notebook#index()","tk::iwidgets::optionmenu#index()","tk::iwidgets::panedwindow#index()","tk::iwidgets::promptdialog#index()","tk::iwidgets::radiobox#index()","tk::iwidgets::scrolledcanvas#index()","tk::iwidgets::scrolledlistbox#index()","tk::iwidgets::scrolledtext#index()","tk::iwidgets::selectionbox#index()","tk::iwidgets::selectiondialog#index()","tk::iwidgets::spinner#index()","tk::iwidgets::tabnotebook#index()","tk::iwidgets::tabset#index()","tk::iwidgets::toolbar#index()","tk::listbox#index()","tk::menu#index()","tk::optionmenubutton#index()","tk::optionmenubutton#index()","tk::tile::tnotebook#index()","tk::tile::tnotebook#index()","tk::tktable#index()","tkctagaccess#index()","yaml::dbm#index()","tk::blt::treeview#index_at()","tk::blt::treeview#index_at_path()","rexml::node#index_in_parent()","tk::blt::tabset#index_name()","tk::blt::treeview::tagorid_methods#index_path()","tktextio#index_pos()","tktextio#index_pos=()","gem::sourceindex#index_signature()","gem::sourceindex#index_signature()","tk::text::indexmodmethods#indices()","sys#indir()","bigdecimal#infinite?()","float#infinite?()","openssl::pkey::ec::point#infinity?()","gem::inflate()","zlib::inflate()","zlib::inflate::inflate()","zlib::inflate#inflate()","logger#info()","tk::blt::table#info()","tk::blt::watch#info()","tk::winico::info()","tk::winico#info()","tkgrid::info()","tkgrid::info()","tkpack::info()","tkpack::info()","tkplace::info()","tkplace::info()","tktimer#info()","tktimer::info()","tktimer::info()","tktimer#info()","webrick::basiclog#info()","win32::registry#info()","logger#info?()","webrick::basiclog#info?()","webrick::httpstatus::info?()","tk::itcl::itclobject#info_class()","tk::itcl::itclobject#info_function()","tk::itcl::itclobject#info_heritage()","tk::itcl::itclobject#info_inherit()","tk::itcl::itclobject#info_variable()","tk::tclx::infox()","exports::inherited()","multitkip::inherited()","multitkip::inherited()","multitkip::inherited()","multitkip::inherited()","rss::element#inherited()","rss::maker::base#inherited()","rss::utils::inheritedreader#inherited_array_reader()","rss::element#inherited_base()","rss::maker::base#inherited_base()","rss::utils::inheritedreader#inherited_hash_reader()","rss::utils::inheritedreader#inherited_reader()","demotree::init()","gem::packagetask#init()","irb::inspector#init()","rake::application#init()","rake::application#init()","rake::packagetask#init()","tk::bwidget::widget::init()","tk::tcllib::history::init()","curses::init_color()","irb::init_config()","fileviewer#init_curses()","irb::init_error()","gem::gempathsearcher#init_gemspecs()","multitkip::init_ip_env()","multitkip::init_ip_env()","multitkip::init_ip_env()","multitkip::init_ip_env()","multitkip::init_ip_internal()","multitkip::init_ip_internal()","multitkip::init_ip_internal()","multitkip::init_ip_internal()","curses::init_pair()","tktreectrl_demo#init_pics()","irb::context#init_save_history()","curses::init_screen()","tk::blt::dragdrop::init_source()","rdoc::markup::toansi#init_tags()","rdoc::markup::tobs#init_tags()","rdoc::markup::tohtml#init_tags()","rdoc::markup::tordoc#init_tags()","tkfont::init_widget_font()","tkfont::init_widget_font()","tk::tcllib::widget::toolbaritem#initaialize()","process::initgroups()","rdoc::generator::ri#initialize()","shell::commandprocessor::initialize()","tk::tcllib::ntext#initializematchpatterns()","tk::rbwidget::scrollframe#initialize_composite()","tkscrolledcanvas#initialize_composite()","array#initialize_copy()","gem::specification#initialize_copy()","hash#initialize_copy()","json::ext::generator::state#initialize_copy()","openstruct#initialize_copy()","set#initialize_copy()","string#initialize_copy()","zlib::deflate#initialize_copy()","net::httpheader#initialize_http_header()","rubylex#initialize_input()","rdoc::context#initialize_methods_etc()","irb::initialize_tracer()","test1#inittoplevel()","enumerable#inject()","rss::atom::feed::entry::content#inline_html?()","rss::atom::feed::entry::content#inline_other?()","rss::atom::feed::entry::content#inline_other_base64?()","rss::atom::feed::entry::content#inline_other_text?()","rss::atom::feed::entry::content#inline_other_xml?()","rss::atom::feed::entry::content#inline_text?()","rss::atom::feed::entry::content#inline_xhtml?()","vector#inner_product()","file::stat#ino()","argf#inplace_mode()","argf#inplace_mode=()","gem::mockgemui#input()","readline::input=()","shell::appendfile#input=()","shell::appendio#input=()","shell::filter#input=()","shell::systemcommand#input=()","win32ole_param#input?()","tkkinput::input_end()","tkkinput::input_start()","curses::insch()","curses::window#insch()","array#insert()","irb::jobmanager#insert()","string#insert()","tk::blt::table#insert()","tk::blt::tabnotebook#insert()","tk::blt::tabset#insert()","tk::blt::treeview#insert()","tk::blt::treeview::tagorid_methods#insert()","tk::bwidget::buttonbox#insert()","tk::bwidget::listbox#insert()","tk::bwidget::notebook#insert()","tk::bwidget::tree#insert()","tk::canvas#insert()","tk::entry#insert()","tk::iwidgets::buttonbox#insert()","tk::iwidgets::checkbox#insert()","tk::iwidgets::dialogshell#insert()","tk::iwidgets::entryfield#insert()","tk::iwidgets::hierarchy#insert()","tk::iwidgets::menubar#insert()","tk::iwidgets::notebook#insert()","tk::iwidgets::optionmenu#insert()","tk::iwidgets::panedwindow#insert()","tk::iwidgets::promptdialog#insert()","tk::iwidgets::radiobox#insert()","tk::iwidgets::scrolledcanvas#insert()","tk::iwidgets::scrolledlistbox#insert()","tk::iwidgets::scrolledtext#insert()","tk::iwidgets::spinner#insert()","tk::iwidgets::tabnotebook#insert()","tk::iwidgets::tabset#insert()","tk::iwidgets::toolbar#insert()","tk::menu#insert()","tk::optionmenubutton#insert()","tk::optionmenubutton#insert()","tk::rbwidget::alignbox#insert()","tk::tcllib::ip_entry#insert()","tk::tcllib::ip_entry#insert()","tk::tile::tnotebook#insert()","tk::tile::tnotebook#insert()","tk::tile::tpaned#insert()","tkmulticolumnlist#insert()","tkmultilistframe#insert()","tkmultilistbox#insert()","tktextwin#insert()","tkctagaccess#insert()","ixmldomattribute#insertbefore()","ixmldomcdatasection#insertbefore()","ixmldomcharacterdata#insertbefore()","ixmldomcomment#insertbefore()","ixmldomdocument#insertbefore()","ixmldomdocumentfragment#insertbefore()","ixmldomdocumenttype#insertbefore()","ixmldomelement#insertbefore()","ixmldomentity#insertbefore()","ixmldomentityreference#insertbefore()","ixmldomnode#insertbefore()","ixmldomnotation#insertbefore()","ixmldomprocessinginstruction#insertbefore()","ixmldomtext#insertbefore()","ixtlruntime#insertbefore()","microsoft_freethreadedxmldom_1_0#insertbefore()","microsoft_xmldom_1_0#insertbefore()","ixmldomcdatasection#insertdata()","ixmldomcharacterdata#insertdata()","ixmldomcomment#insertdata()","ixmldomtext#insertdata()","tk::tktable#insert_active()","rexml::parent#insert_after()","tk::blt::table#insert_after()","tk::blt::treeview#insert_at()","arraycode#insert_at_last()","rexml::parent#insert_before()","tk::blt::table#insert_before()","tk::tktable#insert_cols()","tk::html_widget#insert_cursor()","tk::iwidgets::combobox#insert_entry()","tk::iwidgets::selectionbox#insert_items()","tk::iwidgets::selectiondialog#insert_items()","tk::iwidgets::disjointlistbox#insert_lhs()","tk::iwidgets::combobox#insert_list()","encoding::converter#insert_output()","tk::iwidgets::disjointlistbox#insert_rhs()","tk::tktable#insert_rows()","tk::iwidgets::selectionbox#insert_selection()","tk::iwidgets::selectiondialog#insert_selection()","tk::blt::tabset#insert_tabs()","curses::insertln()","curses::window#insertln()","tk::blt::barchart#inside()","tk::blt::graph#inside()","tk::blt::stripchart#inside()","actionmap#inspect()","addrinfo#inspect()","array#inspect()","bigdecimal#inspect()","csv#inspect()","csv::row#inspect()","csv::table#inspect()","complex#inspect()","dl::cfunc#inspect()","dl::cptr#inspect()","dl::cptr#inspect()","date#inspect()","digest::hmac#inspect()","digest::instance#inspect()","dir#inspect()","env::inspect()","encoding#inspect()","encoding::converter#inspect()","enumerator#inspect()","exception#inspect()","file::stat#inspect()","gem::platform#inspect()","hash#inspect()","io#inspect()","ipaddr#inspect()","irb::context#inspect()","irb::history#inspect()","irb::irb#inspect()","irb::jobmanager#inspect()","irb::slex#inspect()","iconv::failure#inspect()","jisx0208::char#inspect()","matchdata#inspect()","matrix#inspect()","method#inspect()","multitkip#inspect()","multitkip#inspect()","multitkip#inspect()","multitkip#inspect()","net::http#inspect()","net::http#inspect()","net::httpgenericrequest#inspect()","net::httpresponse#inspect()","net::internetmessageio::writeadapter#inspect()","net::pop3#inspect()","net::pop3#inspect()","net::pop3#inspect()","net::pop3#inspect()","net::popmail#inspect()","net::smtp#inspect()","net::smtp#inspect()","nilclass#inspect()","object#inspect()","openssl::config#inspect()","openssl::engine#inspect()","openssl::hmac#inspect()","openssl::x509::certificate#inspect()","openstruct#inspect()","optionparser::parseerror#inspect()","process::status#inspect()","rexml::attribute#inspect()","rexml::element#inspect()","rexml::instruction#inspect()","rexml::parsers::pullevent#inspect()","rexml::text#inspect()","rexml::validation::choice#inspect()","rexml::validation::event#inspect()","rexml::validation::interleave#inspect()","rexml::validation::ref#inspect()","rexml::validation::state#inspect()","rexml::xmldecl#inspect()","rake::task#inspect()","rake::taskarguments#inspect()","range#inspect()","rational#inspect()","regexp#inspect()","rubyvm::instruction#inspect()","rubyvm::instructionsequence#inspect()","set#inspect()","shell#inspect()","shell::filter#inspect()","socket::ancillarydata#inspect()","socket::option#inspect()","string#inspect()","stringscanner#inspect()","struct#inspect()","syck::specialhash#inspect()","symbol#inspect()","syslog::inspect()","thread#inspect()","time#inspect()","tk::blt::vector#inspect()","tkcallbackentry::inspect()","tkcomposite#inspect()","tkcore#inspect()","tkfont#inspect()","tkfont#inspect()","tkutil::callbacksubst::inspect()","tkutil::callbacksubst::info::inspect()","tkvariable#inspect()","tkvariable#inspect()","uri::generic#inspect()","uri::parser#inspect()","unboundmethod#inspect()","vector#inspect()","win32ole_method#inspect()","win32ole_param#inspect()","win32ole_type#inspect()","win32ole_typelib#inspect()","win32ole_variable#inspect()","win32::registry#inspect()","zlib::gzipfile::error#inspect()","irb::context#inspect?()","irb::context#inspect_last_value()","irb::context#inspect_mode=()","addrinfo#inspect_sockaddr()","irb::inspector#inspect_value()","fileutils::install()","gem::dependencyinstaller#install()","gem::installer#install()","object#install()","sys#install()","drb::install_acl()","irb::extendcommandbundle#install_alias_method()","irb::extendcommandbundle#install_alias_method()","tkevent#install_bind()","tkevent#install_bind_for_event_class()","shell::commandprocessor::install_builtin_commands()","rss::baselistener#install_class_name()","tkcomm#install_cmd()","tkcomm::install_cmd()","tkutil::install_cmd()","rss::basemodel#install_date_element()","rss::maker::dublincoremodel::install_dublin_core()","gem::commands::setupcommand#install_executables()","irb::contextextender::install_extend_commands()","irb::contextextender::install_extend_commands()","irb::extendcommandbundle::install_extend_commands()","irb::extendcommandbundle::install_extend_commands()","rss::element#install_get_attribute()","rss::baselistener#install_get_text_element()","rss::basemodel#install_have_attribute_element()","rss::basemodel#install_have_child_element()","rss::basemodel#install_have_children_element()","drb::install_id_conv()","rss::maker::imagefaviconmodel::install_image_favicon()","rss::maker::imageitemmodel::install_image_item()","gem::indexer#install_indicies()","gem::commands::setupcommand#install_lib()","acl#install_list()","rss::element#install_model()","rss::element#install_must_call_validator()","rss::element#install_ns()","gem::commands::setupcommand#install_rdoc()","gem::docmanager#install_rdoc()","gem::docmanager#install_ri()","rdoc::generator::ri#install_siginfo_handler()","rdoc::rdoc#install_siginfo_handler()","shell::install_system_commands()","shell::commandprocessor::install_system_commands()","rss::maker::taxonomytopicmodel::install_taxo_topic()","rss::maker::taxonomytopicsmodel::install_taxo_topics()","rss::basemodel#install_text_element()","gem::installupdateoptions#install_update_defaults_str()","gem::specification#installation_path()","gem::installer#installation_satisfies_dependency?()","gem::sourceindex::installed_spec_directories()","gem::sourceindex::installed_spec_directories()","csv::instance()","gem::commandmanager::instance()","prime#instance()","syslog::instance()","rdoc::context#instance_attributes()","forwardable#instance_delegate()","basicobject#instance_eval()","tk::encodedstring#instance_eval()","basicobject#instance_exec()","module#instance_method()","rdoc::context#instance_method_list()","module#instance_methods()","rdoc::ri::store#instance_methods()","object#instance_of?()","object#instance_variable_defined?()","object#instance_variable_get()","tk::encodedstring#instance_variable_get()","object#instance_variable_set()","tk::encodedstring#instance_variable_set()","object#instance_variables()","tk::encodedstring#instance_variables()","rexml::streamlistener#instruction()","rss::listenermixin#instruction()","rexml::parsers::pullevent#instruction?()","rexml::element#instructions()","socket::ancillarydata#int()","socket::ancillarydata::int()","socket::option::int()","socket::option#int()","xmlrpc::convert::int()","prime#int_from_prime_division()","integer#integer?()","integer#integer?()","numeric#integer?()","fileviewer#interact()","object#interactive()","rdoc::ri::driver#interactive()","xmlrpc::interface()","rake::taskmanager#intern()","string#intern()","symbol#intern()","argf#internal_encoding()","io#internal_encoding()","stringio#internal_encoding()","tkwinfo::interps()","tkwinfo::interps()","debugger__#interrupt()","webrick::utils::timeouthandler#interrupt()","set#intersection()","tk::rbwidget::balloonhelp#interval()","tk::tcllib::plotchart::xyplot#interval()","tk::bwidget::inuse()","tkimage#inuse()","matrix#inv()","multitkip#invalid_namespace?()","multitkip#invalid_namespace?()","multitkip#invalid_namespace?()","multitkip#invalid_namespace?()","remotetkip#invalid_namespace?()","tcltkip#invalid_namespace?()","matrix#inverse()","dbm#invert()","env::invert()","gdbm#invert()","hash#invert()","sdbm#invert()","yaml::dbm#invert()","openssl::pkey::ec::point#invert!()","rake::task#investigation()","win32ole_method#invkind()","gem::command#invoke()","rake::task#invoke()","tk::blt::tabset#invoke()","tk::blt::tabset::tab#invoke()","tk::bwidget::buttonbox#invoke()","tk::bwidget::dialog#invoke()","tk::bwidget::entry#invoke()","tk::button#invoke()","tk::iwidgets::buttonbox#invoke()","tk::iwidgets::dialogshell#invoke()","tk::iwidgets::extbutton#invoke()","tk::iwidgets::menubar#invoke()","tk::iwidgets::panedwindow#invoke()","tk::iwidgets::promptdialog#invoke()","tk::iwidgets::pushbutton#invoke()","tk::menu#invoke()","tk::optionmenubutton#invoke()","tk::optionmenubutton#invoke()","tk::spinbox#invoke()","tk::spinbox#invoke()","win32ole#invoke()","multitkip::invoke_hidden()","multitkip::invoke_hidden()","multitkip#invoke_hidden()","multitkip#invoke_hidden()","multitkip#invoke_hidden()","multitkip::invoke_hidden()","multitkip#invoke_hidden()","multitkip::invoke_hidden()","multitkip::invoke_hidden_on_global()","multitkip::invoke_hidden_on_global()","multitkip#invoke_hidden_on_global()","multitkip#invoke_hidden_on_global()","multitkip#invoke_hidden_on_global()","multitkip::invoke_hidden_on_global()","multitkip::invoke_hidden_on_global()","multitkip#invoke_hidden_on_global()","multitkip#invoke_hidden_on_namespace()","multitkip#invoke_hidden_on_namespace()","multitkip::invoke_hidden_on_namespace()","multitkip::invoke_hidden_on_namespace()","multitkip::invoke_hidden_on_namespace()","multitkip#invoke_hidden_on_namespace()","multitkip::invoke_hidden_on_namespace()","multitkip#invoke_hidden_on_namespace()","win32ole_method#invoke_kind()","rake::application#invoke_task()","rake::application#invoke_task()","tk::entry#invoke_validate()","tk::blt::barchart#invtransform()","tk::blt::graph#invtransform()","tk::blt::plotcomponent::axis#invtransform()","tk::blt::stripchart#invtransform()","io#ioctl()","tktextio#ioctrl()","io#ioflush()","addrinfo::ip()","ipaddr#ip6_arpa()","ipaddr#ip6_int()","addrinfo#ip?()","addrinfo#ip_address()","socket::ip_address_list()","multitkip::ip_name()","multitkip#ip_name()","multitkip::ip_name()","multitkip::ip_name()","multitkip#ip_name()","multitkip#ip_name()","multitkip#ip_name()","multitkip::ip_name()","socket::ancillarydata#ip_pktinfo()","socket::ancillarydata::ip_pktinfo()","addrinfo#ip_port()","addrinfo#ip_unpack()","addrinfo#ipv4?()","ipaddr#ipv4?()","ipaddr#ipv4_compat()","ipaddr#ipv4_compat?()","addrinfo#ipv4_loopback?()","ipaddr#ipv4_mapped()","ipaddr#ipv4_mapped?()","addrinfo#ipv4_multicast?()","addrinfo#ipv4_private?()","addrinfo#ipv6?()","ipaddr#ipv6?()","addrinfo#ipv6_linklocal?()","addrinfo#ipv6_loopback?()","addrinfo#ipv6_mc_global?()","addrinfo#ipv6_mc_linklocal?()","addrinfo#ipv6_mc_nodelocal?()","addrinfo#ipv6_mc_orglocal?()","addrinfo#ipv6_mc_sitelocal?()","addrinfo#ipv6_multicast?()","socket::ancillarydata#ipv6_pktinfo()","socket::ancillarydata::ipv6_pktinfo()","socket::ancillarydata#ipv6_pktinfo_addr()","socket::ancillarydata#ipv6_pktinfo_ifindex()","addrinfo#ipv6_sitelocal?()","addrinfo#ipv6_to_ipv4()","addrinfo#ipv6_unspecified?()","addrinfo#ipv6_v4compat?()","addrinfo#ipv6_v4mapped?()","irb::irb()","irb::extendcommand::nop#irb()","irb::jobmanager#irb()","irb::irb_abort()","irb::irb_at_exit()","irb::extendcommandbundle#irb_context()","irb::extendcommandbundle#irb_context()","irb::irb_exit()","irb::extendcommandbundle#irb_exit()","irb::extendcommandbundle#irb_exit()","irb::context#irb_level()","irb::extendcommandbundle#irb_load()","irb::extendcommandbundle#irb_load()","irb::irbloader#irb_load()","irb::extendcommandbundle::irb_original_method_name()","irb::extendcommandbundle::irb_original_method_name()","irb::extendcommandbundle#irb_require()","irb::extendcommandbundle#irb_require()","jacobian#isequal()","object#is_a?()","rake::filelist#is_a?()","string#is_binary_data?()","tk::blt::busy#is_busy()","certstore#is_ca?()","string#is_complex_yaml?()","syck::omap#is_complex_yaml?()","syck::pairs#is_complex_yaml?()","tkvariable#is_hash?()","tkvariable#is_hash?()","tk::itcl::is_itcl_class()","tk::itcl::is_itcl_instance()","tk::itcl::is_itcl_object()","object#is_macosx?()","remotetkip#is_rubytk?()","tkvariable#is_scalar?()","tkvariable#is_scalar?()","tkfont::is_system_font?()","tkfont::is_system_font?()","net::http::is_version_1_2?()","net::http::is_version_1_2?()","object#is_win32?()","tk::itcl::itclobject#isa()","tk::tcllib::widget::isa()","io#isatty()","stringio#isatty()","tktextio#isatty()","time#isdst()","kconv::iseuc()","string#iseuc()","kconv::isjis()","string#isjis()","date#iso8601()","date::iso8601()","datetime::iso8601()","datetime#iso8601()","time#iso8601()","process::sys::issetugid()","kconv::issjis()","string#issjis()","tk::iwidgets::messagebox#issue()","openssl::pkcs7::recipientinfo#issuer()","openssl::pkcs7::signerinfo#issuer()","openssl::x509::crl#issuer()","openssl::x509::certificate#issuer()","openssl::x509::crl#issuer=()","openssl::x509::certificate#issuer=()","openssl::x509::extensionfactory#issuer_certificate=()","kconv::isutf8()","string#isutf8()","tk::iwidgets::datefield#isvalid?()","tk::iwidgets::timefield#isvalid?()","date#italy()","tk::itcl::itclobject#itcl_kind_of?()","ixmldomnamednodemap#item()","ixmldomnodelist#item()","object#itemdrag()","object#itementer()","object#itemleave()","object#itemmark()","object#itemstartdrag()","object#itemstroke()","tk::treectrl::configmethod#item_cget()","tk::treectrl::configmethod#item_cget_strict()","tk::treectrl::configmethod#item_cget_tkstring()","tk::treectrl::configmethod#item_configinfo()","tk::treectrl::configmethod#item_configure()","tk::treectrl::configmethod#item_element_cget()","tk::treectrl::configmethod#item_element_cget_strict()","tk::treectrl::configmethod#item_element_cget_tkstring()","tk::treectrl::configmethod#item_element_configinfo()","tk::treectrl::configmethod#item_element_configure()","tk::canvas#itembind()","tk::iwidgets::scrolledcanvas#itembind()","tk::canvas#itembind_append()","tk::iwidgets::scrolledcanvas#itembind_append()","tk::canvas#itembind_remove()","tk::iwidgets::scrolledcanvas#itembind_remove()","tk::canvas#itembindinfo()","tk::iwidgets::scrolledcanvas#itembindinfo()","tk::blt::table#itemcget()","tk::tile::treeviewconfig#itemcget()","tk::blt::table#itemcget_strict()","tk::tile::treeviewconfig#itemcget_strict()","tk::blt::table#itemcget_tkstring()","tk::tile::treeviewconfig#itemcget_tkstring()","tkitemconfigoptkeys#itemconfig_hash_kv()","tk::blt::table#itemconfiginfo()","tk::tile::treeviewconfig#itemconfiginfo()","tk::blt::table#itemconfigure()","tk::itemvalidateconfigure#itemconfigure()","tk::tile::treeviewconfig#itemconfigure()","tk::canvas#itemfocus()","tk::iwidgets::scrolledcanvas#itemfocus()","tk::tcllib::widget::toolbar#itemid()","tk::tcllib::widget::toolbaritem#itemid()","tk::blt::table#iteminfo()","rss::atom::entry#items()","rss::rss#items()","tk::bwidget::listbox#items()","tk::bwidget::panelframe#items()","tk::bwidget::statusbar#items()","tk::tcllib::widget::panelframe#items()","tk::tcllib::widget::panelframe#items()","tk::tcllib::widget::statusbar#items()","tk::tcllib::widget::toolbar#items()","object#itemsunderarea()","tk::canvas#itemtype()","tk::iwidgets::scrolledcanvas#itemtype()","tkimage#itemtype()","tkctagaccess#itemtype()","kernel#iterator?()","openssl::cipher#iv=()","jacobian#jacobian()","date#jd()","date::jd()","datetime::jd()","date#jisx0301()","date::jisx0301()","datetime#jisx0301()","datetime::jisx0301()","shell#jobs()","shell::processcontroller#jobs()","shell::processcontroller#jobs_exist?()","array#join()","file::join()","gserver#join()","pathname#join()","shellwords::join()","thread#join()","threadswait#join()","threadswait#join()","tk::blt::table#join()","uri::join()","uri::parser#join()","threadswait#join_nowait()","threadswait#join_nowait()","complex::json_create()","date::json_create()","datetime::json_create()","exception::json_create()","json::ext::generator::generatormethods::string::extend#json_create()","range::json_create()","rational::json_create()","regexp::json_create()","struct::json_create()","symbol::json_create()","time::json_create()","date#julian()","date#julian?()","date::julian_leap?()","tk::iwidgets::combobox#justify()","tk::iwidgets::scrolledcanvas#justify()","tk::iwidgets::scrolledframe#justify()","tk::iwidgets::scrolledlistbox#justify()","tkfont#kanji_actual()","tkfont#kanji_actual()","tkfont#kanji_actual_displayof()","tkfont#kanji_actual_displayof()","tkfont#kanji_actual_hash()","tkfont#kanji_actual_hash()","tkfont#kanji_actual_hash_displayof()","tkfont#kanji_actual_hash_displayof()","tkfont#kanji_configinfo()","tkfont#kanji_configinfo()","tkfont#kanji_configure()","tkfont#kanji_configure()","tkfont#kanji_current_configinfo()","tkfont#kanji_current_configinfo()","tkfont#kanji_font()","tkfont#kanji_font()","tkfont#kanji_font_id()","tkfont#kanji_font_id()","tknamedfont#kanji_font_id()","tkkinput#kanji_input_end()","tkkinput#kanji_input_start()","tkfont#kanji_metrics()","tkfont#kanji_metrics()","tkfont#kanji_metrics_displayof()","tkfont#kanji_metrics_displayof()","tkfont#kanji_metrics_hash()","tkfont#kanji_metrics_hash()","tkfont#kanji_metrics_hash_displayof()","tkfont#kanji_metrics_hash_displayof()","tkfont#kanji_replace()","tkfont#kanji_replace()","tkfont#kanjifont()","tkfont#kanjifont()","tktreattagfont#kanjifont_configure()","tktreatitemfont#kanjifont_copy()","tktreattagfont#kanjifont_copy()","tktreatitemfont#kanjitagfont_configure()","kconv::kconv()","string#kconv()","webrick::httprequest#keep_alive?()","webrick::httpresponse#keep_alive?()","array#keep_if()","env::keep_if()","hash#keep_if()","set#keep_if()","tkmulticolumnlist#keep_minsize()","tkmultilistframe#keep_minsize()","tkmulticolumnlist#keep_minsize?()","tkmultilistframe#keep_minsize?()","dbm#key()","env::key()","gdbm#key()","hash#key()","sdbm#key()","openssl::cipher#key=()","cgi::queryextension#key?()","dbm#key?()","env::key?()","gdbm#key?()","hash#key?()","net::httpheader#key?()","sdbm#key?()","thread#key?()","openssl::cipher#key_len=()","tkhtml_file_viewer#key_press()","curses::keyname()","curses::window#keypad()","curses::window#keypad=()","cgi::queryextension#keys()","dbm#keys()","env::keys()","gdbm#keys()","hash#keys()","sdbm#keys()","thread#keys()","tk::blt::tree::node#keys()","tk::winregistry::keys()","tkvariable#keys()","tkvariable#keys()","win32::registry#keys()","object#kikaku()","irb::jobmanager#kill()","process::kill()","shell#kill()","shell::systemcommand#kill()","thread::kill()","thread#kill()","object#killclone()","shell::processcontroller#kill_job()","object#kind_of?()","rake::filelist#kind_of?()","tkkinput#kinput_attribute_config()","tkkinput#kinput_attribute_info()","tkkinput#kinput_send_spot()","tkkinput#kinput_start()","string#kjust()","object#kroc_rb_settings()","matrix::lupdecomposition#l()","tk::blt::tree::node#label()","tk::tcllib::tkpiechart::slice#label()","tk::blt::tree::node#label=()","tktree#labelat()","tk::tcllib::widget::superframe#labelwidget()","kernel#lambda()","proc#lambda?()","rexml::functions::lang()","tkvariable#lappend()","tkvariable#lappend()","array#last()","rdoc::markup::list#last()","rexml::functions::last()","range#last()","tktexttag#last()","tktexttag#last()","ixmldomattribute#lastchild()","ixmldomcdatasection#lastchild()","ixmldomcharacterdata#lastchild()","ixmldomcomment#lastchild()","ixmldomdocument#lastchild()","ixmldomdocumentfragment#lastchild()","ixmldomdocumenttype#lastchild()","ixmldomelement#lastchild()","ixmldomentity#lastchild()","ixmldomentityreference#lastchild()","ixmldomnode#lastchild()","ixmldomnotation#lastchild()","ixmldomprocessinginstruction#lastchild()","ixmldomtext#lastchild()","ixtlruntime#lastchild()","microsoft_freethreadedxmldom_1_0#lastchild()","microsoft_xmldom_1_0#lastchild()","tk::blt::tree::node#last_child()","dl::cfunc::last_error()","encoding::converter#last_error()","fiddle::last_error()","fiddle::last_error=()","regexp::last_match()","openuri::meta#last_modified()","rdoc::toplevel#last_modified()","openssl::x509::crl#last_update()","openssl::x509::crl#last_update=()","gem::latest_load_paths()","gem::latest_rubygems_version()","gem::latest_spec_for()","gem::server#latest_specs()","gem::sourceindex#latest_specs()","gem::sourceindex#latest_specs()","gem::specification::latest_specs()","gem::latest_version_for()","tkfont#latin_actual()","tkfont#latin_actual()","tkfont#latin_actual_displayof()","tkfont#latin_actual_displayof()","tkfont#latin_actual_hash()","tkfont#latin_actual_hash()","tkfont#latin_actual_hash_displayof()","tkfont#latin_actual_hash_displayof()","tkfont#latin_configinfo()","tkfont#latin_configinfo()","tkfont#latin_configure()","tkfont#latin_configure()","tkfont#latin_current_configinfo()","tkfont#latin_current_configinfo()","tkfont#latin_font()","tkfont#latin_font()","tkfont#latin_font_id()","tkfont#latin_font_id()","tknamedfont#latin_font_id()","tkfont#latin_metrics()","tkfont#latin_metrics()","tkfont#latin_metrics_displayof()","tkfont#latin_metrics_displayof()","tkfont#latin_metrics_hash()","tkfont#latin_metrics_hash()","tkfont#latin_metrics_hash_displayof()","tkfont#latin_metrics_hash_displayof()","tkfont#latin_replace()","tkfont#latin_replace()","tkfont#latinfont()","tkfont#latinfont()","tktreattagfont#latinfont_configure()","tktreattagfont#latinfont_copy()","tktreatitemfont#latintagfont_configure()","tktreatitemfont#latintagfont_copy()","gem::server#launch()","tk::html_widget#layout()","tk::tile::style#layout()","file::lchmod()","pathname#lchmod()","file::lchown()","pathname#lchown()","integer#lcm()","integer#lcm()","date#ld()","math::ldexp()","tk::blt::tree::node#leaf?()","date#leap?()","date::leap?()","board#left()","tk::tcllib::plotchart::chartmethod#legend()","tk::blt::plotcomponent#legend_activate()","tk::blt::plotcomponent#legend_bind()","tk::blt::plotcomponent#legend_bind_append()","tk::blt::plotcomponent#legend_bind_remove()","tk::blt::plotcomponent#legend_bindinfo()","tk::blt::plotcomponent#legend_cget()","tk::blt::plotcomponent#legend_cget_strict()","tk::blt::plotcomponent#legend_cget_tkstring()","tk::blt::plotcomponent#legend_configinfo()","tk::blt::plotcomponent#legend_configure()","tk::blt::plotcomponent#legend_deactivate()","tk::blt::plotcomponent#legend_get()","tk::blt::plotcomponent#legend_window_create()","tk::tcllib::plotchart::chartmethod#legendconfig()","array#length()","arraycode#length()","dbm#length()","digest::instance#length()","env::length()","gdbm#length()","gem::sourceindex#length()","gem::sourceindex#length()","hash#length()","ixmldomcdatasection#length()","ixmldomcharacterdata#length()","ixmldomcomment#length()","ixmldomnamednodemap#length()","ixmldomnodelist#length()","ixmldomtext#length()","matchdata#length()","queue#length()","rdoc::markup::listitem#length()","rexml::parent#length()","rexml::syncenumerator#length()","sdbm#length()","set#length()","string#length()","stringio#length()","struct#length()","symbol#length()","tempfile#length()","tk::blt::vector#length()","tk::blt::vector#length=()","socket::ancillarydata#level()","socket::option#level()","zlib::gzipfile#level()","irb::notifier::compositenotifier#level=()","logger::application#level=()","irb::notifier::compositenotifier#level_notifier=()","gem::text#levenshtein_distance()","ripper::lex()","rubylex#lex()","rubylex#lex_init()","rubylex#lex_int2()","object#lfenablebuttons()","math::lgamma()","tkvariable#lget()","tkvariable#lget()","tkvariable#lget_f()","tkvariable#lget_f()","tkvariable#lget_i()","tkvariable#lget_i()","gem::gempathsearcher#lib_dirs_for()","gem::specification#lib_dirs_glob()","gem::specification#lib_files()","object#libcheck_for_tclconfig()","tk::bwidget::library()","win32ole_typelib#library_name()","psych::libyaml_version()","gem::specification#license()","gem::specification#license=()","gem::specification#licenses()","gem::specification#licenses=()","bigdecimal::limit()","tk::blt::plotcomponent::axis#limits()","tkvariable#lindex()","tkvariable#lindex()","irb::readlineinputmethod#line()","irb::stdioinputmethod#line()","ixmldomparseerror#line()","rexml::parseexception#line()","tk::bwidget::tree#line()","tk::tcllib::diagrams#line()","tk::tcllib::plotchart::ribbonchart3d#line()","tk::text::indexmodmethods#line()","tk::blt::plotcomponent#line_activate()","debugger__::context#line_at()","tk::blt::plotcomponent#line_bind()","tk::blt::plotcomponent#line_bind_append()","tk::blt::plotcomponent#line_bind_remove()","tk::blt::plotcomponent#line_bindinfo()","readline::line_buffer()","tk::blt::plotcomponent#line_cget()","tk::blt::plotcomponent#line_cget_strict()","tk::blt::plotcomponent#line_cget_tkstring()","tk::blt::plotcomponent#line_closest()","tk::blt::plotcomponent#line_configinfo()","tk::blt::plotcomponent#line_configure()","tk::blt::plotcomponent#line_create()","tk::blt::plotcomponent#line_deactivate()","tk::blt::plotcomponent#line_delete()","tk::blt::plotcomponent#line_exist?()","tk::blt::plotcomponent#line_names()","tk::blt::htext#line_pos()","tk::blt::plotcomponent#line_show()","tk::blt::plotcomponent#line_type()","psych::emitter#line_width()","psych::emitter#line_width=()","tk::text::indexmodmethods#lineend()","argf#lineno()","io#lineno()","ripper::filter#lineno()","stringio#lineno()","tktextio#lineno()","zlib::gzipreader#lineno()","argf#lineno=()","io#lineno=()","stringio#lineno=()","tktextio#lineno=()","zlib::gzipreader#lineno=()","ixmldomparseerror#linepos()","argf#lines()","curses::lines()","io#lines()","string#lines()","stringio#lines()","tk::text::indexmodmethods#lines()","zlib::gzipreader#lines()","tk::text::indexmodmethods#linestart()","tk::tcllib::diagrams#linestyle()","tk::tcllib::diagrams#linewidth()","socket::option::linger()","socket::option#linger()","file::link()","fileutils::link()","rdoc::markup::tohtmlcrossref#link()","sys#link()","tk::blt::tree::node#link?()","sys#link_files()","encoding::list()","gem::specfetcher#list()","iconv::list()","inspector#list()","net::ftp#list()","net::imap#list()","signal::list()","thread::list()","threadgroup#list()","tk::macresource::list()","tk::tcllib::ico::list()","tkcomm::list()","tkvariable#list()","tkvariable#list()","tkctagaccess#list()","webrick::httputils::formdata#list()","tkvariable#list=()","tkvariable#list=()","tkvariable#list_element()","tkvariable#list_element()","rdoc::markup::tohtml#list_end_for()","rdoc::rdoc#list_files_in_directory()","tk::rbwidget::combobox#list_index()","rdoc::markup::tohtml#list_item_start()","rdoc::ri::driver#list_known_classes()","rdoc::ri::driver#list_methods_matching()","tk::tcllib::chatwidget#list_name()","tk::tcllib::chatwidget#list_name_full()","inspector#list_place()","tkvariable#list_type=()","tkvariable#list_type=()","tk::bwidget::listbox::item#listbox()","tkmulticolumnlist#listboxborder()","tkmultilistframe#listboxborder()","tkmulticolumnlist#listboxrelief()","tkmultilistframe#listboxrelief()","addrinfo#listen()","chatentry#listen()","gem::server#listen()","rexml::parsers::sax2parser#listen()","socket#listen()","tcpserver#listen()","unixserver#listen()","webrick::genericserver#listen()","rss::rexmlparser#listener()","rss::xmlparserparser#listener()","rss::xmlscanparser#listener()","rss::rexmllikexmlparser#listener=()","object#listup()","string#ljust()","fileutils::ln()","object#ln()","fileutils::ln_s()","fileutils::ln_sf()","jisx0208::char#lo()","object#lo_function()","csv::load()","gem::specification::load()","irb::locale#load()","ixmldomdocument#load()","json#load()","kernel#load()","marshal::load()","microsoft_freethreadedxmldom_1_0#load()","microsoft_xmldom_1_0#load()","object::syck::parser#load()","openssl::engine::load()","optionparser#load()","psych::load()","rake::defaultloader#load()","rake::makefileloader#load()","rubyvm::instructionsequence::load()","syck::load()","syck::load()","tkmsgcatalog#load()","tkmsgcatalog::load()","tkmsgcatalog::load()","tkmsgcatalog#load()","object#loaddir()","object#loaddir3()","object#loadicons()","object#loadimage()","object#loadimage3()","ixmldomdocument#loadxml()","microsoft_freethreadedxmldom_1_0#loadxml()","microsoft_xmldom_1_0#loadxml()","gem::configfile#load_api_keys()","rdoc::ri::store#load_cache()","xmlrpc::marshal#load_call()","rdoc::ri::store#load_class()","object::syck::parser#load_documents()","psych::load_documents()","syck::load_documents()","syck::load_documents()","gem::load_env_plugins()","fileviewer#load_file()","gem::configfile#load_file()","irb::irbloader#load_file()","psych::load_file()","syck::load_file()","syck::load_file()","tkhtml_file_viewer#load_file()","tk::bwidget::selectfont::load_font()","gem::sourceindex#load_gems_in()","gem::sourceindex#load_gems_in()","gem::commands::buildcommand#load_gemspec()","gem::package::tarinput#load_gemspec()","irb::historysavingability#load_history()","tk::tile::load_images()","tk::tile::load_images()","tk::tile::load_images()","rake::application#load_imports()","rake::application#load_imports()","rdoc::ri::driver#load_method()","rdoc::ri::store#load_method()","rdoc::ri::driver#load_methods_matching()","webrick::httputils::load_mime_types()","irb::load_modules()","gem::load_path_insert_index()","chashdir#load_pem_file()","photocanvas#load_photo()","gem::load_plugin_files()","gem::load_plugins()","openssl::engine#load_private_key()","openssl::engine#load_public_key()","rake#load_rakefile()","rake::application#load_rakefile()","rake::application#load_rakefile()","tkmsgcatalog#load_rb()","tkmsgcatalog::load_rb()","tkmsgcatalog#load_rb()","tkmsgcatalog::load_rb()","gem::docmanager::load_rdoc()","rdoc::rubygemshook::load_rdoc()","xmlrpc::marshal#load_response()","gem::sourceindex::load_specification()","gem::sourceindex::load_specification()","gem::specfetcher#load_specs()","psych::load_stream()","syck::load_stream()","syck::load_stream()","tk::load_tclscript_rsrc()","tk::load_tclscript_rsrcid()","tkmsgcatalog::load_tk()","tkmsgcatalog::load_tk()","tkmsgcatalog#load_tk()","tkmsgcatalog#load_tk()","gem::load_yaml()","gem::specification#loaded_from=()","gem::loaded_path?()","gem::platform::local()","time::local()","gem::localremoteoptions#local?()","basicsocket#local_address()","rexml::functions::local_name()","rexml::light::node#local_name()","rexml::light::node#local_name=()","kernel#local_variables()","tkmsgcatalog#locale()","tkmsgcatalog#locale()","tkmsgcatalog::locale()","tkmsgcatalog::locale()","win32ole::locale()","tkmsgcatalog::locale=()","tkmsgcatalog#locale=()","tkmsgcatalog#locale=()","tkmsgcatalog::locale=()","win32ole::locale=()","encoding::locale_charmap()","time#localtime()","tk::blt::table#locate()","tk::blt::dragdrop::location()","tkgrid::location()","tkgrid::location()","gem::location_of_caller()","mutex#lock()","net::http#lock()","net::http#lock()","tk::html_widget::lockcopy()","mutex#locked?()","bigmath::log()","cmath::log()","gserver#log()","logger#log()","logger::application#log()","math::log()","sys#log()","syslog::log()","webrick::basiclog#log()","webrick::log#log()","cmath::log!()","cmath::log10()","math::log10()","cmath::log10!()","cmath::log2()","math::log2()","cmath::log2!()","logger::application#log=()","logger::application#logger()","logger::application#logger=()","net::pop3#logging()","net::pop3#logging()","net::pop3#logging()","net::pop3#logging()","net::ftp#login()","net::imap#login()","net::telnet#login()","net::imap#logout()","rdoc::parser::c#look_for_directives_in()","rdoc::parser::ruby#look_for_directives_in()","rake::taskarguments#lookup()","rake::taskmanager#lookup()","tk::tile::style#lookup()","rinda::ringfinger#lookup_ring()","rinda::ringfinger#lookup_ring_any()","webrick::httpserver#lookup_server()","kernel#loop()","tktimer#loop_rest()","tktimer#loop_rest()","tktimer#loop_rest=()","tktimer#loop_rest=()","tk::treectrl::loupe()","tk::treectrl::loupe()","tk::blt::winop#lower()","tk::blt::winop#lower()","tk::canvas#lower()","tk::iwidgets::scrolledcanvas#lower()","tk::tktable::celltag#lower()","tktexttag#lower()","tktexttag#lower()","tkctagaccess#lower()","win32::sspi::securityhandle#lower()","matrix#lower_triangular?()","tk::bwidget::lreorder()","net::ftp#ls()","tkvariable#lset()","tkvariable#lset()","file::lstat()","file#lstat()","pathname#lstat()","rubyvm::vpath#lstat()","string#lstrip()","string#lstrip!()","net::imap#lsub()","lusolve#ludecomp()","matrix#lup()","matrix#lup_decomposition()","lusolve#lusolve()","c#m()","c1#m()","c2#m()","cc#m()","object#m()","bignum#magnitude()","complex#magnitude()","fixnum#magnitude()","float#magnitude()","numeric#magnitude()","vector#magnitude()","net::popmail#mail()","net::smtp#mailfrom()","net::smtp#mailfrom()","net::pop3#mails()","net::pop3#mails()","net::pop3#mails()","net::pop3#mails()","irb::context#main()","object#main()","thread::main()","irb::jobmanager#main_irb()","irb::jobmanager#main_thread()","net::httpheader#main_type()","tkconsole::maininterp_eval()","tkconsole::maininterp_record()","multitkip#mainloop()","multitkip::mainloop()","multitkip::mainloop()","multitkip#mainloop()","multitkip#mainloop()","multitkip#mainloop()","multitkip::mainloop()","multitkip::mainloop()","remotetkip#mainloop()","tcltkip#mainloop()","tcltklib#mainloop()","tcltklib::mainloop()","multitkip#mainloop_abort_on_exception()","multitkip#mainloop_abort_on_exception()","multitkip#mainloop_abort_on_exception()","multitkip#mainloop_abort_on_exception()","remotetkip#mainloop_abort_on_exception()","tcltkip#mainloop_abort_on_exception()","tcltklib::mainloop_abort_on_exception()","multitkip#mainloop_abort_on_exception=()","multitkip#mainloop_abort_on_exception=()","multitkip#mainloop_abort_on_exception=()","multitkip#mainloop_abort_on_exception=()","remotetkip#mainloop_abort_on_exception=()","tcltkip#mainloop_abort_on_exception=()","tcltklib::mainloop_abort_on_exception=()","tcltklib::mainloop_thread?()","multitkip#mainloop_watchdog()","multitkip#mainloop_watchdog()","multitkip#mainloop_watchdog()","multitkip#mainloop_watchdog()","remotetkip#mainloop_watchdog()","tcltkip#mainloop_watchdog()","tcltklib::mainloop_watchdog()","tcltklib#mainloop_watchdog()","win32ole_type#major_version()","win32ole_typelib#major_version()","gem::ext::builder::make()","rss::maker#make()","object#makeclone()","object#makecompoundmenu()","object#makenotebook()","object#makethemecontrol()","object#makethememenu()","object#maketoolbars()","knights_tour#make_seedismiss()","openssl::pkey::ec::point#make_affine!()","object#make_const()","gem::commands::setupcommand#make_destination_dirs()","rinda::tupleentry#make_expires()","pathname#make_link()","rdoc::parser::ruby#make_message()","object#make_pairs()","webrick::httpservlet::defaultfilehandler#make_partial_content()","webrick::httpauth::basicauth::make_passwd()","webrick::httpauth::digestauth::make_passwd()","webrick::httpauth::userdb#make_passwd()","object#make_random_fasta()","uri::parser#make_regexp()","object#make_repeat_fasta()","multitkip#make_safe()","multitkip#make_safe()","multitkip#make_safe()","multitkip#make_safe()","remotetkip#make_safe()","tcltkip#make_safe()","object#make_signature()","syck::make_stream()","syck::make_stream()","optionparser#make_switch()","pathname#make_symlink()","gem::indexer#make_temp_directories()","debugger__#make_thread_list()","rinda::tupleentry#make_tuple()","fileutils::makedirs()","rake::ftpuploader#makedirs()","sys#makedirs()","rss::atom::contentmodel#maker_target()","rss::atom::feed::logo#maker_target()","rss::atom::personconstruct#maker_target()","rss::taxonomytopicmodel::taxonomytopic#maker_target()","rss::taxonomytopicsmodel::taxonomytopics#maker_target()","rss::maker#makers()","dl::malloc()","dl::cptr::malloc()","dl::cptr::malloc()","dl::cstructentity::malloc()","dl::cunionentity::malloc()","gc::malloc_allocated_size()","gc::malloc_allocations()","tk::wm::manage()","gem::commands::ownercommand#manage_owners()","tkwinfo::manager()","tkwinfo::manager()","object#mandelbrot?()","multitkip::manipulable?()","multitkip#manipulable?()","multitkip::manipulable?()","multitkip#manipulable?()","multitkip#manipulable?()","multitkip#manipulable?()","multitkip::manipulable?()","multitkip::manipulable?()","remotetkip#manipulable?()","remotetkip::manipulable?()","array#map()","enumerable#map()","matrix#map()","object::syck::out#map()","psych::coder#map()","syck::baseemitter#map()","tk::blt::winop#map()","tk::blt::winop#map()","tk::tile::style#map()","vector#map()","array#map!()","set#map!()","vector#map2()","psych::coder#map=()","tk::tile::style#map_configinfo()","tk::tile::style#map_default_configinfo()","gem::indexer#map_gems_to_specs()","tkwinfo::mapped?()","tkwinfo::mapped?()","board#mark()","psych::parser#mark()","tk::entry#mark()","tk::iwidgets::entryfield#mark()","tk::iwidgets::promptdialog#mark()","tk::iwidgets::spinner#mark()","tktextimage#mark()","tktextimage#mark()","tktextwindow#mark()","tktextwindow#mark()","tk::iwidgets::hierarchy#mark_add()","tk::iwidgets::hierarchy#mark_clear()","tk::iwidgets::hierarchy#mark_get()","tk::iwidgets::scrolledtext#mark_gravity()","tk::iwidgets::scrolledtext#mark_names()","tk::iwidgets::scrolledtext#mark_next()","tk::iwidgets::scrolledtext#mark_previous()","tk::iwidgets::hierarchy#mark_remove()","tk::iwidgets::scrolledtext#mark_set()","multitkip#mark_trusted()","multitkip::mark_trusted()","multitkip#mark_trusted()","multitkip::mark_trusted()","multitkip#mark_trusted()","multitkip::mark_trusted()","multitkip::mark_trusted()","multitkip#mark_trusted()","tk::iwidgets::scrolledtext#mark_unset()","gem::specification#mark_version()","tk::blt::plotcomponent#marker_after()","tk::blt::plotcomponent#marker_before()","tk::blt::plotcomponent#marker_bind()","tk::blt::plotcomponent#marker_bind_append()","tk::blt::plotcomponent#marker_bind_remove()","tk::blt::plotcomponent#marker_bindinfo()","tk::blt::plotcomponent#marker_cget()","tk::blt::plotcomponent#marker_cget_strict()","tk::blt::plotcomponent#marker_cget_tkstring()","tk::blt::plotcomponent#marker_configinfo()","tk::blt::plotcomponent#marker_configure()","tk::blt::plotcomponent#marker_create()","tk::blt::plotcomponent#marker_delete()","tk::blt::plotcomponent#marker_exist?()","tk::blt::plotcomponent#marker_names()","tk::blt::plotcomponent#marker_type()","rdoc::text#markup()","rdoc::anymethod#markup_code()","tk::treectrl::configmethod#marquee_cget()","tk::treectrl::configmethod#marquee_cget_strict()","tk::treectrl::configmethod#marquee_cget_tkstring()","tk::treectrl::configmethod#marquee_configinfo()","tk::treectrl::configmethod#marquee_configure()","delegator#marshal_dump()","openstruct#marshal_dump()","rdoc::anymethod#marshal_dump()","rdoc::attr#marshal_dump()","time#marshal_dump()","version#marshal_dump()","delegator#marshal_load()","openstruct#marshal_load()","rdoc::anymethod#marshal_load()","rdoc::attr#marshal_load()","time#marshal_load()","version#marshal_load()","gem::marshal_version()","ipaddr#mask()","syslog::mask()","ipaddr#mask!()","syslog::mask=()","rdoc::markup::attributemanager#mask_protected_sequences()","multitkip::master?()","multitkip#master?()","multitkip#master?()","multitkip::master?()","multitkip#master?()","multitkip::master?()","multitkip#master?()","multitkip::master?()","acl::aclentry#match()","acl::acllist#match()","gem::platform::match()","irb::slex#match()","irb::slex::node#match()","optionparser::completinghash#match()","rexml::iosource#match()","rexml::quickpath::match()","rexml::source#match()","rexml::xpath::match()","rexml::xpathparser#match()","regexp#match()","rinda::template#match()","rinda::templateentry#match()","string#match()","symbol#match()","tuplespace::template#match()","gem::dependency#match?()","stringscanner#match?()","certstore#match_cert()","irb::slex::node#match_io()","syck::basenode#match_path()","syck::basenode#match_segment()","rexml::source#match_to()","rexml::source#match_to_consume()","stringscanner#matched()","stringscanner#matched?()","stringscanner#matched_size()","rexml::entity::matches?()","rexml::validation::choice#matches?()","rexml::validation::event#matches?()","rexml::validation::interleave#matches?()","rexml::validation::oneormore#matches?()","rexml::validation::optional#matches?()","rexml::validation::sequence#matches?()","gem::specification#matches_for_glob()","gem::dependency#matches_spec?()","gem::gempathsearcher#matching_file?()","gem::gempathsearcher#matching_files()","object#matching_methods()","gem::gempathsearcher#matching_paths()","gem::dependency#matching_specs()","irb::context#math_mode=()","object#matzruby_exec()","enumerable#max()","range#max()","sizedqueue#max()","sizedqueue#max=()","enumerable#max_by()","net::imap::max_flag_count()","net::imap::max_flag_count=()","actionmap#max_input_length()","actionmap#max_input_length_rec()","json::ext::generator::state#max_nesting()","json::ext::generator::state#max_nesting=()","process::maxgroups()","process::maxgroups=()","tkmsgcatalog::maxlen()","tkmsgcatalog#maxlen()","tkmsgcatalog#maxlen()","tkmsgcatalog::maxlen()","tk::wm#maxsize()","tk::wm::maxsize()","curses::window#maxx()","curses::window#maxy()","object#maybe_64bit?()","tkmsgcatalog#mc()","tkmsgcatalog::mc()","tkmsgcatalog#mc()","tkmsgcatalog::mc()","date#mday()","time#mday()","mdoc2man::mdoc2man()","mdoc2man#mdoc2man()","net::ftp#mdtm()","benchmark::measure()","benchmarkdriver#measure()","object#measure()","tkfont#measure()","tkfont::measure()","tkfont::measure()","tkfont#measure()","object#measure2()","tkfont#measure_displayof()","tkfont::measure_displayof()","tkfont#measure_displayof()","tkfont::measure_displayof()","benchmarkdriver#measure_file()","net::imap::bodytypebasic#media_subtype()","net::imap::bodytypemessage#media_subtype()","net::imap::bodytypemultipart#media_subtype()","net::imap::bodytypetext#media_subtype()","dbm#member?()","env::member?()","enumerable#member?()","gdbm#member?()","hash#member?()","rake::invocationchain#member?()","rake::invocationchain::emptyinvocationchain#member?()","range#member?()","sdbm#member?()","set#member?()","struct#members()","webrick::httpauth::htgroup#members()","benchmark::tms#memberwise()","tk::bwidget::selectcolor#menu()","tk::optionmenubutton#menu()","tk::optionmenubutton#menu()","tk::iwidgets::mainwindow#menubar()","tk::iwidgets::menubar#menubuttons()","tk::optionmenubutton#menucget()","tk::optionmenubutton#menucget()","tk::optionmenubutton#menucget_strict()","tk::optionmenubutton#menucget_strict()","tk::optionmenubutton#menuconfiginfo()","tk::optionmenubutton#menuconfiginfo()","tk::optionmenubutton#menuconfigure()","tk::optionmenubutton#menuconfigure()","tk::iwidgets::menubar#menupath()","tk::iwidgets::menubar#menupath_glob()","tk::iwidgets::menubar#menupath_tclregexp()","tk::menu#menutype()","actionmap::merge()","gem::dependency#merge()","hash#merge()","json::ext::generator::state#merge()","rdoc::classmodule#merge()","rdoc::markup::document#merge()","rdoc::markup::raw#merge()","set#merge()","tk::blt::vector#merge()","uri::generic#merge()","hash#merge!()","uri::generic#merge!()","actionmap::merge2()","gem::command#merge_options()","actionmap::merge_rects()","rdoc::markup::document#merged?()","benchmarkdriver#message()","chatclient#message()","exception#message()","exception2messagemapper::message()","exception2messagemapper::message()","net::smtp::response#message()","optionparser::parseerror#message()","rake::rulerecursionoverflowerror#message()","tk::tcllib::chatwidget#message()","object#messagereaddelayed()","win32ole_event::message_loop()","benchmarkdriver#message_print()","tkhtml_file_viewer#meta()","webrick::httprequest#meta_vars()","tk::blt::barchart#metafile()","tk::blt::stripchart#metafile()","object#method()","xmlrpc::create#methodcall()","xmlrpc::create#methodresponse()","shell::commandprocessor::method_added()","module#method_defined?()","rdoc::ri::driver#method_document()","rdoc::ri::store#method_file()","drb::drbobject#method_missing()","drb::drbobject#method_missing()","delegator#method_missing()","iehandler#method_missing()","microsoft_freethreadedxmldom_1_0#method_missing()","microsoft_xmldom_1_0#method_missing()","microsoft_xmldso_1_0#method_missing()","microsoft_xmlhttp_1#method_missing()","msxml#method_missing()","multitkip::method_missing()","multitkip#method_missing()","multitkip::method_missing()","multitkip::method_missing()","multitkip#method_missing()","multitkip#method_missing()","multitkip#method_missing()","multitkip::method_missing()","object#method_missing()","rexml::functions::method_missing()","rexml::quickpath::method_missing()","rake::taskarguments#method_missing()","tk::busy#method_missing()","tk::html_widget::clippingwindow#method_missing()","tk::iwidgets::scrolledcanvas#method_missing()","tk::iwidgets::scrolledlistbox#method_missing()","tk::iwidgets::scrolledtext#method_missing()","tk::tile::method_missing()","tk::tile::method_missing()","tk::tile::method_missing()","tkcore::tk_object_table#method_missing()","tkfont#method_missing()","tkfont#method_missing()","tkfont::chooser#method_missing()","tkfont::descendantfont#method_missing()","tkmsgcatalog#method_missing()","tkmsgcatalog#method_missing()","webrick::fakeproxyuri#method_missing()","win32ole#method_missing()","xmlrpc::client::proxy#method_missing()","xmlrpc::xmlparser::rexmlstreamparser::streamlistener#method_missing()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#method_missing()","rdoc::ri::driver#method_type()","delegator#methods()","object#methods()","rdoc::context#methods_by_type()","rdoc::context#methods_matching()","tkfont#metrics()","tkfont::metrics()","tkfont::metrics()","tkfont#metrics()","tkfont::metrics_displayof()","tkfont::metrics_displayof()","tkfont#metrics_displayof()","tkfont#metrics_displayof()","tkfont#metrics_hash()","tkfont#metrics_hash()","tkfont::metrics_hash()","tkfont::metrics_hash()","tkfont::metrics_hash_displayof()","tkfont#metrics_hash_displayof()","tkfont::metrics_hash_displayof()","tkfont#metrics_hash_displayof()","tk::clock::microseconds()","tk::tcllib::plotchart::ganttchart#milestone()","tk::tcllib::plotchart::timechart#milestone()","tk::clock::milliseconds()","rss::atom::feed::entry::content#mime_split()","webrick::httputils::mime_type()","enumerable#min()","range#min()","time#min()","xmlrpc::datetime#min=()","enumerable#min_by()","enumerable#minmax()","enumerable#minmax_by()","matrix#minor()","win32ole_type#minor_version()","win32ole_typelib#minor_version()","tk::wm#minsize()","tk::wm::minsize()","rss::itunesitemmodel::itunesduration#minute=()","rss::maker::itunesitemmodel::itunesdurationbase#minute=()","date#mjd()","object#mktextconfig()","object#mkboard()","net::http#mkcol()","net::http#mkcol()","dir::mkdir()","fileutils::mkdir()","gem::package::tarwriter#mkdir()","net::ftp#mkdir()","object#mkdir()","pathname#mkdir()","shell::commandprocessor#mkdir()","fileutils::mkdir_p()","object#mkmatrix()","object#mkmf()","fileutils::mkpath()","pathname#mkpath()","object#mkpieces()","time::mktime()","dir::mktmpdir()","object#mmult()","demotree::moddir()","bigdecimal::mode()","file::stat#mode()","rake::ftpfile#mode()","tkmultilistframe#mode()","tkmultilistbox#mode()","rss::element#models()","openstruct#modifiable()","photocanvas#modified?()","tk::tcllib::ctext#modified?()","tk::winico#modify_taskbar()","rdoc::include#module()","rdoc::classmodule#module?()","rdoc::normalmodule#module?()","module#module_eval()","module#module_exec()","rdoc::context#modules()","rdoc::ri::store#modules()","rdoc::toplevel::modules()","rdoc::context#modules_hash()","rdoc::toplevel::modules_hash()","bigdecimal#modulo()","bignum#modulo()","fixnum#modulo()","float#modulo()","numeric#modulo()","date#mon()","time#mon()","xmlrpc::datetime#mon=()","monitormixin#mon_enter()","monitormixin#mon_exit()","monitormixin#mon_synchronize()","monitormixin#mon_try_enter()","date#monday?()","time#monday?()","date#month()","time#month()","xmlrpc::datetime#month=()","cal#monthly()","tk::trofs::mount()","webrick::httpserver#mount()","webrick::httpserver#mount_proc()","pathname#mountpoint?()","tk::iwidgets::mainwindow#mousebar()","curses::mouseinterval()","curses::mousemask()","animatedwavedemo#move()","curses::window#move()","fileutils::move()","net::http#move()","net::http#move()","rinda::tuplespace#move()","tk::blt::tree::node#move()","tk::blt::winop#move()","tk::blt::winop#move()","tk::bwidget::listbox#move()","tk::bwidget::listbox::item#move()","tk::bwidget::notebook#move()","tk::bwidget::tree#move()","tk::bwidget::tree::node#move()","tk::canvas#move()","tk::iwidgets::scrolledcanvas#move()","tkctagaccess#move()","tuplespace#move()","tkgoldberg_demo#move0()","tkgoldberg_demo#move1()","tkgoldberg_demo#move10()","tkgoldberg_demo#move11()","tkgoldberg_demo#move12()","tkgoldberg_demo#move13()","tkgoldberg_demo#move14()","tkgoldberg_demo#move15()","tkgoldberg_demo#move15a()","tkgoldberg_demo#move16()","tkgoldberg_demo#move17()","tkgoldberg_demo#move18()","tkgoldberg_demo#move19()","tkgoldberg_demo#move2()","tkgoldberg_demo#move20()","tkgoldberg_demo#move21()","tkgoldberg_demo#move22()","tkgoldberg_demo#move23()","tkgoldberg_demo#move24()","tkgoldberg_demo#move25()","tkgoldberg_demo#move26()","tkgoldberg_demo#move3()","tkgoldberg_demo#move4()","tkgoldberg_demo#move5()","tkgoldberg_demo#move6()","tkgoldberg_demo#move7()","tkgoldberg_demo#move8()","tkgoldberg_demo#move9()","tkgoldberg_demo#move_abs()","tk::blt::tabset#move_after()","tk::blt::tabset::tab#move_after()","tk::blt::treeview#move_after()","tk::blt::treeview::tagorid_methods#move_after()","tk::blt::tabset#move_before()","tk::blt::tabset::tab#move_before()","tk::blt::treeview#move_before()","tk::blt::treeview::tagorid_methods#move_before()","tkhtml_file_viewer#move_big_image()","planet#move_from_i()","tk::blt::treeview#move_into()","tk::blt::treeview::tagorid_methods#move_into()","knights_tour#move_piece()","tk::canvas#move_to()","tkctagaccess#move_to()","tk::tcllib::diagrams#moveobject()","tk::canvas#moveto()","tk::scrollbar#moveto()","tkctagaccess#moveto()","tk::iwidgets::mainwindow#msgd()","file::mtime()","file#mtime()","file::stat#mtime()","net::ftp#mtime()","pathname#mtime()","zlib::gzipfile#mtime()","zlib::gzipwriter#mtime=()","mutex_m#mu_extended()","mutex_m#mu_lock()","mutex_m#mu_locked?()","mutex_m#mu_synchronize()","mutex_m#mu_try_lock()","mutex_m#mu_unlock()","bigdecimal#mult()","xmlrpc::client#multicall()","xmlrpc::client#multicall2()","xmlrpc::client#multicall2_async()","xmlrpc::client#multicall_async()","cgi::queryextension#multipart?()","net::imap::bodytypebasic#multipart?()","net::imap::bodytypemessage#multipart?()","net::imap::bodytypemultipart#multipart?()","net::imap::bodytypetext#multipart?()","cgi::htmlextension#multipart_form()","stringscanner::must_c_version()","rss::element#must_call_validators()","drb::mutex()","multitkip::mutex()","multitkip#mutex()","multitkip#mutex()","multitkip::mutex()","multitkip#mutex()","multitkip::mutex()","multitkip::mutex()","multitkip#mutex()","tk::blt::bitmap#mutex()","tk::blt::plotcomponent::axis#mutex()","tk::blt::plotcomponent::element#mutex()","tk::blt::plotcomponent::pen#mutex()","tk::blt::tabset::tab#mutex()","tk::blt::tree::tag#mutex()","tk::blt::watch#mutex()","tk::bwidget::listbox::item#mutex()","tk::bwidget::tree::node#mutex()","tk::itcl::itclobject#mutex()","tk::tcllib::plotchart::plotseries#mutex()","tk::tktable::celltag#mutex()","tkcomm#mutex()","tkcore::tk_object_table#mutex()","tkfont#mutex()","tkfont#mutex()","tkimage#mutex()","tknamespace#mutex()","tkoptiondb#mutex()","tkoptiondb#mutex()","tkoptiondb#mutex()","tktextmark#mutex()","tktextmark#mutex()","tktexttag#mutex()","tktexttag#mutex()","tktimer#mutex()","tktimer#mutex()","tkvariable#mutex()","tkvariable#mutex()","tkvirtualevent#mutex()","tkvirtualevent#mutex()","tkcgroup#mutex()","tkctag#mutex()","fileutils::mv()","object#mv()","tuplespace#mv()","net::pop3#n_bytes()","net::pop3#n_bytes()","net::pop3#n_bytes()","net::pop3#n_bytes()","irb::jobmanager#n_jobs()","net::pop3#n_mails()","net::pop3#n_mails()","net::pop3#n_mails()","net::pop3#n_mails()","dl::cfunc#name()","dl::function#name()","encoding#name()","ixmldomattribute#name()","ixmldomdocumenttype#name()","method#name()","module#name()","nameerror#name()","openssl::cipher#name()","openssl::digest#name()","openssl::engine#name()","openssl::pkcs7::signerinfo#name()","rdoc::anymethod#name()","rdoc::toplevel#name()","rexml::document#name()","rexml::functions::name()","rexml::light::node#name()","rexml::quickpath::name()","rake::task#name()","tk::blt::plotcomponent::axis#name()","tk::blt::plotcomponent::element#name()","tk::blt::plotcomponent::pen#name()","tk::icons#name()","tkdialogobj#name()","tkdialogobj#name()","tkfont#name()","tkfont#name()","tkfont::descendantfont#name()","unboundmethod#name()","win32ole_method#name()","win32ole_param#name()","win32ole_type#name()","win32ole_typelib#name()","win32ole_variable#name()","win32::registry#name()","rdoc::classmodule#name=()","rexml::light::node#name=()","rexml::namespace#name=()","rdoc::classmodule#name_for_path()","rdoc::context#name_for_path()","encoding::name_list()","rdoc::alias#name_prefix()","rdoc::methodattr#name_prefix()","rdoc::ri::driver#name_regexp()","regexp#named_captures()","encoding#names()","matchdata#names()","regexp#names()","tk::blt::busy#names()","tk::blt::dnd::names()","tk::blt::printer::names()","tk::blt::vector::names()","tk::blt::watch::names()","tk::html_widget#names()","tk::tcllib::style::names()","tkfont::names()","tkfont::names()","tkimage::names()","tkpackage#names()","tk::tcllib::chatwidget#names_widget()","rexml::attribute#namespace()","rexml::element#namespace()","rexml::light::node#namespace()","rexml::light::node#namespace=()","ixmldomattribute#namespaceuri()","ixmldomcdatasection#namespaceuri()","ixmldomcharacterdata#namespaceuri()","ixmldomcomment#namespaceuri()","ixmldomdocument#namespaceuri()","ixmldomdocumentfragment#namespaceuri()","ixmldomdocumenttype#namespaceuri()","ixmldomelement#namespaceuri()","ixmldomentity#namespaceuri()","ixmldomentityreference#namespaceuri()","ixmldomnode#namespaceuri()","ixmldomnotation#namespaceuri()","ixmldomprocessinginstruction#namespaceuri()","ixmldomtext#namespaceuri()","ixtlruntime#namespaceuri()","microsoft_freethreadedxmldom_1_0#namespaceuri()","microsoft_xmldom_1_0#namespaceuri()","rexml::functions::namespace_context()","rexml::functions::namespace_context=()","rexml::functions::namespace_uri()","rexml::element#namespaces()","rexml::parsers::xpathparser#namespaces=()","rexml::xpathparser#namespaces=()","bigdecimal#nan?()","float#nan?()","ipaddr#native()","tk::blt::spline::natural()","object#navigate()","tk::blt::tabset#nearest()","tk::blt::treeview#nearest()","tk::iwidgets::scrolledlistbox#nearest()","tk::iwidgets::selectionbox#nearest()","tk::iwidgets::selectiondialog#nearest()","tk::listbox#nearest()","tkmulticolumnlist::nearest()","rss::atom::feed::entry::content#need_base64_encode?()","rss::element#need_base64_encode?()","rss::element#need_initialize_variables()","rss::maker::base#need_initialize_variables()","rss::atom::commonmodel#need_parent?()","rss::element#need_parent?()","rake::filecreationtask#needed?()","rake::filetask#needed?()","rake::task#needed?()","prettyprint#nest()","prettyprint::singleline#nest()","module::nesting()","acl::new()","acl::aclentry::new()","acl::acllist::new()","action::new()","actionmap::new()","addrinfo::new()","animatedimagelabel::new()","animatedtextlabel::new()","animatedwavedemo::new()","array::new()","arraycode::new()","blt_calendar_sample::new()","blt_graph_demo::new()","bwidget_demo::new()","bar::new()","basicobject::new()","benchmark::tms::new()","benchmarkdriver::new()","biff::new()","bigdecimal::new()","board::new()","branch::new()","cgi::new()","cgi::cookie::new()","cgi::session::new()","cgi::session::filestore::new()","cgi::session::memorystore::new()","cgi::session::nullstore::new()","cgi::session::pstore::new()","chashdir::new()","csv::new()","csv::row::new()","csv::table::new()","cal::new()","certstore::new()","chatclient::new()","chatentry::new()","chatserver::new()","class#new()","class::new()","clock::new()","compositepublisher::new()","conditionvariable::new()","crlstore::new()","curses::window::new()","dbm::new()","debugger__::context::new()","dl::cfunc::new()","dl::cptr::new()","dl::cptr::new()","dl::cstructentity::new()","dl::carriedfunction::new()","dl::compositehandler::new()","dl::function::new()","dl::handle::new()","dl::packer::new()","dl::stack::new()","dqentry::new()","drb::drbarray::new()","drb::drbobject::new()","drb::drbobject::new()","drb::drbremoteerror::new()","drb::drbsslsocket::new()","drb::drbsslsocket::sslconfig::new()","drb::drbserver::new()","drb::drbtcpsocket::new()","drb::drbunixsocket::new()","drb::drbunknown::new()","drb::drbunknownerror::new()","drb::extserv::new()","drb::extservmanager::new()","drb::gw::new()","drb::http0::callback::new()","drb::http0::clientside::new()","drb::http0::server::new()","drb::http0::serverside::new()","drb::http0::strstream::new()","drb::timeridconv::new()","drb::timeridconv::timerholder2::new()","drbex::new()","drbex2::new()","drbex3::new()","drbex4::new()","drbnamedidconv::new()","date::new()","datetime::new()","delegator::new()","demoapplication::new()","dhasen::new()","digest::hmac::new()","digest::instance#new()","digest::sha2::new()","dir::new()","erb::new()","emojitable::new()","encoding::converter::new()","enumerator::new()","exception::new()","exports::new()","fiddle::closure::new()","fiddle::closure::blockcaller::new()","fiddle::function::new()","file::new()","file::stat::new()","fileviewer::new()","foo::new()","front::new()","function::new()","gdbm::new()","gserver::new()","gem::builder::new()","gem::command::new()","gem::commandmanager::new()","gem::commands::buildcommand::new()","gem::commands::certcommand::new()","gem::commands::checkcommand::new()","gem::commands::cleanupcommand::new()","gem::commands::contentscommand::new()","gem::commands::dependencycommand::new()","gem::commands::environmentcommand::new()","gem::commands::fetchcommand::new()","gem::commands::generateindexcommand::new()","gem::commands::helpcommand::new()","gem::commands::installcommand::new()","gem::commands::listcommand::new()","gem::commands::lockcommand::new()","gem::commands::outdatedcommand::new()","gem::commands::ownercommand::new()","gem::commands::pristinecommand::new()","gem::commands::pushcommand::new()","gem::commands::querycommand::new()","gem::commands::rdoccommand::new()","gem::commands::searchcommand::new()","gem::commands::servercommand::new()","gem::commands::setupcommand::new()","gem::commands::sourcescommand::new()","gem::commands::specificationcommand::new()","gem::commands::stalecommand::new()","gem::commands::uninstallcommand::new()","gem::commands::unpackcommand::new()","gem::commands::updatecommand::new()","gem::commands::whichcommand::new()","gem::configfile::new()","gem::consoleui::new()","gem::dependency::new()","gem::dependencyinstaller::new()","gem::dependencylist::new()","gem::docmanager::new()","gem::filepermissionerror::new()","gem::format::new()","gem::gemnotfoundexception::new()","gem::gempathsearcher::new()","gem::gemrunner::new()","gem::indexer::new()","gem::installer::new()","gem::mockgemui::new()","gem::mockgemui::termerror::new()","gem::oldformat::new()","gem::package::formaterror::new()","gem::package::tarheader::new()","gem::package::tarinput::new()","gem::package::taroutput::new()","gem::package::tarreader::new()","gem::package::tarreader::new()","gem::package::tarreader::entry::new()","gem::package::tarwriter::new()","gem::package::tarwriter::new()","gem::package::tarwriter::boundedstream::new()","gem::package::tarwriter::restrictedstream::new()","gem::packagetask::new()","gem::pathsupport::new()","gem::platform::new()","gem::platformmismatch::new()","gem::remotefetcher::new()","gem::remotefetcher::fetcherror::new()","gem::requirement::new()","gem::requirement::new()","gem::security::policy::new()","gem::security::signer::new()","gem::server::new()","gem::silentui::new()","gem::sourceindex::new()","gem::sourceindex::new()","gem::specfetcher::new()","gem::specification::new()","gem::streamui::new()","gem::streamui::silentdownloadreporter::new()","gem::streamui::silentprogressreporter::new()","gem::streamui::simpleprogressreporter::new()","gem::streamui::verbosedownloadreporter::new()","gem::streamui::verboseprogressreporter::new()","gem::systemexitexception::new()","gem::uninstaller::new()","gem::validator::new()","getoptlong::new()","hash::new()","hi_exception::new()","hoge::new()","httpserver::new()","httpserver::request::new()","httpserver::response::new()","httpserver::table::new()","iehandler::new()","io::new()","ipaddr::new()","irb::context::new()","irb::extendcommand::nop::new()","irb::fileinputmethod::new()","irb::frame::new()","irb::history::new()","irb::inputmethod::new()","irb::inspector::new()","irb::irb::new()","irb::jobmanager::new()","irb::locale::new()","irb::notifier::abstractnotifier::new()","irb::notifier::compositenotifier::new()","irb::notifier::levelednotifier::new()","irb::notifier::nomsgnotifier::new()","irb::readlineinputmethod::new()","irb::slex::new()","irb::slex::node::new()","irb::stdioinputmethod::new()","irb::workspace::new()","iconv::new()","iconv::failure::new()","inspector::new()","jisx0208::char::new()","json::ext::generator::state::new()","json::ext::parser::new()","knights_tour::new()","lo_exception::new()","logger::new()","logger::application::new()","logger::formatter::new()","logger::logdevice::new()","mail::new()","mail::new()","matrix::new()","matrix::eigenvaluedecomposition::new()","matrix::lupdecomposition::new()","mdoc2man::new()","microsoft_freethreadedxmldom_1_0::new()","microsoft_xmldom_1_0::new()","microsoft_xmldso_1_0::new()","microsoft_xmlhttp_1::new()","module::new()","monitormixin::new()","monitormixin::conditionvariable::new()","msxml::new()","multitkip::new()","multitkip::new()","multitkip::new()","multitkip::new()","multitkip::new()","multitkip::new()","multitkip::new()","multitkip::new()","multitkip::command_queue::new()","multitkip_ok::new()","mutex::new()","mutex_m::new()","myapp::new()","myelem::new()","nameerror::new()","net::ftp::new()","net::http::new()","net::http::new()","net::http::new()","net::http::new()","net::httpgenericrequest::new()","net::httprequest::new()","net::httprequest::new()","net::imap::new()","net::imap::crammd5authenticator::new()","net::imap::digestmd5authenticator::new()","net::imap::loginauthenticator::new()","net::imap::plainauthenticator::new()","net::imap::responseerror::new()","net::internetmessageio::writeadapter::new()","net::pop3::new()","net::pop3::new()","net::pop3::new()","net::pop3::new()","net::smtp::new()","net::smtp::new()","net::smtp::response::new()","net::telnet::new()","nomethoderror::new()","notify::new()","nthtoggle::new()","oleproperty::new()","object::new()","object::syck::badalias::new()","object::syck::domaintype::new()","object::syck::emitter::new()","object::syck::map::new()","object::syck::object::new()","object::syck::out::new()","object::syck::parser::new()","object::syck::privatetype::new()","object::syck::resolver::new()","object::syck::scalar::new()","object::syck::seq::new()","openssl::asn1::asn1data::new()","openssl::asn1::constructive::new()","openssl::asn1::primitive::new()","openssl::bn::new()","openssl::buffering::new()","openssl::cipher::new()","openssl::config::new()","openssl::digest::new()","openssl::digest::digest::new()","openssl::hmac::new()","openssl::netscape::spki::new()","openssl::ocsp::basicresponse::new()","openssl::ocsp::certificateid::new()","openssl::ocsp::request::new()","openssl::ocsp::response::new()","openssl::pkcs12::new()","openssl::pkcs7::new()","openssl::pkcs7::recipientinfo::new()","openssl::pkcs7::signerinfo::new()","openssl::pkey::dh::new()","openssl::pkey::dsa::new()","openssl::pkey::ec::new()","openssl::pkey::ec::group::new()","openssl::pkey::ec::point::new()","openssl::pkey::pkey::new()","openssl::pkey::rsa::new()","openssl::pkey::rsa::new()","openssl::ssl::sslcontext::new()","openssl::ssl::sslsocket::new()","openssl::ssl::session::new()","openssl::x509::attribute::new()","openssl::x509::crl::new()","openssl::x509::certificate::new()","openssl::x509::extension::new()","openssl::x509::extensionfactory::new()","openssl::x509::name::new()","openssl::x509::request::new()","openssl::x509::revoked::new()","openssl::x509::store::new()","openstruct::new()","openuri::httperror::new()","openuri::httpredirect::new()","optionparser#new()","optionparser::new()","optionparser::arguable::new()","optionparser::list::new()","optionparser::parseerror::new()","optionparser::switch::new()","pstore::new()","pathname::new()","pendulumanimationdemo::new()","photocanvas::new()","pidigitspigot::new()","planet::new()","point::new()","prelude::new()","prettyprint::new()","prettyprint::breakable::new()","prettyprint::group::new()","prettyprint::groupqueue::new()","prettyprint::singleline::new()","prettyprint::text::new()","prime::new()","prime::eratosthenesgenerator::new()","prime::generator23::new()","prime::pseudoprimegenerator::new()","prime::trialdivisiongenerator::new()","proc::new()","psych::coder::new()","psych::emitter::new()","psych::handler::dumperoptions::new()","psych::nodes::alias::new()","psych::nodes::document::new()","psych::nodes::mapping::new()","psych::nodes::node::new()","psych::nodes::scalar::new()","psych::nodes::sequence::new()","psych::nodes::stream::new()","psych::parser::new()","psych::scalarscanner::new()","psych::streaming::new()","psych::syntaxerror::new()","psych::treebuilder::new()","psych::visitors::depthfirst::new()","psych::visitors::emitter::new()","psych::visitors::jsontree::new()","psych::visitors::toruby::new()","psych::visitors::yamltree::new()","queue::new()","rdoc::alias::new()","rdoc::anymethod::new()","rdoc::attr::new()","rdoc::classmodule::new()","rdoc::codeobject::new()","rdoc::constant::new()","rdoc::context::new()","rdoc::context::section::new()","rdoc::crossreference::new()","rdoc::erbio::new()","rdoc::generator::darkfish::new()","rdoc::include::new()","rdoc::markup::new()","rdoc::markup::attrspan::new()","rdoc::markup::attributemanager::new()","rdoc::markup::blankline::new()","rdoc::markup::document::new()","rdoc::markup::formatter::new()","rdoc::markup::indentedparagraph::new()","rdoc::markup::list::new()","rdoc::markup::listitem::new()","rdoc::markup::parser::new()","rdoc::markup::preprocess::new()","rdoc::markup::raw::new()","rdoc::markup::special::new()","rdoc::markup::toansi::new()","rdoc::markup::tobs::new()","rdoc::markup::tohtml::new()","rdoc::markup::tohtmlcrossref::new()","rdoc::markup::tordoc::new()","rdoc::markup::tottonly::new()","rdoc::methodattr::new()","rdoc::parser::new()","rdoc::parser::c::new()","rdoc::parser::ruby::new()","rdoc::parser::simple::new()","rdoc::rdoc::new()","rdoc::ri::driver::new()","rdoc::ri::store::new()","rdoc::require::new()","rdoc::rubygemshook::new()","rdoc::stats::new()","rdoc::stats::quiet::new()","rdoc::task::new()","rdoc::toplevel::new()","rdoc::toplevel::new()","rexml::attlistdecl::new()","rexml::attribute::new()","rexml::cdata::new()","rexml::child::new()","rexml::comment::new()","rexml::dtd::elementdecl::new()","rexml::dtd::entitydecl::new()","rexml::dtd::notationdecl::new()","rexml::doctype::new()","rexml::document::new()","rexml::element::new()","rexml::entity::new()","rexml::formatters::default::new()","rexml::formatters::pretty::new()","rexml::formatters::transitive::new()","rexml::iosource::new()","rexml::instruction::new()","rexml::light::node::new()","rexml::output::new()","rexml::parent::new()","rexml::parseexception::new()","rexml::parsers::baseparser::new()","rexml::parsers::lightparser::new()","rexml::parsers::pullevent::new()","rexml::parsers::pullparser::new()","rexml::parsers::sax2parser::new()","rexml::parsers::streamparser::new()","rexml::parsers::treeparser::new()","rexml::parsers::ultralightparser::new()","rexml::source::new()","rexml::syncenumerator::new()","rexml::text::new()","rexml::undefinednamespaceexception::new()","rexml::validation::choice::new()","rexml::validation::event::new()","rexml::validation::interleave::new()","rexml::validation::oneormore::new()","rexml::validation::ref::new()","rexml::validation::relaxng::new()","rexml::validation::state::new()","rexml::validation::validationexception::new()","rexml::xmldecl::new()","rexml::xpathparser::new()","rss::atom::entry::new()","rss::atom::feed::new()","rss::baseparser::new()","rss::conversionerror::new()","rss::converter::new()","rss::element::new()","rss::ituneschannelmodel::itunescategory::new()","rss::ituneschannelmodel::itunesimage::new()","rss::ituneschannelmodel::itunesowner::new()","rss::itunesitemmodel::itunesduration::new()","rss::imagefaviconmodel::imagefavicon::new()","rss::imageitemmodel::imageitem::new()","rss::listenermixin::new()","rss::maker::atom::entry::new()","rss::maker::atom::feed::new()","rss::maker::base::new()","rss::maker::rss09::new()","rss::maker::rss091::new()","rss::maker::rss092::new()","rss::maker::rss10::new()","rss::maker::rss20::new()","rss::missingattributeerror::new()","rss::missingtagerror::new()","rss::nserror::new()","rss::notavailablevalueerror::new()","rss::notexpectedtagerror::new()","rss::notexpectedtagerror::new()","rss::notseterror::new()","rss::notvalidxmlparser::new()","rss::notwellformederror::new()","rss::overlappedprefixerror::new()","rss::parser::new()","rss::rdf::new()","rss::rdf::li::new()","rss::rdf::li::new()","rss::rdf::li::new()","rss::rdf::seq::new()","rss::rdf::seq::new()","rss::rootelementmixin::new()","rss::rss::new()","rss::rss::channel::cloud::new()","rss::rss::channel::image::new()","rss::rss::channel::item::category::new()","rss::rss::channel::item::enclosure::new()","rss::rss::channel::item::guid::new()","rss::rss::channel::item::source::new()","rss::rss::channel::skipdays::day::new()","rss::rss::channel::skiphours::hour::new()","rss::rss::channel::textinput::new()","rss::taxonomytopicmodel::taxonomytopic::new()","rss::taxonomytopicsmodel::taxonomytopics::new()","rss::toomuchtagerror::new()","rss::trackbackmodel10::trackbackabout::new()","rss::trackbackmodel10::trackbackping::new()","rss::trackbackmodel20::trackbackabout::new()","rss::trackbackmodel20::trackbackping::new()","rss::unknownconversionmethoderror::new()","rss::unknownconversionmethoderror::new()","rss::unknowntagerror::new()","rss::unsupportedmakerversionerror::new()","rss::xml::element::new()","rss::xmlparsernotfound::new()","rss::xmlstylesheet::new()","rss::xmlstylesheetmixin::new()","rake::application::new()","rake::application::new()","rake::compositepublisher::new()","rake::filelist::new()","rake::ftpfile::new()","rake::ftpuploader::new()","rake::invocationchain::new()","rake::namespace::new()","rake::packagetask::new()","rake::pseudostatus::new()","rake::rubyforgepublisher::new()","rake::rulerecursionoverflowerror::new()","rake::sshdirpublisher::new()","rake::sshfilepublisher::new()","rake::task::new()","rake::taskarguments::new()","rake::taskmanager::new()","random::new()","range::new()","regexp::new()","remotetkip::new()","remotetkip#new()","resolv::new()","resolv::dns::new()","resolv::dns::resource::domainname::new()","resolv::dns::resource::generic::new()","resolv::dns::resource::hinfo::new()","resolv::dns::resource::in::a::new()","resolv::dns::resource::in::aaaa::new()","resolv::dns::resource::in::srv::new()","resolv::dns::resource::in::wks::new()","resolv::dns::resource::minfo::new()","resolv::dns::resource::mx::new()","resolv::dns::resource::soa::new()","resolv::dns::resource::txt::new()","resolv::hosts::new()","rinda::drbobjecttemplate::new()","rinda::notifytemplateentry::new()","rinda::ringfinger::new()","rinda::ringprovider::new()","rinda::ringserver::new()","rinda::simplerenewer::new()","rinda::tuple::new()","rinda::tuplebag::tuplebin::new()","rinda::tupleentry::new()","rinda::tuplespace::new()","rinda::tuplespaceproxy::new()","rinda::waittemplateentry::new()","ringecho::new()","ripper::filter::new()","ripper::tokenpattern::matchdata::new()","rubylex::new()","rubytoken::tkid::new()","rubytoken::tknode::new()","rubytoken::tkopasgn::new()","rubytoken::tkunknownchar::new()","rubytoken::tkval::new()","rubytoken::token::new()","rubyvm::instruction::new()","rubyvm::instructionsequence::new()","rubyvm::instructionsloader::new()","rubyvm::sourcecodegenerator::new()","sdbm::new()","sockssocket::new()","sockssocket::new()","seq::new()","set::new()","shell::new()","shell::appendfile::new()","shell::appendio::new()","shell::cat::new()","shell::commandprocessor::new()","shell::concat::new()","shell::echo::new()","shell::filter::new()","shell::glob::new()","shell::processcontroller::new()","shell::systemcommand::new()","shell::tee::new()","shell::void::new()","signalexception::new()","simpletuplespace::new()","sizedqueue::new()","socket::new()","socket::ancillarydata::new()","socket::option::new()","socket::udpsource::new()","spinner_demo::new()","sshdirpublisher::new()","sshfilepublisher::new()","string::new()","stringio::new()","stringio::new()","stringscanner::new()","struct::new()","syck::domaintype::new()","syck::privatetype::new()","syck::stream::new()","syck::ypath::new()","syck::yamlnode::new()","sync_m::new()","sync_m::new()","systemcallerror::new()","systemexit::new()","tcpserver::new()","tcpsocket::new()","tcpsocket::new()","tcltkip::new()","tcltkip#new()","tcltkip::new()","tempfile::new()","test1::new()","thread::new()","threadswait::new()","threadswait::new()","tick::new()","time::new()","tk::blt::bitmap#new()","tk::blt::bitmap::new()","tk::blt::busy::shield::new()","tk::blt::dragdrop::token::new()","tk::blt::plotcomponent::axis::new()","tk::blt::plotcomponent::axis::new()","tk::blt::plotcomponent::crosshairs::new()","tk::blt::plotcomponent::crosshairs::new()","tk::blt::plotcomponent::element::new()","tk::blt::plotcomponent::element::new()","tk::blt::plotcomponent::gridline::new()","tk::blt::plotcomponent::gridline::new()","tk::blt::plotcomponent::legend::new()","tk::blt::plotcomponent::legend::new()","tk::blt::plotcomponent::marker::new()","tk::blt::plotcomponent::pen::new()","tk::blt::plotcomponent::pen::new()","tk::blt::plotcomponent::postscript::new()","tk::blt::plotcomponent::postscript::new()","tk::blt::printer::new()","tk::blt::tabnotebook::tab::new()","tk::blt::tabnotebook::tab::new()","tk::blt::tabset::namedtab::new()","tk::blt::tabset::tab::new()","tk::blt::tabset::tab::new()","tk::blt::tree::node::new()","tk::blt::tree::node::new()","tk::blt::tree::tag::new()","tk::blt::vector::new()","tk::blt::vectoraccess::new()","tk::blt::vectoraccess::new()","tk::blt::watch::new()","tk::bwidget::bitmap::new()","tk::bwidget::dialog::new()","tk::bwidget::listbox::item::new()","tk::bwidget::messagedlg::new()","tk::bwidget::tree::node::new()","tk::encodedstring::new()","tk::frame::new()","tk::html_widget::clippingwindow::new()","tk::html_widget::clippingwindow::new()","tk::icons::new()","tk::icons#new()","tk::itcl::itclobject::new()","tk::iwidgets::scopedobject::new()","tk::iwidgets::scrolledcanvas::new()","tk::iwidgets::scrolledlistbox::new()","tk::iwidgets::scrolledtext::new()","tk::iwidgets::tabnotebook::new()","tk::menuclone::new()","tk::menuclone::new()","tk::optionmenubutton::new()","tk::optionmenubutton::new()","tk::optionmenubutton::optionmenu::new()","tk::optionobj::new()","tk::rbwidget::alignbox::new()","tk::rbwidget::balloonhelp::new()","tk::root::new()","tk::systemmenu::new()","tk::systemmenu::new()","tk::systemmenu::new()","tk::tclx::xpg3_msgcat::new()","tk::tcllib::getstring_dialog::new()","tk::tcllib::ico::new()","tk::tcllib::plotchart::barchart::new()","tk::tcllib::plotchart::barchart3d::new()","tk::tcllib::plotchart::boxplot::new()","tk::tcllib::plotchart::ganttchart::new()","tk::tcllib::plotchart::isometricplot::new()","tk::tcllib::plotchart::isometricplot::new()","tk::tcllib::plotchart::piechart::new()","tk::tcllib::plotchart::plot3d::new()","tk::tcllib::plotchart::plotseries::new()","tk::tcllib::plotchart::polarplot::new()","tk::tcllib::plotchart::polarplot::new()","tk::tcllib::plotchart::radialchart::new()","tk::tcllib::plotchart::ribbonchart3d::new()","tk::tcllib::plotchart::rightaxis::new()","tk::tcllib::plotchart::timechart::new()","tk::tcllib::plotchart::xyplot::new()","tk::tcllib::swaplist_dialog::new()","tk::tcllib::tkpiechart::slice::new()","tk::tile::dialog::new()","tk::tktable::celltag::new()","tk::tktable::namedcelltag::new()","tk::tktable::namedcelltag::new()","tk::toplevel::new()","tk::utf8_string::new()","tk::winico::new()","tkbitmapimage::new()","tkbitmapimage::new()","tkcomposite::new()","tkcore::new()","tkcore::tk_object_table::new()","tkdialog::new()","tkfont::new()","tkfont::new()","tkfont::descendantfont::new()","tkgoldberg_demo::new()","tkhtml_file_viewer::new()","tkimage::new()","tkimage::new()","tkimg_demo::new()","tkkernel::new()","tkmenubar::new()","tkmsgcatalog::new()","tkmsgcatalog::new()","tknamedfont::new()","tknamedfont::new()","tknamespace::ensemble::new()","tkphotoimage::new()","tkphotoimage::new()","tkpixmapimage::new()","tkrttimer::new()","tktextimage::new()","tktextimage::new()","tktextmark::new()","tktextmark::new()","tktextmarkanchor::new()","tktextmarkanchor::new()","tktextmarkcurrent::new()","tktextmarkcurrent::new()","tktextmarkinsert::new()","tktextmarkinsert::new()","tktextnamedmark::new()","tktextnamedmark::new()","tktextnamedmark::new()","tktextnamedmark::new()","tktextnamedtag::new()","tktextnamedtag::new()","tktextnamedtag::new()","tktextnamedtag::new()","tktexttag::new()","tktexttag::new()","tktexttagsel::new()","tktexttagsel::new()","tktextwindow::new()","tktextwindow::new()","tktimer::new()","tktimer::new()","tktreectrl_demo::new()","tkutil::callbacksubst::new()","tkvalidatecommand::new()","tkvaraccess::new()","tkvaraccess::new()","tkvariable::new()","tkvariable::new()","tkvirtualevent::predefvirtevent::new()","tkvirtualevent::predefvirtevent::new()","tkvirtualevent::predefvirtevent::new()","tkvirtualevent::predefvirtevent::new()","tkvirtualevent::predefvirtevent::new()","tkvirtualevent::predefvirtevent::new()","tkwarning::new()","tkwarningobj::new()","tkwarningobj::new()","tkcgroup::new()","tkcitem::new()","tkctag::new()","tkctagall::new()","tkctagcurrent::new()","tkctagstring::new()","tkctagstring::new()","tkctagstring::new()","tkctagstring::new()","toggle::new()","transformation::new()","tuplespace::new()","tuplespace::template::new()","udpsocket::new()","unixserver::new()","unixsocket::new()","uri::ftp::new()","uri::generic::new()","uri::http::new()","uri::ldap::new()","uri::mailto::new()","uri::parser::new()","unicodeout_sampleframe::new()","vcs::new()","vector::new()","version::new()","viewicons::new()","webrick::basiclog::new()","webrick::cgi::new()","webrick::cgi::socket::new()","webrick::cookie::new()","webrick::genericserver::new()","webrick::httpauth::basicauth::new()","webrick::httpauth::digestauth::new()","webrick::httpauth::htdigest::new()","webrick::httpauth::htgroup::new()","webrick::httpauth::htpasswd::new()","webrick::httpproxyserver::new()","webrick::httprequest::new()","webrick::httpresponse::new()","webrick::httpserver::new()","webrick::httpserver::mounttable::new()","webrick::httpservlet::abstractservlet::new()","webrick::httpservlet::cgihandler::new()","webrick::httpservlet::defaultfilehandler::new()","webrick::httpservlet::erbhandler::new()","webrick::httpservlet::filehandler::new()","webrick::httpservlet::prochandler::new()","webrick::httputils::formdata::new()","webrick::httpversion::new()","webrick::log::new()","webrick::utils::timeouthandler::new()","win32comgen::new()","win32ole::new()","win32ole_event::new()","win32ole_method::new()","win32ole_param::new()","win32ole_type::new()","win32ole_typelib::new()","win32ole_variant::new()","weakref::new()","win32::registry::new()","win32::registry::error::new()","win32::registry::predefinedkey::new()","win32::sspi::identity::new()","win32::sspi::negotiateauth::new()","win32::sspi::sspiresult::new()","win32::sspi::securitybuffer::new()","win32api::new()","xmlrpc::base64::new()","xmlrpc::basicserver::new()","xmlrpc::cgiserver::new()","xmlrpc::cgiserver::new()","xmlrpc::client::new()","xmlrpc::client::proxy::new()","xmlrpc::create::new()","xmlrpc::datetime::new()","xmlrpc::faultexception::new()","xmlrpc::marshal::new()","xmlrpc::modrubyserver::new()","xmlrpc::server::new()","xmlrpc::service::basicinterface::new()","xmlrpc::service::interface::new()","xmlrpc::service::publicinstancemethodsinterface::new()","xmlrpc::webrickservlet::new()","xmlrpc::xmlparser::nqxmlstreamparser::new()","xmlrpc::xmlparser::nqxmltreeparser::new()","xmlrpc::xmlparser::nqxmltreeparser::new()","xmlrpc::xmlparser::rexmlstreamparser::new()","xmlrpc::xmlparser::streamparsermixin::new()","xmlrpc::xmlparser::xmlscanstreamparser::new()","xmlrpc::xmlparser::xmlstreamparser::new()","xmlrpc::xmlparser::xmltreeparser::new()","xmlrpc::xmlparser::xmltreeparser::new()","xmlrpc::xmlwriter::xmlparser::new()","xmp::new()","xmp::stringinputmethod::new()","yaml::store::new()","zlib::deflate::new()","zlib::gzipreader::new()","zlib::gzipwriter::new()","zlib::inflate::new()","uri::ftp::new2()","xmlrpc::client#new2()","xmlrpc::client#new3()","object#newroom()","object#newroom2()","tk::tcllib::ntext#newwrapregexp()","tk::tcllib::ntext#newwrapregexp=()","irb::methodextender#new_alias_name()","monitormixin#new_cond()","tk::winico::new_from_file()","tk::winico::new_from_resource()","tkvaraccess::new_hash()","tkvariable::new_hash()","tkvariable::new_hash()","multitkip#new_master()","multitkip#new_master()","multitkip#new_master()","multitkip#new_master()","tk::menu::new_menuspec()","ipaddr::new_ntoh()","openstruct#new_ostruct_member()","tkoptiondb::new_proc_class()","tkoptiondb::new_proc_class()","tkoptiondb::new_proc_class()","tkoptiondb::new_proc_class_random()","tkoptiondb::new_proc_class_random()","tkoptiondb::new_proc_class_random()","multitkip#new_safe_slave()","multitkip#new_safe_slave()","multitkip#new_safe_slave()","multitkip#new_safe_slave()","rake::taskarguments#new_scope()","random::new_seed()","multitkip#new_slave()","multitkip#new_slave()","multitkip#new_slave()","multitkip#new_slave()","tk::tcllib::tkpiechart::pie#new_slice()","date#new_start()","drb::drbobject::new_with()","drb::drbobject::new_with()","tk::blt::bitmap#new_with_name()","drb::drbobject::new_with_uri()","drb::drbobject::new_with_uri()","tk::encodedstring::new_with_utf_backslash()","rss::utils#new_with_value_if_need()","tk::encodedstring::new_without_utf_backslash()","tktree#newitem()","net::http::newobj()","net::http::newobj()","date#next()","enumerator#next()","integer#next()","integer#next()","prime::eratosthenesgenerator#next()","prime::generator23#next()","prime::oldcompatibility#next()","prime::pseudoprimegenerator#next()","prime::trialdivisiongenerator#next()","rexml::validation::choice#next()","rexml::validation::interleave#next()","rexml::validation::oneormore#next()","rexml::validation::optional#next()","rexml::validation::state#next()","rexml::validation::zeroormore#next()","string#next()","symbol#next()","tk::blt::tree::node#next()","tk::iwidgets::notebook#next()","tk::iwidgets::tabnotebook#next()","tk::iwidgets::tabset#next()","tkmanagefocus::next()","tktextmark#next()","tktextmark#next()","pidigitspigot#next!()","string#next!()","transformation#next!()","ixmldomnamednodemap#nextnode()","ixmldomnodelist#nextnode()","ixmldomattribute#nextsibling()","ixmldomcdatasection#nextsibling()","ixmldomcharacterdata#nextsibling()","ixmldomcomment#nextsibling()","ixmldomdocument#nextsibling()","ixmldomdocumentfragment#nextsibling()","ixmldomdocumenttype#nextsibling()","ixmldomelement#nextsibling()","ixmldomentity#nextsibling()","ixmldomentityreference#nextsibling()","ixmldomnode#nextsibling()","ixmldomnotation#nextsibling()","ixmldomprocessinginstruction#nextsibling()","ixmldomtext#nextsibling()","ixtlruntime#nextsibling()","microsoft_freethreadedxmldom_1_0#nextsibling()","microsoft_xmldom_1_0#nextsibling()","rexml::validation::interleave#next_current()","date#next_day()","rexml::element#next_element()","tk::menu::tkinternalfunction#next_entry()","tk::iwidgets::scrolledtext#next_mark()","tk::menu::tkinternalfunction#next_menu()","date#next_month()","tk::blt::tree::node#next_sibling()","rexml::child#next_sibling=()","rexml::node#next_sibling_node()","knights_tour#next_square()","tkgoldberg_demo#next_step()","prime::eratosthenessieve#next_to()","openssl::x509::crl#next_update()","openssl::x509::crl#next_update=()","seq#next_value()","enumerator#next_values()","threadswait#next_wait()","threadswait#next_wait()","date#next_year()","tktexttag#nextrange()","tktexttag#nextrange()","nilclass#nil?()","object#nil?()","nkf::nkf()","curses::nl()","file::stat#nlink()","newton#nlsolve()","net::ftp#nlst()","exports::cygwin::nm()","curses::nocbreak()","curses::nocrmode()","ixmldomdocument#nodefromid()","microsoft_freethreadedxmldom_1_0#nodefromid()","microsoft_xmldom_1_0#nodefromid()","ixmldomattribute#nodename()","ixmldomcdatasection#nodename()","ixmldomcharacterdata#nodename()","ixmldomcomment#nodename()","ixmldomdocument#nodename()","ixmldomdocumentfragment#nodename()","ixmldomdocumenttype#nodename()","ixmldomelement#nodename()","ixmldomentity#nodename()","ixmldomentityreference#nodename()","ixmldomnode#nodename()","ixmldomnotation#nodename()","ixmldomprocessinginstruction#nodename()","ixmldomtext#nodename()","ixtlruntime#nodename()","microsoft_freethreadedxmldom_1_0#nodename()","microsoft_xmldom_1_0#nodename()","nqxml::node#nodename()","ixmldomattribute#nodetype()","ixmldomcdatasection#nodetype()","ixmldomcharacterdata#nodetype()","ixmldomcomment#nodetype()","ixmldomdocument#nodetype()","ixmldomdocumentfragment#nodetype()","ixmldomdocumenttype#nodetype()","ixmldomelement#nodetype()","ixmldomentity#nodetype()","ixmldomentityreference#nodetype()","ixmldomnode#nodetype()","ixmldomnotation#nodetype()","ixmldomprocessinginstruction#nodetype()","ixmldomtext#nodetype()","ixtlruntime#nodetype()","microsoft_freethreadedxmldom_1_0#nodetype()","microsoft_xmldom_1_0#nodetype()","nqxml::node#nodetype()","ixmldomattribute#nodetypestring()","ixmldomcdatasection#nodetypestring()","ixmldomcharacterdata#nodetypestring()","ixmldomcomment#nodetypestring()","ixmldomdocument#nodetypestring()","ixmldomdocumentfragment#nodetypestring()","ixmldomdocumenttype#nodetypestring()","ixmldomelement#nodetypestring()","ixmldomentity#nodetypestring()","ixmldomentityreference#nodetypestring()","ixmldomnode#nodetypestring()","ixmldomnotation#nodetypestring()","ixmldomprocessinginstruction#nodetypestring()","ixmldomtext#nodetypestring()","ixtlruntime#nodetypestring()","microsoft_freethreadedxmldom_1_0#nodetypestring()","microsoft_xmldom_1_0#nodetypestring()","ixmldomattribute#nodetypedvalue()","ixmldomcdatasection#nodetypedvalue()","ixmldomcharacterdata#nodetypedvalue()","ixmldomcomment#nodetypedvalue()","ixmldomdocument#nodetypedvalue()","ixmldomdocumentfragment#nodetypedvalue()","ixmldomdocumenttype#nodetypedvalue()","ixmldomelement#nodetypedvalue()","ixmldomentity#nodetypedvalue()","ixmldomentityreference#nodetypedvalue()","ixmldomnode#nodetypedvalue()","ixmldomnotation#nodetypedvalue()","ixmldomprocessinginstruction#nodetypedvalue()","ixmldomtext#nodetypedvalue()","ixtlruntime#nodetypedvalue()","microsoft_freethreadedxmldom_1_0#nodetypedvalue()","microsoft_xmldom_1_0#nodetypedvalue()","ixmldomattribute#nodetypedvalue=()","ixmldomcdatasection#nodetypedvalue=()","ixmldomcharacterdata#nodetypedvalue=()","ixmldomcomment#nodetypedvalue=()","ixmldomdocument#nodetypedvalue=()","ixmldomdocumentfragment#nodetypedvalue=()","ixmldomdocumenttype#nodetypedvalue=()","ixmldomelement#nodetypedvalue=()","ixmldomentity#nodetypedvalue=()","ixmldomentityreference#nodetypedvalue=()","ixmldomnode#nodetypedvalue=()","ixmldomnotation#nodetypedvalue=()","ixmldomprocessinginstruction#nodetypedvalue=()","ixmldomtext#nodetypedvalue=()","ixtlruntime#nodetypedvalue=()","microsoft_freethreadedxmldom_1_0#nodetypedvalue=()","microsoft_xmldom_1_0#nodetypedvalue=()","ixmldomattribute#nodevalue()","ixmldomcdatasection#nodevalue()","ixmldomcharacterdata#nodevalue()","ixmldomcomment#nodevalue()","ixmldomdocument#nodevalue()","ixmldomdocumentfragment#nodevalue()","ixmldomdocumenttype#nodevalue()","ixmldomelement#nodevalue()","ixmldomentity#nodevalue()","ixmldomentityreference#nodevalue()","ixmldomnode#nodevalue()","ixmldomnotation#nodevalue()","ixmldomprocessinginstruction#nodevalue()","ixmldomtext#nodevalue()","ixtlruntime#nodevalue()","microsoft_freethreadedxmldom_1_0#nodevalue()","microsoft_xmldom_1_0#nodevalue()","nqxml::node#nodevalue()","ixmldomattribute#nodevalue=()","ixmldomcdatasection#nodevalue=()","ixmldomcharacterdata#nodevalue=()","ixmldomcomment#nodevalue=()","ixmldomdocument#nodevalue=()","ixmldomdocumentfragment#nodevalue=()","ixmldomdocumenttype#nodevalue=()","ixmldomelement#nodevalue=()","ixmldomentity#nodevalue=()","ixmldomentityreference#nodevalue=()","ixmldomnode#nodevalue=()","ixmldomnotation#nodevalue=()","ixmldomprocessinginstruction#nodevalue=()","ixmldomtext#nodevalue=()","ixtlruntime#nodevalue=()","microsoft_freethreadedxmldom_1_0#nodevalue=()","microsoft_xmldom_1_0#nodevalue=()","object::syck::emitter#node_export()","object::syck::resolver#node_import()","syck::baseemitter#node_text()","rexml::attlistdecl#node_type()","rexml::attribute#node_type()","rexml::comment#node_type()","rexml::doctype#node_type()","rexml::document#node_type()","rexml::element#node_type()","rexml::instruction#node_type()","rexml::light::node#node_type()","rexml::text#node_type()","rexml::xmldecl#node_type()","curses::window#nodelay=()","tk::blt::tree::tag#nodes()","tk::bwidget::tree#nodes()","rdoc::stats::verbose#nodoc()","curses::noecho()","gem::mockgemui::tty#noecho()","io#noecho()","rdoc::classmodule#non_aliases()","gem::specification::non_nil_attributes()","enumerable#none?()","gem::requirement#none?()","gem::requirement#none?()","curses::nonl()","bigdecimal#nonzero?()","numeric#nonzero?()","tkvariable#nonzero?()","tkvariable#nonzero?()","net::ftp#noop()","net::imap#noop()","curses::noraw()","newton#norm()","vector#norm()","matrix#normal?()","gem::specification#normalize()","ixmldomelement#normalize()","rdoc::markup::verbatim#normalize()","rexml::parsers::baseparser#normalize()","rexml::text::normalize()","rake::win32#normalize()","tk::blt::vector#normalize()","uri::generic#normalize()","vector#normalize()","uri::generic#normalize!()","rdoc::text#normalize_comment()","webrick::httputils::normalize_path()","object#normalize_propname()","rexml::functions::normalize_space()","gem::remotefetcher#normalize_uri()","gem::specification::normalize_yaml_input()","rexml::entity#normalized()","rdoc::rdoc#normalized_file_list()","rexml::functions::not()","openssl::x509::certificate#not_after()","openssl::x509::certificate#not_after=()","tk::tcllib::autoscroll::not_available()","tk::tcllib::cursor::not_available()","tk::tcllib::style::not_available()","openssl::x509::certificate#not_before()","openssl::x509::certificate#not_before=()","webrick::httpservlet::defaultfilehandler#not_modified?()","rss::maker::atom::entry::channel::generator::not_set_name()","rss::maker::atom::feed::channel::categories::category::not_set_name()","rss::maker::atom::feed::channel::generator::not_set_name()","rss::maker::atom::feed::channel::links::link::not_set_name()","rss::maker::atom::feed::items::item::categories::category::not_set_name()","rss::maker::atom::feed::items::item::links::link::not_set_name()","rss::maker::atom::feed::items::item::source::categories::category::not_set_name()","rss::maker::atom::feed::items::item::source::generator::not_set_name()","rss::maker::atom::feed::items::item::source::links::link::not_set_name()","rss::maker::atom::feed::items::item::source::logo::not_set_name()","rexml::doctype#notation()","ixmldomentity#notationname()","rexml::sax2listener#notationdecl()","rexml::streamlistener#notationdecl()","rexml::parsers::pullevent#notationdecl?()","ixmldomdocumenttype#notations()","rexml::doctype#notations()","rinda::notifytemplateentry#notify()","rinda::tuplespace#notify()","rinda::tuplespaceproxy#notify()","shell::notify()","shell::commandprocessor#notify()","shell::systemcommand#notify()","tk::blt::vector#notify()","tk::optionobj#notify()","irb::notifier::abstractnotifier#notify?()","irb::notifier::levelednotifier#notify?()","irb::notifier::nomsgnotifier#notify?()","tk::treectrl::configmethod#notify_cget()","tk::treectrl::configmethod#notify_cget_strict()","tk::treectrl::configmethod#notify_cget_tkstring()","tk::treectrl::configmethod#notify_configinfo()","tk::treectrl::configmethod#notify_configure()","drb::drbobservable#notify_observers()","observable#notify_observers()","curses::window#noutrefresh()","datetime::now()","time::now()","rexml::xmldecl#nowrite()","rake::fileutilsext#nowrite()","io#nread()","time#nsec()","ipaddr::ntop()","dl::cptr#null?()","dl::cptr#null?()","tcltklib::num_of_mainwindows()","tkutil#num_or_nil()","tkutil::num_or_nil()","tkutil#num_or_str()","tkutil::num_or_str()","queue#num_waiting()","sizedqueue#num_waiting()","rexml::functions::number()","tkutil::number()","tkutil#number()","complex#numerator()","float#numerator()","integer#numerator()","integer#numerator()","numeric#numerator()","rational#numerator()","tkvariable#numeric()","tkvariable#numeric()","tkvariable#numeric=()","tkvariable#numeric=()","tkvariable#numeric_element()","tkvariable#numeric_element()","tkvariable#numeric_type=()","tkvariable#numeric_type=()","tkvariable#numlist()","tkvariable#numlist()","tkvariable#numlist=()","tkvariable#numlist=()","tkvariable#numlist_element()","tkvariable#numlist_element()","tkvariable#numlist_type=()","tkvariable#numlist_type=()","pp::ppmethods#object_address_group()","rdoc::toplevel#object_class()","pp::ppmethods#object_group()","object#object_id()","psych::object_maker()","syck::object_maker()","syck::object_maker()","json::ext::generator::state#object_nl()","json::ext::generator::state#object_nl=()","tk::optionobj#observ_info()","tk::optionobj#observs()","string#oct()","bignum#odd?()","fixnum#odd?()","integer#odd?()","integer#odd?()","tk::blt::plotcomponent::crosshairs#off()","tk::blt::plotcomponent::gridline#off()","tk::tcllib::crosshair::off()","tk::tcllib::tooltip::off()","tracer::off()","win32ole_event#off_event()","rdoc::markup::formatter#off_tags()","matchdata#offset()","tk::blt::vector#offset()","tk::blt::vector#offset=()","object#offset_momentum()","win32ole_method#offset_vtbl()","io#oflush()","openssl::x509::attribute#oid()","openssl::x509::extension#oid()","openssl::x509::attribute#oid=()","openssl::x509::extension#oid=()","gem::dependencylist#ok?()","win32::sspi::sspiresult#ok?()","gem::dependencylist#ok_to_remove?()","irb::irbloader#old()","rexml::xmldecl#old_enc=()","enumerator#old_inspect()","array#old_to_s()","falseclass#old_to_s()","win32ole#ole_activex_initialize()","win32comgen#ole_classes()","win32ole_type::ole_classes()","win32ole_typelib#ole_classes()","win32ole::ole_free()","win32ole#ole_free()","win32ole#ole_func_methods()","win32ole#ole_get_methods()","win32ole::ole_initialize()","win32ole#ole_method()","win32ole#ole_method_help()","win32ole#ole_methods()","win32ole_type#ole_methods()","win32ole#ole_obj_help()","win32ole#ole_put_methods()","win32ole#ole_query_interface()","win32ole::ole_reference_count()","win32ole#ole_respond_to?()","win32ole::ole_show_help()","win32ole#ole_type()","win32ole_param#ole_type()","win32ole_type#ole_type()","win32ole_variable#ole_type()","win32ole_param#ole_type_detail()","win32ole_variable#ole_type_detail()","win32ole#ole_typelib()","win32ole_type#ole_typelib()","win32ole_typelib#ole_types()","win32ole::ole_uninitialize()","optionparser#on()","tk::blt::plotcomponent::crosshairs#on()","tk::blt::plotcomponent::gridline#on()","tk::tcllib::crosshair::on()","tk::tcllib::tooltip::on()","tracer::on()","iehandler#onnavigatecomplete2()","iehandler#ononquit()","rss::xmlscanlistener#on_attr_charref()","rss::xmlscanlistener#on_attr_charref_hex()","rss::xmlscanlistener#on_attr_entityref()","rss::xmlscanlistener#on_attr_value()","rss::xmlscanlistener#on_attribute()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_cdata()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_chardata()","rss::xmlscanlistener#on_charref()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_charref()","rss::xmlscanlistener#on_charref_hex()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_charref_hex()","commentstripper#on_comment()","ruby2html#on_comment()","openssl::pkey::ec::point#on_curve?()","commentstripper#on_default()","ruby2html#on_default()","rss::xmlscanlistener#on_entityref()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_entityref()","rss::xmlscanlistener#on_etag()","win32ole_event#on_event()","win32ole_event#on_event_with_outargs()","optionparser#on_head()","ruby2html#on_kw()","tk::html_widget#on_screen()","rss::xmlscanlistener#on_stag()","rss::xmlscanlistener#on_stag_end()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_stag_end()","rss::xmlscanlistener#on_stag_end_empty()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_stag_end_empty()","rdoc::markup::formatter#on_tags()","optionparser#on_tail()","ruby2html#on_tstring_beg()","ruby2html#on_tstring_end()","rss::xmlscanlistener#on_xmldecl_encoding()","rss::xmlscanlistener#on_xmldecl_end()","rss::xmlscanlistener#on_xmldecl_standalone()","rss::xmlscanlistener#on_xmldecl_version()","microsoft_freethreadedxmldom_1_0#ondataavailable()","microsoft_xmldom_1_0#ondataavailable()","ixmldomdocument#ondataavailable=()","microsoft_freethreadedxmldom_1_0#ondataavailable=()","microsoft_xmldom_1_0#ondataavailable=()","function#one()","enumerable#one?()","rdoc::context#ongoing_visibility=()","microsoft_freethreadedxmldom_1_0#onreadystatechange()","microsoft_xmldom_1_0#onreadystatechange()","ixmldomdocument#onreadystatechange=()","ixmlhttprequest#onreadystatechange=()","microsoft_freethreadedxmldom_1_0#onreadystatechange=()","microsoft_xmldom_1_0#onreadystatechange=()","microsoft_xmlhttp_1#onreadystatechange=()","object#onsig()","ixmldomdocument#ontransformnode=()","microsoft_freethreadedxmldom_1_0#ontransformnode=()","microsoft_xmldom_1_0#ontransformnode=()","uri::generic#opaque=()","board#open()","csv::open()","dbm::open()","drb::drbprotocol::open()","drb::drbsslsocket::open()","drb::drbtcpsocket::open()","drb::drbunixsocket::open()","drb::http0::open()","dir::open()","file::open()","gdbm::open()","gem::package::open()","gem::package::tarinput::open()","gem::package::taroutput::open()","io::open()","ixmlhttprequest#open()","iconv::open()","kernel::open()","microsoft_xmlhttp_1#open()","net::ftp::open()","openuri::openread#open()","pty::open()","pathname#open()","resolv::dns::open()","rubyvm::vpath#open()","sdbm::open()","shell::commandprocessor#open()","stringio::open()","syslog::open()","tempfile#open()","tk::blt::printer::open()","tk::blt::treeview#open()","tk::blt::treeview::tagorid_methods#open()","tk::macresource::open()","win32::registry::open()","win32::registry#open()","zlib::gzipreader::open()","zlib::gzipwriter::open()","syslog::open!()","tk::bwidget::tree#open?()","tk::bwidget::tree::node#open?()","win32::registry#open?()","object#open_file()","net::smtp#open_message_stream()","net::smtp#open_message_stream()","tk::blt::treeview#open_recurse()","tk::blt::treeview::tagorid_methods#open_recurse()","drb::drbprotocol::open_server()","drb::drbsslsocket::open_server()","drb::drbtcpsocket::open_server()","drb::drbunixsocket::open_server()","drb::http0::open_server()","drb::drbtcpsocket::open_server_inaddr_any()","tk::bwidget::tree#open_tree()","tk::bwidget::tree::node#open_tree()","gem::remotefetcher#open_uri_or_path()","pathname#opendir()","syslog::opened?()","cal#opt_c()","cal#opt_j()","cal#opt_m()","cal#opt_t()","cal#opt_y()","object#optionbutton1()","object#optionbutton1_2()","object#optionleave1()","object#optionmenu()","object#optionmotion1()","object#optionrelease1()","rdoc::task#option_list()","tkcomposite#option_methods()","win32ole_param#optional?()","net::http#options()","net::http#options()","optionparser::arguable#options()","rake::application#options()","rake::application#options()","regexp#options()","syck::baseemitter#options()","syslog::options()","optionparser::arguable#options=()","syck::baseemitter#options=()","socket::option#optname()","integer#ord()","integer#ord()","string#ord()","openssl::pkey::ec::group#order()","optionparser#order()","optionparser#order!()","optionparser::arguable#order!()","getoptlong#ordering=()","date::ordinal()","datetime::ordinal()","thread#org_initialize()","webrick::httprequest#orig_meta_vars()","zlib::gzipfile#orig_name()","zlib::gzipwriter#orig_name=()","webrick::httprequest#orig_parse()","webrick::httprequest#orig_parse_uri()","rake#original_dir()","matrix#orthogonal?()","zlib::gzipfile#os_code()","rss::maker::base#other_elements()","cgi#out()","shell::commandprocessor#out()","simpletuplespace#out()","tuplespace#out()","rss::atom::feed::entry::content#out_of_line?()","gem::sourceindex#outdated()","gem::sourceindex#outdated()","gem::specification::outdated()","benchmarkdriver#output()","exports::output()","gem::mockgemui#output()","prettyprint::breakable#output()","prettyprint::text#output()","tk::blt::plotcomponent::postscript#output()","object::output=()","readline::output=()","win32ole_param#output?()","rss::rootelementmixin#output_encoding=()","rdoc::rdoc#output_flag_file()","rubyvm::sourcecodegenerator#output_path()","irb::irb#output_value()","board#over()","tk::html_widget#over()","board#over?()","tk::html_widget#over_attr()","tk::html_widget#over_markup()","tkctag#overlapping()","tk::wm#overrideredirect()","tk::wm::overrideredirect()","tk::tcllib::ntext#overwrite()","tk::tcllib::ntext#overwrite=()","tktextio#overwrite=()","tktextio#overwrite?()","file::owned?()","file::stat#owned?()","filetest#owned?()","pathname#owned?()","method#owner()","unboundmethod#owner()","ixmldomattribute#ownerdocument()","ixmldomcdatasection#ownerdocument()","ixmldomcharacterdata#ownerdocument()","ixmldomcomment#ownerdocument()","ixmldomdocument#ownerdocument()","ixmldomdocumentfragment#ownerdocument()","ixmldomdocumenttype#ownerdocument()","ixmldomelement#ownerdocument()","ixmldomentity#ownerdocument()","ixmldomentityreference#ownerdocument()","ixmldomnode#ownerdocument()","ixmldomnotation#ownerdocument()","ixmldomprocessinginstruction#ownerdocument()","ixmldomtext#ownerdocument()","ixtlruntime#ownerdocument()","microsoft_freethreadedxmldom_1_0#ownerdocument()","microsoft_xmldom_1_0#ownerdocument()","kernel#p()","matrix::lupdecomposition#p()","array#pack()","dl::packer#pack()","dl::stack#pack()","gem::package::pack()","tkpack::pack()","tkpack::pack()","socket::pack_sockaddr_in()","socket::pack_sockaddr_un()","rake::packagetask#package_dir_path()","rake::packagetask#package_name()","tk::blt::package_name()","tk::bwidget::package_name()","tk::html_widget::package_name()","tk::icons::package_name()","tk::img::package_name()","tk::img::bmp::package_name()","tk::img::gif::package_name()","tk::img::ico::package_name()","tk::img::jpeg::package_name()","tk::img::pcx::package_name()","tk::img::pixmap::package_name()","tk::img::png::package_name()","tk::img::ppm::package_name()","tk::img::ps::package_name()","tk::img::sgi::package_name()","tk::img::sun::package_name()","tk::img::tga::package_name()","tk::img::tiff::package_name()","tk::img::window::package_name()","tk::img::xbm::package_name()","tk::img::xpm::package_name()","tk::itcl::package_name()","tk::itk::package_name()","tk::iwidgets::package_name()","tk::macresource::package_name()","tk::tclx::package_name()","tk::tcllib::autoscroll::package_name()","tk::tcllib::ctext::package_name()","tk::tcllib::chatwidget::package_name()","tk::tcllib::crosshair::package_name()","tk::tcllib::cursor::package_name()","tk::tcllib::datefield::package_name()","tk::tcllib::datefield::package_name()","tk::tcllib::diagrams::package_name()","tk::tcllib::getstring_dialog::package_name()","tk::tcllib::history::package_name()","tk::tcllib::ico::package_name()","tk::tcllib::ip_entry::package_name()","tk::tcllib::ip_entry::package_name()","tk::tcllib::khim::package_name()","tk::tcllib::plotchart::package_name()","tk::tcllib::style::package_name()","tk::tcllib::swaplist_dialog::package_name()","tk::tcllib::tablelist::package_name()","tk::tcllib::tablelist::package_name()","tk::tcllib::tablelist::package_name()","tk::tcllib::tablelist::package_name()","tk::tcllib::tkpiechart::package_name()","tk::tcllib::tooltip::package_name()","tk::tcllib::widget::package_name()","tk::tcllib::widget::calendar::package_name()","tk::tcllib::widget::dateentry::package_name()","tk::tcllib::widget::dateentry::package_name()","tk::tcllib::widget::dialog::package_name()","tk::tcllib::widget::menuentry::package_name()","tk::tcllib::widget::menuentry::package_name()","tk::tcllib::widget::panelframe::package_name()","tk::tcllib::widget::panelframe::package_name()","tk::tcllib::widget::ruler::package_name()","tk::tcllib::widget::screenruler::package_name()","tk::tcllib::widget::screenruler::package_name()","tk::tcllib::widget::scrolledwindow::package_name()","tk::tcllib::widget::scrolledwindow::package_name()","tk::tcllib::widget::statusbar::package_name()","tk::tcllib::widget::superframe::package_name()","tk::tcllib::widget::toolbar::package_name()","tk::tile::package_name()","tk::tile::package_name()","tk::tile::package_name()","tk::tkdnd::package_name()","tk::tkdnd::shape::package_name()","tk::tktable::package_name()","tk::tktrans::package_name()","tk::treectrl::package_name()","tk::treectrl::package_name()","tk::trofs::package_name()","tk::vu::package_name()","tk::windde::package_name()","tk::winico::package_name()","tkmsgcatalog::package_name()","tkmsgcatalog::package_name()","tk::tkdnd::shape#package_patchlevel()","tk::blt::package_version()","tk::bwidget::package_version()","tk::html_widget::package_version()","tk::icons::package_version()","tk::img::package_version()","tk::img::bmp::package_version()","tk::img::gif::package_version()","tk::img::ico::package_version()","tk::img::jpeg::package_version()","tk::img::pcx::package_version()","tk::img::pixmap::package_version()","tk::img::png::package_version()","tk::img::ppm::package_version()","tk::img::ps::package_version()","tk::img::sgi::package_version()","tk::img::sun::package_version()","tk::img::tga::package_version()","tk::img::tiff::package_version()","tk::img::window::package_version()","tk::img::xbm::package_version()","tk::img::xpm::package_version()","tk::itcl::package_version()","tk::itk::package_version()","tk::iwidgets::package_version()","tk::tclx::package_version()","tk::tcllib::autoscroll::package_version()","tk::tcllib::ctext::package_version()","tk::tcllib::chatwidget::package_version()","tk::tcllib::crosshair::package_version()","tk::tcllib::cursor::package_version()","tk::tcllib::datefield::package_version()","tk::tcllib::datefield::package_version()","tk::tcllib::diagrams::package_version()","tk::tcllib::getstring_dialog::package_version()","tk::tcllib::history::package_version()","tk::tcllib::ico::package_version()","tk::tcllib::ip_entry::package_version()","tk::tcllib::ip_entry::package_version()","tk::tcllib::khim::package_version()","tk::tcllib::plotchart::package_version()","tk::tcllib::style::package_version()","tk::tcllib::swaplist_dialog::package_version()","tk::tcllib::tablelist::package_version()","tk::tcllib::tablelist::package_version()","tk::tcllib::tablelist::package_version()","tk::tcllib::tablelist::package_version()","tk::tcllib::tkpiechart::package_version()","tk::tcllib::tooltip::package_version()","tk::tcllib::widget::package_version()","tk::tcllib::widget::calendar::package_version()","tk::tcllib::widget::dateentry::package_version()","tk::tcllib::widget::dateentry::package_version()","tk::tcllib::widget::dialog::package_version()","tk::tcllib::widget::menuentry::package_version()","tk::tcllib::widget::menuentry::package_version()","tk::tcllib::widget::panelframe::package_version()","tk::tcllib::widget::panelframe::package_version()","tk::tcllib::widget::ruler::package_version()","tk::tcllib::widget::screenruler::package_version()","tk::tcllib::widget::screenruler::package_version()","tk::tcllib::widget::scrolledwindow::package_version()","tk::tcllib::widget::scrolledwindow::package_version()","tk::tcllib::widget::statusbar::package_version()","tk::tcllib::widget::superframe::package_version()","tk::tcllib::widget::toolbar::package_version()","tk::tile::package_version()","tk::tile::package_version()","tk::tile::package_version()","tk::tkdnd::package_version()","tk::tkdnd::shape#package_version()","tk::tktable::package_version()","tk::tktrans::package_version()","tk::treectrl::package_version()","tk::treectrl::package_version()","tk::trofs::package_version()","tk::vu::package_version()","tk::winico::package_version()","win32::registry::api#packdw()","win32::registry::api#packqw()","openssl::cipher#padding=()","tk::rbwidget::alignbox#padx()","tk::rbwidget::alignbox#pady()","rdoc::ri::driver#page()","tk::bwidget::notebook#pages()","tk::bwidget::pagesmanager#pages()","rdoc::ri::driver#paging?()","socket::pair()","unixsocket::pair()","object#pair_codepoints()","curses::pair_content()","curses::pair_number()","tk::tile::tpaned#pane_cget()","tk::tile::tpaned#pane_cget_strict()","tk::tile::tpaned#pane_cget_tkstring()","tk::panedwindow#pane_config()","tk::panedwindow#pane_config()","tk::tile::tpaned#pane_config()","tk::panedwindow#pane_configinfo()","tk::panedwindow#pane_configinfo()","tk::tile::tpaned#pane_configinfo()","tk::tile::tpaned#pane_configure()","tk::panedwindow#panecget()","tk::panedwindow#panecget()","tk::tile::tpaned#panecget()","tk::panedwindow#panecget_strict()","tk::panedwindow#panecget_strict()","tk::tile::tpaned#panecget_strict()","tk::tile::tpaned#panecget_tkstring()","tk::panedwindow#paneconfiginfo()","tk::panedwindow#paneconfiginfo()","tk::tile::tpaned#paneconfiginfo()","tk::panedwindow#paneconfigure()","tk::panedwindow#paneconfigure()","tk::tile::tpaned#paneconfigure()","tk::panedwindow#panes()","tk::panedwindow#panes()","tk::tile::tpaned#panes()","rdoc::anymethod#param_list()","rdoc::anymethod#param_seq()","method#parameters()","proc#parameters()","unboundmethod#parameters()","openssl::pkey::dh#params()","openssl::pkey::dsa#params()","openssl::pkey::rsa#params()","openssl::pkey::rsa#params()","win32ole_method#params()","zlib::deflate#params()","cgi::queryextension#params=()","openssl::pkey::dh#params_ok?()","gem::indexer#paranoid()","pathname#parent()","rexml::light::node#parent()","tk::blt::tree::node#parent()","tk::bwidget::tree#parent()","tk::bwidget::tree::node#parent()","tkwinfo::parent()","tkwinfo::parent()","rexml::child#parent=()","rexml::light::node#parent=()","rexml::text#parent=()","rexml::node#parent?()","rexml::parent#parent?()","ixmldomattribute#parentnode()","ixmldomcdatasection#parentnode()","ixmldomcharacterdata#parentnode()","ixmldomcomment#parentnode()","ixmldomdocument#parentnode()","ixmldomdocumentfragment#parentnode()","ixmldomdocumenttype#parentnode()","ixmldomelement#parentnode()","ixmldomentity#parentnode()","ixmldomentityreference#parentnode()","ixmldomnode#parentnode()","ixmldomnotation#parentnode()","ixmldomprocessinginstruction#parentnode()","ixmldomtext#parentnode()","ixtlruntime#parentnode()","microsoft_freethreadedxmldom_1_0#parentnode()","microsoft_xmldom_1_0#parentnode()","rdoc::codeobject#parent_file_name()","rdoc::codeobject#parent_name()","rdoc::methodattr#parent_name()","actionmap::parse()","cgi::parse()","cgi::cookie::parse()","csv::parse()","date::parse()","datetime::parse()","gem::requirement::parse()","gem::requirement::parse()","json#parse()","json::ext::parser#parse()","net::smtp::response::parse()","openssl::config#parse()","optionparser#parse()","optionparser::switch::noargument#parse()","optionparser::switch::optionalargument#parse()","optionparser::switch::placedargument#parse()","optionparser::switch::requiredargument#parse()","psych::parse()","psych::parser#parse()","rdoc::classmodule#parse()","rdoc::markup::parser#parse()","rdoc::markup::parser::parse()","rdoc::options#parse()","rdoc::text#parse()","rexml::dtd::parser::parse()","rexml::parsers::lightparser#parse()","rexml::parsers::sax2parser#parse()","rexml::parsers::streamparser#parse()","rexml::parsers::treeparser#parse()","rexml::parsers::ultralightparser#parse()","rexml::parsers::xpathparser#parse()","rexml::xpathparser#parse()","rss::baseparser#parse()","rss::itunesitemmodel::itunesduration#parse()","rss::parser#parse()","rss::utils::csv#parse()","rss::utils::yescleanother#parse()","rss::utils::yesother#parse()","ripper::parse()","ripper::filter#parse()","syck::parse()","syck::parse()","time#parse()","tk::html_widget#parse()","uri::parse()","uri::parser#parse()","webrick::cookie::parse()","webrick::httprequest#parse()","xmlrpc::xmlparser::nqxmlstreamparser::xmlrpcparser#parse()","xmlrpc::xmlparser::rexmlstreamparser::streamlistener#parse()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#parse()","json#parse!()","optionparser#parse!()","optionparser::arguable#parse!()","ixmldomdocument#parseerror()","microsoft_freethreadedxmldom_1_0#parseerror()","microsoft_xmldom_1_0#parseerror()","xmlrpc::xmlparser::abstractstreamparser#parsemethodcall()","xmlrpc::xmlparser::abstracttreeparser#parsemethodcall()","xmlrpc::xmlparser::abstractstreamparser#parsemethodresponse()","xmlrpc::xmlparser::abstracttreeparser#parsemethodresponse()","object#parse_tk_libs()","object#parse_age()","rdoc::parser::ruby#parse_alias()","object#parse_aliases()","object#parse_args()","rexml::quickpath::parse_args()","rdoc::parser::ruby#parse_attr()","rdoc::parser::ruby#parse_attr_accessor()","rdoc::parser::ruby#parse_call_parameters()","rdoc::parser::ruby#parse_class()","rdoc::parser::ruby#parse_comment()","openssl::config#parse_config()","rdoc::parser::ruby#parse_constant()","xmlrpc::parsecontenttype#parse_content_type()","string#parse_csv()","dl::cparser#parse_ctype()","syck::parse_documents()","syck::parse_documents()","rdoc::rdoc#parse_dot_doc_file()","psych::parse_file()","rdoc::rdoc#parse_file()","syck::parse_file()","syck::parse_file()","rdoc::rdoc#parse_files()","rdoc::parser::parse_files_matching()","webrick::httputils::parse_header()","rexml::dtd::parser::parse_helper()","rdoc::parser::ruby#parse_include()","csv::parse_line()","mdoc2man#parse_macro()","rdoc::parser::ruby#parse_meta_attr()","rdoc::parser::ruby#parse_meta_method()","rdoc::parser::ruby#parse_method()","rdoc::parser::ruby#parse_method_or_yield_parameters()","rdoc::parser::ruby#parse_method_parameters()","rdoc::parser::ruby#parse_module()","rdoc::ri::driver#parse_name()","openssl::x509::name#parse_openssl()","irb::parse_opts()","irb::outputmethod#parse_printf_format()","webrick::httputils::parse_qvalues()","webrick::httputils::parse_range_header()","rdoc::parser::ruby#parse_require()","object#parse_result()","openssl::x509::name#parse_rfc2253()","object#parse_scripts()","webrick::cookie::parse_set_cookie()","webrick::cookie::parse_set_cookies()","dl::cparser#parse_signature()","rexml::dtd::entitydecl::parse_source()","rexml::dtd::notationdecl::parse_source()","rdoc::parser::ruby#parse_statements()","psych::parse_stream()","rexml::document::parse_stream()","dl::cparser#parse_struct_signature()","rdoc::parser::ruby#parse_symbol_arg()","rdoc::parser::ruby#parse_symbol_in_arg()","rake::application#parse_task_string()","rake::application#parse_task_string()","object#parse_tclconfig()","psych::scalarscanner#parse_time()","actionmap::parse_to_rects()","rdoc::parser::ruby#parse_top_level_statements()","object#parse_unicode_data()","drb::drbsslsocket::parse_uri()","drb::drbunixsocket::parse_uri()","rdoc::parser::ruby#parse_visibility()","rdoc::parser::ruby#parse_yield()","ixmldomattribute#parsed()","ixmldomcdatasection#parsed()","ixmldomcharacterdata#parsed()","ixmldomcomment#parsed()","ixmldomdocument#parsed()","ixmldomdocumentfragment#parsed()","ixmldomdocumenttype#parsed()","ixmldomelement#parsed()","ixmldomentity#parsed()","ixmldomentityreference#parsed()","ixmldomnode#parsed()","ixmldomnotation#parsed()","ixmldomprocessinginstruction#parsed()","ixmldomtext#parsed()","ixtlruntime#parsed()","microsoft_freethreadedxmldom_1_0#parsed()","microsoft_xmldom_1_0#parsed()","psych::parser()","syck::parser()","syck::parser()","uri::generic#parser()","tk::bwidget::parsetext()","enumerable#partition()","string#partition()","thread::pass()","etc::passwd()","uri::generic#password()","uri::generic#password=()","xmlrpc::client#password=()","cgi::htmlextension#password_field()","tk::tcllib::ctext#paste()","net::http#patch()","net::http#patch()","argf#path()","dir#path()","file#path()","file::path()","gem::path()","multitkip#path()","multitkip::path()","multitkip#path()","multitkip::path()","multitkip#path()","multitkip::path()","multitkip::path()","multitkip#path()","pstore#path()","rdoc::classmodule#path()","rdoc::constant#path()","rdoc::methodattr#path()","rdoc::ri::paths::path()","rdoc::toplevel#path()","rake::ftpfile#path()","tempfile#path()","tk::root#path()","tkobject#path()","unixsocket#path()","uri::ftp#path()","win32ole_typelib#path()","uri::generic#path=()","gem::uninstaller#path_ok?()","string#pathmap()","string#pathmap_explode()","string#pathmap_partial()","string#pathmap_replace()","gem::paths()","gem::paths=()","optionparser::switch::pattern()","optionparser::switch::noargument::pattern()","object#pbmode()","object#pbstart()","object#pbstop()","openssl::pkcs5::pbkdf2_hmac()","openssl::pkcs5::pbkdf2_hmac_sha1()","object#pboard()","drb::timeridconv::timerholder2#peek()","enumerator#peek()","rexml::parsers::baseparser#peek()","rexml::parsers::pullparser#peek()","rubylex#peek()","stringscanner#peek()","rubylex#peek_equal?()","rubylex#peek_match?()","rdoc::parser::rubytools#peek_read()","rdoc::parser::rubytools#peek_tk()","rdoc::markup::parser#peek_token()","enumerator#peek_values()","stringscanner#peep()","net::http#peer_cert()","net::http#peer_cert()","openssl::ssl::sslsocket#peer_cert()","webrick::cgi::socket#peer_cert()","openssl::ssl::sslsocket#peer_cert_chain()","webrick::cgi::socket#peer_cert_chain()","drb::drbtcpsocket#peeraddr()","ipsocket#peeraddr()","unixsocket#peeraddr()","webrick::cgi::socket#peeraddr()","tk::blt::plotcomponent#pen_cget()","tk::blt::plotcomponent#pen_cget_strict()","tk::blt::plotcomponent#pen_cget_tkstring()","tk::blt::plotcomponent#pen_configinfo()","tk::blt::plotcomponent#pen_configure()","tk::blt::plotcomponent#pen_create()","tk::blt::plotcomponent#pen_delete()","tk::blt::plotcomponent#pen_names()","openssl::ssl::sslsocket#pending()","rdoc::stats#percent_doc()","tk::blt::tabset#perforation_activate()","tk::blt::tabset#perforation_highlight()","tk::blt::tabset::tab#perforation_highlight()","tk::blt::tabset#perforation_invoke()","tk::blt::tabset::tab#perforation_invoke()","drb::drbserver::invokemethod18mixin#perform_with_block()","tk::tcllib::plotchart::timechart#period()","array#permutation()","matrix#permutation?()","optionparser#permute()","optionparser#permute!()","optionparser::arguable#permute!()","addrinfo#pfamily()","complex#phase()","float#phase()","numeric#phase()","object#philosopher()","object#phoneskipleft()","object#phoneskipright()","xmlrpc::xmlwriter::simple#pi()","xmlrpc::xmlwriter::xmlparser#pi()","tkhtml_file_viewer#pick_font()","tkhtml_file_viewer#pick_font_fs()","cal#pict()","io#pid()","process::pid()","process::status#pid()","stringio#pid()","tktextio#pid()","tk::tcllib::tkpiechart::slice#pie()","object#piece()","io::pipe()","file::pipe?()","file::stat#pipe?()","filetest#pipe?()","pathname#pipe?()","open3::pipeline()","open3::pipeline_r()","open3::pipeline_rw()","open3::pipeline_start()","open3::pipeline_w()","tk::tcllib::plotchart::pixel_to_coords()","tk::tcllib::plotchart::chartmethod#pixel_to_coords()","tkwinfo::pixels()","tkwinfo::pixels()","openssl::cipher#pkcs5_keyivgen()","tk::bwidget::place()","tkplace::place()","tkplace::place()","tk::html_widget#plain_text()","tk::tcllib::diagrams#plaintext()","tk::tcllib::plotchart::chartmethod#plaintext()","gem::specification#platform()","gem::specification#platform=()","gem::platforms()","gem::platforms=()","tk::tcllib::plotchart::barchart#plot()","tk::tcllib::plotchart::barchart3d#plot()","tk::tcllib::plotchart::boxplot#plot()","tk::tcllib::plotchart::isometricplot#plot()","tk::tcllib::plotchart::isometricplot#plot()","tk::tcllib::plotchart::piechart#plot()","tk::tcllib::plotchart::plotseries#plot()","tk::tcllib::plotchart::polarplot#plot()","tk::tcllib::plotchart::polarplot#plot()","tk::tcllib::plotchart::radialchart#plot()","tk::tcllib::plotchart::xyplot#plot()","object#plotdown()","object#plotmove()","tk::tcllib::plotchart::isometricplot#plot_circle()","tk::tcllib::plotchart::isometricplot#plot_circle()","tk::tcllib::plotchart::plot3d#plot_data()","tk::tcllib::plotchart::isometricplot#plot_filled_circle()","tk::tcllib::plotchart::isometricplot#plot_filled_circle()","tk::tcllib::plotchart::isometricplot#plot_filled_rectangle()","tk::tcllib::plotchart::isometricplot#plot_filled_rectangle()","tk::tcllib::plotchart::plot3d#plot_funcont()","tk::tcllib::plotchart::plot3d#plot_function()","tk::tcllib::plotchart::plot3d#plot_line()","tk::tcllib::plotchart::isometricplot#plot_rectangle()","tk::tcllib::plotchart::isometricplot#plot_rectangle()","tk::tcllib::plotchart::plotconfig()","tk::tcllib::plotchart::plotpack()","tk::tcllib::plotchart::chartmethod#plotpack()","rss::element#plural_forms()","readline::point()","openssl::pkey::ec::group#point_conversion_form()","openssl::pkey::ec::group#point_conversion_form=()","stringscanner#pointer()","stringscanner#pointer=()","tkwinfo::pointerx()","tkwinfo::pointerx()","tkwinfo::pointerxy()","tkwinfo::pointerxy()","tkwinfo::pointery()","tkwinfo::pointery()","tk::windde::poke()","complex#polar()","complex::polar()","numeric#polar()","tk::tcllib::plotchart::polar_coordinates()","tk::tcllib::plotchart::chartmethod#polar_coordinates()","tk::tcllib::plotchart::polar_to_pixel()","tk::tcllib::plotchart::chartmethod#polar_to_pixel()","array#pop()","net::popmail#pop()","queue#pop()","rinda::notifytemplateentry#pop()","sizedqueue#pop()","pp::ppmethods#pop_inspect_key()","rdoc::tokenstream#pop_token()","object#pop_up()","irb::context#pop_workspace()","shell#popd()","shell#popdir()","io::popen()","open3::popen2()","open3::popen2e()","open3::popen3()","tk::tcllib::diagrams#popstate()","tk::blt::vector#populate()","object#populate_roots()","object#populate_tree()","tk::menu#popup()","cgi::htmlextension#popup_menu()","net::pop3#port()","net::pop3#port()","net::pop3#port()","net::pop3#port()","webrick::httprequest#port()","uri::generic#port=()","argf#pos()","dir#pos()","gem::package::tarreader::entry#pos()","io#pos()","stringio#pos()","stringscanner#pos()","tk::rbwidget::editable_listbox::pos()","tktextio#pos()","tktextmark#pos()","tktextmark#pos()","zlib::gzipreader#pos()","zlib::gzipwriter#pos()","argf#pos=()","dir#pos=()","io#pos=()","stringio#pos=()","stringscanner#pos=()","tk::rbwidget::editable_listbox::pos=()","tktextio#pos=()","tktextmark#pos=()","tktextmark#pos=()","tktextio#pos_gravity()","tktextio#pos_gravity=()","rexml::functions::position()","rexml::iosource#position()","rexml::parseexception#position()","rexml::parsers::baseparser#position()","rexml::source#position()","tk::blt::tree::node#position()","tk::tcllib::diagrams#position()","tk::wm#positionfrom()","tk::wm::positionfrom()","drb::http0::clientside#post()","net::http#post()","net::http#post()","tk::bwidget::combobox#post()","tk::menu#post()","tk::tcllib::widget::dateentry#post()","tk::tcllib::widget::dateentry#post()","net::http#post2()","net::http#post2()","gem::post_build()","net::http::post_form()","net::http::post_form()","gem::post_install()","matchdata#post_match()","stringscanner#post_match()","gem::post_reset()","gem::post_uninstall()","tk::menu#postcascade()","tk::menu#postcommand()","irb::slex#postproc()","tk::canvas#postscript()","tk::html_widget#postscript()","tk::iwidgets::scrolledcanvas#postscript()","tk::blt::plotcomponent#postscript_cget()","tk::blt::plotcomponent#postscript_cget_strict()","tk::blt::plotcomponent#postscript_cget_tkstring()","tk::blt::plotcomponent#postscript_configinfo()","tk::blt::plotcomponent#postscript_configure()","tk::blt::plotcomponent#postscript_output()","bigdecimal#power()","bignum#power!()","fixnum#power!()","float#power!()","irb::notifier::abstractnotifier#pp()","irb::outputmethod#pp()","kernel#pp()","kernel::pp()","pp::pp()","pp::ppmethods#pp()","pp::ppmethods#pp_hash()","pp::ppmethods#pp_object()","process::ppid()","irb::notifier::abstractnotifier#ppx()","irb::outputmethod#ppx()","gem::pre_install()","matchdata#pre_match()","stringscanner#pre_match()","gem::pre_reset()","gem::pre_uninstall()","bigdecimal#precs()","integer#pred()","integer#pred()","rexml::parsers::xpathparser#predicate()","rexml::quickpath::predicate()","rexml::xpathparser#predicate()","rexml::parsers::xpathparser#predicate_to_string()","tkpackage#prefer()","tkmsgcatalog#preferences()","tkmsgcatalog#preferences()","tkmsgcatalog::preferences()","tkmsgcatalog::preferences()","gem::prefix()","ixmldomattribute#prefix()","ixmldomcdatasection#prefix()","ixmldomcharacterdata#prefix()","ixmldomcomment#prefix()","ixmldomdocument#prefix()","ixmldomdocumentfragment#prefix()","ixmldomdocumenttype#prefix()","ixmldomelement#prefix()","ixmldomentity#prefix()","ixmldomentityreference#prefix()","ixmldomnode#prefix()","ixmldomnotation#prefix()","ixmldomprocessinginstruction#prefix()","ixmldomtext#prefix()","ixtlruntime#prefix()","microsoft_freethreadedxmldom_1_0#prefix()","microsoft_xmldom_1_0#prefix()","rexml::attribute#prefix()","rexml::light::node#prefix()","rexml::element#prefixes()","object#prelude()","prelude#prelude_base()","prelude#prelude_name()","drb::drbobject::prepare_backtrace()","drb::drbobject::prepare_backtrace()","object#prepare_fasta_output()","webrick::httpservlet::defaultfilehandler#prepare_range()","object#prepare_wc_input()","optionparser::list#prepend()","string#prepend()","irb::slex#preproc()","net::telnet#preprocess()","gem::dependency#prerelease?()","gem::requirement#prerelease?()","gem::requirement#prerelease?()","version#prerelease?()","gem::sourceindex#prerelease_gems()","gem::sourceindex#prerelease_gems()","gem::sourceindex#prerelease_specs()","gem::sourceindex#prerelease_specs()","rake::task#prerequisite_tasks()","tkpackage#present()","tkpackage#present_exact()","ixmldomdocument#preservewhitespace()","microsoft_freethreadedxmldom_1_0#preservewhitespace()","microsoft_xmldom_1_0#preservewhitespace()","ixmldomdocument#preservewhitespace=()","microsoft_freethreadedxmldom_1_0#preservewhitespace=()","microsoft_xmldom_1_0#preservewhitespace=()","cgi::pretty()","json#pretty_generate()","kernel#pretty_inspect()","rdoc::alias#pretty_name()","rdoc::methodattr#pretty_name()","rdoc::alias#pretty_new_name()","rdoc::alias#pretty_old_name()","array#pretty_print()","env#pretty_print()","file::stat#pretty_print()","hash#pretty_print()","matchdata#pretty_print()","object#pretty_print()","pp::objectmixin#pretty_print()","range#pretty_print()","struct#pretty_print()","array#pretty_print_cycle()","hash#pretty_print_cycle()","object#pretty_print_cycle()","pp::objectmixin#pretty_print_cycle()","struct#pretty_print_cycle()","pp::objectmixin#pretty_print_inspect()","pp::objectmixin#pretty_print_instance_variables()","tk::iwidgets::notebook#prev()","tk::iwidgets::tabnotebook#prev()","tk::iwidgets::tabset#prev()","tkmanagefocus::prev()","date#prev_day()","date#prev_month()","tk::blt::tree::node#prev_sibling()","date#prev_year()","tk::blt::tree::node#previous()","tktextmark#previous()","tktextmark#previous()","rexml::validation::state#previous=()","ixmldomattribute#previoussibling()","ixmldomcdatasection#previoussibling()","ixmldomcharacterdata#previoussibling()","ixmldomcomment#previoussibling()","ixmldomdocument#previoussibling()","ixmldomdocumentfragment#previoussibling()","ixmldomdocumenttype#previoussibling()","ixmldomelement#previoussibling()","ixmldomentity#previoussibling()","ixmldomentityreference#previoussibling()","ixmldomnode#previoussibling()","ixmldomnotation#previoussibling()","ixmldomprocessinginstruction#previoussibling()","ixmldomtext#previoussibling()","ixtlruntime#previoussibling()","microsoft_freethreadedxmldom_1_0#previoussibling()","microsoft_xmldom_1_0#previoussibling()","rexml::element#previous_element()","tk::iwidgets::scrolledtext#previous_mark()","rexml::child#previous_sibling=()","rexml::node#previous_sibling_node()","tktexttag#prevrange()","tktexttag#prevrange()","inspector#primary()","rinda::ringfinger::primary()","integer#prime?()","integer#prime?()","openssl::bn#prime?()","prime#prime?()","integer#prime_division()","integer#prime_division()","prime#prime_division()","openssl::bn#prime_fasttest?()","prime::trialdivision#primes()","prime::trialdivision#primes_so_far()","encoding::converter#primitive_convert()","encoding::converter#primitive_errinfo()","argf#print()","cgi#print()","cal#print()","io#print()","io::writable#print()","irb::locale#print()","irb::notifier::abstractnotifier#print()","irb::outputmethod#print()","irb::stdiooutputmethod#print()","kernel#print()","net::internetmessageio::writeadapter#print()","net::telnet#print()","openssl::buffering#print()","tk::iwidgets::canvasprintbox#print()","tk::iwidgets::canvasprintdialog#print()","tktextio#print()","zlib::gzipwriter#print()","rdoc::stats::quiet#print_alias()","rdoc::stats::quiet#print_attribute()","rdoc::stats::quiet#print_class()","rdoc::stats::quiet#print_constant()","gem::commands::dependencycommand#print_dependencies()","rdoc::stats::normal#print_file()","rdoc::stats::quiet#print_file()","object#print_header()","tk::blt::print_key()","tk::blt::graphcommand#print_key()","rdoc::stats::quiet#print_method()","rdoc::stats::quiet#print_module()","profiler__#print_profile()","rake::application#print_rakefile_directory()","rake::application#print_rakefile_directory()","irb::print_usage()","argf#printf()","io#printf()","io::writable#printf()","irb::locale#printf()","irb::notifier::abstractnotifier#printf()","irb::outputmethod#printf()","kernel#printf()","net::internetmessageio::writeadapter#printf()","openssl::buffering#printf()","tktextio#printf()","zlib::gzipwriter#printf()","irb::notifier::abstractnotifier#printn()","irb::outputmethod#printn()","thread#priority()","thread#priority=()","openssl::pkey::dh#private?()","openssl::pkey::dsa#private?()","openssl::pkey::rsa#private?()","openssl::pkey::rsa#private?()","module#private_class_method()","openssl::pkey::rsa#private_decrypt()","openssl::pkey::rsa#private_decrypt()","openssl::pkey::rsa#private_encrypt()","openssl::pkey::rsa#private_encrypt()","module#private_instance_methods()","openssl::pkey::ec#private_key()","openssl::pkey::ec#private_key=()","openssl::pkey::ec#private_key?()","module#private_method_defined?()","object#private_methods()","kernel#proc()","tkcomm::procedure()","tkvariable#procedure()","tkvariable#procedure()","tkvariable#procedure=()","tkvariable#procedure=()","tkvariable#procedure_element()","tkvariable#procedure_element()","tkvariable#procedure_type=()","tkvariable#procedure_type=()","net::imap::crammd5authenticator#process()","net::imap::digestmd5authenticator#process()","net::imap::loginauthenticator#process()","net::imap::plainauthenticator#process()","rubyvm::vpath#process()","xmlrpc::basicserver#process()","gem::commandmanager#process_args()","rdoc::ri::driver::process_args()","rdoc::parser::process_directive()","gem::installer#process_options()","tkhtml_file_viewer#process_url()","rss::rexmllikexmlparser#processinginstruction()","rexml::functions::processing_instruction()","rexml::sax2listener#processing_instruction()","pidigitspigot#produce()","array#product()","win32ole_type#progid()","win32ole_type::progids()","optionparser#program_name()","object#progress()","rexml::sax2listener#progress()","benchmarkdriver#progress_message()","gem::silentui#progress_reporter()","gem::streamui#progress_reporter()","gem::promote_load_path()","irb::irb#prompt()","object#prompt()","rubylex#prompt()","irb::context#prompt_mode=()","irb::context#prompting?()","tkgrid::propagate()","tkgrid::propagate()","tkpack::propagate()","tkpack::propagate()","tk::scrollbar#propagate_set()","set#proper_subset?()","set#proper_superset?()","net::http#propfind()","net::http#propfind()","net::http#proppatch()","net::http#proppatch()","module#protected_instance_methods()","module#protected_method_defined?()","delegator#protected_methods()","object#protected_methods()","addrinfo#protocol()","tk::wm::protocol()","tk::wm#protocol()","tk::wm#protocols()","tk::wm::protocols()","rinda::ringprovider#provide()","tkpackage#provide()","xmlrpc::client#proxy()","xmlrpc::client#proxy2()","xmlrpc::client#proxy2_async()","net::http#proxy?()","net::http#proxy?()","net::http#proxy_address()","net::http#proxy_address()","xmlrpc::client#proxy_async()","webrick::httpproxyserver#proxy_auth()","win32::sspi::negotiateauth::proxy_auth_get()","net::httpheader#proxy_basic_auth()","webrick::httpauth#proxy_basic_auth()","net::http#proxy_class?()","net::http#proxy_class?()","tk::panedwindow#proxy_coord()","tk::panedwindow#proxy_coord()","tk::panedwindow#proxy_forget()","tk::panedwindow#proxy_forget()","net::http#proxy_pass()","net::http#proxy_pass()","tk::panedwindow#proxy_place()","tk::panedwindow#proxy_place()","net::http#proxy_port()","net::http#proxy_port()","webrick::httpproxyserver#proxy_service()","webrick::httpproxyserver#proxy_uri()","net::http#proxy_user()","net::http#proxy_user()","net::http#proxyaddr()","net::http#proxyaddr()","net::http#proxyport()","net::http#proxyport()","find::prune()","tk::iwidgets::hierarchy#prune()","object#ps_print()","multitkip_pseudotoplevel_evaluable#pseudo_toplevel_evaluable=()","multitkip_pseudotoplevel_evaluable#pseudo_toplevel_evaluable?()","object#psych_to_yaml()","kernel#psych_y()","module#psych_yaml_as()","object#pthread_check()","dl::cfunc#ptr()","dl::cptr#ptr()","dl::cptr#ptr()","dl::cfunc#ptr=()","rexml::doctype#public()","openssl::pkey::dh#public?()","openssl::pkey::dsa#public?()","openssl::pkey::rsa#public?()","openssl::pkey::rsa#public?()","ixmldomentity#publicid()","ixmldomnotation#publicid()","module#public_class_method()","openssl::pkey::rsa#public_decrypt()","openssl::pkey::rsa#public_decrypt()","openssl::pkey::rsa#public_encrypt()","openssl::pkey::rsa#public_encrypt()","module#public_instance_method()","module#public_instance_methods()","openssl::netscape::spki#public_key()","openssl::pkey::dh#public_key()","openssl::pkey::dsa#public_key()","openssl::pkey::ec#public_key()","openssl::pkey::rsa#public_key()","openssl::pkey::rsa#public_key()","openssl::x509::certificate#public_key()","openssl::x509::request#public_key()","openssl::netscape::spki#public_key=()","openssl::pkey::ec#public_key=()","openssl::x509::certificate#public_key=()","openssl::x509::request#public_key=()","openssl::pkey::ec#public_key?()","object#public_method()","module#public_method_defined?()","delegator#public_methods()","object#public_methods()","object#public_send()","rexml::parsers::baseparser#pull()","rexml::parsers::pullparser#pull()","tk::blt::dnd::pull()","openssl::x509::store#purpose=()","array#push()","csv::row#push()","csv::table#push()","drb::http0::server#push()","irb::history#push()","multitkip::command_queue#push()","psych::visitors::yamltree#push()","queue#push()","rdoc::markup::document#push()","rdoc::markup::list#push()","rdoc::markup::listitem#push()","rdoc::markup::raw#push()","rexml::parent#push()","rinda::tuplebag#push()","sizedqueue#push()","pp::ppmethods#push_inspect_key()","irb::context#push_workspace()","shell#pushd()","shell#pushdir()","tk::tcllib::diagrams#pushstate()","net::ftp#put()","tkphotoimage#put()","tkphotoimage#put()","tuplespace#put()","iehandler#put_urls()","encoding::converter#putback()","net::ftp#putbinaryfile()","argf#putc()","io#putc()","kernel#putc()","stringio#putc()","tktextio#putc()","zlib::gzipwriter#putc()","argf#puts()","csv#puts()","io#puts()","io::writable#puts()","irb::locale#puts()","irb::notifier::abstractnotifier#puts()","irb::outputmethod#puts()","kernel#puts()","net::internetmessageio::writeadapter#puts()","net::telnet#puts()","object#puts()","openssl::buffering#puts()","tktextio#puts()","xmp#puts()","xmp::stringinputmethod#puts()","zlib::gzipwriter#puts()","net::ftp#puttextfile()","object#puzzleswitch()","dir::pwd()","fileutils::pwd()","net::ftp#pwd()","pathname::pwd()","tk::iwidgets::scrolledhtml#pwd()","transformation#qrst()","tk::blt::spline::quadratic()","tk::blt::winop#quantize()","tk::blt::winop#quantize()","tk::blt::winop#query()","tk::blt::winop#query()","tk::icons::query()","tk::icons#query()","webrick::httprequest#query()","uri::generic#query=()","gem::server#quick()","syck::quick_emit()","syck::quick_emit()","rdoc::options#quiet()","sys#quiet()","rdoc::options#quiet=()","json::ext::generator::state#quirks_mode()","json::ext::generator::state#quirks_mode=()","json::ext::generator::state#quirks_mode?()","json::ext::parser#quirks_mode?()","board#quit()","net::ftp#quit()","net::smtp#quit()","net::smtp#quit()","object#quit()","bigdecimal#quo()","complex#quo()","float#quo()","numeric#quo()","rational#quo()","regexp::quote()","string#quote()","webrick::httputils::quote()","bar#quux()","foo#quux()","vector#r()","racc::parser::racc_runtime_type()","cgi::htmlextension#radio_button()","cgi::htmlextension#radio_group()","kernel#raise()","thread#raise()","tk::blt::winop#raise()","tk::blt::winop#raise()","tk::bwidget::notebook#raise()","tk::bwidget::pagesmanager#raise()","tk::canvas#raise()","tk::iwidgets::scrolledcanvas#raise()","tk::tktable::celltag#raise()","tktexttag#raise()","tktexttag#raise()","tkctagaccess#raise()","rss::baselistener#raise_for_undefined_entity?()","rss::baseparser#raise_for_undefined_entity?()","rss::rexmllistener#raise_for_undefined_entity?()","gem::specification#raise_if_conflicts()","rake::fileutilsext#rake_check_options()","module#rake_extension()","rake::fileutilsext#rake_merge_option()","module#rake_original_const_missing()","time#rake_original_time_compare()","rake::fileutilsext#rake_output_message()","rake::application#rake_require()","rake::application#rake_require()","rake::win32#rake_system()","rake::application#rakefile_location()","rake::application#rakefile_location()","kernel#rand()","random#rand()","random::rand()","object#rand_bool()","tk::blt::vector#random()","object#randomautoscancheck()","object#randomautoscancheckaux()","object#randombutton1()","object#randomdrop()","object#randomleave1()","object#randommotion()","object#randommotion1()","object#randomrelease1()","object#random_n()","securerandom::random_bytes()","openssl::cipher#random_iv()","openssl::cipher#random_key()","securerandom::random_number()","webrick::utils::random_string()","object#ranf()","net::httpheader#range()","tk::blt::htext#range()","tk::blt::treeview#range()","tk::blt::vector#range()","net::httpheader#range=()","net::httpheader#range_length()","tk::blt::treeview#range_open()","tk::blt::treeview::tagorid_methods#range_open_to()","tk::blt::treeview::tagorid_methods#range_to()","tktexttag#ranges()","tktexttag#ranges()","matrix#rank()","matrix#rank_e()","array#rassoc()","env::rassoc()","hash#rassoc()","complex#rationalize()","float#rationalize()","integer#rationalize()","integer#rationalize()","nilclass#rationalize()","rational#rationalize()","curses::raw()","io#raw()","rexml::element#raw()","io#raw!()","cgi::queryextension#raw_cookie()","cgi::queryextension#raw_cookie2()","rdoc::ri::paths::raw_path()","remotetkip#rb_appsend()","rdoc::parser::c#rb_scan_args()","irb::rc_file()","irb::rc_file_generators()","tk::canvas#rchars()","tkctagaccess#rchars()","tk::tcllib::plotchart::xyplot#rchart()","net::smtp#rcptto()","net::smtp#rcptto()","net::smtp#rcptto_list()","net::smtp#rcptto_list()","tuplespace#rd()","object#rd_order()","file::stat#rdev()","file::stat#rdev_major()","file::stat#rdev_minor()","gem::server#rdoc()","gem::docmanager#rdoc_installed?()","rdoc::rubygemshook#rdoc_installed?()","gem::specification#rdoc_options()","gem::specification#rdoc_options=()","rdoc::task#rdoc_task_description()","gem::docmanager::rdoc_version()","process::gid::re_exchange()","process::uid::re_exchange()","process::gid::re_exchangeable?()","process::uid::re_exchangeable?()","argf#read()","csv::read()","csv#read()","drb::http0::strstream#read()","dir#read()","gem::package::tarreader::entry#read()","io#read()","io::read()","openssl::buffering#read()","openssl::pkey::read()","openuri::openread#read()","pathname#read()","rexml::iosource#read()","rexml::source#read()","rinda::tuplespace#read()","rinda::tuplespaceproxy#read()","rinda::waittemplateentry#read()","rubyvm::vpath#read()","stringio#read()","tk::macresource::read()","tkphotoimage#read()","tkphotoimage#read()","tktextio#read()","tuplespace#read()","webrick::cgi::socket#read()","webrick::nullreader#read()","win32::registry#read()","zlib::gzipreader#read()","rinda::tuplespace#read_all()","rinda::tuplespaceproxy#read_all()","win32::registry#read_bin()","gem::read_binary()","net::httpresponse#read_body()","rdoc::parser::ruby#read_directive()","rdoc::parser::ruby#read_documentation_modifiers()","tkoptiondb::read_entries()","tkoptiondb::read_entries()","tkoptiondb::read_entries()","rubylex#read_escape()","rdoc::encoding::read_file()","tkhtml_file_viewer#read_file()","tkoptiondb::read_file()","tkoptiondb::read_file()","tkoptiondb::read_file()","win32::registry#read_i()","object#read_ids1()","object#read_ids1_with_locations()","object#read_ids2()","tk::blt::winop#read_jpeg()","tk::blt::winop#read_jpeg()","argf#read_nonblock()","io#read_nonblock()","io::readable#read_nonblock()","openssl::buffering#read_nonblock()","win32::registry#read_s()","win32::registry#read_s_expand()","openssl::pkcs7::read_smime()","net::http#read_timeout=()","net::http#read_timeout=()","net::pop3#read_timeout=()","net::pop3#read_timeout=()","net::pop3#read_timeout=()","net::pop3#read_timeout=()","net::smtp#read_timeout=()","net::smtp#read_timeout=()","psych::read_type_class()","syck::read_type_class()","syck::read_type_class()","tkoptiondb::read_with_encoding()","tkoptiondb::read_with_encoding()","tkoptiondb::read_with_encoding()","rexml::text::read_with_substitution()","file::readable?()","file::stat#readable?()","filetest#readable?()","pathname#readable?()","irb::inputmethod#readable_atfer_eof?()","irb::readlineinputmethod#readable_atfer_eof?()","irb::stdioinputmethod#readable_atfer_eof?()","file::readable_real?()","file::stat#readable_real?()","filetest#readable_real?()","pathname#readable_real?()","encoding::invalidbytesequenceerror#readagain_bytes()","argf#readbyte()","io#readbyte()","io::readable#readbyte()","zlib::gzipreader#readbyte()","argf#readchar()","io#readchar()","io::readable#readchar()","openssl::buffering#readchar()","tktextio#readchar()","zlib::gzipreader#readchar()","tkoptiondb::readfile()","tkoptiondb::readfile()","tkoptiondb::readfile()","argf#readline()","csv#readline()","debugger__::context#readline()","io#readline()","io::readable#readline()","irb::locale#readline()","kernel#readline()","openssl::buffering#readline()","readline::readline()","stringio#readline()","tktextio#readline()","zlib::gzipreader#readline()","argf#readlines()","csv::readlines()","csv#readlines()","io::readlines()","io#readlines()","kernel#readlines()","openssl::buffering#readlines()","pathname#readlines()","stringio#readlines()","tktextio#readlines()","zlib::gzipreader#readlines()","file::readlink()","pathname#readlink()","argf#readpartial()","io#readpartial()","io::readable#readpartial()","openssl::buffering#readpartial()","tktextio#readpartial()","zlib::gzipreader#readpartial()","net::smtp#ready()","net::smtp#ready()","io#ready?()","remotetkip#ready?()","ixmldomdocument#readystate()","ixmlhttprequest#readystate()","microsoft_freethreadedxmldom_1_0#readystate()","microsoft_xmldom_1_0#readystate()","microsoft_xmldso_1_0#readystate()","microsoft_xmlhttp_1#readystate()","msxml#readystate()","complex#real()","matrix#real()","numeric#real()","complex#real?()","matrix#real?()","numeric#real?()","irb::history#real_inspect()","file::realdirpath()","pathname#realdirpath()","dl::realloc()","gem::configfile#really_verbose()","file::realpath()","pathname#realpath()","benchmark::realtime()","ixmldomparseerror#reason()","localjumperror#reason()","optionparser::parseerror#reason()","webrick::httpstatus::reason_phrase()","webrick::httpstatus::status#reason_phrase()","rexml::validation::relaxng#receive()","method#receiver()","openssl::pkcs7#recipients()","tkpalette#recolortree()","tkpalette::recolortree()","pendulumanimationdemo#recomputeangle()","rexml::document#record_entity_expansion()","rdoc::codeobject#record_location()","rdoc::context#record_location()","optionparser::parseerror#recover()","complex#rect()","complex::rect()","matrix#rect()","numeric#rect()","complex::rectangular()","complex#rectangular()","matrix#rectangular()","numeric#rectangular()","json#recurse_proc()","multitkip#recursion_limit()","multitkip#recursion_limit()","multitkip::recursion_limit()","multitkip::recursion_limit()","multitkip::recursion_limit()","multitkip::recursion_limit()","multitkip#recursion_limit()","multitkip#recursion_limit()","basicsocket#recv()","unixsocket#recv_io()","basicsocket#recv_nonblock()","drb::drbtcpsocket#recv_reply()","drb::http0::clientside#recv_reply()","drb::drbtcpsocket#recv_request()","drb::http0::serverside#recv_request()","ipsocket#recvfrom()","socket#recvfrom()","unixsocket#recvfrom()","socket#recvfrom_nonblock()","udpsocket#recvfrom_nonblock()","basicsocket#recvmsg()","basicsocket#recvmsg_nonblock()","webrick::httpstatus::redirect?()","gem::ext::builder::redirector()","tkphotoimage#redither()","tkphotoimage#redither()","tk::tcllib::widget::ruler#redraw()","enumerable#reduce()","rake::task#reenable()","dl::cptr#ref()","dl::cptr#ref()","tkvariable#ref()","tkvariable#ref()","tk::html_widget::reformat()","curses::refresh()","curses::window#refresh()","gem::refresh()","tk::html_widget#refresh()","tk::iwidgets::canvasprintbox#refresh()","tk::iwidgets::canvasprintdialog#refresh()","tk::iwidgets::hierarchy#refresh()","tkhtml_file_viewer#refresh()","gem::sourceindex#refresh!()","gem::sourceindex#refresh!()","readline::refresh_line()","matchdata#regexp()","optionparser::completion::regexp()","uri::regexp()","drb::extservmanager#regist()","drb::regist_server()","gem::noaliasyamltree#register()","rdoc::markup::preprocess::register()","tk::blt::dnd::register()","tk::bwidget::dragsite::register()","tk::bwidget::dropsite::register()","tk::tcllib::tooltip::register()","vcs::register()","webrick::utils::timeouthandler::register()","webrick::utils::timeouthandler#register()","gem::commandmanager#register_command()","rss::baselistener#register_uri()","rdoc::markup::preprocess::registered()","uri::generic#registry=()","matrix#regular?()","env::rehash()","hash#rehash()","shell::commandprocessor#rehash()","array#reject()","dbm#reject()","env::reject()","enumerable#reject()","gdbm#reject()","hash#reject()","optionparser::reject()","optionparser#reject()","optionparser::list#reject()","sdbm#reject()","yaml::dbm#reject()","array#reject!()","dbm#reject!()","env::reject!()","gdbm#reject!()","hash#reject!()","sdbm#reject!()","set#reject!()","pathname#relative?()","uri::generic#relative?()","pathname#relative_path_from()","vcs#relative_to()","optionparser#release()","tk::blt::busy#release()","version#release()","gem::sourceindex#released_gems()","gem::sourceindex#released_gems()","gem::sourceindex#released_specs()","gem::sourceindex#released_specs()","drb::drbunknown#reload()","webrick::httpauth::htdigest#reload()","webrick::httpauth::htgroup#reload()","webrick::httpauth::htpasswd#reload()","bigdecimal#remainder()","bignum#remainder()","numeric#remainder()","gem::localremoteoptions#remote?()","basicsocket#remote_address()","webrick::httprequest#remote_ip()","fileutils::remove()","gem::uninstaller#remove()","optionparser#remove()","rdoc::rubygemshook#remove()","rexml::attribute#remove()","rexml::child#remove()","tk::bwidget::panelframe#remove()","tk::bwidget::statusbar#remove()","tk::canvas#remove()","tk::iwidgets::scrolledcanvas#remove()","tk::panedwindow#remove()","tk::panedwindow#remove()","tk::rbwidget::combobox#remove()","tk::tcllib::history::remove()","tk::tcllib::widget::panelframe#remove()","tk::tcllib::widget::panelframe#remove()","tk::tcllib::widget::statusbar#remove()","tk::tcllib::widget::toolbar#remove()","tk::tcllib::widget::toolbaritem#remove()","tkgrid::remove()","tkgrid::remove()","tktexttag#remove()","tktexttag#remove()","tkvariable#remove()","tkvariable#remove()","tkcitem#remove()","tkctag#remove()","ixmldomelement#removeattribute()","ixmldomelement#removeattributenode()","ixmldomattribute#removechild()","ixmldomcdatasection#removechild()","ixmldomcharacterdata#removechild()","ixmldomcomment#removechild()","ixmldomdocument#removechild()","ixmldomdocumentfragment#removechild()","ixmldomdocumenttype#removechild()","ixmldomelement#removechild()","ixmldomentity#removechild()","ixmldomentityreference#removechild()","ixmldomnode#removechild()","ixmldomnotation#removechild()","ixmldomprocessinginstruction#removechild()","ixmldomtext#removechild()","ixtlruntime#removechild()","microsoft_freethreadedxmldom_1_0#removechild()","microsoft_xmldom_1_0#removechild()","nqxml::node#removechild()","ixmldomnamednodemap#removenameditem()","ixmldomnamednodemap#removequalifieditem()","gem::uninstaller#remove_all()","gem::dependencylist#remove_by_name()","dl#remove_callback()","dl#remove_callback_internal()","dl#remove_cdecl_callback()","module#remove_class_variable()","rdoc::parser::simple#remove_coding_comment()","rdoc::parser::c#remove_commented_out_lines()","tk::tcllib::widget::panelframe#remove_destroy()","tk::tcllib::widget::panelframe#remove_destroy()","fileutils::remove_dir()","fileutils::remove_entry()","fileutils::remove_entry_secure()","gem::uninstaller#remove_executables()","fileutils::remove_file()","rdoc::context#remove_from_documentation?()","webrick::httpservlet::filehandler::remove_handler()","rdoc::context#remove_invisible()","gem::validator#remove_leading_dot_dir()","rdoc::toplevel::remove_nodoc()","rdoc::classmodule#remove_nodoc_children()","gem::commands::setupcommand#remove_old_bin_files()","gem::command#remove_option()","gem::commands::ownercommand#remove_owners()","rdoc::parser::c#remove_private_comments()","rdoc::parser::ruby#remove_private_comments()","rdoc::parser::simple#remove_private_comments()","net::imap#remove_response_handler()","drb::remove_server()","rdoc::generator::ri#remove_siginfo_handler()","rdoc::rdoc#remove_siginfo_handler()","gem::sourceindex#remove_spec()","gem::sourceindex#remove_spec()","gem::specification::remove_spec()","gem::dependencylist#remove_specs_unsatisfied_by()","dl#remove_stdcall_callback()","multitkip::remove_tk_procs()","multitkip::remove_tk_procs()","multitkip::remove_tk_procs()","multitkip::remove_tk_procs()","rdoc::parser::rubytools#remove_token_listener()","rdoc::rdoc#remove_unparseable()","tk::bwidget::panelframe#remove_with_destroy()","tk::bwidget::statusbar#remove_with_destroy()","tk::tcllib::widget::statusbar#remove_with_destroy()","tk::tcllib::widget::toolbar#remove_with_destroy()","tk::tcllib::widget::toolbaritem#remove_with_destroy()","file::rename()","net::ftp#rename()","net::imap#rename()","pathname#rename()","tk::iwidgets::scrolledhtml#render()","rdoc::generator::darkfish#render_template()","rinda::simplerenewer#renew()","rinda::tupleentry#renew()","io#reopen()","stringio#reopen()","syslog::reopen()","tktextio#reopen()","tk::bwidget::listbox#reorder()","tk::bwidget::tree#reorder()","tk::bwidget::tree::node#reorder()","gdbm#reorganize()","tk::blt::ted::rep()","rake::altsystem#repair_command()","pendulumanimationdemo#repeat()","object#repeatdemo()","array#repeated_combination()","array#repeated_permutation()","array#replace()","dbm#replace()","env::replace()","gdbm#replace()","hash#replace()","sdbm#replace()","set#replace()","string#replace()","tk::optionobj#replace()","tkfont#replace()","tkfont#replace()","yaml::dbm#replace()","ixmldomattribute#replacechild()","ixmldomcdatasection#replacechild()","ixmldomcharacterdata#replacechild()","ixmldomcomment#replacechild()","ixmldomdocument#replacechild()","ixmldomdocumentfragment#replacechild()","ixmldomdocumenttype#replacechild()","ixmldomelement#replacechild()","ixmldomentity#replacechild()","ixmldomentityreference#replacechild()","ixmldomnode#replacechild()","ixmldomnotation#replacechild()","ixmldomprocessinginstruction#replacechild()","ixmldomtext#replacechild()","ixtlruntime#replacechild()","microsoft_freethreadedxmldom_1_0#replacechild()","microsoft_xmldom_1_0#replacechild()","ixmldomcdatasection#replacedata()","ixmldomcharacterdata#replacedata()","ixmldomcomment#replacedata()","ixmldomtext#replacedata()","tk::canvas#replace_chars()","tkctagaccess#replace_chars()","rexml::parent#replace_child()","tk::canvas#replace_coords()","tkctagaccess#replace_coords()","rexml::child#replace_with()","encoding::converter#replacement()","encoding::converter#replacement=()","encoding#replicate()","drb::http0::callback#reply()","socket::udpsource#reply()","rinda::ringserver#reply_service()","gc::profiler::report()","rdoc::stats#report()","rdoc::stats#report_attributes()","rdoc::stats#report_class_module()","rdoc::stats#report_constants()","rdoc::stats#report_methods()","psych::coder#represent_map()","psych::coder#represent_object()","psych::coder#represent_scalar()","psych::coder#represent_seq()","drb::http0::callback#req_body()","tkwinfo::reqheight()","tkwinfo::reqheight()","gem::remotefetcher#request()","net::http#request()","net::http#request()","tk::windde::request()","net::httpgenericrequest#request_body_permitted?()","net::http#request_get()","net::http#request_get()","net::http#request_head()","net::http#request_head()","net::http#request_post()","net::http#request_post()","uri::http#request_uri()","irb::locale#require()","tkpackage#require()","tkpackage#require_exact()","gem::specification#require_path()","gem::specification#require_path=()","xmlrpc::webrickservlet#require_path_info?()","kernel#require_relative()","gem::specification::required_attribute?()","gem::specification::required_attributes()","gem::required_location()","rss::element#required_prefix()","rss::ituneschannelmodel::itunescategory#required_prefix()","rss::ituneschannelmodel::itunesimage#required_prefix()","rss::ituneschannelmodel::itunesowner#required_prefix()","rss::itunesitemmodel::itunesduration#required_prefix()","rss::imagefaviconmodel::imagefavicon#required_prefix()","rss::imageitemmodel::imageitem#required_prefix()","rss::taxonomytopicmodel::taxonomytopic#required_prefix()","rss::taxonomytopicsmodel::taxonomytopics#required_prefix()","rss::trackbackmodel10::trackbackabout#required_prefix()","rss::trackbackmodel10::trackbackping#required_prefix()","rss::trackbackmodel20::trackbackabout#required_prefix()","rss::trackbackmodel20::trackbackping#required_prefix()","gem::specification#required_ruby_version=()","gem::specification#required_rubygems_version=()","rss::atom::commonmodel#required_uri()","rss::element#required_uri()","rss::ituneschannelmodel::itunescategory#required_uri()","rss::ituneschannelmodel::itunesimage#required_uri()","rss::ituneschannelmodel::itunesowner#required_uri()","rss::itunesitemmodel::itunesduration#required_uri()","rss::imagefaviconmodel::imagefavicon#required_uri()","rss::imageitemmodel::imageitem#required_uri()","rss::rdf#required_uri()","rss::rdf::li#required_uri()","rss::rdf::li#required_uri()","rss::rdf::li#required_uri()","rss::rdf::seq#required_uri()","rss::rdf::seq#required_uri()","rss::taxonomytopicmodel::taxonomytopic#required_uri()","rss::taxonomytopicsmodel::taxonomytopics#required_uri()","rss::trackbackmodel10::trackbackabout#required_uri()","rss::trackbackmodel10::trackbackping#required_uri()","rss::trackbackmodel20::trackbackabout#required_uri()","rss::trackbackmodel20::trackbackping#required_uri()","gem::dependency#requirement()","gem::specification#requirements()","gem::specification#requirements=()","gem::dependency#requirements_list()","tkwinfo::reqwidth()","tkwinfo::reqwidth()","rdoc::task#rerdoc_task_description()","tk::tktable#reread()","tk::blt::winop#resample()","tk::blt::winop#resample()","tk::tcllib::plotchart::xyplot#rescale()","board#reset()","cgi::htmlextension#reset()","digest::hmac#reset()","digest::instance#reset()","digest::sha2#reset()","gem::commandmanager::reset()","gem::remotefetcher#reset()","gem::specification::reset()","ixmldomnamednodemap#reset()","ixmldomnodelist#reset()","net::pop3#reset()","net::pop3#reset()","net::pop3#reset()","net::pop3#reset()","object::syck::emitter#reset()","openssl::cipher#reset()","openssl::digest#reset()","openssl::hmac#reset()","rdoc::parser::c::reset()","rdoc::parser::rubytools#reset()","rdoc::rdoc::reset()","rdoc::toplevel::reset()","rexml::validation::choice#reset()","rexml::validation::interleave#reset()","rexml::validation::oneormore#reset()","rexml::validation::state#reset()","rexml::validation::validator#reset()","stringscanner#reset()","tk::iwidgets::feedback#reset()","tk::iwidgets::panedwindow#reset()","tkgoldberg_demo#reset()","tktimer#reset()","tktimer#reset()","zlib::zstream#reset()","tkfont#reset_pointadjust()","tkfont#reset_pointadjust()","curses::reset_prog_mode()","photocanvas#reset_region()","tkgoldberg_demo#reset_step()","tk::wm#resizable()","tk::wm::resizable()","curses::resize()","curses::window#resize()","curses::resizeterm()","rdoc::crossreference#resolve()","rake::filelist#resolve()","ixmldomdocument#resolveexternals()","microsoft_freethreadedxmldom_1_0#resolveexternals()","microsoft_xmldom_1_0#resolveexternals()","ixmldomdocument#resolveexternals=()","microsoft_freethreadedxmldom_1_0#resolveexternals=()","microsoft_xmldom_1_0#resolveexternals=()","rake::filelist#resolve_add()","rdoc::context#resolve_aliases()","rake::taskmanager#resolve_args()","syck::resolver()","syck::resolver()","tk::html_widget#resolver()","rss::taxonomytopicsmodel::taxonomytopics#resources()","drb::drbobject#respond_to?()","drb::drbobject#respond_to?()","object#respond_to?()","delegator#respond_to_missing?()","object#respond_to_missing?()","ixmlhttprequest#responsebody()","microsoft_xmlhttp_1#responsebody()","ixmlhttprequest#responsestream()","microsoft_xmlhttp_1#responsestream()","ixmlhttprequest#responsetext()","microsoft_xmlhttp_1#responsetext()","ixmlhttprequest#responsexml()","microsoft_xmlhttp_1#responsexml()","net::httpgenericrequest#response_body_permitted?()","stringscanner#rest()","stringscanner#rest?()","stringscanner#rest_size()","multitkip#restart()","multitkip#restart()","multitkip#restart()","multitkip#restart()","remotetkip#restart()","tcltkip#restart()","tcltklib#restart()","tktimer#restart()","tktimer#restart()","cgi::session::filestore#restore()","cgi::session::memorystore#restore()","cgi::session::nullstore#restore()","cgi::session::pstore#restore()","json::restore()","marshal::restore()","tk::blt::tree::node#restore()","tk::blt::tree::node#restore_from_file()","tk::blt::tree::node#restore_overwrite()","tk::blt::tree::node#restore_overwrite_from_file()","stringscanner#restsize()","coverage::result()","erb#result()","gc::profiler::result()","stopiteration#result()","debugger__#resume()","fiber#resume()","debugger__::context#resume_all()","tk::blt::dragdrop::packagecommand::validateargs::ret_val()","tk::blt::dragdrop::sitecommand::validateargs::ret_val()","tk::blt::treeview::findexecflagvalue::validateargs::ret_val()","tk::blt::treeview::openclosecommand::validateargs::ret_val()","tk::iwidgets::calendar::calendarcommand::validateargs::ret_val()","tk::iwidgets::hierarchy::iconcommand::validateargs::ret_val()","tk::iwidgets::hierarchy::indicatorcommand::validateargs::ret_val()","tk::iwidgets::hierarchy::querycommand::validateargs::ret_val()","tk::spinbox::spincommand::validateargs::ret_val()","tk::tile::tspinbox::spincommand::validateargs::ret_val()","tk::tktable::browsecommand::validateargs::ret_val()","tk::tktable::cellcommand::validateargs::ret_val()","tk::tktable::selectioncommand::validateargs::ret_val()","tk::winico::winico_callback::validateargs::ret_val()","tkutil::callbacksubst::ret_val()","tkvalidatecommand::validateargs::ret_val()","net::ftp#retrbinary()","net::ftp#retrlines()","csv#return_headers?()","win32ole_method#return_type()","win32ole_method#return_type_detail()","win32ole_method#return_vtype()","win32ole_param#retval?()","object#revcomp()","array#reverse()","ipaddr#reverse()","string#reverse()","array#reverse!()","string#reverse!()","array#reverse_each()","enumerable#reverse_each()","object#reverse_each_name()","object#reverse_each_name_with_prefix_optional()","animatedwavedemo#reverser()","openssl::x509::crl#revoked()","openssl::x509::crl#revoked=()","argf#rewind()","csv#rewind()","dir#rewind()","enumerator#rewind()","gem::package::tarreader#rewind()","gem::package::tarreader::entry#rewind()","io#rewind()","prime::eratosthenesgenerator#rewind()","prime::generator23#rewind()","prime::pseudoprimegenerator#rewind()","prime::trialdivisiongenerator#rewind()","rexml::parsers::lightparser#rewind()","rexml::parsers::ultralightparser#rewind()","stringio#rewind()","tktextio#rewind()","zlib::gzipreader#rewind()","cgi::rfc1123_date()","date#rfc2822()","date::rfc2822()","datetime::rfc2822()","time#rfc2822()","date#rfc3339()","date::rfc3339()","datetime::rfc3339()","datetime#rfc3339()","date#rfc822()","date::rfc822()","datetime::rfc822()","time#rfc822()","tkwinfo::rgb()","tkwinfo::rgb()","gem::specification#ri_dir()","gem::docmanager#ri_installed?()","rdoc::rubygemshook#ri_installed?()","process::gid::rid()","process::uid::rid()","board#right()","array#rindex()","string#rindex()","string#rjust()","object#rl()","fileutils::rm()","object#rm()","fileutils::rm_f()","object#rm_f()","fileutils::rm_r()","fileutils::rm_rf()","dir::rmdir()","fileutils::rmdir()","net::ftp#rmdir()","object#rmdir()","pathname#rmdir()","shell::commandprocessor#rmdir()","fileutils::rmtree()","pathname#rmtree()","object#roomchanged()","object#roomchanged2()","gem::server#root()","msxml#root()","psych::nodes::document#root()","rexml::document#root()","rexml::element#root()","rexml::light::node#root()","tk::blt::tree::node#root()","pstore#root?()","pathname#root?()","tk::blt::tree::node#root?()","rexml::element#root_node()","pstore#roots()","tkwinfo::rootx()","tkwinfo::rootx()","tkwinfo::rooty()","tkwinfo::rooty()","array#rotate()","tk::blt::cutbuffer::rotate()","array#rotate!()","tkgoldberg_demo#rotate_c()","tkgoldberg_demo#rotate_item()","bigdecimal#round()","float#round()","integer#round()","integer#round()","matrix#round()","numeric#round()","rexml::functions::round()","rational#round()","time#round()","tkgoldberg_demo#round_poly()","tkgoldberg_demo#round_rect()","uri::generic#route_from()","uri::generic#route_to()","jisx0208::char#row()","matrix#row()","tkgrid::row()","tkgrid::row()","tk::tktable#row_index()","matrix#row_size()","matrix::row_vector()","matrix#row_vectors()","tkgrid::rowconfiginfo()","tkgrid::rowconfiginfo()","tkgrid::rowconfigure()","tkgrid::rowconfigure()","matrix::rows()","string#rpartition()","tk::iwidgets::scrolledtext#rsearch()","tk::iwidgets::scrolledtext#rsearch_with_length()","math::rsqrt()","rss::baseparser#rss()","string#rstrip()","string#rstrip!()","fileutils#ruby()","gem::ruby()","sys#ruby()","object#ruby2html()","gem::ruby_engine()","object#ruby_exec()","gem::ruby_version()","gem::configfile#rubygems_api_key=()","gem::gemcutterutilities#rubygems_api_request()","object#rulermktab()","object#rulermovetab()","object#rulernewtab()","object#rulerreleasetab()","object#rulerselecttab()","benchmarkdriver#run()","biff#run()","erb#run()","gem::commandmanager#run()","gem::ext::builder::run()","gem::gemrunner#run()","gem::server#run()","gem::server::run()","myapp#run()","rdoc::ri::driver::run()","rdoc::ri::driver#run()","rake::application#run()","rake::application#run()","sys#run()","thread#run()","webrick::genericserver#run()","webrick::httpserver#run()","tkhtml_file_viewer#run_applet()","irb::run_config()","shell::commandprocessor::run_config()","gem::commands::setupcommand#run_rdoc()","gem::docmanager#run_rdoc()","object#runfile()","tktimer#running?()","tktimer#running?()","multitkip#running_mainloop?()","multitkip#running_mainloop?()","multitkip#running_mainloop?()","multitkip#running_mainloop?()","gem::specification#runtime_dependencies()","multitkip#safe?()","multitkip#safe?()","multitkip#safe?()","multitkip#safe?()","pidigitspigot#safe?()","remotetkip#safe?()","tcltkip#safe?()","multitkip#safe_base?()","multitkip#safe_base?()","multitkip#safe_base?()","multitkip#safe_base?()","remotetkip#safe_base?()","multitkip::safe_level()","multitkip#safe_level()","multitkip#safe_level()","multitkip::safe_level()","multitkip::safe_level()","multitkip#safe_level()","multitkip::safe_level()","multitkip#safe_level()","thread#safe_level()","multitkip::safe_level=()","multitkip::safe_level=()","multitkip::safe_level=()","multitkip#safe_level=()","multitkip#safe_level=()","multitkip#safe_level=()","multitkip::safe_level=()","multitkip#safe_level=()","fileutils#safe_ln()","fileutils::safe_unlink()","multitkip#safeip_add_to_access_path()","multitkip#safeip_add_to_access_path()","multitkip#safeip_add_to_access_path()","multitkip#safeip_add_to_access_path()","multitkip#safeip_configinfo()","multitkip#safeip_configinfo()","multitkip#safeip_configinfo()","multitkip#safeip_configinfo()","multitkip#safeip_configure()","multitkip#safeip_configure()","multitkip#safeip_configure()","multitkip#safeip_configure()","multitkip#safeip_delete()","multitkip#safeip_delete()","multitkip#safeip_delete()","multitkip#safeip_delete()","multitkip#safeip_find_in_access_path()","multitkip#safeip_find_in_access_path()","multitkip#safeip_find_in_access_path()","multitkip#safeip_find_in_access_path()","multitkip#safeip_set_log_cmd()","multitkip#safeip_set_log_cmd()","multitkip#safeip_set_log_cmd()","multitkip#safeip_set_log_cmd()","array#sample()","drbex#sample()","drbex3#sample()","test1#sample()","gem::indexer#sanitize()","gem::indexer#sanitize_string()","string#sans_arguments()","tk::panedwindow#sash_coord()","tk::panedwindow#sash_coord()","tk::panedwindow#sash_dragto()","tk::panedwindow#sash_dragto()","tk::panedwindow#sash_mark()","tk::panedwindow#sash_mark()","tk::panedwindow#sash_place()","tk::panedwindow#sash_place()","tk::tile::tpaned#sashpos()","gem::requirement#satisfied_by?()","gem::requirement#satisfied_by?()","gem::specification#satisfies_requirement?()","date#saturday?()","time#saturday?()","ixmldomdocument#save()","microsoft_freethreadedxmldom_1_0#save()","microsoft_xmldom_1_0#save()","tk::blt::table#save()","rdoc::ri::store#save_cache()","rdoc::ri::store#save_class()","bigdecimal::save_exception_mode()","irb::context#save_history()","irb::historysavingability#save_history()","irb::context#save_history=()","bigdecimal::save_limit()","object#save_memo()","rdoc::ri::store#save_method()","tk::tcllib::plotchart::chartmethod#save_plot()","bigdecimal::save_rounding_mode()","tk::tcllib::diagrams#saveps()","chatentry#say()","gem::streamui#say()","gem::userinteraction#say()","object#sbstub()","matrix::scalar()","object::syck::out#scalar()","psych::coder#scalar()","psych::emitter#scalar()","psych::handler#scalar()","psych::treebuilder#scalar()","psych::coder#scalar=()","tk::canvas#scale()","tk::iwidgets::scrolledcanvas#scale()","tkctagaccess#scale()","openssl::x509::name::rfc2253dn#scan()","rdoc::parser::c#scan()","rdoc::parser::ruby#scan()","rdoc::parser::simple#scan()","rexml::iosource#scan()","rexml::source#scan()","string#scan()","stringscanner#scan()","tk::clock::scan()","webrick::httpserver::mounttable#scan()","tk::clock::scangmt()","tkutil::callbacksubst::scan_args()","certstore#scan_certs()","tk::blt::htext#scan_dragto()","tk::blt::tabset#scan_dragto()","tk::blt::treeview#scan_dragto()","tk::canvas#scan_dragto()","tk::iwidgets::hierarchy#scan_dragto()","tk::iwidgets::scrolledcanvas#scan_dragto()","tk::iwidgets::scrolledlistbox#scan_dragto()","tk::iwidgets::scrolledtext#scan_dragto()","tk::iwidgets::selectionbox#scan_dragto()","tk::iwidgets::selectiondialog#scan_dragto()","tk::tktable#scan_dragto()","tktextwin#scan_dragto()","stringscanner#scan_full()","tk::blt::htext#scan_mark()","tk::blt::tabset#scan_mark()","tk::blt::treeview#scan_mark()","tk::canvas#scan_mark()","tk::iwidgets::hierarchy#scan_mark()","tk::iwidgets::scrolledcanvas#scan_mark()","tk::iwidgets::scrolledlistbox#scan_mark()","tk::iwidgets::scrolledtext#scan_mark()","tk::iwidgets::selectionbox#scan_mark()","tk::iwidgets::selectiondialog#scan_mark()","tk::tktable#scan_mark()","tktextwin#scan_mark()","stringscanner#scan_until()","io#scanf()","kernel#scanf()","string#scanf()","uri::generic#scheme=()","uri::scheme_list()","tk::itcl::scope()","uri::ldap#scope()","uri::ldap#scope=()","rake::task#scope_name()","tkwinfo::screen()","tkwinfo::screen()","tk::blt::treeview#screen_bbox()","tk::blt::treeview::tagorid_methods#screen_bbox()","tkwinfo::screencells()","tkwinfo::screencells()","tkwinfo::screendepth()","tkwinfo::screendepth()","tkwinfo::screenheight()","tkwinfo::screenheight()","tkwinfo::screenmmheight()","tkwinfo::screenmmheight()","tkwinfo::screenmmwidth()","tkwinfo::screenmmwidth()","tkwinfo::screenvisual()","tkwinfo::screenvisual()","tkwinfo::screenwidth()","tkwinfo::screenwidth()","tkhtml_file_viewer#script_cmd()","curses::scrl()","curses::window#scrl()","curses::window#scroll()","tk::scrollbar#scroll()","object#scrollbutton()","object#scrollenter()","object#scrollleave()","fileviewer#scroll_down()","tk::scrollbar#scroll_pages()","tk::scrollbar#scroll_units()","fileviewer#scroll_up()","tk::iwidgets::notebook#scrollbar()","tk::iwidgets::tabnotebook#scrollbar()","tk::rbwidget::autoscrolllistbox#scrollbar()","tk::rbwidget::combobox#scrollbar()","object#scrollbarresizedemo()","tkmulticolumnlist#scrollbarborder()","tkmultilistframe#scrollbarborder()","tk::rbwidget::scrollframe#scrollbarwidth()","tk::scrollbarcomposite#scrollbarwidth()","tkmulticolumnlist#scrollbarwidth()","tkmultilistframe#scrollbarwidth()","tkmultilistbox#scrollbarwidth()","tk::blt::tabset#scrollcommand()","tk::iwidgets::notebook#scrollcommand()","tk::iwidgets::tabnotebook#scrollcommand()","object#scrolledwidget()","cgi::htmlextension#scrolling_list()","curses::window#scrollok()","gem::sourceindex#search()","gem::sourceindex#search()","irb::jobmanager#search()","irb::slex#search()","irb::slex::node#search()","net::imap#search()","optionparser::list#search()","rubyvm::vpath#search()","syck::basenode#search()","tk::blt::htext#search()","tk::blt::table#search()","tk::blt::vector#search()","tk::iwidgets::scrolledtext#search()","object#search_x_libraries()","optionparser#search_const()","encoding::converter::search_convpath()","irb::irbloader#search_file_from_ruby_path()","stringscanner#search_full()","webrick::httpserver#search_servlet()","object#search_tclconfig()","object#search_vers_on_path()","tk::iwidgets::scrolledtext#search_with_length()","gem::searcher()","time#sec()","xmlrpc::datetime#sec=()","rss::itunesitemmodel::itunesduration#second=()","rss::maker::itunesitemmodel::itunesdurationbase#second=()","tk::clock::seconds()","openssl::config#section()","openssl::config#sections()","rdoc::context#sections()","cgi::cookie#secure=()","rdoc::methodattr#see()","tk::blt::tabset#see()","tk::blt::tabset::tab#see()","tk::blt::treeview#see()","tk::blt::treeview::tagorid_methods#see()","tk::bwidget::listbox#see()","tk::bwidget::listbox::item#see()","tk::bwidget::notebook#see()","tk::bwidget::scrollableframe#see()","tk::bwidget::tree#see()","tk::bwidget::tree::node#see()","tk::iwidgets::combobox#see()","tk::iwidgets::hierarchy#see()","tk::iwidgets::scrolledlistbox#see()","tk::iwidgets::scrolledtext#see()","tk::rbwidget::combobox#see()","tk::tktable#see()","tktextwin#see()","tk::blt::treeview#see_anchor()","tk::blt::treeview::tagorid_methods#see_anchor()","openssl::pkey::ec::group#seed()","random#seed()","openssl::pkey::ec::group#seed=()","argf#seek()","dir#seek()","io#seek()","stringio#seek()","tktextio#seek()","tkhtml_file_viewer#sel_load()","array#select()","dbm#select()","demotree::select()","env::select()","enumerable#select()","gdbm#select()","hash#select()","io::select()","kernel#select()","net::imap#select()","sdbm#select()","struct#select()","syck::basenode#select()","tk::blt::dnd::select()","tk::blt::tabset#select()","tk::blt::ted::select()","tk::canvas#select()","tk::iwidgets::calendar#select()","tk::iwidgets::checkbox#select()","tk::iwidgets::notebook#select()","tk::iwidgets::optionmenu#select()","tk::iwidgets::radiobox#select()","tk::iwidgets::scrolledcanvas#select()","tk::iwidgets::tabnotebook#select()","tk::iwidgets::tabset#select()","tk::radiobutton#select()","tk::radiobutton#select()","tk::tile::tnotebook#select()","tk::tile::tnotebook#select()","uri::generic#select()","yaml::dbm#select()","array#select!()","env::select!()","hash#select!()","set#select!()","syck::basenode#select!()","object#selectandloaddir3()","ixmldomattribute#selectnodes()","ixmldomcdatasection#selectnodes()","ixmldomcharacterdata#selectnodes()","ixmldomcomment#selectnodes()","ixmldomdocument#selectnodes()","ixmldomdocumentfragment#selectnodes()","ixmldomdocumenttype#selectnodes()","ixmldomelement#selectnodes()","ixmldomentity#selectnodes()","ixmldomentityreference#selectnodes()","ixmldomnode#selectnodes()","ixmldomnotation#selectnodes()","ixmldomprocessinginstruction#selectnodes()","ixmldomtext#selectnodes()","ixtlruntime#selectnodes()","microsoft_freethreadedxmldom_1_0#selectnodes()","microsoft_xmldom_1_0#selectnodes()","ixmldomattribute#selectsinglenode()","ixmldomcdatasection#selectsinglenode()","ixmldomcharacterdata#selectsinglenode()","ixmldomcomment#selectsinglenode()","ixmldomdocument#selectsinglenode()","ixmldomdocumentfragment#selectsinglenode()","ixmldomdocumenttype#selectsinglenode()","ixmldomelement#selectsinglenode()","ixmldomentity#selectsinglenode()","ixmldomentityreference#selectsinglenode()","ixmldomnode#selectsinglenode()","ixmldomnotation#selectsinglenode()","ixmldomprocessinginstruction#selectsinglenode()","ixmldomtext#selectsinglenode()","ixtlruntime#selectsinglenode()","microsoft_freethreadedxmldom_1_0#selectsinglenode()","microsoft_xmldom_1_0#selectsinglenode()","tk::canvas#select_adjust()","tk::iwidgets::scrolledcanvas#select_adjust()","tkctagaccess#select_adjust()","tk::canvas#select_clear()","tk::iwidgets::scrolledcanvas#select_clear()","tkmulticolumnlist#select_clear()","tkmulticolumnlist::select_clear()","tk::canvas#select_from()","tk::iwidgets::scrolledcanvas#select_from()","tkctagaccess#select_from()","tkmulticolumnlist::select_index()","tk::canvas#select_item()","tk::iwidgets::scrolledcanvas#select_item()","tk::iwidgets::selectionbox#select_item()","tk::iwidgets::selectiondialog#select_item()","irb::inputcompletor::select_message()","demotree::select_node()","tkmulticolumnlist#select_set()","tkmulticolumnlist::select_set()","tk::canvas#select_to()","tk::iwidgets::scrolledcanvas#select_to()","tkctagaccess#select_to()","tk::tcllib::swaplist_dialog#selected()","tk::tile::tnotebook#selected()","tk::tile::tnotebook#selected()","tk::iwidgets::scrolledlistbox#selected_item_count()","tk::tcllib::tkpiechart::pie#selected_slices()","tk::bwidget::listbox#selection_add()","tk::bwidget::listbox::item#selection_add()","tk::bwidget::tree#selection_add()","tk::bwidget::tree::node#selection_add()","tk::iwidgets::hierarchy#selection_add()","tk::blt::htext#selection_adjust()","tk::entry#selection_adjust()","tk::iwidgets::entryfield#selection_adjust()","tk::iwidgets::promptdialog#selection_adjust()","tk::iwidgets::spinner#selection_adjust()","tk::blt::treeview#selection_anchor()","tk::blt::treeview::tagorid_methods#selection_anchor()","tk::iwidgets::combobox#selection_anchor()","tk::iwidgets::scrolledlistbox#selection_anchor()","tk::iwidgets::selectionbox#selection_anchor()","tk::iwidgets::selectiondialog#selection_anchor()","tk::listbox#selection_anchor()","tk::tktable#selection_anchor()","tkmultilistframe#selection_anchor()","tkmultilistbox#selection_anchor()","tk::blt::treeview#selection_cancel()","tk::blt::htext#selection_clear()","tk::blt::treeview#selection_clear()","tk::blt::treeview::tagorid_methods#selection_clear()","tk::bwidget::listbox#selection_clear()","tk::bwidget::tree#selection_clear()","tk::entry#selection_clear()","tk::html_widget#selection_clear()","tk::iwidgets::combobox#selection_clear()","tk::iwidgets::entryfield#selection_clear()","tk::iwidgets::hierarchy#selection_clear()","tk::iwidgets::promptdialog#selection_clear()","tk::iwidgets::scrolledlistbox#selection_clear()","tk::iwidgets::selectionbox#selection_clear()","tk::iwidgets::selectiondialog#selection_clear()","tk::iwidgets::spinner#selection_clear()","tk::listbox#selection_clear()","tk::tktable#selection_clear()","tkmultilistframe#selection_clear()","tkmultilistbox#selection_clear()","tk::blt::treeview#selection_clear_all()","tk::tktable#selection_clear_all()","tk::blt::htext#selection_from()","tk::entry#selection_from()","tk::iwidgets::entryfield#selection_from()","tk::iwidgets::promptdialog#selection_from()","tk::iwidgets::spinner#selection_from()","tk::bwidget::listbox#selection_get()","tk::bwidget::tree#selection_get()","tk::iwidgets::hierarchy#selection_get()","tk::blt::treeview#selection_include?()","tk::blt::treeview::tagorid_methods#selection_include?()","tk::bwidget::tree#selection_include?()","tk::tktable#selection_include?()","tk::iwidgets::combobox#selection_includes()","tk::iwidgets::scrolledlistbox#selection_includes()","tk::iwidgets::selectionbox#selection_includes()","tk::iwidgets::selectiondialog#selection_includes()","tk::listbox#selection_includes()","tk::blt::htext#selection_line()","tk::blt::treeview#selection_mark()","tk::blt::treeview::tagorid_methods#selection_mark()","tk::blt::htext#selection_present()","tk::entry#selection_present()","tk::iwidgets::entryfield#selection_present()","tk::iwidgets::promptdialog#selection_present()","tk::iwidgets::spinner#selection_present()","tk::tktable#selection_present()","tk::blt::treeview#selection_present?()","tk::blt::htext#selection_range()","tk::bwidget::tree#selection_range()","tk::entry#selection_range()","tk::iwidgets::entryfield#selection_range()","tk::iwidgets::promptdialog#selection_range()","tk::iwidgets::spinner#selection_range()","tk::bwidget::listbox#selection_remove()","tk::bwidget::listbox::item#selection_remove()","tk::bwidget::tree#selection_remove()","tk::bwidget::tree::node#selection_remove()","tk::iwidgets::hierarchy#selection_remove()","tk::blt::treeview#selection_set()","tk::blt::treeview::tagorid_methods#selection_set()","tk::bwidget::listbox#selection_set()","tk::bwidget::listbox::item#selection_set()","tk::bwidget::tree#selection_set()","tk::bwidget::tree::node#selection_set()","tk::html_widget#selection_set()","tk::iwidgets::combobox#selection_set()","tk::iwidgets::scrolledlistbox#selection_set()","tk::iwidgets::selectionbox#selection_set()","tk::iwidgets::selectiondialog#selection_set()","tk::listbox#selection_set()","tk::tktable#selection_set()","tkmultilistframe#selection_set()","tkmultilistbox#selection_set()","tk::blt::htext#selection_to()","tk::entry#selection_to()","tk::iwidgets::entryfield#selection_to()","tk::iwidgets::promptdialog#selection_to()","tk::iwidgets::spinner#selection_to()","tk::blt::treeview#selection_toggle()","tk::blt::treeview::tagorid_methods#selection_toggle()","tk::bwidget::listbox::item#selection_toggle()","tk::bwidget::tree#selection_toggle()","tk::bwidget::tree::node#selection_toggle()","tk::blt::htext#selection_word()","basicsocket#send()","ixmlhttprequest#send()","microsoft_xmlhttp_1#send()","multitkip_ok::send()","object#send()","udpsocket#send()","webrick::httpresponse#send_body()","gem::commands::pushcommand#send_gem()","webrick::httpresponse#send_header()","unixsocket#send_io()","net::smtp#send_mail()","net::smtp#send_mail()","net::smtp#send_message()","net::smtp#send_message()","drb::drbtcpsocket#send_reply()","drb::http0::serverside#send_reply()","drb::drbtcpsocket#send_request()","drb::http0::clientside#send_request()","net::http#send_request()","net::http#send_request()","webrick::httpresponse#send_response()","tkkinput::send_spot()","net::ftp#sendcmd()","irb::frame::sender()","net::smtp#sendmail()","net::smtp#sendmail()","basicsocket#sendmsg()","basicsocket#sendmsg_nonblock()","optionparser#separator()","pp::ppmethods#seplist()","object::syck::out#seq()","syck::baseemitter#seq()","tk::blt::vector#seq()","psych::coder#seq=()","syck::baseemitter#seq_map_shortcut()","rdoc::context::section#sequence()","openssl::ocsp::certificateid#serial()","openssl::pkcs7::recipientinfo#serial()","openssl::pkcs7::signerinfo#serial()","openssl::x509::certificate#serial()","openssl::x509::revoked#serial()","openssl::x509::certificate#serial=()","openssl::x509::revoked#serial=()","gserver#serve()","xmlrpc::cgiserver#serve()","xmlrpc::modrubyserver#serve()","xmlrpc::server#serve()","object#server()","tkwinfo::server()","tkwinfo::server()","webrick::httpstatus::server_error?()","webrick::httprequest#server_name()","tk::windde::servername()","drb::extservmanager#service()","webrick::cgi#service()","webrick::httpproxyserver#service()","webrick::httpserver#service()","webrick::httpservlet::abstractservlet#service()","webrick::httpservlet::filehandler#service()","xmlrpc::webrickservlet#service()","tk::windde::services()","openssl::ssl::sslsocket#session=()","openssl::ssl::sslcontext#session_add()","openssl::ssl::sslcontext#session_cache_mode()","openssl::ssl::sslcontext#session_cache_mode=()","openssl::ssl::sslcontext#session_cache_size()","openssl::ssl::sslcontext#session_cache_size=()","openssl::ssl::sslcontext#session_cache_stats()","openssl::ssl::sslcontext#session_remove()","openssl::ssl::sslsocket#session_reused?()","ipaddr#set()","tk::blt::cutbuffer::set()","tk::blt::tree::node#set()","tk::blt::tree::tag#set()","tk::blt::vector#set()","tk::entry#set()","tk::iwidgets::entryfield#set()","tk::iwidgets::promptdialog#set()","tk::iwidgets::spinner#set()","tk::scale#set()","tk::scrollbar#set()","tk::spinbox#set()","tk::spinbox#set()","tk::tile::tcombobox#set()","tk::tile::tcombobox#set()","tk::tile::tspinbox#set()","tk::tile::tspinbox#set()","tk::tktable#set()","tk::vu::bargraph#set()","tk::vu::dial#set()","tk::winregistry::set()","tkclipboard#set()","tkclipboard::set()","tkpalette::set()","tktextmark#set()","tktextmark#set()","ixmldomelement#setattribute()","ixmldomelement#setattributenode()","object#setcolor()","object#setcolor_helper()","object#setheight()","ixmldomnamednodemap#setnameditem()","tkpalette::setpalette()","ixmlhttprequest#setrequestheader()","microsoft_xmlhttp_1#setrequestheader()","object#setstate()","object#settheme()","object#setwidth()","rake::task#set_arg_names()","uri::ldap#set_attributes()","rdoc::markup::attrspan#set_attrs()","tk::blt::printer#set_attrs()","exception#set_backtrace()","optionparser::parseerror#set_backtrace()","multitkip#set_bgerror_handler()","multitkip#set_bgerror_handler()","multitkip#set_bgerror_handler()","multitkip#set_bgerror_handler()","tkvariable#set_bool()","tkvariable#set_bool()","tkvariable#set_bool_element()","tkvariable#set_bool_element()","tkvariable#set_bool_element_type()","tkvariable#set_bool_element_type()","tkvariable#set_bool_type()","tkvariable#set_bool_type()","dl#set_callback()","tktimer#set_callback()","tktimer#set_callback()","dl#set_callback_internal()","tk::iwidgets::canvasprintbox#set_canvas()","tk::iwidgets::canvasprintdialog#set_canvas()","multitkip#set_cb_error()","multitkip#set_cb_error()","multitkip#set_cb_error()","multitkip#set_cb_error()","object#set_cbreak()","dl#set_cdecl_callback()","webrick::utils::set_close_on_exec()","tk::tktable#set_col()","tk::bwidget::selectcolor::set_color()","tk::tcllib::khim::set_config()","net::httpheader#set_content_type()","dl::cstructentity#set_ctypes()","dl::cunionentity#set_ctypes()","rdoc::context#set_current_section()","tk::bwidget::dropsite::set_cursor()","tk::blt::dnd::set_data()","net::http#set_debug_output()","net::http#set_debug_output()","net::pop3#set_debug_output()","net::pop3#set_debug_output()","net::pop3#set_debug_output()","net::pop3#set_debug_output()","net::smtp#set_debug_output()","net::smtp#set_debug_output()","openssl::engine#set_default()","tkbgerror::set_default()","tkvariable#set_default_element_value_type()","tkvariable#set_default_element_value_type()","xmlrpc::basicserver#set_default_handler()","openssl::x509::store#set_default_paths()","tkvariable#set_default_value()","tkvariable#set_default_value()","tkvariable#set_default_value_type()","tkvariable#set_default_value_type()","knights_tour#set_delay()","zlib::deflate#set_dictionary()","zlib::inflate#set_dictionary()","uri::ldap#set_dn()","tk::bwidget::dragsite::set_drag()","tk::bwidget::dropsite::set_drop()","tkvariable#set_element_value()","tkvariable#set_element_value()","tkvariable#set_element_value_type()","tkvariable#set_element_value_type()","argf#set_encoding()","io#set_encoding()","rdoc::encoding::set_encoding()","stringio#set_encoding()","erb#set_eoutvar()","rdoc::erbio#set_eoutvar()","getoptlong#set_error()","webrick::httpresponse#set_error()","multitkip#set_eventloop_tick()","multitkip#set_eventloop_tick()","multitkip#set_eventloop_tick()","multitkip#set_eventloop_tick()","remotetkip#set_eventloop_tick()","tcltkip#set_eventloop_tick()","tcltklib::set_eventloop_tick()","tcltklib#set_eventloop_tick()","multitkip#set_eventloop_weight()","multitkip#set_eventloop_weight()","multitkip#set_eventloop_weight()","multitkip#set_eventloop_weight()","remotetkip#set_eventloop_weight()","tcltkip#set_eventloop_weight()","tcltklib#set_eventloop_weight()","tcltklib::set_eventloop_weight()","tcltklib::set_eventloop_window_mode()","uri::ldap#set_extensions()","uri::ldap#set_filter()","tk::bwidget::buttonbox#set_focus()","tk::bwidget::dialog#set_focus()","tk::bwidget::label#set_focus()","tk::menu#set_focus()","tkfont::chooser#set_for()","net::httpheader#set_form()","net::httpheader#set_form_data()","uri::generic#set_fragment()","openssl::pkey::ec::group#set_generator()","tracer::set_get_line_procs()","tkbgerror::set_handler()","clock#set_hands()","uri::mailto#set_headers()","tk::tktable#set_height()","uri::generic#set_host()","tk::bwidget::spinbox#set_index_value()","rubylex#set_input()","tkrttimer#set_interval()","tktimer#set_interval()","tktimer#set_interval()","tk::vu::dial#set_label()","tk::vu::dial#set_label_constrain()","debugger__#set_last_thread()","debugger__::context#set_last_thread()","irb::context#set_last_value()","tk::iwidgets::disjointlistbox#set_lhs()","multitkip#set_limit()","multitkip::set_limit()","multitkip#set_limit()","multitkip#set_limit()","multitkip#set_limit()","multitkip::set_limit()","multitkip::set_limit()","multitkip::set_limit()","tkvariable#set_list()","tkvariable#set_list()","tkvariable#set_list_element()","tkvariable#set_list_element()","tkvariable#set_list_element_type()","tkvariable#set_list_element_type()","tkvariable#set_list_type()","tkvariable#set_list_type()","logger::application#set_log()","tk::iwidgets::scrolledtext#set_mark()","tcltkip#set_max_block_time()","tcltklib::set_max_block_time()","tk::bwidget::mainframe#set_menustate()","object#set_msg()","tkrttimer#set_next_callback()","tktimer#set_next_callback()","tktimer#set_next_callback()","rss::element#set_next_element()","multitkip#set_no_event_wait()","multitkip#set_no_event_wait()","multitkip#set_no_event_wait()","multitkip#set_no_event_wait()","remotetkip#set_no_event_wait()","tcltkip#set_no_event_wait()","tcltklib::set_no_event_wait()","tcltklib#set_no_event_wait()","webrick::utils::set_non_blocking()","tkvariable#set_numeric()","tkvariable#set_numeric()","tkvariable#set_numeric_element()","tkvariable#set_numeric_element()","tkvariable#set_numeric_element_type()","tkvariable#set_numeric_element_type()","tkvariable#set_numeric_type()","tkvariable#set_numeric_type()","tkvariable#set_numlist()","tkvariable#set_numlist()","tkvariable#set_numlist_element()","tkvariable#set_numlist_element()","tkvariable#set_numlist_element_type()","tkvariable#set_numlist_element_type()","tkvariable#set_numlist_type()","tkvariable#set_numlist_type()","tkclipboard::set_on_display()","uri::generic#set_opaque()","tk::bwidget::dropsite::set_operation()","optionparser::parseerror#set_option()","tk::bwidget::widget::set_option()","getoptlong#set_options()","tkselection#set_owner()","tkselection::set_owner()","tkselection::set_owner()","tkselection#set_owner()","cal#set_params()","openssl::ssl::sslcontext#set_params()","xmlrpc::parserwriterchoosemixin#set_parser()","webrick::httpauth::htdigest#set_passwd()","webrick::httpauth::htpasswd#set_passwd()","webrick::httpauth::userdb#set_passwd()","uri::generic#set_password()","uri::ftp#set_path()","uri::generic#set_path()","uri::generic#set_port()","tkvariable#set_procedure()","tkvariable#set_procedure()","tkvariable#set_procedure_element()","tkvariable#set_procedure_element()","tkvariable#set_procedure_element_type()","tkvariable#set_procedure_element_type()","tkvariable#set_procedure_type()","tkvariable#set_procedure_type()","tktimer#set_procs()","tktimer#set_procs()","rubylex#set_prompt()","uri::generic#set_query()","net::httpheader#set_range()","webrick::httpresponse#set_redirect()","uri::generic#set_registry()","object::syck::emitter#set_resolver()","object::syck::parser#set_resolver()","tk::iwidgets::disjointlistbox#set_rhs()","tk::tktable#set_row()","multitkip#set_safe_level()","multitkip::set_safe_level()","multitkip::set_safe_level()","multitkip#set_safe_level()","multitkip::set_safe_level()","multitkip#set_safe_level()","multitkip#set_safe_level()","multitkip::set_safe_level()","rubyvm::instruction#set_sc()","uri::generic#set_scheme()","uri::ldap#set_scope()","readline::set_screen_size()","tk::scrollbarcomposite#set_scrollbarwidth()","xmlrpc::basicserver#set_service_hook()","rss::imagefaviconmodel::imagefavicon#set_size()","net::ftp#set_socket()","drb::drbunixsocket#set_sockopt()","tk::tktable#set_spans()","tktimer#set_start_proc()","tktimer#set_start_proc()","dl#set_stdcall_callback()","tkvariable#set_string()","tkvariable#set_string()","tkvariable#set_string_element()","tkvariable#set_string_element()","tkvariable#set_string_element_type()","tkvariable#set_string_element_type()","tkvariable#set_string_type()","tkvariable#set_string_type()","debugger__::context#set_suspend()","tkvariable#set_symbol()","tkvariable#set_symbol()","tkvariable#set_symbol_element()","tkvariable#set_symbol_element()","tkvariable#set_symbol_element_type()","tkvariable#set_symbol_element_type()","tkvariable#set_symbol_type()","tkvariable#set_symbol_type()","tk::vu::dial#set_tag()","tk::vu::dial#set_tag_constrain()","tktextframe#set_textborderwidth()","tk::tile::set_theme()","tk::tile::set_theme()","tk::tile::set_theme()","uri::mailto#set_to()","tkctag#set_to_above()","tkctag#set_to_all()","tkctag#set_to_below()","tkctag#set_to_closest()","tkctag#set_to_enclosed()","openssl::pkey::ec::point#set_to_infinity!()","tkctag#set_to_overlapping()","tkctag#set_to_withtag()","tk::tcllib::chatwidget#set_topic()","debugger__#set_trace()","debugger__::context#set_trace()","debugger__::context#set_trace_all()","kernel#set_trace_func()","thread#set_trace_func()","tkmsgcatalog::set_translation()","tkmsgcatalog#set_translation()","tkmsgcatalog#set_translation()","tkmsgcatalog::set_translation()","tkmsgcatalog::set_translation_list()","tkmsgcatalog::set_translation_list()","tkmsgcatalog#set_translation_list()","tkmsgcatalog#set_translation_list()","tkphotoimage#set_transparency()","tkphotoimage#set_transparency()","uri::ftp#set_typecode()","tk::tcllib::ctext#set_update_proc()","uri::generic#set_user()","uri::generic#set_userinfo()","object#set_valid_byte_pattern()","xmlrpc::webrickservlet#set_valid_ip()","tk::bwidget::spinbox#set_value()","tk::radiobutton#set_value()","tk::radiobutton#set_value()","tkvariable#set_value()","tkvariable#set_value()","tk::bwidget::spinbox#set_value_by_index()","tkvariable#set_value_type()","tkvariable#set_value_type()","tkvariable#set_variable()","tkvariable#set_variable()","tkvariable#set_variable_element()","tkvariable#set_variable_element()","tkvariable#set_variable_element_type()","tkvariable#set_variable_element_type()","tkvariable#set_variable_type()","tkvariable#set_variable_type()","rdoc::context#set_visibility_for()","scrolledwindow#set_widget()","scrolledwindow#set_widget()","tk::bwidget::scrolledwindow#set_widget()","tk::tcllib::widget::dialog#set_widget()","tk::tcllib::widget::panelframe#set_widget()","tk::tcllib::widget::panelframe#set_widget()","tk::tktable#set_width()","tk::winico#set_window()","tkvariable#set_window()","tkvariable#set_window()","tkvariable#set_window_element()","tkvariable#set_window_element()","tkvariable#set_window_element_type()","tkvariable#set_window_element_type()","tkvariable#set_window_type()","tkvariable#set_window_type()","xmlrpc::parserwriterchoosemixin#set_writer()","tk::tcllib::plotchart::set_zoom_pan()","tk::tcllib::plotchart::chartmethod#set_zoom_pan()","net::imap#setacl()","string#setbyte()","process::sys::setegid()","process::sys::seteuid()","process::sys::setgid()","file::setgid?()","file::stat#setgid?()","filetest#setgid?()","pathname#setgid?()","etc::setgrent()","tk::bwidget::dynamichelp::sethelp()","process::setpgid()","process::setpgrp()","object#setpiece()","curses::setpos()","curses::window#setpos()","process::setpriority()","win32ole#setproperty()","etc::setpwent()","net::imap#setquota()","process::sys::setregid()","process::sys::setresgid()","process::sys::setresuid()","process::sys::setreuid()","process::sys::setrgid()","process::setrlimit()","process::sys::setruid()","curses::setscrreg()","curses::window#setscrreg()","tktree#setselection()","process::setsid()","basicsocket#setsockopt()","rss::baselistener#setter()","process::sys::setuid()","file::setuid?()","file::stat#setuid?()","filetest#setuid?()","pathname#setuid?()","irb::setup()","object#setup()","openssl::ssl::sslcontext#setup()","rdoc::rubygemshook#setup()","drb::drbsslsocket::sslconfig#setup_certificate()","object#setup_for_macosx_framework()","rdoc::options#setup_generator()","webrick::httpresponse#setup_header()","rss::atom::entry#setup_maker()","rss::rdf::seq#setup_maker()","rss::rdf::seq#setup_maker()","rss::rootelementmixin#setup_maker()","rss::setupmaker#setup_maker()","rss::xmlstylesheet#setup_maker()","rss::rss#setup_maker_elements()","rdoc::rdoc#setup_output_dir()","rdoc::ri::driver#setup_pager()","webrick::accesslog#setup_params()","gem::docmanager#setup_rdoc()","drb::drbsslsocket::sslconfig#setup_ssl_context()","webrick::genericserver#setup_ssl_context()","drb::http0::server#setup_webrick()","scrolledwindow#setwidget()","scrolledwindow#setwidget()","ripper::sexp()","ripper::sexp_raw()","shell::processcontroller#sfork()","fileutils#sh()","tk::tcllib::widget::ruler#shade()","tk::tkdnd::shape#shape_bounds()","tk::tkdnd::shape#shape_get()","tk::tkdnd::shape#shape_offset()","tk::tkdnd::shape#shape_set()","tk::tkdnd::shape#shape_update()","multitkip#share_stderr()","multitkip#share_stderr()","multitkip::share_stderr()","multitkip#share_stderr()","multitkip::share_stderr()","multitkip::share_stderr()","multitkip::share_stderr()","multitkip#share_stderr()","multitkip#share_stdin()","multitkip#share_stdin()","multitkip::share_stdin()","multitkip#share_stdin()","multitkip::share_stdin()","multitkip::share_stdin()","multitkip::share_stdin()","multitkip#share_stdin()","multitkip::share_stdio()","multitkip::share_stdio()","multitkip#share_stdio()","multitkip#share_stdio()","multitkip::share_stdio()","multitkip#share_stdio()","multitkip::share_stdio()","multitkip#share_stdio()","multitkip::share_stdout()","multitkip::share_stdout()","multitkip#share_stdout()","multitkip#share_stdout()","multitkip#share_stdout()","multitkip::share_stdout()","multitkip#share_stdout()","multitkip::share_stdout()","gem::installer#shebang()","shellwords::shellescape()","string#shellescape()","array#shelljoin()","shellwords::shelljoin()","shellwords::shellsplit()","string#shellsplit()","shellwords::shellwords()","tk::blt::busy::shield_path()","tk::blt::busy::shield::shield_path()","array#shift()","csv#shift()","dbm#shift()","env::shift()","gdbm#shift()","hash#shift()","queue#shift()","sdbm#shift()","sizedqueue#shift()","yaml::dbm#shift()","string#shorten()","object#shortest_abbreviation()","tk::blt::treeview#show()","tk::blt::treeview::tagorid_methods#show()","tk::iwidgets::buttonbox#show()","tk::iwidgets::calendar#show()","tk::iwidgets::datefield#show()","tk::iwidgets::dialogshell#show()","tk::iwidgets::panedwindow#show()","tk::iwidgets::promptdialog#show()","tk::iwidgets::spindate#show()","tk::iwidgets::spintime#show()","tk::iwidgets::timefield#show()","tk::iwidgets::watch#show()","tk::rbwidget::balloonhelp#show()","tk::tcllib::getstring_dialog#show()","tk::tcllib::getstring_dialog::show()","tk::tcllib::ico::show()","tk::tcllib::swaplist_dialog#show()","tk::tcllib::swaplist_dialog::show()","tk::tcllib::widget::dialog#show()","tk::tcllib::widget::screenruler#show()","tk::tcllib::widget::screenruler#show()","tk::tile::dialog::show()","tk::tile::dialog#show()","tkbgerror::show()","tkconsole::show()","tkdialog::show()","tkdialogobj::show()","tkdialogobj::show()","tkdialogobj#show()","tkdialogobj#show()","tkfont::chooser#show()","tkwarning::show()","tkwarningobj#show()","tkwarningobj#show()","object#showhelp()","tk::tcllib::khim::showhelp()","object#showmessagebox()","object#showmessagebox2()","pendulumanimationdemo#showpendulum()","pendulumanimationdemo#showphase()","tkimg_demo#show_animated_gif()","tkgoldberg_demo#show_ctrl()","tkmulticolumnlist#show_each_hscr()","tkmultilistframe#show_each_hscr()","gem::command#show_help()","tkimg_demo#show_image()","gem::command#show_lookup_failure()","object#show_loupe()","object#show_message()","tktextio#show_mode()","tktextio#show_mode=()","tk::tcllib::chatwidget#show_names()","tk::iwidgets::calendar#show_now()","tk::iwidgets::datefield#show_now()","tk::iwidgets::spindate#show_now()","tk::iwidgets::spintime#show_now()","tk::iwidgets::timefield#show_now()","tk::iwidgets::watch#show_now()","gem::commands::ownercommand#show_owners()","gem::server#show_rdoc_for_pattern()","benchmarkdriver#show_results()","tk::bwidget::mainframe#show_statusbar()","tk::iwidgets::tabnotebook#show_tab()","tk::iwidgets::tabset#show_tab()","tk::bwidget::mainframe#show_toolbar()","tk::iwidgets::hyperhelp#show_topic()","tk::tcllib::chatwidget#show_topic()","optionparser#show_version()","tkmulticolumnlist#show_win_hscr()","tkmultilistframe#show_win_hscr()","array#shuffle()","array#shuffle!()","basicsocket#shutdown()","gserver#shutdown()","webrick::genericserver#shutdown()","xmlrpc::server#shutdown()","process::gid::sid_available?()","process::uid::sid_available?()","object#sieve()","bigdecimal#sign()","gem::security::signer#sign()","openssl::netscape::spki#sign()","openssl::ocsp::basicresponse#sign()","openssl::ocsp::request#sign()","openssl::pkcs7::sign()","openssl::pkey::pkey#sign()","openssl::x509::crl#sign()","openssl::x509::certificate#sign()","openssl::x509::request#sign()","gem::security::sign_cert()","gem::gemcutterutilities#sign_in()","conditionvariable#signal()","monitormixin::conditionvariable#signal()","rinda::waittemplateentry#signal()","tk::tclx::signal()","irb::irb#signal_handle()","tk::tclx::signal_restart()","irb::irb#signal_status()","process::status#signaled?()","openssl::x509::crl#signature_algorithm()","openssl::x509::certificate#signature_algorithm()","openssl::x509::request#signature_algorithm()","openssl::pkcs7::signerinfo#signed_time()","dl::valueutil#signed_value()","openssl::pkcs7#signers()","signalexception#signo()","syck::baseemitter#simple()","tkcomm::simplelist()","bigmath#sin()","cmath::sin()","math::sin()","cmath::sin!()","tkgoldberg_demo#sine()","syck::baseemitter#single()","rexml::validation::event#single?()","singleforwardable#single_delegate()","prettyprint::singleline_format()","pp::singleline_pp()","object#singleton_class()","numeric#singleton_method_added()","object#singleton_methods()","matrix#singular?()","matrix::lupdecomposition#singular?()","cmath::sinh()","math::sinh()","cmath::sinh!()","net::ftp#site()","array#size()","bignum#size()","dbm#size()","dl::cptr#size()","dl::cptr#size()","dl::cstructentity::size()","dl::cunionentity::size()","dl::packer#size()","dl::stack#size()","digest::instance#size()","env::size()","file::size()","file#size()","file::stat#size()","filetest#size()","fixnum#size()","gdbm#size()","gem::sourceindex#size()","gem::sourceindex#size()","hash#size()","irb::history#size()","matchdata#size()","net::ftp#size()","pathname#size()","queue#size()","rexml::light::node#size()","rexml::parent#size()","rexml::syncenumerator#size()","rinda::tuple#size()","rinda::tupleentry#size()","rubyvm::instructionsloader#size()","sdbm#size()","set#size()","string#size()","stringio#size()","struct#size()","symbol#size()","tempfile#size()","tk::blt::tabset#size()","tk::blt::tree::node#size()","tk::iwidgets::combobox#size()","tk::iwidgets::scrolledlistbox#size()","tk::iwidgets::selectionbox#size()","tk::iwidgets::selectiondialog#size()","tk::listbox#size()","tk::tcllib::tkpiechart::slice#size()","tkgrid::size()","tkgrid::size()","tkvariable#size()","tkvariable#size()","vector#size()","dl::cptr#size=()","dl::cptr#size=()","rss::imagefaviconmodel::imagefavicon#size=()","file::size?()","file::stat#size?()","filetest#size?()","pathname#size?()","win32ole_method#size_opt_params()","win32ole_method#size_params()","tk::wm#sizefrom()","tk::wm::sizefrom()","dl::importer#sizeof()","tk::html_widget#sizewindow()","argf#skip()","rdoc::markup::parser#skip()","stringscanner#skip()","tktimer#skip()","tktimer#skip()","csv#skip_blanks?()","gem::deprecate::skip_during()","rdoc::parser::ruby#skip_for_variable()","rdoc::parser::ruby#skip_method()","rdoc::parser::ruby#skip_optional_do_after_expression()","rdoc::parser::rubytools#skip_tkspace()","rdoc::parser::ruby#skip_tkspace_comment()","stringscanner#skip_until()","tk::tcllib::diagrams#slanted()","multitkip#slave?()","multitkip#slave?()","multitkip::slave?()","multitkip::slave?()","multitkip::slave?()","multitkip#slave?()","multitkip#slave?()","multitkip::slave?()","tcltkip#slave_of?()","multitkip::slaves()","multitkip::slaves()","multitkip#slaves()","multitkip::slaves()","multitkip#slaves()","multitkip::slaves()","multitkip#slaves()","multitkip#slaves()","tkgrid::slaves()","tkgrid::slaves()","tkpack::slaves()","tkpack::slaves()","tkplace::slaves()","tkplace::slaves()","kernel#sleep()","mutex#sleep()","mutex_m#sleep()","array#slice()","ripper::slice()","string#slice()","symbol#slice()","array#slice!()","string#slice!()","tkcomm::slice_ary()","enumerable#slice_before()","tk::blt::barchart#snap()","tk::blt::graph#snap()","tk::blt::printer#snap()","tk::blt::stripchart#snap()","tk::blt::winop#snap()","tk::blt::winop#snap()","socket::sockaddr_in()","socket::sockaddr_un()","file::socket?()","file::stat#socket?()","filetest#socket?()","pathname#socket?()","socket::socketpair()","unixsocket::socketpair()","addrinfo#socktype()","matrix::lupdecomposition#solve()","object#some_function()","array#sort()","enumerable#sort()","net::imap#sort()","tk::blt::tree::node#sort()","tk::blt::vector#sort()","tk::iwidgets::combobox#sort()","tk::iwidgets::optionmenu#sort()","tk::iwidgets::scrolledlistbox#sort()","array#sort!()","tk::iwidgets::combobox#sort_ascending()","tk::iwidgets::optionmenu#sort_ascending()","tk::iwidgets::scrolledlistbox#sort_ascending()","tk::blt::treeview#sort_auto()","tk::blt::treeview#sort_auto=()","tk::blt::treeview#sort_auto?()","enumerable#sort_by()","object#sort_by()","array#sort_by!()","object#sort_by_freq()","tk::blt::treeview::configmethod#sort_cget()","tk::blt::treeview::configmethod#sort_cget_strict()","tk::blt::treeview::configmethod#sort_cget_tkstring()","tk::blt::treeview::configmethod#sort_configinfo()","tk::blt::treeview::configmethod#sort_configure()","tk::iwidgets::combobox#sort_descending()","tk::iwidgets::optionmenu#sort_descending()","tk::iwidgets::scrolledlistbox#sort_descending()","gem::specification#sort_obj()","tk::blt::treeview#sort_once()","tk::blt::treeview::tagorid_methods#sort_once()","tk::blt::treeview#sort_once_recurse()","tk::blt::treeview::tagorid_methods#sort_once_recurse()","tk::blt::vector#sort_reverse()","json::ext::parser#source()","rexml::parsers::sax2parser#source()","rake::task#source()","regexp#source()","tk::blt::bitmap#source()","tk::blt::bitmap::source()","tk::blt::dragdrop::source()","tk::html_widget#source()","tk::blt::dragdrop#source_configinfo()","tk::blt::dragdrop#source_configure()","encoding::converter#source_encoding()","encoding::invalidbytesequenceerror#source_encoding()","encoding::undefinedconversionerror#source_encoding()","encoding::invalidbytesequenceerror#source_encoding_name()","encoding::undefinedconversionerror#source_encoding_name()","irb::irbloader#source_file()","tk::blt::dragdrop::source_handler()","tk::blt::dragdrop::source_handler_info()","tk::blt::dragdrop::source_handler_list()","gem::source_index()","method#source_location()","proc#source_location()","unboundmethod#source_location()","tk::menuclone#source_menu()","tk::menuclone#source_menu()","tk::blt::dnd::source_names()","win32ole_type#source_ole_types()","gem::sources()","rake::task#sources()","gem::sources=()","rubyvm::instruction#sp_increase_c_expr()","json::ext::generator::state#space()","json::ext::generator::state#space=()","json::ext::generator::state#space_before()","json::ext::generator::state#space_before=()","tk::tktable#span()","tk::tktable#span_list()","tk::tktable#spans()","tkgoldberg_demo#sparkle()","dhasen#sparse()","kernel#spawn()","pty::spawn()","process::spawn()","gem::installer#spec()","gem::specification#spec_dir()","gem::specification#spec_file()","gem::specification#spec_name()","gem::commands::lockcommand#spec_path()","gem::dependencylist#spec_predecessors()","gem::dependency#specific?()","gem::requirement#specific?()","gem::requirement#specific?()","tk::toplevel#specific_class()","gem::command::specific_extra_args()","gem::command::specific_extra_args_hash()","gem::sourceindex#specification()","gem::sourceindex#specification()","ixmldomattribute#specified()","ixmldomcdatasection#specified()","ixmldomcharacterdata#specified()","ixmldomcomment#specified()","ixmldomdocument#specified()","ixmldomdocumentfragment#specified()","ixmldomdocumenttype#specified()","ixmldomelement#specified()","ixmldomentity#specified()","ixmldomentityreference#specified()","ixmldomnode#specified()","ixmldomnotation#specified()","ixmldomprocessinginstruction#specified()","ixmldomtext#specified()","ixtlruntime#specified()","microsoft_freethreadedxmldom_1_0#specified()","microsoft_xmldom_1_0#specified()","gem::server#specs()","version#spermy_recommendation()","spinner_demo#spin_month()","tk::spinbox#spindown()","tk::spinbox#spindown()","tk::spinbox#spinup()","tk::spinbox#spinup()","bigdecimal#split()","file::split()","pathname#split()","shellwords::split()","string#split()","tk::blt::table#split()","tk::blt::vector#split()","uri::split()","uri::parser#split()","ixmldomcdatasection#splittext()","ixmldomtext#splittext()","fileutils#split_all()","sys#split_all()","webrick::httputils::split_header_value()","rdoc::markup::attributemanager#split_into_flow()","kernel#sprintf()","bigdecimal#sqrt()","bigmath#sqrt()","cmath::sqrt()","math::sqrt()","cmath::sqrt!()","matrix#square?()","string#squeeze()","string#squeeze!()","kernel#srand()","random::srand()","ixmldomparseerror#srctext()","win32ole_type#src_type()","net::smtp#ssl?()","net::smtp#ssl?()","webrick::httprequest#ssl?()","gem#ssl_available?()","webrick::genericserver#ssl_context()","net::pop3::ssl_params()","net::pop3::ssl_params()","net::pop3::ssl_params()","net::pop3::ssl_params()","openssl::ssl::sslcontext#ssl_version=()","cal#stack()","tk::wm::stackorder()","tk::wm#stackorder()","tk::wm#stackorder_is_above()","tk::wm::stackorder_is_above()","tk::wm#stackorder_is_below()","tk::wm::stackorder_is_below()","tk::wm::stackorder_isabove()","tk::wm#stackorder_isabove()","tk::wm::stackorder_isbelow()","tk::wm#stackorder_isbelow()","rexml::document#stand_alone?()","rake::application#standard_exception_handling()","rake::application#standard_exception_handling()","rake::application#standard_rake_options()","rake::application#standard_rake_options()","curses::standend()","curses::window#standend()","curses::standout()","curses::window#standout()","animatedtextlabel#start()","coverage::start()","date#start()","gc::start()","gserver#start()","irb::start()","logger::application#start()","net::http::start()","net::http#start()","net::http::start()","net::http#start()","net::pop3::start()","net::pop3#start()","net::pop3#start()","net::pop3::start()","net::pop3#start()","net::pop3#start()","net::pop3::start()","net::pop3::start()","net::smtp::start()","net::smtp::start()","net::smtp#start()","net::smtp#start()","psych::streaming#start()","psych::visitors::yamltree#start()","shell::systemcommand#start()","thread::start()","tk::tile::tprogressbar#start()","tk::tile::tprogressbar#start()","tkgoldberg_demo#start()","tkkinput::start()","tkrttimer#start()","tktimer#start()","tktimer::start()","tktimer::start()","tktimer#start()","webrick::cgi#start()","webrick::daemon::start()","webrick::genericserver#start()","webrick::simpleserver::start()","rss::rexmllikexmlparser#startelement()","xmlrpc::xmlparser::streamparsermixin#startelement()","rdoc::markup::toansi#start_accepting()","rdoc::markup::tohtml#start_accepting()","rdoc::markup::tordoc#start_accepting()","rdoc::markup::tottonly#start_accepting()","rdoc::tokenstream#start_collecting_tokens()","curses::start_color()","rdoc::codeobject#start_doc()","psych::emitter#start_document()","psych::handler#start_document()","psych::treebuilder#start_document()","rexml::sax2listener#start_document()","rexml::sax2listener#start_element()","rexml::parsers::pullevent#start_element?()","shell::systemcommand#start_export()","shell::systemcommand#start_import()","shell::processcontroller#start_job()","psych::emitter#start_mapping()","psych::handler#start_mapping()","rexml::sax2listener#start_prefix_mapping()","profiler__#start_profile()","object#start_random()","psych::emitter#start_sequence()","psych::handler#start_sequence()","drb::start_service()","psych::emitter#start_stream()","psych::handler#start_stream()","psych::treebuilder#start_stream()","string#start_with?()","net::http#started?()","net::http#started?()","net::pop3#started?()","net::pop3#started?()","net::pop3#started?()","net::pop3#started?()","net::smtp#started?()","net::smtp#started?()","gserver#starting()","rexml::functions::starts_with()","net::imap#starttls()","net::smtp#starttls()","net::smtp#starttls()","net::smtp#starttls?()","net::smtp#starttls?()","net::smtp#starttls_always?()","net::smtp#starttls_always?()","net::smtp#starttls_auto?()","net::smtp#starttls_auto?()","file::stat()","gc::stat()","io#stat()","object#stat()","pathname#stat()","rubyvm::vpath#stat()","tktextio#stat()","openssl::ssl::sslsocket#state()","tk::wm#state()","tk::wm::state()","object#statemonitor()","ixmlhttprequest#status()","microsoft_xmlhttp_1#status()","net::ftp#status()","net::imap#status()","openssl::ocsp::basicresponse#status()","openssl::ocsp::response#status()","pty::childexited#status()","systemexit#status()","thread#status()","tk::blt::busy#status()","tk::busy#status()","tk::tcllib::getstring_dialog#status()","tk::tcllib::swaplist_dialog#status()","webrick::httpresponse#status=()","ixmlhttprequest#statustext()","microsoft_xmlhttp_1#statustext()","webrick::httpresponse#status_line()","openssl::ocsp::response#status_string()","net::smtp::response#status_type_char()","tk::html_widget::stdchan()","debugger__#stdout()","debugger__::context#stdout()","debugger__#stdout=()","curses::stdscr()","date#step()","numeric#step()","range#step()","tk::iwidgets::feedback#step()","tk::tile::tprogressbar#step()","tk::tile::tprogressbar#step()","file::sticky?()","file::stat#sticky?()","filetest#sticky?()","pathname#sticky?()","animatedtextlabel#stop()","animatedwavedemo#stop()","gserver::stop()","gserver#stop()","thread::stop()","tk::iwidgets::canvasprintbox#stop()","tk::tile::tprogressbar#stop()","tk::tile::tprogressbar#stop()","tkrttimer#stop()","tktimer#stop()","tktimer#stop()","webrick::genericserver#stop()","thread#stop?()","rdoc::codeobject#stop_doc()","object#stop_msg_loop()","debugger__::context#stop_next()","profiler__#stop_profile()","drb::stop_service()","drb::drbserver#stop_service()","drb::extserv#stop_service()","gserver#stopped?()","process::status#stopped?()","rake::pseudostatus#stopped?()","gserver#stopping()","process::status#stopsig()","net::ftp#storbinary()","dbm#store()","env::store()","gdbm#store()","hash#store()","net::imap#store()","sdbm#store()","tk::optionobj#store()","yaml::dbm#store()","net::ftp#storlines()","actionmap#str_name()","drb::drbsslsocket#stream()","drb::drbtcpsocket#stream()","rexml::parsers::baseparser#stream=()","zlib::zstream#stream_end?()","psych::handler#streaming?()","gc::stress()","gc::stress=()","date#strftime()","datetime#strftime()","time#strftime()","base64#strict_decode64()","base64#strict_encode64()","matchdata#string()","rexml::functions::string()","ripper::tokenpattern::matchdata#string()","stringio#string()","stringscanner#string()","tkutil::string()","tkutil#string()","tkvariable#string()","tkvariable#string()","stringio#string=()","stringscanner#string=()","tkvariable#string=()","tkvariable#string=()","tkvariable#string_element()","tkvariable#string_element()","rexml::functions::string_length()","tkvariable#string_type=()","tkvariable#string_type=()","rexml::functions::string_value()","commentstripper::strip()","string#strip()","string#strip!()","rdoc::text#strip_hashes()","object#strip_locations()","rdoc::text#strip_newlines()","rdoc::text#strip_stars()","tsort#strongly_connected_components()","date::strptime()","datetime::strptime()","time#strptime()","dl::importer#struct()","xmlrpc::convert::struct()","tk::tile::style()","tk::tile::style()","tk::tile::style()","tk::tile::dialog::style()","tk::tile::sizegrip::style()","tk::tile::sizegrip::style()","tk::tile::tbutton::style()","tk::tile::tbutton::style()","tk::tile::tcheckbutton::style()","tk::tile::tcheckbutton::style()","tk::tile::tcheckbutton::style()","tk::tile::tcheckbutton::style()","tk::tile::tcombobox::style()","tk::tile::tcombobox::style()","tk::tile::tentry::style()","tk::tile::tentry::style()","tk::tile::tframe::style()","tk::tile::tframe::style()","tk::tile::tlabel::style()","tk::tile::tlabel::style()","tk::tile::tlabelframe::style()","tk::tile::tlabelframe::style()","tk::tile::tlabelframe::style()","tk::tile::tlabelframe::style()","tk::tile::tmenubutton::style()","tk::tile::tmenubutton::style()","tk::tile::tmenubutton::style()","tk::tile::tmenubutton::style()","tk::tile::tnotebook::style()","tk::tile::tnotebook::style()","tk::tile::tpaned::style()","tk::tile::tprogressbar::style()","tk::tile::tprogressbar::style()","tk::tile::tradiobutton::style()","tk::tile::tradiobutton::style()","tk::tile::tradiobutton::style()","tk::tile::tradiobutton::style()","tk::tile::tscale::style()","tk::tile::tscale::style()","tk::tile::tscrollbar::style()","tk::tile::tscrollbar::style()","tk::tile::tseparator::style()","tk::tile::tseparator::style()","tk::tile::tspinbox::style()","tk::tile::tspinbox::style()","tk::tile::tsquare::style()","tk::tile::tsquare::style()","object::syck::map#style=()","object::syck::scalar#style=()","object::syck::seq#style=()","tk::treectrl::configmethod#style_cget()","tk::treectrl::configmethod#style_cget_strict()","tk::treectrl::configmethod#style_cget_tkstring()","tk::treectrl::configmethod#style_configinfo()","tk::treectrl::configmethod#style_configure()","webrick::utils::su()","bigdecimal#sub()","kernel#sub()","pathname#sub()","string#sub()","string#sub!()","tk::bwidget::widget::sub_cget()","tk::bwidget::widget::sub_cget_strict()","pathname#sub_ext()","net::httpheader#sub_type()","object#subdir_check()","resolv::dns::name#subdomain_of?()","openssl::x509::certificate#subject()","openssl::x509::request#subject()","openssl::x509::certificate#subject=()","openssl::x509::request#subject=()","openssl::x509::extensionfactory#subject_certificate=()","openssl::x509::extensionfactory#subject_request=()","cgi::htmlextension#submit()","tk::blt::winop#subsample()","tk::blt::winop#subsample()","net::imap#subscribe()","time#subsec()","set#subset?()","tkcomm#subst()","tkutil::callbacksubst::subst_arg()","tk::encodedstring::subst_tk_backslash()","tk::encodedstring::subst_utf_backslash()","rexml::functions::substring()","ixmldomcdatasection#substringdata()","ixmldomcharacterdata#substringdata()","ixmldomcomment#substringdata()","ixmldomtext#substringdata()","rexml::functions::substring_after()","rexml::functions::substring_before()","set#subtract()","curses::window#subwin()","date#succ()","fixnum#succ()","ipaddr#succ()","integer#succ()","integer#succ()","jisx0208::char#succ()","myelem#succ()","prime::eratosthenesgenerator#succ()","prime::generator23#succ()","prime::oldcompatibility#succ()","prime::pseudoprimegenerator#succ()","prime::trialdivisiongenerator#succ()","string#succ()","symbol#succ()","time#succ()","string#succ!()","myelem#succ=()","gem::builder#success()","iconv::failure#success()","net::smtp::response#success?()","process::status#success?()","systemexit#success?()","webrick::httpstatus::success?()","gem::suffix_pattern()","gem::suffixes()","gem::specfetcher#suggest_gems_from_name()","rexml::functions::sum()","string#sum()","optionparser#summarize()","optionparser::list#summarize()","optionparser::switch#summarize()","rdoc::stats#summary()","tk::tcllib::plotchart::ganttchart#summary()","gem::specification#summary=()","date#sunday?()","time#sunday?()","shell::systemcommand#super_each()","class#superclass()","rdoc::classmodule#superclass()","rdoc::normalmodule#superclass()","rdoc::classmodule#superclass=()","set#superset?()","rss::maker#supported?()","debugger__#suspend()","debugger__::context#suspend_all()","irb::irb#suspend_context()","irb::irb#suspend_input_method()","irb::irb#suspend_name()","irb::irb#suspend_workspace()","string#swapcase()","symbol#swapcase()","string#swapcase!()","irb::jobmanager#switch()","process::gid::switch()","process::uid::switch()","optionparser::switch#switch_name()","object#syck_to_yaml()","dl::compositehandler#sym()","dl::handle::sym()","dl::handle#sym()","tkvariable#symbol()","tkvariable#symbol()","tkvariable#symbol=()","tkvariable#symbol=()","tkvariable#symbol_element()","tkvariable#symbol_element()","tkvariable#symbol_type=()","tkvariable#symbol_type=()","file::symlink()","fileutils::symlink()","sys#symlink()","file::symlink?()","file::stat#symlink?()","filetest#symlink?()","pathname#symlink?()","rake::ftpfile#symlink?()","sys#symlink_files()","matrix#symmetric?()","gdbm#sync()","io#sync()","stringio#sync()","tktextio#sync()","zlib::gzipfile#sync()","zlib::inflate#sync()","io#sync=()","stringio#sync=()","tktextio#sync=()","zlib::gzipfile#sync=()","sync_m#sync_exclusive?()","sync_m#sync_exclusive?()","sync_m#sync_extend()","sync_m#sync_extend()","sync_m#sync_inspect()","sync_m#sync_inspect()","sync_m#sync_lock()","sync_m#sync_lock()","sync_m#sync_locked?()","sync_m#sync_locked?()","tk::bwidget::widget::sync_options()","zlib::inflate#sync_point?()","sync_m#sync_shared?()","sync_m#sync_shared?()","sync_m#sync_synchronize()","sync_m#sync_synchronize()","sync_m#sync_try_lock()","sync_m#sync_try_lock()","sync_m#sync_unlock()","sync_m#sync_unlock()","monitormixin#synchronize()","mutex#synchronize()","gdbm#syncmode=()","rake::taskmanager#synthesize_file_task()","socket#sysaccept()","tcpserver#sysaccept()","unixserver#sysaccept()","kernel#syscall()","openssl::ssl::sslsocket#sysclose()","etc::sysconfdir()","io::sysopen()","pathname#sysopen()","object#sysquote()","io#sysread()","io::readable#sysread()","object#sysread()","openssl::ssl::sslsocket#sysread()","tktextio#sysread()","io#sysseek()","tktextio#sysseek()","openssl::pkey::dsa#syssign()","kernel#system()","net::ftp#system()","rexml::doctype#system()","rake::altsystem#system()","shell::commandprocessor#system()","ixmldomentity#systemid()","ixmldomnotation#systemid()","rake::application#system_dir()","rake::application#system_dir()","shell#system_path=()","etc::systmpdir()","openssl::pkey::dsa#sysverify()","io#syswrite()","openssl::ssl::sslsocket#syswrite()","tktextio#syswrite()","matrix#t()","tk::blt::tabset#tab_dockall()","tk::blt::tabset#tab_ids()","tk::blt::tabset#tab_names()","tk::blt::tabset#tab_objs()","tk::blt::tabset#tab_pageheight()","tk::blt::tabset#tab_pagewidth()","tk::blt::tabset#tab_tearoff()","tk::blt::tabset#tabbind()","tk::bwidget::notebook#tabbind()","tk::blt::tabset#tabbind_append()","tk::bwidget::notebook#tabbind_append()","tk::blt::tabset#tabbind_remove()","tk::bwidget::notebook#tabbind_remove()","tk::blt::tabset#tabbindinfo()","tk::bwidget::notebook#tabbindinfo()","tk::tile::tnotebook#tabcget()","tk::tile::tnotebook#tabcget()","tk::tile::tnotebook#tabcget_strict()","tk::tile::tnotebook#tabcget_strict()","tk::tile::tnotebook#tabcget_tkstring()","tk::tile::tnotebook#tabcget_tkstring()","csv::table()","multitkip::table()","multitkip::table()","multitkip::table()","multitkip::table()","object#table_validate()","tk::tile::tnotebook#tabs()","tk::tile::tnotebook#tabs()","object#tag()","tk::tcllib::tkpiechart::pie#tag()","tk::tcllib::tkpiechart::slice#tag()","xmlrpc::xmlwriter::abstract#tag()","ixmldomelement#tagname()","tk::blt::treeview#tag_add()","tk::blt::treeview#tag_bind()","tk::blt::treeview#tag_bind_append()","tk::blt::treeview#tag_bind_remove()","tk::blt::treeview#tag_bindinfo()","tk::tktable#tag_cell()","tk::tile::treeviewconfig#tag_cget()","tk::tktable::configmethod#tag_cget()","tktexttagconfig#tag_cget()","tk::tile::treeviewconfig#tag_cget_strict()","tk::tktable::configmethod#tag_cget_strict()","tktexttagconfig#tag_cget_strict()","tk::tile::treeviewconfig#tag_cget_tkstring()","tk::tktable::configmethod#tag_cget_tkstring()","tktexttagconfig#tag_cget_tkstring()","syck::tag_class()","syck::tag_class()","tk::tktable#tag_col()","tk::tktable#tag_col_reset()","tk::tile::treeviewconfig#tag_configinfo()","tk::tktable::configmethod#tag_configinfo()","tktexttagconfig#tag_configinfo()","tk::tile::treeviewconfig#tag_configure()","tk::tktable::configmethod#tag_configure()","tktexttagconfig#tag_configure()","tk::blt::treeview#tag_delete()","tk::tktable#tag_delete()","rexml::streamlistener#tag_end()","rss::listenermixin#tag_end()","tk::tktable#tag_exist?()","tk::blt::treeview#tag_focus()","tk::blt::treeview#tag_forget()","tk::tktable#tag_include?()","tk::tcllib::tkpiechart::pie#tag_key()","tk::tcllib::tkpiechart::slice#tag_key()","tk::tktable#tag_lower()","rss::element#tag_name()","tk::blt::treeview#tag_names()","tk::tktable#tag_names()","tk::blt::treeview#tag_nodes()","tk::tktable#tag_raise()","tk::tktable#tag_reset()","tk::tktable#tag_row()","tk::tktable#tag_row_reset()","rexml::streamlistener#tag_start()","rss::listenermixin#tag_start()","syck::domaintype::tag_subclasses?()","syck::object::tag_subclasses?()","syck::privatetype::tag_subclasses?()","tk::tile::treeviewconfig#tagcget()","tk::tile::treeviewconfig#tagcget_strict()","tk::tile::treeviewconfig#tagcget_tkstring()","tk::tile::treeviewconfig#tagconfiginfo()","tk::tile::treeviewconfig#tagconfigure()","tktreatitemfont#tagfont_configinfo()","tktreatitemfont#tagfont_configure()","tktreatitemfont#tagfont_copy()","tktreatitemfont#tagfontobj()","syck::tagged_classes()","syck::tagged_classes()","tk::blt::plotcomponent#tagid()","tk::blt::table#tagid()","tk::blt::tabset#tagid()","tk::bwidget::buttonbox#tagid()","tk::bwidget::dialog#tagid()","tk::bwidget::listbox#tagid()","tk::bwidget::notebook#tagid()","tk::bwidget::pagesmanager#tagid()","tk::bwidget::tree#tagid()","tk::iwidgets::buttonbox#tagid()","tk::iwidgets::checkbox#tagid()","tk::iwidgets::dialogshell#tagid()","tk::iwidgets::menubar#tagid()","tk::iwidgets::messagebox#tagid()","tk::iwidgets::notebook#tagid()","tk::iwidgets::panedwindow#tagid()","tk::iwidgets::radiobox#tagid()","tk::iwidgets::tabnotebook#tagid()","tk::iwidgets::tabset#tagid()","tk::iwidgets::toolbar#tagid()","tk::listbox#tagid()","tk::menu#tagid()","tk::tktable#tagid()","tk::treectrl::configmethod#tagid()","tk::blt::table#tagid2obj()","tk::blt::treeview#tagid2obj()","tk::tktable#tagid2obj()","tk::blt::tabset#tagindex()","object::syck::resolver#tagurize()","psych::tagurize()","syck::tagurize()","syck::tagurize()","delegator#taint()","object#taint()","pathname#taint()","object#tainted?()","object#tak()","array#take()","enumerable#take()","rinda::tuplespace#take()","rinda::tuplespaceproxy#take()","tuplespace#take()","array#take_while()","enumerable#take_while()","cmath::tan()","math::tan()","cmath::tan!()","cmath::tanh()","math::tanh()","cmath::tanh!()","object#tap()","rake::packagetask#tar_bz2_file()","rake::packagetask#tar_gz_file()","object#tarai()","ixmldomprocessinginstruction#target()","tk::blt::dragdrop::target()","tk::blt::dragdrop::target_handler()","tk::blt::dragdrop::target_handler_list()","tk::blt::dnd::target_names()","tk::tcllib::plotchart::ganttchart#task()","rake::task#task_defined?()","tk::winico#taskbar_add()","tk::winico#taskbar_delete()","tk::winico#taskbar_modify()","rake::namespace#tasks()","rake::task#tasks()","rake::taskmanager#tasks()","rake::taskmanager#tasks_in_scope()","tk::tcllib::ntext#tcl_match_endofword()","tk::tcllib::ntext#tcl_match_endofword=()","tk::tcllib::ntext#tcl_match_startofnextword()","tk::tcllib::ntext#tcl_match_startofnextword=()","tk::tcllib::ntext#tcl_match_startofpreviousword()","tk::tcllib::ntext#tcl_match_startofpreviousword=()","tk::tcllib::ntext#tcl_match_wordbreakafter()","tk::tcllib::ntext#tcl_match_wordbreakafter=()","tk::tcllib::ntext#tcl_match_wordbreakbefore()","tk::tcllib::ntext#tcl_match_wordbreakbefore=()","addrinfo::tcp()","socket::tcp_server_loop()","socket::tcp_server_sockets()","tk::blt::tabset::tab#tearoff()","tk::menu#tearoffcommand()","shell::commandprocessor#tee()","argf#tell()","dir#tell()","io#tell()","stringio#tell()","tktextio#tell()","zlib::gzipreader#tell()","zlib::gzipwriter#tell()","tktextio#tell_index()","net::telnet#telnetmode()","net::telnet#telnetmode=()","rdoc::options#template_dir_for()","rdoc::generator::darkfish#template_for()","rdoc::generator::darkfish#template_result()","function#ten()","rake::application#terminal_width()","rake::application#terminal_width()","getoptlong#terminate()","optionparser::terminate()","optionparser#terminate()","shell::systemcommand#terminate()","stringscanner#terminate()","thread#terminate()","gem::mockgemui#terminate_interaction()","gem::streamui#terminate_interaction()","gem::userinteraction#terminate_interaction()","shell::processcontroller#terminate_job()","gem::mockgemui#terminated?()","getoptlong#terminated?()","process::status#termsig()","kernel#test()","shell::commandprocessor#test()","test1#test_button()","test1#test_canvas()","test1#test_checkbutton()","test1#test_entry()","gem::specification#test_file()","gem::specification#test_file=()","gem::specification#test_files()","gem::specification#test_files=()","test1#test_label()","test1#test_listbox()","object#test_lists()","test1#test_menu()","test1#test_modal()","test1#test_radiobutton()","test1#test_raise()","test1#test_scale()","test1#test_text()","ixmldomattribute#text()","ixmldomcdatasection#text()","ixmldomcharacterdata#text()","ixmldomcomment#text()","ixmldomdocument#text()","ixmldomdocumentfragment#text()","ixmldomdocumenttype#text()","ixmldomelement#text()","ixmldomentity#text()","ixmldomentityreference#text()","ixmldomnode#text()","ixmldomnotation#text()","ixmldomprocessinginstruction#text()","ixmldomtext#text()","ixtlruntime#text()","microsoft_freethreadedxmldom_1_0#text()","microsoft_xmldom_1_0#text()","prettyprint#text()","prettyprint::singleline#text()","rdoc::markup::raw#text()","rdoc::markup::verbatim#text()","rexml::element#text()","rexml::functions::text()","rexml::streamlistener#text()","rss::listenermixin#text()","tk::bwidget::progressdlg#text()","xmlrpc::xmlwriter::simple#text()","xmlrpc::xmlwriter::xmlparser#text()","ixmldomattribute#text=()","ixmldomcdatasection#text=()","ixmldomcharacterdata#text=()","ixmldomcomment#text=()","ixmldomdocument#text=()","ixmldomdocumentfragment#text=()","ixmldomdocumenttype#text=()","ixmldomelement#text=()","ixmldomentity#text=()","ixmldomentityreference#text=()","ixmldomnode#text=()","ixmldomnotation#text=()","ixmldomprocessinginstruction#text=()","ixmldomtext#text=()","ixtlruntime#text=()","microsoft_freethreadedxmldom_1_0#text=()","microsoft_xmldom_1_0#text=()","rexml::element#text=()","rexml::light::node#text=()","tk::bwidget::progressdlg#text=()","rexml::parsers::pullevent#text?()","object#textb1move()","object#textb1press()","object#textbs()","object#textdel()","object#textenter()","object#textinsert()","object#textloadfile()","object#textpaste()","object#textsearch()","object#texttoggle()","object#textwinbigb2()","object#textwinbigh2()","object#textwinbigp2()","object#textwinsmallb2()","object#textwinsmallh2()","object#textwinsmallp2()","object#textwinddel()","object#textwinddel2()","object#textwindoff()","object#textwindoff2()","object#textwindon()","object#textwindon2()","object#textwindplot()","object#textwindplot2()","tk::blt::treeview#text_apply()","tk::html_widget#text_ascii()","tk::html_widget#text_break()","tk::blt::treeview#text_cancel()","tk::blt::treeview::configmethod#text_cget()","tk::blt::treeview::configmethod#text_cget_strict()","tk::blt::treeview::configmethod#text_cget_tkstring()","tk::blt::treeview::configmethod#text_configinfo()","tk::blt::treeview::configmethod#text_configure()","tk::blt::treeview#text_delete()","tk::html_widget#text_delete()","cgi::htmlextension#text_field()","tk::html_widget#text_find()","tk::html_widget::text_format()","tk::blt::treeview#text_get()","tk::blt::treeview#text_get_root()","tk::html_widget#text_html()","tk::blt::treeview#text_icursor()","tk::blt::treeview#text_index()","tk::blt::treeview#text_insert()","tk::html_widget#text_insert()","tk::treectrl::text_layout()","tk::treectrl::text_layout()","tk::blt::treeview#text_selection_adjust()","tk::blt::treeview#text_selection_clear()","tk::blt::treeview#text_selection_from()","tk::blt::treeview#text_selection_present()","tk::blt::treeview#text_selection_range()","tk::blt::treeview#text_selection_to()","tk::html_widget#text_table()","cgi::htmlextension#textarea()","tktextframe#textbackground()","tktextframe#textbg_info()","tk::bwidget::listbox#textbind()","tk::bwidget::tree#textbind()","tk::bwidget::listbox#textbind_append()","tk::bwidget::tree#textbind_append()","tk::bwidget::listbox#textbind_remove()","tk::bwidget::tree#textbind_remove()","tk::bwidget::listbox#textbindinfo()","tk::bwidget::tree#textbindinfo()","tktextframe#textborderwidth()","tk::tcllib::diagrams#textcolor()","tk::tcllib::diagrams#textfont()","rss::rss#textinput()","tktextframe#textrelief()","rexml::element#texts()","tk::bwidget::progressdlg#textvariable()","rake::packagetask#tgz_file()","object#the_answer_to_life_the_universe_and_everything()","tk::tile::style#theme_create()","tk::tile::style#theme_names()","tk::tile::style#theme_settings()","tk::tile::style#theme_use()","tk::tile::themes()","tk::tile::themes()","tk::tile::themes()","object#think()","debugger__::context#thnum()","drb::thread()","irb::jobmanager#thread()","net::imap#thread()","multitkip#thread_eval_proc()","multitkip#thread_eval_proc()","multitkip#thread_eval_proc()","multitkip#thread_eval_proc()","debugger__#thread_list()","debugger__#thread_list_all()","tktimer#thread_tkwait()","tktimer#thread_tkwait()","tkvariable#thread_tkwait()","tkvariable#thread_tkwait()","tktimer#thread_wait()","tktimer#thread_wait()","tkvariable#thread_wait()","tkvariable#thread_wait()","kernel#throw()","date#thursday?()","time#thursday?()","object#tick()","gem::time()","openssl::ssl::session#time()","openssl::x509::revoked#time()","rake::ftpfile::time()","win32::registry::time2wtime()","openssl::ssl::session#time=()","openssl::x509::revoked#time=()","openssl::x509::store#time=()","rdoc::generator::darkfish#time_delta_string()","object#timeout()","openssl::ssl::session#timeout()","timeout::timeout()","webrick::utils::timeout()","curses::timeout=()","curses::window#timeout=()","openssl::ssl::session#timeout=()","xmlrpc::client#timeout=()","integer#times()","integer#times()","process::times()","rake::filecreationtask#timestamp()","rake::filetask#timestamp()","rake::task#timestamp()","socket::ancillarydata#timestamp()","tk::iwidgets::scrolledhtml#title()","tk::tcllib::plotchart::chartmethod#title()","tk::wm::title()","tk::wm#title()","tkconsole::title()","tkmulticolumnlist#titlebackground()","tkmultilistframe#titlebackground()","tkmulticolumnlist#titleborder()","tkmultilistframe#titleborder()","tkmulticolumnlist#titlecommand()","tkmultilistframe#titlecommand()","tkmultilistbox#titleconfig()","tkmulticolumnlist#titlefont()","tkmultilistframe#titlefont()","tkmulticolumnlist#titleforeground()","tkmultilistframe#titleforeground()","tkmulticolumnlist#titleinvoke()","tkmultilistframe#titleinvoke()","tkmulticolumnlist#titlelabels()","tkmultilistframe#titlelabels()","tkmultilistbox#titlelabels()","multitkip::tk_cmd_tbl()","multitkip::tk_cmd_tbl()","multitkip::tk_cmd_tbl()","multitkip::tk_cmd_tbl()","multitkip::tk_object_table()","multitkip::tk_object_table()","multitkip::tk_object_table()","multitkip::tk_object_table()","tkcomm::tk_tcl2ruby()","multitkip::tk_windows()","multitkip::tk_windows()","multitkip::tk_windows()","multitkip::tk_windows()","tkbgerror::tkerror()","tk::bwidget::widget::tkinclude()","tk::iwidgets::scrolledtext#tksearch()","tk::iwidgets::scrolledtext#tksearch_with_count()","tk::root#tktrans_get_image()","tk::toplevel#tktrans_get_image()","tkwindow#tktrans_get_image()","tk::root#tktrans_set_image()","tk::toplevel#tktrans_set_image()","tkwindow#tktrans_set_image()","tktimer#tkwait()","tktimer#tkwait()","tkvariable#tkwait()","tkvariable#tkwait()","net::smtp#tls?()","net::smtp#tls?()","dir::tmpdir()","uri::mailto#to=()","argf#to_a()","array#to_a()","benchmark::tms#to_a()","csv::table#to_a()","dbm#to_a()","env::to_a()","enumerable#to_a()","gdbm#to_a()","gem::platform#to_a()","hash#to_a()","matchdata#to_a()","matrix#to_a()","matrix::eigenvaluedecomposition#to_a()","matrix::lupdecomposition#to_a()","nilclass#to_a()","openssl::x509::extension#to_a()","openssl::x509::name#to_a()","optionparser#to_a()","rexml::parent#to_a()","rake::filelist#to_a()","rinda::ringfinger#to_a()","rinda::ringfinger::to_a()","rubyvm::instructionsequence#to_a()","sdbm#to_a()","set#to_a()","shell::filter#to_a()","string#to_a()","struct#to_a()","time#to_a()","tkvariable#to_a()","tkvariable#to_a()","vector#to_a()","xmlrpc::datetime#to_a()","yaml::dbm#to_a()","array#to_ary()","matrix::eigenvaluedecomposition#to_ary()","matrix::lupdecomposition#to_ary()","rake::filelist#to_ary()","tkvariable#to_ary()","tkvariable#to_ary()","webrick::httputils::formdata#to_ary()","rss::rootelementmixin#to_atom()","tk::utf8_string#to_backslash()","tk::encodedstring::to_backslash_sequence()","tk::utf8_string#to_backslash_sequence()","integer#to_bn()","integer#to_bn()","openssl::bn#to_bn()","openssl::pkey::ec::point#to_bn()","nilclass#to_c()","numeric#to_c()","string#to_c()","rss::utils#to_class_name()","array#to_csv()","csv::row#to_csv()","csv::table#to_csv()","bigdecimal#to_d()","float#to_d()","integer#to_d()","integer#to_d()","rational#to_d()","string#to_d()","date#to_date()","datetime#to_date()","time#to_date()","xmlrpc::datetime#to_date()","date#to_datetime()","datetime#to_datetime()","time#to_datetime()","openssl::asn1::asn1data#to_der()","openssl::asn1::constructive#to_der()","openssl::asn1::primitive#to_der()","openssl::netscape::spki#to_der()","openssl::ocsp::request#to_der()","openssl::ocsp::response#to_der()","openssl::pkcs12#to_der()","openssl::pkcs7#to_der()","openssl::pkey::dh#to_der()","openssl::pkey::dsa#to_der()","openssl::pkey::ec#to_der()","openssl::pkey::ec::group#to_der()","openssl::pkey::rsa#to_der()","openssl::pkey::rsa#to_der()","openssl::ssl::session#to_der()","openssl::x509::attribute#to_der()","openssl::x509::crl#to_der()","openssl::x509::certificate#to_der()","openssl::x509::extension#to_der()","openssl::x509::name#to_der()","openssl::x509::request#to_der()","bigdecimal#to_digits()","rss::element#to_element_methods()","object#to_enum()","multitkip#to_eval()","multitkip#to_eval()","multitkip::to_eval()","multitkip::to_eval()","multitkip#to_eval()","multitkip::to_eval()","multitkip::to_eval()","multitkip#to_eval()","tk::blt::plotcomponent::axis#to_eval()","tk::blt::plotcomponent::crosshairs#to_eval()","tk::blt::plotcomponent::element#to_eval()","tk::blt::plotcomponent::gridline#to_eval()","tk::blt::plotcomponent::legend#to_eval()","tk::blt::plotcomponent::marker#to_eval()","tk::blt::plotcomponent::pen#to_eval()","tk::blt::plotcomponent::postscript#to_eval()","tk::itk::archetype::to_eval()","tk::root::to_eval()","tkfont#to_eval()","tkfont#to_eval()","tkfont::descendantfont#to_eval()","tkvalidatecommand#to_eval()","tkvariable#to_eval()","tkvariable#to_eval()","bigdecimal#to_f()","bignum#to_f()","complex#to_f()","fixnum#to_f()","float#to_f()","nilclass#to_f()","rational#to_f()","string#to_f()","time#to_f()","tkvariable#to_f()","tkvariable#to_f()","rss::maker::atom::entry::items#to_feed()","rss::maker::atom::entry::items::item#to_feed()","rss::maker::atom::feed::channel#to_feed()","rss::maker::atom::feed::channel::cloud#to_feed()","rss::maker::atom::feed::channel::skipdays#to_feed()","rss::maker::atom::feed::channel::skiphours#to_feed()","rss::maker::atom::feed::image#to_feed()","rss::maker::atom::feed::items#to_feed()","rss::maker::atom::feed::items::item#to_feed()","rss::maker::atom::feed::items::item::content#to_feed()","rss::maker::atom::feed::items::item::enclosure#to_feed()","rss::maker::atom::feed::items::item::guid#to_feed()","rss::maker::atom::feed::items::item::source#to_feed()","rss::maker::atom::feed::items::item::source::icon#to_feed()","rss::maker::atomcategory#to_feed()","rss::maker::atomgenerator#to_feed()","rss::maker::atomlink#to_feed()","rss::maker::atomlogo#to_feed()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#to_feed()","rss::maker::ituneschannelmodel::itunesimagebase#to_feed()","rss::maker::ituneschannelmodel::itunesownerbase#to_feed()","rss::maker::itunesitemmodel::itunesdurationbase#to_feed()","rss::maker::imagefaviconmodel::imagefaviconbase#to_feed()","rss::maker::imageitemmodel::imageitembase#to_feed()","rss::maker::rss09::channel#to_feed()","rss::maker::rss09::channel::authors#to_feed()","rss::maker::rss09::channel::authors::author#to_feed()","rss::maker::rss09::channel::categories#to_feed()","rss::maker::rss09::channel::cloud#to_feed()","rss::maker::rss09::channel::contributors#to_feed()","rss::maker::rss09::channel::copyright#to_feed()","rss::maker::rss09::channel::description#to_feed()","rss::maker::rss09::channel::generator#to_feed()","rss::maker::rss09::channel::links#to_feed()","rss::maker::rss09::channel::links::link#to_feed()","rss::maker::rss09::channel::skipdays#to_feed()","rss::maker::rss09::channel::skipdays::day#to_feed()","rss::maker::rss09::channel::skiphours#to_feed()","rss::maker::rss09::channel::skiphours::hour#to_feed()","rss::maker::rss09::channel::title#to_feed()","rss::maker::rss09::image#to_feed()","rss::maker::rss09::items#to_feed()","rss::maker::rss09::items::item#to_feed()","rss::maker::rss09::items::item::authors#to_feed()","rss::maker::rss09::items::item::categories#to_feed()","rss::maker::rss09::items::item::content#to_feed()","rss::maker::rss09::items::item::contributors#to_feed()","rss::maker::rss09::items::item::description#to_feed()","rss::maker::rss09::items::item::enclosure#to_feed()","rss::maker::rss09::items::item::guid#to_feed()","rss::maker::rss09::items::item::links#to_feed()","rss::maker::rss09::items::item::links::link#to_feed()","rss::maker::rss09::items::item::rights#to_feed()","rss::maker::rss09::items::item::source#to_feed()","rss::maker::rss09::items::item::source::authors#to_feed()","rss::maker::rss09::items::item::source::categories#to_feed()","rss::maker::rss09::items::item::source::contributors#to_feed()","rss::maker::rss09::items::item::source::generator#to_feed()","rss::maker::rss09::items::item::source::icon#to_feed()","rss::maker::rss09::items::item::source::links#to_feed()","rss::maker::rss09::items::item::source::logo#to_feed()","rss::maker::rss09::items::item::source::rights#to_feed()","rss::maker::rss09::items::item::source::subtitle#to_feed()","rss::maker::rss09::items::item::source::title#to_feed()","rss::maker::rss09::items::item::title#to_feed()","rss::maker::rss09::textinput#to_feed()","rss::maker::rss10::channel#to_feed()","rss::maker::rss10::channel::authors#to_feed()","rss::maker::rss10::channel::authors::author#to_feed()","rss::maker::rss10::channel::categories#to_feed()","rss::maker::rss10::channel::cloud#to_feed()","rss::maker::rss10::channel::contributors#to_feed()","rss::maker::rss10::channel::copyright#to_feed()","rss::maker::rss10::channel::description#to_feed()","rss::maker::rss10::channel::generator#to_feed()","rss::maker::rss10::channel::links#to_feed()","rss::maker::rss10::channel::links::link#to_feed()","rss::maker::rss10::channel::skipdays#to_feed()","rss::maker::rss10::channel::skiphours#to_feed()","rss::maker::rss10::channel::title#to_feed()","rss::maker::rss10::image#to_feed()","rss::maker::rss10::items#to_feed()","rss::maker::rss10::items::item#to_feed()","rss::maker::rss10::items::item::authors#to_feed()","rss::maker::rss10::items::item::categories#to_feed()","rss::maker::rss10::items::item::content#to_feed()","rss::maker::rss10::items::item::contributors#to_feed()","rss::maker::rss10::items::item::description#to_feed()","rss::maker::rss10::items::item::enclosure#to_feed()","rss::maker::rss10::items::item::guid#to_feed()","rss::maker::rss10::items::item::links#to_feed()","rss::maker::rss10::items::item::rights#to_feed()","rss::maker::rss10::items::item::source#to_feed()","rss::maker::rss10::items::item::source::authors#to_feed()","rss::maker::rss10::items::item::source::categories#to_feed()","rss::maker::rss10::items::item::source::contributors#to_feed()","rss::maker::rss10::items::item::source::generator#to_feed()","rss::maker::rss10::items::item::source::icon#to_feed()","rss::maker::rss10::items::item::source::links#to_feed()","rss::maker::rss10::items::item::source::logo#to_feed()","rss::maker::rss10::items::item::source::rights#to_feed()","rss::maker::rss10::items::item::source::subtitle#to_feed()","rss::maker::rss10::items::item::source::title#to_feed()","rss::maker::rss10::items::item::title#to_feed()","rss::maker::rss10::textinput#to_feed()","rss::maker::rss20::channel::categories#to_feed()","rss::maker::rss20::channel::categories::category#to_feed()","rss::maker::rss20::channel::cloud#to_feed()","rss::maker::rss20::channel::generator#to_feed()","rss::maker::rss20::items::item::authors#to_feed()","rss::maker::rss20::items::item::authors::author#to_feed()","rss::maker::rss20::items::item::categories#to_feed()","rss::maker::rss20::items::item::categories::category#to_feed()","rss::maker::rss20::items::item::enclosure#to_feed()","rss::maker::rss20::items::item::guid#to_feed()","rss::maker::rss20::items::item::source#to_feed()","rss::maker::rss20::items::item::source::links#to_feed()","rss::maker::rss20::items::item::source::links::link#to_feed()","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase#to_feed()","rss::rootelementmixin#to_feed()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#to_feed_for_categories()","json::ext::generator::state#to_h()","openssl::x509::extension#to_h()","xmlrpc::faultexception#to_h()","csv::row#to_hash()","dbm#to_hash()","env::to_hash()","gdbm#to_hash()","hash#to_hash()","net::httpheader#to_hash()","rake::taskarguments#to_hash()","sdbm#to_hash()","tkvariable#to_hash()","tkvariable#to_hash()","yaml::dbm#to_hash()","rdoc::markup::tohtml#to_html()","rdoc::text#to_html()","argf#to_i()","bigdecimal#to_i()","complex#to_i()","dl::cfunc#to_i()","dl::cptr#to_i()","dl::cptr#to_i()","dl::function#to_i()","dl::handle#to_i()","drbex2#to_i()","fiddle::closure#to_i()","float#to_i()","io#to_i()","ipaddr#to_i()","integer#to_i()","integer#to_i()","nilclass#to_i()","openssl::bn#to_i()","process::status#to_i()","rake::pseudostatus#to_i()","rational#to_i()","string#to_i()","time#to_i()","tkvariable#to_i()","tkvariable#to_i()","webrick::httpstatus::status#to_i()","drb::to_id()","drb::drbidconv#to_id()","drb::drbidconv#to_id()","drb::drbserver#to_id()","drb::timeridconv#to_id()","drbnamedidconv#to_id()","bigdecimal#to_int()","dl::cptr#to_int()","dl::cptr#to_int()","float#to_int()","integer#to_int()","integer#to_int()","jisx0208::char#to_int()","numeric#to_int()","openssl::bn#to_int()","tkvariable#to_int()","tkvariable#to_int()","argf#to_io()","io#to_io()","tktextio#to_io()","zlib::gzipfile#to_io()","complex#to_json()","date#to_json()","datetime#to_json()","exception#to_json()","json::ext::generator::generatormethods::array#to_json()","json::ext::generator::generatormethods::bignum#to_json()","json::ext::generator::generatormethods::falseclass#to_json()","json::ext::generator::generatormethods::fixnum#to_json()","json::ext::generator::generatormethods::float#to_json()","json::ext::generator::generatormethods::hash#to_json()","json::ext::generator::generatormethods::nilclass#to_json()","json::ext::generator::generatormethods::object#to_json()","json::ext::generator::generatormethods::string#to_json()","json::ext::generator::generatormethods::trueclass#to_json()","psych::to_json()","range#to_json()","rational#to_json()","regexp#to_json()","struct#to_json()","symbol#to_json()","time#to_json()","json::ext::generator::generatormethods::string#to_json_raw()","json::ext::generator::generatormethods::string#to_json_raw_object()","uri::mailto#to_mailtext()","resolv::ipv4#to_name()","resolv::ipv6#to_name()","drb::to_obj()","drb::drbidconv#to_obj()","drb::drbidconv#to_obj()","drb::drbserver#to_obj()","drb::gwidconv#to_obj()","drb::timeridconv#to_obj()","drbnamedidconv#to_obj()","win32::sspi::identity#to_p()","win32::sspi::securitybuffer#to_p()","win32::sspi::securityhandle#to_p()","win32::sspi::timestamp#to_p()","dir#to_path()","file#to_path()","pathname#to_path()","openssl::netscape::spki#to_pem()","openssl::pkcs7#to_pem()","openssl::pkey::dh#to_pem()","openssl::pkey::dsa#to_pem()","openssl::pkey::ec#to_pem()","openssl::pkey::ec::group#to_pem()","openssl::pkey::rsa#to_pem()","openssl::pkey::rsa#to_pem()","openssl::ssl::session#to_pem()","openssl::x509::crl#to_pem()","openssl::x509::certificate#to_pem()","openssl::x509::request#to_pem()","method#to_proc()","proc#to_proc()","symbol#to_proc()","tkvariable#to_proc()","tkvariable#to_proc()","dl::cptr::to_ptr()","dl::cptr::to_ptr()","bigdecimal#to_r()","complex#to_r()","float#to_r()","integer#to_r()","integer#to_r()","nilclass#to_r()","rational#to_r()","string#to_r()","time#to_r()","ipaddr#to_range()","uri::mailto#to_rfc822text()","rss::rootelementmixin#to_rss()","gem::specification#to_ruby()","psych::nodes::node#to_ruby()","gem::specification#to_ruby_for_cache()","argf#to_s()","addrinfo#to_s()","array#to_s()","arraycode#to_s()","benchmark::tms#to_s()","bigdecimal#to_s()","bignum#to_s()","cgi::cookie#to_s()","csv::row#to_s()","csv::table#to_s()","complex#to_s()","dl::cfunc#to_s()","dl::cptr#to_s()","dl::cptr#to_s()","dl::cstructentity#to_s()","dqentry#to_s()","date#to_s()","datetime#to_s()","digest::instance#to_s()","env::to_s()","encoding#to_s()","exception#to_s()","falseclass#to_s()","fixnum#to_s()","float#to_s()","foo#to_s()","gem::platform#to_s()","hash#to_s()","hoge#to_s()","ipaddr#to_s()","irb::context#to_s()","matchdata#to_s()","matrix#to_s()","method#to_s()","module#to_s()","mylist#to_s()","nameerror#to_s()","nilclass#to_s()","object#to_s()","openssl::bn#to_s()","openssl::config#to_s()","openssl::hmac#to_s()","openssl::netscape::spki#to_s()","openssl::pkcs7#to_s()","openssl::pkey::dh#to_s()","openssl::pkey::dsa#to_s()","openssl::pkey::rsa#to_s()","openssl::pkey::rsa#to_s()","openssl::x509::crl#to_s()","openssl::x509::certificate#to_s()","openssl::x509::extension#to_s()","openssl::x509::name#to_s()","openssl::x509::request#to_s()","openstruct#to_s()","optionparser#to_s()","optionparser::parseerror#to_s()","pathname#to_s()","point#to_s()","proc#to_s()","process::status#to_s()","rexml::attribute#to_s()","rexml::cdata#to_s()","rexml::dtd::entitydecl#to_s()","rexml::dtd::notationdecl#to_s()","rexml::entity#to_s()","rexml::light::node#to_s()","rexml::node#to_s()","rexml::output#to_s()","rexml::parseexception#to_s()","rexml::text#to_s()","rexml::validation::event#to_s()","rexml::validation::ref#to_s()","rexml::validation::state#to_s()","rss::element#to_s()","rss::xml::element#to_s()","rss::xmlstylesheet#to_s()","rake::earlytime#to_s()","rake::invocationchain#to_s()","rake::invocationchain::emptyinvocationchain#to_s()","rake::task#to_s()","rake::taskarguments#to_s()","range#to_s()","rational#to_s()","regexp#to_s()","resolv::dns::name#to_s()","shell::filter#to_s()","socket::option#to_s()","string#to_s()","struct#to_s()","syck::specialhash#to_s()","symbol#to_s()","time#to_s()","tk::blt::vector#to_s()","tkcore#to_s()","tkfont#to_s()","tkfont#to_s()","tkfont::descendantfont#to_s()","tkvariable#to_s()","tkvariable#to_s()","trueclass#to_s()","uri::ftp#to_s()","uri::generic#to_s()","uri::mailto#to_s()","unboundmethod#to_s()","vector#to_s()","webrick::cookie#to_s()","webrick::httputils::formdata#to_s()","webrick::httpversion#to_s()","win32ole_method#to_s()","win32ole_param#to_s()","win32ole_type#to_s()","win32ole_typelib#to_s()","win32ole_variable#to_s()","win32::sspi::sspiresult#to_s()","enumerable#to_set()","jisx0208::char#to_sjis()","addrinfo#to_sockaddr()","gem::dependency#to_spec()","gem::dependency#to_specs()","dl::cptr#to_str()","dl::cptr#to_str()","string#to_str()","tkvariable#to_str()","tkvariable#to_str()","ipaddr#to_string()","rexml::attribute#to_string()","string#to_sym()","symbol#to_sym()","tkvariable#to_sym()","tkvariable#to_sym()","openssl::netscape::spki#to_text()","openssl::pkey::dh#to_text()","openssl::pkey::dsa#to_text()","openssl::pkey::ec#to_text()","openssl::pkey::ec::group#to_text()","openssl::pkey::rsa#to_text()","openssl::pkey::rsa#to_text()","openssl::ssl::session#to_text()","openssl::x509::crl#to_text()","openssl::x509::certificate#to_text()","openssl::x509::request#to_text()","date#to_time()","datetime#to_time()","time#to_time()","xmlrpc::datetime#to_time()","dl::cptr#to_value()","dl::cptr#to_value()","argf#to_write_io()","rss::rootelementmixin#to_xml()","array#to_yaml()","class#to_yaml()","complex#to_yaml()","date#to_yaml()","exception#to_yaml()","falseclass#to_yaml()","float#to_yaml()","hash#to_yaml()","integer#to_yaml()","integer#to_yaml()","nilclass#to_yaml()","object#to_yaml()","psych::nodes::node#to_yaml()","range#to_yaml()","rational#to_yaml()","regexp#to_yaml()","string#to_yaml()","struct#to_yaml()","syck::domaintype#to_yaml()","syck::object#to_yaml()","syck::omap#to_yaml()","syck::pairs#to_yaml()","syck::privatetype#to_yaml()","syck::specialhash#to_yaml()","symbol#to_yaml()","time#to_yaml()","trueclass#to_yaml()","object#to_yaml_properties()","object#to_yaml_style()","date::today()","kconv::toeuc()","string#toeuc()","tk::blt::plotcomponent::crosshairs#toggle()","tk::blt::plotcomponent::gridline#toggle()","tk::blt::treeview#toggle()","tk::blt::treeview::tagorid_methods#toggle()","tk::bwidget::tree#toggle()","tk::bwidget::tree::node#toggle()","tk::checkbutton#toggle()","tk::checkbutton#toggle()","tk::iwidgets::hierarchy#toggle()","tkfont::chooser#toggle()","object#toggle_console()","kconv::tojis()","string#tojis()","rubylex#token()","tk::blt::dnd::token()","tk::blt::dragdrop::token()","win32::sspi::securitybuffer#token()","tk::html_widget#token_dom()","tk::html_widget#token_append()","tk::html_widget#token_attrs()","tk::blt::dnd#token_cget()","tk::blt::dnd#token_cget_strict()","tk::blt::dnd#token_cget_tkstring()","tk::blt::dnd#token_configinfo()","tk::blt::dnd#token_configure()","tk::html_widget#token_define()","tk::html_widget#token_delete()","tk::html_widget#token_dom()","tk::html_widget#token_dom_tokens()","tk::html_widget#token_domtokens()","tk::html_widget#token_find()","tk::html_widget#token_get()","tk::html_widget#token_get_attr()","tk::html_widget#token_get_end()","tk::html_widget#token_getend()","tk::html_widget#token_handler()","tk::html_widget#token_insert()","tk::html_widget#token_list()","rdoc::parser::rubytools#token_listener()","tk::html_widget#token_markup()","tk::html_widget#token_offset()","tk::html_widget#token_on_events()","rdoc::markup::parser#token_pos()","tk::html_widget#token_set_attr()","rdoc::tokenstream#token_stream()","tk::html_widget#token_unique()","tk::blt::dnd#token_windowconfiginfo()","tk::blt::dnd#token_windowconfigure()","psych::scalarscanner#tokenize()","rdoc::markup::parser#tokenize()","rdoc::markup::parser::tokenize()","ripper::tokenize()","rdoc::tokenstream#tokens_to_s()","kconv::tolocale()","string#tolocale()","tk::iwidgets::mainwindow#toolbar()","irb::frame::top()","irb::frame#top()","net::popmail#top()","optionparser::top()","optionparser#top()","rdoc::context#top_level()","rdoc::require#top_level()","rake::application#top_level()","rake::application#top_level()","shell::commandprocessor#top_level_test()","tkwinfo::toplevel()","tkwinfo::toplevel()","tk#toplevel_aliases_on_widget_set()","irb::locale#toplevel_load()","kconv::tosjis()","string#tosjis()","zlib::zstream#total_in()","zlib::zstream#total_out()","gc::profiler::total_time()","fileutils::touch()","object#touch()","knights_tour#tour()","kconv::toutf16()","string#toutf16()","kconv::toutf32()","string#toutf32()","kconv::toutf8()","string#toutf8()","matrix#tr()","string#tr()","string#tr!()","string#tr_cpp()","string#tr_s()","string#tr_s!()","matrix#trace()","net::http#trace()","net::http#trace()","tkvariable#trace()","tkvariable#trace()","debugger__::context#trace?()","tkvariable#trace_callback()","tkvariable#trace_callback()","tkvariable#trace_delete()","tkvariable#trace_delete()","tkvariable#trace_delete_for_element()","tkvariable#trace_delete_for_element()","tkvariable#trace_element()","tkvariable#trace_element()","debugger__::context#trace_func()","irb::frame#trace_func()","tracer::trace_func()","tkvariable#trace_info()","tkvariable#trace_info()","tkvariable#trace_info_for_element()","tkvariable#trace_info_for_element()","tkvariable#trace_remove()","tkvariable#trace_remove()","tkvariable#trace_remove_for_element()","tkvariable#trace_remove_for_element()","kernel#trace_var()","tkvariable#trace_vdelete()","tkvariable#trace_vdelete()","tkvariable#trace_vdelete_for_element()","tkvariable#trace_vdelete_for_element()","tkvariable#trace_vinfo()","tkvariable#trace_vinfo()","tkvariable#trace_vinfo_for_element()","tkvariable#trace_vinfo_for_element()","object#trackfocus()","object#trackstates()","tk::tcllib::crosshair::track_off()","tk::tcllib::crosshair::track_on()","tktextio#trancate()","cal#trans()","shell::commandprocessor#transact()","pstore#transaction()","object#transcode_compile_tree()","object#transcode_generate_node()","object#transcode_generated_code()","object#transcode_register_code()","object#transcode_tbl_only()","object#transcode_tblgen()","fiber#transfer()","object::syck::resolver#transfer()","syck::transfer()","syck::transfer()","multitkip::transfer_stderr()","multitkip#transfer_stderr()","multitkip#transfer_stderr()","multitkip::transfer_stderr()","multitkip#transfer_stderr()","multitkip::transfer_stderr()","multitkip::transfer_stderr()","multitkip#transfer_stderr()","multitkip::transfer_stdin()","multitkip#transfer_stdin()","multitkip::transfer_stdin()","multitkip#transfer_stdin()","multitkip::transfer_stdin()","multitkip::transfer_stdin()","multitkip#transfer_stdin()","multitkip#transfer_stdin()","multitkip::transfer_stdio()","multitkip#transfer_stdio()","multitkip::transfer_stdio()","multitkip#transfer_stdio()","multitkip::transfer_stdio()","multitkip::transfer_stdio()","multitkip#transfer_stdio()","multitkip#transfer_stdio()","multitkip::transfer_stdout()","multitkip::transfer_stdout()","multitkip#transfer_stdout()","multitkip#transfer_stdout()","multitkip#transfer_stdout()","multitkip#transfer_stdout()","multitkip::transfer_stdout()","multitkip::transfer_stdout()","object::syck::node#transform()","psych::nodes::node#transform()","syck::yamlnode#transform()","tk::blt::barchart#transform()","tk::blt::graph#transform()","tk::blt::plotcomponent::axis#transform()","tk::blt::stripchart#transform()","ixmldomattribute#transformnode()","ixmldomcdatasection#transformnode()","ixmldomcharacterdata#transformnode()","ixmldomcomment#transformnode()","ixmldomdocument#transformnode()","ixmldomdocumentfragment#transformnode()","ixmldomdocumenttype#transformnode()","ixmldomelement#transformnode()","ixmldomentity#transformnode()","ixmldomentityreference#transformnode()","ixmldomnode#transformnode()","ixmldomnotation#transformnode()","ixmldomprocessinginstruction#transformnode()","ixmldomtext#transformnode()","ixtlruntime#transformnode()","microsoft_freethreadedxmldom_1_0#transformnode()","microsoft_xmldom_1_0#transformnode()","ixmldomattribute#transformnodetoobject()","ixmldomcdatasection#transformnodetoobject()","ixmldomcharacterdata#transformnodetoobject()","ixmldomcomment#transformnodetoobject()","ixmldomdocument#transformnodetoobject()","ixmldomdocumentfragment#transformnodetoobject()","ixmldomdocumenttype#transformnodetoobject()","ixmldomelement#transformnodetoobject()","ixmldomentity#transformnodetoobject()","ixmldomentityreference#transformnodetoobject()","ixmldomnode#transformnodetoobject()","ixmldomnotation#transformnodetoobject()","ixmldomprocessinginstruction#transformnodetoobject()","ixmldomtext#transformnodetoobject()","ixtlruntime#transformnodetoobject()","microsoft_freethreadedxmldom_1_0#transformnodetoobject()","microsoft_xmldom_1_0#transformnodetoobject()","tk::wm::transient()","tk::wm#transient()","prelude#translate()","rexml::functions::translate()","tkmsgcatalog#translate()","tkmsgcatalog#translate()","tkmsgcatalog::translate()","tkmsgcatalog::translate()","iconv#transliterate=()","iconv#transliterate?()","tk::tcllib::ico::transparent_color()","tk::tcllib::ico#transparent_color()","array#transpose()","matrix#transpose()","kernel#trap()","signal::trap()","gem::specification#traverse()","openssl::asn1::traverse()","psych::visitors::yamltree#tree()","tk::bwidget::tree::node#tree()","tk::treectrl::configmethod#treectrl_tagid()","tk::tcllib::plotchart::xyplot#trend()","iconv#trivial?()","rexml::functions::true()","bigdecimal#truncate()","file::truncate()","file#truncate()","float#truncate()","integer#truncate()","integer#truncate()","numeric#truncate()","pathname#truncate()","rake::application#truncate()","rake::application#truncate()","rational#truncate()","stringio#truncate()","rake::application#truncate_output?()","rake::application#truncate_output?()","delegator#trust()","object#trust()","openssl::x509::store#trust=()","gem::security::policy::trusted_cert_path()","gem::try_activate()","object#try_const()","array::try_convert()","hash::try_convert()","io::try_convert()","regexp::try_convert()","string::try_convert()","object#try_cpp()","object#try_func()","object#try_header()","syck::try_implicit()","syck::try_implicit()","object#try_libvar()","mutex#try_lock()","monitormixin#try_mon_enter()","object#try_type()","object#try_var()","tsort#tsort()","tsort#tsort_each()","gem::dependencylist#tsort_each_child()","tsort#tsort_each_child()","gem::dependencylist#tsort_each_node()","tsort#tsort_each_node()","rdoc::markup::formatter#tt?()","rdoc::markup::tottonly#tt_sections()","gem::mockgemui::tty#tty?()","gem::streamui#tty?()","io#tty?()","stringio#tty?()","tktextio#tty?()","rake::application#tty_output=()","rake::application#tty_output=()","rake::application#tty_output?()","rake::application#tty_output?()","date#tuesday?()","time#tuesday?()","time#tv_nsec()","time#tv_sec()","time#tv_usec()","function#two()","gem::dependency#type()","openssl::pkcs7#type()","rdoc::classmodule#type()","rdoc::methodattr#type()","socket::ancillarydata#type()","tk::blt::plotcomponent::element#type()","tk::blt::plotcomponent::marker#type()","tk::blt::tree::node#type()","tk::iwidgets::menubar#type()","tk::winregistry::type()","tk::blt::plotcomponent::element::type2class()","tk::blt::plotcomponent::marker::type2class()","tkcitem::type2class()","win32::registry::type2name()","openssl::pkcs7#type=()","tk::iwidgets::messagebox#type_add()","tkevent::event::type_id()","object::syck::node#type_id=()","tkevent::event::type_name()","net::httpheader#type_params()","dl::importer#typealias()","uri::ftp#typecode=()","win32ole_type#typekind()","win32ole_type::typelibs()","win32ole_typelib::typelibs()","dl::stack#types()","tk::macresource::types()","tkimage::types()","erb::util::u()","matrix::lupdecomposition#u()","object#ud()","addrinfo::udp()","socket::udp_server_loop()","socket::udp_server_loop_on()","socket::udp_server_recv()","socket::udp_server_sockets()","gem::ui()","gem::defaultuserinteraction::ui()","gem::defaultuserinteraction#ui()","gem::defaultuserinteraction::ui=()","gem::defaultuserinteraction#ui=()","file::stat#uid()","process::uid()","process::uid=()","net::imap#uid_copy()","net::imap#uid_fetch()","net::imap#uid_search()","net::imap#uid_sort()","net::imap#uid_store()","net::imap#uid_thread()","net::popmail#uidl()","file::umask()","tk::trofs::umount()","webrick::httpserver#umount()","win32ole_event#unadvise()","shell::unalias_command()","shell::commandprocessor::unalias_command()","actionmap::unambiguous_action()","tk::optionobj#unassign()","tk::scrollable#unautoscroll()","tk::scrollbar#unautoscroll()","tk::tcllib::autoscroll::unautoscroll()","dl::function#unbind()","method#unbind()","dl::function#unbind_at_call()","dl::tempfunction#unbind_at_call()","csv#unconverted_fields?()","tkvariable#undef_default()","tkvariable#undef_default()","shell::undef_system_command()","shell::commandprocessor::undef_system_command()","objectspace::undefine_finalizer()","rdoc::stats#undoc_params()","cgi::unescape()","gem::remotefetcher#unescape()","syck::unescape()","syck::unescape()","uri::escape#unescape()","uri::parser#unescape()","cgi::unescapeelement()","cgi::unescapehtml()","cgi::unescape_element()","cgi::unescape_html()","rdoc::markup::parser#unget()","rdoc::parser::rubytools#unget_tk()","io#ungetbyte()","stringio#ungetbyte()","zlib::gzipreader#ungetbyte()","io#ungetc()","openssl::buffering#ungetc()","rubylex#ungetc()","stringio#ungetc()","tktextio#ungetc()","zlib::gzipreader#ungetc()","curses::ungetch()","curses::ungetmouse()","gem::uninstaller#uninstall()","tkcomm#uninstall_cmd()","tkcomm::uninstall_cmd()","tkutil::uninstall_cmd()","gem::docmanager#uninstall_doc()","gem::uninstaller#uninstall_gem()","gem::commands::setupcommand#uninstall_old_gemcutter()","dl::importer#union()","regexp::union()","set#union()","array#uniq()","array#uniq!()","ixtlruntime#uniqueid()","rdoc::toplevel::unique_classes()","rdoc::toplevel::unique_classes_and_modules()","net::popmail#unique_id()","rdoc::toplevel::unique_modules()","matrix::unit()","matrix#unitary?()","addrinfo::unix()","socket::unix()","addrinfo#unix?()","rake::application#unix?()","rake::application#unix?()","addrinfo#unix_path()","socket::ancillarydata#unix_rights()","socket::ancillarydata::unix_rights()","socket::unix_server_loop()","socket::unix_server_socket()","logger#unknown()","tkpackage#unknown_proc()","cal#unlines()","dir::unlink()","file::unlink()","pathname#unlink()","shell::commandprocessor#unlink()","tempfile#unlink()","mutex#unlock()","net::http#unlock()","net::http#unlock()","tk::blt::winop#unmap()","tk::blt::winop#unmap()","rdoc::markup::attributemanager#unmask_protected_sequences()","webrick::httpserver#unmount()","rexml::parsers::baseparser#unnormalize()","rexml::text::unnormalize()","rexml::entity#unnormalized()","dl::packer#unpack()","dl::stack#unpack()","gem::installer#unpack()","socket::option#unpack()","string#unpack()","socket::unpack_sockaddr_in()","socket::unpack_sockaddr_un()","win32::registry::api#unpackdw()","win32::registry::api#unpackqw()","tk::bwidget::combobox#unpost()","tk::menu#unpost()","tk::tcllib::widget::dateentry#unpost()","tk::tcllib::widget::dateentry#unpost()","drb::extservmanager#unregist()","gem::commandmanager#unregister_command()","gem::unresolved_deps()","stringscanner#unscan()","tk::blt::tree::node#unset()","tk::blt::tree::tag#unset()","tkfont::chooser#unset()","tktextmark#unset()","tktextmark#unset()","tkvariable#unset()","tkvariable#unset()","tk::iwidgets::scrolledtext#unset_mark()","array#unshift()","rexml::parent#unshift()","rexml::parsers::baseparser#unshift()","rexml::parsers::pullparser#unshift()","dl::valueutil#unsigned_value()","net::imap#unsubscribe()","delegator#untaint()","object#untaint()","pathname#untaint()","kernel#untrace_var()","delegator#untrust()","object#untrust()","tkutil::untrust()","object#untrusted?()","zlib::gzipreader#unused()","board#up()","tk::iwidgets::spinner#up()","string#upcase()","symbol#upcase()","string#upcase!()","cgi::session#update()","cgi::session::filestore#update()","cgi::session::memorystore#update()","cgi::session::nullstore#update()","cgi::session::pstore#update()","clock#update()","dbm#update()","digest::hmac#update()","digest::instance#update()","digest::sha2#update()","env::update()","gdbm#update()","gem::streamui::silentdownloadreporter#update()","gem::streamui::verbosedownloadreporter#update()","hash#update()","httpserver::table#update()","notify#update()","openssl::cipher#update()","openssl::digest#update()","openssl::hmac#update()","sdbm#update()","syck::specialhash#update()","tk::optionobj#update()","tkvariable#update()","tkvariable#update()","yaml::dbm#update()","object#updatestates()","rdoc::classmodule#update_aliases()","tkimg_demo#update_animated_gif()","gem::package::tarheader#update_checksum()","bwidget_demo#update_font()","gem::commands::updatecommand#update_gem()","gem::commands::updatecommand#update_gems()","rdoc::classmodule#update_includes()","gem::indexer#update_index()","rdoc::rdoc#update_output_dir()","gem::docmanager::update_ri_cache()","gem::commands::updatecommand#update_rubygems()","gem::indexer#update_specs_index()","tk::optionobj#update_without_notify()","gem::streamui::silentprogressreporter#updated()","gem::streamui::simpleprogressreporter#updated()","gem::streamui::verboseprogressreporter#updated()","rdoc::context#upgrade_to_class()","compositepublisher#upload()","rake::compositepublisher#upload()","rake::sshdirpublisher#upload()","rake::sshfilepublisher#upload()","rake::sshfreshdirpublisher#upload()","sshdirpublisher#upload()","sshfilepublisher#upload()","sshfreshdirpublisher#upload()","rake::ftpuploader#upload_files()","win32::sspi::securityhandle#upper()","prime::pseudoprimegenerator#upper_bound()","prime::pseudoprimegenerator#upper_bound=()","matrix#upper_triangular?()","object#upstream_proxy()","date#upto()","integer#upto()","integer#upto()","string#upto()","fileutils::uptodate?()","drb::uri()","gem::remotefetcher#uri_escaper()","drb::drbprotocol::uri_option()","drb::drbsslsocket::uri_option()","drb::drbtcpsocket::uri_option()","drb::drbunixsocket::uri_option()","drb::http0::uri_option()","rss::baselistener#uri_registered?()","ixmldomdocument#url()","ixmldomparseerror#url()","microsoft_freethreadedxmldom_1_0#url()","microsoft_xmldom_1_0#url()","msxml#url()","msxml#url=()","erb::util::url_encode()","tk::html_widget::url_join()","tk::html_widget::url_split()","securerandom::urlsafe_base64()","base64#urlsafe_decode64()","base64#urlsafe_encode64()","gem::command#usage()","object#usage()","tk::blt::plotcomponent::axis#use()","tk::tcllib::style::use()","tk::tcllib::tablelist::use_tile?()","tk::tcllib::tablelist::use_tile?()","tk::tcllib::tablelist::use_tile?()","tk::tcllib::tablelist::use_tile?()","tk::blt::plotcomponent::axis#use_as()","rubyvm::sourcecodegenerator#use_const?()","curses::use_default_colors()","irb::context#use_loader()","irb::context#use_loader=()","irb::context#use_loader?()","gem::use_paths()","rdoc::markup::tordoc#use_prefix()","irb::context#use_readline=()","uri::generic::use_registry()","net::http#use_ssl=()","net::http#use_ssl=()","net::http#use_ssl?()","net::http#use_ssl?()","net::pop3#use_ssl?()","net::pop3#use_ssl?()","net::pop3::use_ssl?()","net::pop3::use_ssl?()","net::pop3#use_ssl?()","net::pop3::use_ssl?()","net::pop3::use_ssl?()","net::pop3#use_ssl?()","irb::context#use_tracer=()","object::syck::resolver#use_types_at()","gem::defaultuserinteraction::use_ui()","gem::defaultuserinteraction#use_ui()","time#usec()","tkfont#used()","tkfont#used()","tkfont::used_on()","tkfont::used_on()","tk::tcllib::diagrams#usegap()","tkxim::useinputmethods()","tkxim#useinputmethods()","tkxim::useinputmethods_displayof()","uri::generic#user()","uri::generic#user=()","xmlrpc::client#user=()","gem::remotefetcher#user_agent()","gem::user_dir()","gem::user_home()","object#usercode()","uri::generic#userinfo()","uri::generic#userinfo=()","tk::itk::usual()","tk::itk::usual_names()","time::utc()","time#utc()","time#utc?()","time#utc_offset()","tk::encodedstring::utf_backslash()","tk::encodedstring::utf_to_backslash()","tk::encodedstring::utf_to_backslash_sequence()","file::utime()","pathname#utime()","securerandom::uuid()","matrix::eigenvaluedecomposition#v()","matrix::eigenvaluedecomposition#v_inv()","rss::element#valid?()","tk::iwidgets::datefield#valid?()","tk::iwidgets::timefield#valid?()","date::valid_civil?()","date::valid_commercial?()","date::valid_date?()","string#valid_encoding?()","tkevent::event#valid_fields()","tkevent::event#valid_for_generate()","date::valid_jd?()","knights_tour#valid_moves()","date::valid_ordinal?()","gem::specification#validate()","rexml::validation::validator#validate()","rss::element#validate()","tk::entry#validate()","tk::tcllib::widget::validate()","tk::tktable#validate()","ixmldomdocument#validateonparse()","microsoft_freethreadedxmldom_1_0#validateonparse()","microsoft_xmldom_1_0#validateonparse()","ixmldomdocument#validateonparse=()","microsoft_freethreadedxmldom_1_0#validateonparse=()","microsoft_xmldom_1_0#validateonparse=()","object#validatephonechange()","rss::atom::duplicatelinkchecker#validate_duplicate_links()","rss::element#validate_for_stream()","rss::imagemodelutils#validate_one_tag_name()","object#validate_proc()","cgi::cookie#value()","dl::importer#value()","ixmldomattribute#value()","net::httpresponse#value()","openssl::config#value()","openssl::x509::attribute#value()","openssl::x509::extension#value()","rexml::attribute#value()","rexml::cdata#value()","rexml::entity#value()","rexml::text#value()","rinda::tuple#value()","rinda::tupleentry#value()","thread#value()","tk::bwidget::progressdlg#value()","tk::entry#value()","tk::iwidgets::entryfield#value()","tk::iwidgets::promptdialog#value()","tk::iwidgets::spinner#value()","tk::listbox#value()","tk::optionmenubutton#value()","tk::optionmenubutton#value()","tk::scale#value()","tk::tcllib::getstring_dialog#value()","tk::tcllib::swaplist_dialog#value()","tkdialogobj#value()","tkdialogobj#value()","tkvariable#value()","tkvariable#value()","toggle#value()","win32ole_variable#value()","win32ole_variant#value()","cgi::cookie#value=()","ixmldomattribute#value=()","object::syck::map#value=()","object::syck::scalar#value=()","object::syck::seq#value=()","openssl::x509::attribute#value=()","openssl::x509::extension#value=()","rexml::text#value=()","rss::itunesitemmodel::itunesduration#value=()","tk::bwidget::progressdlg#value=()","tk::entry#value=()","tk::iwidgets::entryfield#value=()","tk::iwidgets::promptdialog#value=()","tk::iwidgets::spinner#value=()","tk::listbox#value=()","tk::optionmenubutton#value=()","tk::optionmenubutton#value=()","tk::scale#value=()","tkvariable#value=()","tkvariable#value=()","win32ole_variant#value=()","dbm#value?()","env::value?()","gdbm#value?()","hash#value?()","sdbm#value?()","tkvariable#value_type=()","tkvariable#value_type=()","dbm#values()","env::values()","function#values()","gdbm#values()","hash#values()","sdbm#values()","struct#values()","tk::blt::tree::node#values()","tk::rbwidget::combobox#values()","tk::winregistry::values()","yaml::dbm#values()","array#values_at()","csv::row#values_at()","csv::table#values_at()","dbm#values_at()","env::values_at()","gdbm#values_at()","hash#values_at()","matchdata#values_at()","rake::taskarguments#values_at()","sdbm#values_at()","struct#values_at()","yaml::dbm#values_at()","debugger__::context#var_list()","tk::blt::vector#variable()","tk::bwidget::progressdlg#variable()","tkvariable#variable()","tkvariable#variable()","tkvariable#variable=()","tkvariable#variable=()","tkvariable#variable_element()","tkvariable#variable_element()","rss::maker::base#variable_is_set?()","win32ole_variable#variable_kind()","tkvariable#variable_type=()","tkvariable#variable_type=()","rexml::functions::variables()","win32ole_type#variables()","rexml::functions::variables=()","rexml::xpathparser#variables=()","win32ole_variable#varkind()","win32ole_variant#vartype()","tkpackage#vcompare()","tk::tcllib::plotchart::xyplot#vector()","tk::tcllib::plotchart::xyplot#vectorconfig()","bigdecimal::ver()","optionparser#ver()","drb::drbserver::verbose()","drb::drbserver#verbose()","rake::fileutilsext#verbose()","sys#verbose()","drb::drbserver::verbose=()","drb::drbserver#verbose=()","irb::context#verbose?()","object#verbose?()","rubyvm::sourcecodegenerator#verbose?()","certstore#verify()","net::pop3::verify()","net::pop3::verify()","net::pop3::verify()","net::pop3::verify()","openssl::netscape::spki#verify()","openssl::ocsp::basicresponse#verify()","openssl::ocsp::request#verify()","openssl::pkcs7#verify()","openssl::pkey::pkey#verify()","openssl::x509::crl#verify()","openssl::x509::certificate#verify()","openssl::x509::request#verify()","openssl::x509::store#verify()","gem::gemcutterutilities#verify_api_key()","openssl::x509::store#verify_callback=()","gem::security::policy#verify_gem()","gem::validator#verify_gem()","gem::validator#verify_gem_file()","gem::installer#verify_gem_home()","openssl::ssl::sslsocket#verify_result()","gem::security::verify_trust_dir()","erb::version()","irb::version()","msxml#version()","object#version()","openssl::x509::crl#version()","openssl::x509::certificate#version()","openssl::x509::request#version()","optionparser#version()","rexml::document#version()","tk::tkdnd::dnd::version()","tk::tkdnd::shape#version()","tkpixmapimage::version()","win32ole_typelib#version()","gem::specification#version=()","openssl::x509::crl#version=()","openssl::x509::certificate#version=()","openssl::x509::request#version=()","object#version?()","net::http::version_1_2()","net::http::version_1_2()","net::http::version_1_2?()","net::http::version_1_2?()","object#version_up()","rss::maker#versions()","tkpackage#versions()","tk::tcllib::plotchart::ganttchart#vertline()","tk::tcllib::plotchart::timechart#vertline()","readline::vi_editing_mode()","readline::vi_editing_mode?()","tk::blt::plotcomponent::axis#view()","tk::blt::tabset#view()","tk::iwidgets::notebook#view()","tk::iwidgets::tabnotebook#view()","tk::iwidgets::notebook#view_moveto()","tk::iwidgets::tabnotebook#view_moveto()","tk::tcllib::plotchart::view_port()","tk::tcllib::plotchart::chartmethod#view_port()","tk::iwidgets::notebook#view_scroll()","tk::iwidgets::tabnotebook#view_scroll()","tkwinfo::viewable()","tkwinfo::viewable()","webrick::httpserver#virtual_host()","tk::bwidget::tree#visible()","tk::bwidget::tree::node#visible()","win32ole_method#visible?()","win32ole_type#visible?()","win32ole_typelib#visible?()","win32ole_variable#visible?()","psych::visitors::yamltree#visit_array()","psych::visitors::yamltree#visit_bigdecimal()","psych::visitors::yamltree#visit_class()","psych::visitors::yamltree#visit_complex()","psych::visitors::yamltree#visit_date()","psych::visitors::yamltree#visit_datetime()","psych::visitors::yamltree#visit_exception()","psych::visitors::yamltree#visit_falseclass()","psych::visitors::yamltree#visit_float()","psych::visitors::yamltree#visit_hash()","psych::visitors::yamltree#visit_integer()","psych::visitors::yamltree#visit_module()","psych::visitors::yamltree#visit_nilclass()","psych::visitors::yamltree#visit_object()","psych::visitors::emitter#visit_psych_nodes_alias()","psych::visitors::toruby#visit_psych_nodes_alias()","psych::visitors::emitter#visit_psych_nodes_document()","psych::visitors::toruby#visit_psych_nodes_document()","psych::visitors::emitter#visit_psych_nodes_mapping()","psych::visitors::toruby#visit_psych_nodes_mapping()","psych::visitors::emitter#visit_psych_nodes_scalar()","psych::visitors::toruby#visit_psych_nodes_scalar()","psych::visitors::emitter#visit_psych_nodes_sequence()","psych::visitors::toruby#visit_psych_nodes_sequence()","psych::visitors::emitter#visit_psych_nodes_stream()","psych::visitors::toruby#visit_psych_nodes_stream()","psych::visitors::yamltree#visit_psych_omap()","psych::visitors::yamltree#visit_psych_set()","psych::visitors::yamltree#visit_range()","psych::visitors::yamltree#visit_rational()","psych::visitors::yamltree#visit_regexp()","gem::noaliasyamltree#visit_string()","psych::visitors::yamltree#visit_string()","psych::visitors::yamltree#visit_struct()","psych::visitors::yamltree#visit_symbol()","psych::visitors::yamltree#visit_time()","psych::visitors::yamltree#visit_trueclass()","tkwinfo::visual()","tkwinfo::visual()","tkwinfo::visualid()","tkwinfo::visualid()","tkwinfo::visualsavailable()","tkwinfo::visualsavailable()","net::ftp#voidcmd()","rubyvm::sourcecodegenerator#vpath()","tkwinfo::vrootheight()","tkwinfo::vrootheight()","tkwinfo::vrootwidth()","tkwinfo::vrootwidth()","tkwinfo::vrootx()","tkwinfo::vrootx()","tkwinfo::vrooty()","tkwinfo::vrooty()","tkpackage#vsatisfies()","tk::rbwidget::scrollframe#vscroll()","tk::scrollbarcomposite#vscroll()","tk::tcllib::plotchart::ganttchart#vscroll()","tk::tcllib::plotchart::timechart#vscroll()","tk::tcllib::plotchart::ganttchart#vscroll=()","tk::tcllib::plotchart::timechart#vscroll=()","time#w3cdtf()","conditionvariable#wait()","io#wait()","monitormixin::conditionvariable#wait()","object#wait()","process::wait()","rinda::waittemplateentry#wait()","tktimer#wait()","tktimer#wait()","tkvariable#wait()","tkvariable#wait()","process::wait2()","shell::builtincommand#wait?()","shell::systemcommand#wait?()","shell::processcontroller#wait_all_jobs_execution()","multitkip#wait_on_mainloop=()","multitkip#wait_on_mainloop=()","multitkip#wait_on_mainloop=()","multitkip#wait_on_mainloop=()","multitkip#wait_on_mainloop?()","multitkip#wait_on_mainloop?()","multitkip#wait_on_mainloop?()","multitkip#wait_on_mainloop?()","shell::processcontroller#wait_to_finish_all_process_controllers()","monitormixin::conditionvariable#wait_until()","monitormixin::conditionvariable#wait_while()","object#wait_writable()","process::waitall()","net::telnet#waitfor()","debugger__#waiting()","shell::processcontroller#waiting_job?()","shell::processcontroller#waiting_jobs()","shell::processcontroller#waiting_jobs_exist?()","process::waitpid()","process::waitpid2()","thread#wakeup()","kernel#warn()","logger#warn()","optionparser#warn()","rdoc::parser::ruby#warn()","webrick::basiclog#warn()","logger#warn?()","webrick::basiclog#warn?()","tk::blt::winop#warpto()","tk::blt::winop#warpto()","tk::iwidgets::watch#watch()","object#watcher()","date#wday()","time#wday()","weakref#weakref_alive?()","date#wednesday?()","time#wednesday?()","gem::command#when_invoked()","rake::fileutilsext#when_writing()","gem::commands::updatecommand#which_to_update()","rexml::element#whitespace()","gem::dependencylist#why_not_ok?()","tkwinfo::widget()","tkwinfo::widget()","tk#widget_set_symbols()","tk::blt::bitmap#width()","tk::blt::bitmap::width()","tk::tktable#width()","tkimage#width()","tkwinfo::width()","tkwinfo::width()","tk::tktable#width_list()","dl::cfunc::win32_last_error()","fiddle::win32_last_error()","fiddle::win32_last_error=()","gem::win_platform?()","tkcomm::window()","tktextwindow#window()","tktextwindow#window()","tkvariable#window()","tkvariable#window()","tktextwindow#window=()","tktextwindow#window=()","tkvariable#window=()","tkvariable#window=()","tk::tktable::configmethod#window_cget()","tktexttagconfig#window_cget()","tk::tktable::configmethod#window_cget_strict()","tktexttagconfig#window_cget_strict()","tk::tktable::configmethod#window_cget_tkstring()","tktexttagconfig#window_cget_tkstring()","tk::tktable::configmethod#window_configinfo()","tktexttagconfig#window_configinfo()","tk::tktable::configmethod#window_configure()","tktexttagconfig#window_configure()","tk::tktable#window_delete()","tkvariable#window_element()","tkvariable#window_element()","tk::tktable#window_move()","tk::tktable#window_names()","tkvariable#window_type=()","tkvariable#window_type=()","tk::blt::htext#windows()","rake::application#windows?()","rake::application#windows?()","rake::win32#windows?()","gem::installer#windows_stub_script()","tkwinfo#winfo_appname()","tkwinfo#winfo_appname()","tkwinfo#winfo_atom()","tkwinfo#winfo_atom()","tkwinfo#winfo_atomname()","tkwinfo#winfo_atomname()","tkwinfo#winfo_cells()","tkwinfo#winfo_cells()","tkwinfo#winfo_children()","tkwinfo#winfo_children()","tkwinfo#winfo_class()","tkwinfo#winfo_class()","tkwinfo#winfo_classname()","tkwinfo#winfo_classname()","tkwinfo#winfo_colormapfull()","tkwinfo#winfo_colormapfull()","tkwinfo#winfo_containing()","tkwinfo#winfo_containing()","tkwinfo#winfo_depth()","tkwinfo#winfo_depth()","tkwinfo#winfo_exist?()","tkwinfo#winfo_exist?()","tkwinfo#winfo_fpixels()","tkwinfo#winfo_fpixels()","tkwinfo#winfo_geometry()","tkwinfo#winfo_geometry()","tkwinfo#winfo_height()","tkwinfo#winfo_height()","tkwinfo#winfo_id()","tkwinfo#winfo_id()","tkwinfo#winfo_interps()","tkwinfo#winfo_interps()","tkwinfo#winfo_manager()","tkwinfo#winfo_manager()","tkwinfo#winfo_mapped?()","tkwinfo#winfo_mapped?()","tkwinfo#winfo_parent()","tkwinfo#winfo_parent()","tkwinfo#winfo_pixels()","tkwinfo#winfo_pixels()","tkwinfo#winfo_pointerx()","tkwinfo#winfo_pointerx()","tkwinfo#winfo_pointerxy()","tkwinfo#winfo_pointerxy()","tkwinfo#winfo_pointery()","tkwinfo#winfo_pointery()","tkwinfo#winfo_reqheight()","tkwinfo#winfo_reqheight()","tkwinfo#winfo_reqwidth()","tkwinfo#winfo_reqwidth()","tkwinfo#winfo_rgb()","tkwinfo#winfo_rgb()","tkwinfo#winfo_rootx()","tkwinfo#winfo_rootx()","tkwinfo#winfo_rooty()","tkwinfo#winfo_rooty()","tkwinfo#winfo_screen()","tkwinfo#winfo_screen()","tkwinfo#winfo_screencells()","tkwinfo#winfo_screencells()","tkwinfo#winfo_screendepth()","tkwinfo#winfo_screendepth()","tkwinfo#winfo_screenheight()","tkwinfo#winfo_screenheight()","tkwinfo#winfo_screenmmheight()","tkwinfo#winfo_screenmmheight()","tkwinfo#winfo_screenmmwidth()","tkwinfo#winfo_screenmmwidth()","tkwinfo#winfo_screenvisual()","tkwinfo#winfo_screenvisual()","tkwinfo#winfo_screenwidth()","tkwinfo#winfo_screenwidth()","tkwinfo#winfo_server()","tkwinfo#winfo_server()","tkwinfo#winfo_toplevel()","tkwinfo#winfo_toplevel()","tkwinfo#winfo_viewable()","tkwinfo#winfo_viewable()","tkwinfo#winfo_visual()","tkwinfo#winfo_visual()","tkwinfo#winfo_visualid()","tkwinfo#winfo_visualid()","tkwinfo#winfo_visualsavailable()","tkwinfo#winfo_visualsavailable()","tkwinfo#winfo_vrootheight()","tkwinfo#winfo_vrootheight()","tkwinfo#winfo_vrootwidth()","tkwinfo#winfo_vrootwidth()","tkwinfo#winfo_vrootx()","tkwinfo#winfo_vrootx()","tkwinfo#winfo_vrooty()","tkwinfo#winfo_vrooty()","tkwinfo#winfo_widget()","tkwinfo#winfo_widget()","tkwinfo#winfo_width()","tkwinfo#winfo_width()","tkwinfo#winfo_x()","tkwinfo#winfo_x()","tkwinfo#winfo_y()","tkwinfo#winfo_y()","io#winsize()","io#winsize=()","optionparser::with()","object#with_config()","rake::taskarguments#with_defaults()","drb::drbobject::with_friend()","drb::drbobject::with_friend()","enumerator#with_index()","enumerator#with_object()","prime::pseudoprimegenerator#with_object()","gem::gemcutterutilities#with_response()","tk::bwidget::dialog#withdraw()","tk::tcllib::widget::dialog#withdraw()","tk::wm#withdraw()","tk::wm::withdraw()","tkctag#withtag()","tk::wm#wm_aspect()","tk::wm#wm_attributes()","tk::wm#wm_client()","tk::wm#wm_colormapwindows()","tk::wm#wm_command()","tk::wm#wm_deiconify()","tk::wm#wm_focusmodel()","tk::wm#wm_forget()","tk::wm#wm_frame()","tk::wm#wm_geometry()","tk::wm#wm_grid()","tk::wm#wm_group()","tk::wm#wm_iconbitmap()","tk::wm#wm_iconify()","tk::wm#wm_iconmask()","tk::wm#wm_iconname()","tk::wm#wm_iconphoto()","tk::wm#wm_iconphoto_default()","tk::wm#wm_iconposition()","tk::wm#wm_iconwindow()","tk::wm#wm_manage()","tk::wm#wm_maxsize()","tk::wm#wm_minsize()","tk::wm#wm_overrideredirect()","tk::wm#wm_positionfrom()","tk::wm#wm_protocol()","tk::wm#wm_protocols()","tk::wm#wm_resizable()","tk::wm#wm_sizefrom()","tk::wm#wm_stackorder()","tk::wm#wm_stackorder_is_above()","tk::wm#wm_stackorder_is_below()","tk::wm#wm_stackorder_isabove()","tk::wm#wm_stackorder_isbelow()","tk::wm#wm_state()","tk::wm#wm_title()","tk::wm#wm_transient()","tk::wm#wm_withdraw()","tk::text::indexmodmethods#wordend()","tk::text::indexmodmethods#wordstart()","gem::platformmismatch#wordy()","irb::context#workspaces()","tk::tcllib::plotchart::world_3d_coordinates()","tk::tcllib::plotchart::chartmethod#world_3d_coordinates()","tk::tcllib::plotchart::world_coordinates()","tk::tcllib::plotchart::chartmethod#world_coordinates()","file::world_readable?()","file::stat#world_readable?()","filetest#world_readable?()","pathname#world_readable?()","file::world_writable?()","file::stat#world_writable?()","filetest#world_writable?()","pathname#world_writable?()","gem::command#wrap()","rdoc::markup::tordoc#wrap()","rdoc::text#wrap()","rexml::text#wrap()","zlib::gzipfile::wrap()","tk::tcllib::ntext#wrapindent()","dl::valueutil#wrap_arg()","dl::valueutil#wrap_args()","dl::function#wrap_result()","file::writable?()","file::stat#writable?()","filetest#writable?()","pathname#writable?()","file::writable_real?()","file::stat#writable_real?()","filetest#writable_real?()","pathname#writable_real?()","argf#write()","drb::http0::strstream#write()","gem::configfile#write()","gem::package::tarwriter::boundedstream#write()","gem::package::tarwriter::restrictedstream#write()","io::write()","io#write()","logger::logdevice#write()","net::internetmessageio::writeadapter#write()","net::telnet#write()","openssl::buffering#write()","rexml::attlistdecl#write()","rexml::attribute#write()","rexml::cdata#write()","rexml::comment#write()","rexml::dtd::entitydecl#write()","rexml::dtd::notationdecl#write()","rexml::doctype#write()","rexml::document#write()","rexml::element#write()","rexml::entity#write()","rexml::formatters::default#write()","rexml::instruction#write()","rexml::text#write()","rexml::xmldecl#write()","rinda::tuplespace#write()","rinda::tuplespaceproxy#write()","stringio#write()","tk::blt::printer#write()","tk::bwidget::write()","tk::macresource::write()","tk::tcllib::ico::write()","tk::tcllib::ico#write()","tkphotoimage#write()","tkphotoimage#write()","tktextio#write()","tuplespace#write()","win32::registry#write()","zlib::gzipwriter#write()","httpserver::table#writeto()","win32::registry#write_bin()","rexml::formatters::default#write_cdata()","rexml::formatters::pretty#write_cdata()","rexml::formatters::default#write_comment()","rexml::formatters::pretty#write_comment()","rexml::formatters::default#write_document()","rexml::formatters::pretty#write_document()","rexml::formatters::default#write_element()","rexml::formatters::pretty#write_element()","rexml::formatters::transitive#write_element()","csv#write_headers?()","win32::registry#write_i()","rexml::formatters::default#write_instruction()","io#write_nonblock()","openssl::buffering#write_nonblock()","gem::requirepathsbuilder#write_require_paths_file_if_needed()","win32::registry#write_s()","rinda::ringserver#write_service()","openssl::pkcs7::write_smime()","gem::installer#write_spec()","rdoc::generator::darkfish#write_style_sheet()","rexml::formatters::default#write_text()","rexml::formatters::pretty#write_text()","rexml::formatters::transitive#write_text()","rexml::text#write_with_substitution()","tk::blt::printer#write_with_title()","object#writer()","tk::bwidget::wrongnumargsstring()","win32::registry::wtime2time()","tkwinfo::x()","tkwinfo::x()","tk::blt::plotcomponent#x2axis_bind()","tk::blt::plotcomponent#x2axis_bind_append()","tk::blt::plotcomponent#x2axis_bind_remove()","tk::blt::plotcomponent#x2axis_bindinfo()","tk::blt::plotcomponent#x2axis_cget()","tk::blt::plotcomponent#x2axis_cget_strict()","tk::blt::plotcomponent#x2axis_cget_tkstring()","tk::blt::plotcomponent#x2axis_configinfo()","tk::blt::plotcomponent#x2axis_configure()","tk::blt::plotcomponent#x2axis_invtransform()","tk::blt::plotcomponent#x2axis_limits()","tk::blt::plotcomponent#x2axis_transform()","tk::blt::plotcomponent#x2axis_use()","tk::blt::plotcomponent#xaxis_bind()","tk::blt::plotcomponent#xaxis_bind_append()","tk::blt::plotcomponent#xaxis_bind_remove()","tk::blt::plotcomponent#xaxis_bindinfo()","tk::blt::plotcomponent#xaxis_cget()","tk::blt::plotcomponent#xaxis_cget_strict()","tk::blt::plotcomponent#xaxis_cget_tkstring()","tk::blt::plotcomponent#xaxis_configinfo()","tk::blt::plotcomponent#xaxis_configure()","tk::blt::plotcomponent#xaxis_invtransform()","tk::blt::plotcomponent#xaxis_limits()","tk::blt::plotcomponent#xaxis_transform()","tk::blt::plotcomponent#xaxis_use()","tk::tcllib::plotchart::chartmethod#xconfig()","tk::tcllib::diagrams#xgap()","rss::atom::feed::entry::content#xhtml()","rss::atom::textconstruct#xhtml()","net::imap#xlist()","ixmldomattribute#xml()","ixmldomcdatasection#xml()","ixmldomcharacterdata#xml()","ixmldomcomment#xml()","ixmldomdocument#xml()","ixmldomdocumentfragment#xml()","ixmldomdocumenttype#xml()","ixmldomelement#xml()","ixmldomentity#xml()","ixmldomentityreference#xml()","ixmldomnode#xml()","ixmldomnotation#xml()","ixmldomprocessinginstruction#xml()","ixmldomtext#xml()","ixtlruntime#xml()","microsoft_freethreadedxmldom_1_0#xml()","microsoft_xmldom_1_0#xml()","rss::atom::feed::entry::content#xml()","rss::rexmllikexmlparser#xmldecl()","rexml::document#xml_decl()","rss::atom::feed::entry::content#xml_getter()","rss::atom::textconstruct#xml_getter()","rss::atom::feed::entry::content#xml_setter()","rss::atom::textconstruct#xml_setter()","rexml::sax2listener#xmldecl()","rexml::streamlistener#xmldecl()","rexml::xmldecl#xmldecl()","rss::listenermixin#xmldecl()","rss::rexmllistener#xmldecl()","rss::xmlparserlistener#xmldecl()","rexml::parsers::pullevent#xmldecl?()","date#xmlschema()","date::xmlschema()","datetime#xmlschema()","datetime::xmlschema()","time#xmlschema()","object#xmp()","tk::html_widget::xor()","rexml::attribute#xpath()","rexml::element#xpath()","rexml::text#xpath()","tk::menu#xposition()","tk::optionmenubutton#xposition()","tk::optionmenubutton#xposition()","tk::iwidgets::notebook#xscrollbar()","tk::iwidgets::tabnotebook#xscrollbar()","tk::xscrollable#xscrollbar()","tk::xscrollable#xscrollbar()","tk::blt::tabset#xscrollcommand()","tk::iwidgets::notebook#xscrollcommand()","tk::iwidgets::tabnotebook#xscrollcommand()","tk::xscrollable#xscrollcommand()","tk::xscrollable#xscrollcommand()","tk::tcllib::plotchart::chartmethod#xtext()","tk::tcllib::plotchart::chartmethod#xticklines()","tk::blt::tabset#xview()","tk::iwidgets::entryfield#xview()","tk::iwidgets::hierarchy#xview()","tk::iwidgets::notebook#xview()","tk::iwidgets::promptdialog#xview()","tk::iwidgets::scrolledcanvas#xview()","tk::iwidgets::scrolledframe#xview()","tk::iwidgets::scrolledlistbox#xview()","tk::iwidgets::scrolledtext#xview()","tk::iwidgets::spinner#xview()","tk::iwidgets::tabnotebook#xview()","tk::xscrollable#xview()","tk::xscrollable#xview()","tk::iwidgets::entryfield#xview_moveto()","tk::iwidgets::hierarchy#xview_moveto()","tk::iwidgets::notebook#xview_moveto()","tk::iwidgets::promptdialog#xview_moveto()","tk::iwidgets::scrolledcanvas#xview_moveto()","tk::iwidgets::scrolledframe#xview_moveto()","tk::iwidgets::scrolledlistbox#xview_moveto()","tk::iwidgets::scrolledtext#xview_moveto()","tk::iwidgets::spinner#xview_moveto()","tk::iwidgets::tabnotebook#xview_moveto()","tk::xscrollable#xview_moveto()","tk::xscrollable#xview_moveto()","tk::iwidgets::entryfield#xview_scroll()","tk::iwidgets::hierarchy#xview_scroll()","tk::iwidgets::notebook#xview_scroll()","tk::iwidgets::promptdialog#xview_scroll()","tk::iwidgets::scrolledcanvas#xview_scroll()","tk::iwidgets::scrolledframe#xview_scroll()","tk::iwidgets::scrolledlistbox#xview_scroll()","tk::iwidgets::scrolledtext#xview_scroll()","tk::iwidgets::spinner#xview_scroll()","tk::iwidgets::tabnotebook#xview_scroll()","tk::xscrollable#xview_scroll()","tk::xscrollable#xview_scroll()","object#xy()","tkwinfo::y()","tkwinfo::y()","tk::blt::plotcomponent#y2axis_bind()","tk::blt::plotcomponent#y2axis_bind_append()","tk::blt::plotcomponent#y2axis_bind_remove()","tk::blt::plotcomponent#y2axis_bindinfo()","tk::blt::plotcomponent#y2axis_cget()","tk::blt::plotcomponent#y2axis_cget_strict()","tk::blt::plotcomponent#y2axis_cget_tkstring()","tk::blt::plotcomponent#y2axis_configinfo()","tk::blt::plotcomponent#y2axis_configure()","tk::blt::plotcomponent#y2axis_invtransform()","tk::blt::plotcomponent#y2axis_limits()","tk::blt::plotcomponent#y2axis_transform()","tk::blt::plotcomponent#y2axis_use()","psych::nodes::node#yaml()","gem::commands::buildcommand#yaml?()","module#yaml_as()","array#yaml_initialize()","hash#yaml_initialize()","object::syck::object#yaml_initialize()","syck::omap#yaml_initialize()","syck::pairs#yaml_initialize()","version#yaml_initialize()","complex::yaml_new()","exception::yaml_new()","range::yaml_new()","rational::yaml_new()","regexp::yaml_new()","string::yaml_new()","struct::yaml_new()","symbol::yaml_new()","time::yaml_new()","object::yaml_tag()","struct::yaml_tag_class_name()","struct::yaml_tag_read_class()","object#yarv_exec()","tk::blt::plotcomponent#yaxis_bind()","tk::blt::plotcomponent#yaxis_bind_append()","tk::blt::plotcomponent#yaxis_bind_remove()","tk::blt::plotcomponent#yaxis_bindinfo()","tk::blt::plotcomponent#yaxis_cget()","tk::blt::plotcomponent#yaxis_cget_strict()","tk::blt::plotcomponent#yaxis_cget_tkstring()","tk::blt::plotcomponent#yaxis_configinfo()","tk::blt::plotcomponent#yaxis_configure()","tk::blt::plotcomponent#yaxis_invtransform()","tk::blt::plotcomponent#yaxis_limits()","tk::blt::plotcomponent#yaxis_transform()","tk::blt::plotcomponent#yaxis_use()","tk::tcllib::plotchart::chartmethod#yconfig()","date#yday()","time#yday()","date#year()","time#year()","xmlrpc::datetime#year=()","cal#yearly()","tk::tcllib::diagrams#ygap()","fiber::yield()","proc#yield()","tk::iwidgets::menubar#yposition()","tk::menu#yposition()","tk::optionmenubutton#yposition()","tk::optionmenubutton#yposition()","tk::iwidgets::notebook#yscrollbar()","tk::iwidgets::tabnotebook#yscrollbar()","tk::yscrollable#yscrollbar()","tk::yscrollable#yscrollbar()","tk::iwidgets::notebook#yscrollcommand()","tk::iwidgets::tabnotebook#yscrollcommand()","tk::yscrollable#yscrollcommand()","tk::yscrollable#yscrollcommand()","tk::tcllib::plotchart::chartmethod#ytext()","tk::tcllib::plotchart::chartmethod#yticklines()","tk::iwidgets::hierarchy#yview()","tk::iwidgets::notebook#yview()","tk::iwidgets::scrolledcanvas#yview()","tk::iwidgets::scrolledframe#yview()","tk::iwidgets::scrolledlistbox#yview()","tk::iwidgets::scrolledtext#yview()","tk::iwidgets::tabnotebook#yview()","tk::rbwidget::editable_listbox#yview()","tk::yscrollable#yview()","tk::yscrollable#yview()","tk::iwidgets::hierarchy#yview_moveto()","tk::iwidgets::notebook#yview_moveto()","tk::iwidgets::scrolledcanvas#yview_moveto()","tk::iwidgets::scrolledframe#yview_moveto()","tk::iwidgets::scrolledlistbox#yview_moveto()","tk::iwidgets::scrolledtext#yview_moveto()","tk::iwidgets::tabnotebook#yview_moveto()","tk::yscrollable#yview_moveto()","tk::yscrollable#yview_moveto()","tk::iwidgets::hierarchy#yview_scroll()","tk::iwidgets::notebook#yview_scroll()","tk::iwidgets::scrolledcanvas#yview_scroll()","tk::iwidgets::scrolledframe#yview_scroll()","tk::iwidgets::scrolledlistbox#yview_scroll()","tk::iwidgets::scrolledtext#yview_scroll()","tk::iwidgets::tabnotebook#yview_scroll()","tk::yscrollable#yview_scroll()","tk::yscrollable#yview_scroll()","tk::tcllib::plotchart::plot3d#zconfig()","tk::tcllib::plotchart::ribbonchart3d#zconfig()","function#zero()","matrix::zero()","bigdecimal#zero?()","file::zero?()","file::stat#zero?()","filetest#zero?()","fixnum#zero?()","float#zero?()","matrix#zero?()","numeric#zero?()","pathname#zero?()","tkvariable#zero?()","tkvariable#zero?()","array#zip()","enumerable#zip()","rdoc::parser::zip?()","rake::packagetask#zip_file()","gem::package::tarinput#zipped_stream()","zlib::zlib_version()","object#zone()","time#zone()","time#zone_offset()","tk::blt::zoom_stack()","tk::blt::graphcommand#zoom_stack()","array#|()","bignum#|()","falseclass#|()","fixnum#|()","ipaddr#|()","nilclass#|()","set#|()","shell::filter#|()","tkvariable#|()","tkvariable#|()","tkctagaccess#|()","trueclass#|()","bignum#~()","complex#~()","fixnum#~()","ipaddr#~()","regexp#~()","","","","","","","","",""],"info":[["ACL","","classes/ACL.html","","<p>Simple Access Control Lists.\n<p>Access control lists are composed of “allow” and “deny” …\n"],["ACL::ACLEntry","","classes/ACL/ACLEntry.html","","<p>An entry in an ACL\n"],["ACL::ACLList","","classes/ACL/ACLList.html","","<p>A list of ACLEntry objects.  Used to implement the allow and deny halves of\nan ACL\n"],["ARGF","","classes/ARGF.html","","<p><code>ARGF</code> is a stream designed for use in scripts that process\nfiles given as command-line arguments or passed …\n"],["Abbrev","","classes/Abbrev.html","","<p>Calculate the set of unique abbreviations for a given set of strings.\n\n<pre><code>require &#39;abbrev&#39;\nrequire &#39;pp&#39;\n\npp ...\n</code></pre>\n"],["Action","","classes/Action.html","",""],["ActionMap","","classes/ActionMap.html","",""],["Addrinfo","","classes/Addrinfo.html","","<p>The Addrinfo class maps <code>struct addrinfo</code> to ruby.  This\nstructure identifies an Internet host and a service. …\n"],["AnimatedImageLabel","","classes/AnimatedImageLabel.html","","<p>animated image\n<p>animated image\n"],["AnimatedTextLabel","","classes/AnimatedTextLabel.html","","<p>animated label\n<p>animated label\n"],["AnimatedWaveDemo","","classes/AnimatedWaveDemo.html","","<p>animated wave\n<p>animated wave\n"],["Arc","","classes/Arc.html","",""],["ArgumentError","","classes/ArgumentError.html","","<p>Raised when the arguments are wrong and there isn&#39;t a more specific\nException class.\n<p>Ex: passing the …\n"],["Array","","classes/Array.html","","<p>Arrays are ordered, integer-indexed collections of any object. Array\nindexing starts at 0, as in C or …\n"],["ArrayCode","","classes/ArrayCode.html","",""],["BLT_Calendar_sample","","classes/BLT_Calendar_sample.html","",""],["BLT_Graph_Demo","","classes/BLT_Graph_Demo.html","",""],["BWidget_Demo","","classes/BWidget_Demo.html","",""],["Bar","","classes/Bar.html","",""],["Base64","","classes/Base64.html","","<p>The Base64 module provides for the encoding (#encode64, #strict_encode64,\n#urlsafe_encode64) and decoding …\n"],["BasicObject","","classes/BasicObject.html","","<p>BasicObject is the parent class of all classes in Ruby.  It&#39;s an\nexplicit blank class.\n<p>BasicObject …\n"],["BasicSocket","","classes/BasicSocket.html","","<p>BasicSocket is the super class for all the Socket classes.\n"],["Benchmark","","classes/Benchmark.html","","<p>The Benchmark module provides methods to measure and report the time used\nto execute Ruby code.\n<p>Measure …\n"],["Benchmark::Tms","","classes/Benchmark/Tms.html","","<p>A data object, representing the times associated with a benchmark\nmeasurement.\n"],["BenchmarkDriver","","classes/BenchmarkDriver.html","",""],["Biff","","classes/Biff.html","",""],["BigDecimal","","classes/BigDecimal.html","","<p>BigDecimal provides arbitrary-precision floating point decimal arithmetic.\n<p>Copyright (C) 2002 by Shigeo …\n"],["BigMath","","classes/BigMath.html","","<p>mathematical functions\n<p>Provides mathematical functions.\n<p>Example:\n"],["Bignum","","classes/Bignum.html","","<p>Bignum objects hold integers outside the range of Fixnum. Bignum objects\nare created automatically when …\n"],["Binding","","classes/Binding.html","","<p>Objects of class <code>Binding</code> encapsulate the execution context at\nsome particular place in the code and retain …\n"],["Bitmap","","classes/Bitmap.html","",""],["BitmapImage","","classes/BitmapImage.html","",""],["Board","","classes/Board.html","",""],["Branch","","classes/Branch.html","",""],["BtnFrame","","classes/BtnFrame.html","",""],["Button_with_Frame","","classes/Button_with_Frame.html","",""],["C","","classes/C.html","",""],["C1","","classes/C1.html","",""],["C2","","classes/C2.html","",""],["CC","","classes/CC.html","",""],["CGI","","classes/CGI.html","","<p>Overview\n<p>The Common Gateway Interface (CGI) is a simple protocol for passing an HTTP\nrequest from a web …\n"],["CGI::Cookie","","classes/CGI/Cookie.html","","<p>Class representing an HTTP cookie.\n<p>In addition to its specific fields and methods, a Cookie instance is …\n"],["CGI::HtmlExtension","","classes/CGI/HtmlExtension.html","","<p>Mixin module providing HTML generation methods.\n<p>For example,\n\n<pre><code>cgi.a(&quot;http://www.example.com&quot;) { &quot;Example&quot; ...</code></pre>\n"],["CGI::InvalidEncoding","","classes/CGI/InvalidEncoding.html","","<p>Exception raised when there is an invalid encoding detected\n"],["CGI::QueryExtension","","classes/CGI/QueryExtension.html","","<p>Mixin module that provides the following:\n<p>Access to the CGI environment variables as methods.  See documentation …\n"],["CGI::Session","","classes/CGI/Session.html","","<p>Overview\n<p>This file provides the CGI::Session class, which provides session support\nfor CGI scripts.   …\n"],["CGI::Session::FileStore","","classes/CGI/Session/FileStore.html","","<p>File-based session storage class.\n<p>Implements session storage as a flat file of &#39;key=value&#39; values. …\n"],["CGI::Session::MemoryStore","","classes/CGI/Session/MemoryStore.html","","<p>In-memory session storage class.\n<p>Implements session storage as a global in-memory hash.  Session data …\n"],["CGI::Session::NullStore","","classes/CGI/Session/NullStore.html","","<p>Dummy session storage class.\n<p>Implements session storage place holder.  No actual storage will be done. …\n"],["CGI::Session::PStore","","classes/CGI/Session/PStore.html","","<p>PStore-based session storage class.\n<p>This builds upon the top-level PStore class provided by the library …\n"],["CHashDir","","classes/CHashDir.html","",""],["CMath","","classes/CMath.html","","<p>CMath\n<p>CMath is a library that provides trigonometric and transcendental functions\nfor complex numbers. …\n"],["CSV","","classes/CSV.html","","<p>This class provides a complete interface to CSV files and data.  It offers\ntools to enable you to read …\n"],["CSV::MalformedCSVError","","classes/CSV/MalformedCSVError.html","","<p>The error thrown when the parser encounters illegal CSV formatting.\n"],["CSV::Row","","classes/CSV/Row.html","","<p>A CSV::Row is part Array and part Hash.  It retains an order for the fields\nand allows duplicates just …\n"],["CSV::Table","","classes/CSV/Table.html","","<p>A CSV::Table is a two-dimensional data structure for representing CSV\ndocuments.  Tables allow you to …\n"],["Cache","","classes/Cache.html","","<p>The SourceIndex object indexes all the gems available from a particular\nsource (e.g. a list of gem directories, …\n"],["Cal","","classes/Cal.html","",""],["CertStore","","classes/CertStore.html","",""],["ChatClient","","classes/ChatClient.html","",""],["ChatEntry","","classes/ChatEntry.html","",""],["ChatServer","","classes/ChatServer.html","",""],["Checkbutton","","classes/Checkbutton.html","",""],["Class","","classes/Class.html","","<p>Classes in Ruby are first-class objects—each is an instance of class\n<code>Class</code>.\n<p>When a new class is created …\n"],["Clock","","classes/Clock.html","",""],["CloneMenu","","classes/CloneMenu.html","",""],["CommentStripper","","classes/CommentStripper.html","",""],["Comparable","","classes/Comparable.html","","<p>The <code>Comparable</code> mixin is used by classes whose objects may be\nordered. The class must define the <code>&lt;=&gt;</code> …\n"],["Complex","","classes/Complex.html","","<p>A complex number can be represented as a paired real number with imaginary\nunit; a+bi.  Where a is real …\n"],["CompositePublisher","","classes/CompositePublisher.html","","<p>Manage several publishers as a single entity.\n"],["ConditionVariable","","classes/ConditionVariable.html","","<p>ConditionVariable objects augment class Mutex. Using condition variables,\nit is possible to suspend while …\n"],["Continuation","","classes/Continuation.html","","<p>Continuation objects are generated by <code>Kernel#callcc</code>, after\nhaving <code>require</code>d <em>continuation</em>. They hold a …\n"],["Coverage","","classes/Coverage.html","","<p>Coverage provides coverage measurement feature for Ruby. This feature is\nexperimental, so these APIs …\n"],["CrlStore","","classes/CrlStore.html","",""],["Curses","","classes/Curses.html","","<p>Description\n<p>An implementation of the CRT screen handling and optimization library.\n<p>Structures and such …\n"],["Curses::Key","","classes/Curses/Key.html","","<p>a container for the KEY_* values.\n<p>See also system manual for getch(3)\n"],["Curses::MouseEvent","","classes/Curses/MouseEvent.html","","<p>Description\n<p>Curses::MouseEvent\n<p>Example\n"],["Curses::Window","","classes/Curses/Window.html","","<p>Description\n<p>The means by which to create and manage frames or windows. While there may\nbe more than one …\n"],["DBM","","classes/DBM.html","","<p>Documented by mathew meta@pobox.com.\n<p>Introduction\n<p>The DBM class provides a wrapper to a Unix-style dbm …\n"],["DBMError","","classes/DBMError.html","","<p>Exception class used to return errors from the dbm library.\n"],["DEBUGGER__","","classes/DEBUGGER__.html","",""],["DEBUGGER__::Context","","classes/DEBUGGER__/Context.html","",""],["DL","","classes/DL.html","","<p>A bridge to the dlopen() or dynamic library linker function.\n<p>Example\n\n<pre><code>bash $&gt; cat &gt; sum.c &lt;&lt;EOF\ndouble sum(double ...</code></pre>\n"],["DL::BasicTypes","","classes/DL/BasicTypes.html","","<p>Adds basic type aliases to the including class for use with DL::Importer.\n<p>The aliases added are <code>uint</code> and …\n"],["DL::CFunc","","classes/DL/CFunc.html","","<p>A direct accessor to a function in a C library\n<p>Example\n\n<pre><code>libc_so = &quot;/lib64/libc.so.6&quot;\n=&gt; &quot;/lib64/libc.so.6&quot; ...\n</code></pre>\n"],["DL::CParser","","classes/DL/CParser.html","",""],["DL::CPtr","","classes/DL/CPtr.html","","<p>CPtr is a class to handle C pointers\n"],["DL::CStruct","","classes/DL/CStruct.html","",""],["DL::CStructBuilder","","classes/DL/CStructBuilder.html","",""],["DL::CStructEntity","","classes/DL/CStructEntity.html","",""],["DL::CUnion","","classes/DL/CUnion.html","",""],["DL::CUnionEntity","","classes/DL/CUnionEntity.html","",""],["DL::CarriedFunction","","classes/DL/CarriedFunction.html","",""],["DL::CompositeHandler","","classes/DL/CompositeHandler.html","",""],["DL::DLError","","classes/DL/DLError.html","","<p>standard dynamic load exception\n"],["DL::DLTypeError","","classes/DL/DLTypeError.html","","<p>dynamic load incorrect type exception\n"],["DL::Fiddle","","classes/DL/Fiddle.html","",""],["DL::Function","","classes/DL/Function.html","",""],["DL::Handle","","classes/DL/Handle.html","","<p>The DL::Handle is the manner to access the dynamic library\n<p>Example\n<p>Setup\n"],["DL::Importer","","classes/DL/Importer.html","","<p>DL::Importer includes the means to dynamically load libraries and build\nmodules around them including …\n"],["DL::PackInfo","","classes/DL/PackInfo.html","",""],["DL::Packer","","classes/DL/Packer.html","",""],["DL::Stack","","classes/DL/Stack.html","",""],["DL::TempFunction","","classes/DL/TempFunction.html","",""],["DL::ValueUtil","","classes/DL/ValueUtil.html","",""],["DL::Win32Types","","classes/DL/Win32Types.html","","<p>Adds Windows type aliases to the including class for use with DL::Importer.\n<p>The aliases added are:\n<p>ATOM …\n"],["DQEntry","","classes/DQEntry.html","",""],["DRb","","classes/DRb.html","","<p>Overview\n<p>dRuby is a distributed object system for Ruby.  It is written in pure Ruby\nand uses its own protocol. …\n"],["DRb::DRbArray","","classes/DRb/DRbArray.html","",""],["DRb::DRbBadScheme","","classes/DRb/DRbBadScheme.html","","<p>Error raised by a dRuby protocol when it doesn&#39;t support the scheme\nspecified in a URI.  See DRb::DRbProtocol …\n"],["DRb::DRbBadURI","","classes/DRb/DRbBadURI.html","","<p>Error raised by the DRbProtocol module when it cannot find any protocol\nimplementation support the scheme …\n"],["DRb::DRbConn","","classes/DRb/DRbConn.html","","<p>Class handling the connection between a DRbObject and the server the real\nobject lives on.\n<p>This class …\n"],["DRb::DRbConnError","","classes/DRb/DRbConnError.html","","<p>Error raised when an error occurs on the underlying communication protocol.\n"],["DRb::DRbError","","classes/DRb/DRbError.html","","<p>Superclass of all errors raised in the DRb module.\n"],["DRb::DRbIdConv","","classes/DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbIdConv","","classes/DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbMessage","","classes/DRb/DRbMessage.html","","<p>Handler for sending and receiving drb messages.\n<p>This takes care of the low-level marshalling and unmarshalling …\n"],["DRb::DRbObject","","classes/DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObject","","classes/DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObservable","","classes/DRb/DRbObservable.html","",""],["DRb::DRbProtocol","","classes/DRb/DRbProtocol.html","",""],["DRb::DRbRemoteError","","classes/DRb/DRbRemoteError.html","","<p>An exception wrapping an error object\n"],["DRb::DRbSSLSocket","","classes/DRb/DRbSSLSocket.html","",""],["DRb::DRbSSLSocket::SSLConfig","","classes/DRb/DRbSSLSocket/SSLConfig.html","",""],["DRb::DRbServer","","classes/DRb/DRbServer.html","","<p>Class representing a drb server instance.\n<p>A DRbServer must be running in the local process before any …\n"],["DRb::DRbServer::InvokeMethod18Mixin","","classes/DRb/DRbServer/InvokeMethod18Mixin.html","",""],["DRb::DRbServerNotFound","","classes/DRb/DRbServerNotFound.html","","<p>Error raised by the DRb module when an attempt is made to refer to the\ncontext&#39;s current drb server …\n"],["DRb::DRbTCPSocket","","classes/DRb/DRbTCPSocket.html","","<p>The default drb protocol.\n<p>Communicates over a TCP socket.\n"],["DRb::DRbUNIXSocket","","classes/DRb/DRbUNIXSocket.html","",""],["DRb::DRbUndumped","","classes/DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUndumped","","classes/DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUnknown","","classes/DRb/DRbUnknown.html","","<p>Class wrapping a marshalled object whose type is unknown locally.\n<p>If an object is returned by a method …\n"],["DRb::DRbUnknownError","","classes/DRb/DRbUnknownError.html","","<p>An exception wrapping a DRb::DRbUnknown object\n"],["DRb::ExtServ","","classes/DRb/ExtServ.html","",""],["DRb::ExtServManager","","classes/DRb/ExtServManager.html","",""],["DRb::GW","","classes/DRb/GW.html","",""],["DRb::GWIdConv","","classes/DRb/GWIdConv.html","",""],["DRb::HTTP0","","classes/DRb/HTTP0.html","",""],["DRb::HTTP0::Callback","","classes/DRb/HTTP0/Callback.html","",""],["DRb::HTTP0::ClientSide","","classes/DRb/HTTP0/ClientSide.html","",""],["DRb::HTTP0::Server","","classes/DRb/HTTP0/Server.html","",""],["DRb::HTTP0::ServerSide","","classes/DRb/HTTP0/ServerSide.html","",""],["DRb::HTTP0::StrStream","","classes/DRb/HTTP0/StrStream.html","",""],["DRb::TimerIdConv","","classes/DRb/TimerIdConv.html","",""],["DRb::TimerIdConv::TimerHolder2","","classes/DRb/TimerIdConv/TimerHolder2.html","",""],["DRb::TimerIdConv::TimerHolder2::InvalidIndexError","","classes/DRb/TimerIdConv/TimerHolder2/InvalidIndexError.html","",""],["DRbEx","","classes/DRbEx.html","",""],["DRbEx2","","classes/DRbEx2.html","",""],["DRbEx3","","classes/DRbEx3.html","",""],["DRbEx4","","classes/DRbEx4.html","",""],["DRbNamedIdConv","","classes/DRbNamedIdConv.html","",""],["DRbNamedObject","","classes/DRbNamedObject.html","",""],["Data","","classes/Data.html","",""],["Date","","classes/Date.html","","<p>date and datetime class - Tadayoshi Funaba 1998-2011\n<p>&#39;date&#39; provides two classes Date and DateTime …\n"],["DateTime","","classes/DateTime.html","","<p>datetime\n<p>DateTime serialization/deserialization\n"],["Delegator","","classes/Delegator.html","","<p>This library provides three different ways to delegate method calls to an\nobject.  The easiest to use …\n"],["DemoApplication","","classes/DemoApplication.html","",""],["DemoBasic","","classes/DemoBasic.html","",""],["DemoDialog","","classes/DemoDialog.html","",""],["DemoDnD","","classes/DemoDnD.html","",""],["DemoManager","","classes/DemoManager.html","",""],["DemoSelect","","classes/DemoSelect.html","",""],["DemoServlet","","classes/DemoServlet.html","",""],["DemoTree","","classes/DemoTree.html","",""],["DemoVar","","classes/DemoVar.html","",""],["Dhasen","","classes/Dhasen.html","",""],["Digest","","classes/Digest.html","","<p>This module provides a framework for message digest libraries.\n<p>You may want to look at OpenSSL::Digest …\n"],["Digest::Base","","classes/Digest/Base.html","","<p>This abstract class provides a common interface to message digest\nimplementation classes written in  …\n"],["Digest::Class","","classes/Digest/Class.html","","<p>This module stands as a base class for digest implementation classes.\n"],["Digest::HMAC","","classes/Digest/HMAC.html","","<p>digest/hmac.rb\n<p>An experimental implementation of HMAC keyed-hashing algorithm\n<p>Overview\n"],["Digest::Instance","","classes/Digest/Instance.html","","<p>This module provides instance methods for a digest implementation object to\ncalculate message digest …\n"],["Digest::SHA2","","classes/Digest/SHA2.html","","<p>A meta digest provider class for SHA256, SHA384 and SHA512.\n"],["Dir","","classes/Dir.html","","<p>Objects of class <code>Dir</code> are directory streams representing\ndirectories in the underlying file system. They …\n"],["E2MM","","classes/E2MM.html","",""],["ENV","","classes/ENV.html","","<p>ENV is a hash-like accessor for environment variables.\n"],["EOFError","","classes/EOFError.html","","<p>Raised by some IO operations when reaching the end of file. Many IO methods\nexist in two forms,\n<p>one that …\n"],["ERB","","classes/ERB.html","",""],["ERB::DefMethod","","classes/ERB/DefMethod.html","","<p>Utility module to define eRuby script as instance method.\n<p>Example\n<p>example.rhtml:\n"],["ERB::Util","","classes/ERB/Util.html","","<p>A utility module for conversion routines, often handy in HTML generation.\n"],["EmojiTable","","classes/EmojiTable.html","",""],["Encoding","","classes/Encoding.html","",""],["Encoding::CompatibilityError","","classes/Encoding/CompatibilityError.html","","<p>Raised by Encoding and String methods when the source encoding is\nincompatible with the target encoding. …\n"],["Encoding::Converter","","classes/Encoding/Converter.html","",""],["Encoding::ConverterNotFoundError","","classes/Encoding/ConverterNotFoundError.html","","<p>Raised by transcoding methods when a named encoding does not correspond\nwith a known converter.\n"],["Encoding::InvalidByteSequenceError","","classes/Encoding/InvalidByteSequenceError.html","","<p>Raised by Encoding and String methods when the string being transcoded\ncontains a byte invalid for the …\n"],["Encoding::UndefinedConversionError","","classes/Encoding/UndefinedConversionError.html","","<p>Raised by Encoding and String methods when a transcoding operation fails.\n"],["EncodingError","","classes/EncodingError.html","","<p>EncodingError is the base class for encoding errors.\n"],["Enumerable","","classes/Enumerable.html","","<p>The <code>Enumerable</code> mixin provides collection classes with several\ntraversal and searching methods, and with …\n"],["Enumerator","","classes/Enumerator.html","","<p>A class which allows both internal and external iteration.\n<p>An Enumerator can be created by the following …\n"],["Enumerator::Generator","","classes/Enumerator/Generator.html","","<p>Generator\n"],["Enumerator::Yielder","","classes/Enumerator/Yielder.html","","<p>Yielder\n"],["Errno","","classes/Errno.html","","<p>Ruby exception objects are subclasses of <code>Exception</code>. However,\noperating systems typically report errors …\n"],["Errno::ECONNABORTED","","classes/Errno/ECONNABORTED.html","","<p>Client sent TCP reset (RST) before server has accepted the connection\nrequested by client.\n"],["Errno::ECONNRESET","","classes/Errno/ECONNRESET.html","","<p>Remote host reset the connection request.\n"],["Errno::EPROTO","","classes/Errno/EPROTO.html","","<p>Protocol error.\n"],["Etc","","classes/Etc.html","","<p>The etc module provides access to information from the running OS.\n<p>Documented by mathew &lt;meta@pobox.com&gt;. …\n"],["Exception","","classes/Exception.html","","<p>Descendants of class <code>Exception</code> are used to communicate between\n<code>raise</code> methods and <code>rescue</code> statements in …\n"],["Exception2MessageMapper","","classes/Exception2MessageMapper.html","",""],["Exports","","classes/Exports.html","",""],["Exports::Bcc","","classes/Exports/Bcc.html","",""],["Exports::Cygwin","","classes/Exports/Cygwin.html","",""],["Exports::Mingw","","classes/Exports/Mingw.html","",""],["Exports::Mswin","","classes/Exports/Mswin.html","",""],["FalseClass","","classes/FalseClass.html","","<p>The global value <code>false</code> is the only instance of class\n<code>FalseClass</code> and represents a logically false value …\n"],["Fcntl","","classes/Fcntl.html","","<p>Fcntl loads the constants defined in the system&#39;s &lt;fcntl.h&gt; C\nheader file, and used with both …\n"],["Fiber","","classes/Fiber.html","","<p>Fibers are primitives for implementing light weight cooperative concurrency\nin Ruby. Basically they are …\n"],["FiberError","","classes/FiberError.html","","<p>Raised when an invalid operation is attempted on a Fiber, in particular\nwhen attempting to call/resume …\n"],["Fiddle","","classes/Fiddle.html","","<p>Description\n<p>A libffi wrapper.\n"],["Fiddle::Closure","","classes/Fiddle/Closure.html","","<p>Description\n<p>An FFI closure wrapper, for handling callbacks.\n<p>Example\n"],["Fiddle::Closure::BlockCaller","","classes/Fiddle/Closure/BlockCaller.html","","<p>Extends Fiddle::Closure to allow for building the closure in a block\n"],["Fiddle::Function","","classes/Fiddle/Function.html","","<p>Description\n<p>A representation of a C function\n<p>Examples\n"],["Fiddle::Pointer","","classes/DL/CPtr.html","","<p>CPtr is a class to handle C pointers\n"],["File","","classes/File.html","","<p>A <code>File</code> is an abstraction of any file object accessible by the\nprogram and is closely associated with …\n"],["File::Constants","","classes/File/Constants.html","",""],["File::Stat","","classes/File/Stat.html","","<p>Objects of class <code>File::Stat</code> encapsulate common status\ninformation for <code>File</code> objects. The information is …\n"],["FileTest","","classes/FileTest.html","","<p><code>FileTest</code> implements file test operations similar to those used\nin <code>File::Stat</code>. It exists as a standalone …\n"],["FileUtils","","classes/FileUtils.html","","<p>fileutils.rb\n<p>Copyright © 2000-2007 Minero Aoki\n<p>This program is free software. You can distribute/modify …\n"],["FileUtils::DryRun","","classes/FileUtils/DryRun.html","","<p>This module has all methods of FileUtils module, but never changes\nfiles/directories, with printing message …\n"],["FileUtils::LowMethods","","classes/FileUtils/LowMethods.html","",""],["FileUtils::NoWrite","","classes/FileUtils/NoWrite.html","","<p>This module has all methods of FileUtils module, but never changes\nfiles/directories.  This equates to …\n"],["FileUtils::StreamUtils_","","classes/FileUtils/StreamUtils_.html","",""],["FileUtils::Verbose","","classes/FileUtils/Verbose.html","","<p>This module has all methods of FileUtils module, but it outputs messages\nbefore acting.  This equates …\n"],["FileViewer","","classes/FileViewer.html","","<p>A curses based file viewer\n"],["Find","","classes/Find.html","","<p>The <code>Find</code> module supports the top-down traversal of a set of\nfile paths.\n<p>For example, to total the size …\n"],["Fixnum","","classes/Fixnum.html","","<p>When mathn is required, Fixnum&#39;s division and exponentiation are\nenhanced to return more precise …\n"],["Float","","classes/Float.html","","<p>When mathn is required, Float is changed to handle Complex numbers.\n<p><code>Float</code> objects represent inexact real …\n"],["FloatDomainError","","classes/FloatDomainError.html","","<p>Raised when attempting to convert special float values (in particular\ninfinite or NaN) to numerical classes …\n"],["Font","","classes/Font.html","",""],["Foo","","classes/Foo.html","","<p>Foo.private :printf\n"],["Foo::Unknown","","classes/Foo/Unknown.html","",""],["FooError","","classes/FooError.html","",""],["Forwardable","","classes/Forwardable.html","","<p>The Forwardable module provides delegation of specified methods to a\ndesignated object, using the methods …\n"],["Front","","classes/Front.html","",""],["Function","","classes/Function.html","",""],["GC","","classes/GC.html","","<p>The <code>GC</code> module provides an interface to Ruby&#39;s mark and\nsweep garbage collection mechanism. Some of …\n"],["GC::Profiler","","classes/GC/Profiler.html","","<p>The GC profiler provides access to information on GC runs including time,\nlength and object space size. …\n"],["GDBM","","classes/GDBM.html","","<p>Summary\n<p>Ruby extension for GNU dbm (gdbm) – a simple database engine for storing\nkey-value pairs on disk. …\n"],["GDBMError","","classes/GDBMError.html","",""],["GDBMFatalError","","classes/GDBMFatalError.html","",""],["GServer","","classes/GServer.html","","<p>GServer implements a generic server, featuring thread pool management,\nsimple logging, and multi-server …\n"],["Gem","","classes/Gem.html","","<p>Provides a single method <code>deprecate</code> to be used to declare when\nsomething is going away.\n\n<pre><code>class Legacy\n  ...\n</code></pre>\n"],["Gem::Builder","","classes/Gem/Builder.html","","<p>The Builder class processes RubyGem specification files to produce a .gem\nfile.\n"],["Gem::Command","","classes/Gem/Command.html","","<p>Base class for all Gem commands.  When creating a new gem command, define\n#new, #execute, #arguments …\n"],["Gem::CommandLineError","","classes/Gem/CommandLineError.html","",""],["Gem::CommandManager","","classes/Gem/CommandManager.html","","<p>The command manager registers and installs all the individual sub-commands\nsupported by the gem command. …\n"],["Gem::Commands","","classes/Gem/Commands.html","",""],["Gem::Commands::BuildCommand","","classes/Gem/Commands/BuildCommand.html","",""],["Gem::Commands::CertCommand","","classes/Gem/Commands/CertCommand.html","",""],["Gem::Commands::CheckCommand","","classes/Gem/Commands/CheckCommand.html","",""],["Gem::Commands::CleanupCommand","","classes/Gem/Commands/CleanupCommand.html","",""],["Gem::Commands::ContentsCommand","","classes/Gem/Commands/ContentsCommand.html","",""],["Gem::Commands::DependencyCommand","","classes/Gem/Commands/DependencyCommand.html","",""],["Gem::Commands::EnvironmentCommand","","classes/Gem/Commands/EnvironmentCommand.html","",""],["Gem::Commands::FetchCommand","","classes/Gem/Commands/FetchCommand.html","",""],["Gem::Commands::GenerateIndexCommand","","classes/Gem/Commands/GenerateIndexCommand.html","","<p>Generates a index files for use as a gem server.\n<p>See `gem help generate_index`\n"],["Gem::Commands::HelpCommand","","classes/Gem/Commands/HelpCommand.html","",""],["Gem::Commands::InstallCommand","","classes/Gem/Commands/InstallCommand.html","","<p>Gem installer command line tool\n<p>See `gem help install`\n"],["Gem::Commands::ListCommand","","classes/Gem/Commands/ListCommand.html","","<p>An alternate to Gem::Commands::QueryCommand that searches for gems starting\nwith the the supplied argument. …\n"],["Gem::Commands::LockCommand","","classes/Gem/Commands/LockCommand.html","",""],["Gem::Commands::OutdatedCommand","","classes/Gem/Commands/OutdatedCommand.html","",""],["Gem::Commands::OwnerCommand","","classes/Gem/Commands/OwnerCommand.html","",""],["Gem::Commands::PristineCommand","","classes/Gem/Commands/PristineCommand.html","",""],["Gem::Commands::PushCommand","","classes/Gem/Commands/PushCommand.html","",""],["Gem::Commands::QueryCommand","","classes/Gem/Commands/QueryCommand.html","",""],["Gem::Commands::RdocCommand","","classes/Gem/Commands/RdocCommand.html","",""],["Gem::Commands::SearchCommand","","classes/Gem/Commands/SearchCommand.html","",""],["Gem::Commands::ServerCommand","","classes/Gem/Commands/ServerCommand.html","",""],["Gem::Commands::SetupCommand","","classes/Gem/Commands/SetupCommand.html","","<p>Installs RubyGems itself.  This command is ordinarily only available from a\nRubyGems checkout or tarball. …\n"],["Gem::Commands::SourcesCommand","","classes/Gem/Commands/SourcesCommand.html","",""],["Gem::Commands::SpecificationCommand","","classes/Gem/Commands/SpecificationCommand.html","",""],["Gem::Commands::StaleCommand","","classes/Gem/Commands/StaleCommand.html","",""],["Gem::Commands::UninstallCommand","","classes/Gem/Commands/UninstallCommand.html","","<p>Gem uninstaller command line tool\n<p>See `gem help uninstall`\n"],["Gem::Commands::UnpackCommand","","classes/Gem/Commands/UnpackCommand.html","",""],["Gem::Commands::UpdateCommand","","classes/Gem/Commands/UpdateCommand.html","",""],["Gem::Commands::WhichCommand","","classes/Gem/Commands/WhichCommand.html","",""],["Gem::ConfigFile","","classes/Gem/ConfigFile.html","",""],["Gem::ConsoleUI","","classes/Gem/ConsoleUI.html","","<p>Subclass of StreamUI that instantiates the user interaction using STDIN,\nSTDOUT, and STDERR.\n"],["Gem::DefaultUserInteraction","","classes/Gem/DefaultUserInteraction.html","","<p>Module that defines the default UserInteraction.  Any class including this\nmodule will have access to …\n"],["Gem::Dependency","","classes/Gem/Dependency.html","","<p>The Dependency class holds a Gem name and a Gem::Requirement.\n"],["Gem::DependencyError","","classes/Gem/DependencyError.html","",""],["Gem::DependencyInstaller","","classes/Gem/DependencyInstaller.html","","<p>Installs a gem along with all its dependencies from local and remote gems.\n"],["Gem::DependencyList","","classes/Gem/DependencyList.html","","<p>Gem::DependencyList is used for installing and uninstalling gems in the\ncorrect order to avoid conflicts. …\n"],["Gem::DependencyRemovalException","","classes/Gem/DependencyRemovalException.html","",""],["Gem::Deprecate","","classes/Gem/Deprecate.html","",""],["Gem::DocManager","","classes/Gem/DocManager.html","","<p>The documentation manager generates RDoc and RI for RubyGems.\n"],["Gem::DocumentError","","classes/Gem/DocumentError.html","",""],["Gem::EndOfYAMLException","","classes/Gem/EndOfYAMLException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::ErrorReason","","classes/Gem/ErrorReason.html","",""],["Gem::Exception","","classes/Gem/Exception.html","","<p>Base exception class for RubyGems.  All exception raised by RubyGems are a\nsubclass of this one.\n"],["Gem::Ext","","classes/Gem/Ext.html","","<p>Classes for building C extensions live here.\n"],["Gem::Ext::Builder","","classes/Gem/Ext/Builder.html","",""],["Gem::Ext::ConfigureBuilder","","classes/Gem/Ext/ConfigureBuilder.html","",""],["Gem::Ext::ExtConfBuilder","","classes/Gem/Ext/ExtConfBuilder.html","",""],["Gem::Ext::RakeBuilder","","classes/Gem/Ext/RakeBuilder.html","",""],["Gem::FilePermissionError","","classes/Gem/FilePermissionError.html","","<p>Signals that a file permission error is preventing the user from installing\nin the requested directories. …\n"],["Gem::Format","","classes/Gem/Format.html","","<p>Gem::Format knows the guts of the RubyGem .gem file format and provides the\ncapability to read gem files …\n"],["Gem::FormatException","","classes/Gem/FormatException.html","","<p>Used to raise parsing and loading errors\n"],["Gem::GemNotFoundException","","classes/Gem/GemNotFoundException.html","",""],["Gem::GemNotInHomeException","","classes/Gem/GemNotInHomeException.html","","<p>Raised when attempting to uninstall a gem that isn&#39;t in GEM_HOME.\n"],["Gem::GemPathSearcher","","classes/Gem/GemPathSearcher.html","","<p>GemPathSearcher has the capability to find loadable files inside gems.  It\ngenerates data up front to …\n"],["Gem::GemRunner","","classes/Gem/GemRunner.html","","<p>Run an instance of the gem program.\n<p>Gem::GemRunner is only intended for internal use by RubyGems itself. …\n"],["Gem::GemcutterUtilities","","classes/Gem/GemcutterUtilities.html","",""],["Gem::Indexer","","classes/Gem/Indexer.html","","<p>Top level class for building the gem repository index.\n"],["Gem::InstallError","","classes/Gem/InstallError.html","",""],["Gem::InstallUpdateOptions","","classes/Gem/InstallUpdateOptions.html","","<p>Mixin methods for install and update options for Gem::Commands\n"],["Gem::Installer","","classes/Gem/Installer.html","","<p>The installer class processes RubyGem .gem files and installs the files\ncontained in the .gem into the …\n"],["Gem::Installer::ExtensionBuildError","","classes/Gem/Installer/ExtensionBuildError.html","","<p>Raised when there is an error while building extensions.\n"],["Gem::InvalidSpecificationException","","classes/Gem/InvalidSpecificationException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::LoadError","","classes/Gem/LoadError.html","",""],["Gem::LocalRemoteOptions","","classes/Gem/LocalRemoteOptions.html","","<p>Mixin methods for local and remote Gem::Command options.\n"],["Gem::MockGemUi","","classes/Gem/MockGemUi.html","","<p>This Gem::StreamUI subclass records input and output to StringIO for\nretrieval during tests.\n"],["Gem::MockGemUi::SystemExitException","","classes/Gem/MockGemUi/SystemExitException.html","",""],["Gem::MockGemUi::TTY","","classes/Gem/MockGemUi/TTY.html","",""],["Gem::MockGemUi::TermError","","classes/Gem/MockGemUi/TermError.html","",""],["Gem::NoAliasYAMLTree","","classes/Gem/NoAliasYAMLTree.html","",""],["Gem::OldFormat","","classes/Gem/OldFormat.html","","<p>The format class knows the guts of the RubyGem .gem file format and\nprovides the capability to read gem …\n"],["Gem::OperationNotSupportedError","","classes/Gem/OperationNotSupportedError.html","",""],["Gem::Package","","classes/Gem/Package.html","",""],["Gem::Package::BadCheckSum","","classes/Gem/Package/BadCheckSum.html","",""],["Gem::Package::ClosedIO","","classes/Gem/Package/ClosedIO.html","",""],["Gem::Package::Error","","classes/Gem/Package/Error.html","",""],["Gem::Package::FSyncDir","","classes/Gem/Package/FSyncDir.html","",""],["Gem::Package::FormatError","","classes/Gem/Package/FormatError.html","",""],["Gem::Package::NonSeekableIO","","classes/Gem/Package/NonSeekableIO.html","",""],["Gem::Package::TarHeader","","classes/Gem/Package/TarHeader.html","","<p>A header for a tar file\n"],["Gem::Package::TarInput","","classes/Gem/Package/TarInput.html","",""],["Gem::Package::TarInvalidError","","classes/Gem/Package/TarInvalidError.html","","<p>Raised when a tar file is corrupt\n"],["Gem::Package::TarOutput","","classes/Gem/Package/TarOutput.html","","<p>TarOutput is a wrapper to TarWriter that builds gem-format tar file.\n<p>Gem-format tar files contain the …\n"],["Gem::Package::TarReader","","classes/Gem/Package/TarReader.html","","<p>TarReader reads tar files and allows iteration over their items\n"],["Gem::Package::TarReader::Entry","","classes/Gem/Package/TarReader/Entry.html","","<p>Class for reading entries out of a tar file\n"],["Gem::Package::TarReader::UnexpectedEOF","","classes/Gem/Package/TarReader/UnexpectedEOF.html","","<p>Raised if the tar IO is not seekable\n"],["Gem::Package::TarWriter","","classes/Gem/Package/TarWriter.html","","<p>Allows writing of tar files\n"],["Gem::Package::TarWriter::BoundedStream","","classes/Gem/Package/TarWriter/BoundedStream.html","","<p>IO wrapper that allows writing a limited amount of data\n"],["Gem::Package::TarWriter::FileOverflow","","classes/Gem/Package/TarWriter/FileOverflow.html","",""],["Gem::Package::TarWriter::RestrictedStream","","classes/Gem/Package/TarWriter/RestrictedStream.html","","<p>IO wrapper that provides only #write\n"],["Gem::Package::TooLongFileName","","classes/Gem/Package/TooLongFileName.html","",""],["Gem::PackageTask","","classes/Gem/PackageTask.html","","<p>Create a package based upon a Gem::Specification.  Gem packages, as well as\nzip files and tar/gzipped …\n"],["Gem::PathSupport","","classes/Gem/PathSupport.html","","<p>Gem::PathSupport facilitates the GEM_HOME and GEM_PATH environment settings\nto the rest of RubyGems. …\n"],["Gem::Platform","","classes/Gem/Platform.html","","<p>Available list of platforms for targeting Gem installations.\n"],["Gem::PlatformMismatch","","classes/Gem/PlatformMismatch.html","","<p>Generated when trying to lookup a gem to indicate that the gem was found,\nbut that it isn&#39;t usable …\n"],["Gem::RemoteError","","classes/Gem/RemoteError.html","","<p>Signals that a remote operation cannot be conducted, probably due to not\nbeing connected (or just not …\n"],["Gem::RemoteFetcher","","classes/Gem/RemoteFetcher.html","","<p>RemoteFetcher handles the details of fetching gems and gem information from\na remote source.\n"],["Gem::RemoteFetcher::FetchError","","classes/Gem/RemoteFetcher/FetchError.html","","<p>A FetchError exception wraps up the various possible IO and HTTP failures\nthat could happen while downloading …\n"],["Gem::RemoteInstallationCancelled","","classes/Gem/RemoteInstallationCancelled.html","",""],["Gem::RemoteInstallationSkipped","","classes/Gem/RemoteInstallationSkipped.html","",""],["Gem::RemoteSourceException","","classes/Gem/RemoteSourceException.html","","<p>Represents an error communicating via HTTP.\n"],["Gem::RequirePathsBuilder","","classes/Gem/RequirePathsBuilder.html","","<p>TODO: remove after 1.9.1 dropped\n"],["Gem::Requirement","","classes/Gem/Requirement.html","",""],["Gem::SSL","","classes/Gem/SSL.html","",""],["Gem::SSL::PKEY_RSA","","classes/OpenSSL/PKey/RSA.html","","<p>RSA is an asymmetric public key algorithm that has been formalized in RFC\n3447. It is in widespread use …\n"],["Gem::Security","","classes/Gem/Security.html","","<p>Signed Gems README\n<p>Table of Contents\n<p>Overview\n"],["Gem::Security::Exception","","classes/Gem/Security/Exception.html","","<p>Gem::Security default exception type\n"],["Gem::Security::Policy","","classes/Gem/Security/Policy.html","","<p>A Gem::Security::Policy object encapsulates the settings for verifying\nsigned gem files.  This is the …\n"],["Gem::Security::Signer","","classes/Gem/Security/Signer.html","","<p>Basic OpenSSL-based package signing class.\n"],["Gem::Server","","classes/Gem/Server.html","","<p>Gem::Server and allows users to serve gems for consumption by `gem\n–remote-install`.\n<p>gem_server starts …\n"],["Gem::SilentUI","","classes/Gem/SilentUI.html","","<p>SilentUI is a UI choice that is absolutely silent.\n"],["Gem::SourceIndex","","classes/Gem/SourceIndex.html","","<p>The SourceIndex object indexes all the gems available from a particular\nsource (e.g. a list of gem directories, …\n"],["Gem::SpecFetcher","","classes/Gem/SpecFetcher.html","","<p>SpecFetcher handles metadata updates from remote gem repositories.\n"],["Gem::Specification","","classes/Gem/Specification.html","","<p>The Specification class contains the metadata for a Gem.  Typically defined\nin a .gemspec file or a  …\n"],["Gem::StreamUI","","classes/Gem/StreamUI.html","","<p>Gem::StreamUI implements a simple stream based user interface.\n"],["Gem::StreamUI::SilentDownloadReporter","","classes/Gem/StreamUI/SilentDownloadReporter.html","","<p>An absolutely silent download reporter.\n"],["Gem::StreamUI::SilentProgressReporter","","classes/Gem/StreamUI/SilentProgressReporter.html","","<p>An absolutely silent progress reporter.\n"],["Gem::StreamUI::SimpleProgressReporter","","classes/Gem/StreamUI/SimpleProgressReporter.html","","<p>A basic dotted progress reporter.\n"],["Gem::StreamUI::VerboseDownloadReporter","","classes/Gem/StreamUI/VerboseDownloadReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::StreamUI::VerboseProgressReporter","","classes/Gem/StreamUI/VerboseProgressReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::SystemExitException","","classes/Gem/SystemExitException.html","","<p>Raised to indicate that a system exit should occur with the specified\nexit_code\n"],["Gem::Text","","classes/Gem/Text.html","","<p>A collection of text-wrangling methods\n"],["Gem::Uninstaller","","classes/Gem/Uninstaller.html","","<p>An Uninstaller.\n<p>The uninstaller fires pre and post uninstall hooks.  Hooks can be added\neither through …\n"],["Gem::UserInteraction","","classes/Gem/UserInteraction.html","","<p>Make the default UI accessible without the “ui.” prefix.  Classes including\nthis module may …\n"],["Gem::Validator","","classes/Gem/Validator.html","","<p>Validator performs various gem file and gem database validation\n"],["Gem::VerificationError","","classes/Gem/VerificationError.html","",""],["Gem::VersionOption","","classes/Gem/VersionOption.html","","<p>Mixin methods for –version and –platform Gem::Command options.\n"],["GetoptLong","","classes/GetoptLong.html","","<p>The GetoptLong class allows you to parse command line options similarly to\nthe GNU getopt_long() C library …\n"],["GetoptLong::AmbiguousOption","","classes/GetoptLong/AmbiguousOption.html","",""],["GetoptLong::Error","","classes/GetoptLong/Error.html","","<p>Error types.\n"],["GetoptLong::InvalidOption","","classes/GetoptLong/InvalidOption.html","",""],["GetoptLong::MissingArgument","","classes/GetoptLong/MissingArgument.html","",""],["GetoptLong::NeedlessArgument","","classes/GetoptLong/NeedlessArgument.html","",""],["Grid","","classes/Grid.html","",""],["Hash","","classes/Hash.html","","<p>ruby 1.8.x –&gt; use Hash#index\n<p>A <code>Hash</code> is a collection of key-value pairs. It is similar to an\n<code>Array</code> …\n"],["Hash::Ordered","","classes/Hash/Ordered.html","",""],["HelloServlet","","classes/HelloServlet.html","",""],["HelloWorld","","classes/HelloWorld.html","",""],["Hi_Exception","","classes/Hi_Exception.html","",""],["Hoge","","classes/Hoge.html","",""],["HttpServer","","classes/HttpServer.html","",""],["HttpServer::Request","","classes/HttpServer/Request.html","","<p>Classes ————————————————-\n"],["HttpServer::Response","","classes/HttpServer/Response.html","",""],["HttpServer::Table","","classes/HttpServer/Table.html","","<p>a case-insensitive Hash class for HTTP header\n"],["IEHandler","","classes/IEHandler.html","",""],["IE_CONST","","classes/IE_CONST.html","","<p>WIN32OLE.const_load(ie) WIN32OLE.constants.sort.each do |c|\n\n<pre><code>puts &quot;#{c} = #{WIN32OLE.const_get(c)}&quot;</code></pre>\n<p>end …\n"],["INTERP","","classes/INTERP.html","",""],["INTERP","","classes/INTERP.html","",""],["INTERP","","classes/INTERP.html","",""],["IO","","classes/IO.html","","<p>Class <code>IO</code> is the basis for all input and output in Ruby. An I/O\nstream may be <em>duplexed</em> (that is, bidirectional), …\n"],["IO::WaitReadable","","classes/IO/WaitReadable.html","",""],["IO::WaitWritable","","classes/IO/WaitWritable.html","",""],["IO::readable","","classes/IO/readable.html","",""],["IO::writable","","classes/IO/writable.html","",""],["IOError","","classes/IOError.html","","<p>Raised when an IO operation fails.\n\n<pre><code>File.open(&quot;/etc/hosts&quot;) {|f| f &lt;&lt; &quot;example&quot;}\n  #=&gt; IOError: not opened ...\n</code></pre>\n"],["IPAddr","","classes/IPAddr.html","","<p>IPAddr provides a set of methods to manipulate an IP address.  Both IPv4\nand IPv6 are supported.\n<p>Example …\n"],["IPSocket","","classes/IPSocket.html","","<p>IPSocket is the super class of TCPSocket and UDPSocket.\n"],["IRB","","classes/IRB.html","","\n<pre><code>nop.rb -\n    $Release Version: 0.9.6$\n    $Revision$\n    by Keiju ISHITSUKA(keiju@ruby-lang.org)</code></pre>\n<p>–\n\n<pre><code>irb/ext/cb.rb ...</code></pre>\n"],["IRB::Abort","","classes/IRB/Abort.html","",""],["IRB::Context","","classes/IRB/Context.html","",""],["IRB::ContextExtender","","classes/IRB/ContextExtender.html","","<p>extension support for Context\n"],["IRB::ContextExtender::CE","","classes/IRB/ContextExtender.html","","<p>extension support for Context\n"],["IRB::ExtendCommand","","classes/IRB/ExtendCommand.html","",""],["IRB::ExtendCommand::ChangeWorkspace","","classes/IRB/ExtendCommand/ChangeWorkspace.html","",""],["IRB::ExtendCommand::CurrentWorkingWorkspace","","classes/IRB/ExtendCommand/CurrentWorkingWorkspace.html","",""],["IRB::ExtendCommand::Foreground","","classes/IRB/ExtendCommand/Foreground.html","",""],["IRB::ExtendCommand::Fork","","classes/IRB/ExtendCommand/Fork.html","",""],["IRB::ExtendCommand::Help","","classes/IRB/ExtendCommand/Help.html","",""],["IRB::ExtendCommand::IrbCommand","","classes/IRB/ExtendCommand/IrbCommand.html","",""],["IRB::ExtendCommand::Jobs","","classes/IRB/ExtendCommand/Jobs.html","",""],["IRB::ExtendCommand::Kill","","classes/IRB/ExtendCommand/Kill.html","",""],["IRB::ExtendCommand::Load","","classes/IRB/ExtendCommand/Load.html","",""],["IRB::ExtendCommand::Nop","","classes/IRB/ExtendCommand/Nop.html","",""],["IRB::ExtendCommand::PopWorkspace","","classes/IRB/ExtendCommand/PopWorkspace.html","",""],["IRB::ExtendCommand::PushWorkspace","","classes/IRB/ExtendCommand/PushWorkspace.html","",""],["IRB::ExtendCommand::Require","","classes/IRB/ExtendCommand/Require.html","",""],["IRB::ExtendCommand::Source","","classes/IRB/ExtendCommand/Source.html","",""],["IRB::ExtendCommand::Workspaces","","classes/IRB/ExtendCommand/Workspaces.html","",""],["IRB::ExtendCommandBundle","","classes/IRB/ExtendCommandBundle.html","","<p>IRB extended command\n"],["IRB::ExtendCommandBundle::EXCB","","classes/IRB/ExtendCommandBundle.html","","<p>IRB extended command\n"],["IRB::FileInputMethod","","classes/IRB/FileInputMethod.html","",""],["IRB::Frame","","classes/IRB/Frame.html","",""],["IRB::History","","classes/IRB/History.html","",""],["IRB::HistorySavingAbility","","classes/IRB/HistorySavingAbility.html","",""],["IRB::InputCompletor","","classes/IRB/InputCompletor.html","",""],["IRB::InputMethod","","classes/IRB/InputMethod.html","",""],["IRB::Inspector","","classes/IRB/Inspector.html","",""],["IRB::Irb","","classes/IRB/Irb.html","","<p>irb interpreter main routine\n"],["IRB::IrbLoader","","classes/IRB/IrbLoader.html","",""],["IRB::JobManager","","classes/IRB/JobManager.html","","<p>job management class\n"],["IRB::LoadAbort","","classes/IRB/LoadAbort.html","",""],["IRB::Locale","","classes/IRB/Locale.html","",""],["IRB::MethodExtender","","classes/IRB/MethodExtender.html","",""],["IRB::Notifier","","classes/IRB/Notifier.html","",""],["IRB::Notifier::AbstractNotifier","","classes/IRB/Notifier/AbstractNotifier.html","",""],["IRB::Notifier::CompositeNotifier","","classes/IRB/Notifier/CompositeNotifier.html","",""],["IRB::Notifier::LeveledNotifier","","classes/IRB/Notifier/LeveledNotifier.html","",""],["IRB::Notifier::NoMsgNotifier","","classes/IRB/Notifier/NoMsgNotifier.html","",""],["IRB::OutputMethod","","classes/IRB/OutputMethod.html","","<p>OutputMethod\n\n<pre><code>StdioOutputMethod</code></pre>\n"],["IRB::ReadlineInputMethod","","classes/IRB/ReadlineInputMethod.html","",""],["IRB::SLex","","classes/IRB/SLex.html","",""],["IRB::SLex::Node","","classes/IRB/SLex/Node.html","",""],["IRB::StdioInputMethod","","classes/IRB/StdioInputMethod.html","",""],["IRB::StdioOutputMethod","","classes/IRB/StdioOutputMethod.html","",""],["IRB::WorkSpace","","classes/IRB/WorkSpace.html","",""],["IXMLDOMAttribute","","classes/IXMLDOMAttribute.html","",""],["IXMLDOMCDATASection","","classes/IXMLDOMCDATASection.html","",""],["IXMLDOMCharacterData","","classes/IXMLDOMCharacterData.html","",""],["IXMLDOMComment","","classes/IXMLDOMComment.html","",""],["IXMLDOMDocument","","classes/IXMLDOMDocument.html","",""],["IXMLDOMDocumentFragment","","classes/IXMLDOMDocumentFragment.html","",""],["IXMLDOMDocumentType","","classes/IXMLDOMDocumentType.html","",""],["IXMLDOMElement","","classes/IXMLDOMElement.html","",""],["IXMLDOMEntity","","classes/IXMLDOMEntity.html","",""],["IXMLDOMEntityReference","","classes/IXMLDOMEntityReference.html","",""],["IXMLDOMImplementation","","classes/IXMLDOMImplementation.html","",""],["IXMLDOMNamedNodeMap","","classes/IXMLDOMNamedNodeMap.html","",""],["IXMLDOMNode","","classes/IXMLDOMNode.html","","<p>Core DOM node interface\n"],["IXMLDOMNodeList","","classes/IXMLDOMNodeList.html","",""],["IXMLDOMNotation","","classes/IXMLDOMNotation.html","",""],["IXMLDOMParseError","","classes/IXMLDOMParseError.html","","<p>structure for reporting parser errors\n"],["IXMLDOMProcessingInstruction","","classes/IXMLDOMProcessingInstruction.html","",""],["IXMLDOMText","","classes/IXMLDOMText.html","",""],["IXMLHttpRequest","","classes/IXMLHttpRequest.html","","<p>IXMLHttpRequest Interface\n"],["IXTLRuntime","","classes/IXTLRuntime.html","","<p>XTL runtime object\n"],["Iconv","","classes/Iconv.html","","<p>Summary\n<p>Ruby extension for charset conversion.\n<p>Abstract\n"],["Iconv::BrokenLibrary","","classes/Iconv/BrokenLibrary.html","","<p>Detected a bug of underlying iconv(3) libray.\n<p>returns an error without setting errno properly\n\n"],["Iconv::Failure","","classes/Iconv/Failure.html","","<p>Base attributes for Iconv exceptions.\n"],["Iconv::IllegalSequence","","classes/Iconv/IllegalSequence.html","","<p>Input conversion stopped due to an input byte that does not belong to the\ninput codeset, or the output …\n"],["Iconv::InvalidCharacter","","classes/Iconv/InvalidCharacter.html","","<p>Input conversion stopped due to an incomplete character or shift sequence\nat the end of the input buffer. …\n"],["Iconv::InvalidEncoding","","classes/Iconv/InvalidEncoding.html","","<p>Requested coding-system is not available on this system.\n"],["Iconv::OutOfRange","","classes/Iconv/OutOfRange.html","","<p>Iconv library internal error.  Must not occur.\n"],["IndexError","","classes/IndexError.html","","<p>Raised when the given index is invalid.\n\n<pre><code>a = [:foo, :bar]\na.fetch(0)   #=&gt; :foo\na[4]         #=&gt; nil\na.fetch(4) ...\n</code></pre>\n"],["Inspector","","classes/Inspector.html","",""],["Integer","","classes/Integer.html","","<p>Add double dispatch to Integer\n<p><code>Integer</code> is the basis for the two concrete classes that hold\nwhole numbers, …\n"],["Interrupt","","classes/Interrupt.html","","<p>Raised with the interrupt signal is received, typically because the user\npressed on Control-C (on most …\n"],["JISX0208","","classes/JISX0208.html","",""],["JISX0208::Char","","classes/JISX0208/Char.html","",""],["JSON","","classes/JSON.html","",""],["JSON::CircularDatastructure","","classes/JSON/CircularDatastructure.html","",""],["JSON::Ext","","classes/JSON/Ext.html","","<p>This module holds all the modules/classes that implement JSON&#39;s\nfunctionality as C extensions.\n"],["JSON::Ext::Generator","","classes/JSON/Ext/Generator.html","","<p>This is the JSON generator implemented as a C extension. It can be\nconfigured to be used by setting\n\n<pre><code>JSON.generator ...</code></pre>\n"],["JSON::Ext::Generator::GeneratorMethods","","classes/JSON/Ext/Generator/GeneratorMethods.html","",""],["JSON::Ext::Generator::GeneratorMethods::Array","","classes/JSON/Ext/Generator/GeneratorMethods/Array.html","",""],["JSON::Ext::Generator::GeneratorMethods::Bignum","","classes/JSON/Ext/Generator/GeneratorMethods/Bignum.html","",""],["JSON::Ext::Generator::GeneratorMethods::FalseClass","","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html","",""],["JSON::Ext::Generator::GeneratorMethods::Fixnum","","classes/JSON/Ext/Generator/GeneratorMethods/Fixnum.html","",""],["JSON::Ext::Generator::GeneratorMethods::Float","","classes/JSON/Ext/Generator/GeneratorMethods/Float.html","",""],["JSON::Ext::Generator::GeneratorMethods::Hash","","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html","",""],["JSON::Ext::Generator::GeneratorMethods::NilClass","","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html","",""],["JSON::Ext::Generator::GeneratorMethods::Object","","classes/JSON/Ext/Generator/GeneratorMethods/Object.html","",""],["JSON::Ext::Generator::GeneratorMethods::String","","classes/JSON/Ext/Generator/GeneratorMethods/String.html","",""],["JSON::Ext::Generator::GeneratorMethods::String::Extend","","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html","",""],["JSON::Ext::Generator::GeneratorMethods::TrueClass","","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html","",""],["JSON::Ext::Generator::State","","classes/JSON/Ext/Generator/State.html","",""],["JSON::Ext::Parser","","classes/JSON/Ext/Parser.html","","<p>This is the JSON parser implemented as a C extension. It can be configured\nto be used by setting\n\n<pre><code>JSON.parser ...</code></pre>\n"],["JSON::GeneratorError","","classes/JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["JSON::JSONError","","classes/JSON/JSONError.html","","<p>The base exception for JSON errors.\n"],["JSON::MissingUnicodeSupport","","classes/JSON/MissingUnicodeSupport.html","","<p>This exception is raised if the required unicode support is missing on the\nsystem. Usually this means …\n"],["JSON::NestingError","","classes/JSON/NestingError.html","","<p>This exception is raised if the nesting of parsed data structures is too\ndeep.\n"],["JSON::ParserError","","classes/JSON/ParserError.html","","<p>This exception is raised if a parser error occurs.\n"],["JSON::UnparserError","","classes/JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["Jacobian","","classes/Jacobian.html","","<p>require &#39;bigdecimal/jacobian&#39;\n<p>Provides methods to compute the Jacobian matrix of a set of equations …\n"],["Kconv","","classes/Kconv.html","","<p>Kanji Converter for Ruby.\n"],["Kernel","","classes/Kernel.html","",""],["KeyError","","classes/KeyError.html","","<p>Raised when the specified key is not found. It is a subclass of IndexError.\n\n<pre><code>h = {&quot;foo&quot; =&gt; :bar}\nh.fetch(&quot;foo&quot;) ...\n</code></pre>\n"],["Knights_Tour","","classes/Knights_Tour.html","",""],["LUSolve","","classes/LUSolve.html","","<p>Solves a*x = b for x, using LU decomposition.\n"],["Labelframe","","classes/Labelframe.html","",""],["Line","","classes/Line.html","",""],["Lo_Exception","","classes/Lo_Exception.html","",""],["LoadError","","classes/LoadError.html","","<p>Raised when a file required (a Ruby script, extension library, …) fails to\nload.\n\n<pre><code>require &#39;this/file/does/not/exist&#39;\n</code></pre>\n"],["LocalJumpError","","classes/LocalJumpError.html","","<p>Raised when Ruby can&#39;t yield as requested.\n<p>A typical scenario is attempting to yield when no block …\n"],["Logger","","classes/Logger.html","","<p>Description\n<p>The Logger class provides a simple but sophisticated logging utility that\nyou can use to output …\n"],["Logger::Application","","classes/Logger/Application.html","","<p>Description\n<p>Application – Add logging support to your application.\n<p>Usage\n"],["Logger::Formatter","","classes/Logger/Formatter.html","","<p>Default formatter for log messages\n"],["Logger::LogDevice","","classes/Logger/LogDevice.html","","<p>Device used for logging messages.\n"],["Logger::LogDevice::LogDeviceMutex","","classes/Logger/LogDevice/LogDeviceMutex.html","",""],["Logger::Severity","","classes/Logger/Severity.html","","<p>Logging severity.\n"],["Logging","","classes/Logging.html","",""],["Mail","","classes/Mail.html","",""],["Marshal","","classes/Marshal.html","","<p>The marshaling library converts collections of Ruby objects into a byte\nstream, allowing them to be stored …\n"],["MatchData","","classes/MatchData.html","","<p><code>MatchData</code> is the type of the special variable <code>$~</code>,\nand is the type of the object returned by <code>Regexp#match</code> …\n"],["Math","","classes/Math.html","","<p>When mathn is required, the Math module changes as follows:\n<p>Standard Math module behaviour:\n\n<pre><code>Math.sqrt(4/9) ...</code></pre>\n"],["Math::DomainError","","classes/Math/DomainError.html","","<p>Raised when a mathematical function is evaluated outside of its domain of\ndefinition.\n<p>For example, since …\n"],["Matrix","","classes/Matrix.html","","<p>The <code>Matrix</code> class represents a mathematical matrix. It provides\nmethods for creating matrices, operating …\n"],["Matrix::EigenvalueDecomposition","","classes/Matrix/EigenvalueDecomposition.html","","<p>Eigenvalues and eigenvectors of a real matrix.\n<p>Computes the eigenvalues and eigenvectors of a matrix  …\n"],["Matrix::LUPDecomposition","","classes/Matrix/LUPDecomposition.html","","<p>For an m-by-n matrix A with m &gt;= n, the LU decomposition is an m-by-n\nunit lower triangular matrix …\n"],["Mdoc2Man","","classes/Mdoc2Man.html","","<p>mdoc2man - mdoc to man converter\n<p>Quick usage:  mdoc2man.rb &lt; mdoc_manpage.8 &gt; man_manpage.8\n<p>Ported …\n"],["MenuButton","","classes/MenuButton.html","",""],["Method","","classes/Method.html","","<p>Method\n"],["Microsoft_FreeThreadedXMLDOM_1_0","","classes/Microsoft_FreeThreadedXMLDOM_1_0.html","","<p>W3C-DOM XML Document (Apartment)\n"],["Microsoft_XMLDOM_1_0","","classes/Microsoft_XMLDOM_1_0.html","","<p>W3C-DOM XML Document\n"],["Microsoft_XMLDSO_1_0","","classes/Microsoft_XMLDSO_1_0.html","","<p>XML Data Source Object\n"],["Microsoft_XMLHTTP_1","","classes/Microsoft_XMLHTTP_1.html","","<p>XML HTTP Request class.\n"],["Module","","classes/Module.html","","<p>Core extension library\n<p>Rake extensions to Module.\n<p>A <code>Module</code> is a collection of methods and constants. The …\n"],["Monitor","","classes/Monitor.html","","<p>Use the Monitor class when you want to have a lock object for blocks with\nmutual exclusion.\n\n<pre><code>require &#39;monitor&#39; ...\n</code></pre>\n"],["MonitorMixin","","classes/MonitorMixin.html","","<p>In concurrent programming, a monitor is an object or module intended to be\nused safely by more than one …\n"],["MonitorMixin::ConditionVariable","","classes/MonitorMixin/ConditionVariable.html","","<p>FIXME: This isn&#39;t documented in Nutshell.\n<p>Since MonitorMixin.new_cond returns a ConditionVariable …\n"],["MonitorMixin::ConditionVariable::Timeout","","classes/MonitorMixin/ConditionVariable/Timeout.html","",""],["Msxml","","classes/Msxml.html","","<p>XMLDocument extends IXML Document.  It is obsolete.  You should use\nDOMDocument.  This object should …\n"],["MultiTkIp","","classes/MultiTkIp.html","",""],["MultiTkIp::Command_Queue","","classes/MultiTkIp/Command_Queue.html","",""],["MultiTkIp::ThreadGroup","","classes/MultiTkIp/ThreadGroup.html","",""],["MultiTkIp_OK","","classes/MultiTkIp_OK.html","","<p>exceptiopn to treat the return value from IP\n"],["MultiTkIp_PseudoToplevel_Evaluable","","classes/MultiTkIp_PseudoToplevel_Evaluable.html","","<p>dummy\n"],["Mutex","","classes/Mutex.html","","<p>Mutex implements a simple semaphore that can be used to coordinate access\nto shared data from multiple …\n"],["Mutex_m","","classes/Mutex_m.html","",""],["MyApp","","classes/MyApp.html","",""],["MyElem","","classes/MyElem.html","","<p>Linked list example\n"],["MyList","","classes/MyList.html","",""],["MyTimeout","","classes/MyTimeout.html","",""],["NKF","","classes/NKF.html","","<p>NKF - Ruby extension for Network Kanji Filter\n<p>Description\n<p>This is a Ruby Extension version of nkf (Network …\n"],["NQXML","","classes/NQXML.html","","<p>add some methods to NQXML::Node\n"],["NQXML::Node","","classes/NQXML/Node.html","",""],["NameError","","classes/NameError.html","","<p>Raised when a given name is invalid or undefined.\n\n<pre><code>puts foo</code></pre>\n<p><em>raises the exception:</em>\n"],["Net","","classes/Net.html","",""],["Net::APOP","","classes/Net/APOP.html","","<p>This class is equivalent to POP3, except that it uses APOP authentication.\n"],["Net::APOPSession","","classes/Net/APOP.html","","<p>This class is equivalent to POP3, except that it uses APOP authentication.\n"],["Net::EXCEPTION_TYPE","","classes/Net/EXCEPTION_TYPE.html","",""],["Net::EXCEPTION_TYPE","","classes/Net/EXCEPTION_TYPE.html","",""],["Net::EXCEPTION_TYPE","","classes/Net/EXCEPTION_TYPE.html","",""],["Net::EXCEPTION_TYPE","","classes/Net/EXCEPTION_TYPE.html","",""],["Net::FTP","","classes/Net/FTP.html","","<p>This class implements the File Transfer Protocol.  If you have used a\ncommand-line FTP program, and are …\n"],["Net::FTP::NullSocket","","classes/Net/FTP/NullSocket.html","",""],["Net::FTPConnectionError","","classes/Net/FTPConnectionError.html","",""],["Net::FTPError","","classes/Net/FTPError.html","",""],["Net::FTPPermError","","classes/Net/FTPPermError.html","",""],["Net::FTPProtoError","","classes/Net/FTPProtoError.html","",""],["Net::FTPReplyError","","classes/Net/FTPReplyError.html","",""],["Net::FTPTempError","","classes/Net/FTPTempError.html","",""],["Net::HTTP","","classes/Net/HTTP.html","",""],["Net::HTTP::Copy","","classes/Net/HTTP/Copy.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Delete","","classes/Net/HTTP/Delete.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Get","","classes/Net/HTTP/Get.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Head","","classes/Net/HTTP/Head.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Lock","","classes/Net/HTTP/Lock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Mkcol","","classes/Net/HTTP/Mkcol.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Move","","classes/Net/HTTP/Move.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Options","","classes/Net/HTTP/Options.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Patch","","classes/Net/HTTP/Patch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Post","","classes/Net/HTTP/Post.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Propfind","","classes/Net/HTTP/Propfind.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Proppatch","","classes/Net/HTTP/Proppatch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Put","","classes/Net/HTTP/Put.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Trace","","classes/Net/HTTP/Trace.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Unlock","","classes/Net/HTTP/Unlock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTPAccepted","","classes/Net/HTTPAccepted.html","",""],["Net::HTTPBadGateway","","classes/Net/HTTPBadGateway.html","",""],["Net::HTTPBadRequest","","classes/Net/HTTPBadRequest.html","",""],["Net::HTTPBadResponse","","classes/Net/HTTPBadResponse.html","",""],["Net::HTTPClientError","","classes/Net/HTTPClientError.html","",""],["Net::HTTPConflict","","classes/Net/HTTPConflict.html","",""],["Net::HTTPContinue","","classes/Net/HTTPContinue.html","",""],["Net::HTTPCreated","","classes/Net/HTTPCreated.html","",""],["Net::HTTPError","","classes/Net/HTTPError.html","",""],["Net::HTTPExceptions","","classes/Net/HTTPExceptions.html","","<p>HTTP exception class. You cannot use HTTPExceptions directly; instead, you\nmust use its subclasses.\n"],["Net::HTTPExpectationFailed","","classes/Net/HTTPExpectationFailed.html","",""],["Net::HTTPFatalError","","classes/Net/HTTPFatalError.html","",""],["Net::HTTPForbidden","","classes/Net/HTTPForbidden.html","",""],["Net::HTTPFound","","classes/Net/HTTPFound.html","",""],["Net::HTTPGatewayTimeOut","","classes/Net/HTTPGatewayTimeOut.html","",""],["Net::HTTPGenericRequest","","classes/Net/HTTPGenericRequest.html","","<p>HTTPGenericRequest is the parent of the HTTPRequest class. Do not use this\ndirectly; use a subclass of …\n"],["Net::HTTPGone","","classes/Net/HTTPGone.html","",""],["Net::HTTPHeader","","classes/Net/HTTPHeader.html","","<p>The HTTPHeader module defines methods for reading and writing HTTP headers.\n<p>It is used as a mixin by other …\n"],["Net::HTTPHeaderSyntaxError","","classes/Net/HTTPHeaderSyntaxError.html","",""],["Net::HTTPInformation","","classes/Net/HTTPInformation.html","",""],["Net::HTTPInternalServerError","","classes/Net/HTTPInternalServerError.html","",""],["Net::HTTPLengthRequired","","classes/Net/HTTPLengthRequired.html","",""],["Net::HTTPMethodNotAllowed","","classes/Net/HTTPMethodNotAllowed.html","",""],["Net::HTTPMovedPermanently","","classes/Net/HTTPMovedPermanently.html","",""],["Net::HTTPMultipleChoice","","classes/Net/HTTPMultipleChoice.html","",""],["Net::HTTPNoContent","","classes/Net/HTTPNoContent.html","",""],["Net::HTTPNonAuthoritativeInformation","","classes/Net/HTTPNonAuthoritativeInformation.html","",""],["Net::HTTPNotAcceptable","","classes/Net/HTTPNotAcceptable.html","",""],["Net::HTTPNotFound","","classes/Net/HTTPNotFound.html","",""],["Net::HTTPNotImplemented","","classes/Net/HTTPNotImplemented.html","",""],["Net::HTTPNotModified","","classes/Net/HTTPNotModified.html","",""],["Net::HTTPOK","","classes/Net/HTTPOK.html","",""],["Net::HTTPPartialContent","","classes/Net/HTTPPartialContent.html","",""],["Net::HTTPPaymentRequired","","classes/Net/HTTPPaymentRequired.html","",""],["Net::HTTPPreconditionFailed","","classes/Net/HTTPPreconditionFailed.html","",""],["Net::HTTPProxyAuthenticationRequired","","classes/Net/HTTPProxyAuthenticationRequired.html","",""],["Net::HTTPRedirection","","classes/Net/HTTPRedirection.html","",""],["Net::HTTPRequest","","classes/Net/HTTPRequest.html","","<p>HTTP request class. This class wraps together the request header and the\nrequest path. You cannot use …\n"],["Net::HTTPRequest","","classes/Net/HTTPRequest.html","","<p>HTTP request class. This class wraps together the request header and the\nrequest path. You cannot use …\n"],["Net::HTTPRequestEntityTooLarge","","classes/Net/HTTPRequestEntityTooLarge.html","",""],["Net::HTTPRequestTimeOut","","classes/Net/HTTPRequestTimeOut.html","",""],["Net::HTTPRequestURITooLong","","classes/Net/HTTPRequestURITooLong.html","",""],["Net::HTTPRequestedRangeNotSatisfiable","","classes/Net/HTTPRequestedRangeNotSatisfiable.html","",""],["Net::HTTPResetContent","","classes/Net/HTTPResetContent.html","",""],["Net::HTTPResponse","","classes/Net/HTTPResponse.html","",""],["Net::HTTPRetriableError","","classes/Net/HTTPRetriableError.html","",""],["Net::HTTPSeeOther","","classes/Net/HTTPSeeOther.html","",""],["Net::HTTPServerError","","classes/Net/HTTPServerError.html","",""],["Net::HTTPServerException","","classes/Net/HTTPServerException.html","",""],["Net::HTTPServiceUnavailable","","classes/Net/HTTPServiceUnavailable.html","",""],["Net::HTTPSession","","classes/Net/HTTP.html","",""],["Net::HTTPSuccess","","classes/Net/HTTPSuccess.html","",""],["Net::HTTPSwitchProtocol","","classes/Net/HTTPSwitchProtocol.html","",""],["Net::HTTPTemporaryRedirect","","classes/Net/HTTPTemporaryRedirect.html","",""],["Net::HTTPUnauthorized","","classes/Net/HTTPUnauthorized.html","",""],["Net::HTTPUnknownResponse","","classes/Net/HTTPUnknownResponse.html","",""],["Net::HTTPUnsupportedMediaType","","classes/Net/HTTPUnsupportedMediaType.html","",""],["Net::HTTPUseProxy","","classes/Net/HTTPUseProxy.html","",""],["Net::HTTPVersionNotSupported","","classes/Net/HTTPVersionNotSupported.html","",""],["Net::IMAP","","classes/Net/IMAP.html","","<p>Net::IMAP implements Internet Message Access Protocol (IMAP) client\nfunctionality.  The protocol is described …\n"],["Net::IMAP::BadResponseError","","classes/Net/IMAP/BadResponseError.html","","<p>Error raised upon a “BAD” response from the server, indicating that the\nclient command violated …\n"],["Net::IMAP::BodyTypeBasic","","classes/Net/IMAP/BodyTypeBasic.html","","<p>Net::IMAP::BodyTypeBasic represents basic body structures of messages.\n<p>Fields:\n<p>media_type &mdash; Returns the content …\n"],["Net::IMAP::BodyTypeMessage","","classes/Net/IMAP/BodyTypeMessage.html","","<p>Net::IMAP::BodyTypeMessage represents MESSAGE/RFC822 body structures of\nmessages.\n<p>Fields:\n<p>envelope &mdash; Returns …\n"],["Net::IMAP::BodyTypeMultipart","","classes/Net/IMAP/BodyTypeMultipart.html","","<p>Net::IMAP::BodyTypeMultipart represents multipart body structures of\nmessages.\n<p>Fields:\n<p>media_type &mdash; Returns …\n"],["Net::IMAP::BodyTypeText","","classes/Net/IMAP/BodyTypeText.html","","<p>Net::IMAP::BodyTypeText represents TEXT body structures of messages.\n<p>Fields:\n<p>lines &mdash; Returns the size of …\n"],["Net::IMAP::ByeResponseError","","classes/Net/IMAP/ByeResponseError.html","","<p>Error raised upon a “BYE” response from the server, indicating that the\nclient is not being …\n"],["Net::IMAP::CramMD5Authenticator","","classes/Net/IMAP/CramMD5Authenticator.html","","<p>Authenticator for the “CRAM-MD5” authentication type.  See #authenticate().\n"],["Net::IMAP::DataFormatError","","classes/Net/IMAP/DataFormatError.html","","<p>Error raised when data is in the incorrect format.\n"],["Net::IMAP::DigestMD5Authenticator","","classes/Net/IMAP/DigestMD5Authenticator.html","","<p>Authenticator for the “DIGEST-MD5” authentication type.  See\n#authenticate().\n"],["Net::IMAP::Error","","classes/Net/IMAP/Error.html","","<p>Superclass of IMAP errors.\n"],["Net::IMAP::FlagCountError","","classes/Net/IMAP/FlagCountError.html","","<p>Error raised when too many flags are interned to symbols.\n"],["Net::IMAP::LoginAuthenticator","","classes/Net/IMAP/LoginAuthenticator.html","","<p>Authenticator for the “LOGIN” authentication type.  See #authenticate().\n"],["Net::IMAP::NoResponseError","","classes/Net/IMAP/NoResponseError.html","","<p>Error raised upon a “NO” response from the server, indicating that the\nclient command could …\n"],["Net::IMAP::PlainAuthenticator","","classes/Net/IMAP/PlainAuthenticator.html","","<p>Authenticator for the “PLAIN” authentication type.  See #authenticate().\n"],["Net::IMAP::ResponseError","","classes/Net/IMAP/ResponseError.html","","<p>Superclass of all errors used to encapsulate “fail” responses from the\nserver.\n"],["Net::IMAP::ResponseParseError","","classes/Net/IMAP/ResponseParseError.html","","<p>Error raised when a response from the server is non-parseable.\n"],["Net::InternetMessageIO","","classes/Net/InternetMessageIO.html","",""],["Net::InternetMessageIO::NetPrivate","","classes/Net/InternetMessageIO/NetPrivate.html","",""],["Net::InternetMessageIO::WriteAdapter","","classes/Net/InternetMessageIO/WriteAdapter.html","","<p>The writer adapter class\n"],["Net::POP","","classes/Net/POP3.html","","<p>Net::POP3\n<p>What is This Library?\n<p>This library provides functionality for retrieving email via POP3, the …\n"],["Net::POP3","","classes/Net/POP3.html","","<p>Net::POP3\n<p>What is This Library?\n<p>This library provides functionality for retrieving email via POP3, the …\n"],["Net::POP3Session","","classes/Net/POP3.html","","<p>Net::POP3\n<p>What is This Library?\n<p>This library provides functionality for retrieving email via POP3, the …\n"],["Net::POPAuthenticationError","","classes/Net/POPAuthenticationError.html","","<p>POP3 authentication error.\n"],["Net::POPBadResponse","","classes/Net/POPBadResponse.html","","<p>Unexpected response from the server.\n"],["Net::POPError","","classes/Net/POPError.html","","<p>Non-authentication POP3 protocol error (reply code “-ERR”, except\nauthentication).\n"],["Net::POPMail","","classes/Net/POPMail.html","","<p>This class represents a message which exists on the POP server. Instances\nof this class are created by …\n"],["Net::POPSession","","classes/Net/POP3.html","","<p>Net::POP3\n<p>What is This Library?\n<p>This library provides functionality for retrieving email via POP3, the …\n"],["Net::ProtoAuthError","","classes/Net/ProtoAuthError.html","",""],["Net::ProtoCommandError","","classes/Net/ProtoCommandError.html","",""],["Net::ProtoFatalError","","classes/Net/ProtoFatalError.html","",""],["Net::ProtoRetriableError","","classes/Net/ProtoRetriableError.html","",""],["Net::ProtoServerError","","classes/Net/ProtoServerError.html","",""],["Net::ProtoSyntaxError","","classes/Net/ProtoSyntaxError.html","",""],["Net::ProtoUnknownError","","classes/Net/ProtoUnknownError.html","",""],["Net::ProtocRetryError","","classes/Net/ProtocRetryError.html","",""],["Net::ProtocolError","","classes/Net/ProtocolError.html","",""],["Net::SMTP","","classes/Net/SMTP.html","","<p>Net::SMTP\n<p>What is This Library?\n<p>This library provides functionality to send internet mail via SMTP, the …\n"],["Net::SMTP::Response","","classes/Net/SMTP/Response.html","","<p>This class represents a response received by the SMTP server. Instances of\nthis class are created by …\n"],["Net::SMTPAuthenticationError","","classes/Net/SMTPAuthenticationError.html","","<p>Represents an SMTP authentication error.\n"],["Net::SMTPError","","classes/Net/SMTPError.html","","<p>Module mixed in to all SMTP error classes\n"],["Net::SMTPFatalError","","classes/Net/SMTPFatalError.html","","<p>Represents a fatal SMTP error (error code 5xx, except for 500)\n"],["Net::SMTPServerBusy","","classes/Net/SMTPServerBusy.html","","<p>Represents SMTP error code 420 or 450, a temporary error.\n"],["Net::SMTPSession","","classes/Net/SMTP.html","","<p>Net::SMTP\n<p>What is This Library?\n<p>This library provides functionality to send internet mail via SMTP, the …\n"],["Net::SMTPSyntaxError","","classes/Net/SMTPSyntaxError.html","","<p>Represents an SMTP command syntax error (error code 500)\n"],["Net::SMTPUnknownError","","classes/Net/SMTPUnknownError.html","","<p>Unexpected reply code returned from server.\n"],["Net::SMTPUnsupportedCommand","","classes/Net/SMTPUnsupportedCommand.html","","<p>Command is not supported on server.\n"],["Net::Telnet","","classes/Net/Telnet.html","","<p>Net::Telnet\n<p>Provides telnet client functionality.\n<p>This class also has, through delegation, all the methods …\n"],["Newton","","classes/Newton.html","","<p>newton.rb\n<p>Solves the nonlinear algebraic equation system f = 0 by Newton&#39;s\nmethod. This program is …\n"],["NilClass","","classes/NilClass.html","","<p>The class of the singleton object <code>nil</code>.\n"],["NoMemoryError","","classes/NoMemoryError.html","","<p>Raised when memory allocation fails.\n"],["NoMethodError","","classes/NoMethodError.html","","<p>Raised when a method is called on a receiver which doesn&#39;t have it\ndefined and also fails to respond …\n"],["NotImplementedError","","classes/NotImplementedError.html","","<p>Raised when a feature is not implemented on the current platform. For\nexample, methods depending on the …\n"],["Notify","","classes/Notify.html","",""],["NthToggle","","classes/NthToggle.html","",""],["Numeric","","classes/Numeric.html","","<p>mathn\n<p>mathn is a library for changing the way Ruby does math.  If you need more\nprecise rounding with …\n"],["OLEProperty","","classes/OLEProperty.html","","<p>OLEProperty helper class of Property with arguments.\n"],["OLEtagDOMNodeType","","classes/OLEtagDOMNodeType.html","","<p>Constants that define a node&#39;s type\n"],["OLEtagXMLEMEM_TYPE","","classes/OLEtagXMLEMEM_TYPE.html","","<p>Constants that define types for IXMLElement.\n"],["Object","","classes/Object.html","","<p>Object is the root of Ruby&#39;s class hierarchy.  Its methods are\navailable to all classes unless explicitly …\n"],["Object::ParseError","","classes/Racc/ParseError.html","",""],["Object::Syck","","classes/Object/Syck.html","",""],["Object::Syck::BadAlias","","classes/Object/Syck/BadAlias.html","","<p>Define YAML::Syck::BadAlias class\n"],["Object::Syck::DefaultKey","","classes/Object/Syck/DefaultKey.html","","<p>Define YAML::Syck::DefaultKey class\n"],["Object::Syck::DomainType","","classes/Object/Syck/DomainType.html","","<p>Define YAML::DomainType class\n"],["Object::Syck::Emitter","","classes/Object/Syck/Emitter.html","","<p>Define YAML::Syck::Emitter class\n"],["Object::Syck::Map","","classes/Object/Syck/Map.html","","<p>Define YAML::Syck::Scalar, YAML::Syck::Seq, YAML::Syck::Map –\n\n<pre><code>all are the publicly usable variants of ...</code></pre>\n"],["Object::Syck::MergeKey","","classes/Object/Syck/MergeKey.html","","<p>Define YAML::Syck::MergeKey class\n"],["Object::Syck::Node","","classes/Object/Syck/Node.html","","<p>Define YAML::Syck::Node class\n"],["Object::Syck::Object","","classes/Object/Syck/Object.html","","<p>Define YAML::Object class\n"],["Object::Syck::Out","","classes/Object/Syck/Out.html","","<p>Define YAML::Syck::Out classes\n"],["Object::Syck::Parser","","classes/Object/Syck/Parser.html","","<p>Define YAML::Syck::Parser class\n"],["Object::Syck::PrivateType","","classes/Object/Syck/PrivateType.html","","<p>Define YAML::PrivateType class\n"],["Object::Syck::Resolver","","classes/Object/Syck/Resolver.html","","<p>Define YAML::Syck::Resolver class\n"],["Object::Syck::Scalar","","classes/Object/Syck/Scalar.html","","<p>Define YAML::Syck::Scalar, YAML::Syck::Seq, YAML::Syck::Map –\n\n<pre><code>all are the publicly usable variants of ...</code></pre>\n"],["Object::Syck::Seq","","classes/Object/Syck/Seq.html","","<p>Define YAML::Syck::Scalar, YAML::Syck::Seq, YAML::Syck::Map –\n\n<pre><code>all are the publicly usable variants of ...</code></pre>\n"],["Object::TimeoutError","","classes/Timeout/Error.html","","<p>Raised by Timeout#timeout when the block times out.\n"],["Object::TkNamedVirtualEvent","","classes/TkVirtualEvent/PreDefVirtEvent.html","",""],["Object::TkSystemMenu","","classes/Tk/SystemMenu.html","",""],["Object::Ttk","","classes/Tk/Tile.html","",""],["ObjectSpace","","classes/ObjectSpace.html","","<p>The <code>ObjectSpace</code> module contains a number of routines that\ninteract with the garbage collection facility …\n"],["Observable","","classes/Observable.html","","<p>The Observer pattern (also known as publish/subscribe) provides a simple\nmechanism for one object to …\n"],["Open3","","classes/Open3.html","","<p>Open3 grants you access to stdin, stdout, stderr and a thread to wait the\nchild process when running …\n"],["OpenSSL","","classes/OpenSSL.html","","<p>$RCSfile$ – Ruby-space definitions that completes C-space funcs for X509 and subclasses\n<p>Info\n\n<pre><code>&#39;OpenSSL ...</code></pre>\n"],["OpenSSL::ASN1","","classes/OpenSSL/ASN1.html","","<p>Abstract Syntax Notation One (or ASN.1) is a notation syntax to describe\ndata structures and is defined …\n"],["OpenSSL::ASN1::ASN1Data","","classes/OpenSSL/ASN1/ASN1Data.html","","<p>The top-level class representing any ASN.1 object. When parsed by\nASN1.decode, tagged values are always …\n"],["OpenSSL::ASN1::ASN1Error","","classes/OpenSSL/ASN1/ASN1Error.html","","<p>Generic error class for all errors raised in ASN1 and any of the classes\ndefined in it.\n"],["OpenSSL::ASN1::Constructive","","classes/OpenSSL/ASN1/Constructive.html","","<p>The parent class for all constructed encodings. The <code>value</code>\nattribute of a Constructive is always an <code>Array</code> …\n"],["OpenSSL::ASN1::Primitive","","classes/OpenSSL/ASN1/Primitive.html","","<p>The parent class for all primitive encodings. Attributes are the same as\nfor ASN1Data, with the addition …\n"],["OpenSSL::BN","","classes/OpenSSL/BN.html","",""],["OpenSSL::BNError","","classes/OpenSSL/BNError.html","",""],["OpenSSL::Buffering","","classes/OpenSSL/Buffering.html","","<p>OpenSSL IO buffering mix-in module.\n<p>This module allows an OpenSSL::SSL::SSLSocket to behave like an IO …\n"],["OpenSSL::Cipher","","classes/OpenSSL/Cipher.html","","<p>Provides symmetric algorithms for encryption and decryption. The algorithms\nthat are available depend …\n"],["OpenSSL::Cipher::Cipher","","classes/OpenSSL/Cipher/Cipher.html","","<p>This class is only provided for backwards compatibility.  Use\nOpenSSL::Cipher in the future.\n"],["OpenSSL::Cipher::CipherError","","classes/OpenSSL/Cipher/CipherError.html","","<p>Document-class: OpenSSL::Cipher\n\n<pre><code>Provides symmetric algorithms for encryption and decryption. The\nalgorithms ...</code></pre>\n"],["OpenSSL::Config","","classes/OpenSSL/Config.html","",""],["OpenSSL::ConfigError","","classes/OpenSSL/ConfigError.html","",""],["OpenSSL::Digest","","classes/OpenSSL/Digest.html","","<p>OpenSSL::Digest allows you to compute message digests (sometimes\ninterchangeably called “hashes”) …\n"],["OpenSSL::Digest::Digest","","classes/OpenSSL/Digest/Digest.html","","<p>This class is only provided for backwards compatibility.  Use\nOpenSSL::Digest in the future.\n"],["OpenSSL::Digest::DigestError","","classes/OpenSSL/Digest/DigestError.html","","<p>Generic Exception class that is raised if an error occurs during a Digest\noperation.\n"],["OpenSSL::Engine","","classes/OpenSSL/Engine.html","",""],["OpenSSL::Engine::EngineError","","classes/OpenSSL/Engine/EngineError.html","",""],["OpenSSL::HMAC","","classes/OpenSSL/HMAC.html","",""],["OpenSSL::HMACError","","classes/OpenSSL/HMACError.html","",""],["OpenSSL::Netscape","","classes/OpenSSL/Netscape.html","",""],["OpenSSL::Netscape::SPKI","","classes/OpenSSL/Netscape/SPKI.html","",""],["OpenSSL::Netscape::SPKIError","","classes/OpenSSL/Netscape/SPKIError.html","",""],["OpenSSL::OCSP","","classes/OpenSSL/OCSP.html","",""],["OpenSSL::OCSP::BasicResponse","","classes/OpenSSL/OCSP/BasicResponse.html","",""],["OpenSSL::OCSP::CertificateId","","classes/OpenSSL/OCSP/CertificateId.html","",""],["OpenSSL::OCSP::OCSPError","","classes/OpenSSL/OCSP/OCSPError.html","",""],["OpenSSL::OCSP::Request","","classes/OpenSSL/OCSP/Request.html","",""],["OpenSSL::OCSP::Response","","classes/OpenSSL/OCSP/Response.html","",""],["OpenSSL::OpenSSLError","","classes/OpenSSL/OpenSSLError.html","","<p>Generic error, common for all classes under OpenSSL module\n"],["OpenSSL::PKCS12","","classes/OpenSSL/PKCS12.html","","<p>Defines a file format commonly used to store private keys with accompanying\npublic key certificates, …\n"],["OpenSSL::PKCS12::PKCS12Error","","classes/OpenSSL/PKCS12/PKCS12Error.html","","<p>Defines a file format commonly used to store private keys with accompanying\npublic key certificates, …\n"],["OpenSSL::PKCS5","","classes/OpenSSL/PKCS5.html","","<p>Password-based Encryption\n"],["OpenSSL::PKCS5::PKCS5Error","","classes/OpenSSL/PKCS5/PKCS5Error.html","","<p>Password-based Encryption\n"],["OpenSSL::PKCS7","","classes/OpenSSL/PKCS7.html","",""],["OpenSSL::PKCS7::PKCS7Error","","classes/OpenSSL/PKCS7/PKCS7Error.html","",""],["OpenSSL::PKCS7::RecipientInfo","","classes/OpenSSL/PKCS7/RecipientInfo.html","",""],["OpenSSL::PKCS7::SignerInfo","","classes/OpenSSL/PKCS7/SignerInfo.html","",""],["OpenSSL::PKey","","classes/OpenSSL/PKey.html","","<p>Asymmetric Public Key Algorithms\n<p>Asymmetric public key algorithms solve the problem of establishing and …\n"],["OpenSSL::PKey::DH","","classes/OpenSSL/PKey/DH.html","","<p>An implementation of the Diffie-Hellman key exchange protocol based on\ndiscrete logarithms in finite …\n"],["OpenSSL::PKey::DHError","","classes/OpenSSL/PKey/DHError.html","","<p>Generic exception that is raised if an operation on a DH PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::PKey::DSA","","classes/OpenSSL/PKey/DSA.html","","<p>DSA, the Digital Signature Algorithm, is specified in NIST&#39;s FIPS\n186-3. It is an asymmetric public …\n"],["OpenSSL::PKey::DSAError","","classes/OpenSSL/PKey/DSAError.html","","<p>Generic exception that is raised if an operation on a DSA PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::PKey::EC","","classes/OpenSSL/PKey/EC.html","",""],["OpenSSL::PKey::EC::Group","","classes/OpenSSL/PKey/EC/Group.html","",""],["OpenSSL::PKey::EC::Group::Error","","classes/OpenSSL/PKey/EC/Group/Error.html","",""],["OpenSSL::PKey::EC::Point","","classes/OpenSSL/PKey/EC/Point.html","",""],["OpenSSL::PKey::EC::Point::Error","","classes/OpenSSL/PKey/EC/Point/Error.html","",""],["OpenSSL::PKey::ECError","","classes/OpenSSL/PKey/ECError.html","",""],["OpenSSL::PKey::PKey","","classes/OpenSSL/PKey/PKey.html","","<p>An abstract class that bundles signature creation (PKey#sign) and\nvalidation (PKey#verify) that is common …\n"],["OpenSSL::PKey::PKeyError","","classes/OpenSSL/PKey/PKeyError.html","","<p>Raised when errors occur during PKey#sign or PKey#verify.\n"],["OpenSSL::PKey::RSA","","classes/OpenSSL/PKey/RSA.html","","<p>RSA is an asymmetric public key algorithm that has been formalized in RFC\n3447. It is in widespread use …\n"],["OpenSSL::PKey::RSAError","","classes/OpenSSL/PKey/RSAError.html","","<p>Generic exception that is raised if an operation on an RSA PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::Random","","classes/OpenSSL/Random.html","",""],["OpenSSL::Random::RandomError","","classes/OpenSSL/Random/RandomError.html","",""],["OpenSSL::SSL","","classes/OpenSSL/SSL.html","","<p>let rdoc know about mOSSL\n"],["OpenSSL::SSL::Nonblock","","classes/OpenSSL/SSL/Nonblock.html","",""],["OpenSSL::SSL::SSLContext","","classes/OpenSSL/SSL/SSLContext.html","","<p>An SSLContext is used to set various options regarding certificates,\nalgorithms, verification, session …\n"],["OpenSSL::SSL::SSLError","","classes/OpenSSL/SSL/SSLError.html","",""],["OpenSSL::SSL::SSLServer","","classes/OpenSSL/SSL/SSLServer.html","",""],["OpenSSL::SSL::SSLSocket","","classes/OpenSSL/SSL/SSLSocket.html","","<p>The following attributes are available but don&#39;t show up in rdoc.\n<p>io, context, sync_close\n\n"],["OpenSSL::SSL::Session","","classes/OpenSSL/SSL/Session.html","","<p>let rdoc know about mOSSL\n"],["OpenSSL::SSL::Session::SessionError","","classes/OpenSSL/SSL/Session/SessionError.html","","<p>let rdoc know about mOSSL\n"],["OpenSSL::SSL::SocketForwarder","","classes/OpenSSL/SSL/SocketForwarder.html","",""],["OpenSSL::X509","","classes/OpenSSL/X509.html","","<p>let rdoc know about mOSSL\n"],["OpenSSL::X509::Attribute","","classes/OpenSSL/X509/Attribute.html","",""],["OpenSSL::X509::AttributeError","","classes/OpenSSL/X509/AttributeError.html","",""],["OpenSSL::X509::CRL","","classes/OpenSSL/X509/CRL.html","",""],["OpenSSL::X509::CRLError","","classes/OpenSSL/X509/CRLError.html","",""],["OpenSSL::X509::Certificate","","classes/OpenSSL/X509/Certificate.html","","<p>Implementation of an X.509 certificate as specified in RFC 5280. Provides\naccess to a certificate&#39;s …\n"],["OpenSSL::X509::CertificateError","","classes/OpenSSL/X509/CertificateError.html","","<p>Document-class: OpenSSL::X509::Certificate\n\n<pre><code>Implementation of an X.509 certificate as specified in RFC ...</code></pre>\n"],["OpenSSL::X509::Extension","","classes/OpenSSL/X509/Extension.html","",""],["OpenSSL::X509::ExtensionError","","classes/OpenSSL/X509/ExtensionError.html","",""],["OpenSSL::X509::ExtensionFactory","","classes/OpenSSL/X509/ExtensionFactory.html","",""],["OpenSSL::X509::Name","","classes/OpenSSL/X509/Name.html","",""],["OpenSSL::X509::Name::RFC2253DN","","classes/OpenSSL/X509/Name/RFC2253DN.html","",""],["OpenSSL::X509::NameError","","classes/OpenSSL/X509/NameError.html","",""],["OpenSSL::X509::Request","","classes/OpenSSL/X509/Request.html","",""],["OpenSSL::X509::RequestError","","classes/OpenSSL/X509/RequestError.html","",""],["OpenSSL::X509::Revoked","","classes/OpenSSL/X509/Revoked.html","",""],["OpenSSL::X509::RevokedError","","classes/OpenSSL/X509/RevokedError.html","",""],["OpenSSL::X509::Store","","classes/OpenSSL/X509/Store.html","",""],["OpenSSL::X509::StoreContext","","classes/OpenSSL/X509/StoreContext.html","",""],["OpenSSL::X509::StoreError","","classes/OpenSSL/X509/StoreError.html","",""],["OpenStruct","","classes/OpenStruct.html","","<p>An OpenStruct is a data structure, similar to a Hash, that allows the\ndefinition of arbitrary attributes …\n"],["OpenURI","","classes/OpenURI.html","","\n<pre><code>OpenURI is an easy-to-use wrapper for net/http, net/https and net/ftp.</code></pre>\n<p>Example\n\n<pre><code>It is possible to open an ...</code></pre>\n"],["OpenURI::HTTPError","","classes/OpenURI/HTTPError.html","",""],["OpenURI::HTTPRedirect","","classes/OpenURI/HTTPRedirect.html","",""],["OpenURI::Meta","","classes/OpenURI/Meta.html","","<p>Mixin for holding meta-information.\n"],["OpenURI::OpenRead","","classes/OpenURI/OpenRead.html","","<p>Mixin for HTTP and FTP URIs.\n"],["OptionMenuButton","","classes/OptionMenuButton.html","",""],["OptionParser","","classes/OptionParser.html","","<p>Developer Documentation (not for RDoc output)\n<p>Class tree\n<p><p>OptionParser &mdash; front end\n"],["OptionParser::Acceptables","","classes/OptionParser/Acceptables.html","","<p>Acceptable argument classes. Now contains DecimalInteger, OctalInteger and\nDecimalNumeric. See Acceptable …\n"],["OptionParser::AmbiguousArgument","","classes/OptionParser/AmbiguousArgument.html","","<p>Raises when the given argument word can&#39;t be completed uniquely.\n"],["OptionParser::AmbiguousOption","","classes/OptionParser/AmbiguousOption.html","","<p>Raises when ambiguously completable string is encountered.\n"],["OptionParser::Arguable","","classes/OptionParser/Arguable.html","","<p>Extends command line arguments array (ARGV) to parse itself.\n"],["OptionParser::CompletingHash","","classes/OptionParser/CompletingHash.html","","<p>Hash with completion search feature. See OptionParser::Completion.\n"],["OptionParser::Completion","","classes/OptionParser/Completion.html","","<p>Keyword completion module.  This allows partial arguments to be specified\nand resolved against a list …\n"],["OptionParser::InvalidArgument","","classes/OptionParser/InvalidArgument.html","","<p>Raises when the given argument does not match required format.\n"],["OptionParser::InvalidOption","","classes/OptionParser/InvalidOption.html","","<p>Raises when switch is undefined.\n"],["OptionParser::List","","classes/OptionParser/List.html","","<p>Simple option list providing mapping from short and/or long option string\nto OptionParser::Switch and …\n"],["OptionParser::MissingArgument","","classes/OptionParser/MissingArgument.html","","<p>Raises when a switch with mandatory argument has no argument.\n"],["OptionParser::NeedlessArgument","","classes/OptionParser/NeedlessArgument.html","","<p>Raises when there is an argument for a switch which takes no argument.\n"],["OptionParser::OptionMap","","classes/OptionParser/OptionMap.html","","<p>Map from option/keyword string to object with completion.\n"],["OptionParser::ParseError","","classes/OptionParser/ParseError.html","","<p>Base class of exceptions from OptionParser.\n"],["OptionParser::Switch","","classes/OptionParser/Switch.html","","<p>Individual switch class.  Not important to the user.\n<p>Defined within Switch are several Switch-derived …\n"],["OptionParser::Switch::NoArgument","","classes/OptionParser/Switch/NoArgument.html","","<p>Switch that takes no arguments.\n"],["OptionParser::Switch::OptionalArgument","","classes/OptionParser/Switch/OptionalArgument.html","","<p>Switch that can omit argument.\n"],["OptionParser::Switch::PlacedArgument","","classes/OptionParser/Switch/PlacedArgument.html","","<p>Switch that takes an argument, which does not begin with &#39;-&#39;.\n"],["OptionParser::Switch::RequiredArgument","","classes/OptionParser/Switch/RequiredArgument.html","","<p>Switch that takes an argument.\n"],["Oval","","classes/Oval.html","",""],["PKCS7","","classes/PKCS7.html","",""],["PKey","","classes/PKey.html","",""],["PP","","classes/PP.html","",""],["PP::ObjectMixin","","classes/PP/ObjectMixin.html","",""],["PP::PPMethods","","classes/PP/PPMethods.html","",""],["PP::SingleLine","","classes/PP/SingleLine.html","",""],["PStore","","classes/PStore.html","","<p>PStore implements a file based persistence mechanism based on a Hash.  User\ncode can store hierarchies …\n"],["PStore::Error","","classes/PStore/Error.html","","<p>The error type thrown by all PStore methods.\n"],["PTY","","classes/PTY.html","","<p>Creates and managed pseudo terminals (PTYs).  See also\nen.wikipedia.org/wiki/Pseudo_terminal\n"],["PTY::ChildExited","","classes/PTY/ChildExited.html","","<p>Thrown when PTY#check is called for a pid that represents a process that\nhas exited.\n"],["Pack","","classes/Pack.html","",""],["Panedwindow","","classes/Panedwindow.html","",""],["Pathname","","classes/Pathname.html","","<p>Pathname\n<p>Pathname represents a pathname which locates a file in a filesystem. The\npathname depends on …\n"],["PendulumAnimationDemo","","classes/PendulumAnimationDemo.html","","<p>animated wave\n<p>animated wave\n"],["PhotoCanvas","","classes/PhotoCanvas.html","",""],["PhotoImage","","classes/PhotoImage.html","","<p>A photo is an image whose pixels can display any color or be transparent.\nAt present, only GIF and PPM/PGM …\n"],["PiDigitSpigot","","classes/PiDigitSpigot.html","","<p>The Great Computer Language Shootout shootout.alioth.debian.org/\n<p>contributed by Gabriele Renzi\n"],["Place","","classes/Place.html","",""],["Planet","","classes/Planet.html","",""],["Point","","classes/Point.html","","<p>Linked list example – short version\n<p>Linked list example – short version using inspect\n"],["Polygon","","classes/Polygon.html","",""],["Prelude","","classes/Prelude.html","",""],["PrettyPrint","","classes/PrettyPrint.html","","<p>This class implements a pretty printing algorithm. It finds line breaks and\nnice indentations for grouped …\n"],["PrettyPrint::Breakable","","classes/PrettyPrint/Breakable.html","",""],["PrettyPrint::Group","","classes/PrettyPrint/Group.html","",""],["PrettyPrint::GroupQueue","","classes/PrettyPrint/GroupQueue.html","",""],["PrettyPrint::SingleLine","","classes/PrettyPrint/SingleLine.html","",""],["PrettyPrint::Text","","classes/PrettyPrint/Text.html","",""],["Prime","","classes/Prime.html","","<p>The set of all prime numbers.\n<p>Example\n\n<pre><code>Prime.each(100) do |prime|\n  p prime  #=&gt; 2, 3, 5, 7, 11, ...., 97 ...\n</code></pre>\n"],["Prime::EratosthenesGenerator","","classes/Prime/EratosthenesGenerator.html","","<p>An implementation of <code>PseudoPrimeGenerator</code>.\n<p>Uses <code>EratosthenesSieve</code>.\n"],["Prime::EratosthenesSieve","","classes/Prime/EratosthenesSieve.html","","<p>Internal use. An implementation of eratosthenes&#39;s sieve\n"],["Prime::Generator23","","classes/Prime/Generator23.html","","<p>Generates all integer which are greater than 2 and are not divided by 2 nor\n3.\n<p>This is a pseudo-prime …\n"],["Prime::OldCompatibility","","classes/Prime/OldCompatibility.html","","<p>Provides a <code>Prime</code> object with compatibility to Ruby 1.8 when\ninstantiated via <code>Prime</code>.<code>new</code>.\n"],["Prime::PseudoPrimeGenerator","","classes/Prime/PseudoPrimeGenerator.html","","<p>An abstract class for enumerating pseudo-prime numbers.\n<p>Concrete subclasses should override succ, next, …\n"],["Prime::TrialDivision","","classes/Prime/TrialDivision.html","","<p>Internal use. An implementation of prime table by trial division method.\n"],["Prime::TrialDivisionGenerator","","classes/Prime/TrialDivisionGenerator.html","","<p>An implementation of <code>PseudoPrimeGenerator</code> which uses a prime\ntable generated by trial division.\n"],["Proc","","classes/Proc.html","","<p><code>Proc</code> objects are blocks of code that have been bound to a set\nof local variables. Once bound, the code …\n"],["Process","","classes/Process.html","","<p>The <code>Process</code> module is a collection of methods used to\nmanipulate processes.\n"],["Process::GID","","classes/Process/GID.html","","<p>The <code>Process::GID</code> module contains a collection of module\nfunctions which can be used to portably get, …\n"],["Process::Status","","classes/Process/Status.html","","<p><code>Process::Status</code> encapsulates the information on the status of\na running or terminated system process. …\n"],["Process::Sys","","classes/Process/Sys.html","","<p>The <code>Process::Sys</code> module contains UID and GID functions which\nprovide direct bindings to the system calls …\n"],["Process::UID","","classes/Process/UID.html","","<p>The <code>Process::UID</code> module contains a collection of module\nfunctions which can be used to portably get, …\n"],["Profiler__","","classes/Profiler__.html","",""],["Psych","","classes/Psych.html","","<p>Overview\n<p>Psych is a YAML parser and emitter.  Psych leverages libyaml for it&#39;s\nYAML parsing and emitting …\n"],["Psych::BadAlias","","classes/Psych/BadAlias.html","",""],["Psych::Coder","","classes/Psych/Coder.html","","<p>If an object defines <code>encode_with</code>, then an instance of\nPsych::Coder will be passed to the method when …\n"],["Psych::Emitter","","classes/Psych/Emitter.html","",""],["Psych::Exception","","classes/Psych/Exception.html","",""],["Psych::Handler","","classes/Psych/Handler.html","","<p>Psych::Handler is an abstract base class that defines the events used when\ndealing with Psych::Parser …\n"],["Psych::Handler::DumperOptions","","classes/Psych/Handler/DumperOptions.html","","<p>Configuration options for dumping YAML.\n"],["Psych::Handlers","","classes/Psych/Handlers.html","",""],["Psych::JSON","","classes/Psych/JSON.html","",""],["Psych::JSON::Stream","","classes/Psych/JSON/Stream.html","",""],["Psych::JSON::TreeBuilder","","classes/Psych/JSON/TreeBuilder.html","","<p>Psych::JSON::TreeBuilder is an event based AST builder.  Events are sent to\nan instance of Psych::JSON::TreeBuilder …\n"],["Psych::Nodes","","classes/Psych/Nodes.html","","<p>Overview\n<p>When using Psych.load to deserialize a YAML document, the document is\ntranslated to an intermediary …\n"],["Psych::Nodes::Alias","","classes/Psych/Nodes/Alias.html","","<p>This class represents a YAML Alias. It points to an <code>anchor</code>.\n<p>A Psych::Nodes::Alias is a terminal node and …\n"],["Psych::Nodes::Document","","classes/Psych/Nodes/Document.html","","<p>This represents a YAML Document.  This node must be a child of\nPsych::Nodes::Stream.  A Psych::Nodes::Document …\n"],["Psych::Nodes::Mapping","","classes/Psych/Nodes/Mapping.html","","<p>This class represents a YAML Mapping.\n<p>A Psych::Nodes::Mapping node may have 0 or more children, but must …\n"],["Psych::Nodes::Node","","classes/Psych/Nodes/Node.html","","<p>The base class for any Node in a YAML parse tree.  This class should never\nbe instantiated.\n"],["Psych::Nodes::Scalar","","classes/Psych/Nodes/Scalar.html","","<p>This class represents a YAML Scalar.\n<p>This node type is a terminal node and should not have any children. …\n"],["Psych::Nodes::Sequence","","classes/Psych/Nodes/Sequence.html","","<p>This class represents a YAML sequence.\n<p>A YAML sequence is basically a list, and looks like this:\n\n<pre><code>%YAML ...</code></pre>\n"],["Psych::Nodes::Stream","","classes/Psych/Nodes/Stream.html","","<p>Represents a YAML stream.  This is the root node for any YAML parse tree. \nThis node must have one or …\n"],["Psych::Omap","","classes/Psych/Omap.html","",""],["Psych::Parser","","classes/Psych/Parser.html","","<p>YAML event parser class.  This class parses a YAML document and calls\nevents on the handler that is passed …\n"],["Psych::Parser::Mark","","classes/Psych/Parser/Mark.html","",""],["Psych::PrivateType","","classes/Psych/PrivateType.html","",""],["Psych::ScalarScanner","","classes/Psych/ScalarScanner.html","","<p>Scan scalars for built in types\n"],["Psych::Set","","classes/Psych/Set.html","",""],["Psych::Stream","","classes/Psych/Stream.html","","<p>Psych::Stream is a streaming YAML emitter.  It will not buffer your YAML,\nbut send it straight to an …\n"],["Psych::Streaming","","classes/Psych/Streaming.html","",""],["Psych::SyntaxError","","classes/Psych/SyntaxError.html","",""],["Psych::TreeBuilder","","classes/Psych/TreeBuilder.html","","<p>This class works in conjunction with Psych::Parser to build an in-memory\nparse tree that represents a …\n"],["Psych::Visitors","","classes/Psych/Visitors.html","",""],["Psych::Visitors::DepthFirst","","classes/Psych/Visitors/DepthFirst.html","",""],["Psych::Visitors::Emitter","","classes/Psych/Visitors/Emitter.html","",""],["Psych::Visitors::JSONTree","","classes/Psych/Visitors/JSONTree.html","",""],["Psych::Visitors::ToRuby","","classes/Psych/Visitors/ToRuby.html","","<p>This class walks a YAML AST, converting each node to ruby\n"],["Psych::Visitors::Visitor","","classes/Psych/Visitors/Visitor.html","",""],["Psych::Visitors::YAMLTree","","classes/Psych/Visitors/YAMLTree.html","","<p>YAMLTree builds a YAML ast given a ruby object.  For example:\n\n<pre><code>builder = Psych::Visitors::YAMLTree.new ...</code></pre>\n"],["Queue","","classes/Queue.html","","<p>This class provides a way to synchronize communication between threads.\n<p>Example:\n\n<pre><code>require &#39;thread&#39;\n\nqueue ...\n</code></pre>\n"],["RDoc","","classes/RDoc.html","","<p>RDoc is a Ruby documentation system which contains RDoc::RDoc for\ngenerating documentation, RDoc::RI …\n"],["RDoc::Alias","","classes/RDoc/Alias.html","","<p>Represent an alias, which is an old_name/new_name pair associated with a\nparticular context\n"],["RDoc::AnonClass","","classes/RDoc/AnonClass.html","","<p>An anonymous class like:\n\n<pre><code>c = Class.new do end</code></pre>\n<p>AnonClass is currently not used.\n"],["RDoc::AnyMethod","","classes/RDoc/AnyMethod.html","","<p>AnyMethod is the base class for objects representing methods\n"],["RDoc::Attr","","classes/RDoc/Attr.html","","<p>An attribute created by #attr, #attr_reader, #attr_writer or #attr_accessor\n"],["RDoc::ClassModule","","classes/RDoc/ClassModule.html","","<p>ClassModule is the base class for objects representing either a class or a\nmodule.\n"],["RDoc::CodeObject","","classes/RDoc/CodeObject.html","","<p>Base class for the RDoc code tree.\n<p>We contain the common stuff for contexts (which are containers) and …\n"],["RDoc::Constant","","classes/RDoc/Constant.html","","<p>A constant\n"],["RDoc::Context","","classes/RDoc/Context.html","","<p>A Context is something that can hold modules, classes, methods, attributes,\naliases, requires, and includes. …\n"],["RDoc::Context::Section","","classes/RDoc/Context/Section.html","","<p>A section of documentation like:\n\n<pre><code># :section: The title\n# The body</code></pre>\n<p>Sections can be referenced multiple times …\n"],["RDoc::CrossReference","","classes/RDoc/CrossReference.html","","<p>RDoc::CrossReference is a reusable way to create cross references for\nnames.\n"],["RDoc::ERBIO","","classes/RDoc/ERBIO.html","","<p>A subclass of ERB that writes directly to an IO.  Credit to Aaron Patterson\nand Masatoshi SEKI.\n<p>To use: …\n"],["RDoc::Encoding","","classes/RDoc/Encoding.html","","<p>This class is a wrapper around File IO and Encoding that helps RDoc load\nfiles and convert them to the …\n"],["RDoc::Error","","classes/RDoc/Error.html","","<p>Exception thrown by any rdoc error.\n"],["RDoc::Generator","","classes/RDoc/Generator.html","","<p>RDoc uses generators to turn parsed source code in the form of an\nRDoc::CodeObject tree into some form …\n"],["RDoc::Generator::Darkfish","","classes/RDoc/Generator/Darkfish.html","","<p>Darkfish RDoc HTML Generator\n<p>$Id: darkfish.rb 52 2009-01-07 02:08:11Z deveiant $\n<p>Author/s\n"],["RDoc::Generator::Markup","","classes/RDoc/Generator/Markup.html","","<p>Handle common RDoc::Markup tasks for various CodeObjects\n"],["RDoc::Generator::RI","","classes/RDoc/Generator/RI.html","","<p>Generates ri data files\n"],["RDoc::GhostMethod","","classes/RDoc/GhostMethod.html","","<p>GhostMethod represents a method referenced only by a comment\n"],["RDoc::Include","","classes/RDoc/Include.html","","<p>A Module include in a class with #include\n"],["RDoc::Markup","","classes/RDoc/Markup.html","","<p>RDoc::Markup parses plain text documents and attempts to decompose them\ninto their constituent parts. …\n"],["RDoc::Markup::AttrChanger","","classes/RDoc/Markup/AttrChanger.html","","<p>An AttrChanger records a change in attributes. It contains a bitmap of the\nattributes to turn on, and …\n"],["RDoc::Markup::AttrSpan","","classes/RDoc/Markup/AttrSpan.html","","<p>An array of attributes which parallels the characters in a string.\n"],["RDoc::Markup::Attribute","","classes/RDoc/Markup/Attribute.html","","<p>We manage a set of attributes. Each attribute has a symbol name and a bit\nvalue.\n"],["RDoc::Markup::AttributeManager","","classes/RDoc/Markup/AttributeManager.html","","<p>Manages changes of attributes in a block of text\n"],["RDoc::Markup::BlankLine","","classes/RDoc/Markup/BlankLine.html","","<p>An empty line.  This class is a singleton.\n"],["RDoc::Markup::Document","","classes/RDoc/Markup/Document.html","","<p>A Document containing lists, headings, paragraphs, etc.\n"],["RDoc::Markup::Formatter","","classes/RDoc/Markup/Formatter.html","","<p>Base class for RDoc markup formatters\n<p>Formatters use a visitor pattern to convert content into output. …\n"],["RDoc::Markup::Heading","","classes/RDoc/Markup/Heading.html","","<p>A heading with a level (1-6) and text\n"],["RDoc::Markup::IndentedParagraph","","classes/RDoc/Markup/IndentedParagraph.html","","<p>An Indented Paragraph of text\n"],["RDoc::Markup::List","","classes/RDoc/Markup/List.html","","<p>A List of ListItems\n"],["RDoc::Markup::ListItem","","classes/RDoc/Markup/ListItem.html","","<p>An item within a List that contains paragraphs, headings, etc.\n"],["RDoc::Markup::Paragraph","","classes/RDoc/Markup/Paragraph.html","","<p>A Paragraph of text\n"],["RDoc::Markup::Parser","","classes/RDoc/Markup/Parser.html","","<p>A recursive-descent parser for RDoc markup.\n<p>The parser tokenizes an input string then parses the tokens …\n"],["RDoc::Markup::Parser::Error","","classes/RDoc/Markup/Parser/Error.html","","<p>Parser error subclass\n"],["RDoc::Markup::Parser::ParseError","","classes/RDoc/Markup/Parser/ParseError.html","","<p>Raised when the parser is unable to handle the given markup\n"],["RDoc::Markup::PreProcess","","classes/RDoc/Markup/PreProcess.html","","<p>Handle common directives that can occur in a block of text:\n\n<pre><code>:include: filename</code></pre>\n<p>Directives can be escaped …\n"],["RDoc::Markup::Raw","","classes/RDoc/Markup/Raw.html","","<p>A section of text that is added to the output document as-is\n"],["RDoc::Markup::Rule","","classes/RDoc/Markup/Rule.html","","<p>A horizontal rule with a weight\n"],["RDoc::Markup::Special","","classes/RDoc/Markup/Special.html","","<p>Hold details of a special sequence\n"],["RDoc::Markup::ToAnsi","","classes/RDoc/Markup/ToAnsi.html","","<p>Outputs RDoc markup with vibrant ANSI color!\n"],["RDoc::Markup::ToBs","","classes/RDoc/Markup/ToBs.html","","<p>Outputs RDoc markup with hot backspace action!  You will probably need a\npager to use this output format. …\n"],["RDoc::Markup::ToHtml","","classes/RDoc/Markup/ToHtml.html","","<p>Outputs RDoc markup as HTML\n"],["RDoc::Markup::ToHtmlCrossref","","classes/RDoc/Markup/ToHtmlCrossref.html","","<p>Subclass of the RDoc::Markup::ToHtml class that supports looking up method\nnames, classes, etc to create …\n"],["RDoc::Markup::ToRdoc","","classes/RDoc/Markup/ToRdoc.html","","<p>Outputs RDoc markup as RDoc markup! (mostly)\n"],["RDoc::Markup::ToTtOnly","","classes/RDoc/Markup/ToTtOnly.html","","<p>Extracts sections of text enclosed in plus, tt or code.  Used to discover\nundocumented parameters.\n"],["RDoc::Markup::Verbatim","","classes/RDoc/Markup/Verbatim.html","","<p>A section of verbatim text\n"],["RDoc::MetaMethod","","classes/RDoc/MetaMethod.html","","<p>MetaMethod represents a meta-programmed method\n"],["RDoc::MethodAttr","","classes/RDoc/MethodAttr.html","","<p>Abstract class representing either a method or an attribute.\n"],["RDoc::NormalClass","","classes/RDoc/NormalClass.html","","<p>A normal class, neither singleton nor anonymous\n"],["RDoc::NormalModule","","classes/RDoc/NormalModule.html","","<p>A normal module, like NormalClass\n"],["RDoc::Options","","classes/RDoc/Options.html","","<p>RDoc::Options handles the parsing and storage of options\n"],["RDoc::Page","","classes/RDoc/Page.html","",""],["RDoc::Parser","","classes/RDoc/Parser.html","","<p>A parser is a class that subclasses RDoc::Parser and implements\n\n<pre><code>#initialize top_level, file_name, body, ...</code></pre>\n"],["RDoc::Parser::C","","classes/RDoc/Parser/C.html","","<p>RDoc::Parser::C attempts to parse C extension files.  It looks for the\nstandard patterns that you find …\n"],["RDoc::Parser::Ruby","","classes/RDoc/Parser/Ruby.html","","<p>Extracts code elements from a source file returning a TopLevel object\ncontaining the constituent file …\n"],["RDoc::Parser::RubyTools","","classes/RDoc/Parser/RubyTools.html","","<p>Collection of methods for writing parsers against RDoc::RubyLex and\nRDoc::RubyToken\n"],["RDoc::Parser::Simple","","classes/RDoc/Parser/Simple.html","","<p>Parse a non-source file. We basically take the whole thing as one big\ncomment.\n"],["RDoc::RDoc","","classes/RDoc/RDoc.html","","<p>Encapsulate the production of rdoc documentation. Basically you can use\nthis as you would invoke rdoc …\n"],["RDoc::RI","","classes/RDoc/RI.html","","<p>Namespace for the ri command line tool&#39;s implementation.\n<p>See <code>ri --help</code> for details.\n"],["RDoc::RI::Driver","","classes/RDoc/RI/Driver.html","","<p>The RI driver implements the command-line ri tool.\n<p>The driver supports:\n<p>loading RI data from:\n"],["RDoc::RI::Driver::Error","","classes/RDoc/RI/Driver/Error.html","","<p>Base Driver error class\n"],["RDoc::RI::Driver::NotFoundError","","classes/RDoc/RI/Driver/NotFoundError.html","","<p>Raised when a name isn&#39;t found in the ri data stores\n"],["RDoc::RI::Error","","classes/RDoc/RI/Error.html","","<p>Base RI error class\n"],["RDoc::RI::Paths","","classes/RDoc/RI/Paths.html","","<p>The directories where ri data lives.\n"],["RDoc::RI::Store","","classes/RDoc/RI/Store.html","","<p>A set of ri data.\n<p>The store manages reading and writing ri data for a project (gem, path,\netc.) and maintains …\n"],["RDoc::Require","","classes/RDoc/Require.html","","<p>A file loaded by #require\n"],["RDoc::RubyLex","","classes/RDoc/RubyLex.html","","<p>Ruby lexer adapted from irb.\n<p>The internals are not documented because they are scary.\n"],["RDoc::RubyToken","","classes/RDoc/RubyToken.html","","<p>Definitions of all tokens involved in the lexical analysis.\n<p>This class is not documented because it is …\n"],["RDoc::RubyToken::TkError","","classes/RDoc/RubyToken/TkError.html","",""],["RDoc::RubyToken::TkId","","classes/RDoc/RubyToken/TkId.html","",""],["RDoc::RubyToken::TkKW","","classes/RDoc/RubyToken/TkKW.html","",""],["RDoc::RubyToken::TkNode","","classes/RDoc/RubyToken/TkNode.html","",""],["RDoc::RubyToken::TkOPASGN","","classes/RDoc/RubyToken/TkOPASGN.html","",""],["RDoc::RubyToken::TkOp","","classes/RDoc/RubyToken/TkOp.html","",""],["RDoc::RubyToken::TkSYMBOL","","classes/RDoc/RubyToken/TkSYMBOL.html","",""],["RDoc::RubyToken::TkUnknownChar","","classes/RDoc/RubyToken/TkUnknownChar.html","",""],["RDoc::RubyToken::TkVal","","classes/RDoc/RubyToken/TkVal.html","",""],["RDoc::RubyToken::Token","","classes/RDoc/RubyToken/Token.html","",""],["RDoc::RubygemsHook","","classes/RDoc/RubygemsHook.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems\nupon gem installation.\n<p>This …\n"],["RDoc::SingleClass","","classes/RDoc/SingleClass.html","","<p>A singleton class\n"],["RDoc::Stats","","classes/RDoc/Stats.html","","<p>RDoc statistics collector which prints a summary and report of a\nproject&#39;s documentation totals. …\n"],["RDoc::Stats::Normal","","classes/RDoc/Stats/Normal.html","","<p>Stats printer that prints just the files being documented with a progress\nbar\n"],["RDoc::Stats::Quiet","","classes/RDoc/Stats/Quiet.html","","<p>Stats printer that prints nothing\n"],["RDoc::Stats::Verbose","","classes/RDoc/Stats/Verbose.html","","<p>Stats printer that prints everything documented, including the documented\nstatus\n"],["RDoc::Task","","classes/RDoc/Task.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc\noutput:\n<p>rdoc &mdash; Main task for this …\n"],["RDoc::Text","","classes/RDoc/Text.html","","<p>Methods for manipulating comment text\n"],["RDoc::TokenStream","","classes/RDoc/TokenStream.html","","<p>A TokenStream is a list of tokens, gathered during the parse of some entity\n(say a method). Entities …\n"],["RDoc::TopLevel","","classes/RDoc/TopLevel.html","","<p>A TopLevel context is a representation of the contents of a single file\n"],["REXML","","classes/REXML.html","","<p> :element, parent, name, attributes, children*  &mdash; a = Node.new a &lt;&lt; “B”            # =&gt; …\n\n"],["REXML::AttlistDecl","","classes/REXML/AttlistDecl.html","","<p>This class needs:\n<p>Documentation\n<p>Work!  Not all types of attlists are intelligently parsed, so we just\n"],["REXML::Attribute","","classes/REXML/Attribute.html","","<p>Defines an Element Attribute; IE, a attribute=value pair, as in:\n&lt;element attribute=“value”/&gt;. …\n"],["REXML::Attributes","","classes/REXML/Attributes.html","",""],["REXML::CData","","classes/REXML/CData.html","",""],["REXML::Child","","classes/REXML/Child.html","","<p>A Child object is something contained by a parent, and this class contains\nmethods to support that.  …\n"],["REXML::Comment","","classes/REXML/Comment.html","","<p>Represents an XML comment; that is, text between &lt;!– … –&gt;\n"],["REXML::DTD","","classes/REXML/DTD.html","",""],["REXML::DTD::AttlistDecl","","classes/REXML/DTD/AttlistDecl.html","",""],["REXML::DTD::ElementDecl","","classes/REXML/DTD/ElementDecl.html","",""],["REXML::DTD::EntityDecl","","classes/REXML/DTD/EntityDecl.html","",""],["REXML::DTD::NotationDecl","","classes/REXML/DTD/NotationDecl.html","",""],["REXML::DTD::Parser","","classes/REXML/DTD/Parser.html","",""],["REXML::Declaration","","classes/REXML/Declaration.html","",""],["REXML::DocType","","classes/REXML/DocType.html","","<p>Represents an XML DOCTYPE declaration; that is, the contents of\n&lt;!DOCTYPE … &gt;.  DOCTYPES can …\n"],["REXML::Document","","classes/REXML/Document.html","","<p>Represents a full XML document, including PIs, a doctype, etc.  A Document\nhas a single child that can …\n"],["REXML::Element","","classes/REXML/Element.html","","<p>Represents a tagged XML element.  Elements are characterized by having\nchildren, attributes, and names, …\n"],["REXML::ElementDecl","","classes/REXML/ElementDecl.html","",""],["REXML::Elements","","classes/REXML/Elements.html","",""],["REXML::Encoding","","classes/REXML/Encoding.html","",""],["REXML::Entity","","classes/REXML/Entity.html","","<p>God, I hate DTDs.  I really do.  Why this idiot standard still plagues us\nis beyond me.\n"],["REXML::EntityConst","","classes/REXML/EntityConst.html","","<p>This is a set of entity constants – the ones defined in the XML\nspecification.  These are <code>gt</code>, <code>lt</code>,\n<code>amp</code> …\n"],["REXML::ExternalEntity","","classes/REXML/ExternalEntity.html","",""],["REXML::Formatters","","classes/REXML/Formatters.html","",""],["REXML::Formatters::Default","","classes/REXML/Formatters/Default.html","",""],["REXML::Formatters::Pretty","","classes/REXML/Formatters/Pretty.html","","<p>Pretty-prints an XML document.  This destroys whitespace in text nodes and\nwill insert carriage returns …\n"],["REXML::Formatters::Transitive","","classes/REXML/Formatters/Transitive.html","","<p>The Transitive formatter writes an XML document that parses to an identical\ndocument as the source document. …\n"],["REXML::Functions","","classes/REXML/Functions.html","","<p>If you add a method, keep in mind two things: (1) the first argument will\nalways be a list of nodes from …\n"],["REXML::IOSource","","classes/REXML/IOSource.html","","<p>A Source that wraps an IO.  See the Source class for method documentation\n"],["REXML::Instruction","","classes/REXML/Instruction.html","","<p>Represents an XML Instruction; IE, &lt;? … ?&gt; TODO: Add parent arg (3rd\narg) to constructor\n"],["REXML::Light","","classes/REXML/Light.html","",""],["REXML::Light::Node","","classes/REXML/Light/Node.html","","<p>Represents a tagged XML element.  Elements are characterized by having\nchildren, attributes, and names, …\n"],["REXML::Namespace","","classes/REXML/Namespace.html","","<p>Adds named attributes to an object.\n"],["REXML::Node","","classes/REXML/Node.html","","<p>Represents a node in the tree.  Nodes are never encountered except as\nsuperclasses of other objects. …\n"],["REXML::NotationDecl","","classes/REXML/NotationDecl.html","",""],["REXML::Output","","classes/REXML/Output.html","",""],["REXML::Parent","","classes/REXML/Parent.html","","<p>A parent has children, and has methods for accessing them.  The Parent\nclass is never encountered except …\n"],["REXML::ParseException","","classes/REXML/ParseException.html","",""],["REXML::Parsers","","classes/REXML/Parsers.html","",""],["REXML::Parsers::BaseParser","","classes/REXML/Parsers/BaseParser.html","","<p>Using the Pull Parser\n<p><em>This API is experimental, and subject to change.</em>\n\n<pre><code>parser = PullParser.new( &quot;&lt;a&gt;text&lt;b ...</code></pre>\n"],["REXML::Parsers::LightParser","","classes/REXML/Parsers/LightParser.html","",""],["REXML::Parsers::PullEvent","","classes/REXML/Parsers/PullEvent.html","","<p>A parsing event.  The contents of the event are accessed as an +Array?, and\nthe type is given either …\n"],["REXML::Parsers::PullParser","","classes/REXML/Parsers/PullParser.html","","<p>Using the Pull Parser\n<p><em>This API is experimental, and subject to change.</em>\n\n<pre><code>parser = PullParser.new( &quot;&lt;a&gt;text&lt;b ...</code></pre>\n"],["REXML::Parsers::SAX2Parser","","classes/REXML/Parsers/SAX2Parser.html","","<p>SAX2Parser\n"],["REXML::Parsers::StreamParser","","classes/REXML/Parsers/StreamParser.html","",""],["REXML::Parsers::TreeParser","","classes/REXML/Parsers/TreeParser.html","",""],["REXML::Parsers::UltraLightParser","","classes/REXML/Parsers/UltraLightParser.html","",""],["REXML::Parsers::XPathParser","","classes/REXML/Parsers/XPathParser.html","","<p>You don&#39;t want to use this class.  Really.  Use XPath, which is a\nwrapper for this class.  Believe …\n"],["REXML::QuickPath","","classes/REXML/QuickPath.html","",""],["REXML::SAX2Listener","","classes/REXML/SAX2Listener.html","","<p>A template for stream parser listeners. Note that the declarations\n(attlistdecl, elementdecl, etc) are …\n"],["REXML::Source","","classes/REXML/Source.html","","<p>A Source can be searched for patterns, and wraps buffers and other objects\nand provides consumption of …\n"],["REXML::SourceFactory","","classes/REXML/SourceFactory.html","","<p>Generates Source-s.  USE THIS CLASS.\n"],["REXML::StreamListener","","classes/REXML/StreamListener.html","","<p>A template for stream parser listeners. Note that the declarations\n(attlistdecl, elementdecl, etc) are …\n"],["REXML::SyncEnumerator","","classes/REXML/SyncEnumerator.html","",""],["REXML::Text","","classes/REXML/Text.html","","<p>Represents text nodes in an XML document\n"],["REXML::UndefinedNamespaceException","","classes/REXML/UndefinedNamespaceException.html","",""],["REXML::Validation","","classes/REXML/Validation.html","",""],["REXML::Validation::Choice","","classes/REXML/Validation/Choice.html","",""],["REXML::Validation::Event","","classes/REXML/Validation/Event.html","",""],["REXML::Validation::Interleave","","classes/REXML/Validation/Interleave.html","",""],["REXML::Validation::OneOrMore","","classes/REXML/Validation/OneOrMore.html","",""],["REXML::Validation::Optional","","classes/REXML/Validation/Optional.html","",""],["REXML::Validation::Ref","","classes/REXML/Validation/Ref.html","",""],["REXML::Validation::RelaxNG","","classes/REXML/Validation/RelaxNG.html","","<p>Implemented:\n<p>empty\n<p>element\n"],["REXML::Validation::Sequence","","classes/REXML/Validation/Sequence.html","",""],["REXML::Validation::State","","classes/REXML/Validation/State.html","",""],["REXML::Validation::ValidationException","","classes/REXML/Validation/ValidationException.html","",""],["REXML::Validation::Validator","","classes/REXML/Validation/Validator.html","",""],["REXML::Validation::ZeroOrMore","","classes/REXML/Validation/ZeroOrMore.html","",""],["REXML::XMLDecl","","classes/REXML/XMLDecl.html","","<p>NEEDS DOCUMENTATION\n"],["REXML::XMLTokens","","classes/REXML/XMLTokens.html","","<p>Defines a number of tokens used for parsing XML.  Not for general\nconsumption.\n"],["REXML::XPath","","classes/REXML/XPath.html","","<p>Wrapper class.  Use this class to access the XPath functions.\n"],["REXML::XPathParser","","classes/REXML/XPathParser.html","","<p>You don&#39;t want to use this class.  Really.  Use XPath, which is a\nwrapper for this class.  Believe …\n"],["ROMP","","classes/ROMP.html","",""],["RSS","","classes/RSS.html","","<p>RSS reading and writing\n<p>Really Simple Syndication (RSS) is a family of formats that describe\n&#39;feeds,&#39; …\n"],["RSS::Atom","","classes/RSS/Atom.html","",""],["RSS::Atom::CommonModel","","classes/RSS/Atom/CommonModel.html","",""],["RSS::Atom::ContentModel","","classes/RSS/Atom/ContentModel.html","",""],["RSS::Atom::ContentModel::ClassMethods","","classes/RSS/Atom/ContentModel/ClassMethods.html","",""],["RSS::Atom::DateConstruct","","classes/RSS/Atom/DateConstruct.html","",""],["RSS::Atom::DuplicateLinkChecker","","classes/RSS/Atom/DuplicateLinkChecker.html","",""],["RSS::Atom::Entry","","classes/RSS/Atom/Entry.html","",""],["RSS::Atom::Feed","","classes/RSS/Atom/Feed.html","",""],["RSS::Atom::Feed::Author","","classes/RSS/Atom/Feed/Author.html","",""],["RSS::Atom::Feed::Category","","classes/RSS/Atom/Feed/Category.html","",""],["RSS::Atom::Feed::Contributor","","classes/RSS/Atom/Feed/Contributor.html","",""],["RSS::Atom::Feed::Entry","","classes/RSS/Atom/Feed/Entry.html","",""],["RSS::Atom::Feed::Entry::Content","","classes/RSS/Atom/Feed/Entry/Content.html","",""],["RSS::Atom::Feed::Entry::Published","","classes/RSS/Atom/Feed/Entry/Published.html","",""],["RSS::Atom::Feed::Entry::Source","","classes/RSS/Atom/Feed/Entry/Source.html","",""],["RSS::Atom::Feed::Entry::Summary","","classes/RSS/Atom/Feed/Entry/Summary.html","",""],["RSS::Atom::Feed::Generator","","classes/RSS/Atom/Feed/Generator.html","",""],["RSS::Atom::Feed::Icon","","classes/RSS/Atom/Feed/Icon.html","",""],["RSS::Atom::Feed::Id","","classes/RSS/Atom/Feed/Id.html","",""],["RSS::Atom::Feed::Link","","classes/RSS/Atom/Feed/Link.html","",""],["RSS::Atom::Feed::Logo","","classes/RSS/Atom/Feed/Logo.html","",""],["RSS::Atom::Feed::Rights","","classes/RSS/Atom/Feed/Rights.html","",""],["RSS::Atom::Feed::Subtitle","","classes/RSS/Atom/Feed/Subtitle.html","",""],["RSS::Atom::Feed::Title","","classes/RSS/Atom/Feed/Title.html","",""],["RSS::Atom::Feed::Updated","","classes/RSS/Atom/Feed/Updated.html","",""],["RSS::Atom::PersonConstruct","","classes/RSS/Atom/PersonConstruct.html","",""],["RSS::Atom::PersonConstruct::Email","","classes/RSS/Atom/PersonConstruct/Email.html","",""],["RSS::Atom::PersonConstruct::Name","","classes/RSS/Atom/PersonConstruct/Name.html","",""],["RSS::Atom::PersonConstruct::Uri","","classes/RSS/Atom/PersonConstruct/Uri.html","",""],["RSS::Atom::TextConstruct","","classes/RSS/Atom/TextConstruct.html","",""],["RSS::Atom::URIContentModel","","classes/RSS/Atom/URIContentModel.html","",""],["RSS::BaseDublinCoreModel","","classes/RSS/BaseDublinCoreModel.html","",""],["RSS::BaseListener","","classes/RSS/BaseListener.html","",""],["RSS::BaseModel","","classes/RSS/BaseModel.html","",""],["RSS::BaseParser","","classes/RSS/BaseParser.html","",""],["RSS::BaseTrackBackModel","","classes/RSS/BaseTrackBackModel.html","",""],["RSS::ContentModel","","classes/RSS/ContentModel.html","",""],["RSS::ConversionError","","classes/RSS/ConversionError.html","","<p>Raised when a conversion failure occurs.\n"],["RSS::Converter","","classes/RSS/Converter.html","",""],["RSS::DublinCoreModel","","classes/RSS/DublinCoreModel.html","",""],["RSS::DublincoreModel","","classes/RSS/DublinCoreModel.html","",""],["RSS::Element","","classes/RSS/Element.html","",""],["RSS::Error","","classes/RSS/Error.html","",""],["RSS::ITunesBaseModel","","classes/RSS/ITunesBaseModel.html","",""],["RSS::ITunesChannelModel","","classes/RSS/ITunesChannelModel.html","",""],["RSS::ITunesChannelModel::ITunesCategory","","classes/RSS/ITunesChannelModel/ITunesCategory.html","",""],["RSS::ITunesChannelModel::ITunesImage","","classes/RSS/ITunesChannelModel/ITunesImage.html","",""],["RSS::ITunesChannelModel::ITunesOwner","","classes/RSS/ITunesChannelModel/ITunesOwner.html","",""],["RSS::ITunesItemModel","","classes/RSS/ITunesItemModel.html","",""],["RSS::ITunesItemModel::ITunesDuration","","classes/RSS/ITunesItemModel/ITunesDuration.html","",""],["RSS::ITunesModelUtils","","classes/RSS/ITunesModelUtils.html","",""],["RSS::ImageFaviconModel","","classes/RSS/ImageFaviconModel.html","",""],["RSS::ImageFaviconModel::ImageFavicon","","classes/RSS/ImageFaviconModel/ImageFavicon.html","",""],["RSS::ImageItemModel","","classes/RSS/ImageItemModel.html","",""],["RSS::ImageItemModel::ImageItem","","classes/RSS/ImageItemModel/ImageItem.html","",""],["RSS::ImageModelUtils","","classes/RSS/ImageModelUtils.html","",""],["RSS::InvalidRSSError","","classes/RSS/InvalidRSSError.html","",""],["RSS::ListenerMixin","","classes/RSS/ListenerMixin.html","",""],["RSS::Maker","","classes/RSS/Maker.html","",""],["RSS::Maker::Atom","","classes/RSS/Maker/Atom.html","",""],["RSS::Maker::Atom::Entry","","classes/RSS/Maker/Atom/Entry.html","",""],["RSS::Maker::Atom::Entry::Channel","","classes/RSS/Maker/Atom/Entry/Channel.html","",""],["RSS::Maker::Atom::Entry::Channel::Cloud","","classes/RSS/Maker/Atom/Entry/Channel/Cloud.html","",""],["RSS::Maker::Atom::Entry::Channel::Description","","classes/RSS/Maker/Atom/Entry/Channel/Description.html","",""],["RSS::Maker::Atom::Entry::Channel::Generator","","classes/RSS/Maker/Atom/Entry/Channel/Generator.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipDays","","classes/RSS/Maker/Atom/Entry/Channel/SkipDays.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipDays::Day","","classes/RSS/Maker/Atom/Entry/Channel/SkipDays/Day.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipHours","","classes/RSS/Maker/Atom/Entry/Channel/SkipHours.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipHours::Hour","","classes/RSS/Maker/Atom/Entry/Channel/SkipHours/Hour.html","",""],["RSS::Maker::Atom::Entry::Image","","classes/RSS/Maker/Atom/Entry/Image.html","",""],["RSS::Maker::Atom::Entry::Items","","classes/RSS/Maker/Atom/Entry/Items.html","",""],["RSS::Maker::Atom::Entry::Items::Item","","classes/RSS/Maker/Atom/Entry/Items/Item.html","",""],["RSS::Maker::Atom::Entry::Textinput","","classes/RSS/Maker/Atom/Entry/Textinput.html","",""],["RSS::Maker::Atom::Feed","","classes/RSS/Maker/Atom/Feed.html","",""],["RSS::Maker::Atom::Feed::Channel","","classes/RSS/Maker/Atom/Feed/Channel.html","",""],["RSS::Maker::Atom::Feed::Channel::Categories","","classes/RSS/Maker/Atom/Feed/Channel/Categories.html","",""],["RSS::Maker::Atom::Feed::Channel::Categories::Category","","classes/RSS/Maker/Atom/Feed/Channel/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Channel::Cloud","","classes/RSS/Maker/Atom/Feed/Channel/Cloud.html","",""],["RSS::Maker::Atom::Feed::Channel::Generator","","classes/RSS/Maker/Atom/Feed/Channel/Generator.html","",""],["RSS::Maker::Atom::Feed::Channel::Links","","classes/RSS/Maker/Atom/Feed/Channel/Links.html","",""],["RSS::Maker::Atom::Feed::Channel::Links::Link","","classes/RSS/Maker/Atom/Feed/Channel/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipDays","","classes/RSS/Maker/Atom/Feed/Channel/SkipDays.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipDays::Day","","classes/RSS/Maker/Atom/Feed/Channel/SkipDays/Day.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipHours","","classes/RSS/Maker/Atom/Feed/Channel/SkipHours.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipHours::Hour","","classes/RSS/Maker/Atom/Feed/Channel/SkipHours/Hour.html","",""],["RSS::Maker::Atom::Feed::Image","","classes/RSS/Maker/Atom/Feed/Image.html","",""],["RSS::Maker::Atom::Feed::Items","","classes/RSS/Maker/Atom/Feed/Items.html","",""],["RSS::Maker::Atom::Feed::Items::Item","","classes/RSS/Maker/Atom/Feed/Items/Item.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Categories","","classes/RSS/Maker/Atom/Feed/Items/Item/Categories.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Categories::Category","","classes/RSS/Maker/Atom/Feed/Items/Item/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Content","","classes/RSS/Maker/Atom/Feed/Items/Item/Content.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Enclosure","","classes/RSS/Maker/Atom/Feed/Items/Item/Enclosure.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Guid","","classes/RSS/Maker/Atom/Feed/Items/Item/Guid.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Links","","classes/RSS/Maker/Atom/Feed/Items/Item/Links.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Links::Link","","classes/RSS/Maker/Atom/Feed/Items/Item/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source","","classes/RSS/Maker/Atom/Feed/Items/Item/Source.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Categories","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Categories.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Categories::Category","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Generator","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Generator.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Icon","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Icon.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Links","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Links.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Links::Link","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Logo","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Logo.html","",""],["RSS::Maker::Atom::Feed::Textinput","","classes/RSS/Maker/Atom/Feed/Textinput.html","",""],["RSS::Maker::AtomCategory","","classes/RSS/Maker/AtomCategory.html","",""],["RSS::Maker::AtomGenerator","","classes/RSS/Maker/AtomGenerator.html","",""],["RSS::Maker::AtomLink","","classes/RSS/Maker/AtomLink.html","",""],["RSS::Maker::AtomLogo","","classes/RSS/Maker/AtomLogo.html","",""],["RSS::Maker::AtomPersonConstructBase","","classes/RSS/Maker/AtomPersonConstructBase.html","",""],["RSS::Maker::AtomPersons","","classes/RSS/Maker/AtomPersons.html","",""],["RSS::Maker::AtomTextConstruct","","classes/RSS/Maker/AtomTextConstruct.html","",""],["RSS::Maker::AtomTextConstructBase","","classes/RSS/Maker/AtomTextConstructBase.html","",""],["RSS::Maker::AtomTextConstructBase::EnsureXMLContent","","classes/RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html","",""],["RSS::Maker::Base","","classes/RSS/Maker/Base.html","",""],["RSS::Maker::ChannelBase","","classes/RSS/Maker/ChannelBase.html","",""],["RSS::Maker::ChannelBase::AuthorsBase","","classes/RSS/Maker/ChannelBase/AuthorsBase.html","",""],["RSS::Maker::ChannelBase::AuthorsBase::AuthorBase","","classes/RSS/Maker/ChannelBase/AuthorsBase/AuthorBase.html","",""],["RSS::Maker::ChannelBase::CategoriesBase","","classes/RSS/Maker/ChannelBase/CategoriesBase.html","",""],["RSS::Maker::ChannelBase::CategoriesBase::CategoryBase","","classes/RSS/Maker/ChannelBase/CategoriesBase/CategoryBase.html","",""],["RSS::Maker::ChannelBase::CloudBase","","classes/RSS/Maker/ChannelBase/CloudBase.html","",""],["RSS::Maker::ChannelBase::ContributorsBase","","classes/RSS/Maker/ChannelBase/ContributorsBase.html","",""],["RSS::Maker::ChannelBase::ContributorsBase::ContributorBase","","classes/RSS/Maker/ChannelBase/ContributorsBase/ContributorBase.html","",""],["RSS::Maker::ChannelBase::CopyrightBase","","classes/RSS/Maker/ChannelBase/CopyrightBase.html","",""],["RSS::Maker::ChannelBase::DescriptionBase","","classes/RSS/Maker/ChannelBase/DescriptionBase.html","",""],["RSS::Maker::ChannelBase::GeneratorBase","","classes/RSS/Maker/ChannelBase/GeneratorBase.html","",""],["RSS::Maker::ChannelBase::ITunesCategories","","classes/RSS/Maker/ChannelBase/ITunesCategories.html","",""],["RSS::Maker::ChannelBase::ITunesCategories::ITunesCategory","","classes/RSS/Maker/ChannelBase/ITunesCategories/ITunesCategory.html","",""],["RSS::Maker::ChannelBase::ITunesImage","","classes/RSS/Maker/ChannelBase/ITunesImage.html","",""],["RSS::Maker::ChannelBase::ITunesOwner","","classes/RSS/Maker/ChannelBase/ITunesOwner.html","",""],["RSS::Maker::ChannelBase::LinksBase","","classes/RSS/Maker/ChannelBase/LinksBase.html","",""],["RSS::Maker::ChannelBase::LinksBase::LinkBase","","classes/RSS/Maker/ChannelBase/LinksBase/LinkBase.html","",""],["RSS::Maker::ChannelBase::SkipDaysBase","","classes/RSS/Maker/ChannelBase/SkipDaysBase.html","",""],["RSS::Maker::ChannelBase::SkipDaysBase::DayBase","","classes/RSS/Maker/ChannelBase/SkipDaysBase/DayBase.html","",""],["RSS::Maker::ChannelBase::SkipHoursBase","","classes/RSS/Maker/ChannelBase/SkipHoursBase.html","",""],["RSS::Maker::ChannelBase::SkipHoursBase::HourBase","","classes/RSS/Maker/ChannelBase/SkipHoursBase/HourBase.html","",""],["RSS::Maker::ChannelBase::TitleBase","","classes/RSS/Maker/ChannelBase/TitleBase.html","",""],["RSS::Maker::ContentModel","","classes/RSS/Maker/ContentModel.html","",""],["RSS::Maker::DublinCoreModel","","classes/RSS/Maker/DublinCoreModel.html","",""],["RSS::Maker::ITunesBaseModel","","classes/RSS/Maker/ITunesBaseModel.html","",""],["RSS::Maker::ITunesChannelModel","","classes/RSS/Maker/ITunesChannelModel.html","",""],["RSS::Maker::ITunesChannelModel::ITunesCategoriesBase","","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesImageBase","","classes/RSS/Maker/ITunesChannelModel/ITunesImageBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesOwnerBase","","classes/RSS/Maker/ITunesChannelModel/ITunesOwnerBase.html","",""],["RSS::Maker::ITunesItemModel","","classes/RSS/Maker/ITunesItemModel.html","",""],["RSS::Maker::ITunesItemModel::ITunesDurationBase","","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html","",""],["RSS::Maker::ImageBase","","classes/RSS/Maker/ImageBase.html","",""],["RSS::Maker::ImageFaviconModel","","classes/RSS/Maker/ImageFaviconModel.html","",""],["RSS::Maker::ImageFaviconModel::ImageFaviconBase","","classes/RSS/Maker/ImageFaviconModel/ImageFaviconBase.html","",""],["RSS::Maker::ImageItemModel","","classes/RSS/Maker/ImageItemModel.html","",""],["RSS::Maker::ImageItemModel::ImageItemBase","","classes/RSS/Maker/ImageItemModel/ImageItemBase.html","",""],["RSS::Maker::ItemsBase","","classes/RSS/Maker/ItemsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase","","classes/RSS/Maker/ItemsBase/ItemBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::ContentBase","","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::DescriptionBase","","classes/RSS/Maker/ItemsBase/ItemBase/DescriptionBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::EnclosureBase","","classes/RSS/Maker/ItemsBase/ItemBase/EnclosureBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::GuidBase","","classes/RSS/Maker/ItemsBase/ItemBase/GuidBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::ITunesDuration","","classes/RSS/Maker/ItemsBase/ItemBase/ITunesDuration.html","",""],["RSS::Maker::ItemsBase::ItemBase::RightsBase","","classes/RSS/Maker/ItemsBase/ItemBase/RightsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::IconBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/IconBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::LogoBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/LogoBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::RightsBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/RightsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::SubtitleBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/SubtitleBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::TitleBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/TitleBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::TitleBase","","classes/RSS/Maker/ItemsBase/ItemBase/TitleBase.html","",""],["RSS::Maker::RSS09","","classes/RSS/Maker/RSS09.html","",""],["RSS::Maker::RSS091","","classes/RSS/Maker/RSS091.html","",""],["RSS::Maker::RSS091::Channel","","classes/RSS/Maker/RSS091/Channel.html","",""],["RSS::Maker::RSS091::Image","","classes/RSS/Maker/RSS091/Image.html","",""],["RSS::Maker::RSS091::Items","","classes/RSS/Maker/RSS091/Items.html","",""],["RSS::Maker::RSS091::Items::Item","","classes/RSS/Maker/RSS091/Items/Item.html","",""],["RSS::Maker::RSS091::Textinput","","classes/RSS/Maker/RSS091/Textinput.html","",""],["RSS::Maker::RSS092","","classes/RSS/Maker/RSS092.html","",""],["RSS::Maker::RSS092::Channel","","classes/RSS/Maker/RSS092/Channel.html","",""],["RSS::Maker::RSS092::Image","","classes/RSS/Maker/RSS092/Image.html","",""],["RSS::Maker::RSS092::Items","","classes/RSS/Maker/RSS092/Items.html","",""],["RSS::Maker::RSS092::Items::Item","","classes/RSS/Maker/RSS092/Items/Item.html","",""],["RSS::Maker::RSS092::Textinput","","classes/RSS/Maker/RSS092/Textinput.html","",""],["RSS::Maker::RSS09::Channel","","classes/RSS/Maker/RSS09/Channel.html","",""],["RSS::Maker::RSS09::Channel::Authors","","classes/RSS/Maker/RSS09/Channel/Authors.html","",""],["RSS::Maker::RSS09::Channel::Authors::Author","","classes/RSS/Maker/RSS09/Channel/Authors/Author.html","",""],["RSS::Maker::RSS09::Channel::Categories","","classes/RSS/Maker/RSS09/Channel/Categories.html","",""],["RSS::Maker::RSS09::Channel::Categories::Category","","classes/RSS/Maker/RSS09/Channel/Categories/Category.html","",""],["RSS::Maker::RSS09::Channel::Cloud","","classes/RSS/Maker/RSS09/Channel/Cloud.html","",""],["RSS::Maker::RSS09::Channel::Contributors","","classes/RSS/Maker/RSS09/Channel/Contributors.html","",""],["RSS::Maker::RSS09::Channel::Contributors::Contributor","","classes/RSS/Maker/RSS09/Channel/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Channel::Copyright","","classes/RSS/Maker/RSS09/Channel/Copyright.html","",""],["RSS::Maker::RSS09::Channel::Description","","classes/RSS/Maker/RSS09/Channel/Description.html","",""],["RSS::Maker::RSS09::Channel::Generator","","classes/RSS/Maker/RSS09/Channel/Generator.html","",""],["RSS::Maker::RSS09::Channel::Links","","classes/RSS/Maker/RSS09/Channel/Links.html","",""],["RSS::Maker::RSS09::Channel::Links::Link","","classes/RSS/Maker/RSS09/Channel/Links/Link.html","",""],["RSS::Maker::RSS09::Channel::SkipDays","","classes/RSS/Maker/RSS09/Channel/SkipDays.html","",""],["RSS::Maker::RSS09::Channel::SkipDays::Day","","classes/RSS/Maker/RSS09/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS09::Channel::SkipHours","","classes/RSS/Maker/RSS09/Channel/SkipHours.html","",""],["RSS::Maker::RSS09::Channel::SkipHours::Hour","","classes/RSS/Maker/RSS09/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS09::Channel::Title","","classes/RSS/Maker/RSS09/Channel/Title.html","",""],["RSS::Maker::RSS09::Image","","classes/RSS/Maker/RSS09/Image.html","",""],["RSS::Maker::RSS09::Items","","classes/RSS/Maker/RSS09/Items.html","",""],["RSS::Maker::RSS09::Items::Item","","classes/RSS/Maker/RSS09/Items/Item.html","",""],["RSS::Maker::RSS09::Items::Item::Authors","","classes/RSS/Maker/RSS09/Items/Item/Authors.html","",""],["RSS::Maker::RSS09::Items::Item::Authors::Author","","classes/RSS/Maker/RSS09/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS09::Items::Item::Categories","","classes/RSS/Maker/RSS09/Items/Item/Categories.html","",""],["RSS::Maker::RSS09::Items::Item::Categories::Category","","classes/RSS/Maker/RSS09/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS09::Items::Item::Content","","classes/RSS/Maker/RSS09/Items/Item/Content.html","",""],["RSS::Maker::RSS09::Items::Item::Contributors","","classes/RSS/Maker/RSS09/Items/Item/Contributors.html","",""],["RSS::Maker::RSS09::Items::Item::Contributors::Contributor","","classes/RSS/Maker/RSS09/Items/Item/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Items::Item::Description","","classes/RSS/Maker/RSS09/Items/Item/Description.html","",""],["RSS::Maker::RSS09::Items::Item::Enclosure","","classes/RSS/Maker/RSS09/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS09::Items::Item::Guid","","classes/RSS/Maker/RSS09/Items/Item/Guid.html","",""],["RSS::Maker::RSS09::Items::Item::Links","","classes/RSS/Maker/RSS09/Items/Item/Links.html","",""],["RSS::Maker::RSS09::Items::Item::Links::Link","","classes/RSS/Maker/RSS09/Items/Item/Links/Link.html","",""],["RSS::Maker::RSS09::Items::Item::Rights","","classes/RSS/Maker/RSS09/Items/Item/Rights.html","",""],["RSS::Maker::RSS09::Items::Item::Source","","classes/RSS/Maker/RSS09/Items/Item/Source.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Authors","","classes/RSS/Maker/RSS09/Items/Item/Source/Authors.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Authors::Author","","classes/RSS/Maker/RSS09/Items/Item/Source/Authors/Author.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Categories","","classes/RSS/Maker/RSS09/Items/Item/Source/Categories.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Categories::Category","","classes/RSS/Maker/RSS09/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Contributors","","classes/RSS/Maker/RSS09/Items/Item/Source/Contributors.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Contributors::Contributor","","classes/RSS/Maker/RSS09/Items/Item/Source/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Generator","","classes/RSS/Maker/RSS09/Items/Item/Source/Generator.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Icon","","classes/RSS/Maker/RSS09/Items/Item/Source/Icon.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Links","","classes/RSS/Maker/RSS09/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Links::Link","","classes/RSS/Maker/RSS09/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Logo","","classes/RSS/Maker/RSS09/Items/Item/Source/Logo.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Rights","","classes/RSS/Maker/RSS09/Items/Item/Source/Rights.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Subtitle","","classes/RSS/Maker/RSS09/Items/Item/Source/Subtitle.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Title","","classes/RSS/Maker/RSS09/Items/Item/Source/Title.html","",""],["RSS::Maker::RSS09::Items::Item::Title","","classes/RSS/Maker/RSS09/Items/Item/Title.html","",""],["RSS::Maker::RSS09::Textinput","","classes/RSS/Maker/RSS09/Textinput.html","",""],["RSS::Maker::RSS10","","classes/RSS/Maker/RSS10.html","",""],["RSS::Maker::RSS10::Channel","","classes/RSS/Maker/RSS10/Channel.html","",""],["RSS::Maker::RSS10::Channel::Authors","","classes/RSS/Maker/RSS10/Channel/Authors.html","",""],["RSS::Maker::RSS10::Channel::Authors::Author","","classes/RSS/Maker/RSS10/Channel/Authors/Author.html","",""],["RSS::Maker::RSS10::Channel::Categories","","classes/RSS/Maker/RSS10/Channel/Categories.html","",""],["RSS::Maker::RSS10::Channel::Categories::Category","","classes/RSS/Maker/RSS10/Channel/Categories/Category.html","",""],["RSS::Maker::RSS10::Channel::Cloud","","classes/RSS/Maker/RSS10/Channel/Cloud.html","",""],["RSS::Maker::RSS10::Channel::Contributors","","classes/RSS/Maker/RSS10/Channel/Contributors.html","",""],["RSS::Maker::RSS10::Channel::Contributors::Contributor","","classes/RSS/Maker/RSS10/Channel/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Channel::Copyright","","classes/RSS/Maker/RSS10/Channel/Copyright.html","",""],["RSS::Maker::RSS10::Channel::Description","","classes/RSS/Maker/RSS10/Channel/Description.html","",""],["RSS::Maker::RSS10::Channel::Generator","","classes/RSS/Maker/RSS10/Channel/Generator.html","",""],["RSS::Maker::RSS10::Channel::Links","","classes/RSS/Maker/RSS10/Channel/Links.html","",""],["RSS::Maker::RSS10::Channel::Links::Link","","classes/RSS/Maker/RSS10/Channel/Links/Link.html","",""],["RSS::Maker::RSS10::Channel::SkipDays","","classes/RSS/Maker/RSS10/Channel/SkipDays.html","",""],["RSS::Maker::RSS10::Channel::SkipDays::Day","","classes/RSS/Maker/RSS10/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS10::Channel::SkipHours","","classes/RSS/Maker/RSS10/Channel/SkipHours.html","",""],["RSS::Maker::RSS10::Channel::SkipHours::Hour","","classes/RSS/Maker/RSS10/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS10::Channel::Title","","classes/RSS/Maker/RSS10/Channel/Title.html","",""],["RSS::Maker::RSS10::Image","","classes/RSS/Maker/RSS10/Image.html","",""],["RSS::Maker::RSS10::Items","","classes/RSS/Maker/RSS10/Items.html","",""],["RSS::Maker::RSS10::Items::Item","","classes/RSS/Maker/RSS10/Items/Item.html","",""],["RSS::Maker::RSS10::Items::Item::Authors","","classes/RSS/Maker/RSS10/Items/Item/Authors.html","",""],["RSS::Maker::RSS10::Items::Item::Authors::Author","","classes/RSS/Maker/RSS10/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS10::Items::Item::Categories","","classes/RSS/Maker/RSS10/Items/Item/Categories.html","",""],["RSS::Maker::RSS10::Items::Item::Categories::Category","","classes/RSS/Maker/RSS10/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS10::Items::Item::Content","","classes/RSS/Maker/RSS10/Items/Item/Content.html","",""],["RSS::Maker::RSS10::Items::Item::Contributors","","classes/RSS/Maker/RSS10/Items/Item/Contributors.html","",""],["RSS::Maker::RSS10::Items::Item::Contributors::Contributor","","classes/RSS/Maker/RSS10/Items/Item/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Items::Item::Description","","classes/RSS/Maker/RSS10/Items/Item/Description.html","",""],["RSS::Maker::RSS10::Items::Item::Enclosure","","classes/RSS/Maker/RSS10/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS10::Items::Item::Guid","","classes/RSS/Maker/RSS10/Items/Item/Guid.html","",""],["RSS::Maker::RSS10::Items::Item::Links","","classes/RSS/Maker/RSS10/Items/Item/Links.html","",""],["RSS::Maker::RSS10::Items::Item::Links::Link","","classes/RSS/Maker/RSS10/Items/Item/Links/Link.html","",""],["RSS::Maker::RSS10::Items::Item::Rights","","classes/RSS/Maker/RSS10/Items/Item/Rights.html","",""],["RSS::Maker::RSS10::Items::Item::Source","","classes/RSS/Maker/RSS10/Items/Item/Source.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Authors","","classes/RSS/Maker/RSS10/Items/Item/Source/Authors.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Authors::Author","","classes/RSS/Maker/RSS10/Items/Item/Source/Authors/Author.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Categories","","classes/RSS/Maker/RSS10/Items/Item/Source/Categories.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Categories::Category","","classes/RSS/Maker/RSS10/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Contributors","","classes/RSS/Maker/RSS10/Items/Item/Source/Contributors.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Contributors::Contributor","","classes/RSS/Maker/RSS10/Items/Item/Source/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Generator","","classes/RSS/Maker/RSS10/Items/Item/Source/Generator.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Icon","","classes/RSS/Maker/RSS10/Items/Item/Source/Icon.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Links","","classes/RSS/Maker/RSS10/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Links::Link","","classes/RSS/Maker/RSS10/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Logo","","classes/RSS/Maker/RSS10/Items/Item/Source/Logo.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Rights","","classes/RSS/Maker/RSS10/Items/Item/Source/Rights.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Subtitle","","classes/RSS/Maker/RSS10/Items/Item/Source/Subtitle.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Title","","classes/RSS/Maker/RSS10/Items/Item/Source/Title.html","",""],["RSS::Maker::RSS10::Items::Item::Title","","classes/RSS/Maker/RSS10/Items/Item/Title.html","",""],["RSS::Maker::RSS10::Textinput","","classes/RSS/Maker/RSS10/Textinput.html","",""],["RSS::Maker::RSS20","","classes/RSS/Maker/RSS20.html","",""],["RSS::Maker::RSS20::Channel","","classes/RSS/Maker/RSS20/Channel.html","",""],["RSS::Maker::RSS20::Channel::Categories","","classes/RSS/Maker/RSS20/Channel/Categories.html","",""],["RSS::Maker::RSS20::Channel::Categories::Category","","classes/RSS/Maker/RSS20/Channel/Categories/Category.html","",""],["RSS::Maker::RSS20::Channel::Cloud","","classes/RSS/Maker/RSS20/Channel/Cloud.html","",""],["RSS::Maker::RSS20::Channel::Generator","","classes/RSS/Maker/RSS20/Channel/Generator.html","",""],["RSS::Maker::RSS20::Channel::SkipDays","","classes/RSS/Maker/RSS20/Channel/SkipDays.html","",""],["RSS::Maker::RSS20::Channel::SkipDays::Day","","classes/RSS/Maker/RSS20/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS20::Channel::SkipHours","","classes/RSS/Maker/RSS20/Channel/SkipHours.html","",""],["RSS::Maker::RSS20::Channel::SkipHours::Hour","","classes/RSS/Maker/RSS20/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS20::Image","","classes/RSS/Maker/RSS20/Image.html","",""],["RSS::Maker::RSS20::Items","","classes/RSS/Maker/RSS20/Items.html","",""],["RSS::Maker::RSS20::Items::Item","","classes/RSS/Maker/RSS20/Items/Item.html","",""],["RSS::Maker::RSS20::Items::Item::Authors","","classes/RSS/Maker/RSS20/Items/Item/Authors.html","",""],["RSS::Maker::RSS20::Items::Item::Authors::Author","","classes/RSS/Maker/RSS20/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS20::Items::Item::Categories","","classes/RSS/Maker/RSS20/Items/Item/Categories.html","",""],["RSS::Maker::RSS20::Items::Item::Categories::Category","","classes/RSS/Maker/RSS20/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS20::Items::Item::Enclosure","","classes/RSS/Maker/RSS20/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS20::Items::Item::Guid","","classes/RSS/Maker/RSS20/Items/Item/Guid.html","",""],["RSS::Maker::RSS20::Items::Item::Source","","classes/RSS/Maker/RSS20/Items/Item/Source.html","",""],["RSS::Maker::RSS20::Items::Item::Source::Links","","classes/RSS/Maker/RSS20/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS20::Items::Item::Source::Links::Link","","classes/RSS/Maker/RSS20/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS20::Textinput","","classes/RSS/Maker/RSS20/Textinput.html","",""],["RSS::Maker::RSSBase","","classes/RSS/Maker/RSSBase.html","",""],["RSS::Maker::SetupDefaultDate","","classes/RSS/Maker/SetupDefaultDate.html","",""],["RSS::Maker::SetupDefaultLanguage","","classes/RSS/Maker/SetupDefaultLanguage.html","",""],["RSS::Maker::SlashModel","","classes/RSS/Maker/SlashModel.html","",""],["RSS::Maker::SyndicationModel","","classes/RSS/Maker/SyndicationModel.html","",""],["RSS::Maker::TaxonomyTopicModel","","classes/RSS/Maker/TaxonomyTopicModel.html","",""],["RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase","","classes/RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase.html","",""],["RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase::TaxonomyTopicBase","","classes/RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase/TaxonomyTopicBase.html","",""],["RSS::Maker::TaxonomyTopicsModel","","classes/RSS/Maker/TaxonomyTopicsModel.html","",""],["RSS::Maker::TaxonomyTopicsModel::TaxonomyTopicsBase","","classes/RSS/Maker/TaxonomyTopicsModel/TaxonomyTopicsBase.html","",""],["RSS::Maker::TextinputBase","","classes/RSS/Maker/TextinputBase.html","",""],["RSS::Maker::TrackBackModel","","classes/RSS/Maker/TrackBackModel.html","",""],["RSS::Maker::TrackBackModel::TrackBackAboutsBase","","classes/RSS/Maker/TrackBackModel/TrackBackAboutsBase.html","",""],["RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","","classes/RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html","",""],["RSS::Maker::XMLStyleSheets","","classes/RSS/Maker/XMLStyleSheets.html","",""],["RSS::Maker::XMLStyleSheets::XMLStyleSheet","","classes/RSS/Maker/XMLStyleSheets/XMLStyleSheet.html","",""],["RSS::MissingAttributeError","","classes/RSS/MissingAttributeError.html","","<p>Raised if a required attribute is missing.\n"],["RSS::MissingTagError","","classes/RSS/MissingTagError.html","","<p>Raised if no matching tag is found.\n"],["RSS::NSError","","classes/RSS/NSError.html","",""],["RSS::NotAvailableValueError","","classes/RSS/NotAvailableValueError.html","","<p>Raised when an incorrect value is used.\n"],["RSS::NotExceptedTagError","","classes/RSS/NotExpectedTagError.html","","<p>Raised when an unexpected tag is encountered.\n"],["RSS::NotExpectedTagError","","classes/RSS/NotExpectedTagError.html","","<p>Raised when an unexpected tag is encountered.\n"],["RSS::NotSetError","","classes/RSS/NotSetError.html","","<p>Raised when a required variable is not set.\n"],["RSS::NotValidXMLParser","","classes/RSS/NotValidXMLParser.html","",""],["RSS::NotWellFormedError","","classes/RSS/NotWellFormedError.html","",""],["RSS::OverlappedPrefixError","","classes/RSS/OverlappedPrefixError.html","",""],["RSS::Parser","","classes/RSS/Parser.html","",""],["RSS::RDF","","classes/RSS/RDF.html","",""],["RSS::RDF::Bag","","classes/RSS/RDF/Bag.html","",""],["RSS::RDF::Channel","","classes/RSS/RDF/Channel.html","",""],["RSS::RDF::Channel::Image","","classes/RSS/RDF/Channel/Image.html","",""],["RSS::RDF::Channel::Items","","classes/RSS/RDF/Channel/Items.html","",""],["RSS::RDF::Channel::Textinput","","classes/RSS/RDF/Channel/Textinput.html","",""],["RSS::RDF::Image","","classes/RSS/RDF/Image.html","",""],["RSS::RDF::Item","","classes/RSS/RDF/Item.html","",""],["RSS::RDF::Li","","classes/RSS/RDF/Li.html","",""],["RSS::RDF::Li","","classes/RSS/RDF/Li.html","",""],["RSS::RDF::Seq","","classes/RSS/RDF/Seq.html","",""],["RSS::RDF::Seq","","classes/RSS/RDF/Seq.html","",""],["RSS::RDF::Seq::Li","","classes/RSS/RDF/Li.html","",""],["RSS::RDF::Textinput","","classes/RSS/RDF/Textinput.html","",""],["RSS::REXMLLikeXMLParser","","classes/RSS/REXMLLikeXMLParser.html","",""],["RSS::REXMLListener","","classes/RSS/REXMLListener.html","",""],["RSS::REXMLParser","","classes/RSS/REXMLParser.html","",""],["RSS::RSS09","","classes/RSS/RSS09.html","",""],["RSS::RSS10","","classes/RSS/RSS10.html","",""],["RSS::RootElementMixin","","classes/RSS/RootElementMixin.html","",""],["RSS::Rss","","classes/RSS/Rss.html","",""],["RSS::Rss::Channel","","classes/RSS/Rss/Channel.html","",""],["RSS::Rss::Channel::Cloud","","classes/RSS/Rss/Channel/Cloud.html","",""],["RSS::Rss::Channel::Image","","classes/RSS/Rss/Channel/Image.html","",""],["RSS::Rss::Channel::Item","","classes/RSS/Rss/Channel/Item.html","",""],["RSS::Rss::Channel::Item::Category","","classes/RSS/Rss/Channel/Item/Category.html","",""],["RSS::Rss::Channel::Item::Enclosure","","classes/RSS/Rss/Channel/Item/Enclosure.html","",""],["RSS::Rss::Channel::Item::Guid","","classes/RSS/Rss/Channel/Item/Guid.html","",""],["RSS::Rss::Channel::Item::Source","","classes/RSS/Rss/Channel/Item/Source.html","",""],["RSS::Rss::Channel::SkipDays","","classes/RSS/Rss/Channel/SkipDays.html","",""],["RSS::Rss::Channel::SkipDays::Day","","classes/RSS/Rss/Channel/SkipDays/Day.html","",""],["RSS::Rss::Channel::SkipHours","","classes/RSS/Rss/Channel/SkipHours.html","",""],["RSS::Rss::Channel::SkipHours::Hour","","classes/RSS/Rss/Channel/SkipHours/Hour.html","",""],["RSS::Rss::Channel::TextInput","","classes/RSS/Rss/Channel/TextInput.html","",""],["RSS::SetupMaker","","classes/RSS/SetupMaker.html","",""],["RSS::SlashModel","","classes/RSS/SlashModel.html","",""],["RSS::SyndicationModel","","classes/RSS/SyndicationModel.html","",""],["RSS::TaxonomyTopicModel","","classes/RSS/TaxonomyTopicModel.html","",""],["RSS::TaxonomyTopicModel::TaxonomyTopic","","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html","",""],["RSS::TaxonomyTopicsModel","","classes/RSS/TaxonomyTopicsModel.html","",""],["RSS::TaxonomyTopicsModel::TaxonomyTopics","","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html","",""],["RSS::TaxonomyTopicsModel::TaxonomyTopics::Bag","","classes/RSS/RDF/Bag.html","",""],["RSS::TooMuchTagError","","classes/RSS/TooMuchTagError.html","","<p>Raised if there are more occurrences of the tag than expected.\n"],["RSS::TrackBackModel10","","classes/RSS/TrackBackModel10.html","",""],["RSS::TrackBackModel10::TrackBackAbout","","classes/RSS/TrackBackModel10/TrackBackAbout.html","",""],["RSS::TrackBackModel10::TrackBackPing","","classes/RSS/TrackBackModel10/TrackBackPing.html","",""],["RSS::TrackBackModel20","","classes/RSS/TrackBackModel20.html","",""],["RSS::TrackBackModel20::TrackBackAbout","","classes/RSS/TrackBackModel20/TrackBackAbout.html","",""],["RSS::TrackBackModel20::TrackBackPing","","classes/RSS/TrackBackModel20/TrackBackPing.html","",""],["RSS::TrackBackUtils","","classes/RSS/TrackBackUtils.html","",""],["RSS::UnknownConversionMethodError","","classes/RSS/UnknownConversionMethodError.html","","<p>Raised when an unknown conversion error occurs.\n"],["RSS::UnknownConvertMethod","","classes/RSS/UnknownConversionMethodError.html","","<p>Raised when an unknown conversion error occurs.\n"],["RSS::UnknownTagError","","classes/RSS/UnknownTagError.html","","<p>Raised when an unknown tag is found.\n"],["RSS::UnsupportedMakerVersionError","","classes/RSS/UnsupportedMakerVersionError.html","","<p>Raised when a RSS::Maker attempts to use an unknown maker.\n"],["RSS::Utils","","classes/RSS/Utils.html","",""],["RSS::Utils::CSV","","classes/RSS/Utils/CSV.html","",""],["RSS::Utils::InheritedReader","","classes/RSS/Utils/InheritedReader.html","",""],["RSS::Utils::YesCleanOther","","classes/RSS/Utils/YesCleanOther.html","",""],["RSS::Utils::YesOther","","classes/RSS/Utils/YesOther.html","",""],["RSS::XML","","classes/RSS/XML.html","",""],["RSS::XML::Element","","classes/RSS/XML/Element.html","",""],["RSS::XMLParserListener","","classes/RSS/XMLParserListener.html","",""],["RSS::XMLParserNotFound","","classes/RSS/XMLParserNotFound.html","",""],["RSS::XMLParserParser","","classes/RSS/XMLParserParser.html","",""],["RSS::XMLScanListener","","classes/RSS/XMLScanListener.html","",""],["RSS::XMLScanParser","","classes/RSS/XMLScanParser.html","",""],["RSS::XMLStyleSheet","","classes/RSS/XMLStyleSheet.html","",""],["RSS::XMLStyleSheetMixin","","classes/RSS/XMLStyleSheetMixin.html","",""],["Racc","","classes/Racc.html","",""],["Racc::CparseParams","","classes/Racc/CparseParams.html","",""],["Racc::ParseError","","classes/Racc/ParseError.html","",""],["Racc::ParseError","","classes/Racc/ParseError.html","",""],["Racc::Parser","","classes/Racc/Parser.html","",""],["Radiobutton","","classes/Radiobutton.html","",""],["Rake","","classes/Rake.html","",""],["Rake::AltSystem","","classes/Rake/AltSystem.html","","<p>Alternate implementations of system() and backticks “ on Windows for\nruby-1.8 and earlier.\n"],["Rake::Application","","classes/Rake/Application.html","","<p>Rake main application object.  When invoking <code>rake</code> from the\ncommand line, a Rake::Application object is …\n"],["Rake::Cloneable","","classes/Rake/Cloneable.html","","<p>##########################################################################\nMixin for creating easily …\n"],["Rake::CompositePublisher","","classes/Rake/CompositePublisher.html","","<p>Manage several publishers as a single entity.\n"],["Rake::DSL","","classes/Rake/DSL.html","","<p>DSL is a module that provides #task, #desc, #namespace, etc.  Use this when\nyou&#39;d like to use rake …\n"],["Rake::DefaultLoader","","classes/Rake/DefaultLoader.html","","<p>Default Rakefile loader used by <code>import</code>.\n"],["Rake::EarlyTime","","classes/Rake/EarlyTime.html","","<p>EarlyTime is a fake timestamp that occurs <em>before</em> any other time\nvalue.\n"],["Rake::FileCreationTask","","classes/Rake/FileCreationTask.html","","<p>A FileCreationTask is a file task that when used as a dependency will be\nneeded if and only if the file …\n"],["Rake::FileList","","classes/Rake/FileList.html","","<p>######################################################################### A\nFileList is essentially an …\n"],["Rake::FileTask","","classes/Rake/FileTask.html","","<p>######################################################################### A\nFileTask is a task that includes …\n"],["Rake::FileUtilsExt","","classes/Rake/FileUtilsExt.html","","<p>FileUtilsExt provides a custom version of the FileUtils methods that\nrespond to the <code>verbose</code> and <code>nowrite</code> …\n"],["Rake::FtpFile","","classes/Rake/FtpFile.html","","<p><strong>Note:</strong> <em> Not released for general use.</em>\n"],["Rake::FtpUploader","","classes/Rake/FtpUploader.html","","<p>Manage the uploading of files to an FTP account.\n"],["Rake::InvocationChain","","classes/Rake/InvocationChain.html","","<p>InvocationChain tracks the chain of task invocations to detect circular\ndependencies.\n"],["Rake::InvocationChain::EmptyInvocationChain","","classes/Rake/InvocationChain/EmptyInvocationChain.html","",""],["Rake::InvocationExceptionMixin","","classes/Rake/InvocationExceptionMixin.html","",""],["Rake::MakefileLoader","","classes/Rake/MakefileLoader.html","","<p>Makefile loader to be used with the import file loader.\n"],["Rake::MultiTask","","classes/Rake/MultiTask.html","","<p>Same as a regular task, but the immediate prerequisites are done in\nparallel using Ruby threads.\n"],["Rake::NameSpace","","classes/Rake/NameSpace.html","","<p>The NameSpace class will lookup task names in the the scope defined by a\n<code>namespace</code> command.\n"],["Rake::PackageTask","","classes/Rake/PackageTask.html","","<p>Create a packaging task that will package the project into distributable\nfiles (e.g zip archive or tar …\n"],["Rake::PseudoStatus","","classes/Rake/PseudoStatus.html","","<p>Exit status class for times the system just gives us a nil.\n"],["Rake::RDocTask","","classes/Rake/RDocTask.html","",""],["Rake::RakeApp","","classes/Rake/RakeApp.html","","<p>Rake main application object.  When invoking <code>rake</code> from the\ncommand line, a Rake::Application object is …\n"],["Rake::RubyForgePublisher","","classes/Rake/RubyForgePublisher.html","",""],["Rake::RuleRecursionOverflowError","","classes/Rake/RuleRecursionOverflowError.html","","<p>Error indicating a recursion overflow error in task selection.\n"],["Rake::SshDirPublisher","","classes/Rake/SshDirPublisher.html","","<p>Publish an entire directory to an existing remote directory using SSH.\n"],["Rake::SshFilePublisher","","classes/Rake/SshFilePublisher.html","","<p>Publish a list of files to an existing remote directory.\n"],["Rake::SshFreshDirPublisher","","classes/Rake/SshFreshDirPublisher.html","","<p>Publish an entire directory to a fresh remote directory using SSH.\n"],["Rake::Task","","classes/Rake/Task.html","","<p>######################################################################### A\nTask is the basic unit of …\n"],["Rake::TaskArgumentError","","classes/Rake/TaskArgumentError.html","","<p>Error indicating an ill-formed task declaration.\n"],["Rake::TaskArguments","","classes/Rake/TaskArguments.html","","<p>TaskArguments manage the arguments passed to a task.\n"],["Rake::TaskLib","","classes/Rake/TaskLib.html","","<p>Base class for Task Libraries.\n"],["Rake::TaskManager","","classes/Rake/TaskManager.html","","<p>The TaskManager module is a mixin for managing tasks.\n"],["Rake::Win32","","classes/Rake/Win32.html","","<p>Win 32 interface methods for Rake. Windows specific functionality will be\nplaced here to collect that …\n"],["Rake::Win32::Win32HomeError","","classes/Rake/Win32/Win32HomeError.html","","<p>Error indicating a problem in locating the home directory on a Win32\nsystem.\n"],["Random","","classes/Random.html","",""],["Range","","classes/Range.html","","<p>Range serialization/deserialization\n<p>A <code>Range</code> represents an interval—a set of values with a start\nand …\n"],["RangeError","","classes/RangeError.html","","<p>Raised when a given numerical value is out of range.\n\n<pre><code>[1, 2, 3].drop(1 &lt;&lt; 100)</code></pre>\n<p><em>raises the exception:</em>\n"],["Rational","","classes/Rational.html","","<p>When mathn is required Rational is changed to simplify the use of Rational\noperations.\n<p>Normal behaviour: …\n"],["RbConfig","","classes/RbConfig.html","",""],["Readline","","classes/Readline.html","","<p>The Readline module provides interface for GNU Readline. This module\ndefines a number of methods to facilitate …\n"],["Rectangle","","classes/Rectangle.html","",""],["Regexp","","classes/Regexp.html","","<p>Regexp serialization/deserialization\n<p>A <code>Regexp</code> holds a regular expression, used to match a pattern\nagainst …\n"],["RegexpError","","classes/RegexpError.html","","<p>Raised when given an invalid regexp expression.\n\n<pre><code>Regexp.new(&quot;?&quot;)</code></pre>\n<p><em>raises the exception:</em>\n"],["RemoteTkIp","","classes/RemoteTkIp.html","",""],["Resolv","","classes/Resolv.html","","<p>Resolv is a thread-aware DNS resolver library written in Ruby.  Resolv can\nhandle multiple DNS requests …\n"],["Resolv::DNS","","classes/Resolv/DNS.html","","<p>Resolv::DNS is a DNS stub resolver.\n<p>Information taken from the following places:\n<p>STD0013\n"],["Resolv::DNS::Config","","classes/Resolv/DNS/Config.html","",""],["Resolv::DNS::Config::NXDomain","","classes/Resolv/DNS/Config/NXDomain.html","","<p>Indicates no such domain was found.\n"],["Resolv::DNS::Config::OtherResolvError","","classes/Resolv/DNS/Config/OtherResolvError.html","","<p>Indicates some other unhandled resolver error was encountered.\n"],["Resolv::DNS::DecodeError","","classes/Resolv/DNS/DecodeError.html","","<p>Indicates that the DNS response was unable to be decoded.\n"],["Resolv::DNS::EncodeError","","classes/Resolv/DNS/EncodeError.html","","<p>Indicates that the DNS request was unable to be encoded.\n"],["Resolv::DNS::Name","","classes/Resolv/DNS/Name.html","","<p>A representation of a DNS name.\n"],["Resolv::DNS::Query","","classes/Resolv/DNS/Query.html","","<p>A DNS query abstract class.\n"],["Resolv::DNS::Requester","","classes/Resolv/DNS/Requester.html","",""],["Resolv::DNS::Requester::RequestError","","classes/Resolv/DNS/Requester/RequestError.html","","<p>Indicates a problem with the DNS request.\n"],["Resolv::DNS::Resource","","classes/Resolv/DNS/Resource.html","","<p>A DNS resource abstract class.\n"],["Resolv::DNS::Resource::ANY","","classes/Resolv/DNS/Resource/ANY.html","","<p>A Query type requesting any RR.\n"],["Resolv::DNS::Resource::CNAME","","classes/Resolv/DNS/Resource/CNAME.html","","<p>The canonical name for an alias.\n"],["Resolv::DNS::Resource::DomainName","","classes/Resolv/DNS/Resource/DomainName.html","","<p>Domain Name resource abstract class.\n"],["Resolv::DNS::Resource::Generic","","classes/Resolv/DNS/Resource/Generic.html","","<p>A generic resource abstract class.\n"],["Resolv::DNS::Resource::HINFO","","classes/Resolv/DNS/Resource/HINFO.html","","<p>Host Information resource.\n"],["Resolv::DNS::Resource::IN","","classes/Resolv/DNS/Resource/IN.html","","<p>module IN contains ARPA Internet specific RRs.\n"],["Resolv::DNS::Resource::IN::A","","classes/Resolv/DNS/Resource/IN/A.html","","<p>IPv4 Address resource\n"],["Resolv::DNS::Resource::IN::AAAA","","classes/Resolv/DNS/Resource/IN/AAAA.html","","<p>An IPv6 address record.\n"],["Resolv::DNS::Resource::IN::SRV","","classes/Resolv/DNS/Resource/IN/SRV.html","","<p>SRV resource record defined in RFC 2782\n<p>These records identify the hostname and port that a service is …\n"],["Resolv::DNS::Resource::IN::WKS","","classes/Resolv/DNS/Resource/IN/WKS.html","","<p>Well Known Service resource.\n"],["Resolv::DNS::Resource::MINFO","","classes/Resolv/DNS/Resource/MINFO.html","","<p>Mailing list or mailbox information.\n"],["Resolv::DNS::Resource::MX","","classes/Resolv/DNS/Resource/MX.html","","<p>Mail Exchanger resource.\n"],["Resolv::DNS::Resource::NS","","classes/Resolv/DNS/Resource/NS.html","","<p>An authoritative name server.\n"],["Resolv::DNS::Resource::PTR","","classes/Resolv/DNS/Resource/PTR.html","","<p>A Pointer to another DNS name.\n"],["Resolv::DNS::Resource::SOA","","classes/Resolv/DNS/Resource/SOA.html","","<p>Start Of Authority resource.\n"],["Resolv::DNS::Resource::TXT","","classes/Resolv/DNS/Resource/TXT.html","","<p>Unstructured text resource.\n"],["Resolv::Hosts","","classes/Resolv/Hosts.html","","<p>Resolv::Hosts is a hostname resolver that uses the system hosts file.\n"],["Resolv::IPv4","","classes/Resolv/IPv4.html","","<p>A Resolv::DNS IPv4 address.\n"],["Resolv::IPv6","","classes/Resolv/IPv6.html","","<p>A Resolv::DNS IPv6 address.\n"],["Resolv::ResolvError","","classes/Resolv/ResolvError.html","","<p>Indicates a failure to resolve a name or address.\n"],["Resolv::ResolvTimeout","","classes/Resolv/ResolvTimeout.html","","<p>Indicates a timeout resolving a name or address.\n"],["Rinda","","classes/Rinda.html","","<p>A module to implement the Linda distributed computing paradigm in Ruby.\n<p>Rinda is part of DRb (dRuby). …\n"],["Rinda::DRbObjectTemplate","","classes/Rinda/DRbObjectTemplate.html","","<p><em>Documentation?</em>\n"],["Rinda::InvalidHashTupleKey","","classes/Rinda/InvalidHashTupleKey.html","","<p>Raised when a hash-based tuple has an invalid key.\n"],["Rinda::NotifyTemplateEntry","","classes/Rinda/NotifyTemplateEntry.html","","<p>A NotifyTemplateEntry is returned by TupleSpace#notify and is notified of\nTupleSpace changes.  You may …\n"],["Rinda::RequestCanceledError","","classes/Rinda/RequestCanceledError.html","","<p>Raised when trying to use a canceled tuple.\n"],["Rinda::RequestExpiredError","","classes/Rinda/RequestExpiredError.html","","<p>Raised when trying to use an expired tuple.\n"],["Rinda::RindaError","","classes/Rinda/RindaError.html","","<p>Rinda error base class\n"],["Rinda::RingFinger","","classes/Rinda/RingFinger.html","","<p>RingFinger is used by RingServer clients to discover the RingServer&#39;s\nTupleSpace.  Typically, all …\n"],["Rinda::RingProvider","","classes/Rinda/RingProvider.html","","<p>RingProvider uses a RingServer advertised TupleSpace as a name service.\nTupleSpace clients can register …\n"],["Rinda::RingServer","","classes/Rinda/RingServer.html","","<p>A RingServer allows a Rinda::TupleSpace to be located via UDP broadcasts.\nService location uses the following …\n"],["Rinda::SimpleRenewer","","classes/Rinda/SimpleRenewer.html","","<p>An SimpleRenewer allows a TupleSpace to check if a TupleEntry is still\nalive.\n"],["Rinda::Template","","classes/Rinda/Template.html","","<p>Templates are used to match tuples in Rinda.\n"],["Rinda::TemplateEntry","","classes/Rinda/TemplateEntry.html","","<p>A TemplateEntry is a Template together with expiry and cancellation data.\n"],["Rinda::Tuple","","classes/Rinda/Tuple.html","","<p>A tuple is the elementary object in Rinda programming. Tuples may be\nmatched against templates if the …\n"],["Rinda::TupleBag","","classes/Rinda/TupleBag.html","","<p>TupleBag is an unordered collection of tuples. It is the basis of\nTuplespace.\n"],["Rinda::TupleBag::TupleBin","","classes/Rinda/TupleBag/TupleBin.html","",""],["Rinda::TupleEntry","","classes/Rinda/TupleEntry.html","","<p>A TupleEntry is a Tuple (i.e. a possible entry in some Tuplespace) together\nwith expiry and cancellation …\n"],["Rinda::TupleSpace","","classes/Rinda/TupleSpace.html","","<p>The Tuplespace manages access to the tuples it contains, ensuring mutual\nexclusion requirements are met. …\n"],["Rinda::TupleSpaceProxy","","classes/Rinda/TupleSpaceProxy.html","","<p>TupleSpaceProxy allows a remote Tuplespace to appear as local.\n"],["Rinda::WaitTemplateEntry","","classes/Rinda/WaitTemplateEntry.html","","<p><em>Documentation?</em>\n"],["RingEcho","","classes/RingEcho.html","",""],["Ripper","","classes/Ripper.html","",""],["Ripper::Filter","","classes/Ripper/Filter.html","","<p>This class handles only scanner events, and they are dispatched in the\n`right&#39; order (same with input). …\n"],["Ripper::TokenPattern","","classes/Ripper/TokenPattern.html","",""],["Ripper::TokenPattern::CompileError","","classes/Ripper/TokenPattern/CompileError.html","",""],["Ripper::TokenPattern::Error","","classes/Ripper/TokenPattern/Error.html","",""],["Ripper::TokenPattern::MatchData","","classes/Ripper/TokenPattern/MatchData.html","",""],["Ripper::TokenPattern::MatchError","","classes/Ripper/TokenPattern/MatchError.html","",""],["Ruby2HTML","","classes/Ruby2HTML.html","",""],["RubyLex","","classes/RubyLex.html","",""],["RubyToken","","classes/RubyToken.html","","\n<pre><code>irb/ruby-token.rb - ruby tokens\n    $Release Version: 0.9.6$\n    $Revision$\n    by Keiju ISHITSUKA(keiju@ruby-lang.org)</code></pre>\n"],["RubyToken::TkError","","classes/RubyToken/TkError.html","",""],["RubyToken::TkId","","classes/RubyToken/TkId.html","",""],["RubyToken::TkNode","","classes/RubyToken/TkNode.html","",""],["RubyToken::TkOPASGN","","classes/RubyToken/TkOPASGN.html","",""],["RubyToken::TkOp","","classes/RubyToken/TkOp.html","",""],["RubyToken::TkUnknownChar","","classes/RubyToken/TkUnknownChar.html","",""],["RubyToken::TkVal","","classes/RubyToken/TkVal.html","",""],["RubyToken::Token","","classes/RubyToken/Token.html","",""],["RubyVM","","classes/RubyVM.html","","<p>::VM\n"],["RubyVM::Env","","classes/RubyVM/Env.html","","<p>::VM::Env\n"],["RubyVM::InsnsIncGenerator","","classes/RubyVM/InsnsIncGenerator.html","","<p>insns.inc\n"],["RubyVM::InsnsInfoIncGenerator","","classes/RubyVM/InsnsInfoIncGenerator.html","","<p>insns_info.inc\n"],["RubyVM::Instruction","","classes/RubyVM/Instruction.html","",""],["RubyVM::InstructionSequence","","classes/RubyVM/InstructionSequence.html","","<p>declare ::RubyVM::InstructionSequence\n"],["RubyVM::InstructionsLoader","","classes/RubyVM/InstructionsLoader.html","",""],["RubyVM::MInsnsIncGenerator","","classes/RubyVM/MInsnsIncGenerator.html","","<p>minsns.inc\n"],["RubyVM::OptInsnIncGenerator","","classes/RubyVM/OptInsnIncGenerator.html","","<p>optinsn.inc\n"],["RubyVM::OptSCIncGenerator","","classes/RubyVM/OptSCIncGenerator.html","","<p>opt_sc.inc\n"],["RubyVM::OptUnifsIncGenerator","","classes/RubyVM/OptUnifsIncGenerator.html","","<p>optunifs.inc\n"],["RubyVM::SourceCodeGenerator","","classes/RubyVM/SourceCodeGenerator.html","",""],["RubyVM::VPATH","","classes/RubyVM/VPATH.html","",""],["RubyVM::VmBodyGenerator","","classes/RubyVM/VmBodyGenerator.html","","<p>vm.inc\n"],["RubyVM::VmTCIncGenerator","","classes/RubyVM/VmTCIncGenerator.html","","<p>vmtc.inc\n"],["RubyVM::YARVDocGenerator","","classes/RubyVM/YARVDocGenerator.html","","<p>yarvarch.*\n"],["RubyVM::YASMDataRbGenerator","","classes/RubyVM/YASMDataRbGenerator.html","","<p>yasmdata.rb\n"],["RuntimeError","","classes/RuntimeError.html","","<p>A generic error class raised when an invalid operation is attempted.\n\n<pre><code>[1, 2, 3].freeze &lt;&lt; 4</code></pre>\n<p><em>raises the exception:</em> …\n"],["SDBM","","classes/SDBM.html","",""],["SDBMError","","classes/SDBMError.html","",""],["SM","","classes/SM.html","",""],["SOCKSSocket","","classes/SOCKSSocket.html","","<p>SOCKS is an Internet protocol that routes packets between a client and a\nserver through a proxy server. …\n"],["STRING_OR_FAILED_FORMAT","","classes/STRING_OR_FAILED_FORMAT.html","",""],["Scanf","","classes/Scanf.html","","<p>scanf for Ruby\n<p>Description\n<p>scanf is an implementation of the C function scanf(3), modified as\nnecessary …\n"],["Scanf::FormatSpecifier","","classes/Scanf/FormatSpecifier.html","",""],["Scanf::FormatString","","classes/Scanf/FormatString.html","",""],["ScrListbox","","classes/ScrListbox.html","",""],["ScriptError","","classes/ScriptError.html","","<p>ScriptError is the superclass for errors raised when a script can not be\nexecuted because of a <code>LoadError</code> …\n"],["SecureRandom","","classes/SecureRandom.html","",""],["SecurityError","","classes/SecurityError.html","","<p>Raised when attempting a potential unsafe operation, typically when the\n$SAFE level is raised above 0. …\n"],["Selection","","classes/Selection.html","",""],["Seq","","classes/Seq.html","",""],["Set","","classes/Set.html","","<p>Set implements a collection of unordered values with no duplicates. This is\na hybrid of Array&#39;s intuitive …\n"],["Shell","","classes/Shell.html","","\n<pre><code>shell/filter.rb -\n    $Release Version: 0.7 $\n    $Revision$\n    by Keiju ISHITSUKA(keiju@ruby-lang.org)</code></pre>\n"],["Shell::AppendFile","","classes/Shell/AppendFile.html","",""],["Shell::AppendIO","","classes/Shell/AppendIO.html","","<p>class Sort &lt; Cat\n\n<pre><code>def initialize(sh, *filenames)\n  super\nend\n\ndef each(rs = nil)\n  ary = []\n  super{|l| ...\n</code></pre>\n"],["Shell::BuiltInCommand","","classes/Shell/BuiltInCommand.html","",""],["Shell::Cat","","classes/Shell/Cat.html","",""],["Shell::CommandProcessor","","classes/Shell/CommandProcessor.html","",""],["Shell::Concat","","classes/Shell/Concat.html","",""],["Shell::Echo","","classes/Shell/Echo.html","",""],["Shell::Error","","classes/Shell/Error.html","",""],["Shell::Filter","","classes/Shell/Filter.html","","<p>Filter A method to require\n\n<pre><code>each()</code></pre>\n"],["Shell::Glob","","classes/Shell/Glob.html","",""],["Shell::ProcessController","","classes/Shell/ProcessController.html","",""],["Shell::SystemCommand","","classes/Shell/SystemCommand.html","",""],["Shell::Tee","","classes/Shell/Tee.html","",""],["Shell::Void","","classes/Shell/Void.html","",""],["Shellwords","","classes/Shellwords.html","","<p>This module manipulates strings according to the word parsing rules of the\nUNIX Bourne shell.\n<p>The shellwords() …\n"],["Signal","","classes/Signal.html","","<p>Many operating systems allow signals to be sent to running processes. Some\nsignals have a defined effect …\n"],["SignalException","","classes/SignalException.html","","<p>Raised when a signal is received.\n\n<pre><code>begin\n  Process.kill(&#39;HUP&#39;,Process.pid)\nrescue SignalException =&gt; e ...\n</code></pre>\n"],["SimpleDelegator","","classes/SimpleDelegator.html","","<p>A concrete implementation of Delegator, this class provides the means to\ndelegate all supported method …\n"],["SimpleTupleSpace","","classes/SimpleTupleSpace.html","",""],["SingleForwardable","","classes/SingleForwardable.html","","<p>Usage of The SingleForwardable is like Fowadable module.\n"],["Singleton","","classes/Singleton.html","","<p>The Singleton module implements the Singleton pattern.\n<p>Usage\n<p>To use Singleton, include the module in your …\n"],["SizedQueue","","classes/SizedQueue.html","","<p>This class represents queues of specified size capacity.  The push\noperation may be blocked if the capacity …\n"],["Socket","","classes/Socket.html","","<p>Class <code>Socket</code> provides access to the underlying operating\nsystem socket implementations.  It can be used …\n"],["Socket::AncillaryData","","classes/Socket/AncillaryData.html","","<p>Socket::AncillaryData represents the ancillary data (control information)\nused by sendmsg and recvmsg …\n"],["Socket::Option","","classes/Socket/Option.html","","<p>Socket::Option represents a socket option used by BasicSocket#getsockopt\nand BasicSocket#setsockopt. …\n"],["Socket::UDPSource","","classes/Socket/UDPSource.html","","<p>UDP/IP address information used by Socket.udp_server_loop.\n"],["SocketError","","classes/SocketError.html","","<p>SocketError is the error class for socket.\n"],["SortedSet","","classes/SortedSet.html","","<p>SortedSet implements a Set that guarantees that it&#39;s element are\nyielded in sorted order (according …\n"],["Spinbox","","classes/Spinbox.html","",""],["Spinner_demo","","classes/Spinner_demo.html","",""],["SshDirPublisher","","classes/SshDirPublisher.html","","<p>Publish an entire directory to an existing remote directory using SSH.\n"],["SshFilePublisher","","classes/SshFilePublisher.html","","<p>Publish a list of files to an existing remote directory.\n"],["SshFreshDirPublisher","","classes/SshFreshDirPublisher.html","","<p>Publish an entire directory to a fresh remote directory using SSH.\n"],["StandardError","","classes/StandardError.html","","<p>The most standard error types are subclasses of StandardError. A rescue\nclause without an explicit Exception …\n"],["StopIteration","","classes/StopIteration.html","","<p>Raised to stop the iteration, in particular by Enumerator#next. It is\nrescued by Kernel#loop.\n\n<pre><code>loop do ...</code></pre>\n"],["String","","classes/String.html","","<p>BEGIN BACKPORTED FROM 2.0\n<p>Rake extension methods for String.\n<p>A <code>String</code> object holds and manipulates an arbitrary …\n"],["StringIO","","classes/StringIO.html","","<p>Pseudo I/O on String object.\n"],["StringScanner","","classes/StringScanner.html","","<p>StringScanner provides for lexical scanning operations on a String.  Here\nis an example of its usage: …\n"],["StringScanner::Error","","classes/StringScanner/Error.html","",""],["Struct","","classes/Struct.html","","<p>Struct serialization/deserialization\n<p>A <code>Struct</code> is a convenient way to bundle a number of attributes\ntogether, …\n"],["Syck","","classes/Syck.html","","<p>YAML\n<p>YAML(tm) (rhymes with &#39;camel&#39;) is a straightforward machine\nparsable data serialization format …\n"],["Syck","","classes/Syck.html","","<p>YAML\n<p>YAML(tm) (rhymes with &#39;camel&#39;) is a straightforward machine\nparsable data serialization format …\n"],["Syck::BaseEmitter","","classes/Syck/BaseEmitter.html","",""],["Syck::BaseNode","","classes/Syck/BaseNode.html","","<p>YAML Generic Model container\n"],["Syck::DefaultKey","","classes/Syck/DefaultKey.html","",""],["Syck::DomainType","","classes/Syck/DomainType.html","","<p>Default domain type\n"],["Syck::Error","","classes/Syck/Error.html","","<p>YAML Error classes\n"],["Syck::Loader","","classes/Syck/Loader.html","",""],["Syck::Mapping","","classes/Syck/Mapping.html","","<p>Emitter helper classes\n"],["Syck::Node","","classes/Syck/Node.html","","<p>Mixin BaseNode functionality\n"],["Syck::Object","","classes/Syck/Object.html","","<p>Unresolved objects\n"],["Syck::Omap","","classes/Syck/Omap.html","","<p>Builtin collection: !omap\n"],["Syck::Pairs","","classes/Syck/Pairs.html","","<p>Builtin collection: !pairs\n"],["Syck::ParseError","","classes/Syck/ParseError.html","",""],["Syck::PrivateType","","classes/Syck/PrivateType.html","","<p>Default private type\n"],["Syck::Sequence","","classes/Syck/Sequence.html","",""],["Syck::Set","","classes/Syck/Set.html","","<p>Builtin collection: !set\n"],["Syck::SpecialHash","","classes/Syck/SpecialHash.html","","<p>YAML Hash class to support comments and defaults\n"],["Syck::Stream","","classes/Syck/Stream.html","","<p>YAML::Stream – for emitting many documents\n"],["Syck::TypeError","","classes/Syck/TypeError.html","",""],["Syck::YPath","","classes/Syck/YPath.html","",""],["Syck::YamlNode","","classes/Syck/YamlNode.html","","<p>YAML Generic Model container\n"],["Symbol","","classes/Symbol.html","","<p>Symbol serialization/deserialization\n<p><code>Symbol</code> objects represent names and some strings inside the\nRuby interpreter. …\n"],["Symbol","","classes/Symbol.html","","<p>Add double dispatch to Integer\n<p><code>Integer</code> is the basis for the two concrete classes that hold\nwhole numbers, …\n"],["Sync","","classes/Sync.html","","<p>A class that providesa two-phase lock with a counter.  See Sync_m for\ndetails.\n"],["Sync_m","","classes/Sync_m.html","","<p>A module that provides a two-phase lock with a counter.\n"],["Sync_m::Err","","classes/Sync_m/Err.html","","<p>exceptions\n"],["Sync_m::Err::LockModeFailer","","classes/Sync_m/Err/LockModeFailer.html","",""],["Sync_m::Err::UnknownLocker","","classes/Sync_m/Err/UnknownLocker.html","",""],["Synchronizer","","classes/Synchronizer.html","","<p>A class that providesa two-phase lock with a counter.  See Sync_m for\ndetails.\n"],["Synchronizer_m","","classes/Synchronizer_m.html","","<p>A module that provides a two-phase lock with a counter.\n"],["SyntaxError","","classes/SyntaxError.html","","<p>Raised when encountering Ruby code with an invalid syntax.\n\n<pre><code>eval(&quot;1+1=2&quot;)</code></pre>\n<p><em>raises the exception:</em>\n"],["Sys","","classes/Sys.html","","<p>Sys provides a number of file manipulation tools for the convenience of\nwriting Rakefiles.  All commands …\n"],["Syslog","","classes/Syslog.html","","<p>The syslog package provides a Ruby interface to the POSIX system logging\nfacility.\n<p>Syslog messages are …\n"],["Syslog::Constants","","classes/Syslog/Constants.html","","<p>Module holding Syslog constants.  See Syslog::log and Syslog::open for\nconstant descriptions.\n"],["SystemCallError","","classes/SystemCallError.html","","<p>SystemCallError is the base class for all low-level platform-dependent\nerrors.\n<p>The errors available on …\n"],["SystemExit","","classes/SystemExit.html","","<p>Raised by <code>exit</code> to initiate the termination of the script.\n"],["SystemStackError","","classes/SystemStackError.html","","<p>Raised in case of a stack overflow.\n\n<pre><code>def me_myself_and_i\n  me_myself_and_i\nend\nme_myself_and_i\n</code></pre>\n<p><em>raises the</em> …\n"],["TCPServer","","classes/TCPServer.html","","<p>TCPServer represents a TCP/IP server socket.\n<p>A simple TCP server may look like:\n\n<pre><code>require &#39;socket&#39;\n\nserver ...\n</code></pre>\n"],["TCPSocket","","classes/TCPSocket.html","","<p>TCPSocket represents a TCP/IP client socket.\n<p>A simple client may look like:\n\n<pre><code>require &#39;socket&#39;\n\ns = TCPSocket.new ...\n</code></pre>\n"],["TSort","","classes/TSort.html","","<p>TSort implements topological sorting using Tarjan&#39;s algorithm for\nstrongly connected components. …\n"],["TSort::Cyclic","","classes/TSort/Cyclic.html","",""],["TZInfo","","classes/TZInfo.html","",""],["TclTkIp","","classes/TclTkIp.html","","<p>add ThreadGroup check to TclTkIp.new\n<p>tkencoding.rb written by ttate@jaist.ac.jp\n"],["TclTkLib","","classes/TclTkLib.html","","<p>wrap methods on TclTkLib : not permit calling TclTkLib module methods\n<p>—- initialization —-\n"],["TclTkLib::EventFlag","","classes/TclTkLib/EventFlag.html","",""],["TclTkLib::RELEASE_TYPE","","classes/TclTkLib/RELEASE_TYPE.html","",""],["TclTkLib::VarAccessFlag","","classes/TclTkLib/VarAccessFlag.html","",""],["Tempfile","","classes/Tempfile.html","","<p>A utility class for managing temporary files. When you create a Tempfile\nobject, it will create a temporary …\n"],["Tempfile::Remover","","classes/Tempfile/Remover.html","",""],["Test1","","classes/Test1.html","","<p>以下は, Test1 のインスタンスの initialize() で, tcl/tk に関する処理を行う例である. 必ずしもそのようにする必要は無く,\n(もし, そうしたければ) class の外で  …\n"],["TextItem","","classes/TextItem.html","",""],["ThWait","","classes/ThWait.html","","<p>This class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads …\n"],["Thread","","classes/Thread.html","","<p>re-define Thread#initialize bug #2618(ruby-core:27634)\n<p>::Thread\n"],["ThreadError","","classes/ThreadError.html","","<p>Raised when an invalid operation is attempted on a thread.\n<p>For example, when no other thread has been …\n"],["ThreadGroup","","classes/ThreadGroup.html","","<p><code>ThreadGroup</code> provides a means of keeping track of a number of\nthreads as a group. A <code>Thread</code> can belong …\n"],["ThreadsWait","","classes/ThreadsWait.html","","<p>This class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads …\n"],["Tick","","classes/Tick.html","",""],["Time","","classes/Time.html","","<p>Time serialization/deserialization\n<p>Implements the extensions to the Time class that are described in the …\n"],["Timeout","","classes/Timeout.html","","<p>Timeout long-running blocks\n<p>Synopsis\n\n<pre><code>require &#39;timeout&#39;\nstatus = Timeout::timeout(5) {\n  # Something that ...\n</code></pre>\n"],["Timeout::Error","","classes/Timeout/Error.html","","<p>Raised by Timeout#timeout when the block times out.\n"],["Timeout::TimeoutError","","classes/Timeout/TimeoutError.html","","<p>Raised by Timeout#timeout when the block times out.\n"],["Tk","","classes/Tk.html","","<p>methods to control default widget set\n<p>string with Tcl&#39;s encoding\n<p>ttk_selector\n"],["Tk::BLT","","classes/Tk/BLT.html","",""],["Tk::BLT::Barchart","","classes/Tk/BLT/Barchart.html","",""],["Tk::BLT::Bitmap","","classes/Tk/BLT/Bitmap.html","",""],["Tk::BLT::Busy","","classes/Tk/BLT/Busy.html","",""],["Tk::BLT::Busy::Shield","","classes/Tk/BLT/Busy/Shield.html","",""],["Tk::BLT::Container","","classes/Tk/BLT/Container.html","",""],["Tk::BLT::CutBuffer","","classes/Tk/BLT/CutBuffer.html","",""],["Tk::BLT::DnD","","classes/Tk/BLT/DnD.html","",""],["Tk::BLT::DragDrop","","classes/Tk/BLT/DragDrop.html","",""],["Tk::BLT::DragDrop::DnD_Handle","","classes/Tk/BLT/DragDrop/DnD_Handle.html","",""],["Tk::BLT::DragDrop::PackageCommand","","classes/Tk/BLT/DragDrop/PackageCommand.html","",""],["Tk::BLT::DragDrop::PackageCommand::ValidateArgs","","classes/Tk/BLT/DragDrop/PackageCommand/ValidateArgs.html","",""],["Tk::BLT::DragDrop::SiteCommand","","classes/Tk/BLT/DragDrop/SiteCommand.html","",""],["Tk::BLT::DragDrop::SiteCommand::ValidateArgs","","classes/Tk/BLT/DragDrop/SiteCommand/ValidateArgs.html","",""],["Tk::BLT::DragDrop::Token","","classes/Tk/BLT/DragDrop/Token.html","",""],["Tk::BLT::EPS","","classes/Tk/BLT/EPS.html","",""],["Tk::BLT::Graph","","classes/Tk/BLT/Graph.html","",""],["Tk::BLT::GraphCommand","","classes/Tk/BLT/GraphCommand.html","",""],["Tk::BLT::Hiertable","","classes/Tk/BLT/Hiertable.html","",""],["Tk::BLT::Htext","","classes/Tk/BLT/Htext.html","",""],["Tk::BLT::PlotComponent","","classes/Tk/BLT/PlotComponent.html","",""],["Tk::BLT::PlotComponent::Axis","","classes/Tk/BLT/PlotComponent/Axis.html","",""],["Tk::BLT::PlotComponent::Bar","","classes/Tk/BLT/PlotComponent/Bar.html","",""],["Tk::BLT::PlotComponent::BitmapMarker","","classes/Tk/BLT/PlotComponent/BitmapMarker.html","",""],["Tk::BLT::PlotComponent::Crosshairs","","classes/Tk/BLT/PlotComponent/Crosshairs.html","",""],["Tk::BLT::PlotComponent::Element","","classes/Tk/BLT/PlotComponent/Element.html","",""],["Tk::BLT::PlotComponent::GridLine","","classes/Tk/BLT/PlotComponent/GridLine.html","",""],["Tk::BLT::PlotComponent::ImageMarker","","classes/Tk/BLT/PlotComponent/ImageMarker.html","",""],["Tk::BLT::PlotComponent::Legend","","classes/Tk/BLT/PlotComponent/Legend.html","",""],["Tk::BLT::PlotComponent::Line","","classes/Tk/BLT/PlotComponent/Line.html","",""],["Tk::BLT::PlotComponent::LineMarker","","classes/Tk/BLT/PlotComponent/LineMarker.html","",""],["Tk::BLT::PlotComponent::Marker","","classes/Tk/BLT/PlotComponent/Marker.html","",""],["Tk::BLT::PlotComponent::OptKeys","","classes/Tk/BLT/PlotComponent/OptKeys.html","",""],["Tk::BLT::PlotComponent::Pen","","classes/Tk/BLT/PlotComponent/Pen.html","",""],["Tk::BLT::PlotComponent::PolygonMarker","","classes/Tk/BLT/PlotComponent/PolygonMarker.html","",""],["Tk::BLT::PlotComponent::Postscript","","classes/Tk/BLT/PlotComponent/Postscript.html","",""],["Tk::BLT::PlotComponent::TextMarker","","classes/Tk/BLT/PlotComponent/TextMarker.html","",""],["Tk::BLT::PlotComponent::WindowMarker","","classes/Tk/BLT/PlotComponent/WindowMarker.html","",""],["Tk::BLT::Printer","","classes/Tk/BLT/Printer.html","",""],["Tk::BLT::Spline","","classes/Tk/BLT/Spline.html","",""],["Tk::BLT::Stripchart","","classes/Tk/BLT/Stripchart.html","",""],["Tk::BLT::Table","","classes/Tk/BLT/Table.html","",""],["Tk::BLT::Table::TableContainer","","classes/Tk/BLT/Table/TableContainer.html","",""],["Tk::BLT::Tabnotebook","","classes/Tk/BLT/Tabnotebook.html","",""],["Tk::BLT::Tabnotebook::Tab","","classes/Tk/BLT/Tabnotebook/Tab.html","",""],["Tk::BLT::Tabset","","classes/Tk/BLT/Tabset.html","",""],["Tk::BLT::Tabset::NamedTab","","classes/Tk/BLT/Tabset/NamedTab.html","",""],["Tk::BLT::Tabset::Tab","","classes/Tk/BLT/Tabset/Tab.html","",""],["Tk::BLT::Ted","","classes/Tk/BLT/Ted.html","",""],["Tk::BLT::Tile","","classes/Tk/BLT/Tile.html","",""],["Tk::BLT::Tile::Button","","classes/Tk/BLT/Tile/Button.html","",""],["Tk::BLT::Tile::CheckButton","","classes/Tk/BLT/Tile/CheckButton.html","",""],["Tk::BLT::Tile::Checkbutton","","classes/Tk/BLT/Tile/CheckButton.html","",""],["Tk::BLT::Tile::Frame","","classes/Tk/BLT/Tile/Frame.html","",""],["Tk::BLT::Tile::Label","","classes/Tk/BLT/Tile/Label.html","",""],["Tk::BLT::Tile::RadioButton","","classes/Tk/BLT/Tile/RadioButton.html","",""],["Tk::BLT::Tile::Radiobutton","","classes/Tk/BLT/Tile/RadioButton.html","",""],["Tk::BLT::Tile::Scrollbar","","classes/Tk/BLT/Tile/Scrollbar.html","",""],["Tk::BLT::Tile::Toplevel","","classes/Tk/BLT/Tile/Toplevel.html","",""],["Tk::BLT::Tree","","classes/Tk/BLT/Tree.html","",""],["Tk::BLT::Tree::Node","","classes/Tk/BLT/Tree/Node.html","",""],["Tk::BLT::Tree::Notify","","classes/Tk/BLT/Tree/Notify.html","",""],["Tk::BLT::Tree::Tag","","classes/Tk/BLT/Tree/Tag.html","",""],["Tk::BLT::Tree::Trace","","classes/Tk/BLT/Tree/Trace.html","",""],["Tk::BLT::Treeview","","classes/Tk/BLT/Treeview.html","",""],["Tk::BLT::Treeview::ConfigMethod","","classes/Tk/BLT/Treeview/ConfigMethod.html","",""],["Tk::BLT::Treeview::FindExecFlagValue","","classes/Tk/BLT/Treeview/FindExecFlagValue.html","",""],["Tk::BLT::Treeview::FindExecFlagValue::ValidateArgs","","classes/Tk/BLT/Treeview/FindExecFlagValue/ValidateArgs.html","",""],["Tk::BLT::Treeview::Node","","classes/Tk/BLT/Treeview/Node.html","",""],["Tk::BLT::Treeview::OpenCloseCommand","","classes/Tk/BLT/Treeview/OpenCloseCommand.html","",""],["Tk::BLT::Treeview::OpenCloseCommand::ValidateArgs","","classes/Tk/BLT/Treeview/OpenCloseCommand/ValidateArgs.html","",""],["Tk::BLT::Treeview::Tag","","classes/Tk/BLT/Treeview/Tag.html","",""],["Tk::BLT::Treeview::TagOrID_Methods","","classes/Tk/BLT/Treeview/TagOrID_Methods.html","",""],["Tk::BLT::Vector","","classes/Tk/BLT/Vector.html","",""],["Tk::BLT::VectorAccess","","classes/Tk/BLT/VectorAccess.html","",""],["Tk::BLT::Watch","","classes/Tk/BLT/Watch.html","",""],["Tk::BLT::WinOp","","classes/Tk/BLT/WinOp.html","",""],["Tk::BLT::Winop","","classes/Tk/BLT/Winop.html","",""],["Tk::BWidget","","classes/Tk/BWidget.html","",""],["Tk::BWidget::ArrowButton","","classes/Tk/BWidget/ArrowButton.html","",""],["Tk::BWidget::Bitmap","","classes/Tk/BWidget/Bitmap.html","",""],["Tk::BWidget::Button","","classes/Tk/BWidget/Button.html","",""],["Tk::BWidget::ButtonBox","","classes/Tk/BWidget/ButtonBox.html","",""],["Tk::BWidget::ComboBox","","classes/Tk/BWidget/ComboBox.html","",""],["Tk::BWidget::Dialog","","classes/Tk/BWidget/Dialog.html","",""],["Tk::BWidget::DragSite","","classes/Tk/BWidget/DragSite.html","",""],["Tk::BWidget::DropSite","","classes/Tk/BWidget/DropSite.html","",""],["Tk::BWidget::DynamicHelp","","classes/Tk/BWidget/DynamicHelp.html","",""],["Tk::BWidget::Entry","","classes/Tk/BWidget/Entry.html","",""],["Tk::BWidget::Label","","classes/Tk/BWidget/Label.html","",""],["Tk::BWidget::LabelEntry","","classes/Tk/BWidget/LabelEntry.html","",""],["Tk::BWidget::LabelFrame","","classes/Tk/BWidget/LabelFrame.html","",""],["Tk::BWidget::ListBox","","classes/Tk/BWidget/ListBox.html","",""],["Tk::BWidget::ListBox::Event_for_Items","","classes/Tk/BWidget/ListBox/Event_for_Items.html","",""],["Tk::BWidget::ListBox::Item","","classes/Tk/BWidget/ListBox/Item.html","",""],["Tk::BWidget::MainFrame","","classes/Tk/BWidget/MainFrame.html","",""],["Tk::BWidget::MessageDlg","","classes/Tk/BWidget/MessageDlg.html","",""],["Tk::BWidget::NoteBook","","classes/Tk/BWidget/NoteBook.html","",""],["Tk::BWidget::NoteBook::Event_for_Tabs","","classes/Tk/BWidget/NoteBook/Event_for_Tabs.html","",""],["Tk::BWidget::PagesManager","","classes/Tk/BWidget/PagesManager.html","",""],["Tk::BWidget::PanedWindow","","classes/Tk/BWidget/PanedWindow.html","",""],["Tk::BWidget::PanelFrame","","classes/Tk/BWidget/PanelFrame.html","",""],["Tk::BWidget::PasswdDlg","","classes/Tk/BWidget/PasswdDlg.html","",""],["Tk::BWidget::ProgressBar","","classes/Tk/BWidget/ProgressBar.html","",""],["Tk::BWidget::ProgressDlg","","classes/Tk/BWidget/ProgressDlg.html","",""],["Tk::BWidget::ScrollView","","classes/Tk/BWidget/ScrollView.html","",""],["Tk::BWidget::ScrollableFrame","","classes/Tk/BWidget/ScrollableFrame.html","",""],["Tk::BWidget::ScrolledWindow","","classes/Tk/BWidget/ScrolledWindow.html","",""],["Tk::BWidget::SelectColor","","classes/Tk/BWidget/SelectColor.html","",""],["Tk::BWidget::SelectColor::Dialog","","classes/Tk/BWidget/SelectColor/Dialog.html","",""],["Tk::BWidget::SelectColor::MenuButton","","classes/Tk/BWidget/SelectColor/MenuButton.html","",""],["Tk::BWidget::SelectColor::Menubutton","","classes/Tk/BWidget/SelectColor/Menubutton.html","",""],["Tk::BWidget::SelectFont","","classes/Tk/BWidget/SelectFont.html","",""],["Tk::BWidget::SelectFont::Dialog","","classes/Tk/BWidget/SelectFont/Dialog.html","",""],["Tk::BWidget::SelectFont::Toolbar","","classes/Tk/BWidget/SelectFont/Toolbar.html","",""],["Tk::BWidget::Separator","","classes/Tk/BWidget/Separator.html","",""],["Tk::BWidget::SpinBox","","classes/Tk/BWidget/SpinBox.html","",""],["Tk::BWidget::StatusBar","","classes/Tk/BWidget/StatusBar.html","",""],["Tk::BWidget::TitleFrame","","classes/Tk/BWidget/TitleFrame.html","",""],["Tk::BWidget::Tree","","classes/Tk/BWidget/Tree.html","",""],["Tk::BWidget::Tree::Event_for_Items","","classes/Tk/BWidget/Tree/Event_for_Items.html","",""],["Tk::BWidget::Tree::Node","","classes/Tk/BWidget/Tree/Node.html","",""],["Tk::BWidget::Widget","","classes/Tk/BWidget/Widget.html","",""],["Tk::BinaryString","","classes/Tk/BinaryString.html","",""],["Tk::Busy","","classes/Tk/Busy.html","",""],["Tk::Button","","classes/Tk/Button.html","",""],["Tk::Canvas","","classes/Tk/Canvas.html","",""],["Tk::CheckButton","","classes/Tk/CheckButton.html","",""],["Tk::Clock","","classes/Tk/Clock.html","",""],["Tk::EncodedString","","classes/Tk/EncodedString.html","",""],["Tk::Entry","","classes/Tk/Entry.html","",""],["Tk::Frame","","classes/Tk/Frame.html","",""],["Tk::HTML_Widget","","classes/Tk/HTML_Widget.html","",""],["Tk::HTML_Widget::ClippingWindow","","classes/Tk/HTML_Widget/ClippingWindow.html","",""],["Tk::ICONS","","classes/Tk/ICONS.html","",""],["Tk::Img","","classes/Tk/Img.html","",""],["Tk::Img::BMP","","classes/Tk/Img/BMP.html","",""],["Tk::Img::GIF","","classes/Tk/Img/GIF.html","",""],["Tk::Img::ICO","","classes/Tk/Img/ICO.html","",""],["Tk::Img::JPEG","","classes/Tk/Img/JPEG.html","",""],["Tk::Img::PCX","","classes/Tk/Img/PCX.html","",""],["Tk::Img::PIXMAP","","classes/Tk/Img/PIXMAP.html","",""],["Tk::Img::PNG","","classes/Tk/Img/PNG.html","",""],["Tk::Img::PPM","","classes/Tk/Img/PPM.html","",""],["Tk::Img::PS","","classes/Tk/Img/PS.html","",""],["Tk::Img::SGI","","classes/Tk/Img/SGI.html","",""],["Tk::Img::SUN","","classes/Tk/Img/SUN.html","",""],["Tk::Img::TGA","","classes/Tk/Img/TGA.html","",""],["Tk::Img::TIFF","","classes/Tk/Img/TIFF.html","",""],["Tk::Img::WINDOW","","classes/Tk/Img/WINDOW.html","",""],["Tk::Img::XBM","","classes/Tk/Img/XBM.html","",""],["Tk::Img::XPM","","classes/Tk/Img/XPM.html","",""],["Tk::Itcl","","classes/Tk/Itcl.html","",""],["Tk::Itcl::ItclObject","","classes/Tk/Itcl/ItclObject.html","",""],["Tk::ItemValidateConfigure","","classes/Tk/ItemValidateConfigure.html","",""],["Tk::Itk","","classes/Tk/Itk.html","",""],["Tk::Itk::Archetype","","classes/Tk/Itk/Archetype.html","",""],["Tk::Itk::Component","","classes/Tk/Itk/Component.html","",""],["Tk::Itk::Toplevel","","classes/Tk/Itk/Toplevel.html","",""],["Tk::Itk::Widget","","classes/Tk/Itk/Widget.html","",""],["Tk::Iwidgets","","classes/Tk/Iwidgets.html","",""],["Tk::Iwidgets::Buttonbox","","classes/Tk/Iwidgets/Buttonbox.html","",""],["Tk::Iwidgets::Calendar","","classes/Tk/Iwidgets/Calendar.html","",""],["Tk::Iwidgets::Calendar::CalendarCommand","","classes/Tk/Iwidgets/Calendar/CalendarCommand.html","",""],["Tk::Iwidgets::Calendar::CalendarCommand::ValidateArgs","","classes/Tk/Iwidgets/Calendar/CalendarCommand/ValidateArgs.html","","<p>class CalCmdArgs &lt; TkUtil::CallbackSubst\n"],["Tk::Iwidgets::Canvasprintbox","","classes/Tk/Iwidgets/Canvasprintbox.html","",""],["Tk::Iwidgets::Canvasprintdialog","","classes/Tk/Iwidgets/Canvasprintdialog.html","",""],["Tk::Iwidgets::Checkbox","","classes/Tk/Iwidgets/Checkbox.html","",""],["Tk::Iwidgets::Combobox","","classes/Tk/Iwidgets/Combobox.html","",""],["Tk::Iwidgets::Dateentry","","classes/Tk/Iwidgets/Dateentry.html","",""],["Tk::Iwidgets::Datefield","","classes/Tk/Iwidgets/Datefield.html","",""],["Tk::Iwidgets::Dialog","","classes/Tk/Iwidgets/Dialog.html","",""],["Tk::Iwidgets::Dialogshell","","classes/Tk/Iwidgets/Dialogshell.html","",""],["Tk::Iwidgets::Disjointlistbox","","classes/Tk/Iwidgets/Disjointlistbox.html","",""],["Tk::Iwidgets::Entryfield","","classes/Tk/Iwidgets/Entryfield.html","",""],["Tk::Iwidgets::Entryfield::EntryfieldValidate","","classes/Tk/Iwidgets/Entryfield/EntryfieldValidate.html","",""],["Tk::Iwidgets::Entryfield::EntryfieldValidate::ValidateArgs","","classes/Tk/Iwidgets/Entryfield/EntryfieldValidate/ValidateArgs.html","","<p>class CalCmdArgs &lt; TkUtil::CallbackSubst\n"],["Tk::Iwidgets::Extbutton","","classes/Tk/Iwidgets/Extbutton.html","",""],["Tk::Iwidgets::Extfileselectionbox","","classes/Tk/Iwidgets/Extfileselectionbox.html","",""],["Tk::Iwidgets::Extfileselectiondialog","","classes/Tk/Iwidgets/Extfileselectiondialog.html","",""],["Tk::Iwidgets::Feedback","","classes/Tk/Iwidgets/Feedback.html","",""],["Tk::Iwidgets::Fileselectionbox","","classes/Tk/Iwidgets/Fileselectionbox.html","",""],["Tk::Iwidgets::Fileselectiondialog","","classes/Tk/Iwidgets/Fileselectiondialog.html","",""],["Tk::Iwidgets::Finddialog","","classes/Tk/Iwidgets/Finddialog.html","",""],["Tk::Iwidgets::Hierarchy","","classes/Tk/Iwidgets/Hierarchy.html","",""],["Tk::Iwidgets::Hierarchy::IconCommand","","classes/Tk/Iwidgets/Hierarchy/IconCommand.html","",""],["Tk::Iwidgets::Hierarchy::IconCommand::ValidateArgs","","classes/Tk/Iwidgets/Hierarchy/IconCommand/ValidateArgs.html","",""],["Tk::Iwidgets::Hierarchy::IndicatorCommand","","classes/Tk/Iwidgets/Hierarchy/IndicatorCommand.html","",""],["Tk::Iwidgets::Hierarchy::IndicatorCommand::ValidateArgs","","classes/Tk/Iwidgets/Hierarchy/IndicatorCommand/ValidateArgs.html","",""],["Tk::Iwidgets::Hierarchy::QueryCommand","","classes/Tk/Iwidgets/Hierarchy/QueryCommand.html","",""],["Tk::Iwidgets::Hierarchy::QueryCommand::ValidateArgs","","classes/Tk/Iwidgets/Hierarchy/QueryCommand/ValidateArgs.html","",""],["Tk::Iwidgets::Hyperhelp","","classes/Tk/Iwidgets/Hyperhelp.html","",""],["Tk::Iwidgets::Labeledframe","","classes/Tk/Iwidgets/Labeledframe.html","",""],["Tk::Iwidgets::Labeledwidget","","classes/Tk/Iwidgets/Labeledwidget.html","",""],["Tk::Iwidgets::Mainwindow","","classes/Tk/Iwidgets/Mainwindow.html","",""],["Tk::Iwidgets::Menubar","","classes/Tk/Iwidgets/Menubar.html","",""],["Tk::Iwidgets::Messagebox","","classes/Tk/Iwidgets/Messagebox.html","",""],["Tk::Iwidgets::Messagedialog","","classes/Tk/Iwidgets/Messagedialog.html","",""],["Tk::Iwidgets::Notebook","","classes/Tk/Iwidgets/Notebook.html","",""],["Tk::Iwidgets::Optionmenu","","classes/Tk/Iwidgets/Optionmenu.html","",""],["Tk::Iwidgets::Panedwindow","","classes/Tk/Iwidgets/Panedwindow.html","",""],["Tk::Iwidgets::Promptdialog","","classes/Tk/Iwidgets/Promptdialog.html","",""],["Tk::Iwidgets::Pushbutton","","classes/Tk/Iwidgets/Pushbutton.html","",""],["Tk::Iwidgets::Radiobox","","classes/Tk/Iwidgets/Radiobox.html","",""],["Tk::Iwidgets::Scopedobject","","classes/Tk/Iwidgets/Scopedobject.html","",""],["Tk::Iwidgets::Scrolledcanvas","","classes/Tk/Iwidgets/Scrolledcanvas.html","",""],["Tk::Iwidgets::Scrolledframe","","classes/Tk/Iwidgets/Scrolledframe.html","",""],["Tk::Iwidgets::Scrolledhtml","","classes/Tk/Iwidgets/Scrolledhtml.html","",""],["Tk::Iwidgets::Scrolledlistbox","","classes/Tk/Iwidgets/Scrolledlistbox.html","",""],["Tk::Iwidgets::Scrolledtext","","classes/Tk/Iwidgets/Scrolledtext.html","",""],["Tk::Iwidgets::Scrolledwidget","","classes/Tk/Iwidgets/Scrolledwidget.html","",""],["Tk::Iwidgets::Selectionbox","","classes/Tk/Iwidgets/Selectionbox.html","",""],["Tk::Iwidgets::Selectiondialog","","classes/Tk/Iwidgets/Selectiondialog.html","",""],["Tk::Iwidgets::Shell","","classes/Tk/Iwidgets/Shell.html","",""],["Tk::Iwidgets::Spindate","","classes/Tk/Iwidgets/Spindate.html","",""],["Tk::Iwidgets::Spinint","","classes/Tk/Iwidgets/Spinint.html","",""],["Tk::Iwidgets::Spinner","","classes/Tk/Iwidgets/Spinner.html","",""],["Tk::Iwidgets::Spinner::EntryfieldValidate","","classes/Tk/Iwidgets/Spinner/EntryfieldValidate.html","",""],["Tk::Iwidgets::Spinner::EntryfieldValidate::ValidateArgs","","classes/Tk/Iwidgets/Spinner/EntryfieldValidate/ValidateArgs.html","","<p>class CalCmdArgs &lt; TkUtil::CallbackSubst\n"],["Tk::Iwidgets::Spintime","","classes/Tk/Iwidgets/Spintime.html","",""],["Tk::Iwidgets::Tabnotebook","","classes/Tk/Iwidgets/Tabnotebook.html","",""],["Tk::Iwidgets::Tabset","","classes/Tk/Iwidgets/Tabset.html","",""],["Tk::Iwidgets::Timeentry","","classes/Tk/Iwidgets/Timeentry.html","",""],["Tk::Iwidgets::Timefield","","classes/Tk/Iwidgets/Timefield.html","",""],["Tk::Iwidgets::Toolbar","","classes/Tk/Iwidgets/Toolbar.html","",""],["Tk::Iwidgets::Watch","","classes/Tk/Iwidgets/Watch.html","",""],["Tk::Label","","classes/Tk/Label.html","",""],["Tk::LabelFrame","","classes/Tk/LabelFrame.html","",""],["Tk::Listbox","","classes/Tk/Listbox.html","",""],["Tk::MacResource","","classes/Tk/MacResource.html","",""],["Tk::Menu","","classes/Tk/Menu.html","",""],["Tk::Menu::TkInternalFunction","","classes/Tk/Menu/TkInternalFunction.html","",""],["Tk::MenuClone","","classes/Tk/MenuClone.html","",""],["Tk::Menubutton","","classes/Tk/Menubutton.html","",""],["Tk::Message","","classes/Tk/Message.html","",""],["Tk::OptionMenubutton","","classes/Tk/OptionMenubutton.html","",""],["Tk::OptionMenubutton::OptionMenu","","classes/Tk/OptionMenubutton/OptionMenu.html","",""],["Tk::OptionObj","","classes/Tk/OptionObj.html","",""],["Tk::PanedWindow","","classes/Tk/PanedWindow.html","",""],["Tk::RadioButton","","classes/Tk/RadioButton.html","",""],["Tk::RbWidget","","classes/Tk/RbWidget.html","",""],["Tk::RbWidget::AlignBox","","classes/Tk/RbWidget/AlignBox.html","",""],["Tk::RbWidget::AutoScrollListbox","","classes/Tk/RbWidget/AutoScrollListbox.html","",""],["Tk::RbWidget::BalloonHelp","","classes/Tk/RbWidget/BalloonHelp.html","",""],["Tk::RbWidget::Combobox","","classes/Tk/RbWidget/Combobox.html","",""],["Tk::RbWidget::Editable_Listbox","","classes/Tk/RbWidget/Editable_Listbox.html","",""],["Tk::RbWidget::HBox","","classes/Tk/RbWidget/HBox.html","",""],["Tk::RbWidget::HRBox","","classes/Tk/RbWidget/HRBox.html","",""],["Tk::RbWidget::ScrollFrame","","classes/Tk/RbWidget/ScrollFrame.html","",""],["Tk::RbWidget::VBBox","","classes/Tk/RbWidget/VBBox.html","",""],["Tk::RbWidget::VBox","","classes/Tk/RbWidget/VBox.html","",""],["Tk::Root","","classes/Tk/Root.html","",""],["Tk::Scale","","classes/Tk/Scale.html","",""],["Tk::Scrollable","","classes/Tk/Scrollable.html","",""],["Tk::Scrollbar","","classes/Tk/Scrollbar.html","",""],["Tk::ScrollbarComposite","","classes/Tk/ScrollbarComposite.html","",""],["Tk::Spinbox","","classes/Tk/Spinbox.html","",""],["Tk::Spinbox::SpinCommand","","classes/Tk/Spinbox/SpinCommand.html","",""],["Tk::Spinbox::SpinCommand::ValidateArgs","","classes/Tk/Spinbox/SpinCommand/ValidateArgs.html","",""],["Tk::SysMenu_Apple","","classes/Tk/SysMenu_Apple.html","",""],["Tk::SysMenu_Help","","classes/Tk/SysMenu_Help.html","",""],["Tk::SysMenu_System","","classes/Tk/SysMenu_System.html","",""],["Tk::SystemMenu","","classes/Tk/SystemMenu.html","",""],["Tk::TOPLEVEL_ALIASES","","classes/Tk/TOPLEVEL_ALIASES.html","",""],["Tk::TclX","","classes/Tk/TclX.html","",""],["Tk::TclX::XPG3_MsgCat","","classes/Tk/TclX/XPG3_MsgCat.html","",""],["Tk::Tcllib","","classes/Tk/Tcllib.html","",""],["Tk::Tcllib::Autoscroll","","classes/Tk/Tcllib/Autoscroll.html","",""],["Tk::Tcllib::CText","","classes/Tk/Tcllib/CText.html","",""],["Tk::Tcllib::ChatWidget","","classes/Tk/Tcllib/ChatWidget.html","",""],["Tk::Tcllib::Crosshair","","classes/Tk/Tcllib/Crosshair.html","",""],["Tk::Tcllib::Cursor","","classes/Tk/Tcllib/Cursor.html","",""],["Tk::Tcllib::DateField","","classes/Tk/Tcllib/DateField.html","",""],["Tk::Tcllib::Datefield","","classes/Tk/Tcllib/Datefield.html","",""],["Tk::Tcllib::Diagrams","","classes/Tk/Tcllib/Diagrams.html","",""],["Tk::Tcllib::GetString_Dialog","","classes/Tk/Tcllib/GetString_Dialog.html","",""],["Tk::Tcllib::History","","classes/Tk/Tcllib/History.html","",""],["Tk::Tcllib::ICO","","classes/Tk/Tcllib/ICO.html","",""],["Tk::Tcllib::IP6_Entry","","classes/Tk/Tcllib/IP6_Entry.html","",""],["Tk::Tcllib::IPEntry","","classes/Tk/Tcllib/IPEntry.html","",""],["Tk::Tcllib::IPEntry6","","classes/Tk/Tcllib/IPEntry6.html","",""],["Tk::Tcllib::IP_Entry","","classes/Tk/Tcllib/IP_Entry.html","",""],["Tk::Tcllib::IP_Entry6","","classes/Tk/Tcllib/IP_Entry6.html","",""],["Tk::Tcllib::KHIM","","classes/Tk/Tcllib/KHIM.html","",""],["Tk::Tcllib::KHIM::Help","","classes/Tk/Tcllib/KHIM/Help.html","",""],["Tk::Tcllib::Ntext","","classes/Tk/Tcllib/Ntext.html","",""],["Tk::Tcllib::Plotchart","","classes/Tk/Tcllib/Plotchart.html","",""],["Tk::Tcllib::Plotchart::Barchart","","classes/Tk/Tcllib/Plotchart/Barchart.html","",""],["Tk::Tcllib::Plotchart::Barchart3D","","classes/Tk/Tcllib/Plotchart/Barchart3D.html","",""],["Tk::Tcllib::Plotchart::Boxplot","","classes/Tk/Tcllib/Plotchart/Boxplot.html","",""],["Tk::Tcllib::Plotchart::ChartMethod","","classes/Tk/Tcllib/Plotchart/ChartMethod.html","",""],["Tk::Tcllib::Plotchart::Ganttchart","","classes/Tk/Tcllib/Plotchart/Ganttchart.html","",""],["Tk::Tcllib::Plotchart::Histogram","","classes/Tk/Tcllib/Plotchart/Histogram.html","",""],["Tk::Tcllib::Plotchart::HorizontalBarchart","","classes/Tk/Tcllib/Plotchart/HorizontalBarchart.html","",""],["Tk::Tcllib::Plotchart::IsometricPlot","","classes/Tk/Tcllib/Plotchart/IsometricPlot.html","",""],["Tk::Tcllib::Plotchart::Isometricplot","","classes/Tk/Tcllib/Plotchart/IsometricPlot.html","",""],["Tk::Tcllib::Plotchart::Piechart","","classes/Tk/Tcllib/Plotchart/Piechart.html","",""],["Tk::Tcllib::Plotchart::Plot3D","","classes/Tk/Tcllib/Plotchart/Plot3D.html","",""],["Tk::Tcllib::Plotchart::PlotSeries","","classes/Tk/Tcllib/Plotchart/PlotSeries.html","",""],["Tk::Tcllib::Plotchart::PolarPlot","","classes/Tk/Tcllib/Plotchart/PolarPlot.html","",""],["Tk::Tcllib::Plotchart::Polarplot","","classes/Tk/Tcllib/Plotchart/PolarPlot.html","",""],["Tk::Tcllib::Plotchart::Radialchart","","classes/Tk/Tcllib/Plotchart/Radialchart.html","",""],["Tk::Tcllib::Plotchart::RibbonChart3D","","classes/Tk/Tcllib/Plotchart/RibbonChart3D.html","",""],["Tk::Tcllib::Plotchart::RightAxis","","classes/Tk/Tcllib/Plotchart/RightAxis.html","",""],["Tk::Tcllib::Plotchart::Stripchart","","classes/Tk/Tcllib/Plotchart/Stripchart.html","",""],["Tk::Tcllib::Plotchart::TXPlot","","classes/Tk/Tcllib/Plotchart/TXPlot.html","",""],["Tk::Tcllib::Plotchart::Timechart","","classes/Tk/Tcllib/Plotchart/Timechart.html","",""],["Tk::Tcllib::Plotchart::XLogYPlot","","classes/Tk/Tcllib/Plotchart/XLogYPlot.html","",""],["Tk::Tcllib::Plotchart::XYPlot","","classes/Tk/Tcllib/Plotchart/XYPlot.html","",""],["Tk::Tcllib::Style","","classes/Tk/Tcllib/Style.html","",""],["Tk::Tcllib::Swaplist_Dialog","","classes/Tk/Tcllib/Swaplist_Dialog.html","",""],["Tk::Tcllib::TableList","","classes/Tk/Tcllib/TableList.html","",""],["Tk::Tcllib::TableList_Tile","","classes/Tk/Tcllib/TableList_Tile.html","",""],["Tk::Tcllib::Tablelist","","classes/Tk/Tcllib/Tablelist.html","",""],["Tk::Tcllib::TablelistItemConfig","","classes/Tk/Tcllib/TablelistItemConfig.html","",""],["Tk::Tcllib::Tablelist_Tile","","classes/Tk/Tcllib/Tablelist_Tile.html","",""],["Tk::Tcllib::Tkpiechart","","classes/Tk/Tcllib/Tkpiechart.html","",""],["Tk::Tcllib::Tkpiechart::BoxLabeler","","classes/Tk/Tcllib/Tkpiechart/BoxLabeler.html","",""],["Tk::Tcllib::Tkpiechart::ConfigMethod","","classes/Tk/Tcllib/Tkpiechart/ConfigMethod.html","",""],["Tk::Tcllib::Tkpiechart::Label","","classes/Tk/Tcllib/Tkpiechart/Label.html","",""],["Tk::Tcllib::Tkpiechart::PeripheralLabeler","","classes/Tk/Tcllib/Tkpiechart/PeripheralLabeler.html","",""],["Tk::Tcllib::Tkpiechart::Pie","","classes/Tk/Tcllib/Tkpiechart/Pie.html","",""],["Tk::Tcllib::Tkpiechart::PieChartObj","","classes/Tk/Tcllib/Tkpiechart/PieChartObj.html","",""],["Tk::Tcllib::Tkpiechart::Slice","","classes/Tk/Tcllib/Tkpiechart/Slice.html","",""],["Tk::Tcllib::Tooltip","","classes/Tk/Tcllib/Tooltip.html","",""],["Tk::Tcllib::Widget","","classes/Tk/Tcllib/Widget.html","",""],["Tk::Tcllib::Widget::Calendar","","classes/Tk/Tcllib/Widget/Calendar.html","",""],["Tk::Tcllib::Widget::Canvas_Sqmap","","classes/Tk/Tcllib/Widget/Canvas_Sqmap.html","",""],["Tk::Tcllib::Widget::Canvas_Zoom","","classes/Tk/Tcllib/Widget/Canvas_Zoom.html","",""],["Tk::Tcllib::Widget::DateEntry","","classes/Tk/Tcllib/Widget/DateEntry.html","",""],["Tk::Tcllib::Widget::Dateentry","","classes/Tk/Tcllib/Widget/Dateentry.html","",""],["Tk::Tcllib::Widget::Dialog","","classes/Tk/Tcllib/Widget/Dialog.html","",""],["Tk::Tcllib::Widget::MenuEntry","","classes/Tk/Tcllib/Widget/MenuEntry.html","",""],["Tk::Tcllib::Widget::Menuentry","","classes/Tk/Tcllib/Widget/Menuentry.html","",""],["Tk::Tcllib::Widget::PanelFrame","","classes/Tk/Tcllib/Widget/PanelFrame.html","",""],["Tk::Tcllib::Widget::Panelframe","","classes/Tk/Tcllib/Widget/Panelframe.html","",""],["Tk::Tcllib::Widget::Ruler","","classes/Tk/Tcllib/Widget/Ruler.html","",""],["Tk::Tcllib::Widget::ScreenRuler","","classes/Tk/Tcllib/Widget/ScreenRuler.html","",""],["Tk::Tcllib::Widget::Screenruler","","classes/Tk/Tcllib/Widget/Screenruler.html","",""],["Tk::Tcllib::Widget::ScrolledWindow","","classes/Tk/Tcllib/Widget/Scrolledwindow.html","",""],["Tk::Tcllib::Widget::Scrolledwindow","","classes/Tk/Tcllib/Widget/Scrolledwindow.html","",""],["Tk::Tcllib::Widget::Statusbar","","classes/Tk/Tcllib/Widget/Statusbar.html","",""],["Tk::Tcllib::Widget::SuperFrame","","classes/Tk/Tcllib/Widget/SuperFrame.html","",""],["Tk::Tcllib::Widget::Toolbar","","classes/Tk/Tcllib/Widget/Toolbar.html","",""],["Tk::Tcllib::Widget::ToolbarItem","","classes/Tk/Tcllib/Widget/ToolbarItem.html","",""],["Tk::Tcllib::Widget::ToolbarItemConfig","","classes/Tk/Tcllib/Widget/ToolbarItemConfig.html","",""],["Tk::Text","","classes/Tk/Text.html","",""],["Tk::Text::IndexModMethods","","classes/Tk/Text/IndexModMethods.html","",""],["Tk::Text::IndexString","","classes/Tk/Text/IndexString.html","",""],["Tk::Tile","","classes/Tk/Tile.html","",""],["Tk::Tile::Button","","classes/Tk/Tile/Button.html","",""],["Tk::Tile::CheckButton","","classes/Tk/Tile/CheckButton.html","",""],["Tk::Tile::Checkbutton","","classes/Tk/Tile/Checkbutton.html","",""],["Tk::Tile::Combobox","","classes/Tk/Tile/Combobox.html","",""],["Tk::Tile::Dialog","","classes/Tk/Tile/Dialog.html","",""],["Tk::Tile::Entry","","classes/Tk/Tile/Entry.html","",""],["Tk::Tile::Font","","classes/Tk/Tile/Font.html","",""],["Tk::Tile::Frame","","classes/Tk/Tile/Frame.html","",""],["Tk::Tile::KeyNav","","classes/Tk/Tile/KeyNav.html","",""],["Tk::Tile::Label","","classes/Tk/Tile/Label.html","",""],["Tk::Tile::LabelFrame","","classes/Tk/Tile/LabelFrame.html","",""],["Tk::Tile::Labelframe","","classes/Tk/Tile/Labelframe.html","",""],["Tk::Tile::MenuButton","","classes/Tk/Tile/MenuButton.html","",""],["Tk::Tile::Menubutton","","classes/Tk/Tile/Menubutton.html","",""],["Tk::Tile::Notebook","","classes/Tk/Tile/Notebook.html","",""],["Tk::Tile::ParseStyleLayout","","classes/Tk/Tile/ParseStyleLayout.html","",""],["Tk::Tile::Progress","","classes/Tk/Tile/Progress.html","",""],["Tk::Tile::Progressbar","","classes/Tk/Tile/Progressbar.html","",""],["Tk::Tile::RadioButton","","classes/Tk/Tile/RadioButton.html","",""],["Tk::Tile::Radiobutton","","classes/Tk/Tile/Radiobutton.html","",""],["Tk::Tile::Scale","","classes/Tk/Tile/Scale.html","",""],["Tk::Tile::Scrollbar","","classes/Tk/Tile/Scrollbar.html","",""],["Tk::Tile::Separator","","classes/Tk/Tile/Separator.html","",""],["Tk::Tile::SizeGrip","","classes/Tk/Tile/SizeGrip.html","",""],["Tk::Tile::Sizegrip","","classes/Tk/Tile/Sizegrip.html","",""],["Tk::Tile::Spinbox","","classes/Tk/Tile/Spinbox.html","",""],["Tk::Tile::Square","","classes/Tk/Tile/Square.html","",""],["Tk::Tile::Style","","classes/Tk/Tile/Style.html","",""],["Tk::Tile::TButton","","classes/Tk/Tile/TButton.html","",""],["Tk::Tile::TCheckButton","","classes/Tk/Tile/TCheckButton.html","",""],["Tk::Tile::TCheckbutton","","classes/Tk/Tile/TCheckbutton.html","",""],["Tk::Tile::TCombobox","","classes/Tk/Tile/TCombobox.html","",""],["Tk::Tile::TEntry","","classes/Tk/Tile/TEntry.html","",""],["Tk::Tile::TFrame","","classes/Tk/Tile/TFrame.html","",""],["Tk::Tile::TLabel","","classes/Tk/Tile/TLabel.html","",""],["Tk::Tile::TLabelFrame","","classes/Tk/Tile/TLabelFrame.html","",""],["Tk::Tile::TLabelframe","","classes/Tk/Tile/TLabelframe.html","",""],["Tk::Tile::TMenuButton","","classes/Tk/Tile/TMenuButton.html","",""],["Tk::Tile::TMenubutton","","classes/Tk/Tile/TMenubutton.html","",""],["Tk::Tile::TNotebook","","classes/Tk/Tile/TNotebook.html","",""],["Tk::Tile::TPaned","","classes/Tk/Tile/TPaned.html","",""],["Tk::Tile::TProgress","","classes/Tk/Tile/TProgress.html","",""],["Tk::Tile::TProgressbar","","classes/Tk/Tile/TProgressbar.html","",""],["Tk::Tile::TRadioButton","","classes/Tk/Tile/TRadioButton.html","",""],["Tk::Tile::TRadiobutton","","classes/Tk/Tile/TRadiobutton.html","",""],["Tk::Tile::TScale","","classes/Tk/Tile/TScale.html","",""],["Tk::Tile::TScrollbar","","classes/Tk/Tile/TScrollbar.html","",""],["Tk::Tile::TSeparator","","classes/Tk/Tile/TSeparator.html","",""],["Tk::Tile::TSpinbox","","classes/Tk/Tile/TSpinbox.html","",""],["Tk::Tile::TSpinbox::SpinCommand","","classes/Tk/Tile/TSpinbox/SpinCommand.html","",""],["Tk::Tile::TSpinbox::SpinCommand::ValidateArgs","","classes/Tk/Tile/TSpinbox/SpinCommand/ValidateArgs.html","",""],["Tk::Tile::TSquare","","classes/Tk/Tile/TSquare.html","",""],["Tk::Tile::TileWidget","","classes/Tk/Tile/TileWidget.html","",""],["Tk::Tile::Treeview","","classes/Tk/Tile/Treeview.html","",""],["Tk::Tile::Treeview::Item","","classes/Tk/Tile/Treeview/Item.html","",""],["Tk::Tile::Treeview::Root","","classes/Tk/Tile/Treeview/Root.html","",""],["Tk::Tile::Treeview::Tag","","classes/Tk/Tile/Treeview/Tag.html","",""],["Tk::Tile::TreeviewConfig","","classes/Tk/Tile/TreeviewConfig.html","",""],["Tk::Tile::XScrollbar","","classes/Tk/Tile/XScrollbar.html","",""],["Tk::Tile::YScrollbar","","classes/Tk/Tile/YScrollbar.html","",""],["Tk::TkDND","","classes/Tk/TkDND.html","",""],["Tk::TkDND::DND","","classes/Tk/TkDND/DND.html","",""],["Tk::TkDND::DND_Subst","","classes/Tk/TkDND/DND_Subst.html","",""],["Tk::TkDND::Shape","","classes/Tk/TkDND/Shape.html","",""],["Tk::TkSystemMenu","","classes/Tk/TkSystemMenu.html","",""],["Tk::TkTable","","classes/Tk/TkTable.html","",""],["Tk::TkTable::BrowseCommand","","classes/Tk/TkTable/BrowseCommand.html","",""],["Tk::TkTable::BrowseCommand::ValidateArgs","","classes/Tk/TkTable/BrowseCommand/ValidateArgs.html","",""],["Tk::TkTable::CellCommand","","classes/Tk/TkTable/CellCommand.html","",""],["Tk::TkTable::CellCommand::ValidateArgs","","classes/Tk/TkTable/CellCommand/ValidateArgs.html","",""],["Tk::TkTable::CellTag","","classes/Tk/TkTable/CellTag.html","",""],["Tk::TkTable::ConfigMethod","","classes/Tk/TkTable/ConfigMethod.html","",""],["Tk::TkTable::NamedCellTag","","classes/Tk/TkTable/NamedCellTag.html","",""],["Tk::TkTable::SelectionCommand","","classes/Tk/TkTable/SelectionCommand.html","",""],["Tk::TkTable::SelectionCommand::ValidateArgs","","classes/Tk/TkTable/SelectionCommand/ValidateArgs.html","",""],["Tk::TkTable::ValidateCommand","","classes/Tk/TkTable/ValidateCommand.html","",""],["Tk::TkTable::ValidateCommand::ValidateArgs","","classes/Tk/TkTable/ValidateCommand/ValidateArgs.html","",""],["Tk::TkTrans","","classes/Tk/TkTrans.html","",""],["Tk::Toplevel","","classes/Tk/Toplevel.html","",""],["Tk::TreeCtrl","","classes/Tk/TreeCtrl.html","",""],["Tk::TreeCtrl::BindCallback","","classes/Tk/TreeCtrl/BindCallback.html","",""],["Tk::TreeCtrl::BitmapElement","","classes/Tk/TreeCtrl/BitmapElement.html","",""],["Tk::TreeCtrl::BorderElement","","classes/Tk/TreeCtrl/BorderElement.html","",""],["Tk::TreeCtrl::Column","","classes/Tk/TreeCtrl/Column.html","",""],["Tk::TreeCtrl::ConfigMethod","","classes/Tk/TreeCtrl/ConfigMethod.html","",""],["Tk::TreeCtrl::Element","","classes/Tk/TreeCtrl/Element.html","",""],["Tk::TreeCtrl::ImageElement","","classes/Tk/TreeCtrl/ImageElement.html","",""],["Tk::TreeCtrl::Item","","classes/Tk/TreeCtrl/Item.html","",""],["Tk::TreeCtrl::NotifyEvent","","classes/Tk/TreeCtrl/NotifyEvent.html","",""],["Tk::TreeCtrl::RectangleElement","","classes/Tk/TreeCtrl/RectangleElement.html","",""],["Tk::TreeCtrl::Style","","classes/Tk/TreeCtrl/Style.html","",""],["Tk::TreeCtrl_Widget","","classes/Tk/TreeCtrl_Widget.html","",""],["Tk::Trofs","","classes/Tk/Trofs.html","",""],["Tk::Ttk","","classes/Tk/Ttk.html","",""],["Tk::UTF8_String","","classes/Tk/UTF8_String.html","",""],["Tk::ValidateConfigure","","classes/Tk/ValidateConfigure.html","",""],["Tk::Vu","","classes/Tk/Vu.html","",""],["Tk::Vu::Bargraph","","classes/Tk/Vu/Bargraph.html","",""],["Tk::Vu::ChartsConfig","","classes/Tk/Vu/ChartsConfig.html","",""],["Tk::Vu::Dial","","classes/Tk/Vu/Dial.html","","<p>define module/class\n"],["Tk::Vu::NamedPieSlice","","classes/Tk/Vu/NamedPieSlice.html","",""],["Tk::Vu::Pie","","classes/Tk/Vu/Pie.html","",""],["Tk::Vu::PieSlice","","classes/Tk/Vu/PieSlice.html","",""],["Tk::Vu::PieSliceConfigMethod","","classes/Tk/Vu/PieSliceConfigMethod.html","",""],["Tk::Vu::TkcBarchart","","classes/Tk/Vu/TkcBarchart.html","",""],["Tk::Vu::TkcSticker","","classes/Tk/Vu/TkcSticker.html","",""],["Tk::Vu::TkcStripchart","","classes/Tk/Vu/TkcStripchart.html","",""],["Tk::WinDDE","","classes/Tk/WinDDE.html","",""],["Tk::WinRegistry","","classes/Tk/WinRegistry.html","",""],["Tk::Winico","","classes/Tk/Winico.html","",""],["Tk::Winico::Winico_callback","","classes/Tk/Winico/Winico_callback.html","",""],["Tk::Winico::Winico_callback::ValidateArgs","","classes/Tk/Winico/Winico_callback/ValidateArgs.html","",""],["Tk::Wm","","classes/Tk/Wm.html","",""],["Tk::Wm_for_General","","classes/Tk/Wm_for_General.html","",""],["Tk::XScrollable","","classes/Tk/XScrollable.html","",""],["Tk::XScrollbar","","classes/Tk/XScrollbar.html","",""],["Tk::X_Scrollable","","classes/Tk/XScrollable.html","",""],["Tk::YScrollable","","classes/Tk/YScrollable.html","",""],["Tk::YScrollbar","","classes/Tk/YScrollbar.html","",""],["Tk::Y_Scrollable","","classes/Tk/YScrollable.html","",""],["TkAfter","","classes/TkAfter.html","",""],["TkBgError","","classes/TkBgError.html","",""],["TkBindTag","","classes/TkBindTag.html","",""],["TkBitmapImage","","classes/TkBitmapImage.html","",""],["TkCallbackBreak","","classes/TkCallbackBreak.html","",""],["TkCallbackContinue","","classes/TkCallbackContinue.html","",""],["TkCallbackEntry","","classes/TkCallbackEntry.html","",""],["TkCallbackRedo","","classes/TkCallbackRedo.html","",""],["TkCallbackRetry","","classes/TkCallbackRetry.html","",""],["TkCallbackReturn","","classes/TkCallbackReturn.html","",""],["TkCallbackThrow","","classes/TkCallbackThrow.html","",""],["TkCanvasItemConfig","","classes/TkCanvasItemConfig.html","",""],["TkClipboard","","classes/TkClipboard.html","",""],["TkComm","","classes/TkComm.html","","<p>define TkComm module (step 2: event binding)\n"],["TkComposite","","classes/TkComposite.html","",""],["TkConsole","","classes/TkConsole.html","",""],["TkCore","","classes/TkCore.html","","<p>start Tk which depends on MultiTkIp\n"],["TkCore::Tk_OBJECT_TABLE","","classes/TkCore/Tk_OBJECT_TABLE.html","",""],["TkDialog","","classes/TkDialog.html","","<p>TkDialog : with showing at initialize\n"],["TkDialog2","","classes/TkDialog2.html","",""],["TkDialogObj","","classes/TkDialogObj.html","",""],["TkDialog_Demo1","","classes/TkDialog_Demo1.html","","<p>a dialog box with a local grab (called by &#39;widget&#39;)\n<p>a dialog box with a local grab (called by …\n"],["TkDialog_Demo2","","classes/TkDialog_Demo2.html","","<p>a dialog box with a global grab (called by &#39;widget&#39;)\n<p>a dialog box with a global grab (called by …\n"],["TkEvent","","classes/TkEvent.html","",""],["TkEvent::Event","","classes/TkEvent/Event.html","",""],["TkEvent::Event::Grp","","classes/TkEvent/Event/Grp.html","",""],["TkEvent::Event::StateMask","","classes/TkEvent/Event/StateMask.html","",""],["TkEvent::Event::TypeNum","","classes/TkEvent/Event/TypeNum.html","",""],["TkFont","","classes/TkFont.html","",""],["TkFont::Chooser","","classes/TkFont/Chooser.html","",""],["TkFont::CoreMethods","","classes/TkFont/CoreMethods.html","",""],["TkFont::DescendantFont","","classes/TkFont/DescendantFont.html","",""],["TkGoldberg_Demo","","classes/TkGoldberg_Demo.html","","<p># label msg = TkLabel.new($goldberg_demo) {\n\n<pre><code>font &#39;Arial 10&#39;\nwraplength &#39;4i&#39;\njustify &#39;left&#39;\ntext &quot;This ...</code></pre>\n"],["TkGrid","","classes/TkGrid.html","",""],["TkHTML_File_Viewer","","classes/TkHTML_File_Viewer.html","",""],["TkImage","","classes/TkImage.html","",""],["TkImg_demo","","classes/TkImg_demo.html","","<p>Make the Image format available.\n"],["TkItemConfigMethod","","classes/TkItemConfigMethod.html","",""],["TkItemConfigOptkeys","","classes/TkItemConfigOptkeys.html","",""],["TkItemFontOptkeys","","classes/TkItemFontOptkeys.html","",""],["TkKernel","","classes/TkKernel.html","",""],["TkKinput","","classes/TkKinput.html","",""],["TkListItemConfig","","classes/TkListItemConfig.html","",""],["TkLocalJumpError","","classes/TkLocalJumpError.html","",""],["TkManageFocus","","classes/TkManageFocus.html","",""],["TkMenuEntryConfig","","classes/TkMenuEntryConfig.html","",""],["TkMenuSpec","","classes/TkMenuSpec.html","","<p>tk/menuspec.rb\n\n<pre><code>Hidethoshi NAGAI (nagai@ai.kyutech.ac.jp)</code></pre>\n<p>based on tkmenubar.rb :\n"],["TkMenubar","","classes/TkMenubar.html","",""],["TkMsgCat","","classes/TkMsgCat.html","","<p>class TkMsgCatalog\n"],["TkMsgCatalog","","classes/TkMsgCatalog.html","","<p>class TkMsgCatalog\n"],["TkMultiColumnList","","classes/TkMultiColumnList.html","",""],["TkMultiListFrame","","classes/TkMultiListFrame.html","",""],["TkMultiListbox","","classes/TkMultiListbox.html","",""],["TkNamedFont","","classes/TkNamedFont.html","",""],["TkNamespace","","classes/TkNamespace.html","",""],["TkNamespace::Ensemble","","classes/TkNamespace/Ensemble.html","",""],["TkNamespace::NsCode","","classes/TkNamespace/NsCode.html","",""],["TkNamespace::ScopeArgs","","classes/TkNamespace/ScopeArgs.html","",""],["TkObject","","classes/TkObject.html","",""],["TkOption","","classes/TkOption.html","",""],["TkOptionDB","","classes/TkOptionDB.html","",""],["TkOptionDB::Priority","","classes/TkOptionDB/Priority.html","",""],["TkPack","","classes/TkPack.html","",""],["TkPackage","","classes/TkPackage.html","",""],["TkPalette","","classes/TkPalette.html","",""],["TkPhotoImage","","classes/TkPhotoImage.html","","<p>A photo is an image whose pixels can display any color or be transparent.\nAt present, only GIF and PPM/PGM …\n"],["TkPixmapImage","","classes/TkPixmapImage.html","",""],["TkPlace","","classes/TkPlace.html","",""],["TkRTTimer","","classes/TkRTTimer.html","",""],["TkResourceDB","","classes/TkResourceDB.html","",""],["TkScrollbox","","classes/TkScrollbox.html","",""],["TkScrolledCanvas","","classes/TkScrolledCanvas.html","","<p>scrolled_canvas\n"],["TkSelection","","classes/TkSelection.html","",""],["TkTextFrame","","classes/TkTextFrame.html","",""],["TkTextIO","","classes/TkTextIO.html","",""],["TkTextImage","","classes/TkTextImage.html","",""],["TkTextMark","","classes/TkTextMark.html","",""],["TkTextMarkAnchor","","classes/TkTextMarkAnchor.html","",""],["TkTextMarkCurrent","","classes/TkTextMarkCurrent.html","",""],["TkTextMarkInsert","","classes/TkTextMarkInsert.html","",""],["TkTextNamedMark","","classes/TkTextNamedMark.html","",""],["TkTextNamedTag","","classes/TkTextNamedTag.html","",""],["TkTextTag","","classes/TkTextTag.html","",""],["TkTextTagConfig","","classes/TkTextTagConfig.html","",""],["TkTextTagSel","","classes/TkTextTagSel.html","",""],["TkTextWin","","classes/TkTextWin.html","",""],["TkTextWindow","","classes/TkTextWindow.html","",""],["TkTimer","","classes/TkTimer.html","",""],["TkTreatItemFont","","classes/TkTreatItemFont.html","",""],["TkTreatTagFont","","classes/TkTreatTagFont.html","",""],["TkTree","","classes/TkTree.html","",""],["TkTreeCtrl_demo","","classes/TkTreeCtrl_demo.html","",""],["TkUtil","","classes/TkUtil.html","",""],["TkUtil::CallbackSubst","","classes/TkUtil/CallbackSubst.html","",""],["TkUtil::CallbackSubst::Info","","classes/TkUtil/CallbackSubst/Info.html","",""],["TkValidateCommand","","classes/TkValidateCommand.html","",""],["TkValidateCommand::ValidateArgs","","classes/TkValidateCommand/ValidateArgs.html","",""],["TkValidation","","classes/TkValidation.html","",""],["TkValidation::ValidateCmd","","classes/TkValidation/ValidateCmd.html","",""],["TkValidation::ValidateCmd::Action","","classes/TkValidation/ValidateCmd/Action.html","",""],["TkVarAccess","","classes/TkVarAccess.html","",""],["TkVariable","","classes/TkVariable.html","",""],["TkVirtualEvent","","classes/TkVirtualEvent.html","",""],["TkVirtualEvent::PreDefVirtEvent","","classes/TkVirtualEvent/PreDefVirtEvent.html","",""],["TkVirtualEvent::TkNamedVirtualEvent","","classes/TkVirtualEvent/TkNamedVirtualEvent.html","",""],["TkWarning","","classes/TkWarning.html","",""],["TkWarning2","","classes/TkWarning2.html","","<p>dialog for warning\n"],["TkWarningObj","","classes/TkWarningObj.html","","<p>dialog for warning\n"],["TkWindow","","classes/TkWindow.html","",""],["TkWinfo","","classes/TkWinfo.html","",""],["TkXIM","","classes/TkXIM.html","",""],["TkcArc","","classes/TkcArc.html","",""],["TkcBitmap","","classes/TkcBitmap.html","",""],["TkcGroup","","classes/TkcGroup.html","",""],["TkcImage","","classes/TkcImage.html","",""],["TkcItem","","classes/TkcItem.html","",""],["TkcLine","","classes/TkcLine.html","",""],["TkcNamedTag","","classes/TkcNamedTag.html","",""],["TkcOval","","classes/TkcOval.html","",""],["TkcPolygon","","classes/TkcPolygon.html","",""],["TkcRectangle","","classes/TkcRectangle.html","",""],["TkcTag","","classes/TkcTag.html","",""],["TkcTagAccess","","classes/TkcTagAccess.html","",""],["TkcTagAll","","classes/TkcTagAll.html","",""],["TkcTagCurrent","","classes/TkcTagCurrent.html","",""],["TkcTagString","","classes/TkcTagString.html","",""],["TkcText","","classes/TkcText.html","",""],["TkcWindow","","classes/TkcWindow.html","",""],["TktImage","","classes/TktImage.html","",""],["TktMark","","classes/TktMark.html","",""],["TktMarkAnchor","","classes/TktMarkAnchor.html","",""],["TktMarkCurrent","","classes/TktMarkCurrent.html","",""],["TktMarkInsert","","classes/TktMarkInsert.html","",""],["TktNamedMark","","classes/TktNamedMark.html","",""],["TktNamedTag","","classes/TktNamedTag.html","",""],["TktTag","","classes/TktTag.html","",""],["TktTagSel","","classes/TktTagSel.html","",""],["TktWindow","","classes/TktWindow.html","",""],["Toggle","","classes/Toggle.html","","<p>$Id: objinst-ruby.code,v 1.4 2004/11/13 07:42:25 bfulgham Exp $\nwww.bagley.org/~doug/shootout/ with help …\n"],["Tracer","","classes/Tracer.html","","<p>tracer main class\n"],["Transformation","","classes/Transformation.html","",""],["TrueClass","","classes/TrueClass.html","","<p>The global value <code>true</code> is the only instance of class\n<code>TrueClass</code> and represents a logically true value in …\n"],["TupleSpace","","classes/TupleSpace.html","",""],["TupleSpace::Template","","classes/TupleSpace/Template.html","",""],["TypeError","","classes/TypeError.html","","<p>Raised when encountering an object that is not of the expected type.\n\n<pre><code>[1, 2, 3].first(&quot;two&quot;)</code></pre>\n<p><em>raises the</em> …\n"],["UDPSocket","","classes/UDPSocket.html","","<p>UDPSocket represents a UDP/IP socket.\n"],["UNIXServer","","classes/UNIXServer.html","","<p>UNIXServer represents a UNIX domain stream server socket.\n"],["UNIXSocket","","classes/UNIXSocket.html","","<p>UNIXSocket represents a UNIX domain stream client socket.\n"],["URI","","classes/URI.html","","<p>URI is a module providing classes to handle Uniform Resource Identifiers\n(RFC2396)\n<p>Features\n<p>Uniform handling …\n"],["URI::BadURIError","","classes/URI/BadURIError.html","","<p>URI is valid, bad usage is not.\n"],["URI::Error","","classes/URI/Error.html","","<p>Base class for all URI exceptions.\n"],["URI::Escape","","classes/URI/Escape.html","","<p>module for escaping unsafe characters with codes.\n"],["URI::FTP","","classes/URI/FTP.html","","<p>FTP URI syntax is defined by RFC1738 section 3.2.\n<p>This class will be redesigned because of difference …\n"],["URI::Generic","","classes/URI/Generic.html","","<p>Base class for all URI classes. Implements generic URI syntax as per RFC\n2396.\n"],["URI::HTTP","","classes/URI/HTTP.html","","<p>The syntax of HTTP URIs is defined in RFC1738 section 3.3.\n<p>Note that the Ruby URI library allows HTTP …\n"],["URI::HTTPS","","classes/URI/HTTPS.html","","<p>The default port for HTTPS URIs is 443, and the scheme is &#39;https:&#39;\nrather than &#39;http:&#39;. …\n"],["URI::InvalidComponentError","","classes/URI/InvalidComponentError.html","","<p>Not a URI component.\n"],["URI::InvalidURIError","","classes/URI/InvalidURIError.html","","<p>Not a URI.\n"],["URI::LDAP","","classes/URI/LDAP.html","","<p>LDAP URI SCHEMA (described in RFC2255)\nldap://<host>/<dn>[?<attrs>[?<scope>[?<filter>]]]\n"],["URI::LDAPS","","classes/URI/LDAPS.html","","<p>The default port for LDAPS URIs is 636, and the scheme is &#39;ldaps:&#39;\nrather than &#39;ldap:&#39;. …\n"],["URI::MailTo","","classes/URI/MailTo.html","","<p>RFC2368, The mailto URL scheme\n"],["URI::Parser","","classes/URI/Parser.html","","<p>class that Parses String&#39;s into URI&#39;s\n<p>It contains a Hash set of patterns and Regexp&#39;s that …\n"],["URI::REGEXP","","classes/URI/REGEXP.html","","<p>Includes URI::REGEXP::PATTERN\n"],["URI::REGEXP::PATTERN","","classes/URI/REGEXP/PATTERN.html","","<p>Patterns used to parse URI&#39;s\n"],["UnboundMethod","","classes/UnboundMethod.html","","<p>Ruby supports two forms of objectified methods. Class <code>Method</code>\nis used to represent methods that are associated …\n"],["Unicodeout_SampleFrame","","classes/Unicodeout_SampleFrame.html","",""],["VCS","","classes/VCS.html","",""],["VCS::GIT","","classes/VCS/GIT.html","",""],["VCS::NotFoundError","","classes/VCS/NotFoundError.html","",""],["VCS::SVN","","classes/VCS/SVN.html","",""],["Variable","","classes/Variable.html","",""],["Vector","","classes/Vector.html","","<p>The <code>Vector</code> class represents a mathematical vector, which is\nuseful in its own right, and also constitutes …\n"],["Vector::ZeroVectorError","","classes/Vector/ZeroVectorError.html","",""],["Version","","classes/Version.html","","<p>The Version class processes string versions into comparable values. A\nversion string should normally …\n"],["Version::Requirement","","classes/Version/Requirement.html","",""],["ViewIcons","","classes/ViewIcons.html","",""],["VirtualEvent","","classes/VirtualEvent.html","",""],["WEBrick","","classes/WEBrick.html","","<p>WEB server toolkit.\n<p>WEBrick is an HTTP server toolkit that can be configured as an HTTPS\nserver, a proxy …\n"],["WEBrick::AccessLog","","classes/WEBrick/AccessLog.html","","<p>AccessLog provides logging to various files in various formats.\n<p>Multiple logs may be written to at the …\n"],["WEBrick::AccessLog::AccessLogError","","classes/WEBrick/AccessLog/AccessLogError.html","","<p>Raised if a parameter such as %e, %i, %o or %n is used without fetching a\nspecific field.\n"],["WEBrick::BasicLog","","classes/WEBrick/BasicLog.html","","<p>A generic logging class\n"],["WEBrick::CGI","","classes/WEBrick/CGI.html","",""],["WEBrick::CGI::Socket","","classes/WEBrick/CGI/Socket.html","",""],["WEBrick::Config","","classes/WEBrick/Config.html","",""],["WEBrick::Cookie","","classes/WEBrick/Cookie.html","",""],["WEBrick::Daemon","","classes/WEBrick/Daemon.html","","<p>A generic module for daemonizing a process\n"],["WEBrick::FakeProxyURI","","classes/WEBrick/FakeProxyURI.html","",""],["WEBrick::GenericServer","","classes/WEBrick/GenericServer.html","",""],["WEBrick::HTMLUtils","","classes/WEBrick/HTMLUtils.html","",""],["WEBrick::HTTPAuth","","classes/WEBrick/HTTPAuth.html","","<p>HTTPAuth provides both basic and digest authentication.\n<p>To enable authentication for requests in WEBrick …\n"],["WEBrick::HTTPAuth::Authenticator","","classes/WEBrick/HTTPAuth/Authenticator.html","","<p>Module providing generic support for both Digest and Basic authentication\nschemes.\n"],["WEBrick::HTTPAuth::BasicAuth","","classes/WEBrick/HTTPAuth/BasicAuth.html","","<p>Basic Authentication for WEBrick\n<p>Use this class to add basic authentication to a WEBrick servlet.\n<p>Here …\n"],["WEBrick::HTTPAuth::DigestAuth","","classes/WEBrick/HTTPAuth/DigestAuth.html","","<p>RFC 2617 Digest Access Authentication for WEBrick\n<p>Use this class to add digest authentication to a WEBrick …\n"],["WEBrick::HTTPAuth::Htdigest","","classes/WEBrick/HTTPAuth/Htdigest.html","","<p>Htdigest accesses apache-compatible digest password files.  Passwords are\nmatched to a realm where they …\n"],["WEBrick::HTTPAuth::Htgroup","","classes/WEBrick/HTTPAuth/Htgroup.html","","<p>Htgroup accesses apache-compatible group files.  Htgroup can be used to\nprovide group-based authentication …\n"],["WEBrick::HTTPAuth::Htpasswd","","classes/WEBrick/HTTPAuth/Htpasswd.html","","<p>Htpasswd accesses apache-compatible password files.  Passwords are matched\nto a realm where they are …\n"],["WEBrick::HTTPAuth::ProxyAuthenticator","","classes/WEBrick/HTTPAuth/ProxyAuthenticator.html","","<p>Module providing generic support for both Digest and Basic authentication\nschemes for proxies.\n"],["WEBrick::HTTPAuth::ProxyBasicAuth","","classes/WEBrick/HTTPAuth/ProxyBasicAuth.html","","<p>Basic authentication for proxy servers.  See BasicAuth for details.\n"],["WEBrick::HTTPAuth::ProxyDigestAuth","","classes/WEBrick/HTTPAuth/ProxyDigestAuth.html","","<p>Digest authentication for proxy servers.  See DigestAuth for details.\n"],["WEBrick::HTTPAuth::UserDB","","classes/WEBrick/HTTPAuth/UserDB.html","","<p>User database mixin for HTTPAuth.  This mixin dispatches user record access\nto the underlying auth_type …\n"],["WEBrick::HTTPProxyServer","","classes/WEBrick/HTTPProxyServer.html","","<p>An HTTP Proxy server which proxies GET, HEAD and POST requests.\n"],["WEBrick::HTTPRequest","","classes/WEBrick/HTTPRequest.html","","<p>An HTTP request.\n"],["WEBrick::HTTPResponse","","classes/WEBrick/HTTPResponse.html","","<p>An HTTP response.\n"],["WEBrick::HTTPServer","","classes/WEBrick/HTTPServer.html","","<p>An HTTP Server\n"],["WEBrick::HTTPServer::MountTable","","classes/WEBrick/HTTPServer/MountTable.html","",""],["WEBrick::HTTPServerError","","classes/WEBrick/HTTPServerError.html","",""],["WEBrick::HTTPServlet","","classes/WEBrick/HTTPServlet.html","",""],["WEBrick::HTTPServlet::AbstractServlet","","classes/WEBrick/HTTPServlet/AbstractServlet.html","","<p>AbstractServlet allows HTTP server modules to be reused across multiple\nservers and allows encapsulation …\n"],["WEBrick::HTTPServlet::CGIHandler","","classes/WEBrick/HTTPServlet/CGIHandler.html","",""],["WEBrick::HTTPServlet::DefaultFileHandler","","classes/WEBrick/HTTPServlet/DefaultFileHandler.html","",""],["WEBrick::HTTPServlet::ERBHandler","","classes/WEBrick/HTTPServlet/ERBHandler.html","","<p>ERBHandler evaluates an ERB file and returns the result.  This handler is\nautomatically used if there …\n"],["WEBrick::HTTPServlet::FileHandler","","classes/WEBrick/HTTPServlet/FileHandler.html","","<p>Serves files from a directory\n"],["WEBrick::HTTPServlet::HTTPServletError","","classes/WEBrick/HTTPServlet/HTTPServletError.html","",""],["WEBrick::HTTPServlet::ProcHandler","","classes/WEBrick/HTTPServlet/ProcHandler.html","",""],["WEBrick::HTTPStatus","","classes/WEBrick/HTTPStatus.html","","<p>This module is used to manager HTTP status codes.\n<p>See www.w3.org/Protocols/rfc2616/rfc2616-sec10.html …\n"],["WEBrick::HTTPStatus::ClientError","","classes/WEBrick/HTTPStatus/ClientError.html","","<p>Root of the HTTP client error statuses\n"],["WEBrick::HTTPStatus::EOFError","","classes/WEBrick/HTTPStatus/EOFError.html","",""],["WEBrick::HTTPStatus::Error","","classes/WEBrick/HTTPStatus/Error.html","","<p>Root of the HTTP error statuses\n"],["WEBrick::HTTPStatus::Info","","classes/WEBrick/HTTPStatus/Info.html","","<p>Root of the HTTP info statuses\n"],["WEBrick::HTTPStatus::Redirect","","classes/WEBrick/HTTPStatus/Redirect.html","","<p>Root of the HTTP redirect statuses\n"],["WEBrick::HTTPStatus::ServerError","","classes/WEBrick/HTTPStatus/ServerError.html","","<p>Root of the HTTP server error statuses\n"],["WEBrick::HTTPStatus::Status","","classes/WEBrick/HTTPStatus/Status.html","","<p>Root of the HTTP status class hierarchy\n"],["WEBrick::HTTPStatus::Success","","classes/WEBrick/HTTPStatus/Success.html","","<p>Root of the HTTP sucess statuses\n"],["WEBrick::HTTPUtils","","classes/WEBrick/HTTPUtils.html","",""],["WEBrick::HTTPUtils::FormData","","classes/WEBrick/HTTPUtils/FormData.html","",""],["WEBrick::HTTPVersion","","classes/WEBrick/HTTPVersion.html","",""],["WEBrick::Log","","classes/WEBrick/Log.html","","<p>A logging class that prepends a timestamp to each message.\n"],["WEBrick::NullReader","","classes/WEBrick/NullReader.html","",""],["WEBrick::ServerError","","classes/WEBrick/ServerError.html","",""],["WEBrick::SimpleServer","","classes/WEBrick/SimpleServer.html","",""],["WEBrick::Utils","","classes/WEBrick/Utils.html","",""],["WEBrick::Utils::TimeoutHandler","","classes/WEBrick/Utils/TimeoutHandler.html","","<p>Class used to manage timeout handlers across multiple threads.\n<p>Timeout handlers should be managed by using …\n"],["WIN32COMGen","","classes/WIN32COMGen.html","",""],["WIN32OLE","","classes/WIN32OLE.html","","\n<pre><code>&lt;code&gt;WIN32OLE&lt;/code&gt; objects represent OLE Automation object in Ruby.\n\nBy using WIN32OLE, you can access ...</code></pre>\n"],["WIN32OLE::VARIANT","","classes/WIN32OLE/VARIANT.html","",""],["WIN32OLERuntimeError","","classes/WIN32OLERuntimeError.html","",""],["WIN32OLE_EVENT","","classes/WIN32OLE_EVENT.html","","<p><code>WIN32OLE_EVENT</code> objects controls OLE event.\n"],["WIN32OLE_METHOD","","classes/WIN32OLE_METHOD.html","","<p><code>WIN32OLE_METHOD</code> objects represent OLE method information.\n"],["WIN32OLE_PARAM","","classes/WIN32OLE_PARAM.html","","<p><code>WIN32OLE_PARAM</code> objects represent param information of the OLE\nmethod.\n"],["WIN32OLE_TYPE","","classes/WIN32OLE_TYPE.html","","<p><code>WIN32OLE_TYPE</code> objects represent OLE type libarary information.\n"],["WIN32OLE_TYPELIB","","classes/WIN32OLE_TYPELIB.html","","<p><code>WIN32OLE_TYPELIB</code> objects represent OLE tyblib information.\n"],["WIN32OLE_VARIABLE","","classes/WIN32OLE_VARIABLE.html","","<p><code>WIN32OLE_VARIABLE</code> objects represent OLE variable information.\n"],["WIN32OLE_VARIANT","","classes/WIN32OLE_VARIANT.html","",""],["WeakRef","","classes/WeakRef.html","","<p>Weak Reference class that allows a referenced object to be\ngarbage-collected.  A WeakRef may be used …\n"],["WeakRef::RefError","","classes/WeakRef/RefError.html","","<p>RefError is raised when a referenced object has been recycled by the\ngarbage collector\n"],["Win32","","classes/Win32.html","","<p>Implements bindings to Win32 SSPI functions, focused on authentication to a\nproxy server over HTTP.\n"],["Win32::Registry","","classes/Win32/Registry.html","","<p>Win32 Registry\n<p>win32/registry is registry accessor library for Win32 platform. It uses\ndl/import to call …\n"],["Win32::Registry::API","","classes/Win32/Registry/API.html","","<p>Win32 APIs\n"],["Win32::Registry::Constants","","classes/Win32/Registry/Constants.html","","<p>For detail, see the MSDN.\n<p>— HKEY_*\n\n<pre><code>Predefined key ((*handle*)).\nThese are Integer, not Win32::Registry.</code></pre>\n"],["Win32::Registry::Error","","classes/Win32/Registry/Error.html","","<p>Error\n"],["Win32::Registry::Error::Kernel32","","classes/Win32/Registry/Error/Kernel32.html","",""],["Win32::Registry::PredefinedKey","","classes/Win32/Registry/PredefinedKey.html","","<p>Predefined Keys\n"],["Win32::Resolv","","classes/Win32/Resolv.html","",""],["Win32::Resolv::Kernel32","","classes/Win32/Resolv/Kernel32.html","",""],["Win32::SSPI","","classes/Win32/SSPI.html","",""],["Win32::SSPI::API","","classes/Win32/SSPI/API.html","","<p>Win32 API Functions. Uses Win32API to bind methods to constants contained\nin class.\n"],["Win32::SSPI::Identity","","classes/Win32/SSPI/Identity.html","","<p>SEC_WINNT_AUTH_IDENTITY structure\n"],["Win32::SSPI::NegotiateAuth","","classes/Win32/SSPI/NegotiateAuth.html","","<p>Handles “Negotiate” type authentication. Geared towards authenticating with\na proxy server …\n"],["Win32::SSPI::SSPIResult","","classes/Win32/SSPI/SSPIResult.html","","<p>Takes a return result from an SSPI function and interprets the value.\n"],["Win32::SSPI::SecurityBuffer","","classes/Win32/SSPI/SecurityBuffer.html","","<p>Creates binary representaiton of a SecBufferDesc structure, including the\nSecBuffer contained inside. …\n"],["Win32::SSPI::SecurityHandle","","classes/Win32/SSPI/SecurityHandle.html","","<p>SecHandle struct\n"],["Win32::SSPI::TimeStamp","","classes/Win32/SSPI/TimeStamp.html","","<p>TimeStamp struct\n"],["Win32API","","classes/Win32API.html","",""],["WindowItem","","classes/WindowItem.html","",""],["Winfo","","classes/Winfo.html","",""],["X509","","classes/X509.html","",""],["XML","","classes/XML.html","",""],["XML::Parser","","classes/XML/Parser.html","",""],["XMLEncoding_ja","","classes/XMLEncoding_ja.html","",""],["XMLEncoding_ja::SJISHandler","","classes/XMLEncoding_ja/SJISHandler.html","",""],["XMLRPC","","classes/XMLRPC.html","","<p>xmlrpc/base64.rb\n<p>Copyright (C) 2001, 2002, 2003 by Michael Neumann (mneumann@ntecs.de)\n<p>Released under the …\n"],["XMLRPC::Base64","","classes/XMLRPC/Base64.html","",""],["XMLRPC::BasicServer","","classes/XMLRPC/BasicServer.html","",""],["XMLRPC::CGIServer","","classes/XMLRPC/CGIServer.html","","<p>XMLRPC::CGIServer\n<p>Synopsis\n\n<pre><code>require &quot;xmlrpc/server&quot;\n\ns = XMLRPC::CGIServer.new\n\ns.add_handler(&quot;michael.add&quot;) ...\n</code></pre>\n"],["XMLRPC::Client","","classes/XMLRPC/Client.html","",""],["XMLRPC::Client::Proxy","","classes/XMLRPC/Client/Proxy.html","",""],["XMLRPC::Config","","classes/XMLRPC/Config.html","",""],["XMLRPC::Convert","","classes/XMLRPC/Convert.html","",""],["XMLRPC::Create","","classes/XMLRPC/Create.html","",""],["XMLRPC::DateTime","","classes/XMLRPC/DateTime.html","",""],["XMLRPC::FaultException","","classes/XMLRPC/FaultException.html","",""],["XMLRPC::Marshal","","classes/XMLRPC/Marshal.html","",""],["XMLRPC::Marshallable","","classes/XMLRPC/Marshallable.html","","<p>This module enables a user-class to be marshalled by XML-RPC for Ruby into\na Hash, with one additional …\n"],["XMLRPC::ModRubyServer","","classes/XMLRPC/ModRubyServer.html","","<p>XMLRPC::ModRubyServer\n<p>Description\n<p>Implements a XML-RPC server, which works with Apache mod_ruby.\n"],["XMLRPC::ParseContentType","","classes/XMLRPC/ParseContentType.html","",""],["XMLRPC::ParserWriterChooseMixin","","classes/XMLRPC/ParserWriterChooseMixin.html","",""],["XMLRPC::Server","","classes/XMLRPC/Server.html","",""],["XMLRPC::Service","","classes/XMLRPC/Service.html","",""],["XMLRPC::Service::BasicInterface","","classes/XMLRPC/Service/BasicInterface.html","","<p>base class for Service Interface definitions, used by\nBasicServer#add_handler\n"],["XMLRPC::Service::Interface","","classes/XMLRPC/Service/Interface.html","","<p>class which wraps a Service Interface definition, used by\nBasicServer#add_handler\n"],["XMLRPC::Service::PublicInstanceMethodsInterface","","classes/XMLRPC/Service/PublicInstanceMethodsInterface.html","",""],["XMLRPC::WEBrickServlet","","classes/XMLRPC/WEBrickServlet.html","","<p>XMLRPC::WEBrickServlet\n<p>Synopsis\n\n<pre><code>require &quot;webrick&quot;\nrequire &quot;xmlrpc/server&quot;\n\ns = XMLRPC::WEBrickServlet.new ...\n</code></pre>\n"],["XMLRPC::XMLParser","","classes/XMLRPC/XMLParser.html","",""],["XMLRPC::XMLParser::AbstractStreamParser","","classes/XMLRPC/XMLParser/AbstractStreamParser.html","",""],["XMLRPC::XMLParser::AbstractTreeParser","","classes/XMLRPC/XMLParser/AbstractTreeParser.html","",""],["XMLRPC::XMLParser::NQXMLParser","","classes/XMLRPC/XMLParser/NQXMLTreeParser.html","",""],["XMLRPC::XMLParser::NQXMLStreamParser","","classes/XMLRPC/XMLParser/NQXMLStreamParser.html","",""],["XMLRPC::XMLParser::NQXMLStreamParser::XMLRPCParser","","classes/XMLRPC/XMLParser/NQXMLStreamParser/XMLRPCParser.html","",""],["XMLRPC::XMLParser::NQXMLTreeParser","","classes/XMLRPC/XMLParser/NQXMLTreeParser.html","",""],["XMLRPC::XMLParser::REXMLStreamParser","","classes/XMLRPC/XMLParser/REXMLStreamParser.html","",""],["XMLRPC::XMLParser::REXMLStreamParser::StreamListener","","classes/XMLRPC/XMLParser/REXMLStreamParser/StreamListener.html","",""],["XMLRPC::XMLParser::StreamParserMixin","","classes/XMLRPC/XMLParser/StreamParserMixin.html","",""],["XMLRPC::XMLParser::XMLParser","","classes/XMLRPC/XMLParser/XMLTreeParser.html","",""],["XMLRPC::XMLParser::XMLScanStreamParser","","classes/XMLRPC/XMLParser/XMLScanStreamParser.html","",""],["XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html","",""],["XMLRPC::XMLParser::XMLStreamParser","","classes/XMLRPC/XMLParser/XMLStreamParser.html","",""],["XMLRPC::XMLParser::XMLTreeParser","","classes/XMLRPC/XMLParser/XMLTreeParser.html","",""],["XMLRPC::XMLWriter","","classes/XMLRPC/XMLWriter.html","",""],["XMLRPC::XMLWriter::Abstract","","classes/XMLRPC/XMLWriter/Abstract.html","",""],["XMLRPC::XMLWriter::Simple","","classes/XMLRPC/XMLWriter/Simple.html","",""],["XMLRPC::XMLWriter::XMLParser","","classes/XMLRPC/XMLWriter/XMLParser.html","",""],["XMP","","classes/XMP.html","",""],["XMP::StringInputMethod","","classes/XMP/StringInputMethod.html","",""],["YAML","","classes/YAML.html","","<p>YAML Ain&#39;t Markup Language\n<p>This module provides a Ruby interface for data serialization in YAML\nformat. …\n"],["YAML::DBM","","classes/YAML/DBM.html","","<p>YAML + DBM = YDBM\n<p>YAML::DBM provides the same interface as ::DBM.\n<p>However, while DBM only allows strings …\n"],["YAML::Store","","classes/YAML/Store.html","","<p>YAML::Store provides the same functionality as PStore, except it uses YAML\nto dump objects instead of …\n"],["ZeroDivisionError","","classes/ZeroDivisionError.html","","<p>Raised when attempting to divide an integer by 0.\n\n<pre><code>42 / 0</code></pre>\n<p><em>raises the exception:</em>\n"],["Zlib","","classes/Zlib.html","","<p>Overview\n<p>Access to the zlib library.\n<p>Class tree\n"],["Zlib::BufError","","classes/Zlib/BufError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_BUF_ERROR.\n<p>Usually if no progress is possible.\n"],["Zlib::DataError","","classes/Zlib/DataError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_DATA_ERROR.\n<p>Usually if a stream was prematurely freed.\n"],["Zlib::Deflate","","classes/Zlib/Deflate.html","","<p>Zlib::Deflate is the class for compressing data.  See Zlib::ZStream for\nmore information.\n"],["Zlib::Error","","classes/Zlib/Error.html","","<p>The superclass for all exceptions raised by Ruby/zlib.\n<p>The following exceptions are defined as subclasses …\n"],["Zlib::GzipFile","","classes/Zlib/GzipFile.html","","<p>Zlib::GzipFile is an abstract class for handling a gzip formatted\ncompressed file. The operations are …\n"],["Zlib::GzipFile::CRCError","","classes/Zlib/GzipFile/CRCError.html","","<p>Raised when the CRC checksum recorded in gzip file footer is not equivalent\nto the CRC checksum of the …\n"],["Zlib::GzipFile::Error","","classes/Zlib/GzipFile/Error.html","","<p>Base class of errors that occur when processing GZIP files.\n"],["Zlib::GzipFile::LengthError","","classes/Zlib/GzipFile/LengthError.html","","<p>Raised when the data length recorded in the gzip file footer is not\nequivalent to the length of the actual …\n"],["Zlib::GzipFile::NoFooter","","classes/Zlib/GzipFile/NoFooter.html","","<p>Raised when gzip file footer is not found.\n"],["Zlib::GzipReader","","classes/Zlib/GzipReader.html","","<p>Zlib::GzipReader is the class for reading a gzipped file.  GzipReader\nshould be used an IO, or -IO-lie, …\n"],["Zlib::GzipWriter","","classes/Zlib/GzipWriter.html","","<p>Zlib::GzipWriter is a class for writing gzipped files.  GzipWriter should\nbe used with an instance of …\n"],["Zlib::Inflate","","classes/Zlib/Inflate.html","","<p>Zlib:Inflate is the class for decompressing compressed data.  Unlike\nZlib::Deflate, an instance of this …\n"],["Zlib::MemError","","classes/Zlib/MemError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_MEM_ERROR, usually if there was not enough memory.\n"],["Zlib::NeedDict","","classes/Zlib/NeedDict.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_NEED_DICT if a preset dictionary is needed at this\npoint. …\n"],["Zlib::StreamEnd","","classes/Zlib/StreamEnd.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_END is return if the end of the compressed\ndata has …\n"],["Zlib::StreamError","","classes/Zlib/StreamError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_ERROR, usually if the stream state was\ninconsistent. …\n"],["Zlib::VersionError","","classes/Zlib/VersionError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_VERSION_ERROR, usually if the zlib library version is\nincompatible …\n"],["Zlib::ZStream","","classes/Zlib/ZStream.html","","<p>Zlib::ZStream is the abstract class for the stream which handles the\ncompressed data. The operations …\n"],["fatal","","classes/fatal.html","","<p>fatal is an Exception that is raised when ruby has encountered a fatal\nerror and must exit.  You are …\n"],["unknown","","classes/unknown.html","",""],["unknown","","classes/unknown.html","",""],["!","BasicObject","classes/BasicObject.html#method-i-21","()","<p>Boolean negate.\n"],["!","Delegator","classes/Delegator.html#method-i-21","()",""],["!=","BasicObject","classes/BasicObject.html#method-i-21-3D","(p1)","<p>Returns true if two objects are not-equal, otherwise false.\n"],["!=","Delegator","classes/Delegator.html#method-i-21-3D","(obj)","<p>Returns true if two objects are not considered of equal value.\n"],["!~","Object","classes/Object.html#method-i-21-7E","(p1)","<p>Returns true if two objects do not match (using the <em>=~</em> method),\notherwise false.\n"],["%","BigDecimal","classes/BigDecimal.html#method-i-25","(p1)","<p>Returns the modulus from dividing by b. See divmod.\n"],["%","Bignum","classes/Bignum.html#method-i-25","(p1)","<p>Returns big modulo other. See Numeric.divmod for more information.\n"],["%","Fixnum","classes/Fixnum.html#method-i-25","(p1)","<p>Returns <code>fix</code> modulo <code>other</code>. See\n<code>numeric.divmod</code> for more information.\n"],["%","Float","classes/Float.html#method-i-25","(p1)","<p>Return the modulo after division of <code>flt</code> by <code>other</code>.\n\n<pre><code>6543.21.modulo(137)      #=&gt; 104.21\n6543.21.modulo(137.24) ...\n</code></pre>\n"],["%","Numeric","classes/Numeric.html#method-i-25","(p1)","\n<pre><code>x.modulo(y) means x-y*(x/y).floor</code></pre>\n<p>Equivalent to <em>num.divmod(aNumeric)</em>.\n<p>See <code>Numeric#divmod</code>.\n"],["%","STRING_OR_FAILED_FORMAT","classes/STRING_OR_FAILED_FORMAT.html#method-c-25","(x)",""],["%","String","classes/String.html#method-i-25","(p1)","<p>Format—Uses <em>str</em> as a format specification, and returns the result\nof applying it to <em>arg</em>. If the format …\n"],["%","TkVariable","classes/TkVariable.html#method-i-25","(other)",""],["%","TkVariable","classes/TkVariable.html#method-i-25","(other)",""],["&","Array","classes/Array.html#method-i-26","(p1)","<p>Set Intersection—Returns a new array containing elements common to the two\narrays, with no duplicates. …\n"],["&","Bignum","classes/Bignum.html#method-i-26","(p1)","<p>Performs bitwise <code>and</code> between <em>big</em> and\n<em>numeric</em>.\n"],["&","FalseClass","classes/FalseClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","Fixnum","classes/Fixnum.html#method-i-26","(p1)","<p>Bitwise AND.\n"],["&","IPAddr","classes/IPAddr.html#method-i-26","(other)","<p>Returns a new ipaddr built by bitwise AND.\n"],["&","NilClass","classes/NilClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","Process::Status","classes/Process/Status.html#method-i-26","(p1)","<p>Logical AND of the bits in <em>stat</em> with <em>num</em>.\n\n<pre><code>fork { exit 0x37 }\nProcess.wait\nsprintf(&#39;%04x&#39;, $?.to_i)    ...</code></pre>\n"],["&","Set","classes/Set.html#method-i-26","(enum)","<p>Returns a new set containing elements common to the set and the given\nenumerable object.\n"],["&","TkVariable","classes/TkVariable.html#method-i-26","(other)",""],["&","TkVariable","classes/TkVariable.html#method-i-26","(other)",""],["&","TkcTagAccess","classes/TkcTagAccess.html#method-i-26","(tag)","<p>Following operators support logical expressions of canvas tags (for\nTk8.3+). If tag1.path is &#39;t1&#39; …\n"],["&","TrueClass","classes/TrueClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>, <code>true</code> otherwise.\n"],["*","Array","classes/Array.html#method-i-2A","(p1)","<p>Repetition—With a String argument, equivalent to self.join(str). Otherwise,\nreturns a new array built …\n"],["*","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-2A","(x)","<p>Returns a new Tms object obtained by memberwise multiplication of the\nindividual times for this Tms object …\n"],["*","BigDecimal","classes/BigDecimal.html#method-i-2A","(p1)","<p>Multiply by the specified value.\n<p>e.g.\n\n<pre><code>c = a.mult(b,n)\nc = a * b</code></pre>\n"],["*","Bignum","classes/Bignum.html#method-i-2A","(p1)","<p>Multiplies big and other, returning the result.\n"],["*","Complex","classes/Complex.html#method-i-2A","(p1)","<p>Performs multiplication.\n"],["*","Fixnum","classes/Fixnum.html#method-i-2A","(p1)","<p>Performs multiplication: the class of the resulting object depends on the\nclass of <code>numeric</code> and on the …\n"],["*","Float","classes/Float.html#method-i-2A","(p1)","<p>Returns a new float which is the product of <code>float</code> and\n<code>other</code>.\n"],["*","Matrix","classes/Matrix.html#method-i-2A","(m)","<p>Matrix multiplication.\n\n<pre><code>Matrix[[2,4], [6,8]] * Matrix.identity(2)\n  =&gt; 2 4\n     6 8\n</code></pre>\n"],["*","Rake::FileList","classes/Rake/FileList.html#method-i-2A","(other)","<p>Redefine * to return either a string or a new file list.\n"],["*","Rational","classes/Rational.html#method-i-2A","(p1)","<p>Performs multiplication.\n<p>For example:\n\n<pre><code>Rational(2, 3)  * Rational(2, 3)   #=&gt; (4/9)\nRational(900)   * Rational(1) ...\n</code></pre>\n"],["*","String","classes/String.html#method-i-2A","(p1)","<p>Copy—Returns a new <code>String</code> containing <em>integer</em> copies\nof the receiver.\n\n<pre><code>&quot;Ho! &quot; * 3   #=&gt; &quot;Ho! Ho! Ho! &quot;\n</code></pre>\n"],["*","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-2A","(item)",""],["*","TkVariable","classes/TkVariable.html#method-i-2A","(other)",""],["*","TkVariable","classes/TkVariable.html#method-i-2A","(other)",""],["*","Vector","classes/Vector.html#method-i-2A","(x)","<p>Multiplies the vector by <code>x</code>, where <code>x</code> is a number\nor another vector.\n"],["**","BigDecimal","classes/BigDecimal.html#method-i-2A-2A","(p1)","<p>It is a synonym of big_decimal.power(exp).\n"],["**","Bignum","classes/Bignum.html#method-i-2A-2A","(p1)","<p>Raises <em>big</em> to the <em>exponent</em> power (which may be an\ninteger, float, or anything that will coerce to a number). …\n"],["**","Complex","classes/Complex.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n<p>For example:\n\n<pre><code>Complex(&#39;i&#39;) ** 2             #=&gt; (-1+0i)\nComplex(-8) ** Rational(1,3) ...\n</code></pre>\n"],["**","Fixnum","classes/Fixnum.html#method-i-2A-2A","(other)","<p>Exponentiate by <code>other</code>\n"],["**","Float","classes/Float.html#method-i-2A-2A","(other)","<p>Exponentiate by <code>other</code>\n"],["**","Matrix","classes/Matrix.html#method-i-2A-2A","(other)","<p>Matrix exponentiation. Equivalent to multiplying the matrix by itself N\ntimes. Non integer exponents …\n"],["**","Rational","classes/Rational.html#method-i-2A-2A","(other)","<p>Exponentiate by <code>other</code>\n\n<pre><code>(1/3) ** 2 # =&gt; 1/9\n</code></pre>\n"],["**","TkVariable","classes/TkVariable.html#method-i-2A-2A","(other)",""],["**","TkVariable","classes/TkVariable.html#method-i-2A-2A","(other)",""],["+","Array","classes/Array.html#method-i-2B","(p1)","<p>Concatenation—Returns a new array built by concatenating the two arrays\ntogether to produce a third …\n"],["+","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-2B","(other)","<p>Returns a new Tms object obtained by memberwise summation of the individual\ntimes for this Tms object …\n"],["+","BigDecimal","classes/BigDecimal.html#method-i-2B","(p1)","<p>Add the specified value.\n<p>e.g.\n\n<pre><code>c = a.add(b,n)\nc = a + b</code></pre>\n"],["+","Bignum","classes/Bignum.html#method-i-2B","(p1)","<p>Adds big and other, returning the result.\n"],["+","Complex","classes/Complex.html#method-i-2B","(p1)","<p>Performs addition.\n"],["+","DL::CPtr","classes/DL/CPtr.html#method-i-2B","(p1)","<p>Returns a new DL::CPtr that has been advanced <code>n</code> bytes.\n"],["+","DL::CPtr","classes/DL/CPtr.html#method-i-2B","(p1)","<p>Returns a new DL::CPtr that has been advanced <code>n</code> bytes.\n"],["+","Date","classes/Date.html#method-i-2B","(p1)","<p>Returns a date object pointing other days after self.  The other should be\na numeric value.  If the other …\n"],["+","Fixnum","classes/Fixnum.html#method-i-2B","(p1)","<p>Performs addition: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["+","Float","classes/Float.html#method-i-2B","(p1)","<p>Returns a new float which is the sum of <code>float</code> and\n<code>other</code>.\n"],["+","Matrix","classes/Matrix.html#method-i-2B","(m)","<p>Matrix addition.\n\n<pre><code>Matrix.scalar(2,5) + Matrix[[1,0], [-4,7]]\n  =&gt;  6  0\n     -4 12\n</code></pre>\n"],["+","Pathname","classes/Pathname.html#method-i-2B","(other)","<p>Pathname#+ appends a pathname fragment to this one to produce a new\nPathname object.\n\n<pre><code>p1 = Pathname.new(&quot;/usr&quot;) ...</code></pre>\n"],["+","Rational","classes/Rational.html#method-i-2B","(p1)","<p>Performs addition.\n<p>For example:\n\n<pre><code>Rational(2, 3)  + Rational(2, 3)   #=&gt; (4/3)\nRational(900)   + Rational(1) ...\n</code></pre>\n"],["+","Set","classes/Set.html#method-i-2B","(enum)",""],["+","Shell::Filter","classes/Shell/Filter.html#method-i-2B","(filter)",""],["+","String","classes/String.html#method-i-2B","(p1)","<p>Concatenation—Returns a new <code>String</code> containing\n<em>other_str</em> concatenated to <em>str</em>.\n\n<pre><code>&quot;Hello from &quot; + self.to_s ...</code></pre>\n"],["+","Time","classes/Time.html#method-i-2B","(p1)","<p>Addition—Adds some number of seconds (possibly fractional) to <em>time</em>\nand returns that value as a new …\n"],["+","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-2B","(item)",""],["+","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-2B","(hash)",""],["+","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-2B","(mod)",""],["+","TkVariable","classes/TkVariable.html#method-i-2B","(other)",""],["+","TkVariable","classes/TkVariable.html#method-i-2B","(other)",""],["+","URI::Generic","classes/URI/Generic.html#method-i-2B","(oth)",""],["+","Vector","classes/Vector.html#method-i-2B","(v)","<p>Vector addition.\n"],["+@","BigDecimal","classes/BigDecimal.html#method-i-2B-40","()",""],["+@","DL::CPtr","classes/DL/CPtr.html#method-i-2B-40","()","<p>Returns a DL::CPtr that is a dereferenced pointer for this DL::CPtr.\nAnalogous to the star operator in …\n"],["+@","DL::CPtr","classes/DL/CPtr.html#method-i-2B-40","()","<p>Returns a DL::CPtr that is a dereferenced pointer for this DL::CPtr.\nAnalogous to the star operator in …\n"],["+@","Numeric","classes/Numeric.html#method-i-2B-40","()","<p>Unary Plus—Returns the receiver&#39;s value.\n"],["+@","TkVariable","classes/TkVariable.html#method-i-2B-40","()",""],["+@","TkVariable","classes/TkVariable.html#method-i-2B-40","()",""],["-","Array","classes/Array.html#method-i-2D","(p1)","<p>Array Difference—Returns a new array that is a copy of the original array,\nremoving any items that …\n"],["-","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-2D","(other)","<p>Returns a new Tms object obtained by memberwise subtraction of the\nindividual times for the other Tms …\n"],["-","BigDecimal","classes/BigDecimal.html#method-i-2D","(p1)","<p>Subtract the specified value.\n<p>e.g.\n\n<pre><code>c = a.sub(b,n)\nc = a - b</code></pre>\n"],["-","Bignum","classes/Bignum.html#method-i-2D","(p1)","<p>Subtracts other from big, returning the result.\n"],["-","Complex","classes/Complex.html#method-i-2D","(p1)","<p>Performs subtraction.\n"],["-","DL::CPtr","classes/DL/CPtr.html#method-i-2D","(p1)","<p>Returns a new DL::CPtr that has been moved back <code>n</code> bytes.\n"],["-","DL::CPtr","classes/DL/CPtr.html#method-i-2D","(p1)","<p>Returns a new DL::CPtr that has been moved back <code>n</code> bytes.\n"],["-","Date","classes/Date.html#method-i-2D","(p1)","<p>Returns the difference between the two dates if the other is a date object.\nIf the other is a numeric …\n"],["-","Fixnum","classes/Fixnum.html#method-i-2D","(p1)","<p>Performs subtraction: the class of the resulting object depends on the\nclass of <code>numeric</code> and on the magnitude …\n"],["-","Float","classes/Float.html#method-i-2D","(p1)","<p>Returns a new float which is the difference of <code>float</code> and\n<code>other</code>.\n"],["-","Matrix","classes/Matrix.html#method-i-2D","(m)","<p>Matrix subtraction.\n\n<pre><code>Matrix[[1,5], [4,2]] - Matrix[[9,3], [-4,1]]\n  =&gt; -8  2\n      8  1\n</code></pre>\n"],["-","Rational","classes/Rational.html#method-i-2D","(p1)","<p>Performs subtraction.\n<p>For example:\n\n<pre><code>Rational(2, 3)  - Rational(2, 3)   #=&gt; (0/1)\nRational(900)   - Rational(1) ...\n</code></pre>\n"],["-","Set","classes/Set.html#method-i-2D","(enum)","<p>Returns a new set built by duplicating the set, removing every element that\nappears in the given enumerable …\n"],["-","Time","classes/Time.html#method-i-2D","(p1)","<p>Difference—Returns a new time that represents the difference between two\ntimes, or subtracts the given …\n"],["-","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-2D","(item)",""],["-","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-2D","(mod)",""],["-","TkVariable","classes/TkVariable.html#method-i-2D","(other)",""],["-","TkVariable","classes/TkVariable.html#method-i-2D","(other)",""],["-","URI::Generic","classes/URI/Generic.html#method-i-2D","(oth)",""],["-","Vector","classes/Vector.html#method-i-2D","(v)","<p>Vector subtraction.\n"],["-@","BigDecimal","classes/BigDecimal.html#method-i-2D-40","()",""],["-@","Bignum","classes/Bignum.html#method-i-2D-40","()","<p>Unary minus (returns an integer whose value is 0-big)\n"],["-@","Complex","classes/Complex.html#method-i-2D-40","()","<p>Returns negation of the value.\n"],["-@","DL::CPtr","classes/DL/CPtr.html#method-i-2D-40","()","<p>Returns a DL::CPtr that is a reference pointer for this DL::CPtr. Analogous\nto the ampersand operator …\n"],["-@","DL::CPtr","classes/DL/CPtr.html#method-i-2D-40","()","<p>Returns a DL::CPtr that is a reference pointer for this DL::CPtr. Analogous\nto the ampersand operator …\n"],["-@","Fixnum","classes/Fixnum.html#method-i-2D-40","()","<p>Negates <code>fix</code> (which might return a Bignum).\n"],["-@","Float","classes/Float.html#method-i-2D-40","()","<p>Returns float, negated.\n"],["-@","Numeric","classes/Numeric.html#method-i-2D-40","()","<p>Unary Minus—Returns the receiver&#39;s value, negated.\n"],["-@","TkVariable","classes/TkVariable.html#method-i-2D-40","()",""],["-@","TkVariable","classes/TkVariable.html#method-i-2D-40","()",""],["-@","TkcTagAccess","classes/TkcTagAccess.html#method-i-2D-40","()",""],["/","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-2F","(x)","<p>Returns a new Tms object obtained by memberwise division of the individual\ntimes for this Tms object …\n"],["/","BigDecimal","classes/BigDecimal.html#method-i-2F","(p1)","<p>Divide by the specified value.\n<p>e.g.\n\n<pre><code>c = a.div(b,n)</code></pre>\n"],["/","Bignum","classes/Bignum.html#method-i-2F","(p1)","<p>Performs division: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["/","Complex","classes/Complex.html#method-i-2F","(p1)","<p>Performs division.\n<p>For example:\n\n<pre><code>Complex(10.0) / 3  #=&gt; (3.3333333333333335+(0/1)*i)\nComplex(10)   / 3  ...\n</code></pre>\n"],["/","Fixnum","classes/Fixnum.html#method-i-2F","(p1)","<p>Performs division: the class of the resulting object depends on the class\nof <code>numeric</code> and on the magnitude …\n"],["/","Float","classes/Float.html#method-i-2F","(p1)","<p>Returns a new float which is the result of dividing <code>float</code> by\n<code>other</code>.\n"],["/","Matrix","classes/Matrix.html#method-i-2F","(other)","<p>Matrix division (multiplication by the inverse).\n\n<pre><code>Matrix[[7,6], [3,9]] / Matrix[[2,9], [3,1]]\n  =&gt; -7  ...\n</code></pre>\n"],["/","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-2F","(p1)",""],["/","Rational","classes/Rational.html#method-i-2F","(p1)","<p>Performs division.\n<p>For example:\n\n<pre><code>Rational(2, 3)  / Rational(2, 3)   #=&gt; (1/1)\nRational(900)   / Rational(1) ...\n</code></pre>\n"],["/","String","classes/String.html#method-i-2F","(p1 = v1, p2 = v2)",""],["/","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-2F","(item)",""],["/","TkVariable","classes/TkVariable.html#method-i-2F","(other)",""],["/","TkVariable","classes/TkVariable.html#method-i-2F","(other)",""],["/","Vector","classes/Vector.html#method-i-2F","(x)","<p>Vector division.\n"],["<","BigDecimal","classes/BigDecimal.html#method-i-3C","(p1)","<p>Returns true if a is less than b. Values may be coerced to perform the\ncomparison (see ==, coerce).\n"],["<","Bignum","classes/Bignum.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>big</code> is less than\nthat of <code>real</code>.\n"],["<","Comparable","classes/Comparable.html#method-i-3C","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns -1.\n"],["<","Fixnum","classes/Fixnum.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>fix</code> is less than\nthat of <code>real</code>.\n"],["<","Float","classes/Float.html#method-i-3C","(p1)","<p><code>true</code> if <code>flt</code> is less than <code>real</code>.\n"],["<","Module","classes/Module.html#method-i-3C","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em>. Returns\n<code>nil</code> if there&#39;s no relationship between the two. …\n"],["<","Shell::Filter","classes/Shell/Filter.html#method-i-3C","(src)",""],["<<","Array","classes/Array.html#method-i-3C-3C","(p1)","<p>Append—Pushes the given object on to the end of this array. This expression\nreturns the array itself, …\n"],["<<","Bignum","classes/Bignum.html#method-i-3C-3C","(p1)","<p>Shifts big left <em>numeric</em> positions (right if <em>numeric</em> is\nnegative).\n"],["<<","CSV","classes/CSV.html#method-i-3C-3C","(row)","<p>The primary write method for wrapped Strings and IOs, <code>row</code> (an\nArray or CSV::Row) is converted to CSV …\n"],["<<","CSV::Row","classes/CSV/Row.html#method-i-3C-3C","(arg)","<p>If a two-element Array is provided, it is assumed to be a header and field\nand the pair is appended. …\n"],["<<","CSV::Table","classes/CSV/Table.html#method-i-3C-3C","(row_or_array)","<p>Adds a new row to the bottom end of this table.  You can provide an Array,\nwhich will be converted to …\n"],["<<","Curses::Window","classes/Curses/Window.html#method-i-3C-3C","(p1)","<p>&lt;&lt;\n<p>Add String <code>str</code> to the current string.\n<p>See also Curses::Window.addstr\n"],["<<","Date","classes/Date.html#method-i-3C-3C","(p1)","<p>Returns a date object pointing n months before self.  The n should be a\nnumeric value.\n<p>For example:\n\n<pre><code>Date.new(2001,2,3) ...</code></pre>\n"],["<<","Digest::HMAC","classes/Digest/HMAC.html#method-i-3C-3C","(text)",""],["<<","Digest::Instance","classes/Digest/Instance.html#method-i-3C-3C","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["<<","Digest::SHA2","classes/Digest/SHA2.html#method-i-3C-3C","(str)",""],["<<","Fixnum","classes/Fixnum.html#method-i-3C-3C","(p1)","<p>Shifts <em>fix</em> left <em>count</em> positions (right if <em>count</em>\nis negative).\n"],["<<","IO","classes/IO.html#method-i-3C-3C","(p1)","<p>String Output—Writes <em>obj</em> to <em>ios</em>. <em>obj</em> will be\nconverted to a string using <code>to_s</code>.\n\n<pre><code>$stdout &lt;&lt; &quot;Hello &quot; &lt;&lt; ...</code></pre>\n"],["<<","IO::writable","classes/IO/writable.html#method-i-3C-3C","(p1)","<p>See IO#<<.\n"],["<<","IPAddr","classes/IPAddr.html#method-i-3C-3C","(num)","<p>Returns a new ipaddr built by bitwise left shift.\n"],["<<","Logger","classes/Logger.html#method-i-3C-3C","(msg)","<p>Dump given message to the log device without any formatting.  If no log\ndevice exists, return <code>nil</code>.\n"],["<<","MultiTkIp::Command_Queue","classes/MultiTkIp/Command_Queue.html#method-i-3C-3C","(value)",""],["<<","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-3C-3C","(str)",""],["<<","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-3C-3C","(s)","<p>Writes <code>s</code> to the stream.  <code>s</code> will be converted to a\nString using String#to_s.\n"],["<<","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-3C-3C","(p1)",""],["<<","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-3C-3C","(p1)",""],["<<","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-3C-3C","(object)",""],["<<","Queue","classes/Queue.html#method-i-3C-3C","(obj)","<p>Alias of push\n"],["<<","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-3C-3C","(part)","<p>Appends <code>part</code> to the document\n"],["<<","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-3C-3C","(item)","<p>Appends <code>item</code> to the list\n"],["<<","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-3C-3C","(part)","<p>Appends <code>part</code> to the ListItem\n"],["<<","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-3C-3C","(text)","<p>Appends <code>text</code>\n"],["<<","REXML::Document","classes/REXML/Document.html#method-i-3C-3C","( child )",""],["<<","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-3C-3C","(element)","<p>Append a child to this element, optionally under a provided namespace. The\nnamespace argument is ignored …\n"],["<<","REXML::Output","classes/REXML/Output.html#method-i-3C-3C","( content )",""],["<<","REXML::Parent","classes/REXML/Parent.html#method-i-3C-3C","( object )",""],["<<","REXML::Text","classes/REXML/Text.html#method-i-3C-3C","( to_append )","<p>Appends text to this text node.  The text is appended in the\n<code>raw</code> mode of this text node.\n"],["<<","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-3C-3C","( event )",""],["<<","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-3C-3C","( event )",""],["<<","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-3C-3C","(child)",""],["<<","Set","classes/Set.html#method-i-3C-3C","(o)",""],["<<","SizedQueue","classes/SizedQueue.html#method-i-3C-3C","(obj)","<p>Alias of push\n"],["<<","String","classes/String.html#method-i-3C-3C","(p1)","<p>Append—Concatenates the given object to <em>str</em>. If the object is a\n<code>Integer</code>, it is considered as a codepoint, …\n"],["<<","StringScanner","classes/StringScanner.html#method-i-3C-3C","(p1)","<p>Appends <code>str</code> to the string being scanned. This method does not\naffect scan pointer.\n\n<pre><code>s = StringScanner.new(&quot;Fri ...</code></pre>\n"],["<<","Tk::RbWidget::AlignBox","classes/Tk/RbWidget/AlignBox.html#method-i-3C-3C","(widget)",""],["<<","TkTextIO","classes/TkTextIO.html#method-i-3C-3C","(obj)",""],["<<","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-3C-3C","(obj)","<p>Synonym for log(INFO, obj.to_s)\n"],["<<","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-3C-3C","(data)",""],["<<","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-3C-3C","(str)",""],["<<","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-3C-3C","(p1)","<p>Same as IO.\n"],["<<","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-3C-3C","(p1)","<p>Document-method: &lt;&lt; Same as IO.\n"],["<<","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-3C-3C","(p1)","<p>Same as IO.\n"],["<=","BigDecimal","classes/BigDecimal.html#method-i-3C-3D","(p1)","<p>Returns true if a is less than or equal to b. Values may be coerced to\nperform the comparison (see ==, …\n"],["<=","Bignum","classes/Bignum.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>big</code> is less than or\nequal to that of <code>real</code>.\n"],["<=","Comparable","classes/Comparable.html#method-i-3C-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns -1 or …\n"],["<=","Fixnum","classes/Fixnum.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>fix</code> is less than or\nequal to that of <code>real</code>.\n"],["<=","Float","classes/Float.html#method-i-3C-3D","(p1)","<p><code>true</code> if <code>flt</code> is less than or equal to\n<code>real</code>.\n"],["<=","Module","classes/Module.html#method-i-3C-3D","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em> or is the same\nas <em>other</em>. Returns <code>nil</code> if there&#39;s no relationship\n…\n"],["<=>","Array","classes/Array.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns an integer (-1, 0, or +1) if this array is less than,\nequal to, or greater than …\n"],["<=>","BigDecimal","classes/BigDecimal.html#method-i-3C-3D-3E","(p1)","<p>The comparison operator. a &lt;=&gt; b is 0 if a == b, 1 if a &gt; b, -1 if\na &lt; b.\n"],["<=>","Bignum","classes/Bignum.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, or +1 depending on whether <em>big</em> is less\nthan, equal to, or greater than <em>numeric</em> …\n"],["<=>","DL::CPtr","classes/DL/CPtr.html#method-i-3C-3D-3E","(p1)","<p>Returns -1 if less than, 0 if equal to, 1 if greater than\n<code>other</code>.  Returns nil if <code>ptr</code> cannot be compared …\n"],["<=>","DL::CPtr","classes/DL/CPtr.html#method-i-3C-3D-3E","(p1)","<p>Returns -1 if less than, 0 if equal to, 1 if greater than\n<code>other</code>.  Returns nil if <code>ptr</code> cannot be compared …\n"],["<=>","Date","classes/Date.html#method-i-3C-3D-3E","(p1)","<p>Compares the two dates and returns -1, zero, 1 or nil.  The other should be\na date object or a numeric …\n"],["<=>","File::Stat","classes/File/Stat.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>File::Stat</code> objects by comparing their respective\nmodification times.\n\n<pre><code>f1 = File.new(&quot;f1&quot;, &quot;w&quot;) ...</code></pre>\n"],["<=>","Fixnum","classes/Fixnum.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1 or nil depending on whether <em>fix</em> is\nless than, equal to, or greater than …\n"],["<=>","Float","classes/Float.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, +1 or nil depending on whether <em>flt</em> is less than,\nequal to, or greater than <em>real</em>. This …\n"],["<=>","Gem::Dependency","classes/Gem/Dependency.html#method-i-3C-3D-3E","(other)","<p>Dependencies are ordered by name.\n"],["<=>","IPAddr","classes/IPAddr.html#method-i-3C-3D-3E","(other)","<p>Compares the ipaddr with another.\n"],["<=>","IRB::Notifier::LeveledNotifier","classes/IRB/Notifier/LeveledNotifier.html#method-i-3C-3D-3E","(other)",""],["<=>","Module","classes/Module.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1 if <em>mod</em> includes <em>other_mod</em>, 0 if\n<em>mod</em> is the same as <em>other_mod</em>, and +1 if <em>mod</em> is …\n"],["<=>","Numeric","classes/Numeric.html#method-i-3C-3D-3E","(p1)","<p>Returns zero if <em>num</em> equals <em>other</em>, <code>nil</code>\notherwise.\n"],["<=>","Object","classes/Object.html#method-i-3C-3D-3E","(p1)","<p>Returns 0 if <code>obj</code> and <code>other</code> are the same object or\n<code>obj == other</code>, otherwise nil.\n"],["<=>","Object::Syck::BadAlias","classes/Object/Syck/BadAlias.html#method-i-3C-3D-3E","(p1)","<p>YAML::Syck::BadAlias.&lt;=&gt;\n"],["<=>","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-3C-3D-3E","(p1)",""],["<=>","Pathname","classes/Pathname.html#method-i-3C-3D-3E","(p1)","<p>Provides for comparing pathnames, case-sensitively.\n"],["<=>","RDoc::Alias","classes/RDoc/Alias.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #new_name\n"],["<=>","RDoc::Constant","classes/RDoc/Constant.html#method-i-3C-3D-3E","(other)","<p>Constants are ordered by name\n"],["<=>","RDoc::Context","classes/RDoc/Context.html#method-i-3C-3D-3E","(other)","<p>Contexts are sorted by full_name\n"],["<=>","RDoc::Include","classes/RDoc/Include.html#method-i-3C-3D-3E","(other)","<p>Includes are sorted by name\n"],["<=>","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #name\n"],["<=>","REXML::Comment","classes/REXML/Comment.html#method-i-3C-3D-3E","(other)","<p>Compares this Comment to another; the contents of the comment are used in\nthe comparison.\n"],["<=>","REXML::Text","classes/REXML/Text.html#method-i-3C-3D-3E","( other )","<p><code>other</code> a String or a Text <code>returns</code> the result of\n(to_s &lt;=&gt; arg.to_s)\n"],["<=>","Rake::EarlyTime","classes/Rake/EarlyTime.html#method-i-3C-3D-3E","(other)",""],["<=>","Rational","classes/Rational.html#method-i-3C-3D-3E","(p1)","<p>Performs comparison and returns -1, 0, or +1.\n<p>For example:\n\n<pre><code>Rational(2, 3)  &lt;=&gt; Rational(2, 3)  #=&gt; 0\nRational(5) ...\n</code></pre>\n"],["<=>","String","classes/String.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1 if <em>other_str</em> is greater than, 0 if\n<em>other_str</em> is equal to, and +1 if <em>other_str</em> …\n"],["<=>","Symbol","classes/Symbol.html#method-i-3C-3D-3E","(p1)","<p>Compares <em>sym</em> with <em>other</em> in string form.\n"],["<=>","Time","classes/Time.html#method-i-3C-3D-3E","(other)","<p>Comparison—Compares <em>time</em> with <em>other_time</em>.\n\n<pre><code>t = Time.now       #=&gt; 2007-11-19 08:12:12 -0600\nt2 = t + ...\n</code></pre>\n"],["<=>","TkVariable","classes/TkVariable.html#method-i-3C-3D-3E","(other)",""],["<=>","TkVariable","classes/TkVariable.html#method-i-3C-3D-3E","(other)",""],["<=>","Version","classes/Version.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> returning -1, 0, or 1 if the\nother version is larger, the same, or smaller …\n"],["<=>","WEBrick::HTTPVersion","classes/WEBrick/HTTPVersion.html#method-i-3C-3D-3E","(other)",""],["==","Action","classes/Action.html#method-i-3D-3D","(other)",""],["==","Array","classes/Array.html#method-i-3D-3D","(p1)","<p>Equality—Two arrays are equal if they contain the same number of elements\nand if each element is equal …\n"],["==","BasicObject","classes/BasicObject.html#method-i-3D-3D","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["==","BigDecimal","classes/BigDecimal.html#method-i-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["==","Bignum","classes/Bignum.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as\n<em>big</em>. Contrast this with <code>Bignum#eql?</code>, which requires\n<em>obj</em> …\n"],["==","Branch","classes/Branch.html#method-i-3D-3D","(other)",""],["==","CSV::Row","classes/CSV/Row.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if this row contains the same headers and fields\nin the same order as <code>other</code>.\n"],["==","CSV::Table","classes/CSV/Table.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if all rows of this table ==()\n<code>other</code>&#39;s rows.\n"],["==","Comparable","classes/Comparable.html#method-i-3D-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 0. Also …\n"],["==","Complex","classes/Complex.html#method-i-3D-3D","(p1)","<p>Returns true if cmp equals object numerically.\n"],["==","DL::CPtr","classes/DL/CPtr.html#method-i-3D-3D","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise\nreturns false.\n"],["==","DL::CPtr","classes/DL/CPtr.html#method-i-3D-3D","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise\nreturns false.\n"],["==","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-3D-3D","(other)",""],["==","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-3D-3D","(other)",""],["==","Delegator","classes/Delegator.html#method-i-3D-3D","(obj)","<p>Returns true if two objects are considered of equal value.\n"],["==","Digest::Instance","classes/Digest/Instance.html#method-i-3D-3D","(p1)","<p>If a string is given, checks whether it is equal to the hex-encoded hash\nvalue of the digest object. …\n"],["==","Encoding::Converter","classes/Encoding/Converter.html#method-i-3D-3D","(p1)",""],["==","Exception","classes/Exception.html#method-i-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not an <code>Exception</code>, returns\n<code>false</code>. Otherwise, returns <code>true</code> if <em>exc</em>\nand <em>obj</em> share same …\n"],["==","Fixnum","classes/Fixnum.html#method-i-3D-3D","(p1)","<p>Return <code>true</code> if <code>fix</code> equals <code>other</code>\nnumerically.\n\n<pre><code>1 == 2      #=&gt; false\n1 == 1.0    #=&gt; true\n</code></pre>\n"],["==","Float","classes/Float.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as\n<em>flt</em>. Contrast this with <code>Float#eql?</code>, which requires\n<em>obj</em> …\n"],["==","Gem::Platform","classes/Gem/Platform.html#method-i-3D-3D","(other)","<p>Is <code>other</code> equal to this platform?  Two platforms are equal if\nthey have the same CPU, OS and version. …\n"],["==","Hash","classes/Hash.html#method-i-3D-3D","(p1)","<p>Equality—Two hashes are equal if they each contain the same number of keys\nand if each key-value pair …\n"],["==","IPAddr","classes/IPAddr.html#method-i-3D-3D","(other)","<p>Returns true if two ipaddrs are equal.\n"],["==","JISX0208::Char","classes/JISX0208/Char.html#method-i-3D-3D","(other)",""],["==","MatchData","classes/MatchData.html#method-i-3D-3D","(p1)","<p>Equality—Two matchdata are equal if their target strings, patterns, and\nmatched positions are identical. …\n"],["==","Matrix","classes/Matrix.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if and only if the two matrices contain equal\nelements.\n"],["==","Method","classes/Method.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition. …\n"],["==","Module","classes/Module.html#method-i-3D-3D","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["==","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-3D-3D","(p1)",""],["==","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-3D-3D","(p1)",""],["==","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-3D-3D","(p1)",""],["==","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-3D-3D","(p1)",""],["==","OpenStruct","classes/OpenStruct.html#method-i-3D-3D","(other)","<p>Compares this object and <code>other</code> for equality.  An OpenStruct is\nequal to <code>other</code> when <code>other</code> is an OpenStruct …\n"],["==","Pathname","classes/Pathname.html#method-i-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["==","Proc","classes/Proc.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <em>prc</em> is the same object as\n<em>other_proc</em>, or if they are both procs with the same body.\n"],["==","Process::Status","classes/Process/Status.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the integer value of <em>stat</em> equals\n<em>other</em>.\n"],["==","RDoc::Attr","classes/RDoc/Attr.html#method-i-3D-3D","(other)","<p>Attributes are equal when their names, singleton and rw are identical\n"],["==","RDoc::Constant","classes/RDoc/Constant.html#method-i-3D-3D","(other)","<p>Constants are equal when their #parent and #name is the same\n"],["==","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-3D-3D","(other)","<p>Sections are equal when they have the same #title\n"],["==","RDoc::Markup::Special","classes/RDoc/Markup/Special.html#method-i-3D-3D","(o)","<p>Specials are equal when the have the same text and type\n"],["==","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-3D-3D","(other)","<p>An RDoc::TopLevel is equal to another with the same absolute_name\n"],["==","REXML::Attribute","classes/REXML/Attribute.html#method-i-3D-3D","( other )","<p>Returns true if other is an Attribute and has the same name and value,\nfalse otherwise.\n"],["==","REXML::Comment","classes/REXML/Comment.html#method-i-3D-3D","( other )","<p>Compares this Comment to another; the contents of the comment are used in\nthe comparison.\n"],["==","REXML::Instruction","classes/REXML/Instruction.html#method-i-3D-3D","( other )","<p>@return true if other is an Instruction, and the content and target of the\nother matches the target and …\n"],["==","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-3D-3D","( other )",""],["==","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-3D-3D","( other )",""],["==","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-3D-3D","(other)",""],["==","Rake::FileList","classes/Rake/FileList.html#method-i-3D-3D","(array)","<p>Define equality.\n"],["==","Random","classes/Random.html#method-i-3D-3D","(p1)","<p>Returns true if the generators&#39; states equal.\n"],["==","Range","classes/Range.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a Range, has equivalent\nbeginning and end items (by comparing them with  …\n"],["==","Rational","classes/Rational.html#method-i-3D-3D","(p1)","<p>Returns true if rat equals object numerically.\n<p>For example:\n\n<pre><code>Rational(2, 3)  == Rational(2, 3)   #=&gt; true ...\n</code></pre>\n"],["==","Regexp","classes/Regexp.html#method-i-3D-3D","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["==","Set","classes/Set.html#method-i-3D-3D","(other)","<p>Returns true if two sets are equal.  The equality of each couple of\nelements is defined according to …\n"],["==","String","classes/String.html#method-i-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not a <code>String</code>, returns\n<code>false</code>. Otherwise, returns <code>true</code> if <em>str</em>\n<code>&lt;=&gt;</code> <em>obj</em> returns …\n"],["==","Struct","classes/Struct.html#method-i-3D-3D","(p1)","<p>Equality—Returns <code>true</code> if <em>other_struct</em> is equal to\nthis one: they must be of the same class as generated …\n"],["==","Symbol","classes/Symbol.html#method-i-3D-3D","(p1)","<p>Equality—If <em>sym</em> and <em>obj</em> are exactly the same symbol,\nreturns <code>true</code>.\n"],["==","TkVariable","classes/TkVariable.html#method-i-3D-3D","(other)",""],["==","TkVariable","classes/TkVariable.html#method-i-3D-3D","(other)",""],["==","URI::Generic","classes/URI/Generic.html#method-i-3D-3D","(oth)","<p>Compares to URI&#39;s\n"],["==","UnboundMethod","classes/UnboundMethod.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition. …\n"],["==","Vector","classes/Vector.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> iff the two vectors have the same elements in the\nsame order.\n"],["==","Win32::SSPI::SSPIResult","classes/Win32/SSPI/SSPIResult.html#method-i-3D-3D","(other)",""],["==","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-3D-3D","(o)",""],["===","BigDecimal","classes/BigDecimal.html#method-i-3D-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["===","Bignum","classes/Bignum.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as\n<em>big</em>. Contrast this with <code>Bignum#eql?</code>, which requires\n<em>obj</em> …\n"],["===","Date","classes/Date.html#method-i-3D-3D-3D","(p1)","<p>Returns true if they are the same day.\n<p>For example:\n\n<pre><code>Date.new(2001,2,3) === Date.new(2001,2,3)\n         ...</code></pre>\n"],["===","Fixnum","classes/Fixnum.html#method-i-3D-3D-3D","(p1)","<p>Return <code>true</code> if <code>fix</code> equals <code>other</code>\nnumerically.\n\n<pre><code>1 == 2      #=&gt; false\n1 == 1.0    #=&gt; true\n</code></pre>\n"],["===","Float","classes/Float.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as\n<em>flt</em>. Contrast this with <code>Float#eql?</code>, which requires\n<em>obj</em> …\n"],["===","Gem::Platform","classes/Gem/Platform.html#method-i-3D-3D-3D","(other)","<p>Does <code>other</code> match this platform?  Two platforms match if they\nhave the same CPU, or either has a CPU of …\n"],["===","Gem::Requirement","classes/Gem/Requirement.html#method-i-3D-3D-3D","(version)",""],["===","Gem::Requirement","classes/Gem/Requirement.html#method-i-3D-3D-3D","(version)",""],["===","IPAddr","classes/IPAddr.html#method-i-3D-3D-3D","(other)",""],["===","Module","classes/Module.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Returns <code>true</code> if <em>anObject</em> is an instance\nof <em>mod</em> or one of <em>mod</em>&#39;s descendants. Of limited …\n"],["===","Object","classes/Object.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—For class <code>Object</code>, effectively the same as\ncalling  <code>#==</code>, but typically overridden by descendants …\n"],["===","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-3D-3D-3D","(p1)",""],["===","Pathname","classes/Pathname.html#method-i-3D-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["===","Proc","classes/Proc.html#method-i-3D-3D-3D","(*args)","<p>Invokes the block with <code>obj</code> as the proc&#39;s parameter like\nProc#call.  It is to allow a proc object …\n"],["===","Range","classes/Range.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an element of <em>rng</em>,\n<code>false</code> otherwise. Conveniently, <code>===</code> is the\ncomparison operator …\n"],["===","Regexp","classes/Regexp.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Synonym for <code>Regexp#=~</code> used in case statements.\n\n<pre><code>a = &quot;HELLO&quot;\ncase a\nwhen /^[a-z]*$/; print ...</code></pre>\n"],["===","Rinda::DRbObjectTemplate","classes/Rinda/DRbObjectTemplate.html#method-i-3D-3D-3D","(ro)","<p>This DRbObjectTemplate matches <code>ro</code> if the remote object&#39;s\ndrburi and drbref are the same.  <code>nil</code> is …\n"],["===","Rinda::Template","classes/Rinda/Template.html#method-i-3D-3D-3D","(tuple)","<p>Alias for #match.\n"],["===","Rinda::TemplateEntry","classes/Rinda/TemplateEntry.html#method-i-3D-3D-3D","(tuple)",""],["===","String","classes/String.html#method-i-3D-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not a <code>String</code>, returns\n<code>false</code>. Otherwise, returns <code>true</code> if <em>str</em>\n<code>&lt;=&gt;</code> <em>obj</em> returns …\n"],["===","Symbol","classes/Symbol.html#method-i-3D-3D-3D","(p1)","<p>Equality—If <em>sym</em> and <em>obj</em> are exactly the same symbol,\nreturns <code>true</code>.\n"],["===","SystemCallError","classes/SystemCallError.html#method-c-3D-3D-3D","(p1)","<p>Return <code>true</code> if the receiver is a generic\n<code>SystemCallError</code>, or if the error numbers <code>self</code> and\n<em>other</em> are …\n"],["===","TkVariable","classes/TkVariable.html#method-i-3D-3D-3D","(other)",""],["===","TkVariable","classes/TkVariable.html#method-i-3D-3D-3D","(other)",""],["=~","Gem::Dependency","classes/Gem/Dependency.html#method-i-3D-7E","(other)","<p>Uses this dependency as a pattern to compare to <code>other</code>. This\ndependency will match if the name matches …\n"],["=~","Gem::Platform","classes/Gem/Platform.html#method-i-3D-7E","(other)","<p>Does <code>other</code> match this platform?  If <code>other</code> is a\nString it will be converted to a Gem::Platform first. …\n"],["=~","Gem::Requirement","classes/Gem/Requirement.html#method-i-3D-7E","(version)",""],["=~","Gem::Requirement","classes/Gem/Requirement.html#method-i-3D-7E","(version)",""],["=~","Object","classes/Object.html#method-i-3D-7E","(p1)","<p>Pattern Match—Overridden by descendants (notably <code>Regexp</code> and\n<code>String</code>) to provide meaningful pattern-match …\n"],["=~","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-3D-7E","( path )",""],["=~","Regexp","classes/Regexp.html#method-i-3D-7E","(p1)","<p>Match—Matches <em>rxp</em> against <em>str</em>.\n\n<pre><code>/at/ =~ &quot;input data&quot;   #=&gt; 7\n/ax/ =~ &quot;input data&quot;   #=&gt; nil\n</code></pre>\n<p>If <code>=~</code> is used …\n"],["=~","String","classes/String.html#method-i-3D-7E","(p1)","<p>Match—If <em>obj</em> is a <code>Regexp</code>, use it as a pattern to\nmatch against <em>str</em>,and returns the position the match …\n"],["=~","Symbol","classes/Symbol.html#method-i-3D-7E","(p1)","<p>Returns <code>sym.to_s =~ obj</code>.\n"],["=~","TkVariable","classes/TkVariable.html#method-i-3D-7E","(other)",""],["=~","TkVariable","classes/TkVariable.html#method-i-3D-7E","(other)",""],[">","BigDecimal","classes/BigDecimal.html#method-i-3E","(p1)","<p>Returns true if a is greater than b.  Values may be coerced to perform the\ncomparison (see ==, coerce). …\n"],[">","Bignum","classes/Bignum.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>big</code> is greater than\nthat of <code>real</code>.\n"],[">","Comparable","classes/Comparable.html#method-i-3E","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 1.\n"],[">","Fixnum","classes/Fixnum.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>fix</code> is greater than\nthat of <code>real</code>.\n"],[">","Float","classes/Float.html#method-i-3E","(p1)","<p><code>true</code> if <code>flt</code> is greater than <code>real</code>.\n"],[">","Module","classes/Module.html#method-i-3E","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>. Returns\n<code>nil</code> if there&#39;s no relationship between the two. …\n"],[">","Shell::Filter","classes/Shell/Filter.html#method-i-3E","(to)",""],[">=","BigDecimal","classes/BigDecimal.html#method-i-3E-3D","(p1)","<p>Returns true if a is greater than or equal to b. Values may be coerced to\nperform the comparison (see …\n"],[">=","Bignum","classes/Bignum.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>big</code> is greater than\nor equal to that of <code>real</code>.\n"],[">=","Comparable","classes/Comparable.html#method-i-3E-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 0 or …\n"],[">=","Fixnum","classes/Fixnum.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>fix</code> is greater than\nor equal to that of <code>real</code>.\n"],[">=","Float","classes/Float.html#method-i-3E-3D","(p1)","<p><code>true</code> if <code>flt</code> is greater than or equal to\n<code>real</code>.\n"],[">=","Module","classes/Module.html#method-i-3E-3D","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>, or the two\nmodules are the same. Returns <code>nil</code> if there&#39;s …\n"],[">>","Bignum","classes/Bignum.html#method-i-3E-3E","(p1)","<p>Shifts big right <em>numeric</em> positions (left if <em>numeric</em> is\nnegative).\n"],[">>","Date","classes/Date.html#method-i-3E-3E","(p1)","<p>Returns a date object pointing n months after self.  The n should be a\nnumeric value.\n<p>For example:\n\n<pre><code>Date.new(2001,2,3) ...</code></pre>\n"],[">>","Fixnum","classes/Fixnum.html#method-i-3E-3E","(p1)","<p>Shifts <em>fix</em> right <em>count</em> positions (left if <em>count</em>\nis negative).\n"],[">>","IPAddr","classes/IPAddr.html#method-i-3E-3E","(num)","<p>Returns a new ipaddr built by bitwise right-shift.\n"],[">>","Process::Status","classes/Process/Status.html#method-i-3E-3E","(p1)","<p>Shift the bits in <em>stat</em> right <em>num</em> places.\n\n<pre><code>fork { exit 99 }   #=&gt; 26563\nProcess.wait       #=&gt; 26563\n$?.to_i ...\n</code></pre>\n"],[">>","Rake::PseudoStatus","classes/Rake/PseudoStatus.html#method-i-3E-3E","(n)",""],[">>","Shell::Filter","classes/Shell/Filter.html#method-i-3E-3E","(to)",""],["APOP","Net::POP3","classes/Net/POP3.html#method-c-APOP","(isapop)","<p>Returns the APOP class if <code>isapop</code> is true; otherwise, returns\nthe POP class.  For example:\n\n<pre><code># Example 1 ...</code></pre>\n"],["APOP","Net::POP3","classes/Net/POP3.html#method-c-APOP","(isapop)","<p>Returns the APOP class if <code>isapop</code> is true; otherwise, returns\nthe POP class.  For example:\n\n<pre><code># Example 1 ...</code></pre>\n"],["APOP","Net::POP3","classes/Net/POP3.html#method-c-APOP","(isapop)","<p>Returns the APOP class if <code>isapop</code> is true; otherwise, returns\nthe POP class.  For example:\n\n<pre><code># Example 1 ...</code></pre>\n"],["APOP","Net::POP3","classes/Net/POP3.html#method-c-APOP","(isapop)","<p>Returns the APOP class if <code>isapop</code> is true; otherwise, returns\nthe POP class.  For example:\n\n<pre><code># Example 1 ...</code></pre>\n"],["Array","Kernel","classes/Kernel.html#method-i-Array","(p1)","<p>Returns <em>arg</em> as an <code>Array</code>. First tries to call\n<em>arg</em><code>.to_ary</code>, then <em>arg</em><code>.to_a</code>.\n\n<pre><code>Array(1..5)   #=&gt; [1, 2, 3, 4, ...\n</code></pre>\n"],["BigDecimal","Kernel","classes/Kernel.html#method-i-BigDecimal","(*args)",""],["BinaryString","Tk","classes/Tk.html#method-c-BinaryString","(str)",""],["CSV","Object","classes/Object.html#method-i-CSV","(*args, &block)","<p>Another name for CSV::instance().\n"],["Call","Win32API","classes/Win32API.html#method-i-Call","(*args)",""],["CloseKey","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-CloseKey","(hkey)",""],["Complex","Kernel","classes/Kernel.html#method-i-Complex","(*args)","<p>Returns x+i*y;\n"],["CreateKey","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-CreateKey","(hkey, name, opt, desired)",""],["CurrentContext","IRB","classes/IRB.html#method-c-CurrentContext","()",""],["DEBUG","Thread","classes/Thread.html#method-c-DEBUG","()","<p>Returns the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.\n"],["DEBUG=","Thread","classes/Thread.html#method-c-DEBUG-3D","(p1)","<p>Sets the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.\n"],["DelegateClass","Object","classes/Object.html#method-i-DelegateClass","(superclass)","<p>The primary interface to this library.  Use to setup delegation when\ndefining your class.\n\n<pre><code>class MyClass ...\n</code></pre>\n"],["DeleteKey","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-DeleteKey","(hkey, name)",""],["DeleteValue","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-DeleteValue","(hkey, name)",""],["Digest","Object","classes/Object.html#method-i-Digest","(name)","<p>Returns a Digest subclass by <code>name</code>.\n\n<pre><code>require &#39;digest&#39;\n\nDigest(&quot;MD5&quot;)\n# =&gt; Digest::MD5\n\nDigest(&quot;Foo&quot;)\n# =&gt; ...\n</code></pre>\n"],["E","BigMath","classes/BigMath.html#method-i-E","(prec)","<p>Computes e (the base of natural logarithms) to the specified number of\ndigits of precision.\n"],["ESCDELAY","Curses","classes/Curses.html#method-c-ESCDELAY","()","<p>Returns the total time, in milliseconds, for which curses will await a\ncharacter sequence, e.g., a function …\n"],["ESCDELAY=","Curses","classes/Curses.html#method-c-ESCDELAY-3D","(p1)","<p>Sets the ESCDELAY to Integer <code>value</code>\n"],["EncodedString","Tk","classes/Tk.html#method-c-EncodedString","(str, enc = nil)",""],["EnumKey","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-EnumKey","(hkey, index)",""],["EnumValue","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-EnumValue","(hkey, index)",""],["Fail","E2MM","classes/E2MM.html#method-c-Fail","(klass = E2MM, err = nil, *rest)",""],["Fail","E2MM","classes/E2MM.html#method-c-Fail","(klass = E2MM, err = nil, *rest)",""],["Fail","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-Fail","(err = nil, *rest)",""],["Fail","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-Fail","(err = nil, *rest)",""],["Fail","Sync_m::Err","classes/Sync_m/Err.html#method-c-Fail","(*opt)",""],["Fail","Sync_m::Err::LockModeFailer","classes/Sync_m/Err/LockModeFailer.html#method-c-Fail","(mode)",""],["Fail","Sync_m::Err::UnknownLocker","classes/Sync_m/Err/UnknownLocker.html#method-c-Fail","(th)",""],["Float","Kernel","classes/Kernel.html#method-i-Float","(p1)","<p>Returns <em>arg</em> converted to a float. Numeric types are converted\ndirectly, the rest are converted using …\n"],["FlushKey","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-FlushKey","(hkey)",""],["Grid","Tk","classes/Tk.html#method-i-Grid","(*args)",""],["I","Matrix","classes/Matrix.html#method-c-I","(n)",""],["Inspector","IRB","classes/IRB.html#method-c-Inspector","(inspect, init = nil)",""],["Integer","Kernel","classes/Kernel.html#method-i-Integer","(p1, p2 = v2)","<p>Converts <em>arg</em> to a <code>Fixnum</code> or <code>Bignum</code>.\nNumeric types are converted directly (with floating point numbers …\n"],["JavaDSOCompatible","Microsoft_XMLDSO_1_0","classes/Microsoft_XMLDSO_1_0.html#method-i-JavaDSOCompatible","()","<p>I4 JavaDSOCompatible\n"],["JavaDSOCompatible=","Microsoft_XMLDSO_1_0","classes/Microsoft_XMLDSO_1_0.html#method-i-JavaDSOCompatible-3D","(arg0)","<p>VOID JavaDSOCompatible\n"],["JobManager","IRB","classes/IRB.html#method-c-JobManager","()",""],["LOG_MASK","Syslog","classes/Syslog.html#method-c-LOG_MASK","(p1)","<p>Generates a mask bit for a priority level. See #mask=\n"],["LOG_MASK","Syslog::Constants","classes/Syslog/Constants.html#method-c-LOG_MASK","(p1)","<p>Generates a mask bit for a priority level. See #mask=\n"],["LOG_UPTO","Syslog","classes/Syslog.html#method-c-LOG_UPTO","(p1)","<p>Generates a mask value for priority levels at or below the level specified.\nSee #mask=\n"],["LOG_UPTO","Syslog::Constants","classes/Syslog/Constants.html#method-c-LOG_UPTO","(p1)","<p>Generates a mask value for priority levels at or below the level specified.\nSee #mask=\n"],["Mainloop","Object","classes/Object.html#method-i-Mainloop","()",""],["Marshal","Gem::Server","classes/Gem/Server.html#method-i-Marshal","(req, res)",""],["OpenKey","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-OpenKey","(hkey, name, opt, desired)",""],["PI","BigMath","classes/BigMath.html#method-i-PI","(prec)","<p>Computes the value of pi to the specified number of digits of precision.\n"],["Pack","Tk","classes/Tk.html#method-i-Pack","(*args)",""],["Pathname","Kernel","classes/Kernel.html#method-i-Pathname","(p1)","<p>create a pathname object.\n<p>This method is available since 1.8.5.\n"],["PermaLink?","RSS::Rss::Channel::Item::Guid","classes/RSS/Rss/Channel/Item/Guid.html#method-i-PermaLink-3F","()",""],["Place","Tk","classes/Tk.html#method-i-Place","(*args)",""],["Proxy","Net::HTTP","classes/Net/HTTP.html#method-c-Proxy","(p_addr, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates an HTTP proxy class which behaves like Net::HTTP, but performs all\naccess via the specified proxy. …\n"],["Proxy","Net::HTTP","classes/Net/HTTP.html#method-c-Proxy","(p_addr, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates an HTTP proxy class which behaves like Net::HTTP, but performs all\naccess via the specified proxy. …\n"],["QueryInfoKey","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-QueryInfoKey","(hkey)",""],["QueryValue","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-QueryValue","(hkey, name)",""],["Raise","E2MM","classes/E2MM.html#method-c-Raise","(klass = E2MM, err = nil, *rest)","<p>Fail(klass, err, *rest)\n\n<pre><code>klass:  class to define exception under.\nerr:    exception\nrest:   message arguments\n</code></pre>\n"],["Raise","E2MM","classes/E2MM.html#method-c-Raise","(klass = E2MM, err = nil, *rest)","<p>Fail(klass, err, *rest)\n\n<pre><code>klass:  class to define exception under.\nerr:    exception\nrest:   message arguments\n</code></pre>\n"],["Raise","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-Raise","(err = nil, *rest)","<p>Fail(err, *rest)\n\n<pre><code>err:    exception\nrest:   message arguments</code></pre>\n"],["Raise","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-Raise","(err = nil, *rest)","<p>Fail(err, *rest)\n\n<pre><code>err:    exception\nrest:   message arguments</code></pre>\n"],["Rational","Kernel","classes/Kernel.html#method-i-Rational","(*args)","<p>Returns x/y;\n"],["SetValue","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-SetValue","(hkey, name, type, data, size)",""],["String","IRB::Locale","classes/IRB/Locale.html#method-i-String","(mes)",""],["String","Kernel","classes/Kernel.html#method-i-String","(p1)","<p>Converts <em>arg</em> to a <code>String</code> by calling its\n<code>to_s</code> method.\n\n<pre><code>String(self)        #=&gt; &quot;main&quot;\nString(self.class) ...\n</code></pre>\n"],["TABSIZE","Curses","classes/Curses.html#method-c-TABSIZE","()","<p>Returns the number of positions in a tab.\n"],["TABSIZE=","Curses","classes/Curses.html#method-c-TABSIZE-3D","(p1)","<p>Sets the TABSIZE to Integer <code>value</code>\n"],["TkGrid","Object","classes/Object.html#method-i-TkGrid","(*args)",""],["TkPack","Object","classes/Object.html#method-i-TkPack","(*args)",""],["TkPlace","Object","classes/Object.html#method-i-TkPlace","(*args)",""],["Token","RubyToken","classes/RubyToken.html#method-i-Token","(token, value = nil)",""],["UTF8_String","Tk","classes/Tk.html#method-c-UTF8_String","(str)",""],["ValidEncoding","Object","classes/Object.html#method-i-ValidEncoding","(enc)",""],["XLFDfont","Tk::BWidget","classes/Tk/BWidget.html#method-c-XLFDfont","(cmd, *args)",""],["XMLDocument","Microsoft_XMLDSO_1_0","classes/Microsoft_XMLDSO_1_0.html#method-i-XMLDocument","()","<p>IXMLDOMDocument XMLDocument\n"],["XMLDocument=","Microsoft_XMLDSO_1_0","classes/Microsoft_XMLDSO_1_0.html#method-i-XMLDocument-3D","(arg0)","<p>VOID XMLDocument\n"],["[]","Array","classes/Array.html#method-i-5B-5D","(p1, p2 = v2)","<p>Element Reference—Returns the element at <em>index</em>, or returns a\nsubarray starting at <em>start</em> and continuing …\n"],["[]","Array","classes/Array.html#method-c-5B-5D","(*args)","<p>Returns a new array populated with the given objects.\n\n<pre><code>Array.[]( 1, &#39;a&#39;, /^A/ )\nArray[ 1, &#39;a&#39;, /^A/ ]\n[ ...</code></pre>\n"],["[]","Bignum","classes/Bignum.html#method-i-5B-5D","(p1)","<p>Bit Reference—Returns the <em>n</em>th bit in the (assumed) binary\nrepresentation of <em>big</em>, where <em>big</em> is the least …\n"],["[]","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-5B-5D","(key)","<p>Get the value for the parameter with a given key.\n<p>If the parameter has multiple values, only the first …\n"],["[]","CGI::Session","classes/CGI/Session.html#method-i-5B-5D","(key)","<p>Retrieve the session data for key <code>key</code>.\n"],["[]","CSV::Row","classes/CSV/Row.html#method-i-5B-5D","(header_or_index, minimum_index = 0)",""],["[]","CSV::Table","classes/CSV/Table.html#method-i-5B-5D","(index_or_header)","<p>In the default mixed mode, this method returns rows for index access and\ncolumns for header access.  …\n"],["[]","Continuation","classes/Continuation.html#method-i-5B-5D","(*args)","<p>Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are …\n"],["[]","DBM","classes/DBM.html#method-i-5B-5D","(p1)","<p>Return a value from the database by locating the key string provided.  If\nthe key is not found, returns …\n"],["[]","DL::CFunc","classes/DL/CFunc.html#method-i-5B-5D","(p1)","<p>Calls the function pointer passing in <code>ary</code> as values to the\nunderlying C function.  The return value depends …\n"],["[]","DL::CPtr","classes/DL/CPtr.html#method-i-5B-5D","(p1, p2 = v2)","<p>Returns integer stored at <em>index</em>.  If <em>start</em> and\n<em>length</em> are given, a string containing the bytes from  …\n"],["[]","DL::CPtr","classes/DL/CPtr.html#method-c-5B-5D","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it\nas a DL::CPtr object.\n"],["[]","DL::CPtr","classes/DL/CPtr.html#method-i-5B-5D","(p1, p2 = v2)","<p>Returns integer stored at <em>index</em>.  If <em>start</em> and\n<em>length</em> are given, a string containing the bytes from  …\n"],["[]","DL::CPtr","classes/DL/CPtr.html#method-c-5B-5D","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it\nas a DL::CPtr object.\n"],["[]","DL::CStructEntity","classes/DL/CStructEntity.html#method-i-5B-5D","(name)",""],["[]","DL::CompositeHandler","classes/DL/CompositeHandler.html#method-i-5B-5D","(symbol)",""],["[]","DL::Handle","classes/DL/Handle.html#method-i-5B-5D","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["[]","DL::Handle","classes/DL/Handle.html#method-c-5B-5D","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["[]","DL::Importer","classes/DL/Importer.html#method-i-5B-5D","(name)",""],["[]","DL::Packer","classes/DL/Packer.html#method-c-5B-5D","(*types)",""],["[]","DL::Stack","classes/DL/Stack.html#method-c-5B-5D","(*types)",""],["[]","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-5B-5D","(key)",""],["[]","DRb::GW","classes/DRb/GW.html#method-i-5B-5D","(key)",""],["[]","Dir","classes/Dir.html#method-c-5B-5D","(*args)","<p>Equivalent to calling <code>Dir.glob(</code><em>array,</em><code>0)</code>\nand <code>Dir.glob([string,...],0)</code>.\n"],["[]","ENV","classes/ENV.html#method-c-5B-5D","(p1)","<p>Retrieves the <code>value</code> for environment variable <code>name</code>\nas a String.  Returns <code>nil</code> if the named variable does …\n"],["[]","Fixnum","classes/Fixnum.html#method-i-5B-5D","(p1)","<p>Bit Reference—Returns the <em>n</em>th bit in the binary representation of\n<em>fix</em>, where <em>fix</em> is the least significant …\n"],["[]","Front","classes/Front.html#method-i-5B-5D","(k)",""],["[]","GDBM","classes/GDBM.html#method-i-5B-5D","(p1)","<p>Retrieves the <em>value</em> corresponding to <em>key</em>.\n"],["[]","Gem::CommandManager","classes/Gem/CommandManager.html#method-i-5B-5D","(command_name)","<p>Return the registered command from the command name.\n"],["[]","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-5B-5D","(key)","<p>Return the configuration information for <code>key</code>.\n"],["[]","Hash","classes/Hash.html#method-i-5B-5D","(p1)","<p>Element Reference—Retrieves the <em>value</em> object corresponding to the\n<em>key</em> object. If not found, returns …\n"],["[]","Hash","classes/Hash.html#method-c-5B-5D","(*args)","<p>Creates a new hash populated with the given objects. Equivalent to the\nliteral <code>{ <em>key</em> =&gt; <em>value</em>, ...</code> …\n"],["[]","HttpServer::Table","classes/HttpServer/Table.html#method-i-5B-5D","(key)",""],["[]","IRB::History","classes/IRB/History.html#method-i-5B-5D","(idx)",""],["[]","JSON","classes/JSON.html#method-i-5B-5D","(object, opts = {})","<p>If <em>object</em> is string-like, parse the string and return the parsed\nresult as a Ruby data structure. Otherwise …\n"],["[]","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-5B-5D","(p1)","<p>Return the value returned by method <code>name</code>.\n"],["[]","MatchData","classes/MatchData.html#method-i-5B-5D","(p1, p2 = v2)","<p>Match Reference—<code>MatchData</code> acts as an array, and may be\naccessed using the normal array indexing techniques. …\n"],["[]","Matrix","classes/Matrix.html#method-i-5B-5D","(i, j)","<p>Returns element (<code>i</code>,<code>j</code>) of the matrix.  That is:\nrow <code>i</code>, column <code>j</code>.\n"],["[]","Matrix","classes/Matrix.html#method-c-5B-5D","(*rows)","<p>Creates a matrix where each argument is a row.\n\n<pre><code>Matrix[ [25, 93], [-1, 66] ]\n   =&gt;  25 93\n       -1 66\n</code></pre>\n"],["[]","Method","classes/Method.html#method-i-5B-5D","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the\nmethod&#39;s return value.\n\n<pre><code>m = 12.method(&quot;+&quot;) ...</code></pre>\n"],["[]","NQXML::Node","classes/NQXML/Node.html#method-i-5B-5D","(index)",""],["[]","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-5B-5D","(key)","<p>Returns the header field corresponding to the case-insensitive key. For\nexample, a key of “Content-Type” …\n"],["[]","OLEProperty","classes/OLEProperty.html#method-i-5B-5D","(*args)",""],["[]","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-5B-5D","(section)",""],["[]","PStore","classes/PStore.html#method-i-5B-5D","(name)","<p>Retrieves a value from the PStore file data, by <em>name</em>.  The\nhierarchy of Ruby objects stored under that …\n"],["[]","Prime::TrialDivision","classes/Prime/TrialDivision.html#method-i-5B-5D","(index)","<p>Returns the +index+th prime number.\n<p><code>index</code> is a 0-based index.\n"],["[]","Proc","classes/Proc.html#method-i-5B-5D","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["[]","Psych::Coder","classes/Psych/Coder.html#method-i-5B-5D","(k)",""],["[]","RDoc::Markup::AttrSpan","classes/RDoc/Markup/AttrSpan.html#method-i-5B-5D","(n)","<p>Accesses flags for character <code>n</code>\n"],["[]","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-5B-5D","(key)","<p>Access the attlist attribute/value pairs.\n\n<pre><code>value = attlist_decl[ attribute_name ]</code></pre>\n"],["[]","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-5B-5D","( reference, ns=nil )",""],["[]","REXML::Parent","classes/REXML/Parent.html#method-i-5B-5D","( index )","<p>Fetches a child at a given index @param index the Integer index of the\nchild to fetch\n"],["[]","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-5B-5D","( start, endd=nil)",""],["[]","RSS::Maker","classes/RSS/Maker.html#method-i-5B-5D","(version)",""],["[]","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-5B-5D","(name)",""],["[]","Rake::NameSpace","classes/Rake/NameSpace.html#method-i-5B-5D","(name)","<p>Lookup a task named <code>name</code> in the namespace.\n"],["[]","Rake::Task","classes/Rake/Task.html#method-i-5B-5D","(task_name)","<p>Return a task with the given name.  If the task is not currently known, try\nto synthesize one from the …\n"],["[]","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-5B-5D","(index)","<p>Find an argument value by name or index.\n"],["[]","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-5B-5D","(task_name, scopes=nil)","<p>Find a matching task for <code>task_name</code>.\n"],["[]","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-5B-5D","(k)","<p>Accessor method for elements of the tuple.\n"],["[]","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the tuple.\n"],["[]","RubyVM::InstructionsLoader","classes/RubyVM/InstructionsLoader.html#method-i-5B-5D","(s)",""],["[]","SDBM","classes/SDBM.html#method-i-5B-5D","(p1)",""],["[]","Set","classes/Set.html#method-c-5B-5D","(*ary)","<p>Creates a new set containing the given objects.\n"],["[]","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-5B-5D","(command, file1, file2=nil)",""],["[]","String","classes/String.html#method-i-5B-5D","(*args)","<p>Element Reference—If passed a single <code>Fixnum</code>, returns a\nsubstring of one character at that position. …\n"],["[]","StringScanner","classes/StringScanner.html#method-i-5B-5D","(p1)","<p>Return the n-th subgroup in the most recent match.\n\n<pre><code>s = StringScanner.new(&quot;Fri Dec 12 1975 14:39&quot;)\ns.scan(/(\\w+) ...</code></pre>\n"],["[]","Struct","classes/Struct.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of the instance variable named by\n<em>symbol</em>, or indexed (0..length-1) …\n"],["[]","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-5B-5D","( *key )","<p>We want the node to act like as Hash if it is.\n"],["[]","Syck::Omap","classes/Syck/Omap.html#method-i-5B-5D","( k )",""],["[]","Syck::Omap","classes/Syck/Omap.html#method-c-5B-5D","( *vals )",""],["[]","Syck::Pairs","classes/Syck/Pairs.html#method-i-5B-5D","( k )",""],["[]","Syck::Pairs","classes/Syck/Pairs.html#method-c-5B-5D","( *vals )",""],["[]","Syck::Stream","classes/Syck/Stream.html#method-i-5B-5D","( i )",""],["[]","Symbol","classes/Symbol.html#method-i-5B-5D","(*args)","<p>Returns <code>sym.to_s[]</code>.\n"],["[]","Thread","classes/Thread.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of a thread-local variable, using\neither a symbol or a string …\n"],["[]","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-5B-5D","(idx)",""],["[]","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-5B-5D","(key)",""],["[]","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-5B-5D","(key)",""],["[]","Tk::Entry","classes/Tk/Entry.html#method-i-5B-5D","(*args)",""],["[]","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-5B-5D","(key)",""],["[]","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-5B-5D","(key)",""],["[]","TkFont","classes/TkFont.html#method-i-5B-5D","(slot)",""],["[]","TkFont","classes/TkFont.html#method-i-5B-5D","(slot)",""],["[]","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-5B-5D","(slot)",""],["[]","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-5B-5D","(slot)",""],["[]","TkMenubar","classes/TkMenubar.html#method-i-5B-5D","(index)",""],["[]","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-5B-5D","(*args)",""],["[]","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-5B-5D","(*args)",""],["[]","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-5B-5D","(*args)",""],["[]","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-5B-5D","(*args)",""],["[]","TkTextImage","classes/TkTextImage.html#method-i-5B-5D","(slot)",""],["[]","TkTextImage","classes/TkTextImage.html#method-i-5B-5D","(slot)",""],["[]","TkTextTag","classes/TkTextTag.html#method-i-5B-5D","(key)",""],["[]","TkTextTag","classes/TkTextTag.html#method-i-5B-5D","(key)",""],["[]","TkTextWindow","classes/TkTextWindow.html#method-i-5B-5D","(slot)",""],["[]","TkTextWindow","classes/TkTextWindow.html#method-i-5B-5D","(slot)",""],["[]","TkVariable","classes/TkVariable.html#method-i-5B-5D","(*idxs)",""],["[]","TkVariable","classes/TkVariable.html#method-i-5B-5D","(*idxs)",""],["[]","Vector","classes/Vector.html#method-i-5B-5D","(i)","<p>Returns element number <code>i</code> (starting at zero) of the vector.\n"],["[]","Vector","classes/Vector.html#method-c-5B-5D","(*array)","<p>Creates a Vector from a list of elements.\n\n<pre><code>Vector[7, 4, ...]</code></pre>\n"],["[]","WEBrick::CGI","classes/WEBrick/CGI.html#method-i-5B-5D","(key)",""],["[]","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-5B-5D","(key)",""],["[]","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-5B-5D","(header_name)","<p>Retrieves <code>header_name</code>\n"],["[]","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-5B-5D","(field)","<p>Retrieves the response header <code>field</code>\n"],["[]","WEBrick::HTTPServer::MountTable","classes/WEBrick/HTTPServer/MountTable.html#method-i-5B-5D","(dir)",""],["[]","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-5B-5D","(code)","<p>Returns the status class corresponding to <code>code</code>\n\n<pre><code>WEBrick::HTTPStatus[302]\n=&gt; WEBrick::HTTPStatus::NotFound\n</code></pre>\n"],["[]","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-5B-5D","(*key)",""],["[]","WIN32OLE","classes/WIN32OLE.html#method-i-5B-5D","(*args)","<p>Returns the value of Collection specified by a1, a2,.…\n\n<pre><code>dict = WIN32OLE.new(&#39;Scripting.Dictionary&#39;)\ndict.add(&#39;ruby&#39;, ...</code></pre>\n"],["[]","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-5B-5D","(*args)","<p>Returns the element of WIN32OLE_VARIANT object(OLE array). This method is\navailable only when the variant …\n"],["[]","Win32::Registry","classes/Win32/Registry.html#method-i-5B-5D","(name, *rtype)","<p>Read a registry value named name and return its value data. The class of\nvalue is same as #read method …\n"],["[]","YAML::DBM","classes/YAML/DBM.html#method-i-5B-5D","( key )","<p>Return value associated with <code>key</code> from database.\n<p>Returns <code>nil</code> if there is no such <code>key</code>.\n"],["[]=","Array","classes/Array.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment—Sets the element at <em>index</em>, or replaces a\nsubarray starting at <em>start</em> and continuing …\n"],["[]=","CGI::Session","classes/CGI/Session.html#method-i-5B-5D-3D","(key, val)","<p>Set the session date for key <code>key</code>.\n"],["[]=","CSV::Row","classes/CSV/Row.html#method-i-5B-5D-3D","(*args)","<p>Looks up the field by the semantics described in CSV::Row.field() and\nassigns the <code>value</code>.\n<p>Assigning past …\n"],["[]=","CSV::Table","classes/CSV/Table.html#method-i-5B-5D-3D","(index_or_header, value)","<p>In the default mixed mode, this method assigns rows for index access and\ncolumns for header access.  …\n"],["[]=","DBM","classes/DBM.html#method-i-5B-5D-3D","(p1, p2)","<p>Stores the specified string value in the database, indexed via the string\nkey provided.\n"],["[]=","DL::CPtr","classes/DL/CPtr.html#method-i-5B-5D-3D","(p1, p2, p3 = v3)","<p>Set the value at <code>index</code> to <code>int</code>.  Or, set the\nmemory at <code>start</code> until <code>length</code> with the contents of\n<code>string</code> …\n"],["[]=","DL::CPtr","classes/DL/CPtr.html#method-i-5B-5D-3D","(p1, p2, p3 = v3)","<p>Set the value at <code>index</code> to <code>int</code>.  Or, set the\nmemory at <code>start</code> until <code>length</code> with the contents of\n<code>string</code> …\n"],["[]=","DL::CStructEntity","classes/DL/CStructEntity.html#method-i-5B-5D-3D","(name, val)",""],["[]=","DRb::GW","classes/DRb/GW.html#method-i-5B-5D-3D","(key, v)",""],["[]=","ENV","classes/ENV.html#method-c-5B-5D-3D","(p1, p2)","<p>Sets the environment variable <code>name</code> to <code>value</code>.  If\nthe value given is <code>nil</code> the environment variable is deleted. …\n"],["[]=","GDBM","classes/GDBM.html#method-i-5B-5D-3D","(p1, p2)","<p>Associates the value <em>value</em> with the specified <em>key</em>.\n"],["[]=","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-5B-5D-3D","(key, value)","<p>Set configuration option <code>key</code> to <code>value</code>.\n"],["[]=","Hash","classes/Hash.html#method-i-5B-5D-3D","(p1, p2)","<p>Element Assignment—Associates the value given by <em>value</em> with the\nkey given by <em>key</em>. <em>key</em> should not have …\n"],["[]=","HttpServer::Table","classes/HttpServer/Table.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-5B-5D-3D","(key, val)","<p>Sets the header field corresponding to the case-insensitive key.\n"],["[]=","OLEProperty","classes/OLEProperty.html#method-i-5B-5D-3D","(*args)",""],["[]=","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-5B-5D-3D","(section, pairs)",""],["[]=","PStore","classes/PStore.html#method-i-5B-5D-3D","(name, value)","<p>Stores an individual Ruby object or a hierarchy of Ruby objects in the data\nstore file under the root …\n"],["[]=","Psych::Coder","classes/Psych/Coder.html#method-i-5B-5D-3D","(k, v)",""],["[]=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-5B-5D-3D","( reference, ns, value=nil )","<p>Doesn&#39;t handle namespaces yet\n"],["[]=","REXML::Parent","classes/REXML/Parent.html#method-i-5B-5D-3D","( *args )","<p>Set an index entry.  See Array.[]= @param index the index of the element to\nset @param opt either the …\n"],["[]=","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-5B-5D-3D","( variable_name, value )",""],["[]=","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-5B-5D-3D","(name, value)",""],["[]=","SDBM","classes/SDBM.html#method-i-5B-5D-3D","(p1, p2)",""],["[]=","String","classes/String.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment—Replaces some or all of the content of <em>str</em>. The\nportion of the string affected is …\n"],["[]=","Struct","classes/Struct.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Assigns to the instance variable named by\n<em>symbol</em> or <em>fixnum</em> the value <em>obj</em> and returns …\n"],["[]=","Syck::Omap","classes/Syck/Omap.html#method-i-5B-5D-3D","( k, *rest )",""],["[]=","Syck::Pairs","classes/Syck/Pairs.html#method-i-5B-5D-3D","( k, val )",""],["[]=","Thread","classes/Thread.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets or creates the value of a thread-local variable,\nusing either a symbol or …\n"],["[]=","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-5B-5D-3D","(idx, val)",""],["[]=","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-5B-5D-3D","(key, val)",""],["[]=","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-5B-5D-3D","(key, val)",""],["[]=","Tk::Entry","classes/Tk/Entry.html#method-i-5B-5D-3D","(*args)",""],["[]=","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-5B-5D-3D","(key, val)",""],["[]=","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-5B-5D-3D","(key,val)",""],["[]=","TkFont","classes/TkFont.html#method-i-5B-5D-3D","(slot, val)",""],["[]=","TkFont","classes/TkFont.html#method-i-5B-5D-3D","(slot, val)",""],["[]=","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-5B-5D-3D","(slot, val)",""],["[]=","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-5B-5D-3D","(slot, value)",""],["[]=","TkTextImage","classes/TkTextImage.html#method-i-5B-5D-3D","(slot, value)",""],["[]=","TkTextImage","classes/TkTextImage.html#method-i-5B-5D-3D","(slot, value)",""],["[]=","TkTextTag","classes/TkTextTag.html#method-i-5B-5D-3D","(key,val)",""],["[]=","TkTextTag","classes/TkTextTag.html#method-i-5B-5D-3D","(key,val)",""],["[]=","TkTextWindow","classes/TkTextWindow.html#method-i-5B-5D-3D","(slot, value)",""],["[]=","TkTextWindow","classes/TkTextWindow.html#method-i-5B-5D-3D","(slot, value)",""],["[]=","TkVariable","classes/TkVariable.html#method-i-5B-5D-3D","(*args)",""],["[]=","TkVariable","classes/TkVariable.html#method-i-5B-5D-3D","(*args)",""],["[]=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-5B-5D-3D","(field, value)","<p>Sets the response header <code>field</code> to <code>value</code>\n"],["[]=","WEBrick::HTTPServer::MountTable","classes/WEBrick/HTTPServer/MountTable.html#method-i-5B-5D-3D","(dir, val)",""],["[]=","WIN32OLE","classes/WIN32OLE.html#method-i-5B-5D-3D","(*args)","<p>Sets the value to WIN32OLE object specified by a1, a2, …\n\n<pre><code>dict = WIN32OLE.new(&#39;Scripting.Dictionary&#39;) ...</code></pre>\n"],["[]=","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-5B-5D-3D","(*args)","<p>Set the element of WIN32OLE_VARIANT object(OLE array) to val. This method\nis available only when the …\n"],["[]=","Win32::Registry","classes/Win32/Registry.html#method-i-5B-5D-3D","(name, rtype, value = nil)","<p>Write value to a registry value named name.\n<p>If wtype is specified, the value type is it. Otherwise, the …\n"],["[]=","YAML::DBM","classes/YAML/DBM.html#method-i-5B-5D-3D","( key, val )","<p>Set <code>key</code> to <code>value</code> in database.\n<p><code>value</code> will be converted to YAML before storage.\n"],["^","Bignum","classes/Bignum.html#method-i-5E","(p1)","<p>Performs bitwise +exclusive or+ between <em>big</em> and <em>numeric</em>.\n"],["^","FalseClass","classes/FalseClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Fixnum","classes/Fixnum.html#method-i-5E","(p1)","<p>Bitwise EXCLUSIVE OR.\n"],["^","NilClass","classes/NilClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Set","classes/Set.html#method-i-5E","(enum)","<p>Returns a new set containing elements exclusive between the set and the\ngiven enumerable object.  (set …\n"],["^","TkcTagAccess","classes/TkcTagAccess.html#method-i-5E","(tag)",""],["^","TrueClass","classes/TrueClass.html#method-i-5E","(p1)","<p>Exclusive Or—Returns <code>true</code> if <em>obj</em> is <code>nil</code>\nor <code>false</code>, <code>false</code> otherwise.\n"],["_DEFAULT_MASTER","MultiTkIp","classes/MultiTkIp.html#method-c-_DEFAULT_MASTER","()",""],["_DEFAULT_MASTER","MultiTkIp","classes/MultiTkIp.html#method-c-_DEFAULT_MASTER","()",""],["_DEFAULT_MASTER","MultiTkIp","classes/MultiTkIp.html#method-c-_DEFAULT_MASTER","()",""],["_DEFAULT_MASTER","MultiTkIp","classes/MultiTkIp.html#method-c-_DEFAULT_MASTER","()",""],["_IP_TABLE","MultiTkIp","classes/MultiTkIp.html#method-c-_IP_TABLE","()",""],["_IP_TABLE","MultiTkIp","classes/MultiTkIp.html#method-c-_IP_TABLE","()",""],["_IP_TABLE","MultiTkIp","classes/MultiTkIp.html#method-c-_IP_TABLE","()",""],["_IP_TABLE","MultiTkIp","classes/MultiTkIp.html#method-c-_IP_TABLE","()",""],["_N","Knights_Tour","classes/Knights_Tour.html#method-i-_N","(square)","<p>Display a square number as a standard chess square notation.\n"],["_PermaLink?","RSS::Rss::Channel::Item::Guid","classes/RSS/Rss/Channel/Item/Guid.html#method-i-_PermaLink-3F","()",""],["_TK_TABLE_LIST","MultiTkIp","classes/MultiTkIp.html#method-c-_TK_TABLE_LIST","()",""],["_TK_TABLE_LIST","MultiTkIp","classes/MultiTkIp.html#method-c-_TK_TABLE_LIST","()",""],["_TK_TABLE_LIST","MultiTkIp","classes/MultiTkIp.html#method-c-_TK_TABLE_LIST","()",""],["_TK_TABLE_LIST","MultiTkIp","classes/MultiTkIp.html#method-c-_TK_TABLE_LIST","()",""],["__BLT_EPS_item_boolval_optkeys","Tk::Canvas","classes/Tk/Canvas.html#method-i-__BLT_EPS_item_boolval_optkeys","(id)",""],["__BLT_EPS_item_strval_optkeys","Tk::Canvas","classes/Tk/Canvas.html#method-i-__BLT_EPS_item_strval_optkeys","(id)",""],["__IGNORE_UNKNOWN_CONFIGURE_OPTION__","TkItemConfigMethod","classes/TkItemConfigMethod.html#method-c-__IGNORE_UNKNOWN_CONFIGURE_OPTION__","()",""],["__Import_Tile_Widgets__!","Tk::Tile","classes/Tk/Tile.html#method-c-__Import_Tile_Widgets__-21","()",""],["__Import_Tile_Widgets__!","Tk::Tile","classes/Tk/Tile.html#method-c-__Import_Tile_Widgets__-21","()",""],["__Import_Tile_Widgets__!","Tk::Tile","classes/Tk/Tile.html#method-c-__Import_Tile_Widgets__-21","()",""],["__boolval_optkeys","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-__boolval_optkeys","()",""],["__callee__","Kernel","classes/Kernel.html#method-i-__callee__","()","<p>Returns the name of the current method as a Symbol. If called outside of a\nmethod, it returns <code>nil</code>.\n"],["__cget_cmd","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-__cget_cmd","()",""],["__cget_cmd","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-__cget_cmd","()",""],["__cget_cmd","Tk::Tcllib::Tkpiechart::ConfigMethod","classes/Tk/Tcllib/Tkpiechart/ConfigMethod.html#method-i-__cget_cmd","()",""],["__check_available_itemconfigure_options","TkItemConfigMethod","classes/TkItemConfigMethod.html#method-i-__check_available_itemconfigure_options","(tagOrId, keys)",""],["__check_proc_string__","Object","classes/Object.html#method-i-__check_proc_string__","(str)",""],["__config_cmd","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-__config_cmd","()",""],["__config_cmd","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-__config_cmd","()",""],["__conv_item_keyonly_opts","TkItemConfigOptkeys","classes/TkItemConfigOptkeys.html#method-i-__conv_item_keyonly_opts","(id, keys)",""],["__conv_item_vcmd_on_hash_kv","Tk::ItemValidateConfigure","classes/Tk/ItemValidateConfigure.html#method-i-__conv_item_vcmd_on_hash_kv","(keys)",""],["__conv_vcmd_on_hash_kv","Tk::ValidateConfigure","classes/Tk/ValidateConfigure.html#method-i-__conv_vcmd_on_hash_kv","(keys)",""],["__create_safe_slave_obj","MultiTkIp","classes/MultiTkIp.html#method-i-__create_safe_slave_obj","(safe_opts, app_name, tk_opts)",""],["__create_safe_slave_obj","MultiTkIp","classes/MultiTkIp.html#method-i-__create_safe_slave_obj","(safe_opts, app_name, tk_opts)",""],["__create_safe_slave_obj","MultiTkIp","classes/MultiTkIp.html#method-i-__create_safe_slave_obj","(safe_opts, app_name, tk_opts)",""],["__create_safe_slave_obj","MultiTkIp","classes/MultiTkIp.html#method-i-__create_safe_slave_obj","(safe_opts, app_name, tk_opts)",""],["__create_trusted_slave_obj","MultiTkIp","classes/MultiTkIp.html#method-i-__create_trusted_slave_obj","(name, keys)",""],["__create_trusted_slave_obj","MultiTkIp","classes/MultiTkIp.html#method-i-__create_trusted_slave_obj","(name, keys)",""],["__create_trusted_slave_obj","MultiTkIp","classes/MultiTkIp.html#method-i-__create_trusted_slave_obj","(name, keys)",""],["__create_trusted_slave_obj","MultiTkIp","classes/MultiTkIp.html#method-i-__create_trusted_slave_obj","(name, keys)",""],["__create_widget_set__","Tk","classes/Tk.html#method-i-__create_widget_set__","(new_set, src_set={})",""],["__current_itemconfiginfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-__current_itemconfiginfo","(tagOrId, slot = nil)",""],["__def_validcmd","Tk::ItemValidateConfigure","classes/Tk/ItemValidateConfigure.html#method-c-__def_validcmd","(scope, klass, keys=nil)",""],["__def_validcmd","Tk::ValidateConfigure","classes/Tk/ValidateConfigure.html#method-c-__def_validcmd","(scope, klass, keys=nil)",""],["__define_LoadImages_proc_for_compatibility__!","Tk::Tile","classes/Tk/Tile.html#method-c-__define_LoadImages_proc_for_compatibility__-21","()",""],["__define_LoadImages_proc_for_compatibility__!","Tk::Tile","classes/Tk/Tile.html#method-c-__define_LoadImages_proc_for_compatibility__-21","()",""],["__define_LoadImages_proc_for_compatibility__!","Tk::Tile","classes/Tk/Tile.html#method-c-__define_LoadImages_proc_for_compatibility__-21","()",""],["__define_wrapper_proc_for_compatibility__!","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-__define_wrapper_proc_for_compatibility__-21","()",""],["__destroy_hook__","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Canvas","classes/Tk/Canvas.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Itk::Archetype","classes/Tk/Itk/Archetype.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Tcllib::Plotchart::Barchart","classes/Tk/Tcllib/Plotchart/Barchart.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Tcllib::Plotchart::Boxplot","classes/Tk/Tcllib/Plotchart/Boxplot.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Tcllib::Plotchart::PolarPlot","classes/Tk/Tcllib/Plotchart/PolarPlot.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Tcllib::Plotchart::PolarPlot","classes/Tk/Tcllib/Plotchart/PolarPlot.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Tcllib::Plotchart::Radialchart","classes/Tk/Tcllib/Plotchart/Radialchart.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Tcllib::Plotchart::RightAxis","classes/Tk/Tcllib/Plotchart/RightAxis.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-__destroy_hook__","()",""],["__destroy_hook__","Tk::TkTable","classes/Tk/TkTable.html#method-i-__destroy_hook__","()",""],["__disable_toplevel_control__","Tk","classes/Tk.html#method-i-__disable_toplevel_control__","(*symbols)",""],["__drbref","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drbref","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drburi","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__drburi","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__encoding","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-__encoding","()",""],["__eval","MultiTkIp","classes/MultiTkIp.html#method-i-__eval","(str)",""],["__eval","MultiTkIp","classes/MultiTkIp.html#method-i-__eval","(str)",""],["__eval","MultiTkIp","classes/MultiTkIp.html#method-i-__eval","(str)",""],["__eval","MultiTkIp","classes/MultiTkIp.html#method-i-__eval","(str)",""],["__eval","RemoteTkIp","classes/RemoteTkIp.html#method-i-__eval","(str)",""],["__eval","TclTkIp","classes/TclTkIp.html#method-i-__eval","(cmd)",""],["__eval__","TclTkIp","classes/TclTkIp.html#method-i-__eval__","(cmd)",""],["__evaluate__","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-__evaluate__","(context, statements, file = nil, line = nil)",""],["__exit__","IRB::Context","classes/IRB/Context.html#method-i-__exit__","(ret = 0)",""],["__font_optkeys","Tk::BWidget::SelectFont::Dialog","classes/Tk/BWidget/SelectFont/Dialog.html#method-i-__font_optkeys","()",""],["__get_item_validate_key2class","Tk::ItemValidateConfigure","classes/Tk/ItemValidateConfigure.html#method-i-__get_item_validate_key2class","(id)",""],["__get_validate_key2class","Tk::ValidateConfigure","classes/Tk/ValidateConfigure.html#method-i-__get_validate_key2class","()",""],["__getip","MultiTkIp","classes/MultiTkIp.html#method-c-__getip","()",""],["__getip","MultiTkIp","classes/MultiTkIp.html#method-c-__getip","()",""],["__getip","MultiTkIp","classes/MultiTkIp.html#method-c-__getip","()",""],["__getip","MultiTkIp","classes/MultiTkIp.html#method-c-__getip","()",""],["__getobj__","Delegator","classes/Delegator.html#method-i-__getobj__","()","<p>This method must be overridden by subclasses and should return the object\nmethod calls are being delegated …\n"],["__getobj__","SimpleDelegator","classes/SimpleDelegator.html#method-i-__getobj__","()","<p>Returns the current object method calls are being delegated to.\n"],["__id__","BasicObject","classes/BasicObject.html#method-i-__id__","()","<p>Returns an integer identifier for <em>obj</em>. The same number will be\nreturned on all calls to <code>id</code> for a given …\n"],["__import_toplevel_aliases__","Tk","classes/Tk.html#method-i-__import_toplevel_aliases__","(target, *symbols)",""],["__init_ip_env__","MultiTkIp","classes/MultiTkIp.html#method-c-__init_ip_env__","(table, script)",""],["__init_ip_env__","MultiTkIp","classes/MultiTkIp.html#method-c-__init_ip_env__","(table, script)",""],["__init_ip_env__","MultiTkIp","classes/MultiTkIp.html#method-c-__init_ip_env__","(table, script)",""],["__init_ip_env__","MultiTkIp","classes/MultiTkIp.html#method-c-__init_ip_env__","(table, script)",""],["__initialize__","TclTkIp","classes/TclTkIp.html#method-i-__initialize__","(*args)",""],["__inspect__","IRB::Context","classes/IRB/Context.html#method-i-__inspect__","()",""],["__instance_eval","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-__instance_eval","(*args, &b)",""],["__instance_variable_get","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-__instance_variable_get","(key)","<p>wrapper methods for compatibility\n"],["__instance_variable_set","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-__instance_variable_set","(key, value)",""],["__instance_variables","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-__instance_variables","()",""],["__invoke","MultiTkIp","classes/MultiTkIp.html#method-i-__invoke","(*args)",""],["__invoke","MultiTkIp","classes/MultiTkIp.html#method-i-__invoke","(*args)",""],["__invoke","MultiTkIp","classes/MultiTkIp.html#method-i-__invoke","(*args)",""],["__invoke","MultiTkIp","classes/MultiTkIp.html#method-i-__invoke","(*args)",""],["__invoke","RemoteTkIp","classes/RemoteTkIp.html#method-i-__invoke","(*args)",""],["__invoke","TclTkIp","classes/TclTkIp.html#method-i-__invoke","(*cmds)",""],["__invoke__","TclTkIp","classes/TclTkIp.html#method-i-__invoke__","(*cmds)",""],["__item_validation_class_list","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-__item_validation_class_list","(id)",""],["__item_validation_class_list","Tk::ItemValidateConfigure","classes/Tk/ItemValidateConfigure.html#method-i-__item_validation_class_list","(id)",""],["__item_validcmd_call","Tk::ItemValidateConfigure","classes/Tk/ItemValidateConfigure.html#method-i-__item_validcmd_call","(tagOrId, klass, key, *args, &b)",""],["__itemcget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-__itemcget","(tagOrId, option)",""],["__itemcget","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-__itemcget","(tagOrId, option)",""],["__itemcget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-__itemcget_strict","(tagOrId, option)",""],["__itemcget_strict","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-__itemcget_strict","(tagOrId, option)",""],["__itemcget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-__itemcget_tkstring","(tagOrId, option)",""],["__itemcget_tkstring","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-__itemcget_tkstring","(tagOrId, option)",""],["__itemconfiginfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-__itemconfiginfo","(tagOrId, slot = nil)",""],["__itemconfiginfo_core","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-__itemconfiginfo_core","(tagOrId, slot = nil)",""],["__itemconfigure","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-__itemconfigure","(tagOrId, slot, value=None)",""],["__method__","Kernel","classes/Kernel.html#method-i-__method__","()","<p>Returns the name of the current method as a Symbol. If called outside of a\nmethod, it returns <code>nil</code>.\n"],["__method_missing_alias_for_MultiTkIp__","Object","classes/Object.html#method-i-__method_missing_alias_for_MultiTkIp__","(id, *args)",""],["__methodcall_optkeys","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-__methodcall_optkeys","()",""],["__new","MultiTkIp","classes/MultiTkIp.html#method-c-__new","(ip, cmd)",""],["__new","MultiTkIp","classes/MultiTkIp.html#method-c-__new","(ip, cmd)",""],["__new","MultiTkIp","classes/MultiTkIp.html#method-c-__new","(ip, cmd)",""],["__new","MultiTkIp","classes/MultiTkIp.html#method-c-__new","(ip, cmd)",""],["__new__","TclTkIp","classes/TclTkIp.html#method-c-__new__","(p1 = v1, p2 = v2)",""],["__pathname","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-__pathname","()",""],["__pathname","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-__pathname","()",""],["__pseudo_toplevel","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel","()",""],["__pseudo_toplevel","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel","()","<p>instance method\n"],["__pseudo_toplevel","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel","()","<p>instance method\n"],["__pseudo_toplevel","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel","()","<p>instance method\n"],["__pseudo_toplevel","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel","()",""],["__pseudo_toplevel","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel","()",""],["__pseudo_toplevel","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel","()","<p>instance method\n"],["__pseudo_toplevel","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel","()",""],["__pseudo_toplevel=","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel-3D","(m)",""],["__pseudo_toplevel=","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel-3D","(m)",""],["__pseudo_toplevel=","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel-3D","(m)",""],["__pseudo_toplevel=","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel-3D","(m)",""],["__pseudo_toplevel=","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel-3D","(m)",""],["__pseudo_toplevel=","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel-3D","(m)",""],["__pseudo_toplevel=","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel-3D","(m)",""],["__pseudo_toplevel=","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel-3D","(m)",""],["__pseudo_toplevel_evaluable=","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel_evaluable-3D","(mode)",""],["__pseudo_toplevel_evaluable=","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel_evaluable-3D","(mode)",""],["__pseudo_toplevel_evaluable=","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel_evaluable-3D","(mode)",""],["__pseudo_toplevel_evaluable=","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel_evaluable-3D","(mode)",""],["__pseudo_toplevel_evaluable=","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel_evaluable-3D","(mode)",""],["__pseudo_toplevel_evaluable=","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel_evaluable-3D","(mode)",""],["__pseudo_toplevel_evaluable=","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel_evaluable-3D","(mode)",""],["__pseudo_toplevel_evaluable=","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel_evaluable-3D","(mode)",""],["__pseudo_toplevel_evaluable?","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel_evaluable-3F","()",""],["__pseudo_toplevel_evaluable?","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel_evaluable-3F","()",""],["__pseudo_toplevel_evaluable?","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel_evaluable-3F","()",""],["__pseudo_toplevel_evaluable?","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel_evaluable-3F","()",""],["__pseudo_toplevel_evaluable?","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel_evaluable-3F","()",""],["__pseudo_toplevel_evaluable?","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel_evaluable-3F","()",""],["__pseudo_toplevel_evaluable?","MultiTkIp","classes/MultiTkIp.html#method-c-__pseudo_toplevel_evaluable-3F","()",""],["__pseudo_toplevel_evaluable?","MultiTkIp","classes/MultiTkIp.html#method-i-__pseudo_toplevel_evaluable-3F","()",""],["__regist_toplevel_aliases__","Tk","classes/Tk.html#method-i-__regist_toplevel_aliases__","(target, obj, *symbols)",""],["__remove_toplevel_aliases__","Tk","classes/Tk.html#method-i-__remove_toplevel_aliases__","(*symbols)",""],["__reset_toplevel_owner__","Tk","classes/Tk.html#method-i-__reset_toplevel_owner__","(*symbols)",""],["__send__","BasicObject","classes/BasicObject.html#method-i-__send__","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["__set_IGNORE_UNKNOWN_CONFIGURE_OPTION__!","TkItemConfigMethod","classes/TkItemConfigMethod.html#method-c-__set_IGNORE_UNKNOWN_CONFIGURE_OPTION__-21","(mode)",""],["__set_loaded_toplevel_aliases__","Tk","classes/Tk.html#method-i-__set_loaded_toplevel_aliases__","(autopath, target, obj, *symbols)",""],["__set_toplevel_aliases__","Tk","classes/Tk.html#method-i-__set_toplevel_aliases__","(target, obj, *symbols)",""],["__setobj__","Delegator","classes/Delegator.html#method-i-__setobj__","(obj)","<p>This method must be overridden by subclasses and change the object delegate\nto <em>obj</em>.\n"],["__setobj__","SimpleDelegator","classes/SimpleDelegator.html#method-i-__setobj__","(obj)","<p>Changes the delegate object to <em>obj</em>.\n<p>It&#39;s important to note that this does <strong>not</strong> cause\nSimpleDelegator&#39;s …\n"],["__tile_specific_item_optkeys","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-__tile_specific_item_optkeys","(id)",""],["__to_s__","IRB::Context","classes/IRB/Context.html#method-i-__to_s__","()",""],["__toplevel_alias_setup_proc__","Tk","classes/Tk.html#method-i-__toplevel_alias_setup_proc__","(*target_list, &cmd)",""],["__validation_class_list","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-__validation_class_list","()",""],["__validation_class_list","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::Iwidgets::Calendar","classes/Tk/Iwidgets/Calendar.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::TkTable","classes/Tk/TkTable.html#method-i-__validation_class_list","()",""],["__validation_class_list","Tk::ValidateConfigure","classes/Tk/ValidateConfigure.html#method-i-__validation_class_list","()",""],["__validation_class_list","TkValidation","classes/TkValidation.html#method-i-__validation_class_list","()",""],["__validcmd_call","Tk::ValidateConfigure","classes/Tk/ValidateConfigure.html#method-i-__validcmd_call","(klass, key, *args, &b)",""],["_add_new_tables","MultiTkIp","classes/MultiTkIp.html#method-i-_add_new_tables","()",""],["_add_new_tables","MultiTkIp","classes/MultiTkIp.html#method-i-_add_new_tables","()",""],["_add_new_tables","MultiTkIp","classes/MultiTkIp.html#method-i-_add_new_tables","()",""],["_add_new_tables","MultiTkIp","classes/MultiTkIp.html#method-i-_add_new_tables","()",""],["_add_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-i-_add_tk_procs","(name, args, body)",""],["_add_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-i-_add_tk_procs","(name, args, body)",""],["_add_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-i-_add_tk_procs","(name, args, body)",""],["_add_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-i-_add_tk_procs","(name, args, body)",""],["_at","TkComm","classes/TkComm.html#method-c-_at","(x,y=nil)",""],["_barmcmd","DemoBasic","classes/DemoBasic.html#method-c-_barmcmd","(value, but, arr1, arr2)",""],["_brelief","DemoBasic","classes/DemoBasic.html#method-c-_brelief","(relief, but, arr1, arr2)",""],["_bside","DemoBasic","classes/DemoBasic.html#method-c-_bside","(side, *args)",""],["_bstate","DemoBasic","classes/DemoBasic.html#method-c-_bstate","(state, but, arr1, arr2)",""],["_butcmd","DemoBasic","classes/DemoBasic.html#method-c-_butcmd","(reason)",""],["_button","DemoBasic","classes/DemoBasic.html#method-c-_button","(parent)",""],["_callback_entry?","TkComm","classes/TkComm.html#method-c-_callback_entry-3F","(obj)",""],["_callback_entry_class?","TkComm","classes/TkComm.html#method-c-_callback_entry_class-3F","(cls)",""],["_cancel_eval","TclTkIp","classes/TclTkIp.html#method-i-_cancel_eval","(p1 = v1)",""],["_cancel_eval_unwind","TclTkIp","classes/TclTkIp.html#method-i-_cancel_eval_unwind","(p1 = v1)",""],["_config_keys","Tk::BLT::DragDrop::PackageCommand","classes/Tk/BLT/DragDrop/PackageCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::BLT::DragDrop::SiteCommand","classes/Tk/BLT/DragDrop/SiteCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::BLT::Treeview::FindExecFlagValue","classes/Tk/BLT/Treeview/FindExecFlagValue.html#method-c-_config_keys","()",""],["_config_keys","Tk::BLT::Treeview::OpenCloseCommand","classes/Tk/BLT/Treeview/OpenCloseCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::Iwidgets::Calendar::CalendarCommand","classes/Tk/Iwidgets/Calendar/CalendarCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::Iwidgets::Entryfield::EntryfieldValidate","classes/Tk/Iwidgets/Entryfield/EntryfieldValidate.html#method-c-_config_keys","()",""],["_config_keys","Tk::Iwidgets::Hierarchy::IconCommand","classes/Tk/Iwidgets/Hierarchy/IconCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::Iwidgets::Hierarchy::IndicatorCommand","classes/Tk/Iwidgets/Hierarchy/IndicatorCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::Iwidgets::Hierarchy::QueryCommand","classes/Tk/Iwidgets/Hierarchy/QueryCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::Iwidgets::Spinner::EntryfieldValidate","classes/Tk/Iwidgets/Spinner/EntryfieldValidate.html#method-c-_config_keys","()",""],["_config_keys","Tk::Spinbox::SpinCommand","classes/Tk/Spinbox/SpinCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::Tile::TSpinbox::SpinCommand","classes/Tk/Tile/TSpinbox/SpinCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::TkTable::BrowseCommand","classes/Tk/TkTable/BrowseCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::TkTable::CellCommand","classes/Tk/TkTable/CellCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::TkTable::SelectionCommand","classes/Tk/TkTable/SelectionCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::TkTable::ValidateCommand","classes/Tk/TkTable/ValidateCommand.html#method-c-_config_keys","()",""],["_config_keys","Tk::Winico::Winico_callback","classes/Tk/Winico/Winico_callback.html#method-c-_config_keys","()",""],["_config_keys","TkValidateCommand","classes/TkValidateCommand.html#method-c-_config_keys","()",""],["_conv_args","TkUtil","classes/TkUtil.html#method-c-_conv_args","(*args)",""],["_conv_args","TkUtil","classes/TkUtil.html#method-i-_conv_args","(*args)",""],["_conv_listelement","MultiTkIp","classes/MultiTkIp.html#method-i-_conv_listelement","(arg)",""],["_conv_listelement","MultiTkIp","classes/MultiTkIp.html#method-i-_conv_listelement","(arg)",""],["_conv_listelement","MultiTkIp","classes/MultiTkIp.html#method-i-_conv_listelement","(arg)",""],["_conv_listelement","MultiTkIp","classes/MultiTkIp.html#method-i-_conv_listelement","(arg)",""],["_conv_listelement","RemoteTkIp","classes/RemoteTkIp.html#method-i-_conv_listelement","(str)",""],["_conv_listelement","TclTkIp","classes/TclTkIp.html#method-i-_conv_listelement","(p1)",""],["_conv_listelement","TclTkLib","classes/TclTkLib.html#method-i-_conv_listelement","(arg)",""],["_conv_listelement","TclTkLib","classes/TclTkLib.html#method-c-_conv_listelement","(p1)",""],["_create","BWidget_Demo","classes/BWidget_Demo.html#method-i-_create","()",""],["_create_console","MultiTkIp","classes/MultiTkIp.html#method-i-_create_console","()",""],["_create_console","MultiTkIp","classes/MultiTkIp.html#method-i-_create_console","()",""],["_create_console","MultiTkIp","classes/MultiTkIp.html#method-i-_create_console","()",""],["_create_console","MultiTkIp","classes/MultiTkIp.html#method-i-_create_console","()",""],["_create_console","RemoteTkIp","classes/RemoteTkIp.html#method-i-_create_console","()",""],["_create_console","TclTkIp","classes/TclTkIp.html#method-i-_create_console","()",""],["_create_intro","BWidget_Demo","classes/BWidget_Demo.html#method-i-_create_intro","()",""],["_create_marks","Clock","classes/Clock.html#method-i-_create_marks","()",""],["_create_slave_object","MultiTkIp","classes/MultiTkIp.html#method-i-_create_slave_object","(keys={})",""],["_create_slave_object","MultiTkIp","classes/MultiTkIp.html#method-i-_create_slave_object","(keys={})",""],["_create_slave_object","MultiTkIp","classes/MultiTkIp.html#method-i-_create_slave_object","(keys={})",""],["_create_slave_object","MultiTkIp","classes/MultiTkIp.html#method-i-_create_slave_object","(keys={})",""],["_curr_cmd_id","TkComm","classes/TkComm.html#method-c-_curr_cmd_id","()","<p>### –&gt; definition is moved to TkUtil module def _get_eval_string(str,\nenc_mode = nil)\n\n<pre><code>return nil if ...</code></pre>\n"],["_default_delete_hook","MultiTkIp","classes/MultiTkIp.html#method-i-_default_delete_hook","(slave)",""],["_default_delete_hook","MultiTkIp","classes/MultiTkIp.html#method-i-_default_delete_hook","(slave)",""],["_default_delete_hook","MultiTkIp","classes/MultiTkIp.html#method-i-_default_delete_hook","(slave)",""],["_default_delete_hook","MultiTkIp","classes/MultiTkIp.html#method-i-_default_delete_hook","(slave)",""],["_define_attribute_aliases","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-_define_attribute_aliases","(p1)",""],["_delete_slice","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-_delete_slice","(slice)",""],["_destroy_slaves_of_slaveIP","MultiTkIp","classes/MultiTkIp.html#method-i-_destroy_slaves_of_slaveIP","(ip)",""],["_destroy_slaves_of_slaveIP","MultiTkIp","classes/MultiTkIp.html#method-i-_destroy_slaves_of_slaveIP","(ip)",""],["_destroy_slaves_of_slaveIP","MultiTkIp","classes/MultiTkIp.html#method-i-_destroy_slaves_of_slaveIP","(ip)",""],["_destroy_slaves_of_slaveIP","MultiTkIp","classes/MultiTkIp.html#method-i-_destroy_slaves_of_slaveIP","(ip)",""],["_dump","BigDecimal","classes/BigDecimal.html#method-i-_dump","(p1 = v1)",""],["_dump","DRb::DRbArray","classes/DRb/DRbArray.html#method-i-_dump","(lv)",""],["_dump","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","Gem::Specification","classes/Gem/Specification.html#method-i-_dump","(limit)","<p>Dump only crucial instance variables.\n"],["_dump","Singleton","classes/Singleton.html#method-i-_dump","(depth = -1)","<p>By default, do not retain any state when marshalling.\n"],["_dump","Time","classes/Time.html#method-i-_dump","(p1 = v1)","<p>Dump <em>time</em> for marshaling.\n"],["_dump","Win32::Registry","classes/Win32/Registry.html#method-i-_dump","(depth)","<p>marshalling is not allowed\n"],["_element_value","TkVariable","classes/TkVariable.html#method-i-_element_value","(*idxs)",""],["_element_value","TkVariable","classes/TkVariable.html#method-i-_element_value","(*idxs)",""],["_entry","DemoBasic","classes/DemoBasic.html#method-c-_entry","(parent)",""],["_entry_slice","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-_entry_slice","(slice)",""],["_eval","MultiTkIp","classes/MultiTkIp.html#method-i-_eval","(str)",""],["_eval","MultiTkIp","classes/MultiTkIp.html#method-i-_eval","(str)",""],["_eval","MultiTkIp","classes/MultiTkIp.html#method-i-_eval","(str)",""],["_eval","MultiTkIp","classes/MultiTkIp.html#method-i-_eval","(str)",""],["_eval","RemoteTkIp","classes/RemoteTkIp.html#method-i-_eval","(str)",""],["_eval","TclTkIp","classes/TclTkIp.html#method-i-_eval","(cmd)",""],["_eval_with_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_eval_with_enc","(str)",""],["_eval_with_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_eval_with_enc","(str)",""],["_eval_with_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_eval_with_enc","(str)",""],["_eval_with_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_eval_with_enc","(str)",""],["_eval_with_enc","RemoteTkIp","classes/RemoteTkIp.html#method-i-_eval_with_enc","(str)",""],["_eval_without_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_eval_without_enc","(str)",""],["_eval_without_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_eval_without_enc","(str)",""],["_eval_without_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_eval_without_enc","(str)",""],["_eval_without_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_eval_without_enc","(str)",""],["_eval_without_enc","RemoteTkIp","classes/RemoteTkIp.html#method-i-_eval_without_enc","(str)",""],["_eval_without_enc","TclTkIp","classes/TclTkIp.html#method-i-_eval_without_enc","(cmd)","<p>backup original (without encoding) _eval and _invoke\n"],["_exit","Knights_Tour","classes/Knights_Tour.html#method-i-_exit","()",""],["_find_exec_flag_value","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-_find_exec_flag_value","(val)",""],["_fromUTF8","MultiTkIp","classes/MultiTkIp.html#method-i-_fromUTF8","(str, encoding=nil)",""],["_fromUTF8","MultiTkIp","classes/MultiTkIp.html#method-i-_fromUTF8","(str, encoding=nil)",""],["_fromUTF8","MultiTkIp","classes/MultiTkIp.html#method-i-_fromUTF8","(str, encoding=nil)",""],["_fromUTF8","MultiTkIp","classes/MultiTkIp.html#method-i-_fromUTF8","(str, encoding=nil)",""],["_fromUTF8","RemoteTkIp","classes/RemoteTkIp.html#method-i-_fromUTF8","(str, encoding=nil)",""],["_fromUTF8","TclTkIp","classes/TclTkIp.html#method-i-_fromUTF8","(p1, p2 = v2)",""],["_fromUTF8","TclTkLib","classes/TclTkLib.html#method-c-_fromUTF8","(p1, p2 = v2)",""],["_fromUTF8","TkComm","classes/TkComm.html#method-c-_fromUTF8","(str, encoding = nil)",""],["_fromUTF8","TkUtil","classes/TkUtil.html#method-i-_fromUTF8","(*args)",""],["_genobj_for_tkwidget","TkComm","classes/TkComm.html#method-c-_genobj_for_tkwidget","(path)",""],["_get_all_subst_keys","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-_get_all_subst_keys","()",""],["_get_eval_enc_str","TkUtil","classes/TkUtil.html#method-c-_get_eval_enc_str","(p1)",""],["_get_eval_enc_str","TkUtil","classes/TkUtil.html#method-i-_get_eval_enc_str","(p1)",""],["_get_eval_string","TkUtil","classes/TkUtil.html#method-c-_get_eval_string","(p1, p2 = v2)",""],["_get_eval_string","TkUtil","classes/TkUtil.html#method-i-_get_eval_string","(p1, p2 = v2)",""],["_get_extra_args_tbl","Tk::BWidget::ListBox::Event_for_Items","classes/Tk/BWidget/ListBox/Event_for_Items.html#method-c-_get_extra_args_tbl","()",""],["_get_extra_args_tbl","Tk::BWidget::NoteBook::Event_for_Tabs","classes/Tk/BWidget/NoteBook/Event_for_Tabs.html#method-c-_get_extra_args_tbl","()",""],["_get_extra_args_tbl","Tk::BWidget::Tree::Event_for_Items","classes/Tk/BWidget/Tree/Event_for_Items.html#method-c-_get_extra_args_tbl","()",""],["_get_extra_args_tbl","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-_get_extra_args_tbl","()",""],["_get_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_get_global_var","(var)",""],["_get_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_get_global_var","(var)",""],["_get_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_get_global_var","(var)",""],["_get_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_get_global_var","(var)",""],["_get_global_var","RemoteTkIp","classes/RemoteTkIp.html#method-i-_get_global_var","(var_name)",""],["_get_global_var","TclTkIp","classes/TclTkIp.html#method-i-_get_global_var","(p1)",""],["_get_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_get_global_var2","(var, idx)",""],["_get_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_get_global_var2","(var, idx)",""],["_get_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_get_global_var2","(var, idx)",""],["_get_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_get_global_var2","(var, idx)",""],["_get_global_var2","RemoteTkIp","classes/RemoteTkIp.html#method-i-_get_global_var2","(var_name, index_name)",""],["_get_global_var2","TclTkIp","classes/TclTkIp.html#method-i-_get_global_var2","(p1, p2)",""],["_get_subst_key","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-_get_subst_key","(p1)",""],["_get_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_get_variable","(var, flag)",""],["_get_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_get_variable","(var, flag)",""],["_get_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_get_variable","(var, flag)",""],["_get_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_get_variable","(var, flag)",""],["_get_variable","RemoteTkIp","classes/RemoteTkIp.html#method-i-_get_variable","(var_name, flag)",""],["_get_variable","TclTkIp","classes/TclTkIp.html#method-i-_get_variable","(p1, p2)",""],["_get_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_get_variable2","(var, idx, flag)",""],["_get_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_get_variable2","(var, idx, flag)",""],["_get_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_get_variable2","(var, idx, flag)",""],["_get_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_get_variable2","(var, idx, flag)",""],["_get_variable2","RemoteTkIp","classes/RemoteTkIp.html#method-i-_get_variable2","(var_name, index_name, flag)",""],["_get_variable2","TclTkIp","classes/TclTkIp.html#method-i-_get_variable2","(p1, p2, p3)",""],["_getproperty","WIN32OLE","classes/WIN32OLE.html#method-i-_getproperty","(p1, p2, p3)","<p>Runs the early binding method to get property. The 1st argument specifies\ndispatch ID, the 2nd argument …\n"],["_httpdate","Date","classes/Date.html#method-c-_httpdate","(p1)","<p>Returns a hash of parsed elements.\n"],["_id2ref","ObjectSpace","classes/ObjectSpace.html#method-c-_id2ref","(p1)","<p>Converts an object id to a reference to the object. May not be called on an\nobject id passed as a parameter …\n"],["_immediate_invoke","TclTkIp","classes/TclTkIp.html#method-i-_immediate_invoke","(*args)",""],["_init_ip_env","MultiTkIp","classes/MultiTkIp.html#method-i-_init_ip_env","(script)",""],["_init_ip_env","MultiTkIp","classes/MultiTkIp.html#method-i-_init_ip_env","(script)",""],["_init_ip_env","MultiTkIp","classes/MultiTkIp.html#method-i-_init_ip_env","(script)",""],["_init_ip_env","MultiTkIp","classes/MultiTkIp.html#method-i-_init_ip_env","(script)",""],["_init_ip_internal","MultiTkIp","classes/MultiTkIp.html#method-i-_init_ip_internal","(init_ip_env, add_tk_procs)",""],["_init_ip_internal","MultiTkIp","classes/MultiTkIp.html#method-i-_init_ip_internal","(init_ip_env, add_tk_procs)",""],["_init_ip_internal","MultiTkIp","classes/MultiTkIp.html#method-i-_init_ip_internal","(init_ip_env, add_tk_procs)",""],["_init_ip_internal","MultiTkIp","classes/MultiTkIp.html#method-i-_init_ip_internal","(init_ip_env, add_tk_procs)",""],["_initialize_for_cb_class","TkValidateCommand","classes/TkValidateCommand.html#method-i-_initialize_for_cb_class","(klass, cmd = Proc.new, *args)",""],["_invoke","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke","(*args)",""],["_invoke","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke","(*args)",""],["_invoke","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke","(*args)",""],["_invoke","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke","(*args)",""],["_invoke","RemoteTkIp","classes/RemoteTkIp.html#method-i-_invoke","(*args)",""],["_invoke","TclTkIp","classes/TclTkIp.html#method-i-_invoke","(*cmds)",""],["_invoke","WIN32OLE","classes/WIN32OLE.html#method-i-_invoke","(p1, p2, p3)","<p>Runs the early binding method. The 1st argument specifies dispatch ID, the\n2nd argument specifies the …\n"],["_invoke_with_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke_with_enc","(*args)",""],["_invoke_with_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke_with_enc","(*args)",""],["_invoke_with_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke_with_enc","(*args)",""],["_invoke_with_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke_with_enc","(*args)",""],["_invoke_with_enc","RemoteTkIp","classes/RemoteTkIp.html#method-i-_invoke_with_enc","(*args)",""],["_invoke_without_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke_without_enc","(*args)",""],["_invoke_without_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke_without_enc","(*args)",""],["_invoke_without_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke_without_enc","(*args)",""],["_invoke_without_enc","MultiTkIp","classes/MultiTkIp.html#method-i-_invoke_without_enc","(*args)",""],["_invoke_without_enc","RemoteTkIp","classes/RemoteTkIp.html#method-i-_invoke_without_enc","(*args)",""],["_invoke_without_enc","TclTkIp","classes/TclTkIp.html#method-i-_invoke_without_enc","(*cmds)",""],["_ip_id_","MultiTkIp","classes/MultiTkIp.html#method-c-_ip_id_","()",""],["_ip_id_","MultiTkIp","classes/MultiTkIp.html#method-c-_ip_id_","()",""],["_ip_id_","MultiTkIp","classes/MultiTkIp.html#method-i-_ip_id_","()",""],["_ip_id_","MultiTkIp","classes/MultiTkIp.html#method-c-_ip_id_","()",""],["_ip_id_","MultiTkIp","classes/MultiTkIp.html#method-i-_ip_id_","()",""],["_ip_id_","MultiTkIp","classes/MultiTkIp.html#method-c-_ip_id_","()",""],["_ip_id_","MultiTkIp","classes/MultiTkIp.html#method-i-_ip_id_","()",""],["_ip_id_","MultiTkIp","classes/MultiTkIp.html#method-i-_ip_id_","()",""],["_ip_id_","RemoteTkIp","classes/RemoteTkIp.html#method-i-_ip_id_","()",""],["_ip_id_","TclTkIp","classes/TclTkIp.html#method-i-_ip_id_","()",""],["_is_master_of?","MultiTkIp","classes/MultiTkIp.html#method-i-_is_master_of-3F","(tcltkip_obj)",""],["_is_master_of?","MultiTkIp","classes/MultiTkIp.html#method-i-_is_master_of-3F","(tcltkip_obj)",""],["_is_master_of?","MultiTkIp","classes/MultiTkIp.html#method-i-_is_master_of-3F","(tcltkip_obj)",""],["_is_master_of?","MultiTkIp","classes/MultiTkIp.html#method-i-_is_master_of-3F","(tcltkip_obj)",""],["_is_master_of?","RemoteTkIp","classes/RemoteTkIp.html#method-i-_is_master_of-3F","(tcltkip_obj)",""],["_iso8601","Date","classes/Date.html#method-c-_iso8601","(p1)","<p>Returns a hash of parsed elements.\n"],["_jisx0301","Date","classes/Date.html#method-c-_jisx0301","(p1)","<p>Returns a hash of parsed elements.\n"],["_label","DemoBasic","classes/DemoBasic.html#method-c-_label","(parent)",""],["_load","BigDecimal","classes/BigDecimal.html#method-c-_load","(p1)","<p>Internal method used to provide marshalling support. See the Marshal\nmodule.\n"],["_load","DRb::DRbArray","classes/DRb/DRbArray.html#method-c-_load","(s)",""],["_load","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","Gem::Specification","classes/Gem/Specification.html#method-c-_load","(str)","<p>Load custom marshal format, re-initializing defaults as needed\n"],["_load","Singleton","classes/Singleton.html#method-c-_load","","<p>By default calls instance(). Override to retain singleton state.\n"],["_load","Time","classes/Time.html#method-c-_load","(p1)","<p>Unmarshal a dumped <code>Time</code> object.\n"],["_mainframe","DemoManager","classes/DemoManager.html#method-c-_mainframe","(parent)",""],["_make_menu_embeddable","MultiTkIp","classes/MultiTkIp.html#method-i-_make_menu_embeddable","(menu_path)",""],["_make_menu_embeddable","MultiTkIp","classes/MultiTkIp.html#method-i-_make_menu_embeddable","(menu_path)",""],["_make_menu_embeddable","MultiTkIp","classes/MultiTkIp.html#method-i-_make_menu_embeddable","(menu_path)",""],["_make_menu_embeddable","MultiTkIp","classes/MultiTkIp.html#method-i-_make_menu_embeddable","(menu_path)",""],["_make_menu_embeddable","TclTkIp","classes/TclTkIp.html#method-i-_make_menu_embeddable","(p1)",""],["_merge_tklist","MultiTkIp","classes/MultiTkIp.html#method-i-_merge_tklist","(*args)",""],["_merge_tklist","MultiTkIp","classes/MultiTkIp.html#method-i-_merge_tklist","(*args)",""],["_merge_tklist","MultiTkIp","classes/MultiTkIp.html#method-i-_merge_tklist","(*args)",""],["_merge_tklist","MultiTkIp","classes/MultiTkIp.html#method-i-_merge_tklist","(*args)",""],["_merge_tklist","RemoteTkIp","classes/RemoteTkIp.html#method-i-_merge_tklist","(*args)",""],["_merge_tklist","TclTkIp","classes/TclTkIp.html#method-i-_merge_tklist","(*args)",""],["_merge_tklist","TclTkLib","classes/TclTkLib.html#method-i-_merge_tklist","(*args)",""],["_merge_tklist","TclTkLib","classes/TclTkLib.html#method-c-_merge_tklist","(*args)",""],["_msgdlg","DemoDialog","classes/DemoDialog.html#method-c-_msgdlg","(parent)",""],["_next_cmd_id","TkComm","classes/TkComm.html#method-c-_next_cmd_id","()",""],["_notebook","DemoManager","classes/DemoManager.html#method-c-_notebook","(parent)",""],["_paned","DemoManager","classes/DemoManager.html#method-c-_paned","(parent)",""],["_parse","Date","classes/Date.html#method-c-_parse","(*args)","<p>Parses the given representation of date and time, and returns a hash of\nparsed elements.\n<p>If the optional …\n"],["_parse_menu_spec","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-_parse_menu_spec","(menu_spec)",""],["_proc_on_current_safelevel","MultiTkIp","classes/MultiTkIp.html#method-i-_proc_on_current_safelevel","(cmd=nil, &blk)",""],["_proc_on_current_safelevel","MultiTkIp","classes/MultiTkIp.html#method-c-_proc_on_current_safelevel","(cmd=nil, &blk)",""],["_proc_on_current_safelevel","MultiTkIp","classes/MultiTkIp.html#method-c-_proc_on_current_safelevel","(cmd=nil, &blk)",""],["_proc_on_current_safelevel","MultiTkIp","classes/MultiTkIp.html#method-c-_proc_on_current_safelevel","(cmd=nil, &blk)",""],["_proc_on_current_safelevel","MultiTkIp","classes/MultiTkIp.html#method-i-_proc_on_current_safelevel","(cmd=nil, &blk)",""],["_proc_on_current_safelevel","MultiTkIp","classes/MultiTkIp.html#method-i-_proc_on_current_safelevel","(cmd=nil, &blk)",""],["_proc_on_current_safelevel","MultiTkIp","classes/MultiTkIp.html#method-i-_proc_on_current_safelevel","(cmd=nil, &blk)",""],["_proc_on_current_safelevel","MultiTkIp","classes/MultiTkIp.html#method-c-_proc_on_current_safelevel","(cmd=nil, &blk)",""],["_proc_on_safelevel","MultiTkIp","classes/MultiTkIp.html#method-i-_proc_on_safelevel","(cmd=nil, &blk)","<p>instance &amp; class method\n"],["_proc_on_safelevel","MultiTkIp","classes/MultiTkIp.html#method-c-_proc_on_safelevel","(cmd=nil, &blk)",""],["_proc_on_safelevel","MultiTkIp","classes/MultiTkIp.html#method-c-_proc_on_safelevel","(cmd=nil, &blk)",""],["_proc_on_safelevel","MultiTkIp","classes/MultiTkIp.html#method-c-_proc_on_safelevel","(cmd=nil, &blk)",""],["_proc_on_safelevel","MultiTkIp","classes/MultiTkIp.html#method-i-_proc_on_safelevel","(cmd=nil, &blk)","<p>instance &amp; class method\n"],["_proc_on_safelevel","MultiTkIp","classes/MultiTkIp.html#method-i-_proc_on_safelevel","(cmd=nil, &blk)","<p>instance &amp; class method\n"],["_proc_on_safelevel","MultiTkIp","classes/MultiTkIp.html#method-c-_proc_on_safelevel","(cmd=nil, &blk)",""],["_proc_on_safelevel","MultiTkIp","classes/MultiTkIp.html#method-i-_proc_on_safelevel","(cmd=nil, &blk)","<p>instance &amp; class method\n"],["_puts","Object","classes/Object.html#method-i-_puts","(*args)",""],["_receiver_mainloop","MultiTkIp","classes/MultiTkIp.html#method-i-_receiver_mainloop","(check_root)",""],["_receiver_mainloop","MultiTkIp","classes/MultiTkIp.html#method-i-_receiver_mainloop","(check_root)",""],["_receiver_mainloop","MultiTkIp","classes/MultiTkIp.html#method-i-_receiver_mainloop","(check_root)",""],["_receiver_mainloop","MultiTkIp","classes/MultiTkIp.html#method-i-_receiver_mainloop","(check_root)",""],["_remove_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-i-_remove_tk_procs","(*names)",""],["_remove_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-i-_remove_tk_procs","(*names)",""],["_remove_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-i-_remove_tk_procs","(*names)",""],["_remove_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-i-_remove_tk_procs","(*names)",""],["_return_value","MultiTkIp","classes/MultiTkIp.html#method-i-_return_value","()",""],["_return_value","MultiTkIp","classes/MultiTkIp.html#method-i-_return_value","()",""],["_return_value","MultiTkIp","classes/MultiTkIp.html#method-i-_return_value","()",""],["_return_value","MultiTkIp","classes/MultiTkIp.html#method-i-_return_value","()",""],["_return_value","RemoteTkIp","classes/RemoteTkIp.html#method-i-_return_value","()",""],["_return_value","TclTkIp","classes/TclTkIp.html#method-i-_return_value","()","<p>get return code from Tcl_Eval()\n"],["_rfc2822","Date","classes/Date.html#method-c-_rfc2822","(p1)","<p>Returns a hash of parsed elements.\n"],["_rfc3339","Date","classes/Date.html#method-c-_rfc3339","(p1)","<p>Returns a hash of parsed elements.\n"],["_rfc822","Date","classes/Date.html#method-c-_rfc822","(p1)","<p>Returns a hash of parsed elements.\n"],["_round_poly2","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-_round_poly2","(x0, y0, x1, y1, x2, y2, radius)",""],["_set_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_set_global_var","(var, value)",""],["_set_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_set_global_var","(var, value)",""],["_set_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_set_global_var","(var, value)",""],["_set_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_set_global_var","(var, value)",""],["_set_global_var","RemoteTkIp","classes/RemoteTkIp.html#method-i-_set_global_var","(var_name, value)",""],["_set_global_var","TclTkIp","classes/TclTkIp.html#method-i-_set_global_var","(p1, p2)",""],["_set_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_set_global_var2","(var, idx, value)",""],["_set_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_set_global_var2","(var, idx, value)",""],["_set_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_set_global_var2","(var, idx, value)",""],["_set_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_set_global_var2","(var, idx, value)",""],["_set_global_var2","RemoteTkIp","classes/RemoteTkIp.html#method-i-_set_global_var2","(var_name, index_name, value)",""],["_set_global_var2","TclTkIp","classes/TclTkIp.html#method-i-_set_global_var2","(p1, p2, p3)",""],["_set_last_value","IRB::Context","classes/IRB/Context.html#method-i-_set_last_value","(value)",""],["_set_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_set_variable","(var, value, flag)",""],["_set_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_set_variable","(var, value, flag)",""],["_set_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_set_variable","(var, value, flag)",""],["_set_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_set_variable","(var, value, flag)",""],["_set_variable","RemoteTkIp","classes/RemoteTkIp.html#method-i-_set_variable","(var_name, value, flag)",""],["_set_variable","TclTkIp","classes/TclTkIp.html#method-i-_set_variable","(p1, p2, p3)",""],["_set_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_set_variable2","(var, idx, value, flag)",""],["_set_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_set_variable2","(var, idx, value, flag)",""],["_set_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_set_variable2","(var, idx, value, flag)",""],["_set_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_set_variable2","(var, idx, value, flag)",""],["_set_variable2","RemoteTkIp","classes/RemoteTkIp.html#method-i-_set_variable2","(var_name, index_name, value, flag)",""],["_set_variable2","TclTkIp","classes/TclTkIp.html#method-i-_set_variable2","(p1, p2, p3, p4)",""],["_setproperty","WIN32OLE","classes/WIN32OLE.html#method-i-_setproperty","(p1, p2, p3)","<p>Runs the early binding method to set property. The 1st argument specifies\ndispatch ID, the 2nd argument …\n"],["_setup_subst_table","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-_setup_subst_table","(p1, p2, p3 = v3)",""],["_show_color","DemoDialog","classes/DemoDialog.html#method-c-_show_color","(w)",""],["_show_fontdlg","DemoDialog","classes/DemoDialog.html#method-c-_show_fontdlg","()",""],["_show_msgdlg","DemoDialog","classes/DemoDialog.html#method-c-_show_msgdlg","()",""],["_show_passdlg","DemoDialog","classes/DemoDialog.html#method-c-_show_passdlg","()",""],["_show_progdlg","DemoDialog","classes/DemoDialog.html#method-c-_show_progdlg","()",""],["_show_progress","DemoManager","classes/DemoManager.html#method-c-_show_progress","()",""],["_show_tmpldlg","DemoDialog","classes/DemoDialog.html#method-c-_show_tmpldlg","()",""],["_split_tklist","MultiTkIp","classes/MultiTkIp.html#method-i-_split_tklist","(str)",""],["_split_tklist","MultiTkIp","classes/MultiTkIp.html#method-i-_split_tklist","(str)",""],["_split_tklist","MultiTkIp","classes/MultiTkIp.html#method-i-_split_tklist","(str)",""],["_split_tklist","MultiTkIp","classes/MultiTkIp.html#method-i-_split_tklist","(str)",""],["_split_tklist","RemoteTkIp","classes/RemoteTkIp.html#method-i-_split_tklist","(str)",""],["_split_tklist","TclTkIp","classes/TclTkIp.html#method-i-_split_tklist","(p1)",""],["_split_tklist","TclTkLib","classes/TclTkLib.html#method-c-_split_tklist","(p1)",""],["_stddlg","DemoDialog","classes/DemoDialog.html#method-c-_stddlg","(parent)",""],["_stop","Knights_Tour","classes/Knights_Tour.html#method-i-_stop","()",""],["_strptime","Date","classes/Date.html#method-c-_strptime","(*args)","<p>Parses the given representation of date and time with the given template,\nand returns a hash of parsed …\n"],["_strptime","DateTime","classes/DateTime.html#method-c-_strptime","(*args)","<p>Parses the given representation of date and time with the given template,\nand returns a hash of parsed …\n"],["_subst_Tcl_backslash","TclTkLib","classes/TclTkLib.html#method-c-_subst_Tcl_backslash","(p1)",""],["_subst_UTF_backslash","TclTkLib","classes/TclTkLib.html#method-c-_subst_UTF_backslash","(p1)",""],["_sym2subst","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-_sym2subst","(p1)",""],["_symbolkey2str","TkUtil","classes/TkUtil.html#method-c-_symbolkey2str","(p1)",""],["_symbolkey2str","TkUtil","classes/TkUtil.html#method-i-_symbolkey2str","(p1)",""],["_thread_tkwait","MultiTkIp","classes/MultiTkIp.html#method-i-_thread_tkwait","(mode, target)",""],["_thread_tkwait","MultiTkIp","classes/MultiTkIp.html#method-i-_thread_tkwait","(mode, target)",""],["_thread_tkwait","MultiTkIp","classes/MultiTkIp.html#method-i-_thread_tkwait","(mode, target)",""],["_thread_tkwait","MultiTkIp","classes/MultiTkIp.html#method-i-_thread_tkwait","(mode, target)",""],["_thread_tkwait","RemoteTkIp","classes/RemoteTkIp.html#method-i-_thread_tkwait","(mode, target)",""],["_thread_tkwait","TclTkIp","classes/TclTkIp.html#method-i-_thread_tkwait","(p1, p2)",""],["_thread_vwait","MultiTkIp","classes/MultiTkIp.html#method-i-_thread_vwait","(var)",""],["_thread_vwait","MultiTkIp","classes/MultiTkIp.html#method-i-_thread_vwait","(var)",""],["_thread_vwait","MultiTkIp","classes/MultiTkIp.html#method-i-_thread_vwait","(var)",""],["_thread_vwait","MultiTkIp","classes/MultiTkIp.html#method-i-_thread_vwait","(var)",""],["_thread_vwait","RemoteTkIp","classes/RemoteTkIp.html#method-i-_thread_vwait","(var_name)",""],["_thread_vwait","TclTkIp","classes/TclTkIp.html#method-i-_thread_vwait","(p1)",""],["_tk_cmd_tbl","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_cmd_tbl","()",""],["_tk_cmd_tbl","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_cmd_tbl","()",""],["_tk_cmd_tbl","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_cmd_tbl","()",""],["_tk_cmd_tbl","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_cmd_tbl","()",""],["_tk_table_list","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_table_list","()",""],["_tk_table_list","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_table_list","()",""],["_tk_table_list","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_table_list","()",""],["_tk_table_list","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_table_list","()",""],["_tk_windows","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_windows","()",""],["_tk_windows","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_windows","()",""],["_tk_windows","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_windows","()",""],["_tk_windows","MultiTkIp","classes/MultiTkIp.html#method-i-_tk_windows","()",""],["_tmpldlg","DemoDialog","classes/DemoDialog.html#method-c-_tmpldlg","(parent)",""],["_toUTF8","MultiTkIp","classes/MultiTkIp.html#method-i-_toUTF8","(str, encoding=nil)",""],["_toUTF8","MultiTkIp","classes/MultiTkIp.html#method-i-_toUTF8","(str, encoding=nil)",""],["_toUTF8","MultiTkIp","classes/MultiTkIp.html#method-i-_toUTF8","(str, encoding=nil)",""],["_toUTF8","MultiTkIp","classes/MultiTkIp.html#method-i-_toUTF8","(str, encoding=nil)",""],["_toUTF8","RemoteTkIp","classes/RemoteTkIp.html#method-i-_toUTF8","(str, encoding=nil)",""],["_toUTF8","TclTkIp","classes/TclTkIp.html#method-i-_toUTF8","(p1, p2 = v2)",""],["_toUTF8","TclTkLib","classes/TclTkLib.html#method-c-_toUTF8","(p1, p2 = v2)",""],["_toUTF8","TkComm","classes/TkComm.html#method-c-_toUTF8","(str, encoding = nil)",""],["_toUTF8","TkUtil","classes/TkUtil.html#method-i-_toUTF8","(*args)",""],["_unset_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_global_var","(var)",""],["_unset_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_global_var","(var)",""],["_unset_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_global_var","(var)",""],["_unset_global_var","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_global_var","(var)",""],["_unset_global_var","RemoteTkIp","classes/RemoteTkIp.html#method-i-_unset_global_var","(var_name)",""],["_unset_global_var","TclTkIp","classes/TclTkIp.html#method-i-_unset_global_var","(p1)",""],["_unset_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_global_var2","(var, idx)",""],["_unset_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_global_var2","(var, idx)",""],["_unset_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_global_var2","(var, idx)",""],["_unset_global_var2","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_global_var2","(var, idx)",""],["_unset_global_var2","RemoteTkIp","classes/RemoteTkIp.html#method-i-_unset_global_var2","(var_name, index_name)",""],["_unset_global_var2","TclTkIp","classes/TclTkIp.html#method-i-_unset_global_var2","(p1, p2)",""],["_unset_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_variable","(var, flag)",""],["_unset_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_variable","(var, flag)",""],["_unset_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_variable","(var, flag)",""],["_unset_variable","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_variable","(var, flag)",""],["_unset_variable","RemoteTkIp","classes/RemoteTkIp.html#method-i-_unset_variable","(var_name, flag)",""],["_unset_variable","TclTkIp","classes/TclTkIp.html#method-i-_unset_variable","(p1, p2)",""],["_unset_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_variable2","(var, idx, flag)",""],["_unset_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_variable2","(var, idx, flag)",""],["_unset_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_variable2","(var, idx, flag)",""],["_unset_variable2","MultiTkIp","classes/MultiTkIp.html#method-i-_unset_variable2","(var, idx, flag)",""],["_unset_variable2","RemoteTkIp","classes/RemoteTkIp.html#method-i-_unset_variable2","(var_name, index_name, flag)",""],["_unset_variable2","TclTkIp","classes/TclTkIp.html#method-i-_unset_variable2","(p1, p2, p3)",""],["_update_progdlg","DemoDialog","classes/DemoDialog.html#method-c-_update_progdlg","()",""],["_update_progress","DemoManager","classes/DemoManager.html#method-c-_update_progress","()",""],["_value","TkVariable","classes/TkVariable.html#method-i-_value","()","<p>use Tcl function version of set tkvariable\n"],["_value","TkVariable","classes/TkVariable.html#method-i-_value","()","<p>use Tcl function version of set tkvariable\n"],["_xmlschema","Date","classes/Date.html#method-c-_xmlschema","(p1)","<p>Returns a hash of parsed elements.\n"],["`","Kernel","classes/Kernel.html#method-i-60","(p1)","<p>Returns the standard output of running <em>cmd</em> in a subshell. The\nbuilt-in syntax <code>%x{...}</code> uses this method. …\n"],["a","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-a","(href = \"\")","<p>Generate an Anchor element as a string.\n<p><code>href</code> can either be a string, giving the URL for the HREF\nattribute, …\n"],["abbrev","Abbrev","classes/Abbrev.html#method-c-abbrev","(words, pattern = nil)","<p>Given a set of strings, calculate the set of unambiguous abbreviations for\nthose strings, and return …\n"],["abbrev","Array","classes/Array.html#method-i-abbrev","(pattern = nil)","<p>Calculates the set of unambiguous abbreviations for the strings in\n<code>self</code>. If passed a pattern or a string, …\n"],["abbreviate","Gem::Indexer","classes/Gem/Indexer.html#method-i-abbreviate","(spec)","<p>Abbreviate the spec for downloading.  Abbreviated specs are only used for\nsearching, downloading and …\n"],["abbreviate","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-abbreviate","( path )",""],["abort","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-abort","()","<p>VOID abort abort an asynchronous download\n"],["abort","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-abort","()","<p>VOID abort Abort HTTP request\n"],["abort","Kernel","classes/Kernel.html#method-i-abort","(p1)","<p>Terminate execution immediately, effectively by calling\n<code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-abort","()","<p>VOID abort abort an asynchronous download\n"],["abort","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-abort","()","<p>VOID abort abort an asynchronous download\n"],["abort","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-abort","()","<p>VOID abort Abort HTTP request\n"],["abort","MultiTkIp","classes/MultiTkIp.html#method-i-abort","(msg = nil)",""],["abort","MultiTkIp","classes/MultiTkIp.html#method-i-abort","(msg = nil)",""],["abort","MultiTkIp","classes/MultiTkIp.html#method-i-abort","(msg = nil)",""],["abort","MultiTkIp","classes/MultiTkIp.html#method-i-abort","(msg = nil)",""],["abort","Net::FTP","classes/Net/FTP.html#method-i-abort","()","<p>Aborts the previous command (ABOR command).\n"],["abort","OptionParser","classes/OptionParser.html#method-i-abort","(mesg = $!)",""],["abort","PStore","classes/PStore.html#method-i-abort","()","<p>Ends the current PStore#transaction, discarding any changes to the data\nstore.\n<p>Example:\n\n<pre><code>require &quot;pstore&quot; ...\n</code></pre>\n"],["abort","Process","classes/Process.html#method-c-abort","(p1)","<p>Terminate execution immediately, effectively by calling\n<code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort_on_exception","Thread","classes/Thread.html#method-c-abort_on_exception","()","<p>Returns the status of the global “abort on exception&#39;&#39; condition. \nThe default is <code>false</code>. When …\n"],["abort_on_exception","Thread","classes/Thread.html#method-i-abort_on_exception","()","<p>Returns the status of the thread-local “abort on exception&#39;&#39;\ncondition for <em>thr</em>. The default …\n"],["abort_on_exception=","Thread","classes/Thread.html#method-c-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, all threads will abort if an exception is\nraised. Returns the new state.\n\n<pre><code>Thread.abort_on_exception ...</code></pre>\n"],["abort_on_exception=","Thread","classes/Thread.html#method-i-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, causes all threads (including the main\nprogram) to abort if an exception is raised …\n"],["about","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-about","()",""],["above","TkcTag","classes/TkcTag.html#method-i-above","(target)",""],["abs","BigDecimal","classes/BigDecimal.html#method-i-abs","()","<p>Returns the absolute value.\n<p>BigDecimal(&#39;5&#39;).abs -&gt; 5\n<p>BigDecimal(&#39;-3&#39;).abs -&gt; 3\n"],["abs","Bignum","classes/Bignum.html#method-i-abs","()","<p>Returns the absolute value of <em>big</em>.\n\n<pre><code>-1234567890987654321.abs   #=&gt; 1234567890987654321\n</code></pre>\n"],["abs","Complex","classes/Complex.html#method-i-abs","()","<p>Returns the absolute part of its polar form.\n"],["abs","Fixnum","classes/Fixnum.html#method-i-abs","()","<p>Returns the absolute value of <em>fix</em>.\n\n<pre><code>-12345.abs   #=&gt; 12345\n12345.abs    #=&gt; 12345\n</code></pre>\n"],["abs","Float","classes/Float.html#method-i-abs","()","<p>Returns the absolute value of <em>flt</em>.\n\n<pre><code>(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n</code></pre>\n"],["abs","Numeric","classes/Numeric.html#method-i-abs","()","<p>Returns the absolute value of <em>num</em>.\n\n<pre><code>12.abs         #=&gt; 12\n(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n</code></pre>\n"],["abs2","Complex","classes/Complex.html#method-i-abs2","()","<p>Returns square of the absolute value.\n"],["abs2","Numeric","classes/Numeric.html#method-i-abs2","()","<p>Returns square of self.\n"],["absolute","URI::Generic","classes/URI/Generic.html#method-i-absolute","()",""],["absolute?","Pathname","classes/Pathname.html#method-i-absolute-3F","()","<p>Predicate method for testing whether a path is absolute. It returns\n<code>true</code> if the pathname begins with …\n"],["absolute?","Resolv::DNS::Name","classes/Resolv/DNS/Name.html#method-i-absolute-3F","()","<p>True if this name is absolute.\n"],["absolute?","URI::Generic","classes/URI/Generic.html#method-i-absolute-3F","()","<p>Checks if URI is an absolute one\n"],["absoluteChildNumber","IXTLRuntime","classes/IXTLRuntime.html#method-i-absoluteChildNumber","(arg0)","<p>I4 absoluteChildNumber\n\n<pre><code>IXMLDOMNode arg0 --- pNode [IN]</code></pre>\n"],["absolute_path","File","classes/File.html#method-c-absolute_path","(p1, p2 = v2)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["accept","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-i-accept","()",""],["accept","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-accept","(tcp)",""],["accept","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-accept","()","<p>On the server side, for an instance returned by #open_server, accept a\nclient connection and return a …\n"],["accept","DRb::DRbUNIXSocket","classes/DRb/DRbUNIXSocket.html#method-i-accept","()",""],["accept","DRb::HTTP0::Server","classes/DRb/HTTP0/Server.html#method-i-accept","()",""],["accept","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-accept","()","<p>Waits for a SSL/TLS client to initiate a handshake.  The handshake may be\nstarted after unencrypted data …\n"],["accept","OptionParser","classes/OptionParser.html#method-c-accept","(*args, &blk)","<p>See #accept.\n"],["accept","OptionParser","classes/OptionParser.html#method-i-accept","(*args, &blk)","<p>Directs to accept specified class <code>t</code>. The argument string is\npassed to the block in which it should be …\n"],["accept","OptionParser::List","classes/OptionParser/List.html#method-i-accept","(t, pat = /.*/m, &block)","<p>See OptionParser.accept.\n"],["accept","Psych::Visitors::JSONTree","classes/Psych/Visitors/JSONTree.html#method-i-accept","(target)",""],["accept","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-accept","(target)",""],["accept","Psych::Visitors::Visitor","classes/Psych/Visitors/Visitor.html#method-i-accept","(target)",""],["accept","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-accept","(target)",""],["accept","RDoc::Markup::BlankLine","classes/RDoc/Markup/BlankLine.html#method-i-accept","(visitor)","<p>Calls #accept_blank_line on <code>visitor</code>\n"],["accept","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-accept","(visitor)","<p>Runs this document and all its #items through <code>visitor</code>\n"],["accept","RDoc::Markup::Heading","classes/RDoc/Markup/Heading.html#method-i-accept","(visitor)","<p>Calls #accept_heading on <code>visitor</code>\n"],["accept","RDoc::Markup::IndentedParagraph","classes/RDoc/Markup/IndentedParagraph.html#method-i-accept","(visitor)","<p>Calls #accept_indented_paragraph on <code>visitor</code>\n"],["accept","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-accept","(visitor)","<p>Runs this list and all its #items through <code>visitor</code>\n"],["accept","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-accept","(visitor)","<p>Runs this list item and all its #parts through <code>visitor</code>\n"],["accept","RDoc::Markup::Paragraph","classes/RDoc/Markup/Paragraph.html#method-i-accept","(visitor)","<p>Calls #accept_paragraph on <code>visitor</code>\n"],["accept","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-accept","(visitor)","<p>Calls #accept_raw+ on <code>visitor</code>\n"],["accept","RDoc::Markup::Rule","classes/RDoc/Markup/Rule.html#method-i-accept","(visitor)","<p>Calls #accept_rule on <code>visitor</code>\n"],["accept","RDoc::Markup::Verbatim","classes/RDoc/Markup/Verbatim.html#method-i-accept","(visitor)","<p>Calls #accept_verbatim on <code>visitor</code>\n"],["accept","Socket","classes/Socket.html#method-i-accept","()","<p>Accepts a next connection. Returns a new Socket object and Addrinfo object.\n\n<pre><code>serv = Socket.new(:INET, :STREAM, ...</code></pre>\n"],["accept","TCPServer","classes/TCPServer.html#method-i-accept","()","<p>TCPServer.open(“127.0.0.1”, 14641) {|serv|\n\n<pre><code>s = serv.accept\ns.puts Time.now\ns.close</code></pre>\n<p>}\n"],["accept","UNIXServer","classes/UNIXServer.html#method-i-accept","()","<p>Accepts a new connection. It returns new UNIXSocket object.\n\n<pre><code>UNIXServer.open(&quot;/tmp/sock&quot;) {|serv|\n  UNIXSocket.open(&quot;/tmp/sock&quot;) ...\n</code></pre>\n"],["accept_blank_line","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_blank_line","(blank_line)","<p>Adds <code>blank_line</code> to the output\n"],["accept_blank_line","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_blank_line","(blank_line)","<p>Adds <code>blank_line</code> to the output\n"],["accept_blank_line","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_blank_line","(markup_item)",""],["accept_charset","CGI","classes/CGI.html#method-c-accept_charset","()","<p>Return the accept character set for all new CGI instances.\n"],["accept_charset=","CGI","classes/CGI.html#method-c-accept_charset-3D","(accept_charset)","<p>Set the accept character set for all new CGI instances.\n"],["accept_document","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-accept_document","(document)","<p>Adds <code>document</code> to the output\n"],["accept_heading","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-accept_heading","(heading)","<p>Makes heading text bold.\n"],["accept_heading","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output\n"],["accept_heading","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output\n"],["accept_heading","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_heading","(markup_item)",""],["accept_indented_paragraph","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_indented_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_list_end","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_list_end","(list)","<p>Pops the list type for <code>list</code> from #list_type\n"],["accept_list_item_end","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-i-accept_list_item_end","(list_item)","<p>Overrides indent width to ensure output lines up correctly.\n"],["accept_list_item_end","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_list_item_end","(markup_item)",""],["accept_list_item_start","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-i-accept_list_item_start","(list_item)","<p>Adds coloring to note and label list items\n"],["accept_list_item_start","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_start","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_list_start","(list)","<p>Pushes the list type for <code>list</code> onto #list_type\n"],["accept_loop","Socket","classes/Socket.html#method-c-accept_loop","(*sockets)","<p>yield socket and client address for each a connection accepted via given\nsockets.\n<p>The arguments are a …\n"],["accept_nonblock","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-accept_nonblock","()","<p>Initiates the SSL/TLS handshake as a server in non-blocking manner.\n\n<pre><code># emulates blocking accept\nbegin\n ...</code></pre>\n"],["accept_nonblock","Socket","classes/Socket.html#method-i-accept_nonblock","()","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["accept_nonblock","TCPServer","classes/TCPServer.html#method-i-accept_nonblock","()","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["accept_nonblock","UNIXServer","classes/UNIXServer.html#method-i-accept_nonblock","()","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["accept_paragraph","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_paragraph","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_paragraph","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_raw","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_raw","(raw)","<p>Adds <code>raw</code> to the output\n"],["accept_raw","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_raw","(raw)","<p>Adds <code>raw</code> to the output\n"],["accept_raw","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_raw","(markup_item)",""],["accept_rule","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_rule","(markup_item)",""],["accept_uri_http","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-accept_uri_http","()","<p>Allows OptionParser to handle HTTP URIs.\n"],["accept_verbatim","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_verbatim","(verbatim)","<p>Adds <code>verbatim</code> to the output\n"],["accept_verbatim","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_verbatim","(verbatim)","<p>Outputs <code>verbatim</code> indented 2 columns\n"],["accept_verbatim","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_verbatim","(markup_item)",""],["access_log","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-access_log","(config, req, res)",""],["acct","Net::FTP","classes/Net/FTP.html#method-i-acct","(account)","<p>Sends the ACCT command.\n<p>This is a less common FTP command, to send account information if the\ndestination …\n"],["ack","Object","classes/Object.html#method-i-ack","(m, n)",""],["acos","CMath","classes/CMath.html#method-c-acos","(z)","<p>returns the arc cosine of <code>z</code>\n"],["acos","Math","classes/Math.html#method-c-acos","(p1)","<p>Computes the arc cosine of <em>x</em>. Returns 0..PI.\n"],["acos!","CMath","classes/CMath.html#method-c-acos-21","(z)",""],["acosh","CMath","classes/CMath.html#method-c-acosh","(z)","<p>returns the inverse hyperbolic cosine of <code>z</code>\n"],["acosh","Math","classes/Math.html#method-c-acosh","(p1)","<p>Computes the inverse hyperbolic cosine of <em>x</em>.\n"],["acosh!","CMath","classes/CMath.html#method-c-acosh-21","(z)",""],["activate","Gem","classes/Gem.html#method-c-activate","(dep, *requirements)","<p>Activates an installed gem matching <code>dep</code>.  The gem must satisfy\n<code>requirements</code>.\n<p>Returns true if the gem is …\n"],["activate","Gem::Specification","classes/Gem/Specification.html#method-i-activate","()","<p>Activate this spec, registering it as a loaded spec and adding it&#39;s lib\npaths to $LOAD_PATH. Returns …\n"],["activate","NthToggle","classes/NthToggle.html#method-i-activate","()",""],["activate","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-activate","(pc)",""],["activate","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-activate","(*args)",""],["activate","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-activate","(*args)",""],["activate","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-activate","(index)",""],["activate","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-i-activate","()",""],["activate","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-activate","(y)",""],["activate","Tk::Iwidgets::Shell","classes/Tk/Iwidgets/Shell.html#method-i-activate","()",""],["activate","Tk::Listbox","classes/Tk/Listbox.html#method-i-activate","(y)",""],["activate","Tk::Menu","classes/Tk/Menu.html#method-i-activate","(index)",""],["activate","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-activate","(index)",""],["activate","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-activate","(index)",""],["activate","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-activate","(element=None)",""],["activate","Tk::TkTable","classes/Tk/TkTable.html#method-i-activate","(idx)",""],["activate","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-activate","(idx)",""],["activate","TkMultiListbox","classes/TkMultiListbox.html#method-i-activate","(idx)",""],["activate","Toggle","classes/Toggle.html#method-i-activate","()",""],["activate_dependencies","Gem::Specification","classes/Gem/Specification.html#method-i-activate_dependencies","()","<p>Activate all unambiguously resolved runtime dependencies of this spec. Add\nany ambigous dependencies …\n"],["active","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-active","()",""],["active?","Net::HTTP","classes/Net/HTTP.html#method-i-active-3F","()",""],["active?","Net::HTTP","classes/Net/HTTP.html#method-i-active-3F","()",""],["active?","Net::POP3","classes/Net/POP3.html#method-i-active-3F","()",""],["active?","Net::POP3","classes/Net/POP3.html#method-i-active-3F","()",""],["active?","Net::POP3","classes/Net/POP3.html#method-i-active-3F","()",""],["active?","Net::POP3","classes/Net/POP3.html#method-i-active-3F","()",""],["active?","Shell::BuiltInCommand","classes/Shell/BuiltInCommand.html#method-i-active-3F","()",""],["active?","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-active-3F","()",""],["active_GUI","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-active_GUI","(var1, var2, op)",""],["active_job?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-active_job-3F","(job)",""],["active_jobs","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-active_jobs","()",""],["active_jobs_exist?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-active_jobs_exist-3F","()",""],["active_legend","Tk::BLT","classes/Tk/BLT.html#method-c-active_legend","(graph)",""],["active_legend","Tk::BLT::GraphCommand","classes/Tk/BLT/GraphCommand.html#method-i-active_legend","()",""],["active_process_controllers","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-active_process_controllers","()",""],["actual","TkFont","classes/TkFont.html#method-c-actual","(fnt, option=nil)",""],["actual","TkFont","classes/TkFont.html#method-i-actual","(option=nil)",""],["actual","TkFont","classes/TkFont.html#method-c-actual","(fnt, option=nil)",""],["actual","TkFont","classes/TkFont.html#method-i-actual","(option=nil)",""],["actual_displayof","TkFont","classes/TkFont.html#method-c-actual_displayof","(fnt, win, option=nil)",""],["actual_displayof","TkFont","classes/TkFont.html#method-c-actual_displayof","(fnt, win, option=nil)",""],["actual_displayof","TkFont","classes/TkFont.html#method-i-actual_displayof","(win, option=nil)",""],["actual_displayof","TkFont","classes/TkFont.html#method-i-actual_displayof","(win, option=nil)",""],["actual_hash","TkFont","classes/TkFont.html#method-c-actual_hash","(fnt, option=nil)",""],["actual_hash","TkFont","classes/TkFont.html#method-i-actual_hash","(option=nil)",""],["actual_hash","TkFont","classes/TkFont.html#method-i-actual_hash","(option=nil)",""],["actual_hash","TkFont","classes/TkFont.html#method-c-actual_hash","(fnt, option=nil)",""],["actual_hash_displayof","TkFont","classes/TkFont.html#method-c-actual_hash_displayof","(fnt, option=nil)",""],["actual_hash_displayof","TkFont","classes/TkFont.html#method-i-actual_hash_displayof","(win, option=nil)",""],["actual_hash_displayof","TkFont","classes/TkFont.html#method-i-actual_hash_displayof","(win, option=nil)",""],["actual_hash_displayof","TkFont","classes/TkFont.html#method-c-actual_hash_displayof","(fnt, option=nil)",""],["add","ACL::ACLList","classes/ACL/ACLList.html#method-i-add","(str)","<p>Adds <code>str</code> as an ACLEntry in this list\n"],["add","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-add","()","<p>Returns a new Tms object whose times are the sum of the times for this Tms\nobject, plus the time required …\n"],["add","BigDecimal","classes/BigDecimal.html#method-i-add","(p1, p2)",""],["add","CompositePublisher","classes/CompositePublisher.html#method-i-add","(pub)","<p>Add a publisher to the composite.\n"],["add","DRb::TimerIdConv::TimerHolder2","classes/DRb/TimerIdConv/TimerHolder2.html#method-i-add","(obj)",""],["add","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-add","(*gemspecs)","<p>Adds <code>gemspecs</code> to the dependency list.\n"],["add","Logger","classes/Logger.html#method-i-add","(severity, message = nil, progname = nil, &block)","<p>Synopsis\n\n<pre><code>Logger#add(severity, message = nil, progname = nil) { ... }</code></pre>\n<p>Args\n"],["add","Object::Syck::Map","classes/Object/Syck/Map.html#method-i-add","(p1, p2)","<p>YAML::Syck::Map.add\n"],["add","Object::Syck::Seq","classes/Object/Syck/Seq.html#method-i-add","(p1)","<p>YAML::Syck::Seq.add\n"],["add","PrettyPrint::Text","classes/PrettyPrint/Text.html#method-i-add","(obj, width)",""],["add","Psych::Coder","classes/Psych/Coder.html#method-i-add","(k, v)",""],["add","REXML::DocType","classes/REXML/DocType.html#method-i-add","(child)",""],["add","REXML::Document","classes/REXML/Document.html#method-i-add","( child )","<p>We override this, because XMLDecls and DocTypes must go at the start of the\ndocument\n"],["add","REXML::Parent","classes/REXML/Parent.html#method-i-add","( object )",""],["add","Rake::CompositePublisher","classes/Rake/CompositePublisher.html#method-i-add","(pub)","<p>Add a publisher to the composite.\n"],["add","Rake::FileList","classes/Rake/FileList.html#method-i-add","(*filenames)",""],["add","Rinda::TupleBag::TupleBin","classes/Rinda/TupleBag/TupleBin.html#method-i-add","(tuple)",""],["add","Set","classes/Set.html#method-i-add","(o)","<p>Adds the given object to the set and returns self.  Use <code>merge</code>\nto add many elements at once.\n"],["add","Syck::Mapping","classes/Syck/Mapping.html#method-i-add","( k, v )",""],["add","Syck::Sequence","classes/Syck/Sequence.html#method-i-add","( v )",""],["add","Syck::Stream","classes/Syck/Stream.html#method-i-add","( doc )",""],["add","ThreadGroup","classes/ThreadGroup.html#method-i-add","(p1)","<p>Adds the given <em>thread</em> to this group, removing it from any other\ngroup to which it may have previously …\n"],["add","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-add","(container, *args)",""],["add","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-i-add","(*nodes)",""],["add","Tk::BWidget::ButtonBox","classes/Tk/BWidget/ButtonBox.html#method-i-add","(keys={}, &b)",""],["add","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-add","(keys={}, &b)",""],["add","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-add","(widget, keys={})",""],["add","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-add","(page, &b)",""],["add","Tk::BWidget::PagesManager","classes/Tk/BWidget/PagesManager.html#method-i-add","(page, &b)",""],["add","Tk::BWidget::PanedWindow","classes/Tk/BWidget/PanedWindow.html#method-i-add","(keys={})",""],["add","Tk::BWidget::PanelFrame","classes/Tk/BWidget/PanelFrame.html#method-i-add","(win, keys={})",""],["add","Tk::BWidget::StatusBar","classes/Tk/BWidget/StatusBar.html#method-i-add","(win, keys={})",""],["add","Tk::Clock","classes/Tk/Clock.html#method-c-add","(clk, *args)",""],["add","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-add","(tag=nil, keys={})",""],["add","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-add","(tag=nil, keys={})",""],["add","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-add","(tag=nil, keys={})",""],["add","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-add","(type, tag=nil, keys={})",""],["add","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-add","(keys={})",""],["add","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-add","(tag=nil, keys={})",""],["add","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-add","(tag=nil, keys={})",""],["add","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-add","(keys={})",""],["add","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-add","(keys={})",""],["add","Tk::Iwidgets::Toolbar","classes/Tk/Iwidgets/Toolbar.html#method-i-add","(type, tag=nil, keys={})",""],["add","Tk::Menu","classes/Tk/Menu.html#method-i-add","(type, keys=nil)",""],["add","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-add","(value)",""],["add","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-add","(value)",""],["add","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-add","(*args)","<p>def create_self(keys)\n\n<pre><code>if keys and keys != None\n  tk_call_without_enc(&#39;panedwindow&#39;, @path, *hash_kv(keys, ...</code></pre>\n"],["add","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-add","(*args)","<p>def create_self(keys)\n\n<pre><code>if keys and keys != None\n  tk_call_without_enc(&#39;panedwindow&#39;, @path, *hash_kv(keys, ...</code></pre>\n"],["add","Tk::RbWidget::AlignBox","classes/Tk/RbWidget/AlignBox.html#method-i-add","(*widgets)",""],["add","Tk::RbWidget::Combobox","classes/Tk/RbWidget/Combobox.html#method-i-add","(ent)",""],["add","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-i-add","(what, *args)",""],["add","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-add","(what, *args)",""],["add","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-add","(what, *args)",""],["add","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-i-add","(w, keys={})",""],["add","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-add","(*args)",""],["add","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-add","(child, keys=nil)",""],["add","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-add","(child, keys=nil)",""],["add","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-add","(*args)",""],["add","TkGrid","classes/TkGrid.html#method-c-add","(widget, *args)",""],["add","TkGrid","classes/TkGrid.html#method-c-add","(widget, *args)",""],["add","TkOptionDB","classes/TkOptionDB.html#method-c-add","(pat, value, pri=None)",""],["add","TkOptionDB","classes/TkOptionDB.html#method-c-add","(pat, value, pri=None)",""],["add","TkOptionDB","classes/TkOptionDB.html#method-c-add","(pat, value, pri=None)",""],["add","TkTextTag","classes/TkTextTag.html#method-i-add","(*indices)",""],["add","TkTextTag","classes/TkTextTag.html#method-i-add","(*indices)",""],["add","TkcGroup","classes/TkcGroup.html#method-i-add","(*tags)",""],["add","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-i-add","(group, members)","<p>Add an Array of <code>members</code> to <code>group</code>\n"],["add!","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-add-21","(&blk)","<p>An in-place version of #add.\n"],["add?","Set","classes/Set.html#method-i-add-3F","(o)","<p>Adds the given object to the set and returns self.  If the object is\nalready in the set, returns nil. …\n"],["add_alias","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-add_alias","(an_alias, context = nil)","<p>Adds <code>an_alias</code> as an alias for this method in\n<code>context</code>.\n"],["add_alias","RDoc::Attr","classes/RDoc/Attr.html#method-i-add_alias","(an_alias, context)","<p>Add <code>an_alias</code> as an attribute in <code>context</code>.\n"],["add_alias","RDoc::Context","classes/RDoc/Context.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> that is automatically resolved\n"],["add_alias","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-add_alias","(an_alias, context)","<p>Abstract method. Contexts in their building phase call this to register a\nnew alias for this known method/attribute. …\n"],["add_alias","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_alias","(as)","<p>Records the parsing of an alias <code>as</code>.\n"],["add_alias","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_also_in","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_also_in","(out, also_in)","<p>Adds paths for undocumented classes <code>also_in</code> to\n<code>out</code>\n"],["add_attribute","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-add_attribute","(p1)",""],["add_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-add_attribute","(attribute)","<p>Adds <code>attribute</code> if not already there. If it is (as method(s) or\nattribute), updates the comment if it …\n"],["add_attribute","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_attribute","(attribute)","<p>Records the parsing of an attribute <code>attribute</code>\n"],["add_attribute","REXML::Element","classes/REXML/Element.html#method-i-add_attribute","( key, value=nil )","<p>Adds an attribute to this element, overwriting any existing attribute by\nthe same name.\n<p>key &mdash; can be either …\n"],["add_attributes","REXML::Element","classes/REXML/Element.html#method-i-add_attributes","(hash)","<p>Add multiple attributes to this element.\n<p>hash &mdash; is either a hash, or array of arrays\n\n\n<pre><code>el.add_attributes( {&quot;name1&quot;=&gt;&quot;value1&quot;, ...\n</code></pre>\n"],["add_authenticator","Net::IMAP","classes/Net/IMAP.html#method-c-add_authenticator","(auth_type, authenticator)","<p>Adds an authenticator for Net::IMAP#authenticate.  <code>auth_type</code>\nis the type of authentication this authenticator …\n"],["add_bindir","Gem::Specification","classes/Gem/Specification.html#method-i-add_bindir","(executables)","<p>Returns an array with bindir attached to each executable in the\n<code>executables</code> list\n"],["add_builtin_type","Syck","classes/Syck.html#method-c-add_builtin_type","( type_tag, &transfer_proc )","<p>Add a transfer method for a builtin type\n"],["add_builtin_type","Syck","classes/Syck.html#method-c-add_builtin_type","( type_tag, &transfer_proc )","<p>Add a transfer method for a builtin type\n"],["add_bulk_threshold_option","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-add_bulk_threshold_option","()","<p>Add the –bulk-threshold option\n"],["add_cascade","Tk::Menu","classes/Tk/Menu.html#method-i-add_cascade","(keys=nil)",""],["add_cell","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-add_cell","(*args)",""],["add_cert","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-add_cert","(p1)",""],["add_certid","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-add_certid","(p1)",""],["add_certificate","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_certificate","(p1)",""],["add_checkbutton","Tk::Menu","classes/Tk/Menu.html#method-i-add_checkbutton","(keys=nil)",""],["add_class","RDoc::Context","classes/RDoc/Context.html#method-i-add_class","(class_type, given_name, superclass = '::Object')","<p>Adds a class named <code>given_name</code> with <code>superclass</code>.\n<p>Both <code>given_name</code> and <code>superclass</code> may contain\n&#39;::&#39;, …\n"],["add_class","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_class","(out, name, classes)","<p>Adds a class header to <code>out</code> for class <code>name</code> which\nis described in <code>classes</code>.\n"],["add_class","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_class","(klass)","<p>Records the parsing of a class <code>klass</code>\n"],["add_class_or_module","RDoc::Context","classes/RDoc/Context.html#method-i-add_class_or_module","(mod, self_hash, all_hash)","<p>Adds the class or module <code>mod</code> to the modules or classes Hash\n<code>self_hash</code>, and to <code>all_hash</code> (either\n<code>TopLevel::modules_hash</code> …\n"],["add_clear_sources_option","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-add_clear_sources_option","()","<p>Add the –clear-sources option\n"],["add_col","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-add_col","(*args)",""],["add_command","Tk::Menu","classes/Tk/Menu.html#method-i-add_command","(keys=nil)",""],["add_comment","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-add_comment","(comment, location)","<p>Adds <code>comment</code> to this ClassModule&#39;s list of comments at\n<code>location</code>.  This method is preferred over  …\n"],["add_common_option","Gem::Command","classes/Gem/Command.html#method-c-add_common_option","(*args, &handler)",""],["add_constant","RDoc::Context","classes/RDoc/Context.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> if not already there. If it is, updates the\ncomment, value and/or is_alias_for of the known …\n"],["add_constant","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_constant","(constant)","<p>Records the parsing of <code>constant</code>\n"],["add_constant","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_crl","CHashDir","classes/CHashDir.html#method-i-add_crl","(crl)",""],["add_crl","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_crl","(p1)",""],["add_crl","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-add_crl","(p1)",""],["add_data","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_data","(p1)",""],["add_date","Gem::Server","classes/Gem/Server.html#method-i-add_date","(res)",""],["add_delegate_command_to_shell","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-add_delegate_command_to_shell","(id)",""],["add_dependency","Gem::Specification","classes/Gem/Specification.html#method-i-add_dependency","(gem, *requirements)",""],["add_description","Rake::Task","classes/Rake/Task.html#method-i-add_description","(description)","<p>Add a description to the task.  The description can consist of an option\nargument list (enclosed brackets) …\n"],["add_development_dependency","Gem::Specification","classes/Gem/Specification.html#method-i-add_development_dependency","(gem, *requirements)","<p>Adds a development dependency named <code>gem</code> with\n<code>requirements</code> to this Gem.  For example:\n\n<pre><code>spec.add_development_dependency ...</code></pre>\n"],["add_domain_type","Syck","classes/Syck.html#method-c-add_domain_type","( domain, type_tag, &transfer_proc )","<p>Add a global handler for a YAML domain type.\n"],["add_domain_type","Syck","classes/Syck.html#method-c-add_domain_type","( domain, type_tag, &transfer_proc )","<p>Add a global handler for a YAML domain type.\n"],["add_element","REXML::Document","classes/REXML/Document.html#method-i-add_element","(arg=nil, arg2=nil)",""],["add_element","REXML::Element","classes/REXML/Element.html#method-i-add_element","(element, attrs=nil)","<p>Adds a child to this element, optionally setting attributes in the element.\n<p>element &mdash; optional.  If Element …\n"],["add_entry","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-add_entry","(p1, p2, p3 = v3)",""],["add_event_to_arry","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-add_event_to_arry","( arry, evt )",""],["add_event_to_arry","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-add_event_to_arry","( arry, evt )",""],["add_extension","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-add_extension","(p1)",""],["add_extension","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-add_extension","(p1)",""],["add_extension","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-add_extension","(p1)",""],["add_extra_args","Gem::Command","classes/Gem/Command.html#method-i-add_extra_args","(args)","<p>Adds extra args from ~/.gemrc\n"],["add_field","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-add_field","(key, val)","<p>Ruby 1.8.3 &mdash; Adds a value to a named header field, instead of replacing its value.\nSecond argument <code>val</code> …\n"],["add_file","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-i-add_file","(name, mode)","<p>Adds file <code>name</code> with permissions <code>mode</code>, and yields\nan IO for writing the file to\n"],["add_file","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-add_file","(p1)",""],["add_file","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_file","(file)","<p>Records the parsing of <code>file</code>\n"],["add_file_simple","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-i-add_file_simple","(name, mode, size)","<p>Add file <code>name</code> with permissions <code>mode</code>\n<code>size</code> bytes long.  Yields an IO to write the file to.\n"],["add_filter","Tracer","classes/Tracer.html#method-c-add_filter","(p = proc)","<p>Used to filter unwanted trace output\n<p>Example which only outputs lines of code executed within the Kernel …\n"],["add_found_dependencies","Gem::DependencyInstaller","classes/Gem/DependencyInstaller.html#method-i-add_found_dependencies","(to_do, dependency_list)",""],["add_from","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_from","(out, store)","<p>Adds “(from …)” to <code>out</code> for <code>store</code>\n"],["add_gem_contents","Gem::Package::TarOutput","classes/Gem/Package/TarOutput.html#method-i-add_gem_contents","()","<p>Yields a TarWriter for the data.tar.gz inside a gem-format tar file. The\nyielded TarWriter has been extended …\n"],["add_generator","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-add_generator","(klass)","<p>Add <code>klass</code> that can generate output after parsing\n"],["add_handler","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-c-add_handler","(suffix, handler)","<p>Allow custom handling of requests for files with <code>suffix</code> by\nclass <code>handler</code>\n"],["add_handler","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-i-add_handler","(prefix, obj_or_signature=nil, help=nil, &block)",""],["add_have_children_element","RSS::Element","classes/RSS/Element.html#method-i-add_have_children_element","(variable_name, plural_name)",""],["add_highlight_class","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-add_highlight_class","(klass, col, *keywords)",""],["add_highlight_class_for_regexp","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-add_highlight_class_for_regexp","(klass, col, tcl_regexp)",""],["add_highlight_class_for_special_chars","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-add_highlight_class_for_special_chars","(klass, col, *chrs)",""],["add_highlight_class_with_only_char_start","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-add_highlight_class_with_only_char_start","(klass, col, chr)",""],["add_html","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_html","(tag, name)","<p>Add to the sequences recognized as general markup.\n"],["add_html","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-add_html","(tag, name)","<p>Adds a markup class with <code>name</code> for words surrounded by HTML tag\n<code>tag</code>. To process emphasis tags:\n\n<pre><code>am.add_html ...</code></pre>\n"],["add_import","Rake::Application","classes/Rake/Application.html#method-i-add_import","(fn)","<p>Add a file to the list of files to be imported.\n"],["add_import","Rake::Application","classes/Rake/Application.html#method-i-add_import","(fn)","<p>Add a file to the list of files to be imported.\n"],["add_include","RDoc::Context","classes/RDoc/Context.html#method-i-add_include","(include)","<p>Adds included module <code>include</code> which should be an RDoc::Include\n"],["add_include","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_include","(include)","<p>Adds <code>include</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_includes","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_includes","(out, includes)","<p>Adds <code>includes</code> to <code>out</code>\n"],["add_indicator","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-add_indicator","(keys={}, &b)",""],["add_install_update_options","Gem::InstallUpdateOptions","classes/Gem/InstallUpdateOptions.html#method-i-add_install_update_options","()","<p>Add the install/update options to the option parser.\n"],["add_introspection","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-i-add_introspection","()",""],["add_key_option","Gem::GemcutterUtilities","classes/Gem/GemcutterUtilities.html#method-i-add_key_option","()","<p>Add the –key option\n"],["add_line_numbers","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-add_line_numbers","(src)","<p>Prepend <code>src</code> with line numbers.  Relies on the first line of a\nsource code listing having:\n\n<pre><code># File xxxxx, ...</code></pre>\n"],["add_listener","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::LightParser","classes/REXML/Parsers/LightParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::StreamParser","classes/REXML/Parsers/StreamParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::TreeParser","classes/REXML/Parsers/TreeParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::UltraLightParser","classes/REXML/Parsers/UltraLightParser.html#method-i-add_listener","( listener )",""],["add_loader","Rake::Application","classes/Rake/Application.html#method-i-add_loader","(ext, loader)","<p>Add a loader to handle imported files ending in the extension\n<code>ext</code>.\n"],["add_loader","Rake::Application","classes/Rake/Application.html#method-i-add_loader","(ext, loader)","<p>Add a loader to handle imported files ending in the extension\n<code>ext</code>.\n"],["add_local_remote_options","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-add_local_remote_options","()","<p>Add local/remote options to the command line parser.\n"],["add_maker","RSS::Maker","classes/RSS/Maker.html#method-i-add_maker","(version, normalized_version, maker)",""],["add_map","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-add_map","(klass, subclass, subpath, opts)",""],["add_member","ChatServer","classes/ChatServer.html#method-i-add_member","(there)",""],["add_menu","Tk::Root","classes/Tk/Root.html#method-i-add_menu","(menu_info, tearoff=false, opts=nil)",""],["add_menu","Tk::Toplevel","classes/Tk/Toplevel.html#method-i-add_menu","(menu_info, tearoff=false, opts=nil)",""],["add_menu","TkMenubar","classes/TkMenubar.html#method-i-add_menu","(menu_info, menuspec_opt={})",""],["add_menubar","Tk::Root","classes/Tk/Root.html#method-i-add_menubar","(menu_spec, tearoff=false, opts=nil)",""],["add_menubar","Tk::Toplevel","classes/Tk/Toplevel.html#method-i-add_menubar","(menu_spec, tearoff=false, opts=nil)",""],["add_metadata","Gem::Package::TarOutput","classes/Gem/Package/TarOutput.html#method-i-add_metadata","()","<p>Adds metadata.gz to the gem-format tar file which was saved from a previous\n#add_gem_contents call.\n"],["add_method","RDoc::Context","classes/RDoc/Context.html#method-i-add_method","(method)","<p>Adds <code>method</code> if not already there. If it is (as method or\nattribute), updates the comment if it was empty. …\n"],["add_method","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_method","(method)","<p>Records the parsing of <code>method</code>\n"],["add_method","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_method","(method)","<p>Adds <code>method</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_method","XMLRPC::Service::BasicInterface","classes/XMLRPC/Service/BasicInterface.html#method-i-add_method","(sig, help=nil, meth_name=nil)",""],["add_method_list","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_method_list","(out, methods, name)","<p>Adds a list of <code>methods</code> to <code>out</code> with a heading of\n<code>name</code>\n"],["add_module","RDoc::Context","classes/RDoc/Context.html#method-i-add_module","(class_type, name)","<p>Adds a module named <code>name</code>.  If RDoc already knows\n<code>name</code> is a class then that class is returned instead. …\n"],["add_module","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_module","(mod)","<p>Records the parsing of a module <code>mod</code>\n"],["add_module_alias","RDoc::Context","classes/RDoc/Context.html#method-i-add_module_alias","(from, name, file)","<p>Adds an alias from <code>from</code> (a class or module) to\n<code>name</code> which was defined in <code>file</code>.\n"],["add_multicall","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-i-add_multicall","()",""],["add_name","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-add_name","(nick, opts={})",""],["add_namespace","REXML::Element","classes/REXML/Element.html#method-i-add_namespace","( prefix, uri=nil )","<p>Adds a namespace to this element.\n<p>prefix &mdash; the prefix string, or the namespace URI if <code>uri</code> is not supplied\n…\n"],["add_need_initialize_variable","RSS::Element","classes/RSS/Element.html#method-i-add_need_initialize_variable","(variable_name)",""],["add_need_initialize_variable","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-add_need_initialize_variable","(variable_name, init_value=nil, &init_block)",""],["add_nonce","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-add_nonce","(p1 = v1)",""],["add_nonce","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-add_nonce","(p1 = v1)",""],["add_observer","Observable","classes/Observable.html#method-i-add_observer","(observer, func=:update)","<p>Add <code>observer</code> as an observer on this object. so that it will\nreceive notifications.\n<p><code>observer</code> &mdash; the object …\n"],["add_optimized","RubyVM::Instruction","classes/RubyVM/Instruction.html#method-i-add_optimized","(insn)",""],["add_option","Gem::Command","classes/Gem/Command.html#method-i-add_option","(*opts)","<p>Add a command-line option and handler to the command.\n<p>See OptionParser#make_switch for an explanation …\n"],["add_other_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-add_other_element","(variable_name)",""],["add_owners","Gem::Commands::OwnerCommand","classes/Gem/Commands/OwnerCommand.html#method-i-add_owners","(name, owners)",""],["add_path","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-add_path","(p1)",""],["add_path","TkPackage","classes/TkPackage.html#method-i-add_path","(path)",""],["add_platform","Gem::PlatformMismatch","classes/Gem/PlatformMismatch.html#method-i-add_platform","(platform)",""],["add_platform_option","Gem::VersionOption","classes/Gem/VersionOption.html#method-i-add_platform_option","(task = command, *wrap)","<p>Add the –platform option to the option parser.\n"],["add_plural_form","RSS::Element","classes/RSS/Element.html#method-i-add_plural_form","(singular, plural)",""],["add_prerelease_option","Gem::VersionOption","classes/Gem/VersionOption.html#method-i-add_prerelease_option","(*wrap)","<p>Add the –prerelease option to the option parser.\n"],["add_private_type","Psych","classes/Psych.html#method-c-add_private_type","(type_tag, &block)",""],["add_private_type","Syck","classes/Syck.html#method-c-add_private_type","( type_re, &transfer_proc )","<p>Add a private document type\n"],["add_private_type","Syck","classes/Syck.html#method-c-add_private_type","( type_re, &transfer_proc )","<p>Add a private document type\n"],["add_procs","TkTimer","classes/TkTimer.html#method-i-add_procs","(*procs)",""],["add_procs","TkTimer","classes/TkTimer.html#method-i-add_procs","(*procs)",""],["add_protocol","DRb::DRbProtocol","classes/DRb/DRbProtocol.html#method-c-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["add_proxy_option","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-add_proxy_option","()","<p>Add the –http-proxy option\n"],["add_radiobutton","Tk::Menu","classes/Tk/Menu.html#method-i-add_radiobutton","(keys=nil)",""],["add_recipient","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_recipient","(p1)",""],["add_require","RDoc::Context","classes/RDoc/Context.html#method-i-add_require","(require)","<p>Adds <code>require</code> to this context&#39;s top level\n"],["add_response_handler","Net::IMAP","classes/Net/IMAP.html#method-i-add_response_handler","(handler = Proc.new)","<p>Adds a response handler. For example, to detect when the server sends us a\nnew EXISTS response (which …\n"],["add_revoked","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-add_revoked","(p1)",""],["add_row","CSV","classes/CSV.html#method-i-add_row","(row)",""],["add_row","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-add_row","(*args)",""],["add_ruby_type","Psych","classes/Psych.html#method-c-add_ruby_type","(type_tag, &block)",""],["add_ruby_type","Syck","classes/Syck.html#method-c-add_ruby_type","( type_tag, &transfer_proc )","<p>Add a transfer method for a builtin type\n"],["add_ruby_type","Syck","classes/Syck.html#method-c-add_ruby_type","( type_tag, &transfer_proc )","<p>Add a transfer method for a builtin type\n"],["add_rubygems_trusted_certs","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-add_rubygems_trusted_certs","(store)",""],["add_runtime_dependency","Gem::Specification","classes/Gem/Specification.html#method-i-add_runtime_dependency","(gem, *requirements)","<p>Adds a runtime dependency named <code>gem</code> with\n<code>requirements</code> to this Gem. For example:\n\n<pre><code>spec.add_runtime_dependency ...</code></pre>\n"],["add_sample","Unicodeout_SampleFrame","classes/Unicodeout_SampleFrame.html#method-i-add_sample","(lang, *args)",""],["add_sc","RubyVM::Instruction","classes/RubyVM/Instruction.html#method-i-add_sc","(sci)",""],["add_schedule","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-add_schedule","(command)","<p>schedule a command\n"],["add_section","RDoc::Context","classes/RDoc/Context.html#method-i-add_section","(title, comment)","<p>Returns a section with <code>title</code>, creating it if it doesn&#39;t\nalready exist. <code>comment</code> will be appended to …\n"],["add_self_to_load_path","Gem::Specification","classes/Gem/Specification.html#method-i-add_self_to_load_path","()","<p>Adds this spec&#39;s require paths to LOAD_PATH, in the proper location.\n"],["add_separator","Tk::Menu","classes/Tk/Menu.html#method-i-add_separator","(keys=nil)",""],["add_signatures","Gem::Package::TarOutput","classes/Gem/Package/TarOutput.html#method-i-add_signatures","()","<p>Adds data.tar.gz.sig and metadata.gz.sig to the gem-format tar files if a\nGem::Security::Signer was sent …\n"],["add_signer","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_signer","(p1)",""],["add_source_option","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-add_source_option","()","<p>Add the –source option\n"],["add_spec","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-add_spec","(gem_spec, name = gem_spec.full_name)","<p>Add a gem specification to the source index.\n"],["add_spec","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-add_spec","(gem_spec, name = gem_spec.full_name)","<p>Add a gem specification to the source index.\n"],["add_spec","Gem::Specification","classes/Gem/Specification.html#method-c-add_spec","(spec)","<p>Adds <code>spec</code> to the known specifications, keeping the collection\nproperly sorted.\n"],["add_special","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_special","(pattern, name)","<p>Add to other inline sequences.  For example, we could add WikiWords using\nsomething like:\n\n<pre><code>parser.add_special(/\\b([A-Z][a-z]+[A-Z]\\w+)/, ...</code></pre>\n"],["add_special","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-add_special","(pattern, name)","<p>Adds a special handler for <code>pattern</code> with <code>name</code>.  A\nsimple URL handler would be:\n\n<pre><code>@am.add_special(/((https?:)\\S+\\w)/, ...</code></pre>\n"],["add_specific_extra_args","Gem::Command","classes/Gem/Command.html#method-c-add_specific_extra_args","(cmd,args)","<p>Add a list of extra arguments for the given command.  <code>args</code> may\nbe an array or a string to be split on …\n"],["add_specs","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-add_specs","(*gem_specs)","<p>Add gem specifications to the source index.\n"],["add_specs","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-add_specs","(*gem_specs)","<p>Add gem specifications to the source index.\n"],["add_specs","Gem::Specification","classes/Gem/Specification.html#method-c-add_specs","(*specs)","<p>Adds multiple specs to the known specifications.\n"],["add_status","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-add_status","(p1, p2, p3, p4, p5, p6, p7)",""],["add_tag","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-add_tag","(name, start, stop)","<p>Add a new set of tags for an attribute. We allow separate start and end\ntags for flexibility\n"],["add_target","Rake::RuleRecursionOverflowError","classes/Rake/RuleRecursionOverflowError.html#method-i-add_target","(target)",""],["add_text","REXML::Element","classes/REXML/Element.html#method-i-add_text","( text )","<p>A helper method to add a Text child.  Actual Text instances can be added\nwith regular Parent methods, …\n"],["add_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-c-add_tk_procs","(name, args=nil, body=nil)",""],["add_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-c-add_tk_procs","(name, args=nil, body=nil)",""],["add_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-c-add_tk_procs","(name, args=nil, body=nil)",""],["add_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-c-add_tk_procs","(name, args=nil, body=nil)",""],["add_to","RDoc::Context","classes/RDoc/Context.html#method-i-add_to","(array, thing)","<p>Adds <code>thing</code> to the collection <code>array</code>\n"],["add_to_classes_or_modules","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_to_classes_or_modules","(mod)","<p>Adds class or module <code>mod</code>. Used in the building phase by the\nruby parser.\n"],["add_to_element_method","RSS::Element","classes/RSS/Element.html#method-i-add_to_element_method","(method_name)",""],["add_to_list","MyList","classes/MyList.html#method-i-add_to_list","(obj)",""],["add_to_taskbar","Tk::Winico","classes/Tk/Winico.html#method-i-add_to_taskbar","(keys = {})",""],["add_token","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-add_token","(*tokens)",""],["add_token_listener","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-add_token_listener","(obj)","<p>Adds a token listener <code>obj</code>, but you should probably use\ntoken_listener\n"],["add_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-add_tokens","(*tokens)","<p>Adds <code>tokens</code> to the collected tokens\n"],["add_toolbar","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-add_toolbar","(&b)",""],["add_trace_func","Thread","classes/Thread.html#method-i-add_trace_func","(p1)","<p>Adds <em>proc</em> as a handler for tracing. See\n<code>Thread#set_trace_func</code> and <code>set_trace_func</code>.\n"],["add_trusted_cert","Gem::Security","classes/Gem/Security.html#method-c-add_trusted_cert","(cert, opt = {})","<p>Add certificate to trusted cert list.\n<p>Note: At the moment these are stored in OPT, although that directory …\n"],["add_type","Object::Syck::Resolver","classes/Object/Syck/Resolver.html#method-i-add_type","(p1, p2)","<p>YAML::Syck::Resolver#add_type\n"],["add_unif","RubyVM::Instruction","classes/RubyVM/Instruction.html#method-i-add_unif","(insns)",""],["add_update_sources_option","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-add_update_sources_option","()","<p>Add the –update-sources option\n"],["add_value","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-add_value","(section, key, value)",""],["add_version_option","Gem::VersionOption","classes/Gem/VersionOption.html#method-i-add_version_option","(task = command, *wrap)","<p>Add the –version option to the option parser.\n"],["add_word_pair","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_word_pair","(start, stop, name)","<p>Add to the sequences used to add formatting to an individual word (such as\n<strong>bold</strong>).  Matching entries will …\n"],["add_word_pair","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-add_word_pair","(start, stop, name)","<p>Adds a markup class with <code>name</code> for words wrapped in the\n<code>start</code> and <code>stop</code> character.  To make words wrapped\n…\n"],["addch","Curses","classes/Curses.html#method-c-addch","(p1)","<p>Add a character <code>ch</code>, with attributes, then advance the cursor.\n<p>see also the system manual for curs_addch …\n"],["addch","Curses::Window","classes/Curses/Window.html#method-i-addch","(p1)","<p>Add a character <code>ch</code>, with attributes, to the window, then\nadvance the cursor.\n<p>see also the system manual …\n"],["addmon","Cal","classes/Cal.html#method-i-addmon","(y, m, n)",""],["addr","IPSocket","classes/IPSocket.html#method-i-addr","(*args)","<p>Returns the local address as an array which contains address_family, port,\nhostname and numeric_address. …\n"],["addr","UNIXSocket","classes/UNIXSocket.html#method-i-addr","()","<p>Returns the local address as an array which contains address_family and\nunix_path.\n<p>Example\n\n<pre><code>serv = UNIXServer.new(&quot;/tmp/sock&quot;) ...</code></pre>\n"],["addr","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-addr","()",""],["addstr","Curses","classes/Curses.html#method-c-addstr","(p1)","<p>add a string of characters <code>str</code>, to the window and advance\ncursor\n"],["addstr","Curses::Window","classes/Curses/Window.html#method-i-addstr","(p1)","<p>add a string of characters <code>str</code>, to the window and advance\ncursor\n"],["addtag","Tk::Canvas","classes/Tk/Canvas.html#method-i-addtag","(tag, mode, *args)",""],["addtag","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-addtag","(tag, mode, *args)",""],["addtag","TkcTagAccess","classes/TkcTagAccess.html#method-i-addtag","(tag)",""],["addtag_above","Tk::Canvas","classes/Tk/Canvas.html#method-i-addtag_above","(tagOrId, target)",""],["addtag_above","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-addtag_above","(tagOrId, target)",""],["addtag_all","Tk::Canvas","classes/Tk/Canvas.html#method-i-addtag_all","(tagOrId)",""],["addtag_all","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-addtag_all","(tagOrId)",""],["addtag_below","Tk::Canvas","classes/Tk/Canvas.html#method-i-addtag_below","(tagOrId, target)",""],["addtag_below","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-addtag_below","(tagOrId, target)",""],["addtag_closest","Tk::Canvas","classes/Tk/Canvas.html#method-i-addtag_closest","(tagOrId, x, y, halo=None, start=None)",""],["addtag_closest","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-addtag_closest","(tagOrId, x, y, halo=None, start=None)",""],["addtag_enclosed","Tk::Canvas","classes/Tk/Canvas.html#method-i-addtag_enclosed","(tagOrId, x1, y1, x2, y2)",""],["addtag_enclosed","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-addtag_enclosed","(tagOrId, x1, y1, x2, y2)",""],["addtag_overlapping","Tk::Canvas","classes/Tk/Canvas.html#method-i-addtag_overlapping","(tagOrId, x1, y1, x2, y2)",""],["addtag_overlapping","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-addtag_overlapping","(tagOrId, x1, y1, x2, y2)",""],["addtag_withtag","Tk::Canvas","classes/Tk/Canvas.html#method-i-addtag_withtag","(tagOrId, tag)",""],["addtag_withtag","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-addtag_withtag","(tagOrId, tag)",""],["adler","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-adler","()","<p>Returns the adler-32 checksum.\n"],["adler32","Zlib","classes/Zlib.html#method-c-adler32","(*args)","<p>Calculates Adler-32 checksum for <code>string</code>, and returns updated\nvalue of <code>adler</code>. If <code>string</code> is omitted, it …\n"],["adler32_combine","Zlib","classes/Zlib.html#method-c-adler32_combine","(p1, p2, p3)","<p>Combine two Adler-32 check values in to one.  <code>alder1</code> is the\nfirst Adler-32 value, <code>adler2</code> is the second …\n"],["advise","IO","classes/IO.html#method-i-advise","(p1, p2 = v2, p3 = v3)","\n<pre><code>Announce an intention to access data from the current file in a\nspecific pattern. On platforms that do ...</code></pre>\n"],["afamily","Addrinfo","classes/Addrinfo.html#method-i-afamily","()","<p>returns the address family as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).afamily == Socket::AF_INET #=&gt; ...\n</code></pre>\n"],["after","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-after","(target=None)",""],["ajd","Date","classes/Date.html#method-i-ajd","()","<p>Returns the astronomical Julian day number.  This is a fractional number,\nwhich is not adjusted by the …\n"],["alert","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-alert","(statement, question=nil)","<p>Display an informational alert.  Will ask <code>question</code> if it is\nnot nil.\n"],["alert","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-alert","(*args)",""],["alert_error","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-alert_error","(statement, question=nil)","<p>Display an error message in a location expected to get error messages. Will\nask <code>question</code> if it is not …\n"],["alert_error","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-alert_error","(*args)",""],["alert_warning","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-alert_warning","(statement, question=nil)","<p>Display a warning in a location expected to get error messages.  Will ask\n<code>question</code> if it is not nil. …\n"],["alert_warning","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-alert_warning","(*args)",""],["alias","Psych::Emitter","classes/Psych/Emitter.html#method-i-alias","(p1)","<p>Emit an alias with <code>anchor</code>.\n<p>See Psych::Handler#alias\n"],["alias","Psych::Handler","classes/Psych/Handler.html#method-i-alias","(anchor)","<p>Called when an alias is found to <code>anchor</code>.  <code>anchor</code>\nwill be the name of the anchor found.\n<p>Example\n<p>Here we …\n"],["alias","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-alias","(anchor)",""],["alias_command","Shell","classes/Shell.html#method-c-alias_command","(ali, command, *opts, &block)",""],["alias_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-alias_command","(ali, command, *opts, &block)",""],["alias_delete","MultiTkIp","classes/MultiTkIp.html#method-i-alias_delete","(slave, cmd_name)",""],["alias_delete","MultiTkIp","classes/MultiTkIp.html#method-c-alias_delete","(slave, cmd_name)",""],["alias_delete","MultiTkIp","classes/MultiTkIp.html#method-i-alias_delete","(slave, cmd_name)",""],["alias_delete","MultiTkIp","classes/MultiTkIp.html#method-c-alias_delete","(slave, cmd_name)",""],["alias_delete","MultiTkIp","classes/MultiTkIp.html#method-i-alias_delete","(slave, cmd_name)",""],["alias_delete","MultiTkIp","classes/MultiTkIp.html#method-c-alias_delete","(slave, cmd_name)",""],["alias_delete","MultiTkIp","classes/MultiTkIp.html#method-i-alias_delete","(slave, cmd_name)",""],["alias_delete","MultiTkIp","classes/MultiTkIp.html#method-c-alias_delete","(slave, cmd_name)",""],["alias_extension","RDoc::Parser","classes/RDoc/Parser.html#method-c-alias_extension","(old_ext, new_ext)","<p>Alias an extension to another extension. After this call, files ending\n“new_ext” will be parsed …\n"],["alias_info","MultiTkIp","classes/MultiTkIp.html#method-c-alias_info","(slave, cmd_name)",""],["alias_info","MultiTkIp","classes/MultiTkIp.html#method-i-alias_info","(slave, cmd_name)",""],["alias_info","MultiTkIp","classes/MultiTkIp.html#method-c-alias_info","(slave, cmd_name)",""],["alias_info","MultiTkIp","classes/MultiTkIp.html#method-c-alias_info","(slave, cmd_name)",""],["alias_info","MultiTkIp","classes/MultiTkIp.html#method-i-alias_info","(slave, cmd_name)",""],["alias_info","MultiTkIp","classes/MultiTkIp.html#method-i-alias_info","(slave, cmd_name)",""],["alias_info","MultiTkIp","classes/MultiTkIp.html#method-i-alias_info","(slave, cmd_name)",""],["alias_info","MultiTkIp","classes/MultiTkIp.html#method-c-alias_info","(slave, cmd_name)",""],["alias_map","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-alias_map","()",""],["alias_target","MultiTkIp","classes/MultiTkIp.html#method-i-alias_target","(aliascmd, slave = '')",""],["alias_target","MultiTkIp","classes/MultiTkIp.html#method-i-alias_target","(aliascmd, slave = '')",""],["alias_target","MultiTkIp","classes/MultiTkIp.html#method-c-alias_target","(aliascmd, slave = '')",""],["alias_target","MultiTkIp","classes/MultiTkIp.html#method-i-alias_target","(aliascmd, slave = '')",""],["alias_target","MultiTkIp","classes/MultiTkIp.html#method-i-alias_target","(aliascmd, slave = '')",""],["alias_target","MultiTkIp","classes/MultiTkIp.html#method-c-alias_target","(aliascmd, slave = '')",""],["alias_target","MultiTkIp","classes/MultiTkIp.html#method-c-alias_target","(aliascmd, slave = '')",""],["alias_target","MultiTkIp","classes/MultiTkIp.html#method-c-alias_target","(aliascmd, slave = '')",""],["aliases","Encoding","classes/Encoding.html#method-c-aliases","()","<p>Returns the hash of available encoding alias and original encoding name.\n\n<pre><code>Encoding.aliases\n#=&gt; {&quot;BINARY&quot;=&gt;&quot;ASCII-8BIT&quot;, ...\n</code></pre>\n"],["aliases","MultiTkIp","classes/MultiTkIp.html#method-c-aliases","(slave = '')",""],["aliases","MultiTkIp","classes/MultiTkIp.html#method-i-aliases","(slave = '')",""],["aliases","MultiTkIp","classes/MultiTkIp.html#method-i-aliases","(slave = '')",""],["aliases","MultiTkIp","classes/MultiTkIp.html#method-i-aliases","(slave = '')",""],["aliases","MultiTkIp","classes/MultiTkIp.html#method-c-aliases","(slave = '')",""],["aliases","MultiTkIp","classes/MultiTkIp.html#method-i-aliases","(slave = '')",""],["aliases","MultiTkIp","classes/MultiTkIp.html#method-c-aliases","(slave = '')",""],["aliases","MultiTkIp","classes/MultiTkIp.html#method-c-aliases","(slave = '')",""],["alien","Gem::Validator","classes/Gem/Validator.html#method-i-alien","(gems=[])","<p>Checks the gem directory for the following potential\ninconsistencies/problems:\n<p>Checksum gem itself\n<p>For …\n"],["align","DL::PackInfo","classes/DL/PackInfo.html#method-c-align","(addr, align)",""],["align","Tk::BWidget::LabelFrame","classes/Tk/BWidget/LabelFrame.html#method-c-align","(*args)",""],["align","Tk::RbWidget::AlignBox","classes/Tk/RbWidget/AlignBox.html#method-i-align","()",""],["alignlabels","Tk::Iwidgets::Labeledwidget","classes/Tk/Iwidgets/Labeledwidget.html#method-c-alignlabels","(*wins)",""],["alive?","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-alive-3F","()","<p>Is this server alive?\n"],["alive?","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-alive-3F","()","<p>Check to see if this connection is alive.\n"],["alive?","DRb::ExtServ","classes/DRb/ExtServ.html#method-i-alive-3F","()",""],["alive?","DRb::HTTP0::ClientSide","classes/DRb/HTTP0/ClientSide.html#method-i-alive-3F","()",""],["alive?","DRb::HTTP0::ServerSide","classes/DRb/HTTP0/ServerSide.html#method-i-alive-3F","()",""],["alive?","Fiber","classes/Fiber.html#method-i-alive-3F","()","<p>Returns true if the fiber can still be resumed (or transferred to). After\nfinishing execution of the …\n"],["alive?","MultiTkIp","classes/MultiTkIp.html#method-i-alive-3F","()",""],["alive?","MultiTkIp","classes/MultiTkIp.html#method-i-alive-3F","()",""],["alive?","MultiTkIp","classes/MultiTkIp.html#method-i-alive-3F","()",""],["alive?","MultiTkIp","classes/MultiTkIp.html#method-i-alive-3F","()",""],["alive?","MultiTkIp","classes/MultiTkIp.html#method-c-alive-3F","()",""],["alive?","MultiTkIp","classes/MultiTkIp.html#method-c-alive-3F","()",""],["alive?","MultiTkIp","classes/MultiTkIp.html#method-c-alive-3F","()",""],["alive?","MultiTkIp","classes/MultiTkIp.html#method-c-alive-3F","()",""],["alive?","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-alive-3F","()","<p>A TupleEntry is dead when it is canceled or expired.\n"],["alive?","Thread","classes/Thread.html#method-i-alive-3F","()","<p>Returns <code>true</code> if <em>thr</em> is running or sleeping.\n\n<pre><code>thr = Thread.new { }\nthr.join                #=&gt; #&lt;Thread:0x401b3fb0 ...\n</code></pre>\n"],["all","Gem::Specification","classes/Gem/Specification.html#method-c-all","()","<p>Returns all specifications. This method is discouraged from use. You\nprobably want to use one of the …\n"],["all","Net::POPMail","classes/Net/POPMail.html#method-i-all","( dest = '' )",""],["all","TkcTag","classes/TkcTag.html#method-i-all","()",""],["all=","Gem::Specification","classes/Gem/Specification.html#method-c-all-3D","(specs)","<p>Sets the known specs to <code>specs</code>. Not guaranteed to work for you\nin the future. Use at your own risk. Caveat …\n"],["all?","Enumerable","classes/Enumerable.html#method-i-all-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["all_classes","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-all_classes","()","<p>Returns all classes discovered by RDoc\n"],["all_classes_and_modules","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-all_classes_and_modules","()","<p>Returns all classes and modules discovered by RDoc\n"],["all_classes_hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-all_classes_hash","()","<p>Hash of all classes known to RDoc\n"],["all_files","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-all_files","()","<p>All TopLevels known to RDoc\n"],["all_files_hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-all_files_hash","()","<p>Hash of all files known to RDoc\n"],["all_gems","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-all_gems","()",""],["all_gems","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-all_gems","()",""],["all_load_paths","Gem","classes/Gem.html#method-c-all_load_paths","()","<p>An Array of all possible load paths for all versions of all gems in the Gem\ninstallation.\n"],["all_modules","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-all_modules","()","<p>Returns all modules discovered by RDoc\n"],["all_modules_hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-all_modules_hash","()","<p>Hash of all modules known to RDoc\n"],["all_names","Gem::Specification","classes/Gem/Specification.html#method-c-all_names","()","<p>Return full names of all specs in sorted order.\n"],["all_symbols","Symbol","classes/Symbol.html#method-c-all_symbols","()","<p>Returns an array of all the symbols currently in Ruby&#39;s symbol table.\n\n<pre><code>Symbol.all_symbols.size    #=&gt; ...\n</code></pre>\n"],["all_waits","ThreadsWait","classes/ThreadsWait.html#method-c-all_waits","(*threads)","<p>Waits until all specified threads have terminated.  If a block is provided,\nit is executed for each thread …\n"],["all_waits","ThreadsWait","classes/ThreadsWait.html#method-i-all_waits","()","<p>Waits until all of the specified threads are terminated.  If a block is\nsupplied for the method, it is …\n"],["all_waits","ThreadsWait","classes/ThreadsWait.html#method-i-all_waits","()","<p>Waits until all of the specified threads are terminated.  If a block is\nsupplied for the method, it is …\n"],["all_waits","ThreadsWait","classes/ThreadsWait.html#method-c-all_waits","(*threads)","<p>Waits until all specified threads have terminated.  If a block is provided,\nit is executed for each thread …\n"],["allocate","Class","classes/Class.html#method-i-allocate","()","<p>Allocates space for a new object of <em>class</em>&#39;s class and does not\ncall initialize on the new instance. …\n"],["allow_addr?","ACL","classes/ACL.html#method-i-allow_addr-3F","(addr)","<p>Allow connections from addrinfo <code>addr</code>?  It must be formatted\nlike Socket#peeraddr:\n\n<pre><code>[&quot;AF_INET&quot;, 10, &quot;lc630&quot;, ...</code></pre>\n"],["allow_nan?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-allow_nan-3F","()","<p>Returns true, if NaN, Infinity, and -Infinity should be generated,\notherwise returns false.\n"],["allow_ruby_exit=","MultiTkIp","classes/MultiTkIp.html#method-i-allow_ruby_exit-3D","(mode)",""],["allow_ruby_exit=","MultiTkIp","classes/MultiTkIp.html#method-i-allow_ruby_exit-3D","(mode)",""],["allow_ruby_exit=","MultiTkIp","classes/MultiTkIp.html#method-i-allow_ruby_exit-3D","(mode)",""],["allow_ruby_exit=","MultiTkIp","classes/MultiTkIp.html#method-i-allow_ruby_exit-3D","(mode)",""],["allow_ruby_exit=","RemoteTkIp","classes/RemoteTkIp.html#method-i-allow_ruby_exit-3D","(mode)",""],["allow_ruby_exit=","TclTkIp","classes/TclTkIp.html#method-i-allow_ruby_exit-3D","(p1)","<p>allow_ruby_exit = mode\n"],["allow_ruby_exit?","MultiTkIp","classes/MultiTkIp.html#method-i-allow_ruby_exit-3F","()",""],["allow_ruby_exit?","MultiTkIp","classes/MultiTkIp.html#method-i-allow_ruby_exit-3F","()",""],["allow_ruby_exit?","MultiTkIp","classes/MultiTkIp.html#method-i-allow_ruby_exit-3F","()",""],["allow_ruby_exit?","MultiTkIp","classes/MultiTkIp.html#method-i-allow_ruby_exit-3F","()",""],["allow_ruby_exit?","RemoteTkIp","classes/RemoteTkIp.html#method-i-allow_ruby_exit-3F","()",""],["allow_ruby_exit?","TclTkIp","classes/TclTkIp.html#method-i-allow_ruby_exit-3F","()","<p>allow_ruby_exit?\n"],["allow_socket?","ACL","classes/ACL.html#method-i-allow_socket-3F","(soc)","<p>Allow connections from Socket <code>soc</code>?\n"],["alternate=","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-i-alternate-3D","(value)",""],["amjd","Date","classes/Date.html#method-i-amjd","()","<p>Returns the astronomical modified Julian day number.  This is a fractional\nnumber, which is not adjusted …\n"],["ancestorChildNumber","IXTLRuntime","classes/IXTLRuntime.html#method-i-ancestorChildNumber","(arg0, arg1)","<p>I4 ancestorChildNumber\n\n<pre><code>BSTR arg0 --- bstrNodeName [IN]\nIXMLDOMNode arg1 --- pNode [IN]</code></pre>\n"],["ancestors","Module","classes/Module.html#method-i-ancestors","()","<p>Returns a list of modules included in <em>mod</em> (including <em>mod</em>\nitself).\n\n<pre><code>module Mod\n  include Math\n  include ...\n</code></pre>\n"],["ancestors","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-ancestors","()","<p>Ancestors list for this ClassModule: the list of included modules (classes\nwill add their superclass …\n"],["ancestors","RDoc::NormalClass","classes/RDoc/NormalClass.html#method-i-ancestors","()","<p>Appends the superclass, if any, to the included modules.\n"],["ancestors","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-ancestors","()","<p>Ancestors cache accessor.  Maps a klass name to an Array of its ancestors\nin this store.  If Foo in this …\n"],["ancestors","RDoc::SingleClass","classes/RDoc/SingleClass.html#method-i-ancestors","()","<p>Adds the superclass to the included modules.\n"],["ancestors_of","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-ancestors_of","(klass)","<p>Returns ancestor classes of <code>klass</code>\n"],["anchor","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-anchor","(item, where)",""],["anchor","TkGrid","classes/TkGrid.html#method-c-anchor","(master, anchor=None)",""],["anchor","TkGrid","classes/TkGrid.html#method-c-anchor","(master, anchor=None)",""],["angle","Complex","classes/Complex.html#method-i-angle","()","<p>Returns the angle part of its polar form.\n\n<pre><code>Complex.polar(3, Math::PI/2).arg #=&gt; 1.5707963267948966\n</code></pre>\n"],["angle","Float","classes/Float.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["angle","Numeric","classes/Numeric.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["annotate","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-annotate","(tag)","<p>Allows <code>tag</code> to be decorated with additional information.\n"],["annotate","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-annotate","(tag)","<p>Turns on or off special handling for <code>convert_string</code>\n"],["any?","Enumerable","classes/Enumerable.html#method-i-any-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block ever returns …\n"],["anyUnreadDescendants","Object","classes/Object.html#method-i-anyUnreadDescendants","(t, i)",""],["any_char","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-any_char","(mod)",""],["any_chars","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-any_chars","(mod)",""],["any_content","RDoc::Context","classes/RDoc/Context.html#method-i-any_content","(includes = true)","<p>Is there any content?\n<p>This means any of: comment, aliases, methods, attributes, external aliases,\nrequire, …\n"],["any_indices","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-any_indices","(mod)",""],["any_line","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-any_line","(mod)",""],["any_lines","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-any_lines","(mod)",""],["api_key","Gem::GemcutterUtilities","classes/Gem/GemcutterUtilities.html#method-i-api_key","()",""],["apop?","Net::APOP","classes/Net/APOP.html#method-i-apop-3F","()","<p>Always returns true.\n"],["apop?","Net::APOP","classes/Net/APOP.html#method-i-apop-3F","()","<p>Always returns true.\n"],["apop?","Net::POP3","classes/Net/POP3.html#method-i-apop-3F","()","<p>Does this instance use APOP authentication?\n"],["apop?","Net::POP3","classes/Net/POP3.html#method-i-apop-3F","()","<p>Does this instance use APOP authentication?\n"],["apop?","Net::POP3","classes/Net/POP3.html#method-i-apop-3F","()","<p>Does this instance use APOP authentication?\n"],["apop?","Net::POP3","classes/Net/POP3.html#method-i-apop-3F","()","<p>Does this instance use APOP authentication?\n"],["app_script_text","Gem::Installer","classes/Gem/Installer.html#method-i-app_script_text","(bin_file_name)","<p>Return the text for an application file.\n"],["append","Net::IMAP","classes/Net/IMAP.html#method-i-append","(mailbox, message, flags = nil, date_time = nil)","<p>Sends a APPEND command to append the <code>message</code> to the end of the\n<code>mailbox</code>. The optional <code>flags</code> argument is …\n"],["append","OptionParser::List","classes/OptionParser/List.html#method-i-append","(*args)","<p>Appends <code>switch</code> at the tail of the list, and associates short,\nlong and negated long options. Arguments …\n"],["append","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-i-append","(value)",""],["append","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-c-append","(value, chain)",""],["append","Rake::InvocationChain::EmptyInvocationChain","classes/Rake/InvocationChain/EmptyInvocationChain.html#method-i-append","(value)",""],["append","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-append","(to, filter)",""],["append","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-append","(win, keys={})",""],["append","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-append","(*vectors)",""],["append","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-append","(*args)",""],["append","TkClipboard","classes/TkClipboard.html#method-i-append","(data, keys=nil)",""],["append","TkClipboard","classes/TkClipboard.html#method-c-append","(data, keys=nil)",""],["appendChild","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXMLDOMText","classes/IXMLDOMText.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","IXTLRuntime","classes/IXTLRuntime.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendChild","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-appendChild","(arg0)","<p>IXMLDOMNode appendChild append a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]</code></pre>\n"],["appendData","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-appendData","(arg0)","<p>VOID appendData append string to value\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["appendData","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-appendData","(arg0)","<p>VOID appendData append string to value\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["appendData","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-appendData","(arg0)","<p>VOID appendData append string to value\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["appendData","IXMLDOMText","classes/IXMLDOMText.html#method-i-appendData","(arg0)","<p>VOID appendData append string to value\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["append_data","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-append_data","(data)",""],["append_features","Mutex_m","classes/Mutex_m.html#method-c-append_features","(cl)",""],["append_features","RSS::Atom::CommonModel","classes/RSS/Atom/CommonModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::ContentModel","classes/RSS/Atom/ContentModel.html#method-i-append_features","(klass)",""],["append_features","RSS::Atom::DateConstruct","classes/RSS/Atom/DateConstruct.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::PersonConstruct","classes/RSS/Atom/PersonConstruct.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::URIContentModel","classes/RSS/Atom/URIContentModel.html#method-i-append_features","(klass)",""],["append_features","RSS::BaseDublinCoreModel","classes/RSS/BaseDublinCoreModel.html#method-i-append_features","(klass)",""],["append_features","RSS::BaseTrackBackModel","classes/RSS/BaseTrackBackModel.html#method-i-append_features","(klass)",""],["append_features","RSS::ContentModel","classes/RSS/ContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ITunesChannelModel","classes/RSS/ITunesChannelModel.html#method-i-append_features","(klass)",""],["append_features","RSS::ITunesItemModel","classes/RSS/ITunesItemModel.html#method-i-append_features","(klass)",""],["append_features","RSS::ImageFaviconModel","classes/RSS/ImageFaviconModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ImageItemModel","classes/RSS/ImageItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ContentModel","classes/RSS/Maker/ContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::DublinCoreModel","classes/RSS/Maker/DublinCoreModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ITunesChannelModel","classes/RSS/Maker/ITunesChannelModel.html#method-i-append_features","(klass)",""],["append_features","RSS::Maker::ITunesItemModel","classes/RSS/Maker/ITunesItemModel.html#method-i-append_features","(klass)",""],["append_features","RSS::Maker::ImageFaviconModel","classes/RSS/Maker/ImageFaviconModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ImageItemModel","classes/RSS/Maker/ImageItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::SlashModel","classes/RSS/Maker/SlashModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::SyndicationModel","classes/RSS/Maker/SyndicationModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TaxonomyTopicModel","classes/RSS/Maker/TaxonomyTopicModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TaxonomyTopicsModel","classes/RSS/Maker/TaxonomyTopicsModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TrackBackModel","classes/RSS/Maker/TrackBackModel.html#method-c-append_features","(klass)",""],["append_features","RSS::RSS09","classes/RSS/RSS09.html#method-c-append_features","(klass)",""],["append_features","RSS::RSS10","classes/RSS/RSS10.html#method-c-append_features","(klass)",""],["append_features","RSS::SlashModel","classes/RSS/SlashModel.html#method-i-append_features","(klass)",""],["append_features","RSS::SyndicationModel","classes/RSS/SyndicationModel.html#method-c-append_features","(klass)",""],["append_features","RSS::TaxonomyTopicModel","classes/RSS/TaxonomyTopicModel.html#method-c-append_features","(klass)",""],["append_features","RSS::TaxonomyTopicsModel","classes/RSS/TaxonomyTopicsModel.html#method-c-append_features","(klass)",""],["append_features","Sync_m","classes/Sync_m.html#method-c-append_features","(cl)",""],["append_features","Sync_m","classes/Sync_m.html#method-c-append_features","(cl)",""],["append_on_display","TkClipboard","classes/TkClipboard.html#method-c-append_on_display","(win, data, keys=nil)",""],["applet_cmd","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-applet_cmd","(w, arglist)","<p>This routine is called for every &lt;APPLET&gt; markup\n"],["application","Rake","classes/Rake.html#method-i-application","()","<p>Current Rake Application\n"],["application=","Rake","classes/Rake.html#method-i-application-3D","(app)","<p>Set the current Rake application object.\n"],["apply","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-apply","(keys={})",""],["apply","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-apply","(target = nil)",""],["appname","TkWinfo","classes/TkWinfo.html#method-c-appname","(win)",""],["appname","TkWinfo","classes/TkWinfo.html#method-c-appname","(win)",""],["appsend","RemoteTkIp","classes/RemoteTkIp.html#method-i-appsend","(async, *args)",""],["area","Tk::Tcllib::Plotchart::RibbonChart3D","classes/Tk/Tcllib/Plotchart/RibbonChart3D.html#method-i-area","(*args)",""],["areabind","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-areabind","(context, *args)",""],["areabind_append","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-areabind_append","(context, *args)",""],["areabind_remove","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-areabind_remove","(*args)",""],["areabindinfo","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-areabindinfo","(*args)",""],["aref","RDoc::Alias","classes/RDoc/Alias.html#method-i-aref","()","<p>HTML fragment reference for this alias\n"],["aref","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-aref","()","<p>Anchor reference for linking to this section\n"],["aref","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-aref","()","<p>HTML fragment reference for this method\n"],["aref_prefix","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code> is &#39;method&#39;.\n"],["aref_prefix","RDoc::Attr","classes/RDoc/Attr.html#method-i-aref_prefix","()","<p>The #aref prefix for attributes\n"],["aref_prefix","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code>, defined by subclasses.\n"],["aref_to","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-aref_to","(target_path)","<p>Generates a relative URL from this object&#39;s path to\n<code>target_path</code>\n"],["arg","Complex","classes/Complex.html#method-i-arg","()","<p>Returns the angle part of its polar form.\n\n<pre><code>Complex.polar(3, Math::PI/2).arg #=&gt; 1.5707963267948966\n</code></pre>\n"],["arg","Float","classes/Float.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arg","Numeric","classes/Numeric.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arg_names","Rake::Task","classes/Rake/Task.html#method-i-arg_names","()","<p>Name of arguments for this task.\n"],["arglists","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-arglists","()","<p>The call_seq or the param_seq with method name, if there is no call_seq.\n<p>Use this for displaying a method&#39;s …\n"],["args","NoMethodError","classes/NoMethodError.html#method-i-args","()","<p>Return the arguments passed in as the third parameter to the constructor.\n"],["arguments","Gem::Command","classes/Gem/Command.html#method-i-arguments","()","<p>Override to provide details of the arguments a command takes.  It should\nreturn a left-justified string, …\n"],["argv","ARGF","classes/ARGF.html#method-i-argv","()","<p>Returns the <code>ARGV</code> array, which contains the arguments passed to\nyour script, one per element.\n<p>For example: …\n"],["arity","Method","classes/Method.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["arity","Proc","classes/Proc.html#method-i-arity","()","<p>Returns the number of arguments that would not be ignored. If the block is\ndeclared to take no arguments, …\n"],["arity","UnboundMethod","classes/UnboundMethod.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["arrange","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-arrange","(container)",""],["array","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-c-array","(p1, p2)","<p>Returns Ruby object wrapping OLE variant whose variant type is VT_ARRAY.\nThe first argument should be …\n"],["array2tk_list","TkComm","classes/TkComm.html#method-c-array2tk_list","(ary, enc=nil)",""],["array_attributes","Gem::Specification","classes/Gem/Specification.html#method-c-array_attributes","()","<p>Return the list of all array-oriented instance variables.\n"],["array_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-array_nl","()","<p>This string is put at the end of a line that holds a JSON array.\n"],["array_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-array_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON array.\n"],["arrow","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-arrow","(text=nil, length=nil, head=nil)",""],["arrowMove1","Object","classes/Object.html#method-i-arrowMove1","(c,x,y)","<p>arrowMove1 – This method is called for each mouse motion event on box1 (the\none at the vertex of the …\n"],["arrowMove2","Object","classes/Object.html#method-i-arrowMove2","(c,x,y)","<p>arrowMove2 – This method is called for each mouse motion event on box2 (the\none at the trailing tip …\n"],["arrowMove3","Object","classes/Object.html#method-i-arrowMove3","(c,x,y)","<p>arrowMove3 – This method is called for each mouse motion event on box3 (the\none that controls the thickness …\n"],["arrowSetup","Object","classes/Object.html#method-i-arrowSetup","(c)","<p>arrowSetup – This method regenerates all the text and graphics in the\ncanvas window.  It&#39;s called …\n"],["as_href","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-as_href","(from_path)","<p>Generates a relative URL from <code>from_path</code> to this object&#39;s\npath\n"],["as_json","Complex","classes/Complex.html#method-i-as_json","(*)",""],["as_json","Date","classes/Date.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","DateTime","classes/DateTime.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Exception","classes/Exception.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Range","classes/Range.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Rational","classes/Rational.html#method-i-as_json","(*)",""],["as_json","Regexp","classes/Regexp.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Struct","classes/Struct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Symbol","classes/Symbol.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Time","classes/Time.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_string","RDoc::Markup::Attribute","classes/RDoc/Markup/Attribute.html#method-c-as_string","(bitmap)","<p>Returns a string representation of <code>bitmap</code>\n"],["ascend","Pathname","classes/Pathname.html#method-i-ascend","()","<p>Iterates over and yields a new Pathname object for each element in the\ngiven path in ascending order. …\n"],["ascii_actual","TkFont","classes/TkFont.html#method-i-ascii_actual","(option=nil)",""],["ascii_actual","TkFont","classes/TkFont.html#method-i-ascii_actual","(option=nil)",""],["ascii_actual_displayof","TkFont","classes/TkFont.html#method-i-ascii_actual_displayof","(win, option=nil)",""],["ascii_actual_displayof","TkFont","classes/TkFont.html#method-i-ascii_actual_displayof","(win, option=nil)",""],["ascii_compatible?","Encoding","classes/Encoding.html#method-i-ascii_compatible-3F","()","<p>Returns whether ASCII-compatible or not.\n\n<pre><code>Encoding::UTF_8.ascii_compatible?     #=&gt; true\nEncoding::UTF_16BE.ascii_compatible? ...\n</code></pre>\n"],["ascii_configinfo","TkFont","classes/TkFont.html#method-i-ascii_configinfo","(slot=nil)",""],["ascii_configinfo","TkFont","classes/TkFont.html#method-i-ascii_configinfo","(slot=nil)",""],["ascii_configure","TkFont","classes/TkFont.html#method-i-ascii_configure","(slot, value=None)",""],["ascii_configure","TkFont","classes/TkFont.html#method-i-ascii_configure","(slot, value=None)",""],["ascii_font","TkFont","classes/TkFont.html#method-i-ascii_font","()","<p>public alias\n"],["ascii_font","TkFont","classes/TkFont.html#method-i-ascii_font","()","<p>public alias\n"],["ascii_metrics","TkFont","classes/TkFont.html#method-i-ascii_metrics","(option=nil)",""],["ascii_metrics","TkFont","classes/TkFont.html#method-i-ascii_metrics","(option=nil)",""],["ascii_only?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-ascii_only-3F","()","<p>Returns true, if NaN, Infinity, and -Infinity should be generated,\notherwise returns false.\n"],["ascii_only?","String","classes/String.html#method-i-ascii_only-3F","()","<p>Returns true for a string which has only ASCII characters.\n\n<pre><code>&quot;abc&quot;.force_encoding(&quot;UTF-8&quot;).ascii_only?  ...</code></pre>\n"],["ascii_replace","TkFont","classes/TkFont.html#method-i-ascii_replace","(ltn)",""],["ascii_replace","TkFont","classes/TkFont.html#method-i-ascii_replace","(ltn)",""],["ascii_text","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-ascii_text","(first, last)",""],["asciicompat_encoding","Encoding::Converter","classes/Encoding/Converter.html#method-c-asciicompat_encoding","(p1)","<p>Returns the corresponding ASCII compatible encoding.\n<p>Returns nil if the argument is an ASCII compatible …\n"],["asciifont","TkFont","classes/TkFont.html#method-i-asciifont","()",""],["asciifont","TkFont","classes/TkFont.html#method-i-asciifont","()",""],["asciifont_configure","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-asciifont_configure","(ltn, keys=nil)",""],["asciifont_copy","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-asciifont_copy","(win, wintag=nil)",""],["asciitagfont_configure","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-asciitagfont_configure","(tagOrId, ltn, keys=nil)",""],["asciitagfont_copy","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-asciitagfont_copy","(tagOrId, win, wintag=nil, winkey=nil, targetkey=nil)",""],["asctime","Date","classes/Date.html#method-i-asctime","()","<p>Returns a string in asctime(3) format (but without “n0” at the end).  This\nmethod is equivalent …\n"],["asctime","Time","classes/Time.html#method-i-asctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre><code>Time.now.asctime   #=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;\n</code></pre>\n"],["asin","CMath","classes/CMath.html#method-c-asin","(z)","<p>returns the arc sine of <code>z</code>\n"],["asin","Math","classes/Math.html#method-c-asin","(p1)","<p>Computes the arc sine of <em>x</em>. Returns -{PI/2} .. {PI/2}.\n"],["asin!","CMath","classes/CMath.html#method-c-asin-21","(z)",""],["asinh","CMath","classes/CMath.html#method-c-asinh","(z)","<p>returns the inverse hyperbolic sine of <code>z</code>\n"],["asinh","Math","classes/Math.html#method-c-asinh","(p1)","<p>Computes the inverse hyperbolic sine of <em>x</em>.\n"],["asinh!","CMath","classes/CMath.html#method-c-asinh-21","(z)",""],["ask","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-ask","(question)","<p>Ask a question.  Returns an answer if connected to a tty, nil otherwise.\n"],["ask","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-ask","(*args)",""],["ask_for_password","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-ask_for_password","(question)","<p>Ask for a password. Does not echo response to terminal.\n"],["ask_for_password","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-ask_for_password","(*args)",""],["ask_for_password_on_unix","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-ask_for_password_on_unix","()","<p>Asks for a password that works on unix\n"],["ask_for_password_on_windows","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-ask_for_password_on_windows","()","<p>Asks for a password that works on windows. Ripped from the Heroku gem.\n"],["ask_if_ok","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-ask_if_ok","(spec)",""],["ask_yes_no","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-ask_yes_no","(question, default=nil)","<p>Ask a question.  Returns a true for yes, false for no.  If not connected to\na tty, raises an exception …\n"],["ask_yes_no","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-ask_yes_no","(*args)",""],["asn1_flag","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-asn1_flag","()","<p>See the OpenSSL documentation for EC_GROUP_get_asn1_flag()\n"],["asn1_flag=","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-asn1_flag-3D","(p1)","<p>See the OpenSSL documentation for EC_GROUP_set_asn1_flag()\n"],["aspect","Tk::Wm","classes/Tk/Wm.html#method-i-aspect","(*args)",""],["aspect","Tk::Wm","classes/Tk/Wm.html#method-c-aspect","(win, *args)",""],["assert","Tk::BWidget","classes/Tk/BWidget.html#method-c-assert","(exp, msg=None)",""],["assign","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-assign","(*wins)",""],["assign","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-assign","(*wins)",""],["assign_names","DL::CStructEntity","classes/DL/CStructEntity.html#method-i-assign_names","(members)",""],["assign_receiver_and_watchdog","MultiTkIp","classes/MultiTkIp.html#method-c-assign_receiver_and_watchdog","(target)",""],["assign_receiver_and_watchdog","MultiTkIp","classes/MultiTkIp.html#method-c-assign_receiver_and_watchdog","(target)",""],["assign_receiver_and_watchdog","MultiTkIp","classes/MultiTkIp.html#method-c-assign_receiver_and_watchdog","(target)",""],["assign_receiver_and_watchdog","MultiTkIp","classes/MultiTkIp.html#method-c-assign_receiver_and_watchdog","(target)",""],["assigned_list","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-assigned_list","()",""],["assoc","Array","classes/Array.html#method-i-assoc","(p1)","<p>Searches through an array whose elements are also arrays comparing\n<em>obj</em> with the first element of each …\n"],["assoc","ENV","classes/ENV.html#method-c-assoc","(p1)","<p>Returns an Array of the name and value of the environment variable with\n<code>name</code> or <code>nil</code> if the name cannot …\n"],["assoc","Hash","classes/Hash.html#method-i-assoc","(p1)","<p>Searches through the hash comparing <em>obj</em> with the key using\n<code>==</code>. Returns the key-value pair (two elements …\n"],["async","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-async","()","<p>BOOL async flag for asynchronous download\n"],["async","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-async","()","<p>BOOL async flag for asynchronous download\n"],["async","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-async","()","<p>BOOL async flag for asynchronous download\n"],["async","Msxml","classes/Msxml.html#method-i-async","()","<p>HRESULT async get asynchronous loading flag.\n\n<pre><code>BOOL arg0 --- pf [OUT]</code></pre>\n"],["async=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-async-3D","(arg0)","<p>VOID async flag for asynchronous download\n"],["async=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-async-3D","(arg0)","<p>VOID async flag for asynchronous download\n"],["async=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-async-3D","(arg0)","<p>VOID async flag for asynchronous download\n"],["async=","Msxml","classes/Msxml.html#method-i-async-3D","(arg0)","<p>HRESULT async get asynchronous loading flag.\n\n<pre><code>BOOL arg0 --- pf [IN]</code></pre>\n"],["async_eval","Tk::WinDDE","classes/Tk/WinDDE.html#method-i-async_eval","(topic, cmd, *args)",""],["async_execute","Tk::WinDDE","classes/Tk/WinDDE.html#method-c-async_execute","(service, topic, data)",""],["at","Array","classes/Array.html#method-i-at","(p1)","<p>Returns the element at <em>index</em>. A negative index counts from the end\nof <code>self</code>.  Returns <code>nil</code> if the index …\n"],["at","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-at","( seg )",""],["at","Time","classes/Time.html#method-c-at","(p1, p2 = v2)","<p>Creates a new time object with the value given by <em>time</em>, the given\nnumber of <em>seconds_with_frac</em>, or <em>seconds</em> …\n"],["at_end","TkTimer","classes/TkTimer.html#method-i-at_end","(*arg, &b)",""],["at_end","TkTimer","classes/TkTimer.html#method-i-at_end","(*arg, &b)",""],["at_exit","Kernel","classes/Kernel.html#method-i-at_exit","()","<p>Converts <em>block</em> to a <code>Proc</code> object (and therefore binds\nit at the point of call) and registers it for execution …\n"],["atan","BigMath","classes/BigMath.html#method-i-atan","(x, prec)","<p>Computes the arctangent of x to the specified number of digits of\nprecision.\n<p>If x is NaN, returns NaN …\n"],["atan","CMath","classes/CMath.html#method-c-atan","(z)","<p>returns the arc tangent of <code>z</code>\n"],["atan","Math","classes/Math.html#method-c-atan","(p1)","<p>Computes the arc tangent of <em>x</em>. Returns -{PI/2} .. {PI/2}.\n"],["atan!","CMath","classes/CMath.html#method-c-atan-21","(z)",""],["atan2","CMath","classes/CMath.html#method-c-atan2","(y,x)","<p>returns the arc tangent of <code>y</code> divided by <code>x</code> using\nthe signs of <code>y</code> and <code>x</code> to determine the quadrant\n"],["atan2","Math","classes/Math.html#method-c-atan2","(p1, p2)","<p>Computes the arc tangent given <em>y</em> and <em>x</em>. Returns -PI..PI.\n\n<pre><code>Math.atan2(-0.0, -1.0) #=&gt; -3.141592653589793 ...\n</code></pre>\n"],["atan2!","CMath","classes/CMath.html#method-c-atan2-21","(y,x)",""],["atanh","CMath","classes/CMath.html#method-c-atanh","(z)","<p>returns the inverse hyperbolic tangent of <code>z</code>\n"],["atanh","Math","classes/Math.html#method-c-atanh","(p1)","<p>Computes the inverse hyperbolic tangent of <em>x</em>.\n"],["atanh!","CMath","classes/CMath.html#method-c-atanh-21","(z)",""],["atime","File","classes/File.html#method-c-atime","(p1)","<p>Returns the last access time for the named file as a Time object).\n\n<pre><code>File.atime(&quot;testfile&quot;)   #=&gt; Wed Apr ...\n</code></pre>\n"],["atime","File","classes/File.html#method-i-atime","()","<p>Returns the last access time (a <code>Time</code> object)\n\n<pre><code>for &lt;i&gt;file&lt;/i&gt;, or epoch if &lt;i&gt;file&lt;/i&gt; has not been accessed. ...</code></pre>\n"],["atime","File::Stat","classes/File/Stat.html#method-i-atime","()","<p>Returns the last access time for this file as an object of class\n<code>Time</code>.\n\n<pre><code>File.stat(&quot;testfile&quot;).atime   #=&gt; ...\n</code></pre>\n"],["atime","Pathname","classes/Pathname.html#method-i-atime","()","<p>See <code>File.atime</code>.  Returns last access time.\n"],["atom","TkWinfo","classes/TkWinfo.html#method-c-atom","(name, win=nil)",""],["atom","TkWinfo","classes/TkWinfo.html#method-c-atom","(name, win=nil)",""],["atom_validate","RSS::Atom::DateConstruct","classes/RSS/Atom/DateConstruct.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)",""],["atom_validate","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)",""],["atom_validate","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)",""],["atomname","TkWinfo","classes/TkWinfo.html#method-c-atomname","(id, win=nil)",""],["atomname","TkWinfo","classes/TkWinfo.html#method-c-atomname","(id, win=nil)",""],["attach","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-attach","(anchor=None)",""],["attlistdecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-attlistdecl","(element, pairs, contents)","<p>If a doctype includes an ATTLIST declaration, it will cause this method to\nbe called.  The content is …\n"],["attlistdecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-attlistdecl","(element_name, attributes, raw_content)","<p>If a doctype includes an ATTLIST declaration, it will cause this method to\nbe called.  The content is …\n"],["attlistdecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-attlistdecl-3F","()","<p>Content: [ String text ]\n"],["attribute","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-attribute","(turn_on, turn_off)","<p>Return an attribute object with the given turn_on and turn_off bits set\n"],["attribute","REXML::Element","classes/REXML/Element.html#method-i-attribute","( name, namespace=nil )","<p>Attributes                                    #\n"],["attribute","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-attribute","( name )",""],["attribute_config","TkKinput","classes/TkKinput.html#method-c-attribute_config","(win, slot, value=None)",""],["attribute_info","TkKinput","classes/TkKinput.html#method-c-attribute_info","(win, slot=nil)",""],["attribute_names","Gem::Specification","classes/Gem/Specification.html#method-c-attribute_names","()","<p>Return the list of all instance variables.\n"],["attribute_of","REXML::DocType","classes/REXML/DocType.html#method-i-attribute_of","(element, attribute)",""],["attributes","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXMLDOMText","classes/IXMLDOMText.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","IXTLRuntime","classes/IXTLRuntime.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-attributes","()","<p>IXMLDOMNamedNodeMap attributes the collection of the node&#39;s attributes\n"],["attributes","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-attributes","()",""],["attributes","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-attributes","(text)","<p>Applies attribute-specific markup to <code>text</code> using\nRDoc::AttributeManager\n"],["attributes","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-attributes","()","<p>Attributes cache accessor.  Maps a class to an Array of its attributes.\n"],["attributes","Tk::Wm","classes/Tk/Wm.html#method-c-attributes","(win, slot=nil,value=TkComm::None)",""],["attributes","Tk::Wm","classes/Tk/Wm.html#method-i-attributes","(slot=nil,value=TkComm::None)",""],["attributes","URI::LDAP","classes/URI/LDAP.html#method-i-attributes","()","<p>returns attributes.\n"],["attributes=","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-attributes-3D","(p1)",""],["attributes=","URI::LDAP","classes/URI/LDAP.html#method-i-attributes-3D","(val)","<p>setter for attributes <code>val</code>\n"],["attributes_of","REXML::DocType","classes/REXML/DocType.html#method-i-attributes_of","(element)",""],["attroff","Curses","classes/Curses.html#method-c-attroff","(p1)","<p>Turns on the named attributes <code>attrs</code> without affecting any\nothers.\n<p>See also Curses::Window.attrset for …\n"],["attroff","Curses::Window","classes/Curses/Window.html#method-i-attroff","(p1)","<p>Turns on the named attributes <code>attrs</code> without affecting any\nothers.\n<p>See also Curses::Window.attrset\n"],["attron","Curses","classes/Curses.html#method-c-attron","(p1)","<p>Turns off the named attributes <code>attrs</code> without turning any other\nattributes on or off.\n<p>See also Curses::Window.attrset …\n"],["attron","Curses::Window","classes/Curses/Window.html#method-i-attron","(p1)","<p>Turns off the named attributes <code>attrs</code> without turning any other\nattributes on or off.\n<p>See also Curses::Window.attrset …\n"],["attrset","Curses","classes/Curses.html#method-c-attrset","(p1)","<p>Sets the current attributes of the given window to <code>attrs</code>.\n<p>see also Curses::Window.attrset\n"],["attrset","Curses::Window","classes/Curses/Window.html#method-i-attrset","(p1)","<p>Sets the current attributes of the given window to <code>attrs</code>.\n<p>The following video attributes, defined in &lt;curses.h&gt;, …\n"],["auth_cram_md5","Net::SMTP","classes/Net/SMTP.html#method-i-auth_cram_md5","(user, secret)",""],["auth_cram_md5","Net::SMTP","classes/Net/SMTP.html#method-i-auth_cram_md5","(user, secret)",""],["auth_login","Net::SMTP","classes/Net/SMTP.html#method-i-auth_login","(user, secret)",""],["auth_login","Net::SMTP","classes/Net/SMTP.html#method-i-auth_login","(user, secret)",""],["auth_only","Net::POP3","classes/Net/POP3.html#method-i-auth_only","(account, password)","<p>Starts a pop3 session, attempts authentication, and quits. This method must\nnot be called while POP3 …\n"],["auth_only","Net::POP3","classes/Net/POP3.html#method-c-auth_only","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Opens a POP3 session, attempts authentication, and quits.\n<p>This method raises POPAuthenticationError if …\n"],["auth_only","Net::POP3","classes/Net/POP3.html#method-c-auth_only","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Opens a POP3 session, attempts authentication, and quits.\n<p>This method raises POPAuthenticationError if …\n"],["auth_only","Net::POP3","classes/Net/POP3.html#method-c-auth_only","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Opens a POP3 session, attempts authentication, and quits.\n<p>This method raises POPAuthenticationError if …\n"],["auth_only","Net::POP3","classes/Net/POP3.html#method-i-auth_only","(account, password)","<p>Starts a pop3 session, attempts authentication, and quits. This method must\nnot be called while POP3 …\n"],["auth_only","Net::POP3","classes/Net/POP3.html#method-i-auth_only","(account, password)","<p>Starts a pop3 session, attempts authentication, and quits. This method must\nnot be called while POP3 …\n"],["auth_only","Net::POP3","classes/Net/POP3.html#method-i-auth_only","(account, password)","<p>Starts a pop3 session, attempts authentication, and quits. This method must\nnot be called while POP3 …\n"],["auth_only","Net::POP3","classes/Net/POP3.html#method-c-auth_only","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Opens a POP3 session, attempts authentication, and quits.\n<p>This method raises POPAuthenticationError if …\n"],["auth_plain","Net::SMTP","classes/Net/SMTP.html#method-i-auth_plain","(user, secret)",""],["auth_plain","Net::SMTP","classes/Net/SMTP.html#method-i-auth_plain","(user, secret)",""],["authenticate","Net::IMAP","classes/Net/IMAP.html#method-i-authenticate","(auth_type, *args)","<p>Sends an AUTHENTICATE command to authenticate the client. The\n<code>auth_type</code> parameter is a string that represents …\n"],["authenticate","Net::SMTP","classes/Net/SMTP.html#method-i-authenticate","(user, secret, authtype = DEFAULT_AUTH_TYPE)",""],["authenticate","Net::SMTP","classes/Net/SMTP.html#method-i-authenticate","(user, secret, authtype = DEFAULT_AUTH_TYPE)",""],["authenticate","WEBrick::HTTPAuth::BasicAuth","classes/WEBrick/HTTPAuth/BasicAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using\n<code>res</code> if the authentication was not correct.\n"],["authenticate","WEBrick::HTTPAuth::DigestAuth","classes/WEBrick/HTTPAuth/DigestAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using\n<code>res</code> if the authentication was not correct.\n"],["author","Gem::Specification","classes/Gem/Specification.html#method-i-author","()","<p>Singular reader for #authors\n"],["author=","Gem::Specification","classes/Gem/Specification.html#method-i-author-3D","(o)","<p>Singular writer for #authors\n"],["authors","Gem::Specification","classes/Gem/Specification.html#method-i-authors","()","<p>The list of author names who wrote this gem.\n<p>If you are providing multiple authors and multiple emails …\n"],["authors=","Gem::Specification","classes/Gem/Specification.html#method-i-authors-3D","(value)","<p>Sets the list of authors, ensuring it is an array.\n"],["autoclose=","IO","classes/IO.html#method-i-autoclose-3D","(p1)","<p>Sets auto-close flag.\n\n<pre><code>f = open(&quot;/dev/null&quot;)\nIO.for_fd(f.fileno)\n# ...\nf.gets # may cause IOError\n\nf = ...</code></pre>\n"],["autoclose?","IO","classes/IO.html#method-i-autoclose-3F","()","<p>Returns <code>true</code> if the underlying file descriptor of <em>ios</em>\nwill be closed automatically at its finalization, …\n"],["autoload","Kernel","classes/Kernel.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>) the first time that <em>module</em> (which\nmay be a <code>String</code> …\n"],["autoload","Module","classes/Module.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>) the first time that <em>module</em> (which\nmay be a <code>String</code> …\n"],["autoload?","Kernel","classes/Kernel.html#method-i-autoload-3F","(p1)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code>.\n\n<pre><code>autoload(:B, &quot;b&quot;)\nautoload?(:B)      ...</code></pre>\n"],["autoload?","Module","classes/Module.html#method-i-autoload-3F","(p1)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code> in the namespace of <em>mod</em>.\n\n<pre><code>module A\nend ...\n</code></pre>\n"],["autoscroll","Tk::Scrollable","classes/Tk/Scrollable.html#method-i-autoscroll","(mode = nil)",""],["autoscroll","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-autoscroll","()",""],["autoscroll","Tk::Tcllib::Autoscroll","classes/Tk/Tcllib/Autoscroll.html#method-c-autoscroll","(win)",""],["avail_in","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-avail_in","()","<p>Returns bytes of data in the input buffer. Normally, returns 0.\n"],["avail_out","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-avail_out","()","<p>Returns number of bytes of free spaces in output buffer.  Because the free\nspace is allocated automatically, …\n"],["avail_out=","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-avail_out-3D","(p1)","<p>Allocates <code>size</code> bytes of free space in the output buffer. If\nthere are more than <code>size</code> bytes already in …\n"],["available?","Gem","classes/Gem.html#method-c-available-3F","(dep, *requirements)","<p>See if a given gem is available.\n"],["available_tags","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-available_tags","(uri)","<p>return the tag_names for setters associated with uri\n"],["average","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-average","(results)",""],["axe","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-axe","( elements, axe_name, rest )",""],["axis_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_bind","(tag, context, *args)",""],["axis_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_bind_append","(tag, context, *args)",""],["axis_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_bind_remove","(tag, context)",""],["axis_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_bindinfo","(tag, context=nil)",""],["axis_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_cget","(id, option)",""],["axis_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_cget_strict","(id, option)",""],["axis_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_cget_tkstring","(id, option)",""],["axis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_configinfo","(id, slot=nil)",""],["axis_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_configure","(*args)",""],["axis_create","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_create","(id=nil, keys={})",""],["axis_delete","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_delete","(*ids)",""],["axis_invtransform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_invtransform","(id, val)",""],["axis_limits","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_limits","(id)",""],["axis_names","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_names","(*pats)",""],["axis_transform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_transform","(id, val)",""],["axis_use","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_use","(id, target=nil)",""],["axis_view","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-axis_view","(id)",""],["back","Tk::Iwidgets::Hyperhelp","classes/Tk/Iwidgets/Hyperhelp.html#method-i-back","()",""],["background","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-background","(part, color_or_image, dir)",""],["background_call","MultiTkIp","classes/MultiTkIp.html#method-i-background_call","(*args)",""],["background_call","MultiTkIp","classes/MultiTkIp.html#method-i-background_call","(*args)",""],["background_call","MultiTkIp","classes/MultiTkIp.html#method-i-background_call","(*args)",""],["background_call","MultiTkIp","classes/MultiTkIp.html#method-i-background_call","(*args)",""],["background_eval","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval","(*args, &blk)",""],["background_eval","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval","(*args, &blk)",""],["background_eval","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval","(*args, &blk)",""],["background_eval","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval","(*args, &blk)",""],["background_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_proc","(*args)",""],["background_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_proc","(*args)",""],["background_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_proc","(*args)",""],["background_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_proc","(*args)",""],["background_eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_str","(cmd, *eval_args)",""],["background_eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_str","(cmd, *eval_args)",""],["background_eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_str","(cmd, *eval_args)",""],["background_eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_str","(cmd, *eval_args)",""],["background_eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_string","(cmd, *eval_args)",""],["background_eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_string","(cmd, *eval_args)",""],["background_eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_string","(cmd, *eval_args)",""],["background_eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-background_eval_string","(cmd, *eval_args)",""],["backticks","Rake::AltSystem","classes/Rake/AltSystem.html#method-i-backticks","(cmd)",""],["backtrace","Exception","classes/Exception.html#method-i-backtrace","()","<p>Returns any backtrace associated with the exception. The backtrace is an\narray of strings, each containing …\n"],["backtrace","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-backtrace","()","<p>True if the backtrace option has been specified, or debug is on.\n"],["backtrace","Thread","classes/Thread.html#method-i-backtrace","()","<p>Returns the current back trace of the <em>thr</em>.\n"],["badOptionString","Tk::BWidget","classes/Tk/BWidget.html#method-c-badOptionString","(type, value, list)",""],["balloon","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-balloon","(*args)",""],["balloonconfig","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-balloonconfig","(key, value=None)",""],["banner","OptionParser","classes/OptionParser.html#method-i-banner","()","<p>Heading banner preceding summary.\n"],["bar","Foo","classes/Foo.html#method-i-bar","(n)",""],["bar","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar","(id=nil, keys={})",""],["bar_activate","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_activate","(*args)",""],["bar_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_bind","(tag, context, *args)",""],["bar_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_bind_append","(tag, context, *args)",""],["bar_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_bind_remove","(tag, context)",""],["bar_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_bindinfo","(tag, context=nil)",""],["bar_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_cget","(id, option)",""],["bar_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_cget_strict","(id, option)",""],["bar_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_cget_tkstring","(id, option)",""],["bar_closest","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_closest","(x, y, var, *args)",""],["bar_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_configinfo","(id, slot=nil)",""],["bar_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_configure","(*args)",""],["bar_create","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_create","(id=nil, keys={})",""],["bar_deactivate","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_deactivate","(*ids)",""],["bar_delete","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_delete","(*ids)",""],["bar_exist?","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_exist-3F","(id)",""],["bar_names","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_names","(*pats)",""],["bar_show","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_show","(*names)",""],["bar_type","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-bar_type","(id)",""],["base","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-base","(href = \"\")","<p>Generate a Document Base URI element as a String.\n<p><code>href</code> can either by a string, giving the base URL for …\n"],["base","OptionParser","classes/OptionParser.html#method-i-base","()","<p>Subject of #on_tail.\n"],["base64","SecureRandom","classes/SecureRandom.html#method-c-base64","(n=nil)","<p>SecureRandom.base64 generates a random base64 string.\n<p>The argument <em>n</em> specifies the length of the random …\n"],["base64","XMLRPC::Convert","classes/XMLRPC/Convert.html#method-c-base64","(str)",""],["base64_decode","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-base64_decode","(dat)",""],["base64_encode","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-base64_encode","(dat)",""],["base64digest","Digest::Class","classes/Digest/Class.html#method-c-base64digest","(str, *args)","<p>Returns the base64 encoded hash value of a given <em>string</em>.  The\nreturn value is properly padded with &#39;=&#39; …\n"],["base64digest","Digest::Instance","classes/Digest/Instance.html#method-i-base64digest","(str = nil)","<p>If none is given, returns the resulting hash value of the digest in a\nbase64 encoded form, keeping the …\n"],["base64digest!","Digest::Instance","classes/Digest/Instance.html#method-i-base64digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial\nstate.\n"],["baseName","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXMLDOMText","classes/IXMLDOMText.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","IXTLRuntime","classes/IXTLRuntime.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["baseName","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-baseName","()","<p>BSTR baseName the base name of the node (nodename with the prefix stripped\noff)\n"],["base_dir","Gem::Specification","classes/Gem/Specification.html#method-i-base_dir","()","<p>Returns the full path to the base gem directory.\n<p>eg: /usr/local/lib/ruby/gems/1.8\n"],["base_name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-base_name","()","<p>Base name of this file\n"],["basename","File","classes/File.html#method-c-basename","(p1, p2 = v2)","<p>Returns the last component of the filename given in <em>file_name</em>,\nwhich must be formed using forward slashes …\n"],["basename","Pathname","classes/Pathname.html#method-i-basename","(p1 = v1)","<p>See <code>File.basename</code>.  Returns the last component of the path.\n"],["basic","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-basic","()",""],["basicMotion","AnimatedWaveDemo","classes/AnimatedWaveDemo.html#method-i-basicMotion","()","<p>Basic motion handler. Given what direction the wave is travelling in, it\nadvances the y coordinates in …\n"],["basic_auth","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-basic_auth","(account, password)","<p>Set the Authorization: header for “Basic” authorization.\n"],["basic_auth","WEBrick::HTTPAuth","classes/WEBrick/HTTPAuth.html#method-i-basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a request.  When\ncalled with a request <code>req</code>, response …\n"],["basic_quote_characters","Readline","classes/Readline.html#method-c-basic_quote_characters","()","<p>Gets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_quote_characters=","Readline","classes/Readline.html#method-c-basic_quote_characters-3D","(p1)","<p>Sets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_word_break_characters","Readline","classes/Readline.html#method-c-basic_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for the\ncompleter routine.\n<p>Raises …\n"],["basic_word_break_characters=","Readline","classes/Readline.html#method-c-basic_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for the\ncompleter routine. The default …\n"],["bbox","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-bbox","(*tags)",""],["bbox","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-bbox","()",""],["bbox","Tk::Canvas","classes/Tk/Canvas.html#method-i-bbox","(tagOrId, *tags)",""],["bbox","Tk::Entry","classes/Tk/Entry.html#method-i-bbox","(index)",""],["bbox","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-bbox","(index)","<p>based on Tk::Text widget\n"],["bbox","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-bbox","(tagOrId, *tags)",""],["bbox","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-bbox","(index)",""],["bbox","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-bbox","(index)",""],["bbox","Tk::TkTable","classes/Tk/TkTable.html#method-i-bbox","(idx)",""],["bbox","TkGrid","classes/TkGrid.html#method-c-bbox","(master, *args)",""],["bbox","TkGrid","classes/TkGrid.html#method-c-bbox","(master, *args)",""],["bbox","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-bbox","(idx)",""],["bbox","TkMultiListbox","classes/TkMultiListbox.html#method-i-bbox","(idx)",""],["bbox","TkTextWin","classes/TkTextWin.html#method-i-bbox","(index)","<p>def create_self\n\n<pre><code>fail RuntimeError, &quot;TkTextWin is an abstract class&quot;</code></pre>\n<p>end private :create_self\n"],["bbox","TkcTagAccess","classes/TkcTagAccess.html#method-i-bbox","()",""],["beep","Curses","classes/Curses.html#method-c-beep","()","<p>Sounds an audible alarm on the terminal, if possible; otherwise it flashes\nthe screen (visual bell). …\n"],["beep","Tk::BLT","classes/Tk/BLT.html#method-c-beep","(percent = 50)",""],["before","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-before","(target=None)",""],["before_running_rdoc","RDoc::Task","classes/RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc\ngenerator. It is allowed …\n"],["begin","MatchData","classes/MatchData.html#method-i-begin","(p1)","<p>Returns the offset of the start of the <em>n</em>th element of the match\narray in the string. <em>n</em> can be a string …\n"],["begin","Range","classes/Range.html#method-i-begin","()","<p>Returns the first object in <em>rng</em>.\n"],["begin_adding","RDoc::Stats","classes/RDoc/Stats.html#method-i-begin_adding","()","<p>Call this to mark the beginning of parsing for display purposes\n"],["begin_adding","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-begin_adding","(*)","<p>Prints a message at the beginning of parsing\n"],["beginning_of_line?","StringScanner","classes/StringScanner.html#method-i-beginning_of_line-3F","()","<p>Returns <code>true</code> iff the scan pointer is at the beginning of the\nline.\n\n<pre><code>s = StringScanner.new(&quot;test\\ntest\\n&quot;) ...</code></pre>\n"],["begins?","Gem::Command","classes/Gem/Command.html#method-i-begins-3F","(long, short)","<p>True if <code>long</code> begins with the characters from\n<code>short</code>.\n"],["begx","Curses::Window","classes/Curses/Window.html#method-i-begx","()","<p>A getter for the beginning column (X coord) of the window\n"],["begy","Curses::Window","classes/Curses/Window.html#method-i-begy","()","<p>A getter for the beginning line (Y coord) of the window\n"],["below","TkcTag","classes/TkcTag.html#method-i-below","(target)",""],["bench","Object","classes/Object.html#method-i-bench","(cmd)",""],["bench_each","Object","classes/Object.html#method-i-bench_each","(idx)",""],["benchmark","Benchmark","classes/Benchmark.html#method-c-benchmark","(caption = \"\", label_width = nil, format = nil, *labels)","<p>Invokes the block with a <code>Benchmark::Report</code> object, which may\nbe used to collect and report on the results …\n"],["benchmark","BenchmarkDriver","classes/BenchmarkDriver.html#method-c-benchmark","(opt)",""],["benchmark","Object","classes/Object.html#method-i-benchmark","(cmd)",""],["between?","Comparable","classes/Comparable.html#method-i-between-3F","(p1, p2)","<p>Returns <code>false</code> if <em>obj</em> <code>&lt;=&gt;</code>\n<em>min</em> is less than zero or if <em>anObject</em>\n<code>&lt;=&gt;</code> <em>max</em> is greater than zero, …\n"],["bg_call","MultiTkIp","classes/MultiTkIp.html#method-i-bg_call","(*args)",""],["bg_call","MultiTkIp","classes/MultiTkIp.html#method-i-bg_call","(*args)",""],["bg_call","MultiTkIp","classes/MultiTkIp.html#method-i-bg_call","(*args)",""],["bg_call","MultiTkIp","classes/MultiTkIp.html#method-i-bg_call","(*args)",""],["bg_eval","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval","(*args, &blk)",""],["bg_eval","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval","(*args, &blk)",""],["bg_eval","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval","(*args, &blk)",""],["bg_eval","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval","(*args, &blk)",""],["bg_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_proc","(*args)",""],["bg_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_proc","(*args)",""],["bg_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_proc","(*args)",""],["bg_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_proc","(*args)",""],["bg_eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_str","(cmd, *eval_args)",""],["bg_eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_str","(cmd, *eval_args)",""],["bg_eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_str","(cmd, *eval_args)",""],["bg_eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_str","(cmd, *eval_args)",""],["bg_eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_string","(cmd, *eval_args)",""],["bg_eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_string","(cmd, *eval_args)",""],["bg_eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_string","(cmd, *eval_args)",""],["bg_eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-bg_eval_string","(cmd, *eval_args)",""],["bgerror","MultiTkIp","classes/MultiTkIp.html#method-c-bgerror","(cmd = Proc.new, slave = nil, &b)",""],["bgerror","MultiTkIp","classes/MultiTkIp.html#method-c-bgerror","(cmd = Proc.new, slave = nil, &b)",""],["bgerror","MultiTkIp","classes/MultiTkIp.html#method-c-bgerror","(cmd = Proc.new, slave = nil, &b)",""],["bgerror","MultiTkIp","classes/MultiTkIp.html#method-c-bgerror","(cmd = Proc.new, slave = nil, &b)",""],["bgerror","TkBgError","classes/TkBgError.html#method-c-bgerror","(message)",""],["bgexec","Tk::BLT","classes/Tk/BLT.html#method-c-bgexec","(*args)",""],["bgimage","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-bgimage","(image, tid=None)",""],["bin_dir","Gem::Specification","classes/Gem/Specification.html#method-i-bin_dir","()","<p>Returns the full path to installed gem&#39;s bin directory.\n<p>NOTE: do not confuse this with <code>bindir</code>, which …\n"],["bin_file","Gem::Specification","classes/Gem/Specification.html#method-i-bin_file","(name)","<p>Returns the full path to an executable named <code>name</code> in this gem.\n"],["bin_path","Gem","classes/Gem.html#method-c-bin_path","(name, exec_name = nil, *requirements)","<p>Find the full path to the executable for gem <code>name</code>.  If the\n<code>exec_name</code> is not given, the gem&#39;s default_executable …\n"],["binary=","Net::FTP","classes/Net/FTP.html#method-i-binary-3D","(newmode)","<p>A setter to toggle transfers in binary mode. <code>newmode</code> is either\n<code>true</code> or <code>false</code>\n"],["binary?","RDoc::Parser","classes/RDoc/Parser.html#method-c-binary-3F","(file)","<p>Determines if the file is a “binary” file which basically means it has\ncontent that an RDoc …\n"],["binary_base64","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-binary_base64","( value )","<p>Emit binary data\n"],["binary_mode","Gem","classes/Gem.html#method-c-binary_mode","()","<p>The mode needed to read a file as straight binary.\n"],["binary_request","Tk::WinDDE","classes/Tk/WinDDE.html#method-i-binary_request","(service, topic, item)",""],["bind","Addrinfo","classes/Addrinfo.html#method-i-bind","()","<p>creates a socket bound to self.\n<p>If a block is given, it is called with the socket and the value of the …\n"],["bind","DL::Function","classes/DL/Function.html#method-i-bind","(&block)",""],["bind","DL::Importer","classes/DL/Importer.html#method-i-bind","(signature, *opts, &blk)",""],["bind","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-bind","(cl)",""],["bind","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-bind","(cl)",""],["bind","Socket","classes/Socket.html#method-i-bind","(p1)","<p>Binds to the given local address.\n<p>Parameter\n<p><code>local_sockaddr</code> - the <code>struct</code> sockaddr contained in\na string …\n"],["bind","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-bind","(context, *args)","<p>def bind(context, cmd=Proc.new, *args)\n\n<pre><code>@t.tab_bind(@id, context, cmd, *args)\nself</code></pre>\n<p>end\n"],["bind","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-bind","(seq, *args)",""],["bind","Tk::Frame","classes/Tk/Frame.html#method-c-bind","(*args, &b)",""],["bind","Tk::RbWidget::ScrollFrame","classes/Tk/RbWidget/ScrollFrame.html#method-i-bind","(*args)","<p>forbid to change binding of @base frame\n"],["bind","Tk::Toplevel","classes/Tk/Toplevel.html#method-c-bind","(*args, &b)",""],["bind","TkComm","classes/TkComm.html#method-i-bind","(tagOrClass, context, *args)","<p>def bind(tagOrClass, context, cmd=Proc.new, *args)\n\n<pre><code>_bind([&quot;bind&quot;, tagOrClass], context, cmd, *args)\ntagOrClass</code></pre>\n"],["bind","TkTextTag","classes/TkTextTag.html#method-i-bind","(seq, *args)","<p>def bind(seq, cmd=Proc.new, *args)\n\n<pre><code>_bind([@t.path, &#39;tag&#39;, &#39;bind&#39;, @id], seq, cmd, *args)\nself</code></pre>\n<p>end\n"],["bind","TkTextTag","classes/TkTextTag.html#method-i-bind","(seq, *args)","<p>def bind(seq, cmd=Proc.new, *args)\n\n<pre><code>_bind([@t.path, &#39;tag&#39;, &#39;bind&#39;, @id], seq, cmd, *args)\nself</code></pre>\n<p>end\n"],["bind","TkcTagAccess","classes/TkcTagAccess.html#method-i-bind","(seq, *args)","<p>def bind(seq, cmd=Proc.new, *args)\n\n<pre><code>@c.itembind(@id, seq, cmd, *args)\nself</code></pre>\n<p>end\n"],["bind","UDPSocket","classes/UDPSocket.html#method-i-bind","(p1, p2)","<p>Binds <em>udpsocket</em> to <em>host</em>:<em>port</em>.\n\n<pre><code>u1 = UDPSocket.new\nu1.bind(&quot;127.0.0.1&quot;, 4913)\nu1.send &quot;message-to-self&quot;, ...</code></pre>\n"],["bind","UnboundMethod","classes/UnboundMethod.html#method-i-bind","(p1)","<p>Bind <em>umeth</em> to <em>obj</em>. If <code>Klass</code> was the class\nfrom which <em>umeth</em> was obtained, <code>obj.kind_of?(Klass)</code>\nmust be …\n"],["bindMouseWheel","Tk::BWidget","classes/Tk/BWidget.html#method-c-bindMouseWheel","(widget)",""],["bind_all","TkComm","classes/TkComm.html#method-i-bind_all","(context, *args)","<p>def bind_all(context, cmd=Proc.new, *args)\n\n<pre><code>_bind([&#39;bind&#39;, &#39;all&#39;], context, cmd, *args)\nTkBindTag::ALL</code></pre>\n"],["bind_append","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-bind_append","(context, *args)","<p>def bind_append(context, cmd=Proc.new, *args)\n\n<pre><code>@t.tab_bind_append(@id, context, cmd, *args)\nself</code></pre>\n<p>end\n"],["bind_append","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-bind_append","(seq, *args)",""],["bind_append","Tk::Frame","classes/Tk/Frame.html#method-c-bind_append","(*args, &b)",""],["bind_append","Tk::RbWidget::ScrollFrame","classes/Tk/RbWidget/ScrollFrame.html#method-i-bind_append","(*args)",""],["bind_append","Tk::Toplevel","classes/Tk/Toplevel.html#method-c-bind_append","(*args, &b)",""],["bind_append","TkComm","classes/TkComm.html#method-i-bind_append","(tagOrClass, context, *args)","<p>def bind_append(tagOrClass, context, cmd=Proc.new, *args)\n\n<pre><code>_bind_append([&quot;bind&quot;, tagOrClass], context, ...</code></pre>\n"],["bind_append","TkTextTag","classes/TkTextTag.html#method-i-bind_append","(seq, *args)","<p>def bind_append(seq, cmd=Proc.new, *args)\n\n<pre><code>_bind_append([@t.path, &#39;tag&#39;, &#39;bind&#39;, @id], seq, cmd, *args) ...</code></pre>\n"],["bind_append","TkTextTag","classes/TkTextTag.html#method-i-bind_append","(seq, *args)","<p>def bind_append(seq, cmd=Proc.new, *args)\n\n<pre><code>_bind_append([@t.path, &#39;tag&#39;, &#39;bind&#39;, @id], seq, cmd, *args) ...</code></pre>\n"],["bind_append","TkcTagAccess","classes/TkcTagAccess.html#method-i-bind_append","(seq, *args)","<p>def bind_append(seq, cmd=Proc.new, *args)\n\n<pre><code>@c.itembind_append(@id, seq, cmd, *args)\nself</code></pre>\n<p>end\n"],["bind_append_all","TkComm","classes/TkComm.html#method-i-bind_append_all","(context, *args)","<p>def bind_append_all(context, cmd=Proc.new, *args)\n\n<pre><code>_bind_append([&#39;bind&#39;, &#39;all&#39;], context, cmd, *args)\nTkBindTag::ALL</code></pre>\n"],["bind_at_call","DL::CarriedFunction","classes/DL/CarriedFunction.html#method-i-bind_at_call","(&block)",""],["bind_at_call","DL::Function","classes/DL/Function.html#method-i-bind_at_call","(&block)",""],["bind_at_call","DL::TempFunction","classes/DL/TempFunction.html#method-i-bind_at_call","(&block)",""],["bind_function","DL::Importer","classes/DL/Importer.html#method-i-bind_function","(name, ctype, argtype, call_type = nil, &block)",""],["bind_remove","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-bind_remove","(context)",""],["bind_remove","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-bind_remove","(seq)",""],["bind_remove","Tk::Frame","classes/Tk/Frame.html#method-c-bind_remove","(*args)",""],["bind_remove","Tk::RbWidget::ScrollFrame","classes/Tk/RbWidget/ScrollFrame.html#method-i-bind_remove","(*args)",""],["bind_remove","Tk::Toplevel","classes/Tk/Toplevel.html#method-c-bind_remove","(*args)",""],["bind_remove","TkComm","classes/TkComm.html#method-i-bind_remove","(tagOrClass, context)",""],["bind_remove","TkTextTag","classes/TkTextTag.html#method-i-bind_remove","(seq)",""],["bind_remove","TkTextTag","classes/TkTextTag.html#method-i-bind_remove","(seq)",""],["bind_remove","TkcTagAccess","classes/TkcTagAccess.html#method-i-bind_remove","(seq)",""],["bind_remove_all","TkComm","classes/TkComm.html#method-i-bind_remove_all","(context)",""],["bindinfo","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-bindinfo","(context=nil)",""],["bindinfo","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-bindinfo","(seq=nil)",""],["bindinfo","Tk::Frame","classes/Tk/Frame.html#method-c-bindinfo","(*args)",""],["bindinfo","Tk::RbWidget::ScrollFrame","classes/Tk/RbWidget/ScrollFrame.html#method-i-bindinfo","(*args)",""],["bindinfo","Tk::Toplevel","classes/Tk/Toplevel.html#method-c-bindinfo","(*args)",""],["bindinfo","TkComm","classes/TkComm.html#method-i-bindinfo","(tagOrClass, context=nil)",""],["bindinfo","TkTextTag","classes/TkTextTag.html#method-i-bindinfo","(context=nil)",""],["bindinfo","TkTextTag","classes/TkTextTag.html#method-i-bindinfo","(context=nil)",""],["bindinfo","TkcTagAccess","classes/TkcTagAccess.html#method-i-bindinfo","(seq=nil)",""],["bindinfo_all","TkComm","classes/TkComm.html#method-i-bindinfo_all","(context=nil)",""],["binding","Kernel","classes/Kernel.html#method-i-binding","()","<p>Returns a <code>Binding</code> object, describing the variable and method\nbindings at the point of call. This object …\n"],["binding","Proc","classes/Proc.html#method-i-binding","()","<p>Returns the binding associated with <em>prc</em>. Note that\n<code>Kernel#eval</code> accepts either a <code>Proc</code> or a\n<code>Binding</code> object …\n"],["bindir","Gem","classes/Gem.html#method-c-bindir","(install_dir=Gem.dir)","<p>The path where gem executables are to be installed.\n"],["binmode","ARGF","classes/ARGF.html#method-i-binmode","()","<p>Puts <code>ARGF</code> into binary mode. Once a stream is in binary mode,\nit cannot be reset to non-binary mode.  …\n"],["binmode","IO","classes/IO.html#method-i-binmode","()","<p>Puts <em>ios</em> into binary mode. Once a stream is in binary mode, it\ncannot be reset to nonbinary mode.\n<p>newline …\n"],["binmode","Net::Telnet","classes/Net/Telnet.html#method-i-binmode","(mode = nil)","<p>Turn newline conversion on (<code>mode</code> == false) or off\n(<code>mode</code> == true), or return the current value (<code>mode</code>\nis …\n"],["binmode","StringIO","classes/StringIO.html#method-i-binmode","()",""],["binmode","TkTextIO","classes/TkTextIO.html#method-i-binmode","()",""],["binmode=","Net::Telnet","classes/Net/Telnet.html#method-i-binmode-3D","(mode)","<p>Turn newline conversion on (false) or off (true).\n"],["binmode?","ARGF","classes/ARGF.html#method-i-binmode-3F","()","\n<pre><code>Returns true if +ARGF+ is being read in binary mode; false otherwise. (To\nenable binary mode use +ARGF.binmode+.</code></pre>\n"],["binmode?","IO","classes/IO.html#method-i-binmode-3F","()","<p>Returns <code>true</code> if <em>ios</em> is binmode.\n"],["binread","IO","classes/IO.html#method-c-binread","(p1, p2 = v2, p3 = v3)","<p>Opens the file, optionally seeks to the given <em>offset</em>, then returns\n<em>length</em> bytes (defaulting to the rest …\n"],["binread","Pathname","classes/Pathname.html#method-i-binread","(p1 = v1, p2 = v2)","<p>See <code>IO.binread</code>.  Returns all the bytes from the file, or the\nfirst <code>N</code> if specified.\n"],["binread","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-binread","(channel, len=None, keys={})",""],["binwrite","IO","classes/IO.html#method-c-binwrite","(*args)","<p>Opens the file, optionally seeks to the given <em>offset</em>, writes\n<em>string</em> then returns the length written. …\n"],["bisque","TkPalette","classes/TkPalette.html#method-c-bisque","()",""],["bit_set?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-bit_set-3F","(p1)",""],["bitmapRow","Object","classes/Object.html#method-i-bitmapRow","(w,*args)","<p>bitmapRow – Create a row of bitmap items in a window.\n<p>Arguments: w -           The parent window that …\n"],["bitmap_for","RDoc::Markup::Attribute","classes/RDoc/Markup/Attribute.html#method-c-bitmap_for","(name)","<p>Returns a unique bit for <code>name</code>\n"],["bkgd","Curses","classes/Curses.html#method-c-bkgd","(p1)","<p>Window background manipulation routines.\n<p>Set the background property of the current and then apply the …\n"],["bkgd","Curses::Window","classes/Curses/Window.html#method-i-bkgd","(p1)","<p>Set the background of the current window and apply character Integer\n<code>ch</code> to every character.\n<p>see also  …\n"],["bkgdset","Curses","classes/Curses.html#method-c-bkgdset","(p1)","<p>Manipulate the background of the named window with character Integer\n<code>ch</code>\n<p>The background becomes a property …\n"],["bkgdset","Curses::Window","classes/Curses/Window.html#method-i-bkgdset","(p1)","<p>Manipulate the background of the current window with character Integer\n<code>ch</code>\n<p>see also Curses.bkgdset\n"],["blank","TkPhotoImage","classes/TkPhotoImage.html#method-i-blank","()","<p>Blank the image; that is, set the entire image to have no data, so it will\nbe displayed as transparent, …\n"],["blank","TkPhotoImage","classes/TkPhotoImage.html#method-i-blank","()","<p>Blank the image; that is, set the entire image to have no data, so it will\nbe displayed as transparent, …\n"],["blinding_off!","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-blinding_off-21","()",""],["blinding_off!","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-blinding_off-21","()",""],["blinding_on!","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-blinding_on-21","()",""],["blinding_on!","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-blinding_on-21","()",""],["blksize","File::Stat","classes/File/Stat.html#method-i-blksize","()","<p>Returns the native file system&#39;s block size. Will return\n<code>nil</code> on platforms that don&#39;t support …\n"],["block","Cal","classes/Cal.html#method-i-block","(xs, n)",""],["block_given?","Kernel","classes/Kernel.html#method-i-block_given-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["block_input","Spinner_demo","classes/Spinner_demo.html#method-i-block_input","(c)",""],["block_length","Digest::HMAC","classes/Digest/HMAC.html#method-i-block_length","()","<p>Returns the block length in bytes of the hmac.\n"],["block_length","Digest::Instance","classes/Digest/Instance.html#method-i-block_length","()","<p>Returns the block length of the digest.\n<p>This method is overridden by each implementation subclass.\n"],["block_length","Digest::SHA2","classes/Digest/SHA2.html#method-i-block_length","()","<p>Returns the block length of the digest in bytes.\n\n<pre><code>Digest::SHA256.new.digest_length * 8\n# =&gt; 512\nDigest::SHA384.new.digest_length ...\n</code></pre>\n"],["block_length","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-block_length","()","<p>Returns the block length of the digest algorithm, i.e. the length in bytes\nof an individual block. Most …\n"],["block_output_synchronize","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-block_output_synchronize","(&b)",""],["block_params=","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-block_params-3D","(value)","<p>Attempts to sanitize the content passed by the ruby parser: remove outer\nparentheses, etc.\n"],["block_scanf","String","classes/String.html#method-i-block_scanf","(fstr)","<p>Scans the current string until the match is exhausted yielding each match\nas it is encountered in the …\n"],["block_yield","DRb::DRbServer::InvokeMethod18Mixin","classes/DRb/DRbServer/InvokeMethod18Mixin.html#method-i-block_yield","(x)",""],["blockdev?","File","classes/File.html#method-c-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n"],["blockdev?","File::Stat","classes/File/Stat.html#method-i-blockdev-3F","()","<p>Returns <code>true</code> if the file is a block device, <code>false</code>\nif it isn&#39;t or if the operating system doesn&#39;t …\n"],["blockdev?","FileTest","classes/FileTest.html#method-i-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n"],["blockdev?","Pathname","classes/Pathname.html#method-i-blockdev-3F","()","<p>See <code>FileTest.blockdev?</code>.\n"],["blockquote","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-blockquote","(cite = {})","<p>Generate a BlockQuote element as a string.\n<p><code>cite</code> can either be a string, give the URI for the source of …\n"],["blocks","File::Stat","classes/File/Stat.html#method-i-blocks","()","<p>Returns the number of native file system blocks allocated for this file, or\n<code>nil</code> if the operating system …\n"],["blowup","Object","classes/Object.html#method-i-blowup","(num)",""],["blt_table_add","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_add","(*args)",""],["blt_table_arrange","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_arrange","()",""],["blt_table_cget","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_cget","(*args)",""],["blt_table_cget_strict","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_cget_strict","(*args)",""],["blt_table_cget_tkstring","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_cget_tkstring","(*args)",""],["blt_table_configinfo","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_configinfo","(*args)",""],["blt_table_configure","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_configure","(*args)",""],["blt_table_current_configinfo","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_current_configinfo","(*args)",""],["blt_table_current_itemconfiginfo","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_current_itemconfiginfo","(*args)",""],["blt_table_delete","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_delete","(*args)",""],["blt_table_extents","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_extents","(item)",""],["blt_table_insert","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_insert","(*args)",""],["blt_table_insert_after","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_insert_after","(*args)",""],["blt_table_insert_before","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_insert_before","(*args)",""],["blt_table_itemcget","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_itemcget","(*args)",""],["blt_table_itemcget_strict","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_itemcget_strict","(*args)",""],["blt_table_itemcget_tkstring","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_itemcget_tkstring","(*args)",""],["blt_table_itemconfiginfo","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_itemconfiginfo","(*args)",""],["blt_table_itemconfigure","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_itemconfigure","(*args)",""],["blt_table_iteminfo","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_iteminfo","(item)",""],["blt_table_join","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_join","(first, last)",""],["blt_table_locate","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_locate","(x, y)",""],["blt_table_save","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_save","()",""],["blt_table_search","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_search","(*args)",""],["blt_table_split","Tk::BLT::Table::TableContainer","classes/Tk/BLT/Table/TableContainer.html#method-i-blt_table_split","(*args)",""],["bltdebug","Tk::BLT","classes/Tk/BLT.html#method-c-bltdebug","(lvl = nil)",""],["bm","Benchmark","classes/Benchmark.html#method-c-bm","(label_width = 0, *labels)","<p>A simple interface to the #benchmark method, #bm is generates sequential\nreports with labels.  The parameters …\n"],["bm","Object","classes/Object.html#method-i-bm","(file)",""],["bmbm","Benchmark","classes/Benchmark.html#method-c-bmbm","(width = 0)","<p>Sometimes benchmark results are skewed because code executed earlier\nencounters different garbage collection …\n"],["body","Mail","classes/Mail.html#method-i-body","()",""],["body","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-body","()","<p>Returns the full entity body.\n<p>Calling this method a second or subsequent time will return the string\nalready …\n"],["body","Tk::Itcl","classes/Tk/Itcl.html#method-c-body","(klass, func, args, body)",""],["body","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-body","(&block)",""],["body=","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-body-3D","(str)",""],["body=","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-body-3D","(value)","<p>Because it may be necessary to modify the body, Eg, decompression this\nmethod facilitates that.\n"],["body_exist?","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-body_exist-3F","()",""],["body_permitted?","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-c-body_permitted-3F","()","<p>true if the response has a body.\n"],["body_stream=","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-body_stream-3D","(input)",""],["bool","Socket::Option","classes/Socket/Option.html#method-c-bool","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains boolean as data.\nActually 0 or 1 as int is used.\n\n<pre><code>p ...</code></pre>\n"],["bool","Socket::Option","classes/Socket/Option.html#method-i-bool","()","<p>Returns the data in <em>sockopt</em> as an boolean value.\n\n<pre><code>sockopt = Socket::Option.int(:INET, :SOCKET, :KEEPALIVE, ...</code></pre>\n"],["bool","TkUtil","classes/TkUtil.html#method-c-bool","(p1)","<p>/\n"],["bool","TkUtil","classes/TkUtil.html#method-i-bool","(p1)","<p>/\n"],["bool","TkVariable","classes/TkVariable.html#method-i-bool","()",""],["bool","TkVariable","classes/TkVariable.html#method-i-bool","()",""],["bool=","TkVariable","classes/TkVariable.html#method-i-bool-3D","(val)",""],["bool=","TkVariable","classes/TkVariable.html#method-i-bool-3D","(val)",""],["bool_element","TkVariable","classes/TkVariable.html#method-i-bool_element","(*idxs)",""],["bool_element","TkVariable","classes/TkVariable.html#method-i-bool_element","(*idxs)",""],["bool_type=","TkVariable","classes/TkVariable.html#method-i-bool_type-3D","(val)",""],["bool_type=","TkVariable","classes/TkVariable.html#method-i-bool_type-3D","(val)",""],["boolean","REXML::Functions","classes/REXML/Functions.html#method-c-boolean","( object=nil )","<p>UNTESTED\n"],["boolean","XMLRPC::Convert","classes/XMLRPC/Convert.html#method-c-boolean","(str)",""],["border_dragto","Tk::TkTable","classes/Tk/TkTable.html#method-i-border_dragto","(x, y)",""],["border_mark","Tk::TkTable","classes/Tk/TkTable.html#method-i-border_mark","(x, y)",""],["border_mark_col","Tk::TkTable","classes/Tk/TkTable.html#method-i-border_mark_col","(x, y)",""],["border_mark_row","Tk::TkTable","classes/Tk/TkTable.html#method-i-border_mark_row","(x, y)",""],["both?","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-both-3F","()","<p>Is fetching of local and remote information enabled?\n"],["bottom","IRB::Frame","classes/IRB/Frame.html#method-c-bottom","(n = 0)","<p>singleton functions\n"],["bottom","IRB::Frame","classes/IRB/Frame.html#method-i-bottom","(n = 0)",""],["bound?","DL::Function","classes/DL/Function.html#method-i-bound-3F","()",""],["box","Curses::Window","classes/Curses/Window.html#method-i-box","(p1, p2, p3 = v3)","<p>set the characters to frame the window in. The vertical <code>vert</code>\nand horizontal <code>hor</code> character.\n\n<pre><code>win = Curses::Window.new(5,5,5,5) ...</code></pre>\n"],["box","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-box","(text, width=nil, height=nil)",""],["box","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-box","(x, y, r)","<p>Helper functions\n"],["box_and_whiskers","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-box_and_whiskers","(series, xcrd, ycrd)",""],["box_whiskers","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-box_whiskers","(series, xcrd, ycrd)",""],["boxcoords","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-boxcoords","(x1, y1, x2, y2)",""],["bracket","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-bracket","(dir, dist, from_pos, to_pos)",""],["break","PrettyPrint::Group","classes/PrettyPrint/Group.html#method-i-break","()",""],["break?","PrettyPrint::Group","classes/PrettyPrint/Group.html#method-i-break-3F","()",""],["break_outmost_groups","PrettyPrint","classes/PrettyPrint.html#method-i-break_outmost_groups","()","<p>Breaks the buffer into lines that are shorter than #maxwidth\n"],["break_points","DEBUGGER__","classes/DEBUGGER__.html#method-i-break_points","()",""],["break_points","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-break_points","()",""],["break_text","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-break_text","(idx)",""],["breakable","PrettyPrint","classes/PrettyPrint.html#method-i-breakable","(sep=' ', width=sep.length)","<p>This says “you can break a line here if necessary”, and a\n<code>width</code>-column text <code>sep</code> is inserted …\n"],["breakable","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-breakable","(sep=' ', width=nil)",""],["broadcast","ConditionVariable","classes/ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["broadcast","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["broadcast","Tk::WinRegistry","classes/Tk/WinRegistry.html#method-i-broadcast","(keynam, timeout=nil)",""],["browse","Object","classes/Object.html#method-i-browse","(dir, file)",""],["browsedir","Object","classes/Object.html#method-i-browsedir","(dir)",""],["bufferSize","Win32::SSPI::SecurityBuffer","classes/Win32/SSPI/SecurityBuffer.html#method-i-bufferSize","()",""],["bufferType","Win32::SSPI::SecurityBuffer","classes/Win32/SSPI/SecurityBuffer.html#method-i-bufferType","()",""],["bufsize","Object::Syck::Parser","classes/Object/Syck/Parser.html#method-i-bufsize","()","<p>YAML::Syck::Parser.bufsize =&gt; Integer\n"],["bufsize=","Object::Syck::Parser","classes/Object/Syck/Parser.html#method-i-bufsize-3D","(p1)","<p>YAML::Syck::Parser.bufsize = Integer\n"],["build","Gem::Builder","classes/Gem/Builder.html#method-i-build","(skip_validation=false)","<p>Builds the gem from the specification.  Returns the name of the file\nwritten.\n"],["build","Gem::Ext::ConfigureBuilder","classes/Gem/Ext/ConfigureBuilder.html#method-c-build","(extension, directory, dest_path, results)",""],["build","Gem::Ext::ExtConfBuilder","classes/Gem/Ext/ExtConfBuilder.html#method-c-build","(extension, directory, dest_path, results)",""],["build","Gem::Ext::RakeBuilder","classes/Gem/Ext/RakeBuilder.html#method-c-build","(extension, directory, dest_path, results)",""],["build","Matrix","classes/Matrix.html#method-c-build","(row_size, column_size = row_size)","<p>Creates a matrix of size <code>row_size</code> x <code>column_size</code>.\nIt fills the values by calling the given block, passing …\n"],["build","Object","classes/Object.html#method-i-build","()",""],["build","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-c-build","(opts, vpath = ['./'])",""],["build","URI::FTP","classes/URI/FTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::FTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::Generic","classes/URI/Generic.html#method-c-build","(args)","<p>Synopsis\n<p>See #new\n<p>Description\n"],["build","URI::HTTP","classes/URI/HTTP.html#method-c-build","(args)","<p>Description\n<p>Create a new URI::HTTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::LDAP","classes/URI/LDAP.html#method-c-build","(args)","<p>Description\n<p>Create a new URI::LDAP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::MailTo","classes/URI/MailTo.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::MailTo object from components, with syntax checking.\n<p>Components can be provided …\n"],["build2","URI::Generic","classes/URI/Generic.html#method-c-build2","(args)","<p>Synopsis\n<p>See #new\n<p>Description\n"],["build_args","Gem::Command","classes/Gem/Command.html#method-c-build_args","()","<p>Arguments used when building gems\n"],["build_args=","Gem::Command","classes/Gem/Command.html#method-c-build_args-3D","(value)",""],["build_cert","Gem::Security","classes/Gem/Security.html#method-c-build_cert","(name, key, opt = {})","<p>Build a certificate from the given DN and private key.\n"],["build_extensions","Gem::Installer","classes/Gem/Installer.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files,\nconfigure scripts and rakefiles or …\n"],["build_heading","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-build_heading","(level)","<p>Builds a Heading of <code>level</code>\n"],["build_indicies","Gem::Indexer","classes/Gem/Indexer.html#method-i-build_indicies","()","<p>Build various indicies\n"],["build_legacy_indicies","Gem::Indexer","classes/Gem/Indexer.html#method-i-build_legacy_indicies","()","<p>Builds indicies for RubyGems older than 1.2.x\n"],["build_list","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-build_list","(margin)","<p>Builds a List flush to <code>margin</code>\n"],["build_marshal_gemspecs","Gem::Indexer","classes/Gem/Indexer.html#method-i-build_marshal_gemspecs","()","<p>Builds Marshal quick index gemspecs.\n"],["build_modern_index","Gem::Indexer","classes/Gem/Indexer.html#method-i-build_modern_index","(index, file, name)","<p>Build a single index for RubyGems 1.2 and newer\n"],["build_modern_indicies","Gem::Indexer","classes/Gem/Indexer.html#method-i-build_modern_indicies","()","<p>Builds indicies for RubyGems 1.2 and newer. Handles full, latest,\nprerelease\n"],["build_paragraph","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-build_paragraph","(margin)","<p>Builds a Paragraph that is flush to <code>margin</code>\n"],["build_rss","Gem::Indexer","classes/Gem/Indexer.html#method-i-build_rss","()","<p>Builds an RSS feed for past two days gem releases according to the\ngem&#39;s date.\n"],["build_self_signed_cert","Gem::Security","classes/Gem/Security.html#method-c-build_self_signed_cert","(email_addr, opt = {})","<p>Build a self-signed certificate for the given email address.\n"],["build_string","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-i-build_string","()",""],["build_tree","ActionMap","classes/ActionMap.html#method-c-build_tree","(rects)",""],["build_verbatim","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-build_verbatim","(margin)","<p>Builds a Verbatim that is indented from <code>margin</code>.\n<p>The verbatim block is shifted left (the least indented …\n"],["builtin_curves","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-c-builtin_curves","()","<p>See the OpenSSL documentation for EC_builtin_curves()\n"],["bump","Version","classes/Version.html#method-i-bump","()","<p>Return a new version object where the next to the last revision number is\none greater (e.g., 5.3.1 =&gt; …\n"],["busy","Tk::Busy","classes/Tk/Busy.html#method-i-busy","(keys={})",""],["busy_cget","Tk::Busy","classes/Tk/Busy.html#method-i-busy_cget","(option)",""],["busy_configinfo","Tk::Busy","classes/Tk/Busy.html#method-i-busy_configinfo","(option=nil)",""],["busy_configure","Tk::Busy","classes/Tk/Busy.html#method-i-busy_configure","(option, value=None)",""],["busy_current?","Tk::Busy","classes/Tk/Busy.html#method-i-busy_current-3F","()",""],["busy_current_configinfo","Tk::Busy","classes/Tk/Busy.html#method-i-busy_current_configinfo","(option=nil)",""],["busy_forget","Tk::Busy","classes/Tk/Busy.html#method-i-busy_forget","()",""],["busy_hold","Tk::Busy","classes/Tk/Busy.html#method-i-busy_hold","(keys={})",""],["busy_status","Tk::Busy","classes/Tk/Busy.html#method-i-busy_status","()",""],["butPress","Object","classes/Object.html#method-i-butPress","(w,color)","<p>Method that&#39;s invoked when the button embedded in the canvas is\ninvoked.\n"],["button_activate","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-button_activate","(tag)",""],["button_activate","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-button_activate","()",""],["button_bind","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-button_bind","(tag, seq, *args)",""],["button_bind","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-button_bind","(seq, *args)",""],["button_bind_append","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-button_bind_append","(tag, seq, *args)",""],["button_bind_append","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-button_bind_append","(seq, *args)",""],["button_bind_remove","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-button_bind_remove","(tag, seq)",""],["button_bind_remove","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-button_bind_remove","(seq)",""],["button_bindinfo","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-button_bindinfo","(tag, seq=nil)",""],["button_bindinfo","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-button_bindinfo","(seq=nil)",""],["button_cget","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-button_cget","(option)",""],["button_cget_strict","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-button_cget_strict","(option)",""],["button_cget_tkstring","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-button_cget_tkstring","(option)",""],["button_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-button_configinfo","(slot=nil)",""],["button_configure","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-button_configure","(slot, value=None)",""],["bwinclude","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-bwinclude","(klass, subclass, subpath, *args)",""],["by_col","CSV::Table","classes/CSV/Table.html#method-i-by_col","()","<p>Returns a duplicate table object, in column mode.  This is handy for\nchaining in a single call without …\n"],["by_col!","CSV::Table","classes/CSV/Table.html#method-i-by_col-21","()","<p>Switches the mode of this table to column mode.  All calls to indexing and\niteration methods will work …\n"],["by_col_or_row","CSV::Table","classes/CSV/Table.html#method-i-by_col_or_row","()","<p>Returns a duplicate table object, in mixed mode.  This is handy for\nchaining in a single call without …\n"],["by_col_or_row!","CSV::Table","classes/CSV/Table.html#method-i-by_col_or_row-21","()","<p>Switches the mode of this table to mixed mode.  All calls to indexing and\niteration methods will use …\n"],["by_id","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-c-by_id","(p1)",""],["by_row","CSV::Table","classes/CSV/Table.html#method-i-by_row","()","<p>Returns a duplicate table object, in row mode.  This is handy for chaining\nin a single call without changing …\n"],["by_row!","CSV::Table","classes/CSV/Table.html#method-i-by_row-21","()","<p>Switches the mode of this table to row mode.  All calls to indexing and\niteration methods will work with …\n"],["bytes","ARGF","classes/ARGF.html#method-i-bytes","()","\n<pre><code>Iterates over each byte of each file in +ARGV+.\nA byte is returned as a +Fixnum+ in the range 0..255. ...</code></pre>\n"],["bytes","IO","classes/IO.html#method-i-bytes","()","<p>Calls the given block once for each byte (0..255) in <em>ios</em>, passing\nthe byte as an argument. The stream …\n"],["bytes","REXML::Child","classes/REXML/Child.html#method-i-bytes","()","<p>This doesn&#39;t yet handle encodings\n"],["bytes","Random","classes/Random.html#method-i-bytes","(p1)","<p>Returns a random binary string.  The argument size specified the length of\nthe result string.\n"],["bytes","String","classes/String.html#method-i-bytes","()","<p>Passes each byte in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre><code>&quot;hello&quot;.each_byte ...</code></pre>\n"],["bytes","StringIO","classes/StringIO.html#method-i-bytes","()","<p>See IO#each_byte.\n"],["bytes","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-bytes","()","<p>See Zlib::GzipReader documentation for a description.\n"],["bytes_read","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-bytes_read","()","<p>Number of bytes read out of the tar entry\n"],["bytesize","String","classes/String.html#method-i-bytesize","()","<p>Returns the length of <em>str</em> in bytes.\n"],["byteslice","String","classes/String.html#method-i-byteslice","(*args)","<p>Byte Reference—If passed a single <code>Fixnum</code>, returns a substring\nof one byte at that position. If passed …\n"],["c_esc","Object","classes/Object.html#method-i-c_esc","(str)",""],["c_esc","Prelude","classes/Prelude.html#method-i-c_esc","(str)",""],["c_str","Object","classes/Object.html#method-i-c_str","(str)",""],["cache","Prime::TrialDivision","classes/Prime/TrialDivision.html#method-i-cache","()","<p>Returns the cached prime numbers.\n"],["cache_dir","Gem","classes/Gem.html#method-c-cache_dir","(custom_dir=false)","<p>Get the appropriate cache path.\n<p>Pass a string to use a different base path, or nil/false (default) for …\n"],["cache_dir","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-cache_dir","(uri)","<p>Returns the local directory to write <code>uri</code> to.\n"],["cache_dir","Gem::Specification","classes/Gem/Specification.html#method-i-cache_dir","()","<p>Returns the full path to the cache directory containing this spec&#39;s\ncached gem.\n"],["cache_file","Gem::Specification","classes/Gem/Specification.html#method-i-cache_file","()","<p>Returns the full path to the cached gem for this spec.\n"],["cache_gem","Gem","classes/Gem.html#method-c-cache_gem","(filename, user_dir=false)","<p>Given a gem path, find the gem in cache.\n<p>Pass a string as the second argument to use a different base …\n"],["cache_gem","Gem::Specification","classes/Gem/Specification.html#method-i-cache_gem","()",""],["cache_path","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-cache_path","()","<p>Path to the cache file\n"],["cachesize=","GDBM","classes/GDBM.html#method-i-cachesize-3D","(p1)","<p>Sets the size of the internal bucket cache to <em>size</em>.\n"],["calc_each","Object","classes/Object.html#method-i-calc_each","(data)",""],["calc_stat","Object","classes/Object.html#method-i-calc_stat","(stats)",""],["calculate","RDoc::Stats","classes/RDoc/Stats.html#method-i-calculate","()","<p>Calculates documentation totals and percentages for classes, modules,\nconstants, attributes and methods. …\n"],["call","Continuation","classes/Continuation.html#method-i-call","(*args)","<p>Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are …\n"],["call","DL::CFunc","classes/DL/CFunc.html#method-i-call","(p1)","<p>Calls the function pointer passing in <code>ary</code> as values to the\nunderlying C function.  The return value depends …\n"],["call","DL::Function","classes/DL/Function.html#method-i-call","(*args, &block)",""],["call","Fiddle::Closure::BlockCaller","classes/Fiddle/Closure/BlockCaller.html#method-i-call","(*args)","<p>Calls the constructed BlockCaller, with <code>args</code>\n<p>For an example see Fiddle::Closure::BlockCaller.new\n"],["call","Fiddle::Function","classes/Fiddle/Function.html#method-i-call","(*args)","<p>Calls the constructed Function, with <code>args</code>\n<p>For an example see Fiddle::Function\n"],["call","Logger::Formatter","classes/Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call","Method","classes/Method.html#method-i-call","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the\nmethod&#39;s return value.\n\n<pre><code>m = 12.method(&quot;+&quot;) ...</code></pre>\n"],["call","MultiTkIp","classes/MultiTkIp.html#method-i-call","(*args)","<p>def eval_proc(*args)\n\n<pre><code># The scope of the eval-block of &#39;eval_proc&#39; method is different from\n# the external. ...</code></pre>\n"],["call","MultiTkIp","classes/MultiTkIp.html#method-i-call","(*args)","<p>def eval_proc(*args)\n\n<pre><code># The scope of the eval-block of &#39;eval_proc&#39; method is different from\n# the external. ...</code></pre>\n"],["call","MultiTkIp","classes/MultiTkIp.html#method-i-call","(*args)","<p>def eval_proc(*args)\n\n<pre><code># The scope of the eval-block of &#39;eval_proc&#39; method is different from\n# the external. ...</code></pre>\n"],["call","MultiTkIp","classes/MultiTkIp.html#method-i-call","(*args)","<p>def eval_proc(*args)\n\n<pre><code># The scope of the eval-block of &#39;eval_proc&#39; method is different from\n# the external. ...</code></pre>\n"],["call","Proc","classes/Proc.html#method-i-call","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["call","Symbol","classes/Symbol.html#method-i-call","(*args, &block)",""],["call","TkCore","classes/TkCore.html#method-i-call","(*args)",""],["call","Win32API","classes/Win32API.html#method-i-call","(*args)",""],["call","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-call","(method, *args)","<p>Call methods ————————————————————–\n"],["call2","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-call2","(method, *args)",""],["call2_async","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-call2_async","(method, *args)",""],["call_async","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-call_async","(method, *args)",""],["call_font_configure","TkFont","classes/TkFont.html#method-i-call_font_configure","(path, *args)",""],["call_font_configure","TkFont","classes/TkFont.html#method-i-call_font_configure","(path, *args)",""],["call_method","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-call_method","(name, *args)",""],["call_proc","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-c-call_proc","(name, *args)",""],["callable_methods","Object","classes/Object.html#method-i-callable_methods","()",""],["callback","TkCore","classes/TkCore.html#method-c-callback","(*arg)",""],["callback","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-callback","(namespace, locale, src_str, *args)",""],["callback","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-callback","(namespace, locale, src_str, *args)",""],["callback","TkTimer","classes/TkTimer.html#method-c-callback","(obj_id)",""],["callback","TkTimer","classes/TkTimer.html#method-c-callback","(obj_id)",""],["callback","TkUtil","classes/TkUtil.html#method-c-callback","(p1, *args)",""],["callback","TkVariable","classes/TkVariable.html#method-c-callback","(id, name1, name2, op)","<p>def TkVariable.callback(args)\n"],["callback","TkVariable","classes/TkVariable.html#method-c-callback","(id, name1, name2, op)","<p>def TkVariable.callback(args)\n"],["callback_break","TkCore","classes/TkCore.html#method-i-callback_break","()",""],["callback_continue","TkCore","classes/TkCore.html#method-i-callback_continue","()",""],["callback_return","TkCore","classes/TkCore.html#method-i-callback_return","()",""],["callcc","Kernel","classes/Kernel.html#method-i-callcc","()","<p>Generates a <code>Continuation</code> object, which it passes to the\nassociated block. You need to <code>require &#39;continuation&#39;</code> …\n"],["caller","Kernel","classes/Kernel.html#method-i-caller","(p1 = v1)","<p>Returns the current execution stack—an array containing strings in the form\n“<em>file:line</em>&#39;&#39; or …\n"],["calltype","DL::CFunc","classes/DL/CFunc.html#method-i-calltype","()","<p>Get the call type of this function.\n"],["calltype=","DL::CFunc","classes/DL/CFunc.html#method-i-calltype-3D","(p1)","<p>Set the call type for this function.\n"],["can_change_color?","Curses","classes/Curses.html#method-c-can_change_color-3F","()","<p>Returns <code>true</code> or <code>false</code> depending on whether the\nterminal can change color attributes\n"],["can_parse","RDoc::Parser","classes/RDoc/Parser.html#method-c-can_parse","(file_name)","<p>Return a parser that can handle a particular extension\n"],["cancel","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-cancel","()","<p>Marks this TupleEntry as canceled.\n"],["cancel","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-i-cancel","()",""],["cancel","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-cancel","(win)",""],["cancel","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-i-cancel","()",""],["cancel","TkRTTimer","classes/TkRTTimer.html#method-i-cancel","()",""],["cancel","TkTimer","classes/TkTimer.html#method-i-cancel","()",""],["cancel","TkTimer","classes/TkTimer.html#method-i-cancel","()",""],["cancel","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-i-cancel","(thread, id)","<p>Cancels the timeout handler <code>id</code>\n"],["cancel","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-c-cancel","(id)","<p>Cancels the timeout handler <code>id</code>\n"],["cancel_on_exception=","TkTimer","classes/TkTimer.html#method-i-cancel_on_exception-3D","(mode)",""],["cancel_on_exception=","TkTimer","classes/TkTimer.html#method-i-cancel_on_exception-3D","(mode)",""],["cancel_on_exception?","TkTimer","classes/TkTimer.html#method-i-cancel_on_exception-3F","()",""],["cancel_on_exception?","TkTimer","classes/TkTimer.html#method-i-cancel_on_exception-3F","()",""],["canceled?","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-canceled-3F","()","<p>Returns the canceled status.\n"],["candidate","OptionParser","classes/OptionParser.html#method-i-candidate","(word)",""],["candidate","OptionParser::Completion","classes/OptionParser/Completion.html#method-c-candidate","(key, icase = false, pat = nil, &block)",""],["candidate","OptionParser::Completion","classes/OptionParser/Completion.html#method-i-candidate","(key, icase = false, pat = nil)",""],["canonical","Psych::Emitter","classes/Psych/Emitter.html#method-i-canonical","()","<p>Get the output style, canonical or not.\n"],["canonical=","Psych::Emitter","classes/Psych/Emitter.html#method-i-canonical-3D","(p1)","<p>Set the output style to canonical, or not.\n"],["canonical_each","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-canonical_each","()",""],["canonname","Addrinfo","classes/Addrinfo.html#method-i-canonname","()","<p>returns the canonical name as an string.\n<p>nil is returned if no canonical name.\n<p>The canonical name is set …\n"],["canvas","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-canvas","()",""],["canvas_x","Tk::Canvas","classes/Tk/Canvas.html#method-i-canvas_x","(screen_x, *args)",""],["canvas_y","Tk::Canvas","classes/Tk/Canvas.html#method-i-canvas_y","(screen_y, *args)",""],["canvasx","Tk::Canvas","classes/Tk/Canvas.html#method-i-canvasx","(screen_x, *args)",""],["canvasx","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-canvasx","(screen_x, *args)",""],["canvasy","Tk::Canvas","classes/Tk/Canvas.html#method-i-canvasy","(screen_y, *args)",""],["canvasy","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-canvasy","(screen_y, *args)",""],["capabilities","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-capabilities","()","<p>Returns a hash of the human readable reply text in the response if it is\nmultiple lines. It does not …\n"],["capability","Net::IMAP","classes/Net/IMAP.html#method-i-capability","()","<p>Sends a CAPABILITY command, and returns an array of capabilities that the\nserver supports.  Each capability …\n"],["capable_auth_types","Net::SMTP","classes/Net/SMTP.html#method-i-capable_auth_types","()","<p>Returns supported authentication methods on this server. You cannot get\nvalid value before opening SMTP …\n"],["capable_auth_types","Net::SMTP","classes/Net/SMTP.html#method-i-capable_auth_types","()","<p>Returns supported authentication methods on this server. You cannot get\nvalid value before opening SMTP …\n"],["capable_cram_md5_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_cram_md5_auth-3F","()","<p>true if server advertises AUTH CRAM-MD5. You cannot get valid value before\nopening SMTP session.\n"],["capable_cram_md5_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_cram_md5_auth-3F","()","<p>true if server advertises AUTH CRAM-MD5. You cannot get valid value before\nopening SMTP session.\n"],["capable_login_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_login_auth-3F","()","<p>true if server advertises AUTH LOGIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_login_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_login_auth-3F","()","<p>true if server advertises AUTH LOGIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_plain_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_plain_auth-3F","()","<p>true if server advertises AUTH PLAIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_plain_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_plain_auth-3F","()","<p>true if server advertises AUTH PLAIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_starttls?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_starttls-3F","()","<p>true if server advertises STARTTLS. You cannot get valid value before\nopening SMTP session.\n"],["capable_starttls?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_starttls-3F","()","<p>true if server advertises STARTTLS. You cannot get valid value before\nopening SMTP session.\n"],["capitalize","String","classes/String.html#method-i-capitalize","()","<p>Returns a copy of <em>str</em> with the first character converted to\nuppercase and the remainder to lowercase. …\n"],["capitalize","Symbol","classes/Symbol.html#method-i-capitalize","()","<p>Same as <code>sym.to_s.capitalize.intern</code>.\n"],["capitalize!","String","classes/String.html#method-i-capitalize-21","()","<p>Modifies <em>str</em> by converting the first character to uppercase and\nthe remainder to lowercase. Returns  …\n"],["caption","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-caption","(align = {})","<p>Generate a Table Caption element as a string.\n<p><code>align</code> can be a string, giving the alignment of the caption …\n"],["capture2","Open3","classes/Open3.html#method-c-capture2","(*cmd, &block)","<p>Open3.capture2 captures the standard output of a command.\n\n<pre><code>stdout_str, status = Open3.capture2([env,] cmd... ...</code></pre>\n"],["capture2e","Open3","classes/Open3.html#method-c-capture2e","(*cmd, &block)","<p>Open3.capture2e captures the standard output and the standard error of a\ncommand.\n\n<pre><code>stdout_and_stderr_str, ...</code></pre>\n"],["capture3","Open3","classes/Open3.html#method-c-capture3","(*cmd, &block)","<p>Open3.capture3 captures the standard output and the standard error of a\ncommand.\n\n<pre><code>stdout_str, stderr_str, ...</code></pre>\n"],["captures","MatchData","classes/MatchData.html#method-i-captures","()","<p>Returns the array of captures; equivalent to <code>mtch.to_a[1..-1]</code>.\n\n<pre><code>f1,f2,f3,f4 = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;).captures ...</code></pre>\n"],["caret","TkXIM","classes/TkXIM.html#method-c-caret","(win, keys=nil)",""],["caret","TkXIM","classes/TkXIM.html#method-i-caret","(keys=nil)",""],["casecmp","String","classes/String.html#method-i-casecmp","(p1)","<p>Case-insensitive version of <code>String#&lt;=&gt;</code>.\n\n<pre><code>&quot;abcdef&quot;.casecmp(&quot;abcde&quot;)     #=&gt; 1\n&quot;aBcDeF&quot;.casecmp(&quot;abcdef&quot;) ...\n</code></pre>\n"],["casecmp","Symbol","classes/Symbol.html#method-i-casecmp","(p1)","<p>Case-insensitive version of <code>Symbol#&lt;=&gt;</code>.\n"],["casefold?","Regexp","classes/Regexp.html#method-i-casefold-3F","()","<p>Returns the value of the case-insensitive flag.\n\n<pre><code>/a/.casefold?           #=&gt; false\n/a/i.casefold?      ...\n</code></pre>\n"],["cat","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-cat","(*filenames)",""],["catch","Kernel","classes/Kernel.html#method-i-catch","(p1 = v1)","<p><code>catch</code> executes its block. If a <code>throw</code> is executed,\nRuby searches up its stack for a <code>catch</code> block with a …\n"],["cb_call","TkRTTimer","classes/TkRTTimer.html#method-i-cb_call","()",""],["cb_call","TkTimer","classes/TkTimer.html#method-i-cb_call","()",""],["cb_call","TkTimer","classes/TkTimer.html#method-i-cb_call","()",""],["cb_entry_class","MultiTkIp","classes/MultiTkIp.html#method-c-cb_entry_class","()",""],["cb_entry_class","MultiTkIp","classes/MultiTkIp.html#method-c-cb_entry_class","()",""],["cb_entry_class","MultiTkIp","classes/MultiTkIp.html#method-c-cb_entry_class","()",""],["cb_entry_class","MultiTkIp","classes/MultiTkIp.html#method-c-cb_entry_class","()",""],["cb_error","MultiTkIp","classes/MultiTkIp.html#method-i-cb_error","(e)",""],["cb_error","MultiTkIp","classes/MultiTkIp.html#method-i-cb_error","(e)",""],["cb_error","MultiTkIp","classes/MultiTkIp.html#method-i-cb_error","(e)",""],["cb_error","MultiTkIp","classes/MultiTkIp.html#method-i-cb_error","(e)",""],["cb_eval","MultiTkIp","classes/MultiTkIp.html#method-i-cb_eval","(cmd, *args)","<p>def cb_eval(cmd, *args)\n\n<pre><code>#self.eval_callback{ TkComm._get_eval_string(TkUtil.eval_cmd(cmd, *args)) }\n#ret ...</code></pre>\n"],["cb_eval","MultiTkIp","classes/MultiTkIp.html#method-i-cb_eval","(cmd, *args)","<p>def cb_eval(cmd, *args)\n\n<pre><code>#self.eval_callback{ TkComm._get_eval_string(TkUtil.eval_cmd(cmd, *args)) }\n#ret ...</code></pre>\n"],["cb_eval","MultiTkIp","classes/MultiTkIp.html#method-i-cb_eval","(cmd, *args)","<p>def cb_eval(cmd, *args)\n\n<pre><code>#self.eval_callback{ TkComm._get_eval_string(TkUtil.eval_cmd(cmd, *args)) }\n#ret ...</code></pre>\n"],["cb_eval","MultiTkIp","classes/MultiTkIp.html#method-i-cb_eval","(cmd, *args)","<p>def cb_eval(cmd, *args)\n\n<pre><code>#self.eval_callback{ TkComm._get_eval_string(TkUtil.eval_cmd(cmd, *args)) }\n#ret ...</code></pre>\n"],["cbreak","Curses","classes/Curses.html#method-c-cbreak","()","<p>Put the terminal into cbreak mode.\n<p>Normally, the tty driver buffers typed characters until a newline or …\n"],["cbreak","Object","classes/Object.html#method-i-cbreak","()",""],["cbrt","CMath","classes/CMath.html#method-c-cbrt","(z)","<p>returns the principal value of the cube root of <code>z</code>\n"],["cbrt","Math","classes/Math.html#method-c-cbrt","(p1)","<p>Returns the cube root of <em>numeric</em>.\n\n<pre><code>-9.upto(9) {|x|\n  p [x, Math.cbrt(x), Math.cbrt(x)**3]\n}\n#=&gt;\n[-9, -2.0800838230519, ...\n</code></pre>\n"],["cbrt!","CMath","classes/CMath.html#method-c-cbrt-21","(z)",""],["cd","FileUtils","classes/FileUtils.html#method-c-cd","(dir, options = {})","<p>Options: verbose\n<p>Changes the current directory to the directory <code>dir</code>.\n<p>If this method is called with block, …\n"],["cd","Shell","classes/Shell.html#method-i-cd","(path)",""],["cdata","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-cdata","(content)","<p>Called when &lt;![CDATA[ … ]]&gt; is encountered in a document. @p content\n“…”\n"],["cdata","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-cdata","(content)","<p>Called when &lt;![CDATA[ … ]]&gt; is encountered in a document. @p content\n“…”\n"],["cdata?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-cdata-3F","()","<p>Content: [ String text ]\n"],["cdatas","REXML::Element","classes/REXML/Element.html#method-i-cdatas","()","<p>Get an array of all CData children. IMMUTABLE\n"],["ceil","BigDecimal","classes/BigDecimal.html#method-i-ceil","(p1 = v1)","<p>Return the smallest integer greater than or equal to the value, as a\nBigDecimal.\n<p>BigDecimal(&#39;3.14159&#39;).ceil …\n"],["ceil","Float","classes/Float.html#method-i-ceil","()","<p>Returns the smallest <code>Integer</code> greater than or equal to\n<em>flt</em>.\n\n<pre><code>1.2.ceil      #=&gt; 2\n2.0.ceil      #=&gt; 2\n(-1.2).ceil ...\n</code></pre>\n"],["ceil","Integer","classes/Integer.html#method-i-ceil","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["ceil","Integer","classes/Integer.html#method-i-ceil","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["ceil","Numeric","classes/Numeric.html#method-i-ceil","()","<p>Returns the smallest <code>Integer</code> greater than or equal to\n<em>num</em>. Class <code>Numeric</code> achieves this by converting …\n"],["ceil","Rational","classes/Rational.html#method-i-ceil","(*args)","<p>Returns the truncated value (toward positive infinity).\n<p>For example:\n\n<pre><code>Rational(3).ceil      #=&gt; 3\nRational(2, ...\n</code></pre>\n"],["ceiling","REXML::Functions","classes/REXML/Functions.html#method-c-ceiling","( number )",""],["cell","JISX0208::Char","classes/JISX0208/Char.html#method-i-cell","()",""],["cells","TkWinfo","classes/TkWinfo.html#method-c-cells","(win)",""],["cells","TkWinfo","classes/TkWinfo.html#method-c-cells","(win)",""],["center","String","classes/String.html#method-i-center","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em>\ncentered …\n"],["center","Tk::Iwidgets::Shell","classes/Tk/Iwidgets/Shell.html#method-i-center","(win=None)",""],["centroid","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-centroid","(item)",""],["cert","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-cert","()","<p>The X509 certificate for this socket endpoint.\n"],["cert","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-cert","()",""],["cert2text","Object","classes/Object.html#method-i-cert2text","(cert_str)",""],["certid","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-certid","()",""],["certificates","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-certificates","()",""],["certificates=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-certificates-3D","(p1)",""],["certs","Net::POP3","classes/Net/POP3.html#method-c-certs","()","<p>returns the :ca_file or :ca_path from POP3.ssh_params\n"],["certs","Net::POP3","classes/Net/POP3.html#method-c-certs","()","<p>returns the :ca_file or :ca_path from POP3.ssh_params\n"],["certs","Net::POP3","classes/Net/POP3.html#method-c-certs","()","<p>returns the :ca_file or :ca_path from POP3.ssh_params\n"],["certs","Net::POP3","classes/Net/POP3.html#method-c-certs","()","<p>returns the :ca_file or :ca_path from POP3.ssh_params\n"],["cget","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-cget","(win, option)",""],["cget","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-cget","(option)",""],["cget","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-cget","(option)",""],["cget","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-cget","(option)",""],["cget","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-cget","(option)",""],["cget","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-cget","(option)",""],["cget","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-cget","(option)",""],["cget","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-cget","(option)",""],["cget","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-cget","(option)",""],["cget","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-cget","(container, option)",""],["cget","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-cget","(*args)",""],["cget","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-i-cget","(master, option)",""],["cget","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-i-cget","(key)",""],["cget","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-cget","(slot)",""],["cget","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-cget","(slot)",""],["cget","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-cget","(key)",""],["cget","Tk::BWidget::MessageDlg","classes/Tk/BWidget/MessageDlg.html#method-i-cget","(slot)",""],["cget","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-cget","(key)",""],["cget","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-cget","(slot)",""],["cget","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-cget","(key)",""],["cget","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-cget","(w, slot)",""],["cget","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-i-cget","(slot)",""],["cget","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-cget","(slot)",""],["cget","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-cget","(option)",""],["cget","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-i-cget","(slot)",""],["cget","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-cget","(key)",""],["cget","TkComposite","classes/TkComposite.html#method-i-cget","(slot)",""],["cget","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-cget","(slot)",""],["cget","TkNamespace::Ensemble","classes/TkNamespace/Ensemble.html#method-i-cget","(slot)",""],["cget","TkPhotoImage","classes/TkPhotoImage.html#method-i-cget","(option)","<p>Returns the current value of the configuration option given by option.\nExample, display name of the file …\n"],["cget","TkPhotoImage","classes/TkPhotoImage.html#method-i-cget","(option)","<p>Returns the current value of the configuration option given by option.\nExample, display name of the file …\n"],["cget","TkTextImage","classes/TkTextImage.html#method-i-cget","(slot)",""],["cget","TkTextImage","classes/TkTextImage.html#method-i-cget","(slot)",""],["cget","TkTextTag","classes/TkTextTag.html#method-i-cget","(key)",""],["cget","TkTextTag","classes/TkTextTag.html#method-i-cget","(key)",""],["cget","TkTextWindow","classes/TkTextWindow.html#method-i-cget","(slot)",""],["cget","TkTextWindow","classes/TkTextWindow.html#method-i-cget","(slot)",""],["cget","TkcTagAccess","classes/TkcTagAccess.html#method-i-cget","(option)",""],["cget_strict","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-cget_strict","(win, option)",""],["cget_strict","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-cget_strict","(container, option)",""],["cget_strict","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-cget_strict","(*args)",""],["cget_strict","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-i-cget_strict","(master, option)",""],["cget_strict","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-i-cget_strict","(key)",""],["cget_strict","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-cget_strict","(slot)",""],["cget_strict","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-cget_strict","(slot)",""],["cget_strict","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-cget_strict","(key)",""],["cget_strict","Tk::BWidget::MessageDlg","classes/Tk/BWidget/MessageDlg.html#method-i-cget_strict","(slot)",""],["cget_strict","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-cget_strict","(key)",""],["cget_strict","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-cget_strict","(slot)",""],["cget_strict","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-i-cget_strict","(slot)",""],["cget_strict","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-cget_strict","(slot)",""],["cget_strict","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-cget_strict","(option)",""],["cget_strict","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-i-cget_strict","(slot)",""],["cget_strict","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-cget_strict","(key)",""],["cget_strict","TkComposite","classes/TkComposite.html#method-i-cget_strict","(slot)",""],["cget_strict","TkNamespace::Ensemble","classes/TkNamespace/Ensemble.html#method-i-cget_strict","(slot)",""],["cget_strict","TkPhotoImage","classes/TkPhotoImage.html#method-i-cget_strict","(option)",""],["cget_strict","TkPhotoImage","classes/TkPhotoImage.html#method-i-cget_strict","(option)",""],["cget_strict","TkTextImage","classes/TkTextImage.html#method-i-cget_strict","(slot)",""],["cget_strict","TkTextImage","classes/TkTextImage.html#method-i-cget_strict","(slot)",""],["cget_strict","TkTextTag","classes/TkTextTag.html#method-i-cget_strict","(key)",""],["cget_strict","TkTextTag","classes/TkTextTag.html#method-i-cget_strict","(key)",""],["cget_strict","TkTextWindow","classes/TkTextWindow.html#method-i-cget_strict","(slot)",""],["cget_strict","TkTextWindow","classes/TkTextWindow.html#method-i-cget_strict","(slot)",""],["cget_strict","TkcTagAccess","classes/TkcTagAccess.html#method-i-cget_strict","(option)",""],["cget_tkstring","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-cget_tkstring","(win, option)",""],["cget_tkstring","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-cget_tkstring","(container, option)",""],["cget_tkstring","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-cget_tkstring","(*args)",""],["cget_tkstring","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-i-cget_tkstring","(master, option)",""],["cget_tkstring","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-cget_tkstring","(slot)",""],["cget_tkstring","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-cget_tkstring","(key)",""],["cget_tkstring","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-cget_tkstring","(key)",""],["cget_tkstring","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-cget_tkstring","(option)",""],["cget_tkstring","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-cget_tkstring","(key)",""],["cget_tkstring","TkComposite","classes/TkComposite.html#method-i-cget_tkstring","(slot)",""],["cget_tkstring","TkTextTag","classes/TkTextTag.html#method-i-cget_tkstring","(key)",""],["cget_tkstring","TkTextTag","classes/TkTextTag.html#method-i-cget_tkstring","(key)",""],["cget_tkstring","TkcTagAccess","classes/TkcTagAccess.html#method-i-cget_tkstring","(option)",""],["chain","Rake::InvocationExceptionMixin","classes/Rake/InvocationExceptionMixin.html#method-i-chain","()","<p>Return the invocation chain (list of Rake tasks) that were in effect when\nthis exception was detected …\n"],["chain=","Rake::InvocationExceptionMixin","classes/Rake/InvocationExceptionMixin.html#method-i-chain-3D","(value)","<p>Set the invocation chain in effect when this exception was detected.\n"],["challenge","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-challenge","()",""],["challenge","WEBrick::HTTPAuth::BasicAuth","classes/WEBrick/HTTPAuth/BasicAuth.html#method-i-challenge","(req, res)","<p>Returns a challenge response which asks for for authentication information\n"],["challenge","WEBrick::HTTPAuth::DigestAuth","classes/WEBrick/HTTPAuth/DigestAuth.html#method-i-challenge","(req, res, stale=false)","<p>Returns a challenge response which asks for for authentication information\n"],["challenge=","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-challenge-3D","(p1)",""],["changeState","Object","classes/Object.html#method-i-changeState","(st)",""],["changeToolbars","Object","classes/Object.html#method-i-changeToolbars","()",""],["change_attribute","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-change_attribute","(current, new)","<p>Changes the current attribute from <code>current</code> to <code>new</code>\n"],["change_privilege","Process::GID","classes/Process/GID.html#method-c-change_privilege","(p1)","<p>Change the current process&#39;s real and effective group ID to that\nspecified by <em>integer</em>. Returns the …\n"],["change_privilege","Process::UID","classes/Process/UID.html#method-c-change_privilege","(p1)","<p>Change the current process&#39;s real and effective user ID to that\nspecified by <em>integer</em>. Returns the …\n"],["change_workspace","IRB::Context","classes/IRB/Context.html#method-i-change_workspace","(*_main)",""],["changed","Observable","classes/Observable.html#method-i-changed","(state=true)","<p>Set the changed state of this object.  Notifications will be sent only if\nthe changed <code>state</code> is <code>true</code>. …\n"],["changed?","Observable","classes/Observable.html#method-i-changed-3F","()","<p>Returns true if this object&#39;s state has been changed since the last\n#notify_observers call.\n"],["changed_attribute_by_name","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-changed_attribute_by_name","(current_set, new_set)","<p>Used by the tests to change attributes by name from\n<code>current_set</code> to <code>new_set</code>\n"],["changepage","Object","classes/Object.html#method-i-changepage","(tbl_list, tbl, ent, col, var, elem, op)",""],["changes","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-changes","(win)",""],["changes","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-changes","(win)",""],["char","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-char","(mod)",""],["character","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-character","(data)",""],["character","XMLRPC::XMLParser::StreamParserMixin","classes/XMLRPC/XMLParser/StreamParserMixin.html#method-i-character","(data)",""],["characters","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-characters","(text)",""],["chardev?","File","classes/File.html#method-c-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n"],["chardev?","File::Stat","classes/File/Stat.html#method-i-chardev-3F","()","<p>Returns <code>true</code> if the file is a character device,\n<code>false</code> if it isn&#39;t or if the operating system doesn&#39;t …\n"],["chardev?","FileTest","classes/FileTest.html#method-i-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n"],["chardev?","Pathname","classes/Pathname.html#method-i-chardev-3F","()","<p>See <code>FileTest.chardev?</code>.\n"],["chars","ARGF","classes/ARGF.html#method-i-chars","()","<p>Iterates over each character of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["chars","IO","classes/IO.html#method-i-chars","()","<p>Calls the given block once for each character in <em>ios</em>, passing the\ncharacter as an argument. The stream …\n"],["chars","String","classes/String.html#method-i-chars","()","<p>Passes each character in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre><code>&quot;hello&quot;.each_char ...</code></pre>\n"],["chars","StringIO","classes/StringIO.html#method-i-chars","()","<p>See IO#each_char.\n"],["chars","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-chars","(mod)",""],["charset","Msxml","classes/Msxml.html#method-i-charset","()","<p>HRESULT charset get encoding.\n\n<pre><code>BSTR arg0 --- p [OUT]</code></pre>\n"],["charset","OpenURI::Meta","classes/OpenURI/Meta.html#method-i-charset","()","<p>returns a charset parameter in Content-Type field. It is downcased for\ncanonicalization.\n<p>If charset parameter …\n"],["charset=","Msxml","classes/Msxml.html#method-i-charset-3D","(arg0)","<p>HRESULT charset get encoding.\n\n<pre><code>BSTR arg0 --- p [IN]</code></pre>\n"],["charset_alias","Object","classes/Object.html#method-i-charset_alias","(config_charset, mapfile = nil)",""],["charset_map","Iconv","classes/Iconv.html#method-c-charset_map","()","<p>Returns the map from canonical name to system dependent name.\n"],["chat_widget","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-chat_widget","()",""],["chdir","Dir","classes/Dir.html#method-c-chdir","(p1 = v1)","<p>Changes the current working directory of the process to the given string.\nWhen called without an argument, …\n"],["chdir","FileUtils","classes/FileUtils.html#method-c-chdir","(dir, options = {})",""],["chdir","Net::FTP","classes/Net/FTP.html#method-i-chdir","(dirname)","<p>Changes the (remote) directory.\n"],["chdir","Shell","classes/Shell.html#method-i-chdir","(path = nil, verbose = @verbose)","<p>If called as iterator, it restores the current directory when the block\nends.\n"],["check","Net::IMAP","classes/Net/IMAP.html#method-i-check","()","<p>Sends a CHECK command to request a checkpoint of the currently selected\nmailbox.  This performs implementation-specific …\n"],["check","Object","classes/Object.html#method-i-check","()",""],["check","PTY","classes/PTY.html#method-c-check","(p1, p2 = v2)","<p>Checks the status of the child process specified by <code>pid</code>.\nReturns <code>nil</code> if the process is still alive.  …\n"],["check","REXML::Text","classes/REXML/Text.html#method-c-check","(string, pattern, doctype)","<p>check for illegal characters\n"],["check","StringScanner","classes/StringScanner.html#method-i-check","(p1)","<p>This returns the value that #scan would return, without advancing the scan\npointer.  The match register …\n"],["check","Tk::BLT::Busy","classes/Tk/BLT/Busy.html#method-i-check","(win)",""],["check","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-check","(result)",""],["check_NG_path","Object","classes/Object.html#method-i-check_NG_path","(path_list)",""],["check_arity","Object","classes/Object.html#method-i-check_arity","(h)",""],["check_break_points","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-check_break_points","(file, klass, pos, binding, id)",""],["check_circular?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-check_circular-3F","()","<p>Returns true, if circular data structures should be checked, otherwise\nreturns false.\n"],["check_closed","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-i-check_closed","()","<p>Raises IOError if the TarWriter is closed\n"],["check_encoding","REXML::Encoding","classes/REXML/Encoding.html#method-i-check_encoding","(xml)",""],["check_files","RDoc::Options","classes/RDoc/Options.html#method-i-check_files","()","<p>Check that the files on the command line exist\n"],["check_generator","RDoc::Options","classes/RDoc/Options.html#method-i-check_generator","()","<p>Ensure only one generator is loaded\n"],["check_insecure_method","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-check_insecure_method","(obj, msg_id)","<p>Check that a method is callable via dRuby.\n<p><code>obj</code> is the object we want to invoke the method on.\n<code>msg_id</code> is …\n"],["check_inspect_key","PP::PPMethods","classes/PP/PPMethods.html#method-i-check_inspect_key","(id)",""],["check_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-check_key","()","<p>Raises an exception if the key is invalid.\n<p>See the OpenSSL documentation for EC_KEY_check_key()\n"],["check_names","RDoc::Task","classes/RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc,\n:clobber_rdoc and :rerdoc.  If other names are …\n"],["check_nonce","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-check_nonce","(p1)","<p>Check nonce validity in a request and response. Return value reflects\nresult:\n\n<pre><code>1: nonces present and equal. ...</code></pre>\n"],["check_pkg","Object","classes/Object.html#method-i-check_pkg","(file, verbose=false)",""],["check_point","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-check_point","()","<p>ProcessCommand#transact\n"],["check_private_key","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-check_private_key","(p1)","<p>Checks if &#39;key&#39; is PRIV key for this cert\n"],["check_ruby_version","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-check_ruby_version","()",""],["check_shlib_search_path","Object","classes/Object.html#method-i-check_shlib_search_path","(paths)",""],["check_signedness","Object","classes/Object.html#method-i-check_signedness","(type, headers = nil, opts = nil, &b)","<p>Returns the signedness of the given <code>type</code>.  You may optionally\nspecify additional <code>headers</code> to search in …\n"],["check_sizeof","Object","classes/Object.html#method-i-check_sizeof","(type, headers = nil, opts = \"\", &b)","<p>Returns the size of the given <code>type</code>.  You may optionally\nspecify additional <code>headers</code> to search in for the …\n"],["check_square","Knights_Tour","classes/Knights_Tour.html#method-i-check_square","(square)","<p>Return the number of available moves for this square\n"],["check_suspend","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-check_suspend","()",""],["check_tcl_NG_path","Object","classes/Object.html#method-i-check_tcl_NG_path","(path_list)",""],["check_tcltk_version","Object","classes/Object.html#method-i-check_tcltk_version","(version)",""],["check_that_user_bin_dir_is_in_path","Gem::Installer","classes/Gem/Installer.html#method-i-check_that_user_bin_dir_is_in_path","()",""],["check_tk_NG_path","Object","classes/Object.html#method-i-check_tk_NG_path","(path_list)",""],["check_until","StringScanner","classes/StringScanner.html#method-i-check_until","(p1)","<p>This returns the value that #scan_until would return, without advancing the\nscan pointer.  The match …\n"],["check_validity","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-check_validity","(issuer_cert = nil, time = Time.now)","<p>Check the validity of this certificate.\n"],["checkbox","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-checkbox","(name = \"\", value = nil, checked = nil)","<p>Generate a Checkbox Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["checkbox_group","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-checkbox_group","(name = \"\", *values)","<p>Generate a sequence of checkbox elements, as a String.\n<p>The checkboxes will all have the same <code>name</code> attribute. …\n"],["childNodes","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXMLDOMText","classes/IXMLDOMText.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","IXTLRuntime","classes/IXTLRuntime.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-childNodes","()","<p>IXMLDOMNodeList childNodes the collection of the node&#39;s children\n"],["childNodes","NQXML::Node","classes/NQXML/Node.html#method-i-childNodes","()",""],["childNumber","IXTLRuntime","classes/IXTLRuntime.html#method-i-childNumber","(arg0)","<p>I4 childNumber\n\n<pre><code>IXMLDOMNode arg0 --- pNode [IN]</code></pre>\n"],["child_name","RDoc::Context","classes/RDoc/Context.html#method-i-child_name","(name)","<p>Creates the full name for a child with <code>name</code>\n"],["child_site","Tk::Iwidgets::Extfileselectionbox","classes/Tk/Iwidgets/Extfileselectionbox.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Extfileselectiondialog","classes/Tk/Iwidgets/Extfileselectiondialog.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Fileselectionbox","classes/Tk/Iwidgets/Fileselectionbox.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Fileselectiondialog","classes/Tk/Iwidgets/Fileselectiondialog.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Labeledframe","classes/Tk/Iwidgets/Labeledframe.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Labeledwidget","classes/Tk/Iwidgets/Labeledwidget.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Mainwindow","classes/Tk/Iwidgets/Mainwindow.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-child_site","(idx)",""],["child_site","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-child_site","(idx)",""],["child_site","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Scrolledframe","classes/Tk/Iwidgets/Scrolledframe.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Shell","classes/Tk/Iwidgets/Shell.html#method-i-child_site","()",""],["child_site","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-child_site","(idx)",""],["child_site_list","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-child_site_list","()",""],["child_site_list","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-child_site_list","()",""],["child_site_list","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-child_site_list","()",""],["children","Pathname","classes/Pathname.html#method-i-children","(with_directory=true)","<p>Returns the children of the directory (files and subdirectories, not\nrecursive) as an array of Pathname …\n"],["children","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-children","()",""],["children","REXML::Parent","classes/REXML/Parent.html#method-i-children","()",""],["children","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-children","()",""],["children","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-children","()",""],["children","TkWinfo","classes/TkWinfo.html#method-c-children","(win)",""],["children","TkWinfo","classes/TkWinfo.html#method-c-children","(win)",""],["children_with_index","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-children_with_index","()",""],["chmod","File","classes/File.html#method-c-chmod","(p1, *args)","<p>Changes permission bits on the named file(s) to the bit pattern represented\nby <em>mode_int</em>. Actual effects …\n"],["chmod","File","classes/File.html#method-i-chmod","(p1)","<p>Changes permission bits on <em>file</em> to the bit pattern represented by\n<em>mode_int</em>. Actual effects are platform …\n"],["chmod","FileUtils","classes/FileUtils.html#method-c-chmod","(mode, list, options = {})","<p>Options: noop verbose\n<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented …\n"],["chmod","Object","classes/Object.html#method-i-chmod","()","<p>Change the mode of each FILE to OCTAL-MODE.\n\n<pre><code>ruby -run -e chmod -- [OPTION] OCTAL-MODE FILE\n\n-v        ...</code></pre>\n"],["chmod","Pathname","classes/Pathname.html#method-i-chmod","(p1)","<p>See <code>File.chmod</code>.  Changes permissions.\n"],["chmod_R","FileUtils","classes/FileUtils.html#method-c-chmod_R","(mode, list, options = {})","<p>Options: noop verbose force\n<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented …\n"],["chomp","Kernel","classes/Kernel.html#method-i-chomp","(*args)","<p>Equivalent to <code>$_ = $_.chomp(<em>string</em>)</code>. See\n<code>String#chomp</code>. Available only when -p/-n command line option …\n"],["chomp","String","classes/String.html#method-i-chomp","(*args)","<p>Returns a new <code>String</code> with the given record separator removed\nfrom the end of <em>str</em> (if present). If <code>$/</code> …\n"],["chomp!","String","classes/String.html#method-i-chomp-21","(p1 = v1)","<p>Modifies <em>str</em> in place as described for <code>String#chomp</code>,\nreturning <em>str</em>, or <code>nil</code> if no modifications were made.\n…\n"],["choose_from_list","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-choose_from_list","(question, list)","<p>Choose from a list of options.  <code>question</code> is a prompt displayed\nabove the list.  <code>list</code> is a list of option …\n"],["choose_from_list","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-choose_from_list","(*args)",""],["chop","Kernel","classes/Kernel.html#method-i-chop","()","<p>Equivalent to <code>($_.dup).chop!</code>, except <code>nil</code> is never\nreturned. See <code>String#chop!</code>. Available only when -p/-n …\n"],["chop","String","classes/String.html#method-i-chop","()","<p>Returns a new <code>String</code> with the last character removed.  If the\nstring ends with <code>\\r\\n</code>, both characters …\n"],["chop!","String","classes/String.html#method-i-chop-21","()","<p>Processes <em>str</em> as for <code>String#chop</code>, returning\n<em>str</em>, or <code>nil</code> if <em>str</em> is the empty string.  See\nalso <code>String#chomp!</code> …\n"],["chown","File","classes/File.html#method-c-chown","(p1, p2, *args)","<p>Changes the owner and group of the named file(s) to the given numeric owner\nand group id&#39;s. Only …\n"],["chown","File","classes/File.html#method-i-chown","(p1, p2)","<p>Changes the owner and group of <em>file</em> to the given numeric owner and\ngroup id&#39;s. Only a process with …\n"],["chown","FileUtils","classes/FileUtils.html#method-c-chown","(user, group, list, options = {})","<p>Options: noop verbose\n<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group …\n"],["chown","Pathname","classes/Pathname.html#method-i-chown","(p1, p2)","<p>See <code>File.chown</code>.  Change owner and group of file.\n"],["chown_R","FileUtils","classes/FileUtils.html#method-c-chown_R","(user, group, list, options = {})","<p>Options: noop verbose force\n<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and …\n"],["chr","Integer","classes/Integer.html#method-i-chr","(*args)","<p>Returns a string containing the character represented by the receiver&#39;s\nvalue according to <code>encoding</code> …\n"],["chr","Integer","classes/Integer.html#method-i-chr","(*args)","<p>Returns a string containing the character represented by the receiver&#39;s\nvalue according to <code>encoding</code> …\n"],["chr","String","classes/String.html#method-i-chr","()","<p>Returns a one-character string at the beginning of the string.\n\n<pre><code>a = &quot;abcde&quot;\na.chr    #=&gt; &quot;a&quot;\n</code></pre>\n"],["chroot","Dir","classes/Dir.html#method-c-chroot","(p1)","<p>Changes this process&#39;s idea of the file system root. Only a privileged\nprocess may make this call. …\n"],["chunk","Enumerable","classes/Enumerable.html#method-i-chunk","(p1 = v1)","<p>Creates an enumerator for each chunked elements. The consecutive elements\nwhich have same block value …\n"],["chunked=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-chunked-3D","(val)","<p>Enables chunked transfer encoding.\n"],["chunked?","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-chunked-3F","()","<p>Returns “true” if the “transfer-encoding” header is present and set to\n“chunked”. …\n"],["chunked?","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-chunked-3F","()","<p>Will this response body be returned using chunked transfer-encoding?\n"],["cipher","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-cipher","(p1)",""],["cipher","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-cipher","()","<p>The cipher being used for the current connection\n"],["cipher","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-cipher","()",""],["cipher=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-cipher-3D","(p1)",""],["ciphers","Object","classes/Object.html#method-i-ciphers","()",""],["ciphers","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-c-ciphers","()","<p>Returns the names of all available ciphers in an array.\n"],["ciphers","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-ciphers","()","<p>The list of ciphers configured for this context.\n"],["ciphers=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-ciphers-3D","(p1)","<p>Sets the list of available ciphers for this context.  Note in a server\ncontext some ciphers require the …\n"],["circle","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-circle","(text, radius=nil)",""],["citrus_cstomb","Object","classes/Object.html#method-i-citrus_cstomb","(ces, csid, index)",""],["citrus_decode_mapsrc","Object","classes/Object.html#method-i-citrus_decode_mapsrc","(ces, csid, mapsrcs)",""],["citrus_euc_cstomb","Object","classes/Object.html#method-i-citrus_euc_cstomb","(csid, index)",""],["citrus_mskanji_cstomb","Object","classes/Object.html#method-i-citrus_mskanji_cstomb","(csid, index)",""],["citrus_stateless_iso_cstomb","Object","classes/Object.html#method-i-citrus_stateless_iso_cstomb","(csid, index)",""],["civil","Date","classes/Date.html#method-c-civil","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a date object denoting the given calendar date.\n<p>In this class, BCE years are counted astronomically. …\n"],["civil","DateTime","classes/DateTime.html#method-c-civil","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)","<p>Creates a date-time object denoting the given calendar date.\n<p>For example:\n\n<pre><code>DateTime.new(2001,2,3)    #=&gt; ...\n</code></pre>\n"],["class","Object","classes/Object.html#method-i-class","()","<p>Returns the class of <em>obj</em>. This method must always be called with\nan explicit receiver, as <code>class</code> is also …\n"],["class","Win32::Registry::PredefinedKey","classes/Win32/Registry/PredefinedKey.html#method-i-class","()","<p>Fake #class method for Registry#open, Registry#create\n"],["class_attributes","RDoc::Context","classes/RDoc/Context.html#method-i-class_attributes","()","<p>Class attributes\n"],["class_dir","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-class_dir","()","<p>Directory where generated class HTML files live relative to the output dir.\n"],["class_document","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-class_document","(name, found, klasses, includes)","<p>Builds a RDoc::Markup::Document from <code>found</code>,\n<code>klasess</code> and <code>includes</code>\n"],["class_eval","Module","classes/Module.html#method-i-class_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>. This can be\nused to add methods to a class. <code>module_eval</code> …\n"],["class_exec","Module","classes/Module.html#method-i-class_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["class_file","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-class_file","(klass_name)","<p>Path to the ri data for <code>klass_name</code>\n"],["class_method_list","RDoc::Context","classes/RDoc/Context.html#method-i-class_method_list","()","<p>Class methods\n"],["class_methods","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-class_methods","()","<p>Class methods cache accessor.  Maps a class to an Array of its class\nmethods (not full name).\n"],["class_name","Gem::Ext::Builder","classes/Gem/Ext/Builder.html#method-c-class_name","()",""],["class_name","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-class_name","(uri, tag_name)","<p>retrieve class_name for the supplied uri and tag_name If it doesn&#39;t\nexist, capitalize the tag_name …\n"],["class_name","WIN32COMGen","classes/WIN32COMGen.html#method-i-class_name","(klass)",""],["class_path","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-class_path","(klass_name)","<p>Path where data for <code>klass_name</code> will be stored (methods or\nclass data)\n"],["class_variable_defined?","Module","classes/Module.html#method-i-class_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given class variable is defined in\n<em>obj</em>.\n\n<pre><code>class Fred\n  @@foo = 99\nend\nFred.class_variable_defined?(:@@foo) ...\n</code></pre>\n"],["class_variable_get","Module","classes/Module.html#method-i-class_variable_get","(p1)","<p>Returns the value of the given class variable (or throws a\n<code>NameError</code> exception). The <code>@@</code> part of the variable\n…\n"],["class_variable_set","Module","classes/Module.html#method-i-class_variable_set","(p1, p2)","<p>Sets the class variable names by <em>symbol</em> to <em>object</em>.\n\n<pre><code>class Fred\n  @@foo = 99\n  def foo\n    @@foo\n  end\nend ...\n</code></pre>\n"],["class_variables","Module","classes/Module.html#method-i-class_variables","()","<p>Returns an array of the names of class variables in <em>mod</em>.\n\n<pre><code>class One\n  @@var1 = 1\nend\nclass Two &lt; One\n  ...\n</code></pre>\n"],["classes","RDoc::Context","classes/RDoc/Context.html#method-i-classes","()","<p>Array of classes in this context\n"],["classes","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-classes","()","<p>Hash mapping a known class or module to the stores it can be loaded from\n"],["classes","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-classes","()",""],["classes","Tk::BWidget","classes/Tk/BWidget.html#method-c-classes","(klass)",""],["classes_and_includes_for","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-classes_and_includes_for","(name)","<p>Returns the stores wherin <code>name</code> is found along with the classes\nand includes that match it\n"],["classes_and_modules","RDoc::Context","classes/RDoc/Context.html#method-i-classes_and_modules","()","<p>All classes and modules in this namespace\n"],["classes_hash","RDoc::Context","classes/RDoc/Context.html#method-i-classes_hash","()","<p>Hash of classes keyed by class name\n"],["classes_hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-classes_hash","()",""],["classicAnchor","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicAnchor","()","<p>accessor\n"],["classicAnchor=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicAnchor-3D","(mode)",""],["classicExtras","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicExtras","()",""],["classicExtras=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicExtras-3D","(mode)",""],["classicMouseSelect","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicMouseSelect","()",""],["classicMouseSelect=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicMouseSelect-3D","(mode)",""],["classicWordBreak","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicWordBreak","()",""],["classicWordBreak=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicWordBreak-3D","(mode)",""],["classicWrap","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicWrap","()",""],["classicWrap=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-classicWrap-3D","(mode)",""],["classify","Set","classes/Set.html#method-i-classify","()","<p>Classifies the set by the return value of the given block and returns a\nhash of {value =&gt; set of elements} …\n"],["classname","TkWinfo","classes/TkWinfo.html#method-c-classname","(win)",""],["classname","TkWinfo","classes/TkWinfo.html#method-c-classname","(win)",""],["cleanpath","Pathname","classes/Pathname.html#method-i-cleanpath","(consider_symlink=false)","<p>Returns clean pathname of <code>self</code> with consecutive slashes and\nuseless dots removed.  The filesystem is …\n"],["cleanup","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-c-cleanup","()",""],["clear","Array","classes/Array.html#method-i-clear","()","<p>Removes all elements from <code>self</code>.\n\n<pre><code>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]\na.clear    #=&gt; [ ]\n</code></pre>\n"],["clear","Curses","classes/Curses.html#method-c-clear","()","<p>Clears every position on the screen completely, so that a subsequent call\nby Curses.refresh for the  …\n"],["clear","Curses::Window","classes/Curses/Window.html#method-i-clear","()","<p>Clear the window.\n"],["clear","DBM","classes/DBM.html#method-i-clear","()","<p>Deletes all data from the database.\n"],["clear","ENV","classes/ENV.html#method-c-clear","()","<p>Removes every environment variable.\n"],["clear","GC::Profiler","classes/GC/Profiler.html#method-c-clear","()","<p>Clears the GC profiler data.\n"],["clear","GDBM","classes/GDBM.html#method-i-clear","()","<p>Removes all the key-value pairs within <em>gdbm</em>.\n"],["clear","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-clear","()",""],["clear","Hash","classes/Hash.html#method-i-clear","()","<p>Removes all key-value pairs from <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }   #=&gt; {&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;200}\nh.clear ...\n</code></pre>\n"],["clear","Queue","classes/Queue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","Rake::Task","classes/Rake/Task.html#method-i-clear","()","<p>Clear the existing prerequisites and actions of a rake task.\n"],["clear","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-clear","()","<p>Clear all tasks in this application.\n"],["clear","SDBM","classes/SDBM.html#method-i-clear","()",""],["clear","Set","classes/Set.html#method-i-clear","()","<p>Removes all elements and returns self.\n"],["clear","SizedQueue","classes/SizedQueue.html#method-i-clear","()","<p>Removes all objects from the queue and wakes waiting threads, if any.\n"],["clear","String","classes/String.html#method-i-clear","()","<p>Makes string empty.\n\n<pre><code>a = &quot;abcde&quot;\na.clear    #=&gt; &quot;&quot;\n</code></pre>\n"],["clear","StringScanner","classes/StringScanner.html#method-i-clear","()","<p>Equivalent to #terminate. This method is obsolete; use #terminate instead.\n"],["clear","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-clear","()",""],["clear","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-clear","()",""],["clear","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-clear","(component=None)",""],["clear","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-clear","()","\n<pre><code>def validate(cmd = Proc.new, args = nil)\n  if cmd.kind_of?(ValidateCmd)\n    configure(&#39;validate&#39;, cmd) ...\n</code></pre>\n"],["clear","Tk::Iwidgets::Finddialog","classes/Tk/Iwidgets/Finddialog.html#method-i-clear","()",""],["clear","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-clear","()",""],["clear","Tk::Iwidgets::Messagebox","classes/Tk/Iwidgets/Messagebox.html#method-i-clear","()",""],["clear","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-clear","()","<p>based on Tk::Iwidgets::Entryfield\n"],["clear","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-clear","()",""],["clear","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-clear","()",""],["clear","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-clear","()",""],["clear","Tk::Listbox","classes/Tk/Listbox.html#method-i-clear","()",""],["clear","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-clear","(glob_path_pat = None)",""],["clear","TkClipboard","classes/TkClipboard.html#method-c-clear","(win=nil)",""],["clear","TkClipboard","classes/TkClipboard.html#method-i-clear","()",""],["clear","TkOptionDB","classes/TkOptionDB.html#method-c-clear","()",""],["clear","TkOptionDB","classes/TkOptionDB.html#method-c-clear","()",""],["clear","TkOptionDB","classes/TkOptionDB.html#method-c-clear","()",""],["clear","TkSelection","classes/TkSelection.html#method-c-clear","(sel=nil)",""],["clear","TkSelection","classes/TkSelection.html#method-i-clear","(sel=nil)",""],["clear","TkSelection","classes/TkSelection.html#method-c-clear","(sel=nil)",""],["clear","TkSelection","classes/TkSelection.html#method-i-clear","(sel=nil)",""],["clear","TkVariable","classes/TkVariable.html#method-i-clear","()",""],["clear","TkVariable","classes/TkVariable.html#method-i-clear","()",""],["clear_actions","Rake::Task","classes/Rake/Task.html#method-i-clear_actions","()","<p>Clear the existing actions on a rake task.\n"],["clear_all","Tk::TkTable","classes/Tk/TkTable.html#method-i-clear_all","(first=None, last=None)",""],["clear_cache","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-clear_cache","(file=None)",""],["clear_cache","Tk::TkTable","classes/Tk/TkTable.html#method-i-clear_cache","(first=None, last=None)",""],["clear_children","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-clear_children","(*args)",""],["clear_comment","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-clear_comment","()","<p>Clears the comment. Used by the ruby parser.\n"],["clear_exclude","Rake::FileList","classes/Rake/FileList.html#method-i-clear_exclude","()","<p>Clear all the exclude patterns so that we exclude nothing.\n"],["clear_glob","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-clear_glob","(glob_path_pat)",""],["clear_highlight_classes","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-clear_highlight_classes","()",""],["clear_items","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-clear_items","()",""],["clear_items","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-clear_items","()",""],["clear_on_display","TkClipboard","classes/TkClipboard.html#method-c-clear_on_display","(win)",""],["clear_on_display","TkSelection","classes/TkSelection.html#method-c-clear_on_display","(win, sel=nil)",""],["clear_on_display","TkSelection","classes/TkSelection.html#method-c-clear_on_display","(win, sel=nil)",""],["clear_paths","Gem","classes/Gem.html#method-c-clear_paths","()","<p>Reset the <code>dir</code> and <code>path</code> values.  The next time\n<code>dir</code> or <code>path</code> is requested, the values will be\ncalculated …\n"],["clear_prerequisites","Rake::Task","classes/Rake/Task.html#method-i-clear_prerequisites","()","<p>Clear the existing prerequisites of a rake task.\n"],["clear_screen","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-clear_screen","()","<p>Clear the screen.\n"],["clear_selection","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-clear_selection","()",""],["clear_selection","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-clear_selection","()",""],["clear_sizes","Tk::TkTable","classes/Tk/TkTable.html#method-i-clear_sizes","(first=None, last=None)",""],["clear_suspend","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-clear_suspend","()",""],["clear_tags","Tk::TkTable","classes/Tk/TkTable.html#method-i-clear_tags","(first=None, last=None)",""],["clear_value","Tk::BWidget::ComboBox","classes/Tk/BWidget/ComboBox.html#method-i-clear_value","()",""],["clear_widgets","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-clear_widgets","(*args)",""],["clearvalue","Tk::BWidget::ComboBox","classes/Tk/BWidget/ComboBox.html#method-i-clearvalue","()",""],["clicks","Tk::Clock","classes/Tk/Clock.html#method-c-clicks","(ms=nil)",""],["client","Object","classes/Object.html#method-i-client","(ts, n)",""],["client","Tk::Wm","classes/Tk/Wm.html#method-c-client","(win, name=TkComm::None)",""],["client","Tk::Wm","classes/Tk/Wm.html#method-i-client","(name=TkComm::None)",""],["client_ca","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-client_ca","()","<p>Returns the list of client CAs. Please note that in contrast to\nSSLContext#client_ca= no array of X509::Certificate …\n"],["client_error?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-client_error-3F","(code)","<p>Is <code>code</code> a client error status?\n"],["client_frame","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-i-client_frame","()",""],["clipping_window","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-clipping_window","()","<p>instance methods\n"],["clipwin","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-clipwin","()",""],["clobber_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["clone","Matrix","classes/Matrix.html#method-i-clone","()","<p>Returns a clone of the matrix, so that the contents of each do not\nreference identical objects. There …\n"],["clone","Method","classes/Method.html#method-i-clone","()","<p>MISSING: documentation\n"],["clone","Object","classes/Object.html#method-i-clone","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["clone","REXML::Attribute","classes/REXML/Attribute.html#method-i-clone","()","<p>Returns a copy of this attribute\n"],["clone","REXML::CData","classes/REXML/CData.html#method-i-clone","()","<p>Make a copy of this object\n<p><em>Examples</em>\n\n<pre><code>c = CData.new( &quot;Some text&quot; )\nd = c.clone\nd.to_s        # -&gt; &quot;Some text&quot;</code></pre>\n"],["clone","REXML::Comment","classes/REXML/Comment.html#method-i-clone","()",""],["clone","REXML::DocType","classes/REXML/DocType.html#method-i-clone","()",""],["clone","REXML::Document","classes/REXML/Document.html#method-i-clone","()","<p>Should be obvious\n"],["clone","REXML::Element","classes/REXML/Element.html#method-i-clone","()","<p>Creates a shallow copy of self.\n\n<pre><code>d = Document.new &quot;&lt;a&gt;&lt;b/&gt;&lt;b/&gt;&lt;c&gt;&lt;d/&gt;&lt;/c&gt;&lt;/a&gt;&quot;\nnew_a = d.root.clone\nputs ...</code></pre>\n"],["clone","REXML::Instruction","classes/REXML/Instruction.html#method-i-clone","()",""],["clone","REXML::Text","classes/REXML/Text.html#method-i-clone","()",""],["clone","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-clone","()",""],["clone","Rake::Cloneable","classes/Rake/Cloneable.html#method-i-clone","()",""],["clone","Singleton","classes/Singleton.html#method-i-clone","()","<p>Raises a TypeError to prevent cloning.\n"],["clone","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-clone","()",""],["clone","TkTextIO","classes/TkTextIO.html#method-i-clone","()",""],["clone","UnboundMethod","classes/UnboundMethod.html#method-i-clone","()","<p>MISSING: documentation\n"],["clone","Vector","classes/Vector.html#method-i-clone","()","<p>Return a copy of the vector.\n"],["cloneNode","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXMLDOMText","classes/IXMLDOMText.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","IXTLRuntime","classes/IXTLRuntime.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["cloneNode","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-cloneNode","(arg0)","<p>IXMLDOMNode cloneNode\n\n<pre><code>BOOL arg0 --- deep [IN]</code></pre>\n"],["clone_menu","Tk::Menu","classes/Tk/Menu.html#method-i-clone_menu","(*args)",""],["clonename","Tk::BWidget","classes/Tk/BWidget.html#method-c-clonename","(menu)",""],["close","ARGF","classes/ARGF.html#method-i-close","()","\n<pre><code>Closes the current file and skips to the next in the stream. Trying to\nclose a file that has already ...</code></pre>\n"],["close","CGI::Session","classes/CGI/Session.html#method-i-close","()","<p>Store session data on the server and close the session storage. For some\nsession storage types, this …\n"],["close","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-i-close","()","<p>Update and close the session&#39;s FileStore file.\n"],["close","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-i-close","()","<p>Update and close the session&#39;s PStore file.\n"],["close","Curses::Window","classes/Curses/Window.html#method-i-close","()","<p>Deletes the window, and frees the memory\n"],["close","DBM","classes/DBM.html#method-i-close","()","<p>Closes the database.\n"],["close","DL::Handle","classes/DL/Handle.html#method-i-close","()","<p>Close this DL::Handle.  Calling close more than once will raise a\nDL::DLError exception.\n"],["close","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-i-close","()",""],["close","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-close","()","<p>Close the connection.\n<p>If this is an instance returned by #open_server, then this stops listening\nfor new …\n"],["close","DRb::DRbUNIXSocket","classes/DRb/DRbUNIXSocket.html#method-i-close","()",""],["close","DRb::HTTP0::Callback","classes/DRb/HTTP0/Callback.html#method-i-close","()",""],["close","DRb::HTTP0::ClientSide","classes/DRb/HTTP0/ClientSide.html#method-i-close","()",""],["close","DRb::HTTP0::Server","classes/DRb/HTTP0/Server.html#method-i-close","()",""],["close","DRb::HTTP0::ServerSide","classes/DRb/HTTP0/ServerSide.html#method-i-close","()",""],["close","Dir","classes/Dir.html#method-i-close","()","<p>Closes the directory stream. Any further attempts to access <em>dir</em>\nwill raise an <code>IOError</code>.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;) ...</code></pre>\n"],["close","GDBM","classes/GDBM.html#method-i-close","()","<p>Closes the associated database file.\n"],["close","Gem::Package::TarInput","classes/Gem/Package/TarInput.html#method-i-close","()",""],["close","Gem::Package::TarOutput","classes/Gem/Package/TarOutput.html#method-i-close","()","<p>Closes the TarOutput.\n"],["close","Gem::Package::TarReader","classes/Gem/Package/TarReader.html#method-i-close","()","<p>Close the tar file\n"],["close","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-close","()","<p>Closes the tar entry\n"],["close","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-i-close","()","<p>Closes the TarWriter\n"],["close","IO","classes/IO.html#method-i-close","()","<p>Closes <em>ios</em> and flushes any pending writes to the operating system.\nThe stream is unavailable for any …\n"],["close","Iconv","classes/Iconv.html#method-i-close","()","<p>Finishes conversion.\n<p>After calling this, calling Iconv#iconv will cause an exception, but\nmultiple calls …\n"],["close","Logger","classes/Logger.html#method-i-close","()","<p>Close the logging device.\n"],["close","Logger::LogDevice","classes/Logger/LogDevice.html#method-i-close","()",""],["close","MultiTkIp::Command_Queue","classes/MultiTkIp/Command_Queue.html#method-i-close","()",""],["close","Net::FTP","classes/Net/FTP.html#method-i-close","()","<p>Closes the connection.  Further operations are impossible until you open a\nnew connection with #connect …\n"],["close","Net::IMAP","classes/Net/IMAP.html#method-i-close","()","<p>Sends a CLOSE command to close the currently selected mailbox. The CLOSE\ncommand permanently removes …\n"],["close","Net::Telnet","classes/Net/Telnet.html#method-i-close","()","<p>Closes the connection\n"],["close","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-close","()","<p>Closes the SSLSocket and flushes any unwritten data.\n"],["close","Rake::FtpUploader","classes/Rake/FtpUploader.html#method-i-close","()","<p>Close the uploader.\n"],["close","Resolv::DNS","classes/Resolv/DNS.html#method-i-close","()","<p>Closes the DNS resolver.\n"],["close","SDBM","classes/SDBM.html#method-i-close","()",""],["close","SOCKSSocket","classes/SOCKSSocket.html#method-i-close","()","<p>Closes the SOCKS connection.\n"],["close","StringIO","classes/StringIO.html#method-i-close","()","<p>Closes strio.  The <strong>strio</strong> is unavailable for any further\ndata operations; an <code>IOError</code> is raised if such …\n"],["close","Syslog","classes/Syslog.html#method-c-close","()","<p>Closes the syslog facility. Raises a runtime exception if it is not open.\n"],["close","Tempfile","classes/Tempfile.html#method-i-close","(unlink_now=false)","<p>Closes the file. If <code>unlink_now</code> is true, then the file will be\nunlinked (deleted) after closing. Of course, …\n"],["close","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-i-close","()",""],["close","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-close","(*tags)",""],["close","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-close","()",""],["close","Tk::MacResource","classes/Tk/MacResource.html#method-c-close","(rsrcRef)",""],["close","Tk::TclX::XPG3_MsgCat","classes/Tk/TclX/XPG3_MsgCat.html#method-i-close","(fail_mode=false)",""],["close","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-i-close","(reason = None)",""],["close","TkTextIO","classes/TkTextIO.html#method-i-close","()",""],["close","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-close","()","<p>Closes the logger (also closes the log device associated to the logger)\n"],["close","Win32::Registry","classes/Win32/Registry.html#method-i-close","()","<p>Close key.\n<p>After close, most method raise an error.\n"],["close","Win32::Registry::PredefinedKey","classes/Win32/Registry/PredefinedKey.html#method-i-close","()","<p>Predefined keys cannot be closed\n"],["close","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-close","()","<p>Closes the GzipFile object. This method calls close method of the\nassociated IO object. Returns the associated …\n"],["close","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-close","()","<p>Closes the stream. All operations on the closed stream will raise an\nexception.\n"],["close!","Tempfile","classes/Tempfile.html#method-i-close-21","()","<p>Closes and unlinks (deletes) the file. Has the same effect as called\n<code>close(true)</code>.\n"],["close_enabled?","DL::Handle","classes/DL/Handle.html#method-i-close_enabled-3F","()","<p>Returns <code>true</code> if dlclose() will be called when this DL::Handle\nis garbage collected.\n"],["close_on_exec=","IO","classes/IO.html#method-i-close_on_exec-3D","(p1)","<p>Sets a close-on-exec flag.\n\n<pre><code>f = open(&quot;/dev/null&quot;)\nf.close_on_exec = true\nsystem(&quot;cat&quot;, &quot;/proc/self/fd/#{f.fileno}&quot;) ...</code></pre>\n"],["close_on_exec?","IO","classes/IO.html#method-i-close_on_exec-3F","()","<p>Returns <code>true</code> if <em>ios</em> will be closed on exec.\n\n<pre><code>f = open(&quot;/dev/null&quot;)\nf.close_on_exec?                 #=&gt; ...\n</code></pre>\n"],["close_read","BasicSocket","classes/BasicSocket.html#method-i-close_read","()","<p>Disallows further read using shutdown system call.\n\n<pre><code>s1, s2 = UNIXSocket.pair\ns1.close_read\ns2.puts #=&gt; ...\n</code></pre>\n"],["close_read","IO","classes/IO.html#method-i-close_read","()","<p>Closes the read end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, such …\n"],["close_read","StringIO","classes/StringIO.html#method-i-close_read","()","<p>Closes the read end of a StringIO.  Will raise an <code>IOError</code> if\nthe <strong>strio</strong> is not readable.\n"],["close_read","TkTextIO","classes/TkTextIO.html#method-i-close_read","()",""],["close_recurse","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-close_recurse","(*tags)",""],["close_recurse","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-close_recurse","()",""],["close_screen","Curses","classes/Curses.html#method-c-close_screen","()","<p>A program should always call Curses.close_screen before exiting or escaping\nfrom curses mode temporarily. …\n"],["close_tree","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-close_tree","(node, recurse=None)",""],["close_tree","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-close_tree","(recurse=None)",""],["close_write","BasicSocket","classes/BasicSocket.html#method-i-close_write","()","<p>Disallows further write using shutdown system call.\n\n<pre><code>UNIXSocket.pair {|s1, s2|\n  s1.print &quot;ping&quot;\n  s1.close_write ...\n</code></pre>\n"],["close_write","IO","classes/IO.html#method-i-close_write","()","<p>Closes the write end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, …\n"],["close_write","StringIO","classes/StringIO.html#method-i-close_write","()","<p>Closes the write end of a StringIO.  Will raise an  <code>IOError</code> if\nthe <strong>strio</strong> is not writeable.\n"],["close_write","TkTextIO","classes/TkTextIO.html#method-i-close_write","()",""],["closed?","ARGF","classes/ARGF.html#method-i-closed-3F","()","<p>Returns <em>true</em> if the current file has been closed; <em>false</em>\notherwise. Use <code>ARGF.close</code> to actually close the …\n"],["closed?","Curses","classes/Curses.html#method-c-closed-3F","()","<p>Returns <code>true</code> if the window/screen has been closed, without any\nsubsequent Curses.refresh calls, returns …\n"],["closed?","DBM","classes/DBM.html#method-i-closed-3F","()","<p>Returns true if the database is closed, false otherwise.\n"],["closed?","GDBM","classes/GDBM.html#method-i-closed-3F","()","<p>Returns true if the associated database file has been closed.\n"],["closed?","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-closed-3F","()","<p>Is the tar entry closed?\n"],["closed?","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-i-closed-3F","()","<p>Is the TarWriter closed?\n"],["closed?","IO","classes/IO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <em>ios</em> is completely closed (for duplex\nstreams, both reader and writer), <code>false</code> otherwise. …\n"],["closed?","Net::FTP","classes/Net/FTP.html#method-i-closed-3F","()","<p>Returns <code>true</code> iff the connection is closed.\n"],["closed?","SDBM","classes/SDBM.html#method-i-closed-3F","()",""],["closed?","StringIO","classes/StringIO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is completely closed,\n<code>false</code> otherwise.\n"],["closed?","TkTextIO","classes/TkTextIO.html#method-i-closed-3F","(dir=nil)",""],["closed?","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-closed-3F","()","<p>Same as IO#closed?\n"],["closed?","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-closed-3F","()","<p>Returns true if the stream is closed.\n"],["closed_read?","StringIO","classes/StringIO.html#method-i-closed_read-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is not readable,\n<code>false</code> otherwise.\n"],["closed_write?","StringIO","classes/StringIO.html#method-i-closed_write-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is not writable,\n<code>false</code> otherwise.\n"],["closest","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-closest","(x, y, var, keys={})",""],["closest","TkcTag","classes/TkcTag.html#method-i-closest","(x, y, halo=None, start=None)",""],["closest_point","Tk::BLT","classes/Tk/BLT.html#method-c-closest_point","(graph)",""],["closest_point","Tk::BLT::GraphCommand","classes/Tk/BLT/GraphCommand.html#method-i-closest_point","()",""],["clrtoeol","Curses","classes/Curses.html#method-c-clrtoeol","()","<p>Clears to the end of line, that the cursor is currently on.\n"],["clrtoeol","Curses::Window","classes/Curses/Window.html#method-i-clrtoeol","()","<p>Clear the window to the end of line, that the cursor is currently on.\n"],["cmd","Net::Telnet","classes/Net/Telnet.html#method-i-cmd","(options)","<p>Send a command to the host.\n<p>More exactly, sends a string to the host, and reads in all received data\nuntil …\n"],["cmds","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-cmds","()",""],["cmp","FileUtils","classes/FileUtils.html#method-c-cmp","(a, b)",""],["cmp","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-cmp","(p1)",""],["cmp","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-cmp","(p1)","<p>Compares this Name with <code>other</code> and returns 0 if they are the\nsame and -1 or +1 if they are greater or …\n"],["cmp_issuer","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-cmp_issuer","(p1)",""],["cmsg_is?","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-cmsg_is-3F","(p1, p2)","<p>tests the level and type of <em>ancillarydata</em>.\n\n<pre><code>ancdata = Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, ...</code></pre>\n"],["code","Tk::Itcl","classes/Tk/Itcl.html#method-c-code","(cmd, *args)",""],["code","WEBrick::HTTPStatus::Status","classes/WEBrick/HTTPStatus/Status.html#method-i-code","()","<p>Returns the HTTP status code\n"],["code_in_namespace","Tk::Itcl","classes/Tk/Itcl.html#method-c-code_in_namespace","(namespace, cmd, *args)",""],["codepage","WIN32OLE","classes/WIN32OLE.html#method-c-codepage","()","<p>Returns current codepage.\n\n<pre><code>WIN32OLE.codepage # =&gt; WIN32OLE::CP_ACP\n</code></pre>\n"],["codepage=","WIN32OLE","classes/WIN32OLE.html#method-c-codepage-3D","(p1)","<p>Sets current codepage. The WIN32OLE.codepage is initialized according to\nEncoding.default_internal.  …\n"],["codepoints","ARGF","classes/ARGF.html#method-i-codepoints","()","<p>Iterates over each codepoint of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["codepoints","IO","classes/IO.html#method-i-codepoints","()","<p>Passes the <code>Integer</code> ordinal of each character in <em>ios</em>,\npassing the codepoint as an argument. The stream …\n"],["codepoints","String","classes/String.html#method-i-codepoints","()","<p>Passes the <code>Integer</code> ordinal of each character in <em>str</em>,\nalso known as a <em>codepoint</em> when applied to Unicode …\n"],["codepoints","StringIO","classes/StringIO.html#method-i-codepoints","()","<p>See IO#each_codepoint.\n"],["coerce","BigDecimal","classes/BigDecimal.html#method-i-coerce","(p1)","<p>The coerce method provides support for Ruby type coercion. It is not\nenabled by default.\n<p>This means that …\n"],["coerce","Bignum","classes/Bignum.html#method-i-coerce","(p1)","<p>MISSING: documentation\n"],["coerce","Float","classes/Float.html#method-i-coerce","(p1)","<p>Returns an array with both <em>aNumeric</em> and <em>flt</em> represented\nas <code>Float</code> objects. This is achieved by converting …\n"],["coerce","Matrix","classes/Matrix.html#method-i-coerce","(other)","<p>The coerce method provides support for Ruby type coercion. This coercion\nmechanism is used by Ruby to …\n"],["coerce","Numeric","classes/Numeric.html#method-i-coerce","(p1)","<p>If <em>aNumeric</em> is the same type as <em>num</em>, returns an array\ncontaining <em>aNumeric</em> and <em>num</em>. Otherwise, returns …\n"],["coerce","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-coerce","(p1)",""],["coerce","TkVariable","classes/TkVariable.html#method-i-coerce","(other)",""],["coerce","TkVariable","classes/TkVariable.html#method-i-coerce","(other)",""],["coerce","URI::Generic","classes/URI/Generic.html#method-i-coerce","(oth)","<p>Args\n<p><code>v</code> &mdash; URI or String\n\n<p>Description\n"],["coerce","Vector","classes/Vector.html#method-i-coerce","(other)","<p>The coerce method provides support for Ruby type coercion. This coercion\nmechanism is used by Ruby to …\n"],["cofactor","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-cofactor","()","<p>See the OpenSSL documentation for EC_GROUP_get_cofactor()\n"],["col_index","Tk::TkTable","classes/Tk/TkTable.html#method-i-col_index","(idx)",""],["collapse","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-collapse","(node)",""],["collect","Array","classes/Array.html#method-i-collect","()","<p>Invokes <em>block</em> once for each element of <code>self</code>. Creates\na new array containing the values returned by the …\n"],["collect","Enumerable","classes/Enumerable.html#method-i-collect","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n<p>If no block is given, …\n"],["collect","Matrix","classes/Matrix.html#method-i-collect","()","<p>Returns a matrix that is the result of iteration of the given block over\nall elements of the matrix. …\n"],["collect","Vector","classes/Vector.html#method-i-collect","()","<p>Like Array#collect.\n"],["collect!","Array","classes/Array.html#method-i-collect-21","()","<p>Invokes the block once for each element of <code>self</code>, replacing the\nelement with the value returned by <em>block</em> …\n"],["collect!","Set","classes/Set.html#method-i-collect-21","()","<p>Replaces the elements with ones returned by collect().\n"],["collect2","Vector","classes/Vector.html#method-i-collect2","(v)","<p>Collects (as in Enumerable#collect) over the elements of this vector and\n<code>v</code> in conjunction.\n"],["collect_concat","Enumerable","classes/Enumerable.html#method-i-collect_concat","()","<p>Returns a new array with the concatenated results of running <em>block</em>\nonce for every element in <em>enum</em>.\n<p>If …\n"],["collect_first_comment","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-collect_first_comment","()","<p>Look for the first comment in a file that isn&#39;t a shebang line.\n"],["collect_specs","Gem::Indexer","classes/Gem/Indexer.html#method-i-collect_specs","(gems = gem_file_list)","<p>Collect specifications from .gem files from the gem directory.\n"],["collect_tasks","Rake::Application","classes/Rake/Application.html#method-i-collect_tasks","()","<p>Collect the list of tasks on the command line.  If no tasks are given,\nreturn a list containing only …\n"],["collect_tasks","Rake::Application","classes/Rake/Application.html#method-i-collect_tasks","()","<p>Collect the list of tasks on the command line.  If no tasks are given,\nreturn a list containing only …\n"],["collect_tcltk_defs","Object","classes/Object.html#method-i-collect_tcltk_defs","(tcl_defs_str, tk_defs_str)",""],["collect_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-collect_tokens","()","<p>Starts collecting tokens\n"],["color","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-color","(name=None)",""],["color","Tk::Tcllib::Plotchart::Barchart","classes/Tk/Tcllib/Plotchart/Barchart.html#method-i-color","(*cols)",""],["color","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-color","(fill, border)",""],["color_content","Curses","classes/Curses.html#method-c-color_content","(p1)","<p>Returns an 3 item Array of the RGB values in <code>color</code>\n"],["color_map","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-color_map","(colors)",""],["color_of_part","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-color_of_part","(keyword, newcolor)",""],["color_pair","Curses","classes/Curses.html#method-c-color_pair","(p1)","<p>Sets the color pair attributes to <code>attrs</code>.\n<p>This should be equivalent to Curses.attrset(COLOR_PAIR(<code>attrs</code> …\n"],["color_pairs","Curses","classes/Curses.html#method-c-color_pairs","()","<p>Returns the COLOR_PAIRS available, if the curses library supports it.\n"],["color_set","Curses::Window","classes/Curses/Window.html#method-i-color_set","(p1)","<p>Sets the current color of the given window to the foreground/background\ncombination described by the …\n"],["colorize","Object","classes/Object.html#method-i-colorize","(num)",""],["colormap","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-colormap","(win)",""],["colormap","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-colormap","(win)",""],["colormapfull","TkWinfo","classes/TkWinfo.html#method-c-colormapfull","(win)",""],["colormapfull","TkWinfo","classes/TkWinfo.html#method-c-colormapfull","(win)",""],["colormapwindows","Tk::Wm","classes/Tk/Wm.html#method-i-colormapwindows","(*args)",""],["colormapwindows","Tk::Wm","classes/Tk/Wm.html#method-c-colormapwindows","(win, *args)",""],["colors","Curses","classes/Curses.html#method-c-colors","()","<p>returns COLORS\n"],["colors","Tk::Tcllib::Plotchart::Barchart","classes/Tk/Tcllib/Plotchart/Barchart.html#method-i-colors","(*cols)",""],["colors","Tk::Tcllib::Plotchart::Piechart","classes/Tk/Tcllib/Plotchart/Piechart.html#method-i-colors","(*list)",""],["colors","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-colors","(fill, border)",""],["colors","Tk::Tcllib::Plotchart::Radialchart","classes/Tk/Tcllib/Plotchart/Radialchart.html#method-i-colors","(*list)",""],["colour","Tk::Tcllib::Plotchart::Barchart","classes/Tk/Tcllib/Plotchart/Barchart.html#method-i-colour","(*cols)",""],["colour","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-colour","(fill, border)",""],["colours","Tk::Tcllib::Plotchart::Barchart","classes/Tk/Tcllib/Plotchart/Barchart.html#method-i-colours","(*cols)",""],["colours","Tk::Tcllib::Plotchart::Piechart","classes/Tk/Tcllib/Plotchart/Piechart.html#method-i-colours","(*list)",""],["colours","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-colours","(fill, border)",""],["colours","Tk::Tcllib::Plotchart::Radialchart","classes/Tk/Tcllib/Plotchart/Radialchart.html#method-i-colours","(*list)",""],["cols","Curses","classes/Curses.html#method-c-cols","()","<p>Returns the number of columns on the screen\n"],["column","Matrix","classes/Matrix.html#method-i-column","(j)","<p>Returns column vector number <code>j</code> of the matrix as a Vector\n(starting at 0 like an array).  When a block …\n"],["column","Ripper::Filter","classes/Ripper/Filter.html#method-i-column","()","<p>The column number of the current token. This value starts from 0. This\nmethod is valid only in event …\n"],["column","TkGrid","classes/TkGrid.html#method-c-column","(master, index, keys=nil)",""],["column","TkGrid","classes/TkGrid.html#method-c-column","(master, index, keys=nil)",""],["column_activate","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-column_activate","(column=None)",""],["column_cget","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-column_cget","(name, option)",""],["column_cget","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-column_cget","(tagOrId, option)",""],["column_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_cget","(tagOrId, option)",""],["column_cget_strict","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-column_cget_strict","(name, option)",""],["column_cget_strict","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-column_cget_strict","(tagOrId, option)",""],["column_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_cget_strict","(tagOrId, option)",""],["column_cget_tkstring","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-column_cget_tkstring","(name, option)",""],["column_cget_tkstring","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-column_cget_tkstring","(tagOrId, option)",""],["column_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_cget_tkstring","(tagOrId, option)",""],["column_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-column_configinfo","(name, slot=nil)",""],["column_configinfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-column_configinfo","(tagOrId, slot=nil)",""],["column_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_configinfo","(tagOrId, slot=nil)",""],["column_configure","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-column_configure","(name, slot, value=None)",""],["column_configure","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-column_configure","(tagOrId, slot, value=None)",""],["column_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_configure","(tagOrId, slot, value=None)",""],["column_delete","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-column_delete","(*fields)",""],["column_dragcget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_dragcget","(option)",""],["column_dragcget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_dragcget_strict","(option)",""],["column_dragcget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_dragcget_tkstring","(option)",""],["column_dragconfiginfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_dragconfiginfo","(slot=nil)",""],["column_dragconfigure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-column_dragconfigure","(slot, value=None)",""],["column_insert","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-column_insert","(pos, field, *opts)",""],["column_invoke","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-column_invoke","(field)",""],["column_move","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-column_move","(name, dest)",""],["column_names","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-column_names","()",""],["column_nearest","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-column_nearest","(x, y=None)",""],["column_vector","Matrix","classes/Matrix.html#method-c-column_vector","(column)","<p>Creates a single-column matrix where the values of that column are as given\nin <code>column</code>.\n\n<pre><code>Matrix.column_vector([4,5,6]) ...</code></pre>\n"],["column_vectors","Matrix","classes/Matrix.html#method-i-column_vectors","()","<p>Returns an array of the column vectors of the matrix.  See Vector.\n"],["columncget","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-columncget","(tagOrId, option)",""],["columncget_strict","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-columncget_strict","(tagOrId, option)",""],["columncget_tkstring","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-columncget_tkstring","(tagOrId, option)","<p>Treeview Column\n"],["columnconfiginfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-columnconfiginfo","(tagOrId, slot=nil)",""],["columnconfiginfo","TkGrid","classes/TkGrid.html#method-c-columnconfiginfo","(master, index, slot=nil)",""],["columnconfiginfo","TkGrid","classes/TkGrid.html#method-c-columnconfiginfo","(master, index, slot=nil)",""],["columnconfigure","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-columnconfigure","(tagOrId, slot, value=None)",""],["columnconfigure","TkGrid","classes/TkGrid.html#method-c-columnconfigure","(master, index, args)",""],["columnconfigure","TkGrid","classes/TkGrid.html#method-c-columnconfigure","(master, index, args)",""],["columns","Matrix","classes/Matrix.html#method-c-columns","(columns)","<p>Creates a matrix using <code>columns</code> as an array of column vectors.\n\n<pre><code>Matrix.columns([[25, 93], [-1, 66]])\n   ...</code></pre>\n"],["columns","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-columns","(*indices)","<p>get listbox widgets\n"],["columns","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-columns","(*indices)","<p>get listbox widgets\n"],["columns","TkMultiListbox","classes/TkMultiListbox.html#method-i-columns","(*indices)","<p>get listbox widgets\n"],["combination","Array","classes/Array.html#method-i-combination","(p1)","<p>When invoked with a block, yields all combinations of length <em>n</em> of\nelements from <em>ary</em> and then returns …\n"],["comma_breakable","PP::PPMethods","classes/PP/PPMethods.html#method-i-comma_breakable","()","<p>A convenience method which is same as follows:\n\n<pre><code>text &#39;,&#39;\nbreakable</code></pre>\n"],["command","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-c-command","()",""],["command","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-command","(cmd=nil, &b)",""],["command","Tk::RbWidget::BalloonHelp","classes/Tk/RbWidget/BalloonHelp.html#method-i-command","(cmd = Proc.new)",""],["command","Tk::Scale","classes/Tk/Scale.html#method-i-command","(cmd=Proc.new)",""],["command","Tk::Wm","classes/Tk/Wm.html#method-c-command","(win, value=nil)",""],["command","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-command","(cmd=nil, &b)",""],["command","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-command","(cmd)","<p>set command\n"],["command=","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-c-command-3D","(cmd)",""],["command_names","Gem::CommandManager","classes/Gem/CommandManager.html#method-i-command_names","()","<p>Return a sorted list of all command names (as strings).\n"],["comment","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-comment","(comment)","<p>Called when a comment is encountered. @p comment The content of the comment\n"],["comment","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-comment","(comment)","<p>Called when a comment is encountered. @p comment The content of the comment\n"],["comment","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-i-comment","(str)",""],["comment","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-comment","()","<p>Returns comments recorded in the gzip file header, or nil if the comments\nis not present.\n"],["comment=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-comment-3D","(comment)","<p>This method is deprecated, use #add_comment instead.\n<p>Appends <code>comment</code> to the current comment, but separated …\n"],["comment=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-comment-3D","(comment)","<p>Replaces our comment with <code>comment</code>, unless it is empty.\n"],["comment=","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-comment-3D","(comment)","<p>Appends <code>comment</code> to the current comment separated by a rule.\n"],["comment=","Rake::Task","classes/Rake/Task.html#method-i-comment-3D","(description)","<p>Writing to the comment attribute is the same as adding a description.\n"],["comment=","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-comment-3D","(p1)","<p>Specify the comment (<code>str</code>) in the gzip header.\n"],["comment?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-comment-3F","()","<p>Content: [ String text ]\n"],["comments","REXML::Element","classes/REXML/Element.html#method-i-comments","()","<p>Get an array of all Comment children. IMMUTABLE\n"],["commercial","Date","classes/Date.html#method-c-commercial","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a date object denoting the given week date.\n<p>The week and the day of week should be a negative …\n"],["commercial","DateTime","classes/DateTime.html#method-c-commercial","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)","<p>Creates a date-time object denoting the given week date.\n<p>For example:\n\n<pre><code>DateTime.commercial(2001) #=&gt; #&lt;DateTime: ...\n</code></pre>\n"],["commit","PStore","classes/PStore.html#method-i-commit","()","<p>Ends the current PStore#transaction, committing any changes to the data\nstore immediately.\n<p>Example:\n\n<pre><code>require ...\n</code></pre>\n"],["commit","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-i-commit","(str = EMPTY_STRING)",""],["common_options","Gem::Command","classes/Gem/Command.html#method-c-common_options","()",""],["compact","Array","classes/Array.html#method-i-compact","()","<p>Returns a copy of <code>self</code> with all <code>nil</code> elements\nremoved.\n\n<pre><code>[ &quot;a&quot;, nil, &quot;b&quot;, nil, &quot;c&quot;, nil ].compact\n       ...</code></pre>\n"],["compact!","Array","classes/Array.html#method-i-compact-21","()","<p>Removes <code>nil</code> elements from the array. Returns <code>nil</code>\nif no changes were made, otherwise returns <em>ary</em>.\n\n<pre><code>[ &quot;a&quot;, ...</code></pre>\n"],["compact_specs","Gem::Indexer","classes/Gem/Indexer.html#method-i-compact_specs","(specs)","<p>Compacts Marshal output for the specs index data source by using identical\nobjects as much as possible. …\n"],["compare","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-compare","(idx1, op, idx2)",""],["compare","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-compare","(idx1, op, idx2)",""],["compareOnOff","Object","classes/Object.html#method-i-compareOnOff","(w, c, item1, item2)",""],["compare_by_identity","Hash","classes/Hash.html#method-i-compare_by_identity","()","<p>Makes <em>hsh</em> compare its keys by their identity, i.e. it will\nconsider exact same objects as same keys. …\n"],["compare_by_identity?","Hash","classes/Hash.html#method-i-compare_by_identity-3F","()","<p>Returns <code>true</code> if <em>hsh</em> will compare its keys by their\nidentity.  Also see <code>Hash#compare_by_identity</code>.\n"],["compare_file","FileUtils","classes/FileUtils.html#method-c-compare_file","(a, b)","<p>Returns true if the contents of a file A and a file B are identical.\n\n<pre><code>FileUtils.compare_file(&#39;somefile&#39;, ...</code></pre>\n"],["compare_language","REXML::Functions","classes/REXML/Functions.html#method-c-compare_language","(lang1, lang2)",""],["compare_stream","FileUtils","classes/FileUtils.html#method-c-compare_stream","(a, b)","<p>Returns true if the contents of a stream <code>a</code> and <code>b</code>\nare identical.\n"],["compatible?","Encoding","classes/Encoding.html#method-c-compatible-3F","(p1, p2)","<p>Checks the compatibility of two objects.\n<p>If the objects are both strings they are compatible when they …\n"],["compile","Object::Syck","classes/Object/Syck.html#method-c-compile","(p1)","<p>Convert YAML to bytecode\n"],["compile","Regexp","classes/Regexp.html#method-c-compile","(*args)","<p>Synonym for <code>Regexp.new</code>\n"],["compile","Ruby2HTML","classes/Ruby2HTML.html#method-c-compile","(f)",""],["compile","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-compile","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = v5)",""],["compile_file","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-compile_file","(p1, p2 = v2)",""],["compile_option","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-compile_option","()",""],["compile_option=","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-compile_option-3D","(p1)",""],["compiled?","Object","classes/Object.html#method-i-compiled-3F","(target)",""],["complain","Gem::Commands::LockCommand","classes/Gem/Commands/LockCommand.html#method-i-complain","(message)",""],["complete","OptionParser::Completion","classes/OptionParser/Completion.html#method-i-complete","(key, icase = false, pat = nil)",""],["complete","OptionParser::List","classes/OptionParser/List.html#method-i-complete","(id, opt, icase = false, *pat, &block)","<p>Searches list <code>id</code> for <code>opt</code> and the optional\npatterns for completion <code>pat</code>. If <code>icase</code> is true,\nthe search is …\n"],["complete","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-complete","(min_visibility)","<p>Prepares this ClassModule for use by a generator.\n<p>See RDoc::TopLevel::complete\n"],["complete","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-complete","(name)","<p>Completes <code>name</code> based on the caches.  For Readline\n"],["complete","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-complete","(min_visibility)","<p>Prepares the RDoc code object tree for use by a generator.\n<p>It finds unique classes/modules defined, and …\n"],["complete?","Tk::Tcllib::IP_Entry","classes/Tk/Tcllib/IP_Entry.html#method-i-complete-3F","()",""],["complete?","Tk::Tcllib::IP_Entry","classes/Tk/Tcllib/IP_Entry.html#method-i-complete-3F","()",""],["complete_authentication","Win32::SSPI::NegotiateAuth","classes/Win32/SSPI/NegotiateAuth.html#method-i-complete_authentication","(token)","<p>Takes a token and gets the next token in the Negotiate authentication\nchain. Token can be Base64 encoded …\n"],["completer_quote_characters","Readline","classes/Readline.html#method-c-completer_quote_characters","()","<p>Gets a list of characters which can be used to quote a substring of the\nline.\n<p>Raises NotImplementedError …\n"],["completer_quote_characters=","Readline","classes/Readline.html#method-c-completer_quote_characters-3D","(p1)","<p>Sets a list of characters which can be used to quote a substring of the\nline. Completion occurs on the …\n"],["completer_word_break_characters","Readline","classes/Readline.html#method-c-completer_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for\nrl_complete_internal().\n<p>Raises …\n"],["completer_word_break_characters=","Readline","classes/Readline.html#method-c-completer_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for\nrl_complete_internal(). The default …\n"],["completion_append_character","Readline","classes/Readline.html#method-c-completion_append_character","()","<p>Returns a string containing a character to be appended on completion. The\ndefault is a space (“ …\n"],["completion_append_character=","Readline","classes/Readline.html#method-c-completion_append_character-3D","(p1)","<p>Specifies a character to be appended on completion. Nothing will be\nappended if an empty string (“”) …\n"],["completion_case_fold","Readline","classes/Readline.html#method-c-completion_case_fold","()","<p>Returns true if completion ignores case. If no, returns false.\n<p>NOTE: Returns the same object that is specified …\n"],["completion_case_fold=","Readline","classes/Readline.html#method-c-completion_case_fold-3D","(p1)","<p>Sets whether or not to ignore case on completion.\n<p>Raises SecurityError exception if $SAFE is 4.\n"],["completion_proc","Readline","classes/Readline.html#method-c-completion_proc","()","<p>Returns the completion Proc object.\n<p>Raises SecurityError exception if $SAFE is 4.\n"],["completion_proc=","Readline","classes/Readline.html#method-c-completion_proc-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to determine completion behavior.\nIt should take input string and return …\n"],["component","Matrix","classes/Matrix.html#method-i-component","(i, j)",""],["component","Tk::Itk::Archetype","classes/Tk/Itk/Archetype.html#method-i-component","()","<p>incr Tk &mdash; public methods\n\n"],["component","URI::Generic","classes/URI/Generic.html#method-i-component","()","<p>Components of the URI in the order.\n"],["component","URI::Generic","classes/URI/Generic.html#method-c-component","()","<p>Components of the URI in the order.\n"],["component","Vector","classes/Vector.html#method-i-component","(i)",""],["component_ary","URI::Generic","classes/URI/Generic.html#method-i-component_ary","()","<p>returns an Array of the components defined from the COMPONENT Array\n"],["component_invoke","Tk::Itk::Archetype","classes/Tk/Itk/Archetype.html#method-i-component_invoke","(name, cmd, *args)",""],["component_obj","Tk::Itk::Archetype","classes/Tk/Itk/Archetype.html#method-i-component_obj","(*names)",""],["component_path","Tk::Itk::Archetype","classes/Tk/Itk/Archetype.html#method-i-component_path","(name)",""],["component_widget","Tk::Itk::Archetype","classes/Tk/Itk/Archetype.html#method-i-component_widget","(name)",""],["compose","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-compose","(text, keys={})",""],["compose","Transformation","classes/Transformation.html#method-i-compose","(a)",""],["compose_with_name","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-compose_with_name","(name, text, keys={})",""],["compress","Gem::Indexer","classes/Gem/Indexer.html#method-i-compress","(filename, extension)","<p>Compress <code>filename</code> with <code>extension</code>.\n"],["compress_indicies","Gem::Indexer","classes/Gem/Indexer.html#method-i-compress_indicies","()","<p>Compresses indicies on disk\n"],["compute_key","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-compute_key","(p1)","<p>Returns a String containing a shared secret computed from the other\nparty&#39;s public value. See DH_compute_key …\n"],["compute_size","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-compute_size","()",""],["compute_size","Tk::BWidget::PagesManager","classes/Tk/BWidget/PagesManager.html#method-i-compute_size","()",""],["computepos","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-computepos","()",""],["concat","Array","classes/Array.html#method-i-concat","(p1)","<p>Appends the elements of <em>other_ary</em> to <code>self</code>.\n\n<pre><code>[ &quot;a&quot;, &quot;b&quot; ].concat( [&quot;c&quot;, &quot;d&quot;] ) #=&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ...\n</code></pre>\n"],["concat","REXML::Functions","classes/REXML/Functions.html#method-c-concat","( *objects )","<p>UNTESTED\n"],["concat","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-concat","(*jobs)",""],["concat","String","classes/String.html#method-i-concat","(p1)","<p>Append—Concatenates the given object to <em>str</em>. If the object is a\n<code>Integer</code>, it is considered as a codepoint, …\n"],["concat","StringScanner","classes/StringScanner.html#method-i-concat","(p1)","<p>Appends <code>str</code> to the string being scanned. This method does not\naffect scan pointer.\n\n<pre><code>s = StringScanner.new(&quot;Fri ...</code></pre>\n"],["conf","IRB","classes/IRB.html#method-c-conf","()",""],["config","DRb","classes/DRb.html#method-c-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["config","Tk::Tcllib::Plotchart::Barchart3D","classes/Tk/Tcllib/Plotchart/Barchart3D.html#method-i-config","(key, value=None)",""],["config=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-config-3D","(p1)",""],["config_file","Gem","classes/Gem.html#method-c-config_file","()","<p>The path to standard location of the user&#39;s .gemrc file.\n"],["config_file_name","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-config_file_name","()","<p>The name of the configuration file.\n"],["configbody","Tk::Itcl","classes/Tk/Itcl.html#method-c-configbody","(klass, var, body)",""],["configinfo","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-configinfo","(win, slot=nil)",""],["configinfo","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-configinfo","(container, *args)",""],["configinfo","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-configinfo","(*args)",""],["configinfo","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-i-configinfo","(master, slot=nil)",""],["configinfo","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-i-configinfo","(slot = nil)",""],["configinfo","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-configinfo","(slot=nil)",""],["configinfo","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::BWidget::MessageDlg","classes/Tk/BWidget/MessageDlg.html#method-i-configinfo","(slot=nil)",""],["configinfo","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-i-configinfo","(slot = nil)",""],["configinfo","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-configinfo","(slot = nil)",""],["configinfo","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-configinfo","(key=nil)",""],["configinfo","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-i-configinfo","(slot = nil)",""],["configinfo","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-configinfo","(key=nil)",""],["configinfo","TkComposite","classes/TkComposite.html#method-i-configinfo","(slot = nil)",""],["configinfo","TkFont","classes/TkFont.html#method-c-configinfo","(fnt, slot=nil)",""],["configinfo","TkFont","classes/TkFont.html#method-i-configinfo","(slot=nil)",""],["configinfo","TkFont","classes/TkFont.html#method-c-configinfo","(fnt, slot=nil)",""],["configinfo","TkFont","classes/TkFont.html#method-i-configinfo","(slot=nil)",""],["configinfo","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-configinfo","(option=nil)",""],["configinfo","TkNamespace::Ensemble","classes/TkNamespace/Ensemble.html#method-i-configinfo","(slot = nil)",""],["configinfo","TkPlace","classes/TkPlace.html#method-c-configinfo","(win, slot = nil)",""],["configinfo","TkPlace","classes/TkPlace.html#method-c-configinfo","(win, slot = nil)",""],["configinfo","TkTextImage","classes/TkTextImage.html#method-i-configinfo","(slot = nil)","<p>def configure(slot, value)\n\n<pre><code>tk_call @t.path, &#39;image&#39;, &#39;configure&#39;, @index, &quot;-#{slot}&quot;, value</code></pre>\n<p>end\n"],["configinfo","TkTextImage","classes/TkTextImage.html#method-i-configinfo","(slot = nil)","<p>def configure(slot, value)\n\n<pre><code>tk_call @t.path, &#39;image&#39;, &#39;configure&#39;, @index, &quot;-#{slot}&quot;, value</code></pre>\n<p>end\n"],["configinfo","TkTextTag","classes/TkTextTag.html#method-i-configinfo","(key=nil)","<p>def configure(key, val=None)\n\n<pre><code>if key.kind_of?(Hash)\n  tk_call @t.path, &#39;tag&#39;, &#39;configure&#39;, @id, *hash_kv(key) ...</code></pre>\n"],["configinfo","TkTextTag","classes/TkTextTag.html#method-i-configinfo","(key=nil)","<p>def configure(key, val=None)\n\n<pre><code>if key.kind_of?(Hash)\n  tk_call @t.path, &#39;tag&#39;, &#39;configure&#39;, @id, *hash_kv(key) ...</code></pre>\n"],["configinfo","TkTextWindow","classes/TkTextWindow.html#method-i-configinfo","(slot = nil)",""],["configinfo","TkTextWindow","classes/TkTextWindow.html#method-i-configinfo","(slot = nil)",""],["configinfo","TkXIM","classes/TkXIM.html#method-c-configinfo","(win, slot=nil)",""],["configinfo","TkcTagAccess","classes/TkcTagAccess.html#method-i-configinfo","(key=nil)","<p>def configure(keys)\n\n<pre><code>@c.itemconfigure @id, keys</code></pre>\n<p>end\n"],["configuration","Gem","classes/Gem.html#method-c-configuration","()","<p>The standard configuration object for gems.\n"],["configuration=","Gem","classes/Gem.html#method-c-configuration-3D","(config)","<p>Use the given configuration object (which implements the ConfigFile\nprotocol) as the standard configuration …\n"],["configure","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-configure","(p1)","<p>Configure this State instance with the Hash <em>opts</em>, and return\nitself.\n"],["configure","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-configure","(win, slot, value=None)",""],["configure","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-configure","(key, value=None)",""],["configure","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-configure","(key, value=None)",""],["configure","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-configure","(key, value=None)",""],["configure","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-configure","(key, value=None)",""],["configure","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-configure","(key, value=None)",""],["configure","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-configure","(key, value=None)",""],["configure","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-configure","(key, value=None)",""],["configure","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-configure","(key, value=None)",""],["configure","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-configure","(container, *args)",""],["configure","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-configure","(*args)",""],["configure","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-i-configure","(master, slot, value=None)",""],["configure","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-configure","(slot, value=None)",""],["configure","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-configure","(key, val=None)",""],["configure","Tk::BWidget::MessageDlg","classes/Tk/BWidget/MessageDlg.html#method-i-configure","(slot, value=None)",""],["configure","Tk::BWidget::SelectFont::Dialog","classes/Tk/BWidget/SelectFont/Dialog.html#method-i-configure","(slot, value=None)",""],["configure","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-configure","(key, val=None)",""],["configure","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-configure","(key, value=nil)",""],["configure","Tk::RbWidget::Editable_Listbox","classes/Tk/RbWidget/Editable_Listbox.html#method-i-configure","(*args)",""],["configure","Tk::Scale","classes/Tk/Scale.html#method-i-configure","(slot, value=None)",""],["configure","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-configure","(*args)",""],["configure","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-i-configure","(slot, value=None)",""],["configure","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-configure","(slot, value=None)",""],["configure","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-configure","(key, value=None)",""],["configure","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-i-configure","(slot, value=None)","<p>def cget(slot)\n\n<pre><code>unless TkConfigMethod.__IGNORE_UNKNOWN_CONFIGURE_OPTION__\n  cget_strict(slot)\nelse\n  cget_strict(slot) ...</code></pre>\n"],["configure","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-configure","(style=nil, keys=nil)",""],["configure","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-configure","(key, val=None)",""],["configure","Tk::ValidateConfigure","classes/Tk/ValidateConfigure.html#method-i-configure","(slot, value=TkComm::None)",""],["configure","TkComposite","classes/TkComposite.html#method-i-configure","(slot, value=None)","<p>def cget(slot)\n\n<pre><code>slot = slot.to_s\n\nif @option_methods.include?(slot)\n  if @option_methods[slot][:cget]\n ...</code></pre>\n"],["configure","TkFont","classes/TkFont.html#method-c-configure","(fnt, slot, value=None)",""],["configure","TkFont","classes/TkFont.html#method-i-configure","(slot, value=None)",""],["configure","TkFont","classes/TkFont.html#method-c-configure","(fnt, slot, value=None)",""],["configure","TkFont","classes/TkFont.html#method-i-configure","(slot, value=None)",""],["configure","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-configure","(option, value=None)",""],["configure","TkGrid","classes/TkGrid.html#method-c-configure","(*args)","<p>def configure(win, *args)\n\n<pre><code>if args[-1].kind_of?(Hash)\n  opts = args.pop\nelse\n  opts = {}\nend\nparams = [] ...</code></pre>\n"],["configure","TkGrid","classes/TkGrid.html#method-c-configure","(*args)","<p>def configure(win, *args)\n\n<pre><code>if args[-1].kind_of?(Hash)\n  opts = args.pop\nelse\n  opts = {}\nend\nparams = [] ...</code></pre>\n"],["configure","TkPack","classes/TkPack.html#method-c-configure","(*args)","<p>def configure(win, *args)\n\n<pre><code>if args[-1].kind_of?(Hash)\n  opts = args.pop\nelse\n  opts = {}\nend\nparams = [] ...</code></pre>\n"],["configure","TkPack","classes/TkPack.html#method-c-configure","(*args)","<p>def configure(win, *args)\n\n<pre><code>if args[-1].kind_of?(Hash)\n  opts = args.pop\nelse\n  opts = {}\nend\nparams = [] ...</code></pre>\n"],["configure","TkPlace","classes/TkPlace.html#method-c-configure","(win, slot, value=None)",""],["configure","TkPlace","classes/TkPlace.html#method-c-configure","(win, slot, value=None)",""],["configure","TkTextImage","classes/TkTextImage.html#method-i-configure","(slot, value=None)",""],["configure","TkTextImage","classes/TkTextImage.html#method-i-configure","(slot, value=None)",""],["configure","TkTextTag","classes/TkTextTag.html#method-i-configure","(key, val=None)","<p>def cget(key)\n\n<pre><code>case key.to_s\nwhen &#39;text&#39;, &#39;label&#39;, &#39;show&#39;, &#39;data&#39;, &#39;file&#39;\n  _fromUTF8(tk_call_without_enc(@t.path, ...</code></pre>\n"],["configure","TkTextTag","classes/TkTextTag.html#method-i-configure","(key, val=None)","<p>def cget(key)\n\n<pre><code>case key.to_s\nwhen &#39;text&#39;, &#39;label&#39;, &#39;show&#39;, &#39;data&#39;, &#39;file&#39;\n  _fromUTF8(tk_call_without_enc(@t.path, ...</code></pre>\n"],["configure","TkTextWindow","classes/TkTextWindow.html#method-i-configure","(slot, value=None)",""],["configure","TkTextWindow","classes/TkTextWindow.html#method-i-configure","(slot, value=None)",""],["configure","TkXIM","classes/TkXIM.html#method-c-configure","(win, slot, value=None)",""],["configure","TkcTagAccess","classes/TkcTagAccess.html#method-i-configure","(key, value=None)",""],["configure_cmd","Tk::Scale","classes/Tk/Scale.html#method-i-configure_cmd","(slot, value)",""],["configure_cmd","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-configure_cmd","(slot, value)",""],["configure_connection_for_https","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-configure_connection_for_https","(connection)",""],["configured_args","Gem::DocManager","classes/Gem/DocManager.html#method-c-configured_args","()",""],["configured_args=","Gem::DocManager","classes/Gem/DocManager.html#method-c-configured_args-3D","(args)",""],["conflicts","Gem::Specification","classes/Gem/Specification.html#method-i-conflicts","()","<p>Return any possible conflicts against the currently loaded specs.\n"],["confuginfo","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-confuginfo","(w, slot = nil)",""],["confugure","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-confugure","(w, slot, value=None)",""],["conj","Complex","classes/Complex.html#method-i-conj","()","<p>Returns the complex conjugate.\n"],["conj","Matrix","classes/Matrix.html#method-i-conj","()",""],["conj","Numeric","classes/Numeric.html#method-i-conj","()","<p>Returns self.\n"],["conjugate","Complex","classes/Complex.html#method-i-conjugate","()","<p>Returns the complex conjugate.\n"],["conjugate","Matrix","classes/Matrix.html#method-i-conjugate","()","<p>Returns the conjugate of the matrix.\n\n<pre><code>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i   i ...\n</code></pre>\n"],["conjugate","Numeric","classes/Numeric.html#method-i-conjugate","()","<p>Returns self.\n"],["connect","Addrinfo","classes/Addrinfo.html#method-i-connect","(&block)","<p>creates a socket connected to the address of self.\n<p>If a block is given, it is called with the socket and …\n"],["connect","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-connect","(tcp)",""],["connect","Net::FTP","classes/Net/FTP.html#method-i-connect","(host, port = FTP_PORT)","<p>Establishes an FTP connection to host, optionally overriding the default\nport. If the environment variable …\n"],["connect","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-connect","()","<p>Initiates an SSL/TLS handshake with a server.  The handshake may be started\nafter unencrypted data has …\n"],["connect","Rake::FtpUploader","classes/Rake/FtpUploader.html#method-i-connect","(path, host, account, password)","<p>Create an uploader and pass it to the given block as <code>up</code>. When\nthe block is complete, close the uploader. …\n"],["connect","Socket","classes/Socket.html#method-i-connect","(p1)","<p>Requests a connection to be made on the given <code>remote_sockaddr</code>.\nReturns 0 if successful, otherwise an …\n"],["connect","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-connect","(from_task, to_task)",""],["connect","UDPSocket","classes/UDPSocket.html#method-i-connect","(p1, p2)","<p>Connects <em>udpsocket</em> to <em>host</em>:<em>port</em>.\n<p>This makes possible to send without destination address.\n\n<pre><code>u1 = UDPSocket.new ...</code></pre>\n"],["connect","WIN32OLE","classes/WIN32OLE.html#method-c-connect","(p1, *args)","<p>Returns running OLE Automation object or WIN32OLE object from moniker. 1st\nargument should be OLE program …\n"],["connect_address","BasicSocket","classes/BasicSocket.html#method-i-connect_address","()","<p>Returns an address of the socket suitable for connect in the local machine.\n<p>This method returns <em>self</em>.local_address, …\n"],["connect_from","Addrinfo","classes/Addrinfo.html#method-i-connect_from","(*local_addr_args, &block)","<p>creates a socket connected to the address of self.\n<p>If one or more arguments given as <em>local_addr_args</em>, …\n"],["connect_nonblock","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-connect_nonblock","()","<p>Initiates the SSL/TLS handshake as a client in non-blocking manner.\n\n<pre><code># emulates blocking connect\nbegin ...</code></pre>\n"],["connect_nonblock","Socket","classes/Socket.html#method-i-connect_nonblock","(p1)","<p>Requests a connection to be made on the given <code>remote_sockaddr</code>\nafter O_NONBLOCK is set for the underlying …\n"],["connect_to","Addrinfo","classes/Addrinfo.html#method-i-connect_to","(*remote_addr_args, &block)","<p>creates a socket connected to <em>remote_addr_args</em> and bound to self.\n<p>If a block is given, it is called with …\n"],["connecting","GServer","classes/GServer.html#method-i-connecting","(client)","<p>Called when a client connects, if auditing is enabled.\n<p><code>client</code> &mdash; a TCPSocket instances representing the client …\n\n"],["connection_close?","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-connection_close-3F","()",""],["connection_for","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-connection_for","(uri)","<p>Creates or an HTTP connection based on <code>uri</code>, or retrieves an\nexisting connection, using a proxy if needed. …\n"],["connection_keep_alive?","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-connection_keep_alive-3F","()",""],["connections","GServer","classes/GServer.html#method-i-connections","()","<p>Return the current number of connected clients\n"],["console","IO","classes/IO.html#method-c-console","()","<p>Returns an File instance opened console.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["console_size","IO","classes/IO.html#method-c-console_size","()",""],["const_defined?","Module","classes/Module.html#method-i-const_defined-3F","(p1, p2 = v2)","<p>Checks for a constant with the given name in <em>mod</em> If\n<code>inherit</code> is set, the lookup will also search the ancestors …\n"],["const_defined_in?","JSON","classes/JSON.html#method-c-const_defined_in-3F","(modul, constant)",""],["const_get","Module","classes/Module.html#method-i-const_get","(p1, p2 = v2)","<p>Checks for a constant with the given name in <em>mod</em> If\n<code>inherit</code> is set, the lookup will also search the ancestors …\n"],["const_load","WIN32OLE","classes/WIN32OLE.html#method-c-const_load","(p1, p2 = v2)","<p>Defines the constants of OLE Automation server as mod&#39;s constants. The\nfirst argument is WIN32OLE …\n"],["const_missing","Module","classes/Module.html#method-i-const_missing","(const_name)","<p>Check for deprecated uses of top level (i.e. in Object) uses of Rake class\nnames.  If someone tries to …\n"],["const_missing","Object","classes/Object.html#method-c-const_missing","(c)",""],["const_missing","Tk::Tile","classes/Tk/Tile.html#method-c-const_missing","(sym)",""],["const_missing","Tk::Tile","classes/Tk/Tile.html#method-c-const_missing","(sym)",""],["const_missing","Tk::Tile","classes/Tk/Tile.html#method-c-const_missing","(sym)",""],["const_set","Module","classes/Module.html#method-i-const_set","(p1, p2)","<p>Sets the named constant to the given object, returning that object. Creates\na new constant if no constant …\n"],["const_warning","Rake::Application","classes/Rake/Application.html#method-i-const_warning","(const_name)","<p>Warn about deprecated use of top level constant names.\n"],["const_warning","Rake::Application","classes/Rake/Application.html#method-i-const_warning","(const_name)","<p>Warn about deprecated use of top level constant names.\n"],["constantize_agename","Object","classes/Object.html#method-i-constantize_agename","(name)",""],["constants","Module","classes/Module.html#method-i-constants","(p1 = v1)","<p>Returns an array of the names of the constants accessible in <em>mod</em>.\nThis includes the names of constants …\n"],["constants","Module","classes/Module.html#method-c-constants","(*args)","<p>In the first form, returns an array of the names of all constants\naccessible from the point of call. …\n"],["constrain","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-constrain","(val = None)",""],["construct","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-construct","(hour, minute, second)",""],["consume","PiDigitSpigot","classes/PiDigitSpigot.html#method-i-consume","(a)",""],["consume","REXML::IOSource","classes/REXML/IOSource.html#method-i-consume","( pattern )",""],["consume","REXML::Source","classes/REXML/Source.html#method-i-consume","( pattern )",""],["containers","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-containers","(arg={})",""],["containers_pattern","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-containers_pattern","(pat)",""],["containers_slave","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-containers_slave","(win)",""],["containing","TkWinfo","classes/TkWinfo.html#method-c-containing","(rootX, rootY, win=nil)",""],["containing","TkWinfo","classes/TkWinfo.html#method-c-containing","(rootX, rootY, win=nil)",""],["contains","REXML::Functions","classes/REXML/Functions.html#method-c-contains","( string, test )","<p>Fixed by Mike Stok\n"],["contains_requirable_file?","Gem::Specification","classes/Gem/Specification.html#method-i-contains_requirable_file-3F","(file)","<p>Return true if this spec can require <code>file</code>.\n"],["content=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-content-3D","(value)",""],["content=","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-content-3D","(content)",""],["content_encoding","OpenURI::Meta","classes/OpenURI/Meta.html#method-i-content_encoding","()","<p>Returns a list of encodings in Content-Encoding field as an array of\nstrings.\n<p>The encodings are downcased …\n"],["content_length","HttpServer::Request","classes/HttpServer/Request.html#method-i-content_length","()",""],["content_length","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-content_length","()","<p>Returns an Integer object which represents the HTTP Content-Length: header\nfield, or <code>nil</code> if that field …\n"],["content_length","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-content_length","()","<p>The content-length header\n"],["content_length","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-content_length","()","<p>The content-length header\n"],["content_length=","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-content_length-3D","(len)",""],["content_length=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-content_length-3D","(len)","<p>Sets the content-length header to <code>len</code>\n"],["content_range","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-content_range","()","<p>Returns a Range object which represents the value of the Content-Range:\nheader field. For a partial entity …\n"],["content_setup","RSS::Element","classes/RSS/Element.html#method-i-content_setup","(type=nil, disp_name=nil)",""],["content_type","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-content_type","()","<p>Returns a content type string such as “text/html”. This method returns nil\nif Content-Type: …\n"],["content_type","OpenURI::Meta","classes/OpenURI/Meta.html#method-i-content_type","()","<p>returns “type/subtype” which is MIME Content-Type. It is downcased for\ncanonicalization. Content-Type …\n"],["content_type","RSS::Atom::ContentModel::ClassMethods","classes/RSS/Atom/ContentModel/ClassMethods.html#method-i-content_type","()",""],["content_type","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-content_type","()","<p>The content-type header\n"],["content_type","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-content_type","()","<p>The content-type header\n"],["content_type=","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-content_type-3D","(type, params = {})",""],["content_type=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-content_type-3D","(type)","<p>Sets the content-type header to <code>type</code>\n"],["context","DEBUGGER__","classes/DEBUGGER__.html#method-i-context","(thread=Thread.current)",""],["context","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-context","(th)",""],["context","REXML::DocType","classes/REXML/DocType.html#method-i-context","()",""],["context","REXML::ParseException","classes/REXML/ParseException.html#method-i-context","()",""],["context=","REXML::Functions","classes/REXML/Functions.html#method-c-context-3D","(value)",""],["continue","TkRTTimer","classes/TkRTTimer.html#method-i-continue","(wait=nil)",""],["continue","TkTimer","classes/TkTimer.html#method-i-continue","(wait=nil)",""],["continue","TkTimer","classes/TkTimer.html#method-i-continue","(wait=nil)",""],["continue","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-continue","()","<p>Generate HTTP/1.1 100 continue response if the client expects it, otherwise\ndoes nothing.\n"],["continue?","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-continue-3F","()","<p>Determines whether the response received was a Positive Intermediate reply\n(3xx reply code)\n"],["continue_timeout=","Net::HTTP","classes/Net/HTTP.html#method-i-continue_timeout-3D","(sec)","<p>Setter for the continue_timeout attribute.\n"],["continue_timeout=","Net::HTTP","classes/Net/HTTP.html#method-i-continue_timeout-3D","(sec)","<p>Setter for the continue_timeout attribute.\n"],["contourbox","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-contourbox","(xcrd, ycrd, vals, clss=None)",""],["contourfill","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-contourfill","(xcrd, ycrd, vals, clss=None)",""],["contourlines","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-contourlines","(xcrd, ycrd, vals, clss=None)",""],["conv","Iconv","classes/Iconv.html#method-c-conv","(p1, p2, p3)","<p>Shorthand for\n\n<pre><code>Iconv.iconv(to, from, str).join</code></pre>\n<p>See Iconv.iconv.\n"],["conv","Iconv","classes/Iconv.html#method-i-conv","(*args)","<p>Equivalent to\n\n<pre><code>iconv(nil, str..., nil).join</code></pre>\n"],["conversion","EmojiTable","classes/EmojiTable.html#method-i-conversion","(from_carrier, to_carrier, &block)",""],["convert","CSV","classes/CSV.html#method-i-convert","(name = nil, &converter)","<p>You can use this method to install a CSV::Converters built-in, or provide a\nblock that handles a custom …\n"],["convert","Encoding::Converter","classes/Encoding/Converter.html#method-i-convert","(p1)","<p>Convert source_string and return destination_string.\n<p>source_string is assumed as a part of source. i.e. …\n"],["convert","OptionParser::Completion","classes/OptionParser/Completion.html#method-i-convert","(opt = nil, val = nil, *)",""],["convert","RDoc::Markup","classes/RDoc/Markup.html#method-i-convert","(input, formatter)","<p>We take <code>input</code>, parse it if necessary, then invoke the output\n<code>formatter</code> using a Visitor to render the …\n"],["convert","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-convert","(content)","<p>Marks up <code>content</code>\n"],["convert","RSS::Converter","classes/RSS/Converter.html#method-i-convert","(value)",""],["convert","RSS::Element","classes/RSS/Element.html#method-i-convert","(value)",""],["convert","WEBrick::HTTPVersion","classes/WEBrick/HTTPVersion.html#method-c-convert","(version)",""],["convert_attrs","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-convert_attrs","(str, attrs)","<p>Map attributes like <strong>text</strong>to the sequence\n001002&lt;char&gt;001003&lt;char&gt;, where &lt;char&gt; is …\n"],["convert_flow","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-convert_flow","(flow)","<p>Converts flow items <code>flow</code>\n"],["convert_html","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-convert_html","(str, attrs)","<p>Converts HTML tags to RDoc attributes\n"],["convert_special","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-convert_special","(special)","<p>Converts added specials.  See RDoc::Markup#add_special\n"],["convert_special","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-convert_special","(special)","<p>Calls convert_string on the result of convert_special\n"],["convert_specials","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-convert_specials","(str, attrs)","<p>Converts special sequences to RDoc attributes\n"],["convert_string","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-convert_string","(string)","<p>Converts a string to be fancier if desired\n"],["convert_string","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-convert_string","(string)","<p>Adds bold or underline mixed with backspaces\n"],["convert_string","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-convert_string","(text)","<p>CGI escapes <code>text</code>\n"],["converter=","RSS::Element","classes/RSS/Element.html#method-i-converter-3D","(converter)",""],["converters","CSV","classes/CSV.html#method-i-converters","()","<p>Returns the current list of converters in effect.  See CSV::new for\ndetails. Built-in converters will …\n"],["convertible_int","Object","classes/Object.html#method-i-convertible_int","(type, headers = nil, opts = nil, &b)",""],["convolve","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-convolve","(src, dest, filter)",""],["convolve","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-convolve","(src, dest, filter)",""],["convpath","Encoding::Converter","classes/Encoding/Converter.html#method-i-convpath","()","<p>Returns the conversion path of ec.\n<p>The result is an array of conversions.\n\n<pre><code>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</code></pre>\n"],["cooked","IO","classes/IO.html#method-i-cooked","()","<p>Yields <code>self</code> within cooked mode.\n\n<pre><code>STDIN.cooked(&amp;:gets)</code></pre>\n<p>will read and return a line with echo back and line …\n"],["cooked","Object","classes/Object.html#method-i-cooked","()",""],["cooked!","IO","classes/IO.html#method-i-cooked-21","()","<p>Enables cooked mode.\n<p>If the terminal mode needs to be back, use io.cooked { … }.\n<p>You must require &#39;io/console&#39; …\n"],["coords","Tk::Canvas","classes/Tk/Canvas.html#method-i-coords","(tag, *args)",""],["coords","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-coords","(index=None, percent=None)",""],["coords","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-coords","(tag, *args)",""],["coords","Tk::Scale","classes/Tk/Scale.html#method-i-coords","(val=None)",""],["coords","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-coords","(val = nil)",""],["coords","TkcTagAccess","classes/TkcTagAccess.html#method-i-coords","(*args)",""],["coords_3D_to_pixel","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-coords_3D_to_pixel","(w, x, y, z)",""],["coords_3D_to_pixel","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-coords_3D_to_pixel","(x, y, z)",""],["coords_to_pixel","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-coords_to_pixel","(w, x, y)",""],["coords_to_pixel","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-coords_to_pixel","(x, y)",""],["coords_to_time","Clock","classes/Clock.html#method-i-coords_to_time","(x, y)",""],["copy","FileUtils","classes/FileUtils.html#method-c-copy","(src, dest, options = {})",""],["copy","Net::HTTP","classes/Net/HTTP.html#method-i-copy","(path, initheader = nil)","<p>Sends a COPY request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["copy","Net::HTTP","classes/Net/HTTP.html#method-i-copy","(path, initheader = nil)","<p>Sends a COPY request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["copy","Net::IMAP","classes/Net/IMAP.html#method-i-copy","(set, mailbox)","<p>Sends a COPY command to copy the specified message(s) to the end of the\nspecified destination <code>mailbox</code> …\n"],["copy","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-copy","(p1)",""],["copy","Sys","classes/Sys.html#method-i-copy","(file_name, dest_file)","<p>Copy a single file from <code>file_name</code> to <code>dest_file</code>.\n"],["copy","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-copy","(parent, keys={})",""],["copy","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-copy","()",""],["copy","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-copy","(from_file, from_index, to_file, to_index, keys=nil)",""],["copy","TkPhotoImage","classes/TkPhotoImage.html#method-i-copy","(src, *opts)","<p>Copies a region from the image called source to the image called\ndestination, possibly with pixel zooming …\n"],["copy","TkPhotoImage","classes/TkPhotoImage.html#method-i-copy","(src, *opts)","<p>Copies a region from the image called source to the image called\ndestination, possibly with pixel zooming …\n"],["copy_entry","FileUtils","classes/FileUtils.html#method-c-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Copies a file system entry <code>src</code> to <code>dest</code>. If\n<code>src</code> is a directory, this method copies its contents\nrecursively. …\n"],["copy_file","FileUtils","classes/FileUtils.html#method-c-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file contents of <code>src</code> to <code>dest</code>. Both of\n<code>src</code> and <code>dest</code> must be a path name.\n"],["copy_files","Sys","classes/Sys.html#method-i-copy_files","(wildcard, dest_dir)","<p>Copy all files matching <code>wildcard</code> into the directory\n<code>dest_dir</code>.\n"],["copy_nonce","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-copy_nonce","(p1)",""],["copy_stream","FileUtils","classes/FileUtils.html#method-c-copy_stream","(src, dest)","<p>Copies stream <code>src</code> to <code>dest</code>. <code>src</code> must\nrespond to #read(n) and <code>dest</code> must respond to #write(str).\n"],["copy_stream","IO","classes/IO.html#method-c-copy_stream","(p1, p2, p3 = v3, p4 = v4)","<p>IO.copy_stream copies <em>src</em> to <em>dst</em>. <em>src</em> and\n<em>dst</em> is either a filename or an IO.\n<p>This method returns the number …\n"],["copy_string","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-copy_string","(start_pos, end_pos)","<p>Copies <code>start_pos</code> to <code>end_pos</code> from the current\nstring\n"],["copy_to","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-copy_to","(dest_tree, parent, keys={})",""],["coredump?","Process::Status","classes/Process/Status.html#method-i-coredump-3F","()","<p>Returns <code>true</code> if <em>stat</em> generated a coredump when it\nterminated. Not available on all platforms.\n"],["correct?","Version","classes/Version.html#method-c-correct-3F","(version)","<p>True if the <code>version</code> string matches RubyGems&#39; requirements.\n"],["correct_for_windows_path","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-correct_for_windows_path","(path)",""],["cos","BigMath","classes/BigMath.html#method-i-cos","(x, prec)","<p>Computes the cosine of x to the specified number of digits of precision.\n<p>If x is infinite or NaN, returns …\n"],["cos","CMath","classes/CMath.html#method-c-cos","(z)","<p>returns the cosine of <code>z</code>, where <code>z</code> is given in\nradians\n"],["cos","Math","classes/Math.html#method-c-cos","(p1)","<p>Computes the cosine of <em>x</em> (expressed in radians). Returns -1..1.\n"],["cos!","CMath","classes/CMath.html#method-c-cos-21","(z)",""],["cosh","CMath","classes/CMath.html#method-c-cosh","(z)","<p>returns the hyperbolic cosine of <code>z</code>, where <code>z</code> is\ngiven in radians\n"],["cosh","Math","classes/Math.html#method-c-cosh","(p1)","<p>Computes the hyperbolic cosine of <em>x</em> (expressed in radians).\n"],["cosh!","CMath","classes/CMath.html#method-c-cosh-21","(z)",""],["count","Array","classes/Array.html#method-i-count","(p1)","<p>Returns the number of elements.  If an argument is given, counts the number\nof elements which equals …\n"],["count","Board","classes/Board.html#method-i-count","(x,y)",""],["count","Enumerable","classes/Enumerable.html#method-i-count","(p1)","<p>Returns the number of items in <em>enum</em>, where #size is called if it\nresponds to it, otherwise the items …\n"],["count","GC","classes/GC.html#method-c-count","()","<p>The number of times GC occurred.\n<p>It returns the number of times GC occurred since the process started. …\n"],["count","REXML::Functions","classes/REXML/Functions.html#method-c-count","( node_set )","<p>Returns the size of the given list of nodes.\n"],["count","String","classes/String.html#method-i-count","(*args)","<p>Each <em>other_str</em> parameter defines a set of characters to count. \nThe intersection of these sets defines …\n"],["count_objects","ObjectSpace","classes/ObjectSpace.html#method-c-count_objects","(p1 = v1)","<p>Counts objects for each type.\n<p>It returns a hash as: {:TOTAL=&gt;10000, :FREE=&gt;3011, :T_OBJECT=&gt;6, …\n"],["count_observers","Observable","classes/Observable.html#method-i-count_observers","()","<p>Return the number of observers associated with this object.\n"],["covector","Vector","classes/Vector.html#method-i-covector","()","<p>Creates a single-row matrix from this vector.\n"],["cover?","Range","classes/Range.html#method-i-cover-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is between beg and end, i.e\n<code>beg &lt;= obj &lt;= end</code> (or <em>end</em> exclusive when\n<code>exclude_end?</code> …\n"],["coverage_level=","RDoc::Stats","classes/RDoc/Stats.html#method-i-coverage_level-3D","(level)","<p>Sets coverage report level.  Accepted values are:\n<p>false or nil &mdash; No report\n<p>0 &mdash; Classes, modules, constants, …\n"],["cp","FileUtils","classes/FileUtils.html#method-c-cp","(src, dest, options = {})","<p>Options: preserve noop verbose\n<p>Copies a file content <code>src</code> to <code>dest</code>.  If\n<code>dest</code> is a directory, copies <code>src</code> …\n"],["cp","Object","classes/Object.html#method-i-cp","()","<p>Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY\n\n<pre><code>ruby -run -e cp -- [OPTION] SOURCE DEST\n\n-p   ...</code></pre>\n"],["cp_r","FileUtils","classes/FileUtils.html#method-c-cp_r","(src, dest, options = {})","<p>Options: preserve noop verbose dereference_root remove_destination\n<p>Copies <code>src</code> to <code>dest</code>. If <code>src</code> is a\ndirectory, …\n"],["cram_md5_challenge","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-cram_md5_challenge","()","<p>Creates a CRAM-MD5 challenge. You can view more information on CRAM-MD5 on\nWikipedia: en.wikipedia.org/wiki/CRAM-MD5 …\n"],["crc","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-crc","()","<p>Returns CRC value of the uncompressed data.\n"],["crc32","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-crc32","(data)",""],["crc32","Zlib","classes/Zlib.html#method-c-crc32","(*args)","<p>Calculates CRC checksum for <code>string</code>, and returns updated value\nof <code>crc</code>. If <code>string</code> is omitted, it returns …\n"],["crc32_combine","Zlib","classes/Zlib.html#method-c-crc32_combine","(p1, p2, p3)","<p>Combine two CRC-32 check values in to one.  <code>crc1</code> is the first\nCRC-32 value, <code>crc2</code> is the second CRC-32 …\n"],["crc32_data","Tk::BLT","classes/Tk/BLT.html#method-c-crc32_data","(dat)",""],["crc32_file","Tk::BLT","classes/Tk/BLT.html#method-c-crc32_file","(name)",""],["crc_table","Zlib","classes/Zlib.html#method-c-crc_table","()","<p>Returns the table for calculating CRC checksum as an array.\n"],["create","DL::CStructBuilder","classes/DL/CStructBuilder.html#method-c-create","(klass, types, members)",""],["create","DemoBasic","classes/DemoBasic.html#method-c-create","(nb)",""],["create","DemoDialog","classes/DemoDialog.html#method-c-create","(nb)",""],["create","DemoDnD","classes/DemoDnD.html#method-c-create","(nb)",""],["create","DemoManager","classes/DemoManager.html#method-c-create","(nb)",""],["create","DemoSelect","classes/DemoSelect.html#method-c-create","(nb)",""],["create","DemoTree","classes/DemoTree.html#method-c-create","(nb)",""],["create","Exports","classes/Exports.html#method-c-create","(*args, &block)",""],["create","Gem::Requirement","classes/Gem/Requirement.html#method-c-create","(input)","<p>Factory method to create a Gem::Requirement object.  Input may be a\nVersion, a String, or nil.  Intended …\n"],["create","Gem::Requirement","classes/Gem/Requirement.html#method-c-create","(input)","<p>Factory method to create a Gem::Requirement object.  Input may be a\nVersion, a String, or nil.  Intended …\n"],["create","IRB::SLex","classes/IRB/SLex.html#method-i-create","(token, preproc = nil, postproc = nil)",""],["create","Net::IMAP","classes/Net/IMAP.html#method-i-create","(mailbox)","<p>Sends a CREATE command to create a new <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised if a mailbox with …\n"],["create","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-c-create","(p1, p2)","<p>OCSP::Response\n"],["create","OpenSSL::PKCS12","classes/OpenSSL/PKCS12.html#method-c-create","(p1, p2, p3, p4, p5 = v5, p6 = v6, p7 = v7, p8 = v8, p9 = v9, p10 = v10)","<p>Parameters\n<p><code>pass</code> - string\n<p><code>name</code> - A string describing the key.\n"],["create","Resolv::DNS::Name","classes/Resolv/DNS/Name.html#method-c-create","(arg)","<p>Creates a new DNS name from <code>arg</code>.  <code>arg</code> can be:\n<p>Name &mdash; returns <code>arg</code>.\n<p>String &mdash; Creates a new Name.\n"],["create","Resolv::IPv4","classes/Resolv/IPv4.html#method-c-create","(arg)",""],["create","Resolv::IPv6","classes/Resolv/IPv6.html#method-c-create","(arg)","<p>Creates a new IPv6 address from <code>arg</code> which may be:\n<p>IPv6 &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match one of the IPv6::Regex* …\n"],["create","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-c-create","(chart, keys={})",""],["create","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-c-create","(*args)",""],["create","Tk::BWidget::MessageDlg","classes/Tk/BWidget/MessageDlg.html#method-i-create","()",""],["create","Tk::BWidget::PasswdDlg","classes/Tk/BWidget/PasswdDlg.html#method-i-create","()",""],["create","Tk::BWidget::ProgressDlg","classes/Tk/BWidget/ProgressDlg.html#method-i-create","()",""],["create","Tk::BWidget::SelectColor::Dialog","classes/Tk/BWidget/SelectColor/Dialog.html#method-i-create","()",""],["create","Tk::BWidget::SelectFont","classes/Tk/BWidget/SelectFont.html#method-i-create","()",""],["create","Tk::BWidget::SelectFont::Dialog","classes/Tk/BWidget/SelectFont/Dialog.html#method-i-create","()",""],["create","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-create","(klass, path, rename=None, &b)",""],["create","Tk::Canvas","classes/Tk/Canvas.html#method-i-create","(type, *args)","<p>create a canvas item without creating a TkcItem object\n"],["create","Tk::ICONS","classes/Tk/ICONS.html#method-c-create","(*args)",""],["create","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-create","(type, *args)","<p>create a canvas item without creating a TkcItem object\n"],["create","TkConsole","classes/TkConsole.html#method-c-create","()",""],["create","TkTextWindow","classes/TkTextWindow.html#method-i-create","()",""],["create","TkTextWindow","classes/TkTextWindow.html#method-i-create","()",""],["create","TkcItem","classes/TkcItem.html#method-c-create","(canvas, *args)",""],["create","TkcText","classes/TkcText.html#method-c-create","(canvas, *args)",""],["create","TkcText","classes/TkcText.html#method-c-create","(canvas, *args)",""],["create","TkcWindow","classes/TkcWindow.html#method-c-create","(canvas, *args)",""],["create","TkcWindow","classes/TkcWindow.html#method-c-create","(canvas, *args)",""],["create","Version","classes/Version.html#method-c-create","(input)","<p>Factory method to create a Version object. Input may be a Version or a\nString. Intended to simplify client …\n"],["create","Win32::Registry","classes/Win32/Registry.html#method-i-create","(subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED, &blk)","<p>Same as Win32::Registry.create (self, subkey, desired, opt)\n"],["create","Win32::Registry","classes/Win32/Registry.html#method-c-create","(hkey, subkey, desired = KEY_ALL_ACCESS, opt = REG_OPTION_RESERVED)","<p>— Registry.create(key, subkey, desired = KEY_ALL_ACCESS, opt =\nREG_OPTION_RESERVED)\n<p>— Registry.create …\n"],["create=","TkTextWindow","classes/TkTextWindow.html#method-i-create-3D","(value)",""],["create=","TkTextWindow","classes/TkTextWindow.html#method-i-create-3D","(value)",""],["createAttribute","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createAttribute","(arg0)","<p>IXMLDOMAttribute createAttribute create an attribute node\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["createAttribute","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createAttribute","(arg0)","<p>IXMLDOMAttribute createAttribute create an attribute node\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["createAttribute","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createAttribute","(arg0)","<p>IXMLDOMAttribute createAttribute create an attribute node\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["createCDATASection","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createCDATASection","(arg0)","<p>IXMLDOMCDATASection createCDATASection create a CDATA section node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["createCDATASection","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createCDATASection","(arg0)","<p>IXMLDOMCDATASection createCDATASection create a CDATA section node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["createCDATASection","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createCDATASection","(arg0)","<p>IXMLDOMCDATASection createCDATASection create a CDATA section node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["createComment","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createComment","(arg0)","<p>IXMLDOMComment createComment create a comment node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["createComment","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createComment","(arg0)","<p>IXMLDOMComment createComment create a comment node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["createComment","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createComment","(arg0)","<p>IXMLDOMComment createComment create a comment node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["createDocumentFragment","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createDocumentFragment","()","<p>IXMLDOMDocumentFragment createDocumentFragment create a DocumentFragment\nnode\n"],["createDocumentFragment","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createDocumentFragment","()","<p>IXMLDOMDocumentFragment createDocumentFragment create a DocumentFragment\nnode\n"],["createDocumentFragment","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createDocumentFragment","()","<p>IXMLDOMDocumentFragment createDocumentFragment create a DocumentFragment\nnode\n"],["createElement","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createElement","(arg0)","<p>IXMLDOMElement createElement create an Element node\n\n<pre><code>BSTR arg0 --- tagName [IN]</code></pre>\n"],["createElement","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createElement","(arg0)","<p>IXMLDOMElement createElement create an Element node\n\n<pre><code>BSTR arg0 --- tagName [IN]</code></pre>\n"],["createElement","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createElement","(arg0)","<p>IXMLDOMElement createElement create an Element node\n\n<pre><code>BSTR arg0 --- tagName [IN]</code></pre>\n"],["createElement","Msxml","classes/Msxml.html#method-i-createElement","(arg0, arg1=nil, arg2=nil)","<p>HRESULT createElement create different types of IXMLElements.\n\n<pre><code>VARIANT arg0 --- vType [IN]\nVARIANT arg1 ...</code></pre>\n"],["createEntityReference","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createEntityReference","(arg0)","<p>IXMLDOMEntityReference createEntityReference create an entity reference\nnode\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["createEntityReference","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createEntityReference","(arg0)","<p>IXMLDOMEntityReference createEntityReference create an entity reference\nnode\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["createEntityReference","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createEntityReference","(arg0)","<p>IXMLDOMEntityReference createEntityReference create an entity reference\nnode\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["createMatchPatterns","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-createMatchPatterns","(*args)",""],["createNode","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createNode","(arg0, arg1, arg2)","<p>IXMLDOMNode createNode create a node of the specified node type and name\n\n<pre><code>VARIANT arg0 --- type [IN]\nBSTR ...</code></pre>\n"],["createNode","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createNode","(arg0, arg1, arg2)","<p>IXMLDOMNode createNode create a node of the specified node type and name\n\n<pre><code>VARIANT arg0 --- type [IN]\nBSTR ...</code></pre>\n"],["createNode","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createNode","(arg0, arg1, arg2)","<p>IXMLDOMNode createNode create a node of the specified node type and name\n\n<pre><code>VARIANT arg0 --- type [IN]\nBSTR ...</code></pre>\n"],["createProcessingInstruction","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createProcessingInstruction","(arg0, arg1)","<p>IXMLDOMProcessingInstruction createProcessingInstruction create a\nprocessing instruction node\n\n<pre><code>BSTR arg0 ...</code></pre>\n"],["createProcessingInstruction","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createProcessingInstruction","(arg0, arg1)","<p>IXMLDOMProcessingInstruction createProcessingInstruction create a\nprocessing instruction node\n\n<pre><code>BSTR arg0 ...</code></pre>\n"],["createProcessingInstruction","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createProcessingInstruction","(arg0, arg1)","<p>IXMLDOMProcessingInstruction createProcessingInstruction create a\nprocessing instruction node\n\n<pre><code>BSTR arg0 ...</code></pre>\n"],["createTextNode","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-createTextNode","(arg0)","<p>IXMLDOMText createTextNode create a text node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["createTextNode","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-createTextNode","(arg0)","<p>IXMLDOMText createTextNode create a text node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["createTextNode","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-createTextNode","(arg0)","<p>IXMLDOMText createTextNode create a text node\n\n<pre><code>BSTR arg0 --- data [IN]</code></pre>\n"],["create_archive","Tk::Trofs","classes/Tk/Trofs.html#method-c-create_archive","(dir, archive)",""],["create_asciifont","TkFont","classes/TkFont.html#method-i-create_asciifont","(font)",""],["create_asciifont","TkFont","classes/TkFont.html#method-i-create_asciifont","(font)",""],["create_carried_function","DL::Importer","classes/DL/Importer.html#method-i-create_carried_function","(name, ctype, argtype, call_type = nil, n = 0)",""],["create_carrier","DL::CarriedFunction","classes/DL/CarriedFunction.html#method-i-create_carrier","(data)",""],["create_compoundfont","TkFont","classes/TkFont.html#method-i-create_compoundfont","(ltn, knj, keys)",""],["create_compoundfont","TkFont","classes/TkFont.html#method-i-create_compoundfont","(ltn, knj, keys)",""],["create_container","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-create_container","(container)",""],["create_copy","TkFont","classes/TkFont.html#method-c-create_copy","(font)",""],["create_copy","TkFont","classes/TkFont.html#method-c-create_copy","(font)",""],["create_dummy_encoding_for_tk","TclTkIp","classes/TclTkIp.html#method-i-create_dummy_encoding_for_tk","(p1)",""],["create_ext","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_ext","(p1, p2, p3 = v3)","<p>Array to X509_EXTENSION Structure:\n<p>“ln”, “value”, bool_critical &mdash; or\n<p>“sn”, … &mdash; "],["create_ext_from_array","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_array","(ary)",""],["create_ext_from_hash","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_hash","(hash)",""],["create_ext_from_string","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_string","(str)",""],["create_extension","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_extension","(*arg)",""],["create_from","REXML::SourceFactory","classes/REXML/SourceFactory.html#method-c-create_from","(arg)","<p>Generates a Source object @param arg Either a String, or an IO @return a\nSource, or nil if a bad argument …\n"],["create_gui","Knights_Tour","classes/Knights_Tour.html#method-i-create_gui","(parent = nil)",""],["create_guid","WIN32OLE","classes/WIN32OLE.html#method-c-create_guid","()","<p>Creates GUID.\n\n<pre><code>WIN32OLE.create_guid # =&gt; {1CB530F1-F6B1-404D-BCE6-1959BF91F4A8}\n</code></pre>\n"],["create_header","Object","classes/Object.html#method-i-create_header","(header = \"extconf.h\")","<p>Generates a header file consisting of the various macro definitions\ngenerated by other methods such as …\n"],["create_itcl_class","Tk::Itcl","classes/Tk/Itcl.html#method-c-create_itcl_class","(name, body)",""],["create_itemobj_from_id","Tk::Canvas","classes/Tk/Canvas.html#method-i-create_itemobj_from_id","(idnum)",""],["create_kanjifont","TkFont","classes/TkFont.html#method-i-create_kanjifont","(font)",""],["create_kanjifont","TkFont","classes/TkFont.html#method-i-create_kanjifont","(font)",""],["create_latinfont","TkFont","classes/TkFont.html#method-i-create_latinfont","(font)",""],["create_latinfont","TkFont","classes/TkFont.html#method-i-create_latinfont","(font)",""],["create_listeners","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-create_listeners","(address, port, logger=nil)","<p>Creates TCP server sockets bound to <code>address</code>:<code>port</code>\nand returns them.\n<p>It will create IPV4 and IPV6 sockets …\n"],["create_local_obj","Tk::Itcl","classes/Tk/Itcl.html#method-c-create_local_obj","(klass, name, *args)",""],["create_makefile","Object","classes/Object.html#method-i-create_makefile","(target, srcprefix = nil)","<p>Generates the Makefile for your extension, passing along any options and\npreprocessor constants that …\n"],["create_pie","Clock","classes/Clock.html#method-i-create_pie","(hh, mm, span, color='red')",""],["create_rule","Rake::Task","classes/Rake/Task.html#method-i-create_rule","(*args, &block)","<p>Define a rule for synthesizing tasks.\n"],["create_rule","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-create_rule","(*args, &block)",""],["create_self","Button_with_Frame","classes/Button_with_Frame.html#method-i-create_self","(keys)",""],["create_self","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-create_self","(keys)",""],["create_self","Tk::BWidget::ProgressDlg","classes/Tk/BWidget/ProgressDlg.html#method-i-create_self","(keys)",""],["create_self","Tk::BWidget::SelectColor::Dialog","classes/Tk/BWidget/SelectColor/Dialog.html#method-i-create_self","(keys)",""],["create_self","Tk::BWidget::SelectFont::Dialog","classes/Tk/BWidget/SelectFont/Dialog.html#method-i-create_self","(keys)",""],["create_self","Tk::RbWidget::Editable_Listbox","classes/Tk/RbWidget/Editable_Listbox.html#method-i-create_self","(keys)",""],["create_self","Tk::Tcllib::KHIM","classes/Tk/Tcllib/KHIM.html#method-i-create_self","(keys=None)",""],["create_self","TkTree","classes/TkTree.html#method-i-create_self","(keys)",""],["create_self_signed_cert","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-create_self_signed_cert","(bits, cn, comment)",""],["create_slave","RemoteTkIp","classes/RemoteTkIp.html#method-i-create_slave","(name, safe=false)",""],["create_slave","TclTkIp","classes/TclTkIp.html#method-i-create_slave","(p1, p2 = v2)",""],["create_ssl_params","Net::POP3","classes/Net/POP3.html#method-c-create_ssl_params","(verify_or_params = {}, certs = nil)","<p>Constructs proper parameters from arguments\n"],["create_ssl_params","Net::POP3","classes/Net/POP3.html#method-c-create_ssl_params","(verify_or_params = {}, certs = nil)","<p>Constructs proper parameters from arguments\n"],["create_ssl_params","Net::POP3","classes/Net/POP3.html#method-c-create_ssl_params","(verify_or_params = {}, certs = nil)","<p>Constructs proper parameters from arguments\n"],["create_ssl_params","Net::POP3","classes/Net/POP3.html#method-c-create_ssl_params","(verify_or_params = {}, certs = nil)","<p>Constructs proper parameters from arguments\n"],["create_subnode","IRB::SLex::Node","classes/IRB/SLex/Node.html#method-i-create_subnode","(chrs, preproc = nil, postproc = nil)",""],["create_table","MultiTkIp","classes/MultiTkIp.html#method-c-create_table","()",""],["create_table","MultiTkIp","classes/MultiTkIp.html#method-c-create_table","()",""],["create_table","MultiTkIp","classes/MultiTkIp.html#method-c-create_table","()",""],["create_table","MultiTkIp","classes/MultiTkIp.html#method-c-create_table","()",""],["create_temp_function","DL::Importer","classes/DL/Importer.html#method-i-create_temp_function","(name, ctype, argtype, call_type = nil)",""],["create_type","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-c-create_type","(chart, type, keys={})",""],["create_value","DL::Importer","classes/DL/Importer.html#method-i-create_value","(ty, val=nil)",""],["create_win32ole_makefile","Object","classes/Object.html#method-i-create_win32ole_makefile","()",""],["created?","Win32::Registry","classes/Win32/Registry.html#method-i-created-3F","()","<p>Returns if key is created ((<strong>newly</strong>)). (see Registry.create)\n– basically you call create then when you …\n"],["credentials_path","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-credentials_path","()","<p>Location of RubyGems.org credentials\n"],["critical=","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-critical-3D","(p1)",""],["critical?","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-critical-3F","()",""],["crl=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-crl-3D","(p1)",""],["crls","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-crls","()",""],["crls=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-crls-3D","(p1)",""],["crmode","Curses","classes/Curses.html#method-c-crmode","()","<p>Put the terminal into normal mode (out of cbreak mode).\n<p>See Curses.cbreak for more detail.\n"],["cross_reference","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-cross_reference","(name, text = nil)","<p>Creates a link to the reference <code>name</code> if the name exists.  If\n<code>text</code> is given it is used as the link text, …\n"],["crosshair","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-c-crosshair","(w, keys={})",""],["crosshair_cget","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-crosshair_cget","(slot)",""],["crosshair_configinfo","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-crosshair_configinfo","(slot = nil)",""],["crosshair_configure","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-crosshair_configure","(*args)",""],["crosshair_current_configinfo","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-crosshair_current_configinfo","(slot = nil)",""],["crosshair_off","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-crosshair_off","()",""],["crosshair_on","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-crosshair_on","(keys={})",""],["crosshair_track_off","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-crosshair_track_off","()",""],["crosshair_track_on","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-crosshair_track_on","(&b)",""],["crosshairs","Tk::BLT","classes/Tk/BLT.html#method-c-crosshairs","(graph)",""],["crosshairs","Tk::BLT::GraphCommand","classes/Tk/BLT/GraphCommand.html#method-i-crosshairs","()",""],["crosshairs_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-crosshairs_cget","(option)",""],["crosshairs_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-crosshairs_cget_strict","(option)",""],["crosshairs_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-crosshairs_cget_tkstring","(option)",""],["crosshairs_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-crosshairs_configinfo","(slot=nil)",""],["crosshairs_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-crosshairs_configure","(slot, value=None)",""],["crosshairs_off","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-crosshairs_off","()",""],["crosshairs_on","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-crosshairs_on","()",""],["crosshairs_toggle","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-crosshairs_toggle","()",""],["crypt","String","classes/String.html#method-i-crypt","(p1)","<p>Applies a one-way cryptographic hash to <em>str</em> by invoking the\nstandard library function <code>crypt</code>. The argument …\n"],["crypt_by_password","Object","classes/Object.html#method-i-crypt_by_password","(alg, pass, salt, text)",""],["ctime","Date","classes/Date.html#method-i-ctime","()","<p>Returns a string in asctime(3) format (but without “n0” at the end).  This\nmethod is equivalent …\n"],["ctime","File","classes/File.html#method-c-ctime","(p1)","<p>Returns the change time for the named file (the time at which directory\ninformation about the file was …\n"],["ctime","File","classes/File.html#method-i-ctime","()","<p>Returns the change time for <em>file</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","File::Stat","classes/File/Stat.html#method-i-ctime","()","<p>Returns the change time for <em>stat</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","Pathname","classes/Pathname.html#method-i-ctime","()","<p>See <code>File.ctime</code>.  Returns last (directory entry, not file)\nchange time.\n"],["ctime","Time","classes/Time.html#method-i-ctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre><code>Time.now.asctime   #=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;\n</code></pre>\n"],["ctlmethods","Iconv","classes/Iconv.html#method-c-ctlmethods","()","<p>Returns available iconvctl() method list.\n"],["ctrl_cmd","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-ctrl_cmd","(p1, p2 = v2)",""],["ctype","DL::CFunc","classes/DL/CFunc.html#method-i-ctype","()","<p>Get the C function return value type.  See DL for a list of constants\ncorresponding to this method&#39;s …\n"],["ctype=","DL::CFunc","classes/DL/CFunc.html#method-i-ctype-3D","(p1)","<p>Set the C function return value type to <code>type</code>.\n"],["current","Fiber","classes/Fiber.html#method-c-current","()","<p>Returns the current fiber. You need to <code>require &#39;fiber&#39;</code>\nbefore using this method. If you are not …\n"],["current","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-current","()","<p>Active RDoc::RDoc instance\n"],["current","Thread","classes/Thread.html#method-c-current","()","<p>Returns the currently executing thread.\n\n<pre><code>Thread.current   #=&gt; #&lt;Thread:0x401bdf4c run&gt;\n</code></pre>\n"],["current","Tk::Busy","classes/Tk/Busy.html#method-i-current","(pat=None)",""],["current","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-current","()",""],["current","Tk::Tile::TCombobox","classes/Tk/Tile/TCombobox.html#method-i-current","()",""],["current","Tk::Tile::TCombobox","classes/Tk/Tile/TCombobox.html#method-i-current","()",""],["current","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-i-current","()",""],["current","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-i-current","()",""],["current=","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-current-3D","(rdoc)","<p>Sets the active RDoc::RDoc instance\n"],["current=","Tk::Tile::TCombobox","classes/Tk/Tile/TCombobox.html#method-i-current-3D","(idx)",""],["current=","Tk::Tile::TCombobox","classes/Tk/Tile/TCombobox.html#method-i-current-3D","(idx)",""],["current=","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-i-current-3D","(idx)",""],["current=","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-i-current-3D","(idx)",""],["current_axis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_axis_configinfo","(id, slot=nil)",""],["current_bar_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_bar_configinfo","(id, slot=nil)",""],["current_button_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-current_button_configinfo","(slot=nil)",""],["current_column_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-current_column_configinfo","(name, slot=nil)",""],["current_column_configinfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-current_column_configinfo","(tagOrId, slot=nil)",""],["current_column_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_column_configinfo","(tagOrId, slot=nil)",""],["current_column_dragconfiginfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_column_dragconfiginfo","(slot=nil)",""],["current_columnconfiginfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-current_columnconfiginfo","(tagOrId, slot=nil)",""],["current_configinfo","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-current_configinfo","(win, slot=nil)",""],["current_configinfo","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-current_configinfo","(container, *args)",""],["current_configinfo","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-current_configinfo","(*args)",""],["current_configinfo","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-i-current_configinfo","(master, slot=nil)",""],["current_configinfo","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-i-current_configinfo","(w, slot = nil)",""],["current_configinfo","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","TkFont","classes/TkFont.html#method-i-current_configinfo","(slot=nil)",""],["current_configinfo","TkFont","classes/TkFont.html#method-c-current_configinfo","(fnt, slot=nil)",""],["current_configinfo","TkFont","classes/TkFont.html#method-c-current_configinfo","(fnt, slot=nil)",""],["current_configinfo","TkFont","classes/TkFont.html#method-i-current_configinfo","(slot=nil)",""],["current_configinfo","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-current_configinfo","(option=nil)",""],["current_configinfo","TkPlace","classes/TkPlace.html#method-c-current_configinfo","(win, slot = nil)",""],["current_configinfo","TkPlace","classes/TkPlace.html#method-c-current_configinfo","(win, slot = nil)",""],["current_configinfo","TkTextImage","classes/TkTextImage.html#method-i-current_configinfo","(slot = nil)",""],["current_configinfo","TkTextImage","classes/TkTextImage.html#method-i-current_configinfo","(slot = nil)",""],["current_configinfo","TkTextTag","classes/TkTextTag.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","TkTextTag","classes/TkTextTag.html#method-i-current_configinfo","(key=nil)",""],["current_configinfo","TkTextWindow","classes/TkTextWindow.html#method-i-current_configinfo","(slot = nil)",""],["current_configinfo","TkTextWindow","classes/TkTextWindow.html#method-i-current_configinfo","(slot = nil)",""],["current_configinfo","TkXIM","classes/TkXIM.html#method-c-current_configinfo","(win, slot=nil)",""],["current_configinfo","TkcTagAccess","classes/TkcTagAccess.html#method-i-current_configinfo","(key=nil)",""],["current_crosshairs_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_crosshairs_configinfo","(slot=nil)",""],["current_debug_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_debug_configinfo","(slot=nil)",""],["current_dragimage_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_dragimage_configinfo","(slot=nil)",""],["current_element_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_element_configinfo","(id, slot=nil)",""],["current_element_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_element_configinfo","(tagOrId, slot=nil)",""],["current_entry_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-current_entry_configinfo","(slot=nil)",""],["current_entryconfiginfo","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-current_entryconfiginfo","(index, key=nil)",""],["current_entryconfiginfo","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-current_entryconfiginfo","(index, key=nil)",""],["current_gridline_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_gridline_configinfo","(slot=nil)",""],["current_group","PrettyPrint","classes/PrettyPrint.html#method-i-current_group","()","<p>Returns the group most recently added to the stack.\n"],["current_heading_configinfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-current_heading_configinfo","(tagOrId, slot=nil)",""],["current_headingconfiginfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-current_headingconfiginfo","(tagOrId, slot=nil)",""],["current_image_configinfo","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-current_image_configinfo","(index, slot = nil)",""],["current_item_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_item_configinfo","(tagOrId, slot=nil)",""],["current_item_element_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_item_element_configinfo","(item, column, elem, slot=nil)",""],["current_itemconfiginfo","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-current_itemconfiginfo","(container, *args)",""],["current_itemconfiginfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-current_itemconfiginfo","(tagOrId, slot = nil)",""],["current_legend_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_legend_configinfo","(slot=nil)",""],["current_line","REXML::IOSource","classes/REXML/IOSource.html#method-i-current_line","()","<p>@return the current line in the source\n"],["current_line","REXML::Source","classes/REXML/Source.html#method-i-current_line","()","<p>@return the current line in the source\n"],["current_line","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-current_line","()",""],["current_line_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_line_configinfo","(id, slot=nil)",""],["current_marker_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_marker_configinfo","(id, slot=nil)",""],["current_marquee_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_marquee_configinfo","(slot=nil)",""],["current_menuconfiginfo","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-current_menuconfiginfo","(key=nil)",""],["current_menuconfiginfo","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-current_menuconfiginfo","(key=nil)",""],["current_notify_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_notify_configinfo","(tagOrId, slot=nil)",""],["current_pane_configinfo","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-current_pane_configinfo","(win, key=nil)",""],["current_pane_configinfo","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-current_pane_configinfo","(win, key=nil)",""],["current_pane_configinfo","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-current_pane_configinfo","(win, key=nil)",""],["current_paneconfiginfo","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-current_paneconfiginfo","(win, key=nil)",""],["current_paneconfiginfo","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-current_paneconfiginfo","(win, key=nil)",""],["current_paneconfiginfo","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-current_paneconfiginfo","(win, key=nil)",""],["current_pen_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_pen_configinfo","(id, slot=nil)",""],["current_postscript_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_postscript_configinfo","(slot=nil)",""],["current_scope","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-current_scope","()","<p>Return the list of scope names currently active in the task manager.\n"],["current_section","RDoc::Context","classes/RDoc/Context.html#method-i-current_section","()","<p>The current documentation section that new items will be added to.  If\ntemporary_section is available …\n"],["current_server","DRb","classes/DRb.html#method-c-current_server","()","<p>Get the &#39;current&#39; server.\n<p>In the context of execution taking place within the main thread of a …\n"],["current_sort_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-current_sort_configinfo","(slot=nil)",""],["current_source_configinfo","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-i-current_source_configinfo","(win, slot=nil)",""],["current_status","TkTimer","classes/TkTimer.html#method-i-current_status","()",""],["current_status","TkTimer","classes/TkTimer.html#method-i-current_status","()",""],["current_style_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-current_style_configinfo","(tagOrId, slot=nil)",""],["current_tag_configinfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-current_tag_configinfo","(tagOrId, slot=nil)",""],["current_tag_configinfo","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-current_tag_configinfo","(tagOrId, slot=nil)",""],["current_tag_configinfo","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-current_tag_configinfo","(tagOrId, slot=nil)",""],["current_tagconfiginfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-current_tagconfiginfo","(tagOrId, slot=nil)",""],["current_text_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-current_text_configinfo","(slot=nil)",""],["current_token_configinfo","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-current_token_configinfo","(win, slot=nil)",""],["current_token_windowconfiginfo","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-current_token_windowconfiginfo","(win, slot=nil)",""],["current_window_configinfo","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-current_window_configinfo","(tagOrId, slot=nil)",""],["current_window_configinfo","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-current_window_configinfo","(tagOrId, slot=nil)",""],["current_x2axis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_x2axis_configinfo","(slot=nil)",""],["current_xaxis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_xaxis_configinfo","(slot=nil)",""],["current_y2axis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_y2axis_configinfo","(slot=nil)",""],["current_yaxis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-current_yaxis_configinfo","(slot=nil)",""],["currentpos","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-currentpos","(pos)",""],["curry","Proc","classes/Proc.html#method-i-curry","(p1 = v1)","<p>Returns a curried proc. If the optional <em>arity</em> argument is given,\nit determines the number of arguments. …\n"],["curs_set","Curses","classes/Curses.html#method-c-curs_set","(p1)","<p>Sets Cursor Visibility. 0: invisible 1: visible 2: very visible\n"],["curselection","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-curselection","()",""],["curselection","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-curselection","()",""],["curselection","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-curselection","()","<p>based on Tk::Listbox ( and TkTextWin )\n"],["curselection","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-curselection","()","<p>based on Tk::Listbox ( and TkTextWin )\n"],["curselection","Tk::Listbox","classes/Tk/Listbox.html#method-i-curselection","()",""],["curselection","Tk::TkTable","classes/Tk/TkTable.html#method-i-curselection","()",""],["curselection=","Tk::TkTable","classes/Tk/TkTable.html#method-i-curselection-3D","(val)",""],["cursor","Tk::Entry","classes/Tk/Entry.html#method-i-cursor","()",""],["cursor=","Tk::Entry","classes/Tk/Entry.html#method-i-cursor-3D","(index)",""],["cursor=","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-cursor-3D","(index)",""],["cursor=","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-cursor-3D","(index)",""],["cursor=","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-cursor-3D","(index)",""],["cursor_display","Tk","classes/Tk.html#method-c-cursor_display","(parent=None)",""],["cursor_display","Tk::Tcllib::Cursor","classes/Tk/Tcllib/Cursor.html#method-c-cursor_display","(win=None)",""],["cursor_propagate","Tk::Tcllib::Cursor","classes/Tk/Tcllib/Cursor.html#method-c-cursor_propagate","(win, cursor)",""],["cursor_propagate","TkWindow","classes/TkWindow.html#method-i-cursor_propagate","(cursor)",""],["cursor_restore","Tk::Tcllib::Cursor","classes/Tk/Tcllib/Cursor.html#method-c-cursor_restore","(win, cursor = None)",""],["cursor_restore","TkWindow","classes/TkWindow.html#method-i-cursor_restore","(cursor = None)",""],["cursor_window","Object","classes/Object.html#method-i-cursor_window","(top = nil)",""],["curvalue","Tk::TkTable","classes/Tk/TkTable.html#method-i-curvalue","()",""],["curvalue=","Tk::TkTable","classes/Tk/TkTable.html#method-i-curvalue-3D","(val)",""],["curve_name","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-curve_name","()","<p>See the OpenSSL documentation for EC_GROUP_get_curve_name()\n"],["curx","Curses::Window","classes/Curses/Window.html#method-i-curx","()","<p>A getter for the current column (X coord) of the window\n"],["cury","Curses::Window","classes/Curses/Window.html#method-i-cury","()","<p>A getter for the current line (Y coord) of the window\n"],["cut","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-cut","()",""],["cvs_url","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-cvs_url","(url, full_path)","<p>Build a webcvs URL starting for the given <code>url</code> with\n<code>full_path</code> appended as the destination path.  If\n<code>url</code> …\n"],["cvs_url","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-cvs_url","()","<p>Returns a URL for this source file on some web repository.  Use the -W\ncommand line option to set.\n"],["cwday","Date","classes/Date.html#method-i-cwday","()","<p>Returns the day of calendar week (1-7, Monday is 1).\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).cwday          #=&gt; ...\n</code></pre>\n"],["cweek","Date","classes/Date.html#method-i-cweek","()","<p>Returns the calendar week number (1-53).\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).cweek          #=&gt; 5\n</code></pre>\n"],["cwyear","Date","classes/Date.html#method-i-cwyear","()","<p>Returns the calendar week based year.\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).cwyear         #=&gt; 2001\nDate.new(2000,1,1).cwyear ...\n</code></pre>\n"],["cycle","Array","classes/Array.html#method-i-cycle","(p1 = v1)","<p>Calls <em>block</em> for each element repeatedly <em>n</em> times or\nforever if none or <code>nil</code> is given.  If a non-positive …\n"],["cycle","Enumerable","classes/Enumerable.html#method-i-cycle","(p1 = v1)","<p>Calls <em>block</em> for each element of <em>enum</em> repeatedly\n<em>n</em> times or forever if none or <code>nil</code> is given.  If a\nnon-positive …\n"],["d","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-d","()",""],["daemon","Process","classes/Process.html#method-c-daemon","(p1 = v1, p2 = v2)","<p>Detach the process from controlling terminal and run in the background as\nsystem daemon.  Unless the …\n"],["darken","TkPalette","classes/TkPalette.html#method-c-darken","(color, percent)",""],["data","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-data","()","<p>BSTR data value of the node\n"],["data","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-data","()","<p>BSTR data value of the node\n"],["data","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-data","()","<p>BSTR data value of the node\n"],["data","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-data","()","<p>BSTR data the data\n"],["data","IXMLDOMText","classes/IXMLDOMText.html#method-i-data","()","<p>BSTR data value of the node\n"],["data","MyElem","classes/MyElem.html#method-i-data","()",""],["data","Net::SMTP","classes/Net/SMTP.html#method-i-data","(msgstr = nil)","<p>This method sends a message. If <code>msgstr</code> is given, sends it as a\nmessage. If block is given, yield a message …\n"],["data","Net::SMTP","classes/Net/SMTP.html#method-i-data","(msgstr = nil)","<p>This method sends a message. If <code>msgstr</code> is given, sends it as a\nmessage. If block is given, yield a message …\n"],["data","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-data","()",""],["data","Resolv::DNS::Resource::TXT","classes/Resolv/DNS/Resource/TXT.html#method-i-data","()","<p>Returns the concatenated string from <code>strings</code>.\n"],["data","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-data","()","<p>returns the cmsg data as a string.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).data\n#=&gt; &quot;&quot;\n</code></pre>\n"],["data","Socket::Option","classes/Socket/Option.html#method-i-data","()","<p>returns the socket option data as a string.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).data ...</code></pre>\n"],["data","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-c-data","(name)",""],["data","TkPhotoImage","classes/TkPhotoImage.html#method-i-data","(keys={})","<p>Returns image data in the form of a string. The following options may be\nspecified:\n<p>:background color …\n"],["data","TkPhotoImage","classes/TkPhotoImage.html#method-i-data","(keys={})","<p>Returns image data in the form of a string. The following options may be\nspecified:\n<p>:background color …\n"],["data=","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-data-3D","(arg0)","<p>VOID data value of the node\n"],["data=","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-data-3D","(arg0)","<p>VOID data value of the node\n"],["data=","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-data-3D","(arg0)","<p>VOID data value of the node\n"],["data=","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-data-3D","(arg0)","<p>VOID data the data\n"],["data=","IXMLDOMText","classes/IXMLDOMText.html#method-i-data-3D","(arg0)","<p>VOID data value of the node\n"],["data=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-data-3D","(p1)",""],["dataType","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXMLDOMText","classes/IXMLDOMText.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","IXTLRuntime","classes/IXTLRuntime.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-dataType","()","<p>VARIANT dataType the data type of the node\n"],["dataType=","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXMLDOMText","classes/IXMLDOMText.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","IXTLRuntime","classes/IXTLRuntime.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["dataType=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-dataType-3D","(arg0)","<p>VOID dataType the data type of the node\n"],["data_type","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-data_type","()","<p>Guesses the type of the data which have been inputed into the stream. The\nreturned value is either <code>BINARY</code> …\n"],["database_class","Tk::Frame","classes/Tk/Frame.html#method-c-database_class","()",""],["database_class","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-database_class","()",""],["database_class","Tk::Toplevel","classes/Tk/Toplevel.html#method-c-database_class","()",""],["database_class","TkComposite","classes/TkComposite.html#method-i-database_class","()",""],["database_classname","Tk::Frame","classes/Tk/Frame.html#method-i-database_classname","()","<p>def create_self(keys)\n\n<pre><code>if keys and keys != None\n  tk_call_without_enc(&#39;frame&#39;, @path, *hash_kv(keys))\nelse ...</code></pre>\n"],["database_classname","Tk::Frame","classes/Tk/Frame.html#method-c-database_classname","()",""],["database_classname","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-database_classname","()",""],["database_classname","Tk::Toplevel","classes/Tk/Toplevel.html#method-c-database_classname","()",""],["database_classname","TkComposite","classes/TkComposite.html#method-i-database_classname","()",""],["dataconfig","Tk::Tcllib::Plotchart::PlotSeries","classes/Tk/Tcllib/Plotchart/PlotSeries.html#method-i-dataconfig","(key, value=None)",""],["dataconfig","Tk::Tcllib::Plotchart::PolarPlot","classes/Tk/Tcllib/Plotchart/PolarPlot.html#method-i-dataconfig","(series, key, value=None)",""],["dataconfig","Tk::Tcllib::Plotchart::PolarPlot","classes/Tk/Tcllib/Plotchart/PolarPlot.html#method-i-dataconfig","(series, key, value=None)",""],["dataconfig","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-dataconfig","(series, key, value=None)",""],["datadir","Gem","classes/Gem.html#method-c-datadir","(gem_name)","<p>The path the the data directory specified by the gem name.  If the package\nis not available as a gem, …\n"],["date","Gem::Specification","classes/Gem/Specification.html#method-i-date","()","<p>The date this gem was created. Lazily defaults to TODAY.\n"],["date","Rake::FtpFile","classes/Rake/FtpFile.html#method-c-date","()",""],["date=","Gem::Specification","classes/Gem/Specification.html#method-i-date-3D","(date)","<p>The date this gem was created\n<p>Do not set this, it is set automatically when the gem is packaged.\n"],["dateTime","XMLRPC::Convert","classes/XMLRPC/Convert.html#method-c-dateTime","(str)",""],["datetime_format","Logger","classes/Logger.html#method-i-datetime_format","()","<p>Returns the date format being used.  See #datetime_format=\n"],["datetime_format=","Logger","classes/Logger.html#method-i-datetime_format-3D","(datetime_format)","<p>Set date-time format.\n<p><code>datetime_format</code> &mdash; A string suitable for passing to <code>strftime</code>.\n\n"],["day","Date","classes/Date.html#method-i-day","()","<p>Returns the day of the month (1-31).\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).mday           #=&gt; 3\n</code></pre>\n"],["day","Time","classes/Time.html#method-i-day","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:03 -0600\nt.day      ...\n</code></pre>\n"],["day=","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-day-3D","(value)",""],["day_fraction","Date","classes/Date.html#method-i-day_fraction","()","<p>Returns the fractional part of the day.\n<p>For example:\n\n<pre><code>DateTime.new(2001,2,3,12).day_fraction    #=&gt; (1/2)\n</code></pre>\n"],["dchars","Tk::Canvas","classes/Tk/Canvas.html#method-i-dchars","(tag, first, last=None)",""],["dchars","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-dchars","(tag, first, last=None)",""],["dchars","TkcTagAccess","classes/TkcTagAccess.html#method-i-dchars","(first, last=None)",""],["dclone","Array","classes/Array.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object+ types\n"],["dclone","Fixnum","classes/Fixnum.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Float","classes/Float.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Object","classes/Object.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Symbol","classes/Symbol.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["deactivate","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-deactivate","()",""],["deactivate","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-deactivate","(*args)",""],["deactivate","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-i-deactivate","()",""],["deactivate","Tk::Iwidgets::Shell","classes/Tk/Iwidgets/Shell.html#method-i-deactivate","(val=None)",""],["deafen","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-deafen","( listener=nil, &blok )",""],["debug","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-debug","(statement)","<p>Display a debug message on the same location as error messages.\n"],["debug","Logger","classes/Logger.html#method-i-debug","(progname = nil, &block)","<p>Log a <code>DEBUG</code> message.\n<p>See #info for more information.\n"],["debug","Net::IMAP","classes/Net/IMAP.html#method-c-debug","()","<p>Returns the debug mode.\n"],["debug","OpenSSL","classes/OpenSSL.html#method-c-debug","()",""],["debug","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-debug","()",""],["debug","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-debug","()",""],["debug","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-debug","(msg)","<p>Shortcut for logging a DEBUG message\n"],["debug=","Net::IMAP","classes/Net/IMAP.html#method-c-debug-3D","(val)","<p>Sets the debug mode.\n"],["debug=","OpenSSL","classes/OpenSSL.html#method-c-debug-3D","(p1)","<p>Turns on or off CRYPTO_MEM_CHECK. Also shows some debugging message on\nstderr.\n"],["debug=","Shell","classes/Shell.html#method-i-debug-3D","(val)",""],["debug=","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-debug-3D","(boolean)",""],["debug=","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-debug-3D","(boolean)",""],["debug?","IRB::Context","classes/IRB/Context.html#method-i-debug-3F","()",""],["debug?","Logger","classes/Logger.html#method-i-debug-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>DEBUG</code> messages.\n"],["debug?","RubyLex","classes/RubyLex.html#method-i-debug-3F","()",""],["debug?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-debug-3F","()","<p>Will the logger output DEBUG messages?\n"],["debug_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-debug_cget","(option)",""],["debug_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-debug_cget_strict","(option)",""],["debug_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-debug_cget_tkstring","(option)",""],["debug_command","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-debug_command","(file, line, id, binding)",""],["debug_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-debug_configinfo","(slot=nil)",""],["debug_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-debug_configure","(slot, value=None)",""],["debug_eval","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-debug_eval","(str, binding)",""],["debug_funcname","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-debug_funcname","(id)",""],["debug_level=","IRB::Context","classes/IRB/Context.html#method-i-debug_level-3D","(value)",""],["debug_method_info","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-debug_method_info","(input, binding)",""],["debug_msg","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-debug_msg","(*msg)","<p>Output progress information if debugging is enabled\n"],["debug_output=","Net::SMTP","classes/Net/SMTP.html#method-i-debug_output-3D","(arg)","<p>WARNING: This method causes serious security holes. Use this method for\nonly debugging.\n<p>Set an output …\n"],["debug_output=","Net::SMTP","classes/Net/SMTP.html#method-i-debug_output-3D","(arg)","<p>WARNING: This method causes serious security holes. Use this method for\nonly debugging.\n<p>Set an output …\n"],["debug_print_help","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-debug_print_help","()",""],["debug_silent_eval","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-debug_silent_eval","(str, binding)",""],["debug_thread_info","DEBUGGER__","classes/DEBUGGER__.html#method-i-debug_thread_info","(input, binding)",""],["debug_variable_info","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-debug_variable_info","(input, binding)",""],["declare","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-declare","(klass, optlist)",""],["decode","OpenSSL::ASN1","classes/OpenSSL/ASN1.html#method-c-decode","(p1)","<p>Decodes a BER- or DER-encoded value and creates an ASN1Data instance.\n<code>der</code> may be a <code>String</code> or any object …\n"],["decode","REXML::Encoding","classes/REXML/Encoding.html#method-i-decode","(string)",""],["decode","URI::Escape","classes/URI/Escape.html#method-i-decode","(*arg)",""],["decode","XMLRPC::Base64","classes/XMLRPC/Base64.html#method-c-decode","(str)",""],["decode64","Base64","classes/Base64.html#method-i-decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with RFC 2045. Characters outside the …\n"],["decode_all","OpenSSL::ASN1","classes/OpenSSL/ASN1.html#method-c-decode_all","(p1)","<p>Similar to <code>decode</code> with the difference that <code>decode</code>\nexpects one distinct value represented in <code>der</code>.\n<code>decode_all</code> …\n"],["decode_utf7","Net::IMAP","classes/Net/IMAP.html#method-c-decode_utf7","(s)","<p>Decode a string from modified UTF-7 format to UTF-8.\n<p>UTF-7 is a 7-bit encoding of Unicode [UTF7].  IMAP …\n"],["decode_www_form","URI","classes/URI.html#method-c-decode_www_form","(str, enc=Encoding::UTF_8)","<p>Decode URL-encoded form data from given <code>str</code>.\n<p>This decodes application/x-www-form-urlencoded data and returns …\n"],["decode_www_form_component","URI","classes/URI.html#method-c-decode_www_form_component","(str, enc=Encoding::UTF_8)","<p>Decode given <code>str</code> of URL-encoded form data.\n<p>This decods + to SP.\n<p>See URI.encode_www_form_component, URI.decode_www_form …\n"],["decoded","XMLRPC::Base64","classes/XMLRPC/Base64.html#method-i-decoded","()",""],["decrypt","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-decrypt","(*args)","<p>Initializes the Cipher for decryption.\n<p>Make sure to call Cipher#encrypt or Cipher#decrypt before using …\n"],["decrypt","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-decrypt","(p1, p2, p3 = v3)",""],["deep_clone","REXML::Parent","classes/REXML/Parent.html#method-i-deep_clone","()","<p>Deeply clones this object.  This creates a complete duplicate of this\nParent, including all descendants. …\n"],["def_alias","MultiTkIp","classes/MultiTkIp.html#method-i-def_alias","(slave, new_cmd, org_cmd, *args)",""],["def_alias","MultiTkIp","classes/MultiTkIp.html#method-c-def_alias","(slave, new_cmd, org_cmd, *args)",""],["def_alias","MultiTkIp","classes/MultiTkIp.html#method-i-def_alias","(slave, new_cmd, org_cmd, *args)",""],["def_alias","MultiTkIp","classes/MultiTkIp.html#method-c-def_alias","(slave, new_cmd, org_cmd, *args)",""],["def_alias","MultiTkIp","classes/MultiTkIp.html#method-c-def_alias","(slave, new_cmd, org_cmd, *args)",""],["def_alias","MultiTkIp","classes/MultiTkIp.html#method-c-def_alias","(slave, new_cmd, org_cmd, *args)",""],["def_alias","MultiTkIp","classes/MultiTkIp.html#method-i-def_alias","(slave, new_cmd, org_cmd, *args)",""],["def_alias","MultiTkIp","classes/MultiTkIp.html#method-i-def_alias","(slave, new_cmd, org_cmd, *args)",""],["def_array_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-def_array_element","(name, plural=nil, klass_name=nil)",""],["def_atom_persons","RSS::Maker::AtomPersons","classes/RSS/Maker/AtomPersons.html#method-i-def_atom_persons","(klass, name, maker_name, plural=nil)",""],["def_atom_text_construct","RSS::Maker::AtomTextConstruct","classes/RSS/Maker/AtomTextConstruct.html#method-i-def_atom_text_construct","(klass, name, maker_name, klass_name=nil, atom_klass_name=nil)",""],["def_builtin_commands","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-def_builtin_commands","(delegation_class, command_specs)","<p>CommandProcessor.def_builtin_commands(delegation_class, command_specs)\n\n<pre><code>  delegation_class: Class or Module ...</code></pre>\n"],["def_class","ERB","classes/ERB.html#method-i-def_class","(superklass=Object, methodname='result')","<p>Define unnamed class which has <em>methodname</em> as instance method, and\nreturn it.\n<p>example:\n\n<pre><code>class MyClass_\n  ...\n</code></pre>\n"],["def_class_accessor","RSS::ITunesModelUtils","classes/RSS/ITunesModelUtils.html#method-i-def_class_accessor","(klass, name, type, *args)",""],["def_class_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_class_accessor","(klass, name, type, *args)",""],["def_classed_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-def_classed_element","(name, class_name=nil, attribute_name=nil)",""],["def_classed_element_without_accessor","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-def_classed_element_without_accessor","(name, class_name=nil)",""],["def_classed_elements","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-def_classed_elements","(name, attribute, plural_class_name=nil, plural_name=nil, new_name=nil)",""],["def_convert","RSS::Converter","classes/RSS/Converter.html#method-i-def_convert","(depth=0)",""],["def_corresponded_attr_reader","RSS::Element","classes/RSS/Element.html#method-i-def_corresponded_attr_reader","(name, type=nil)",""],["def_corresponded_attr_writer","RSS::Element","classes/RSS/Element.html#method-i-def_corresponded_attr_writer","(name, type=nil, disp_name=nil)",""],["def_csv_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_csv_accessor","(klass, full_name)",""],["def_csv_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-def_csv_element","(name, type=nil)",""],["def_delegator","Forwardable","classes/Forwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegator","SingleForwardable","classes/SingleForwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegators","Forwardable","classes/Forwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_delegators","SingleForwardable","classes/SingleForwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_e2message","E2MM","classes/E2MM.html#method-c-def_e2message","(k, c, m)","<p>E2MM.def_e2message(k, e, m)\n\n<pre><code>    k:  class to define exception under.\n    e:  exception\n    m:  message_form ...\n</code></pre>\n"],["def_e2message","E2MM","classes/E2MM.html#method-c-def_e2message","(k, c, m)","<p>E2MM.def_e2message(k, e, m)\n\n<pre><code>    k:  class to define exception under.\n    e:  exception\n    m:  message_form ...\n</code></pre>\n"],["def_e2message","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-def_e2message","(c, m)","<p>def_e2message(c, m)\n\n<pre><code>    c:  exception\n    m:  message_form\ndefine exception c with message m.</code></pre>\n"],["def_e2message","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-def_e2message","(c, m)","<p>def_e2message(c, m)\n\n<pre><code>    c:  exception\n    m:  message_form\ndefine exception c with message m.</code></pre>\n"],["def_element_class_accessor","RSS::ITunesModelUtils","classes/RSS/ITunesModelUtils.html#method-i-def_element_class_accessor","(klass, name, full_name, klass_name, recommended_attribute_name=nil)",""],["def_elements_class_accessor","RSS::ITunesModelUtils","classes/RSS/ITunesModelUtils.html#method-i-def_elements_class_accessor","(klass, name, full_name, klass_name, plural_name, recommended_attribute_name=nil)",""],["def_elements_class_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_elements_class_accessor","(klass, name, full_name, full_plural_name, klass_name, plural_klass_name, recommended_attribute_name=nil)",""],["def_else_enc","RSS::Converter","classes/RSS/Converter.html#method-i-def_else_enc","(to_enc, from_enc)",""],["def_erb_method","ERB::DefMethod","classes/ERB/DefMethod.html#method-c-def_erb_method","(methodname, erb_or_fname)","<p>define <em>methodname</em> as instance method of current module, using ERB\nobject or eRuby file\n"],["def_exception","E2MM","classes/E2MM.html#method-c-def_exception","(k, n, m, s = StandardError)","<p>E2MM.def_exception(k, n, m, s)\n\n<pre><code>    k:  class to define exception under.\n    n:  exception_name\n    m: ...\n</code></pre>\n"],["def_exception","E2MM","classes/E2MM.html#method-c-def_exception","(k, n, m, s = StandardError)","<p>E2MM.def_exception(k, n, m, s)\n\n<pre><code>    k:  class to define exception under.\n    n:  exception_name\n    m: ...\n</code></pre>\n"],["def_exception","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-def_exception","(n, m, s = StandardError)","<p>def_exception(n, m, s)\n\n<pre><code>    n:  exception_name\n    m:  message_form\n    s:  superclass(default: StandardError) ...</code></pre>\n"],["def_exception","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-def_exception","(n, m, s = StandardError)","<p>def_exception(n, m, s)\n\n<pre><code>    n:  exception_name\n    m:  message_form\n    s:  superclass(default: StandardError) ...</code></pre>\n"],["def_extend_command","IRB::ContextExtender","classes/IRB/ContextExtender.html#method-c-def_extend_command","(cmd_name, load_file, *aliases)",""],["def_extend_command","IRB::ContextExtender","classes/IRB/ContextExtender.html#method-c-def_extend_command","(cmd_name, load_file, *aliases)",""],["def_extend_command","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-def_extend_command","(cmd_name, cmd_class, load_file = nil, *aliases)","<p>aliases = [commands_alias, flag], …\n"],["def_extend_command","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-def_extend_command","(cmd_name, cmd_class, load_file = nil, *aliases)","<p>aliases = [commands_alias, flag], …\n"],["def_head_option","OptionParser","classes/OptionParser.html#method-i-def_head_option","(*opts, &block)",""],["def_iconv_convert","RSS::Converter","classes/RSS/Converter.html#method-i-def_iconv_convert","(to_enc, from_enc, depth=0)",""],["def_instance_delegator","Forwardable","classes/Forwardable.html#method-i-def_instance_delegator","(accessor, method, ali = method)","<p>Define <code>method</code> as delegator instance method with an optional\nalias name <code>ali</code>. Method calls to <code>ali</code> will …\n"],["def_instance_delegators","Forwardable","classes/Forwardable.html#method-i-def_instance_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for\nusing a different name.  …\n"],["def_intern","Object","classes/Object.html#method-i-def_intern","(func_name, pat, prefix_optional=nil)",""],["def_method","ERB","classes/ERB.html#method-i-def_method","(mod, methodname, fname='(ERB)')","<p>Define <em>methodname</em> as instance method of <em>mod</em> from compiled\nruby source.\n<p>example:\n\n<pre><code>filename = &#39;example.rhtml&#39; ...</code></pre>\n"],["def_module","ERB","classes/ERB.html#method-i-def_module","(methodname='erb')","<p>Create unnamed module, define <em>methodname</em> as instance method of it,\nand return it.\n<p>example:\n\n<pre><code>filename = &#39;example.rhtml&#39; ...</code></pre>\n"],["def_name_to_int","Object","classes/Object.html#method-i-def_name_to_int","(funcname, pat, prefix_optional, guard=nil)",""],["def_notifier","IRB::Notifier","classes/IRB/Notifier.html#method-c-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)",""],["def_notifier","IRB::Notifier::CompositeNotifier","classes/IRB/Notifier/CompositeNotifier.html#method-i-def_notifier","(level, prefix = \"\")",""],["def_option","OptionParser","classes/OptionParser.html#method-i-def_option","(*opts, &block)",""],["def_options","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-c-def_options","(opt)",""],["def_options","RubyVM::VPATH","classes/RubyVM/VPATH.html#method-c-def_options","(opt)",""],["def_other_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-def_other_element","(name)",""],["def_other_element_without_accessor","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-def_other_element_without_accessor","(name)",""],["def_post_proc","IRB::MethodExtender","classes/IRB/MethodExtender.html#method-i-def_post_proc","(base_method, extend_method)",""],["def_pre_proc","IRB::MethodExtender","classes/IRB/MethodExtender.html#method-i-def_pre_proc","(base_method, extend_method)",""],["def_prog_mode","Curses","classes/Curses.html#method-c-def_prog_mode","()","<p>Save the current terminal modes as the “program” state for use by the\nCurses.reset_prog_mode …\n"],["def_puzzleswitch_proc","Object","classes/Object.html#method-i-def_puzzleswitch_proc","(w, num)",""],["def_rule","IRB::SLex","classes/IRB/SLex.html#method-i-def_rule","(token, preproc = nil, postproc = nil, &block)",""],["def_rules","IRB::SLex","classes/IRB/SLex.html#method-i-def_rules","(*tokens, &block)",""],["def_same_enc","RSS::Converter","classes/RSS/Converter.html#method-i-def_same_enc","()",""],["def_single_delegator","SingleForwardable","classes/SingleForwardable.html#method-i-def_single_delegator","(accessor, method, ali = method)","<p>Defines a method <em>method</em> which delegates to <em>obj</em> (i.e. it\ncalls the method of the same name in <em>obj</em>).   …\n"],["def_single_delegators","SingleForwardable","classes/SingleForwardable.html#method-i-def_single_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for\nusing a different name.  …\n"],["def_system_command","Shell","classes/Shell.html#method-c-def_system_command","(command, path = command)","<p>command definitions\n"],["def_system_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-def_system_command","(command, path = command)","<p>CommandProcessor.def_system_command(command, path)\n\n<pre><code>  command:  String\n  path:     String\ndefine &#39;command()&#39; ...</code></pre>\n"],["def_tail_option","OptionParser","classes/OptionParser.html#method-i-def_tail_option","(*opts, &block)",""],["def_to_euc_jp_from_iso_2022_jp","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_euc_jp_from_iso_2022_jp","()",""],["def_to_euc_jp_from_shift_jis","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_euc_jp_from_shift_jis","()",""],["def_to_euc_jp_from_utf_8","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_euc_jp_from_utf_8","()",""],["def_to_iso_2022_jp_from_euc_jp","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_iso_2022_jp_from_euc_jp","()",""],["def_to_iso_8859_1_from_utf_8","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_iso_8859_1_from_utf_8","()",""],["def_to_shift_jis_from_euc_jp","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_shift_jis_from_euc_jp","()",""],["def_to_shift_jis_from_utf_8","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_shift_jis_from_utf_8","()",""],["def_to_utf_8_from_euc_jp","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_utf_8_from_euc_jp","()",""],["def_to_utf_8_from_iso_8859_1","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_utf_8_from_iso_8859_1","()",""],["def_to_utf_8_from_shift_jis","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_utf_8_from_shift_jis","()",""],["def_token","RubyToken","classes/RubyToken.html#method-c-def_token","(token_n, super_token = Token, reading = nil, *opts)",""],["def_uconv_convert_if_can","RSS::Converter","classes/RSS/Converter.html#method-i-def_uconv_convert_if_can","(meth, to_enc, from_enc, nkf_arg)",""],["def_unknown_proc","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-def_unknown_proc","(cmd=Proc.new)",""],["def_unknown_proc","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-def_unknown_proc","(cmd=Proc.new)",""],["def_unknown_proc","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-def_unknown_proc","(cmd=Proc.new)",""],["def_unknown_proc","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-def_unknown_proc","(cmd=Proc.new)",""],["def_yes_clean_other_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_yes_clean_other_accessor","(klass, full_name)",""],["def_yes_other_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_yes_other_accessor","(klass, full_name)",""],["default","Gem::Requirement","classes/Gem/Requirement.html#method-c-default","()","<p>A default “version requirement” can surely <em>only</em> be &#39;&gt;=\n0&#39;.\n"],["default","Gem::Requirement","classes/Gem/Requirement.html#method-c-default","()","<p>A default “version requirement” can surely <em>only</em> be &#39;&gt;=\n0&#39;.\n"],["default","Hash","classes/Hash.html#method-i-default","(p1 = v1)","<p>Returns the default value, the value that would be returned by <em>hsh</em>\nif <em>key</em> did not exist in <em>hsh</em>. See also …\n"],["default","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-c-default","()","<p>Only use this if you do not want the XML declaration to be written; this\nobject is ignored by the XML …\n"],["default","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-default","(idx)",""],["default","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-default","(idx)",""],["default","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-default","(name)","<p>index method is not available, because it shows index of the entry field\n"],["default","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-default","()","<p>Returns default value. If the default value does not exist, this method\nreturns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["default=","Hash","classes/Hash.html#method-i-default-3D","(p1)","<p>Sets the default value, the value returned for a key that does not exist in\nthe hash. It is not possible …\n"],["defaultButton","Tk::Tile::KeyNav","classes/Tk/Tile/KeyNav.html#method-c-defaultButton","(w)",""],["default_acl","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_acl","(acl)","<p>Set the default value for the :acl option.\n<p>See #new().  The initial default value is nil.\n"],["default_argc_limit","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_argc_limit","(argc)","<p>Set the default value for the :argc_limit option.\n<p>See #new().  The initial default value is 256.\n"],["default_bindir","Gem","classes/Gem.html#method-c-default_bindir","()","<p>The default directory for binaries\n"],["default_console_size","IO","classes/IO.html#method-c-default_console_size","()",""],["default_dir","Gem","classes/Gem.html#method-c-default_dir","()","<p>Default home directory path to be used if an alternate value is not\nspecified in the environment\n"],["default_element_value_type","TkVariable","classes/TkVariable.html#method-i-default_element_value_type","(idxs)",""],["default_element_value_type","TkVariable","classes/TkVariable.html#method-i-default_element_value_type","(idxs)",""],["default_encoding","MultiTkIp","classes/MultiTkIp.html#method-i-default_encoding","()",""],["default_encoding","MultiTkIp","classes/MultiTkIp.html#method-i-default_encoding","()",""],["default_encoding","MultiTkIp","classes/MultiTkIp.html#method-i-default_encoding","()",""],["default_encoding","MultiTkIp","classes/MultiTkIp.html#method-i-default_encoding","()",""],["default_encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-default_encoding-3D","(enc)",""],["default_encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-default_encoding-3D","(enc)",""],["default_encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-default_encoding-3D","(enc)",""],["default_encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-default_encoding-3D","(enc)",""],["default_event_sources","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-default_event_sources","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["default_exec_format","Gem","classes/Gem.html#method-c-default_exec_format","()","<p>Deduce Ruby&#39;s –program-prefix and –program-suffix from its install name\n"],["default_executable","Gem::Specification","classes/Gem/Specification.html#method-i-default_executable","()","<p>The default executable for this gem.\n<p>Deprecated: The name of the gem is assumed to be the name of the …\n"],["default_external","Encoding","classes/Encoding.html#method-c-default_external","()","<p>Returns default external encoding.\n<p>The default external encoding is used by default for strings created …\n"],["default_external=","Encoding","classes/Encoding.html#method-c-default_external-3D","(p1)","<p>Sets default external encoding.  You should not set\nEncoding::default_external in ruby code as strings …\n"],["default_handler","Object","classes/Object.html#method-i-default_handler","(event, *args)",""],["default_id_conv","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_id_conv","(idconv)","<p>Set the default value for the :id_conv option.\n<p>See #new().  The initial default value is a DRbIdConv instance. …\n"],["default_internal","Encoding","classes/Encoding.html#method-c-default_internal","()","<p>Returns default internal encoding.  Strings will be transcoded to the\ndefault internal encoding in the …\n"],["default_internal=","Encoding","classes/Encoding.html#method-c-default_internal-3D","(p1)","<p>Sets default internal encoding or removes default internal encoding when\npassed nil.  You should not …\n"],["default_load_limit","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_load_limit","(sz)","<p>Set the default value for the :load_limit option.\n<p>See #new().  The initial default value is 25 MB.\n"],["default_master?","MultiTkIp","classes/MultiTkIp.html#method-c-default_master-3F","()",""],["default_master?","MultiTkIp","classes/MultiTkIp.html#method-c-default_master-3F","()",""],["default_master?","MultiTkIp","classes/MultiTkIp.html#method-c-default_master-3F","()",""],["default_master?","MultiTkIp","classes/MultiTkIp.html#method-c-default_master-3F","()",""],["default_merge_branch","Object","classes/Object.html#method-i-default_merge_branch","()",""],["default_ole_types","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-default_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["default_options","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-default_options","()","<p>Default options for ri\n"],["default_parser","RSS::Parser","classes/RSS/Parser.html#method-i-default_parser","()",""],["default_parser=","RSS::Parser","classes/RSS/Parser.html#method-i-default_parser-3D","(new_value)","<p>Set @@default_parser to new_value if it is one of the available parsers.\nElse raise NotValidXMLParser …\n"],["default_path","Gem","classes/Gem.html#method-c-default_path","()","<p>Default gem load path\n"],["default_pop3_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3_port","()","<p>The default port for POP3 connections, port 110\n"],["default_pop3_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3_port","()","<p>The default port for POP3 connections, port 110\n"],["default_pop3_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3_port","()","<p>The default port for POP3 connections, port 110\n"],["default_pop3_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3_port","()","<p>The default port for POP3 connections, port 110\n"],["default_pop3s_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3s_port","()","<p>The default port for POP3S connections, port 995\n"],["default_pop3s_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3s_port","()","<p>The default port for POP3S connections, port 995\n"],["default_pop3s_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3s_port","()","<p>The default port for POP3S connections, port 995\n"],["default_pop3s_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3s_port","()","<p>The default port for POP3S connections, port 995\n"],["default_port","Net::HTTP","classes/Net/HTTP.html#method-c-default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["default_port","Net::HTTP","classes/Net/HTTP.html#method-c-default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["default_port","Net::POP3","classes/Net/POP3.html#method-c-default_port","()","<p>returns the port for POP3\n"],["default_port","Net::POP3","classes/Net/POP3.html#method-c-default_port","()","<p>returns the port for POP3\n"],["default_port","Net::POP3","classes/Net/POP3.html#method-c-default_port","()","<p>returns the port for POP3\n"],["default_port","Net::POP3","classes/Net/POP3.html#method-c-default_port","()","<p>returns the port for POP3\n"],["default_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_port","()","<p>The default SMTP port number, 25.\n"],["default_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_port","()","<p>The default SMTP port number, 25.\n"],["default_port","URI::Generic","classes/URI/Generic.html#method-i-default_port","()","<p>Returns default port\n"],["default_port","URI::Generic","classes/URI/Generic.html#method-c-default_port","()","<p>Returns default port\n"],["default_proc","Hash","classes/Hash.html#method-i-default_proc","()","<p>If <code>Hash::new</code> was invoked with a block, return that block,\notherwise return <code>nil</code>.\n\n<pre><code>h = Hash.new {|h,k| h[k] ...\n</code></pre>\n"],["default_proc","TkVariable","classes/TkVariable.html#method-i-default_proc","(cmd = Proc.new)",""],["default_proc","TkVariable","classes/TkVariable.html#method-i-default_proc","(cmd = Proc.new)",""],["default_proc=","Hash","classes/Hash.html#method-i-default_proc-3D","(p1)","<p>Sets the default proc to be executed on each key lookup.\n\n<pre><code>h.default_proc = proc do |hash, key|\n  hash[key] ...\n</code></pre>\n"],["default_record_separator","Shell","classes/Shell.html#method-i-default_record_separator","()",""],["default_record_separator=","Shell","classes/Shell.html#method-i-default_record_separator-3D","(rs)",""],["default_rubygems_dirs","Gem","classes/Gem.html#method-c-default_rubygems_dirs","()","<p>Paths where RubyGems&#39; .rb files and bin files are installed\n"],["default_safe_level","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_safe_level","(level)",""],["default_sources","Gem","classes/Gem.html#method-c-default_sources","()","<p>An Array of the default sources that come with RubyGems\n"],["default_src_encoding","Object","classes/Object.html#method-i-default_src_encoding","()","<p>DO NOT WRITE ANY MAGIC COMMENT HERE.\n"],["default_ssl_context","Net::SMTP","classes/Net/SMTP.html#method-c-default_ssl_context","()",""],["default_ssl_context","Net::SMTP","classes/Net/SMTP.html#method-c-default_ssl_context","()",""],["default_ssl_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_ssl_port","()",""],["default_ssl_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_ssl_port","()",""],["default_submission_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_submission_port","()","<p>The default mail submission port number, 587.\n"],["default_submission_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_submission_port","()","<p>The default mail submission port number, 587.\n"],["default_system_path","Shell","classes/Shell.html#method-i-default_system_path","()",""],["default_system_path=","Shell","classes/Shell.html#method-i-default_system_path-3D","(path)",""],["default_system_source_cache_dir","Gem","classes/Gem.html#method-c-default_system_source_cache_dir","()","<p>The default system-wide source info cache directory\n"],["default_title=","RDoc::Options","classes/RDoc/Options.html#method-i-default_title-3D","(string)","<p>Set the title, but only if not already set. Used to set the title from a\nsource file, so that a title …\n"],["default_tls_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_tls_port","()","<p>The default SMTPS port number, 465.\n"],["default_tls_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_tls_port","()","<p>The default SMTPS port number, 465.\n"],["default_user_source_cache_dir","Gem","classes/Gem.html#method-c-default_user_source_cache_dir","()","<p>The default user-specific source info cache directory\n"],["default_value","Gem::Specification","classes/Gem/Specification.html#method-i-default_value","(name)","<p>The default value for specification attribute <code>name</code>\n"],["default_value","TkVariable","classes/TkVariable.html#method-i-default_value","(val=nil, &b)","<p>default_value is available only when the variable is an assoc array.\n"],["default_value","TkVariable","classes/TkVariable.html#method-i-default_value","(val=nil, &b)","<p>default_value is available only when the variable is an assoc array.\n"],["default_value=","TkVariable","classes/TkVariable.html#method-i-default_value-3D","(val)",""],["default_value=","TkVariable","classes/TkVariable.html#method-i-default_value-3D","(val)",""],["default_value_type","TkVariable","classes/TkVariable.html#method-i-default_value_type","()",""],["default_value_type","TkVariable","classes/TkVariable.html#method-i-default_value_type","()",""],["default_value_type=","TkVariable","classes/TkVariable.html#method-i-default_value_type-3D","(type)",""],["default_value_type=","TkVariable","classes/TkVariable.html#method-i-default_value_type-3D","(type)",""],["default_widget_set","Tk","classes/Tk.html#method-i-default_widget_set","()",""],["default_widget_set=","Tk","classes/Tk.html#method-i-default_widget_set-3D","(target)",""],["defaults","RDoc::Task","classes/RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["defaults_str","Gem::Command","classes/Gem/Command.html#method-i-defaults_str","()","<p>Override to display the default values of the command options. (similar to\n<code>arguments</code>, but displays the …\n"],["defaults_str","Gem::Commands::SourcesCommand","classes/Gem/Commands/SourcesCommand.html#method-i-defaults_str","()",""],["define","Gem::PackageTask","classes/Gem/PackageTask.html#method-i-define","()","<p>Create the Rake tasks and actions specified by this Gem::PackageTask.\n(<code>define</code> is automatically called …\n"],["define","OptionParser","classes/OptionParser.html#method-i-define","(*opts, &block)",""],["define","RDoc::Task","classes/RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-define","()","<p>Create the tasks defined by this task library.\n"],["define","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-define","(klass, filename, *args)",""],["define_aliases","Mutex_m","classes/Mutex_m.html#method-c-define_aliases","(cl)",""],["define_aliases","Sync_m","classes/Sync_m.html#method-c-define_aliases","(cl)",""],["define_aliases","Sync_m","classes/Sync_m.html#method-c-define_aliases","(cl)",""],["define_class","WIN32COMGen","classes/WIN32COMGen.html#method-i-define_class","(klass, io = STDOUT)",""],["define_dialog_type","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-c-define_dialog_type","(name, keys)",""],["define_finalizer","ObjectSpace","classes/ObjectSpace.html#method-c-define_finalizer","(p1, p2 = v2)","<p>Adds <em>aProc</em> as a finalizer, to be called after <em>obj</em> was\ndestroyed.\n"],["define_head","OptionParser","classes/OptionParser.html#method-i-define_head","(*opts, &block)",""],["define_include","WIN32COMGen","classes/WIN32COMGen.html#method-i-define_include","()",""],["define_initialize","WIN32COMGen","classes/WIN32COMGen.html#method-i-define_initialize","(klass)",""],["define_instance_variables","WIN32COMGen","classes/WIN32COMGen.html#method-i-define_instance_variables","()",""],["define_method_missing","WIN32COMGen","classes/WIN32COMGen.html#method-i-define_method_missing","()",""],["define_module","WIN32COMGen","classes/WIN32COMGen.html#method-i-define_module","(klass, io = STDOUT)",""],["define_module_function","Rake::AltSystem","classes/Rake/AltSystem.html#method-i-define_module_function","(name, &block)",""],["define_posix_props","Object","classes/Object.html#method-i-define_posix_props","(data)",""],["define_singleton_method","Object","classes/Object.html#method-i-define_singleton_method","(*args)","<p>Defines a singleton method in the receiver. The <em>method</em> parameter\ncan be a <code>Proc</code>, a <code>Method</code> or an\n<code>UnboundMethod</code> …\n"],["define_tail","OptionParser","classes/OptionParser.html#method-i-define_tail","(*opts, &block)",""],["define_task","Rake::Task","classes/Rake/Task.html#method-i-define_task","(*args, &block)","<p>Define a task given <code>args</code> and an option block.  If a rule with\nthe given name already exists, the prerequisites …\n"],["define_task","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-define_task","(task_class, *args, &block)",""],["defined_in?","RDoc::Context","classes/RDoc/Context.html#method-i-defined_in-3F","(file)","<p>Is part of this thing was defined in <code>file</code>?\n"],["definition","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXMLDOMText","classes/IXMLDOMText.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","IXTLRuntime","classes/IXTLRuntime.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-definition","()","<p>IXMLDOMNode definition pointer to the definition of the node in the DTD or\nschema\n"],["definition","RDoc::Attr","classes/RDoc/Attr.html#method-i-definition","()","<p>Returns attr_reader, attr_writer or attr_accessor as appropriate.\n"],["definition","RDoc::NormalClass","classes/RDoc/NormalClass.html#method-i-definition","()","<p>The definition of this class, <code>class MyClassName</code>\n"],["definition","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-definition","()","<p>The definition of this module, <code>module MyModuleName</code>\n"],["definition","RDoc::SingleClass","classes/RDoc/SingleClass.html#method-i-definition","()","<p>The definition of this singleton class, <code>class &lt;&lt;\nMyClassName</code>\n"],["deflate","Gem","classes/Gem.html#method-c-deflate","(data)","<p>A Zlib::Deflate.deflate wrapper\n"],["deflate","Zlib","classes/Zlib.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are\n<code>NO_COMPRESSION</code>, <code>BEST_SPEED</code>,\n<code>BEST_COMPRESSION</code>, …\n"],["deflate","Zlib::Deflate","classes/Zlib/Deflate.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are\n<code>NO_COMPRESSION</code>, <code>BEST_SPEED</code>,\n<code>BEST_COMPRESSION</code>, …\n"],["deflate","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-deflate","(p1, p2 = v2)","<p>Arguments\n<p><code>string</code> &mdash; String\n<p><code>flush</code> &mdash; Integer representing a flush code. Either NO_FLUSH, SYNC_FLUSH, FULL_FLUSH\n…\n"],["degree","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-degree","()","<p>See the OpenSSL documentation for EC_GROUP_get_degree()\n"],["degree","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-degree","()",""],["deiconify","Tk::Wm","classes/Tk/Wm.html#method-i-deiconify","(ex = true)",""],["deiconify","Tk::Wm","classes/Tk/Wm.html#method-c-deiconify","(win, ex = true)",""],["del","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-del","(win, *wins)",""],["del","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-del","(win, *wins)",""],["delay","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-delay","(millisecs=None)",""],["delay=","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-delay-3D","(millisecs)",""],["delch","Curses","classes/Curses.html#method-c-delch","()","<p>Delete the character under the cursor\n"],["delch","Curses::Window","classes/Curses/Window.html#method-i-delch","()","<p>Delete the character under the cursor\n"],["delegate","Forwardable","classes/Forwardable.html#method-i-delegate","(hash)",""],["delegate","SingleForwardable","classes/SingleForwardable.html#method-i-delegate","(hash)",""],["delegate","TkComposite","classes/TkComposite.html#method-i-delegate","(option, *wins)",""],["delegate_alias","TkComposite","classes/TkComposite.html#method-i-delegate_alias","(alias_opt, option, *wins)",""],["delegating_block","Delegator","classes/Delegator.html#method-c-delegating_block","(mid)",""],["delete","Array","classes/Array.html#method-i-delete","(p1)","<p>Deletes items from <code>self</code> that are equal to <em>obj</em>. If any\nitems are found, returns <em>obj</em>.   If the item is …\n"],["delete","CGI::Session","classes/CGI/Session.html#method-i-delete","()","<p>Delete the session from storage.  Also closes the storage.\n<p>Note that the session&#39;s data is <em>not</em> automatically …\n"],["delete","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-i-delete","()","<p>Close and delete the session&#39;s FileStore file.\n"],["delete","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-i-delete","()","<p>Delete the session state.\n"],["delete","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-i-delete","()","<p>Delete the session state.\n<p>A no-op.\n"],["delete","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-i-delete","()","<p>Close and delete the session&#39;s PStore file.\n"],["delete","CSV::Row","classes/CSV/Row.html#method-i-delete","(header_or_index, minimum_index = 0)","<p>Used to remove a pair from the row by <code>header</code> or\n<code>index</code>.  The pair is located as described in CSV::Row.field() …\n"],["delete","CSV::Table","classes/CSV/Table.html#method-i-delete","(index_or_header)","<p>Removes and returns the indicated column or row.  In the default mixed mode\nindices refer to rows and …\n"],["delete","DBM","classes/DBM.html#method-i-delete","(p1)","<p>Deletes an entry from the database.\n"],["delete","Dir","classes/Dir.html#method-c-delete","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["delete","ENV","classes/ENV.html#method-c-delete","(p1)","<p>Deletes the environment variable with <code>name</code> and returns the\nvalue of the variable.  If a block is given …\n"],["delete","File","classes/File.html#method-c-delete","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["delete","GDBM","classes/GDBM.html#method-i-delete","(p1)","<p>Removes the key-value-pair with the specified <em>key</em> from this\ndatabase and returns the corresponding <em>value</em> …\n"],["delete","Hash","classes/Hash.html#method-i-delete","(p1)","<p>Deletes and returns a key-value pair from <em>hsh</em> whose key is equal\nto <em>key</em>. If the key is not found, returns …\n"],["delete","IRB::JobManager","classes/IRB/JobManager.html#method-i-delete","(key)",""],["delete","MultiTkIp","classes/MultiTkIp.html#method-i-delete","()",""],["delete","MultiTkIp","classes/MultiTkIp.html#method-i-delete","()",""],["delete","MultiTkIp","classes/MultiTkIp.html#method-i-delete","()",""],["delete","MultiTkIp","classes/MultiTkIp.html#method-i-delete","()",""],["delete","Net::FTP","classes/Net/FTP.html#method-i-delete","(filename)","<p>Deletes a file on the server.\n"],["delete","Net::HTTP","classes/Net/HTTP.html#method-i-delete","(path, initheader = {'Depth' => 'Infinity'})","<p>Sends a DELETE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["delete","Net::HTTP","classes/Net/HTTP.html#method-i-delete","(path, initheader = {'Depth' => 'Infinity'})","<p>Sends a DELETE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["delete","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-delete","(key)","<p>Removes a header field, specified by case-insensitive key.\n"],["delete","Net::IMAP","classes/Net/IMAP.html#method-i-delete","(mailbox)","<p>Sends a DELETE command to remove the <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised if a mailbox with …\n"],["delete","Net::POPMail","classes/Net/POPMail.html#method-i-delete","()","<p>Marks a message for deletion on the server.  Deletion does not actually\noccur until the end of the session; …\n"],["delete","PStore","classes/PStore.html#method-i-delete","(name)","<p>Removes an object hierarchy from the data store, by <em>name</em>.\n<p><strong>WARNING</strong>:  This method is only valid in a\nPStore#transaction …\n"],["delete","Pathname","classes/Pathname.html#method-i-delete","()","<p>Removes a file or directory, using <code>File.unlink</code> or\n<code>Dir.unlink</code> as necessary.\n"],["delete","PrettyPrint::GroupQueue","classes/PrettyPrint/GroupQueue.html#method-i-delete","(group)",""],["delete","REXML::Parent","classes/REXML/Parent.html#method-i-delete","( object )",""],["delete","RemoteTkIp","classes/RemoteTkIp.html#method-i-delete","()",""],["delete","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-delete","(tuple)","<p>Removes <code>tuple</code> from the TupleBag.\n"],["delete","Rinda::TupleBag::TupleBin","classes/Rinda/TupleBag/TupleBin.html#method-i-delete","(tuple)",""],["delete","SDBM","classes/SDBM.html#method-i-delete","(p1)",""],["delete","Set","classes/Set.html#method-i-delete","(o)","<p>Deletes the given object from the set and returns self.  Use\n<code>subtract</code> to delete many items at once.\n"],["delete","String","classes/String.html#method-i-delete","(*args)","<p>Returns a copy of <em>str</em> with all characters in the intersection of\nits arguments deleted. Uses the same …\n"],["delete","Sys","classes/Sys.html#method-i-delete","(*wildcards)","<p>Remove all files matching <code>wildcard</code>.  If a matching file is a\ndirectory, it must be empty to be removed. …\n"],["delete","TclTkIp","classes/TclTkIp.html#method-i-delete","()","<p>delete interpreter\n"],["delete","Tempfile","classes/Tempfile.html#method-i-delete","()",""],["delete","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-delete","(*wins)",""],["delete","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-delete","()",""],["delete","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-delete","()",""],["delete","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-delete","()",""],["delete","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-delete","()",""],["delete","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-delete","(container, *args)",""],["delete","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-delete","(first, last=None)",""],["delete","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-delete","()",""],["delete","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-delete","()",""],["delete","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-i-delete","(*nodes)",""],["delete","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-delete","(*tags)",""],["delete","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-delete","()",""],["delete","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-delete","(*indices)",""],["delete","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-i-delete","()",""],["delete","Tk::BWidget::ButtonBox","classes/Tk/BWidget/ButtonBox.html#method-i-delete","(idx)",""],["delete","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-delete","(widget)",""],["delete","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-delete","(*args)",""],["delete","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-delete","()",""],["delete","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-delete","(page, destroyframe=None)",""],["delete","Tk::BWidget::PagesManager","classes/Tk/BWidget/PagesManager.html#method-i-delete","(page)",""],["delete","Tk::BWidget::PanelFrame","classes/Tk/BWidget/PanelFrame.html#method-i-delete","(*wins)",""],["delete","Tk::BWidget::StatusBar","classes/Tk/BWidget/StatusBar.html#method-i-delete","(*wins)",""],["delete","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-delete","(*args)",""],["delete","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-delete","()",""],["delete","Tk::Canvas","classes/Tk/Canvas.html#method-i-delete","(*args)",""],["delete","Tk::Entry","classes/Tk/Entry.html#method-i-delete","(first, last=None)",""],["delete","Tk::ICONS","classes/Tk/ICONS.html#method-c-delete","(*icons)",""],["delete","Tk::ICONS","classes/Tk/ICONS.html#method-i-delete","()",""],["delete","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-delete","(idx)",""],["delete","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-delete","(idx)",""],["delete","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-delete","(idx)",""],["delete","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-delete","(first, last=None)",""],["delete","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-delete","(first, last=None)",""],["delete","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-delete","(path1, path2=nil)",""],["delete","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-delete","(idx1, idx2=nil)",""],["delete","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-delete","(first, last=nil)",""],["delete","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-delete","(idx)",""],["delete","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-delete","(first, last=None)",""],["delete","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-delete","(idx)",""],["delete","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-delete","(*args)",""],["delete","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-delete","(first, last=None)",""],["delete","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-delete","(first, last=None)",""],["delete","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-delete","(first, last=None)",""],["delete","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-delete","(first, last=None)",""],["delete","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-delete","(first, last=None)",""],["delete","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-delete","(idx1, idx2=nil)",""],["delete","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-delete","(idx1, idx2=nil)",""],["delete","Tk::Iwidgets::Toolbar","classes/Tk/Iwidgets/Toolbar.html#method-i-delete","(idx1, idx2=nil)",""],["delete","Tk::MacResource","classes/Tk/MacResource.html#method-c-delete","(rsrcType, opts=nil)",""],["delete","Tk::Menu","classes/Tk/Menu.html#method-i-delete","(first, last=nil)",""],["delete","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-delete","(index, last=None)",""],["delete","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-delete","(index, last=None)",""],["delete","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-delete","(win, *wins)",""],["delete","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-delete","(win, *wins)",""],["delete","Tk::RbWidget::AlignBox","classes/Tk/RbWidget/AlignBox.html#method-i-delete","(idx)",""],["delete","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-delete","()",""],["delete","Tk::Tcllib::Tkpiechart::Slice","classes/Tk/Tcllib/Tkpiechart/Slice.html#method-i-delete","()",""],["delete","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-delete","(*wins)",""],["delete","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-delete","(*wins)",""],["delete","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-i-delete","(*wins)",""],["delete","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-delete","(*items)",""],["delete","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-delete","()",""],["delete","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-delete","()",""],["delete","Tk::WinRegistry","classes/Tk/WinRegistry.html#method-c-delete","(keynam, valnam=None)",""],["delete","Tk::Winico","classes/Tk/Winico.html#method-i-delete","()",""],["delete","TkFont","classes/TkFont.html#method-i-delete","()",""],["delete","TkFont","classes/TkFont.html#method-i-delete","()",""],["delete","TkImage","classes/TkImage.html#method-i-delete","()",""],["delete","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-delete","(*idx)",""],["delete","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-delete","(*idx)",""],["delete","TkMultiListbox","classes/TkMultiListbox.html#method-i-delete","(*idx)",""],["delete","TkTextWin","classes/TkTextWin.html#method-i-delete","(first, last=None)",""],["delete","TkcItem","classes/TkcItem.html#method-i-delete","()",""],["delete","TkcTag","classes/TkcTag.html#method-i-delete","()",""],["delete","WEBrick::HTTPServer::MountTable","classes/WEBrick/HTTPServer/MountTable.html#method-i-delete","(dir)",""],["delete","Win32::Registry","classes/Win32/Registry.html#method-i-delete","(name)",""],["delete","YAML::DBM","classes/YAML/DBM.html#method-i-delete","( key )","<p>Deletes value from database associated with <code>key</code>.\n<p>Returns value or <code>nil</code>.\n"],["delete!","Net::POPMail","classes/Net/POPMail.html#method-i-delete-21","()",""],["delete!","String","classes/String.html#method-i-delete-21","(*args)","<p>Performs a <code>delete</code> operation in place, returning <em>str</em>,\nor <code>nil</code> if <em>str</em> was not modified.\n"],["delete?","Set","classes/Set.html#method-i-delete-3F","(o)","<p>Deletes the given object from the set and returns self.  If the object is\nnot in the set, returns nil. …\n"],["deleteData","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-deleteData","(arg0, arg1)","<p>VOID deleteData delete string within the value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]</code></pre>\n"],["deleteData","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-deleteData","(arg0, arg1)","<p>VOID deleteData delete string within the value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]</code></pre>\n"],["deleteData","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-deleteData","(arg0, arg1)","<p>VOID deleteData delete string within the value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]</code></pre>\n"],["deleteData","IXMLDOMText","classes/IXMLDOMText.html#method-i-deleteData","(arg0, arg1)","<p>VOID deleteData delete string within the value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]</code></pre>\n"],["delete_active","Tk::TkTable","classes/Tk/TkTable.html#method-i-delete_active","(idx1, idx2=None)",""],["delete_all","Net::POP3","classes/Net/POP3.html#method-c-delete_all","(address, port = nil, account = nil, password = nil, isapop = false, &block)","<p>Starts a POP3 session and deletes all messages on the server. If a block is\ngiven, each POPMail object …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-i-delete_all","()","<p>Deletes all messages on the server.\n<p>If called with a block, yields each message in turn before deleting …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-i-delete_all","()","<p>Deletes all messages on the server.\n<p>If called with a block, yields each message in turn before deleting …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-c-delete_all","(address, port = nil, account = nil, password = nil, isapop = false, &block)","<p>Starts a POP3 session and deletes all messages on the server. If a block is\ngiven, each POPMail object …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-i-delete_all","()","<p>Deletes all messages on the server.\n<p>If called with a block, yields each message in turn before deleting …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-i-delete_all","()","<p>Deletes all messages on the server.\n<p>If called with a block, yields each message in turn before deleting …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-c-delete_all","(address, port = nil, account = nil, password = nil, isapop = false, &block)","<p>Starts a POP3 session and deletes all messages on the server. If a block is\ngiven, each POPMail object …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-c-delete_all","(address, port = nil, account = nil, password = nil, isapop = false, &block)","<p>Starts a POP3 session and deletes all messages on the server. If a block is\ngiven, each POPMail object …\n"],["delete_all","Sys","classes/Sys.html#method-i-delete_all","(*wildcards)","<p>Recursively delete all files and directories matching\n<code>wildcard</code>.\n"],["delete_at","Array","classes/Array.html#method-i-delete_at","(p1)","<p>Deletes the element at the specified index, returning that element, or\n<code>nil</code> if the index is out of range. …\n"],["delete_at","REXML::Parent","classes/REXML/Parent.html#method-i-delete_at","( index )",""],["delete_at","TkTimer","classes/TkTimer.html#method-i-delete_at","(n)",""],["delete_at","TkTimer","classes/TkTimer.html#method-i-delete_at","(n)",""],["delete_attribute","REXML::Element","classes/REXML/Element.html#method-i-delete_attribute","(key)","<p>Removes an attribute\n<p>key &mdash; either an Attribute or a String.  In either case, the attribute is found by\nmatching …\n"],["delete_caller","IRB","classes/IRB.html#method-c-delete_caller","()",""],["delete_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-delete_cmd","(slave, cmd)",""],["delete_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-delete_cmd","(slave, cmd)",""],["delete_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-delete_cmd","(slave, cmd)",""],["delete_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-delete_cmd","(slave, cmd)",""],["delete_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-delete_cmd","(slave, cmd)",""],["delete_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-delete_cmd","(slave, cmd)",""],["delete_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-delete_cmd","(slave, cmd)",""],["delete_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-delete_cmd","(slave, cmd)",""],["delete_cols","Tk::TkTable","classes/Tk/TkTable.html#method-i-delete_cols","(*args)",""],["delete_crl","CHashDir","classes/CHashDir.html#method-i-delete_crl","(crl)",""],["delete_element","REXML::Element","classes/REXML/Element.html#method-i-delete_element","(element)","<p>Deletes a child element.\n<p>element &mdash; Must be an <code>Element</code>, <code>String</code>, or\n<code>Integer</code>.  If Element, the element is removed. …\n"],["delete_entry","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-delete_entry","(first, last=None)",""],["delete_field","OpenStruct","classes/OpenStruct.html#method-i-delete_field","(name)","<p>Remove the named field from the object. Returns the value that the field\ncontained if it was defined. …\n"],["delete_from_taskbar","Tk::Winico","classes/Tk/Winico.html#method-i-delete_from_taskbar","()",""],["delete_highlight_class","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-delete_highlight_class","(klass)",""],["delete_if","Array","classes/Array.html#method-i-delete_if","()","<p>Deletes every element of <code>self</code> for which <em>block</em>\nevaluates to true. The array is changed instantly every …\n"],["delete_if","CSV::Row","classes/CSV/Row.html#method-i-delete_if","(&block)","<p>The provided <code>block</code> is passed a header and field for each pair\nin the row and expected to return <code>true</code> …\n"],["delete_if","CSV::Table","classes/CSV/Table.html#method-i-delete_if","(&block)","<p>Removes any column or row for which the block returns <code>true</code>. \nIn the default mixed mode or row mode, iteration …\n"],["delete_if","DBM","classes/DBM.html#method-i-delete_if","()","<p>Deletes all entries for which the code block returns true. Returns self.\n"],["delete_if","ENV","classes/ENV.html#method-c-delete_if","()","<p>Deletes every environment variable for which the block evaluates to\n<code>true</code>.\n<p>If no block is given an enumerator …\n"],["delete_if","GDBM","classes/GDBM.html#method-i-delete_if","()","<p>Deletes every key-value pair from <em>gdbm</em> for which <em>block</em>\nevaluates to true.\n"],["delete_if","Hash","classes/Hash.html#method-i-delete_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to <code>true</code>.\n<p>If no block is given, an enumerator …\n"],["delete_if","REXML::Parent","classes/REXML/Parent.html#method-i-delete_if","( &block )",""],["delete_if","SDBM","classes/SDBM.html#method-i-delete_if","()",""],["delete_if","Set","classes/Set.html#method-i-delete_if","()","<p>Deletes every element of the set for which block evaluates to true, and\nreturns self.\n"],["delete_if","YAML::DBM","classes/YAML/DBM.html#method-i-delete_if","()","<p>Calls the given block once for each <code>key</code>, <code>value</code>\npair in the database. Deletes all entries for which the …\n"],["delete_itcl_class","Tk::Itcl","classes/Tk/Itcl.html#method-c-delete_itcl_class","(*names)",""],["delete_itcl_object","Tk::Itcl","classes/Tk/Itcl.html#method-c-delete_itcl_object","(*names)",""],["delete_key","Win32::Registry","classes/Win32/Registry.html#method-i-delete_key","(name, recursive = false)","<p>Delete a subkey named name and all its values.\n<p>If recursive is false, the subkey must not have subkeys. …\n"],["delete_legacy_args","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["delete_list","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-delete_list","(first, last=None)",""],["delete_name","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-delete_name","(nick)",""],["delete_namespace","REXML::Element","classes/REXML/Element.html#method-i-delete_namespace","(namespace=\"xmlns\")","<p>Removes a namespace from this node.  This only works if the namespace is\nactually declared in this node. …\n"],["delete_namespace","Tk::Itcl","classes/Tk/Itcl.html#method-c-delete_namespace","(*names)",""],["delete_observer","Observable","classes/Observable.html#method-i-delete_observer","(observer)","<p>Remove <code>observer</code> as an observer on this object so that it will\nno longer receive notifications.\n<p><code>observer</code> … &mdash; "],["delete_observers","Observable","classes/Observable.html#method-i-delete_observers","()","<p>Remove all observers associated with this object.\n"],["delete_passwd","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in\n<code>realm</code>.\n"],["delete_passwd","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in\n<code>realm</code>.\n"],["delete_procs","TkTimer","classes/TkTimer.html#method-i-delete_procs","(*procs)",""],["delete_procs","TkTimer","classes/TkTimer.html#method-i-delete_procs","(*procs)",""],["delete_rows","Tk::TkTable","classes/Tk/TkTable.html#method-i-delete_rows","(*args)",""],["delete_slaves","MultiTkIp","classes/MultiTkIp.html#method-c-delete_slaves","(*args)",""],["delete_slaves","MultiTkIp","classes/MultiTkIp.html#method-i-delete_slaves","(*args)",""],["delete_slaves","MultiTkIp","classes/MultiTkIp.html#method-c-delete_slaves","(*args)",""],["delete_slaves","MultiTkIp","classes/MultiTkIp.html#method-c-delete_slaves","(*args)",""],["delete_slaves","MultiTkIp","classes/MultiTkIp.html#method-c-delete_slaves","(*args)",""],["delete_slaves","MultiTkIp","classes/MultiTkIp.html#method-i-delete_slaves","(*args)",""],["delete_slaves","MultiTkIp","classes/MultiTkIp.html#method-i-delete_slaves","(*args)",""],["delete_slaves","MultiTkIp","classes/MultiTkIp.html#method-i-delete_slaves","(*args)",""],["delete_slice","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-delete_slice","(slice)",""],["delete_source","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-delete_source","(*wins)",""],["delete_target","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-delete_target","(*wins)",""],["delete_unless_alive","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-delete_unless_alive","()","<p>Delete tuples which dead tuples from the TupleBag, returning the deleted\ntuples.\n"],["delete_value","Win32::Registry","classes/Win32/Registry.html#method-i-delete_value","(name)","<p>Delete a registry value named name. We can not delete the `default&#39;\nvalue.\n"],["deleted?","MultiTkIp","classes/MultiTkIp.html#method-i-deleted-3F","()",""],["deleted?","MultiTkIp","classes/MultiTkIp.html#method-i-deleted-3F","()",""],["deleted?","MultiTkIp","classes/MultiTkIp.html#method-i-deleted-3F","()",""],["deleted?","MultiTkIp","classes/MultiTkIp.html#method-i-deleted-3F","()",""],["deleted?","Net::POPMail","classes/Net/POPMail.html#method-i-deleted-3F","()","<p>True if the mail has been deleted.\n"],["deleted?","RemoteTkIp","classes/RemoteTkIp.html#method-i-deleted-3F","()",""],["deleted?","TclTkIp","classes/TclTkIp.html#method-i-deleted-3F","()",""],["deleteln","Curses","classes/Curses.html#method-c-deleteln","()","<p>Delete the line under the cursor.\n"],["deleteln","Curses::Window","classes/Curses/Window.html#method-i-deleteln","()","<p>Delete the line under the cursor.\n"],["delitem","TkTree","classes/TkTree.html#method-i-delitem","(itempath)",""],["delta","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-delta","(deltax, deltay)","<p>def delta(deltax=None, deltay=None)\n"],["deltag","Tk::Canvas","classes/Tk/Canvas.html#method-i-deltag","(tag, tag_to_del=None)",""],["deltag","TkcTagAccess","classes/TkcTagAccess.html#method-i-deltag","(tag_to_del=None)",""],["demoBitmaps","Object","classes/Object.html#method-i-demoBitmaps","(t)","<p>Demo: Bitmaps\n"],["demoExplorerAux","Object","classes/Object.html#method-i-demoExplorerAux","(t, dir_proc, file_proc)",""],["demoExplorerDetails","Object","classes/Object.html#method-i-demoExplorerDetails","(t)","<p>Demo: explorer files\n"],["demoExplorerLargeIcons","Object","classes/Object.html#method-i-demoExplorerLargeIcons","(t)",""],["demoExplorerList","Object","classes/Object.html#method-i-demoExplorerList","(t)","<p>Tree is vertical, wrapping occurs at bottom of window, each range has the\nsame width (as wide as the …\n"],["demoExplorerSmallIcons","Object","classes/Object.html#method-i-demoExplorerSmallIcons","(t)","<p>Tree is horizontal, wrapping occurs at right edge of window, each item is\nas wide as the smallest needed …\n"],["demoHelpContents","Object","classes/Object.html#method-i-demoHelpContents","(t)","<p>Demo: Help contents\n"],["demoHelpContents2","Object","classes/Object.html#method-i-demoHelpContents2","(t)","<p>This is an alternate implementation that does not define a new item state\nto change the appearance of …\n"],["demoIMovie","Object","classes/Object.html#method-i-demoIMovie","(t)","<p>Demo: iMovie\n"],["demoInternetOptions","Object","classes/Object.html#method-i-demoInternetOptions","(t)",""],["demoInternetOptions_2","Object","classes/Object.html#method-i-demoInternetOptions_2","(t)","<p>Alternate implementation that doesn&#39;t rely on run-time styles\n"],["demoLayout","Object","classes/Object.html#method-i-demoLayout","(t)","<p>Demo: Layout\n"],["demoMailWasher","Object","classes/Object.html#method-i-demoMailWasher","(t)","<p>Demo: MailWasher\n"],["demoOutlookFolders","Object","classes/Object.html#method-i-demoOutlookFolders","(t)","<p>Demo: Outlook Express folder list\n"],["demoOutlookNewsgroup","Object","classes/Object.html#method-i-demoOutlookNewsgroup","(t)","<p>Demo: Outlook Express newsgroup messages\n"],["demoOutlookNewsgroup2","Object","classes/Object.html#method-i-demoOutlookNewsgroup2","(t)","<p>Alternate implementation which does not rely on run-time states\n"],["demoRandom","Object","classes/Object.html#method-i-demoRandom","(t)","<p>Demo: random N items\n"],["demoRandom2","Object","classes/Object.html#method-i-demoRandom2","(t)","<p>Demo: random N items, button images\n"],["denominator","Complex","classes/Complex.html#method-i-denominator","()","<p>Returns the denominator (lcm of both denominator - real and imag).\n<p>See numerator.\n"],["denominator","Float","classes/Float.html#method-i-denominator","()","<p>Returns the denominator (always positive).  The result is machine\ndependent.\n<p>See numerator.\n"],["denominator","Integer","classes/Integer.html#method-i-denominator","()","<p>Returns 1.\n"],["denominator","Integer","classes/Integer.html#method-i-denominator","()","<p>Returns 1.\n"],["denominator","Numeric","classes/Numeric.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n"],["denominator","Rational","classes/Rational.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n<p>For example:\n\n<pre><code>Rational(7).denominator             #=&gt; 1\nRational(7, ...\n</code></pre>\n"],["depend_rules","Object","classes/Object.html#method-i-depend_rules","(depend)","<p>Processes the data contents of the “depend” file. Each line of this file is\nexpected to be …\n"],["dependencies","Gem::Specification","classes/Gem/Specification.html#method-i-dependencies","()","<p>A list of Gem::Dependency objects this gem depends on.\n<p>Use #add_dependency or #add_development_dependency …\n"],["dependencies_ok?","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-dependencies_ok-3F","(spec)",""],["dependency_order","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-dependency_order","()","<p>Return a list of the gem specifications in the dependency list, sorted in\norder so that no gemspec in …\n"],["dependent_gems","Gem::Specification","classes/Gem/Specification.html#method-i-dependent_gems","()","<p>Return a list of all gems that have a dependency on this gemspec.  The list\nis structured with entries …\n"],["dependent_specs","Gem::Specification","classes/Gem/Specification.html#method-i-dependent_specs","()","<p>Returns all specs that matches this spec&#39;s runtime dependencies.\n"],["deprecate","Gem::Deprecate","classes/Gem/Deprecate.html#method-c-deprecate","(name, repl, year, month)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it\nup in a dummy method. It warns on each …\n"],["deprecate","Rake::Application","classes/Rake/Application.html#method-i-deprecate","(old_usage, new_usage, call_site)","<p>Warn about deprecated usage.\n<p>Example:\n\n<pre><code>Rake.application.deprecate(&quot;import&quot;, &quot;Rake.import&quot;, caller.first)</code></pre>\n"],["deprecate","Rake::Application","classes/Rake/Application.html#method-i-deprecate","(old_usage, new_usage, call_site)","<p>Warn about deprecated usage.\n<p>Example:\n\n<pre><code>Rake.application.deprecate(&quot;import&quot;, &quot;Rake.import&quot;, caller.first)</code></pre>\n"],["depth","IXTLRuntime","classes/IXTLRuntime.html#method-i-depth","(arg0)","<p>I4 depth\n\n<pre><code>IXMLDOMNode arg0 --- pNode [IN]</code></pre>\n"],["depth","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-depth","()","<p>This integer returns the current depth of data structure nesting.\n"],["depth","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-depth","()",""],["depth","TkWinfo","classes/TkWinfo.html#method-c-depth","(win)",""],["depth","TkWinfo","classes/TkWinfo.html#method-c-depth","(win)",""],["depth=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-depth-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON\nto the integer depth, max_nesting …\n"],["deq","PrettyPrint::GroupQueue","classes/PrettyPrint/GroupQueue.html#method-i-deq","()",""],["deq","Queue","classes/Queue.html#method-i-deq","(non_block=false)","<p>Alias of pop\n"],["deq","SizedQueue","classes/SizedQueue.html#method-i-deq","(*args)","<p>Alias of pop\n"],["dequote","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-dequote","(str)",""],["desc","RubyVM::YARVDocGenerator","classes/RubyVM/YARVDocGenerator.html#method-i-desc","(lang)",""],["desc_en","RubyVM::YARVDocGenerator","classes/RubyVM/YARVDocGenerator.html#method-i-desc_en","()",""],["desc_ja","RubyVM::YARVDocGenerator","classes/RubyVM/YARVDocGenerator.html#method-i-desc_ja","()",""],["descend","Pathname","classes/Pathname.html#method-i-descend","()","<p>Iterates over and yields a new Pathname object for each element in the\ngiven path in descending order. …\n"],["description","Gem::Command","classes/Gem/Command.html#method-i-description","()","<p>Override to display a longer description of what this command does.\n"],["description","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-description","()","<p>Handy wrapper for marking up this object&#39;s comment\n"],["description=","Gem::Specification","classes/Gem/Specification.html#method-i-description-3D","(str)","<p>A long description of this gem\n"],["deselect","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-deselect","(idx)",""],["deselect","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-deselect","(idx)",""],["deselect","Tk::RadioButton","classes/Tk/RadioButton.html#method-i-deselect","()",""],["deselect","Tk::RadioButton","classes/Tk/RadioButton.html#method-i-deselect","()",""],["destination_encoding","Encoding::Converter","classes/Encoding/Converter.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an Encoding object.\n"],["destination_encoding","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding_name","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["destination_encoding_name","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["destroy","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-c-destroy","(*args)",""],["destroy","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-destroy","()",""],["destroy","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-destroy","(win)",""],["destroy","Tk::RbWidget::BalloonHelp","classes/Tk/RbWidget/BalloonHelp.html#method-i-destroy","()",""],["destroy","Tk::Root","classes/Tk/Root.html#method-c-destroy","()",""],["destroy","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-destroy","()",""],["destroy","Tk::Winico","classes/Tk/Winico.html#method-i-destroy","()",""],["destroy","TkTextIO","classes/TkTextIO.html#method-i-destroy","()",""],["destroy","TkTextMark","classes/TkTextMark.html#method-i-destroy","()",""],["destroy","TkTextMark","classes/TkTextMark.html#method-i-destroy","()",""],["destroy","TkTextTag","classes/TkTextTag.html#method-i-destroy","()",""],["destroy","TkTextTag","classes/TkTextTag.html#method-i-destroy","()",""],["destroy","TkcItem","classes/TkcItem.html#method-i-destroy","()",""],["destroy","TkcTag","classes/TkcTag.html#method-i-destroy","()",""],["det","Matrix","classes/Matrix.html#method-i-det","()",""],["det","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-det","()","<p>Returns the determinant of <code>A</code>, calculated efficiently from the\nfactorization.\n"],["det_e","Matrix","classes/Matrix.html#method-i-det_e","()",""],["detach","Process","classes/Process.html#method-c-detach","(p1)","<p>Some operating systems retain the status of terminated child processes\nuntil the parent collects that …\n"],["detach_bgexec","Tk::BLT","classes/Tk/BLT.html#method-c-detach_bgexec","(*args)",""],["detached","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-detached","()",""],["detached=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-detached-3D","(p1)",""],["detached?","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-detached-3F","()",""],["detect","Enumerable","classes/Enumerable.html#method-i-detect","(p1 = v1)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not false.  If no object matches, …\n"],["detect","VCS","classes/VCS.html#method-c-detect","(path)",""],["detect_implicit","Object::Syck::Resolver","classes/Object/Syck/Resolver.html#method-i-detect_implicit","(p1)","<p>YAML::Syck::Resolver#detect_implicit\n"],["detect_implicit","Psych","classes/Psych.html#method-c-detect_implicit","(thing)",""],["detect_implicit","Syck","classes/Syck.html#method-c-detect_implicit","( val )","<p>Detect typing of a string\n"],["detect_implicit","Syck","classes/Syck.html#method-c-detect_implicit","( val )","<p>Detect typing of a string\n"],["determinant","Matrix","classes/Matrix.html#method-i-determinant","()","<p>Returns the determinant of the matrix.\n<p>Beware that using Float values can yield erroneous results because …\n"],["determinant","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-determinant","()",""],["determinant_e","Matrix","classes/Matrix.html#method-i-determinant_e","()","<p>deprecated; use Matrix#determinant\n"],["determine_scale","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-determine_scale","(*args)",""],["determine_scale","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-determine_scale","(xmax, ymax)",""],["dev","File::Stat","classes/File/Stat.html#method-i-dev","()","<p>Returns an integer representing the device on which <em>stat</em> resides.\n\n<pre><code>File.stat(&quot;testfile&quot;).dev   #=&gt; 774\n</code></pre>\n"],["dev_major","File::Stat","classes/File/Stat.html#method-i-dev_major","()","<p>Returns the major part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre><code>File.stat(&quot;/dev/fd1&quot;).dev_major   #=&gt; 2\nFile.stat(&quot;/dev/tty&quot;).dev_major ...\n</code></pre>\n"],["dev_minor","File::Stat","classes/File/Stat.html#method-i-dev_minor","()","<p>Returns the minor part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre><code>File.stat(&quot;/dev/fd1&quot;).dev_minor   #=&gt; 1\nFile.stat(&quot;/dev/tty&quot;).dev_minor ...\n</code></pre>\n"],["development_dependencies","Gem::Specification","classes/Gem/Specification.html#method-i-development_dependencies","()","<p>List of dependencies that are used for development\n"],["dfdxi","Jacobian","classes/Jacobian.html#method-i-dfdxi","(f,fx,x,i)","<p>Computes the derivative of f at x. fx is the value of f at x.\n"],["dh_compute_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-dh_compute_key","(p1)","<p>See the OpenSSL documentation for ECDH_compute_key()\n"],["diagonal","Matrix","classes/Matrix.html#method-c-diagonal","(*values)","<p>Creates a matrix where the diagonal elements are composed of\n<code>values</code>.\n\n<pre><code>Matrix.diagonal(9, 5, -3)\n  =&gt;  9 ...\n</code></pre>\n"],["diagonal?","Matrix","classes/Matrix.html#method-i-diagonal-3F","()","<p>Returns <code>true</code> is this is a diagonal matrix. Raises an error if\nmatrix is not square.\n"],["dialog","Tk::BWidget::SelectColor","classes/Tk/BWidget/SelectColor.html#method-i-dialog","(keys={})",""],["diamond","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-diamond","(text, width=nil, height=nil)",""],["diff2index","Object","classes/Object.html#method-i-diff2index","(cmd, *argv)",""],["difference","Set","classes/Set.html#method-i-difference","(enum)",""],["digest","Digest::Class","classes/Digest/Class.html#method-c-digest","(*args)","<p>Returns the hash value of a given <em>string</em>.  This is equivalent to\nDigest::Class.new(*parameters).digest(string), …\n"],["digest","Digest::Instance","classes/Digest/Instance.html#method-i-digest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest, keeping\nthe digest&#39;s state.\n<p>If a …\n"],["digest","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-c-digest","(name, data)","<p>Return the <code>data</code> hash computed with <code>name</code> Digest.\n<code>name</code> is either the long name or short name of a supported …\n"],["digest","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-digest","(p1)",""],["digest","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-c-digest","(p1, p2, p3)",""],["digest","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-digest","()",""],["digest!","Digest::Instance","classes/Digest/Instance.html#method-i-digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial\nstate.\n"],["digest_length","Digest::HMAC","classes/Digest/HMAC.html#method-i-digest_length","()","<p>Returns the length in bytes of the hash value of the digest.\n"],["digest_length","Digest::Instance","classes/Digest/Instance.html#method-i-digest_length","()","<p>Returns the length of the hash value of the digest.\n<p>This method should be overridden by each implementation …\n"],["digest_length","Digest::SHA2","classes/Digest/SHA2.html#method-i-digest_length","()","<p>Returns the length of the hash value of the digest in bytes.\n\n<pre><code>Digest::SHA256.new.digest_length * 8\n# =&gt; ...\n</code></pre>\n"],["digest_length","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-digest_length","()","<p>Returns the output size of the digest, i.e. the length in bytes of the\nfinal message digest result.\n<p>Example …\n"],["dir","Gem","classes/Gem.html#method-c-dir","()","<p>The path where gems are to be installed.\n"],["dir","Gem::Installer","classes/Gem/Installer.html#method-i-dir","()","<p>Return the target directory where the gem is to be installed. This\ndirectory is not guaranteed to be …\n"],["dir","Net::FTP","classes/Net/FTP.html#method-i-dir","(*args)",""],["dir_config","Object","classes/Object.html#method-i-dir_config","(target, idefault=nil, ldefault=nil)","<p>Sets a <code>target</code> name that the user can then use to configure\nvarious &#39;with&#39; options with on the …\n"],["direction","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-direction","(dir)",""],["directory?","File","classes/File.html#method-c-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","File::Stat","classes/File/Stat.html#method-i-directory-3F","()","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","FileTest","classes/FileTest.html#method-i-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-directory-3F","()","<p>Is this tar entry a directory?\n"],["directory?","Pathname","classes/Pathname.html#method-i-directory-3F","()","<p>See <code>FileTest.directory?</code>.\n"],["directory?","Rake::FtpFile","classes/Rake/FtpFile.html#method-i-directory-3F","()",""],["dirname","File","classes/File.html#method-c-dirname","(p1)","<p>Returns all components of the filename given in <em>file_name</em> except\nthe last one. The filename must be formed …\n"],["dirname","Object","classes/Object.html#method-i-dirname","(idx)",""],["dirname","Pathname","classes/Pathname.html#method-i-dirname","()","<p>See <code>File.dirname</code>.  Returns all but the last component of the\npath.\n"],["dirs","Gem::Specification","classes/Gem/Specification.html#method-c-dirs","()","<p>Return the directories that Specification uses to find specs.\n"],["dirs=","Gem::Specification","classes/Gem/Specification.html#method-c-dirs-3D","(dirs)","<p>Set the directories that Specification uses to find specs. Setting this\nresets the list of known specs. …\n"],["disable","GC","classes/GC.html#method-c-disable","()","<p>Disables garbage collection, returning <code>true</code> if garbage\ncollection was already disabled.\n\n<pre><code>GC.disable   #=&gt; ...\n</code></pre>\n"],["disable","GC::Profiler","classes/GC/Profiler.html#method-c-disable","()","<p>Stops the GC profiler.\n"],["disable","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-disable","(idx)",""],["disable","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-disable","()",""],["disable_C_comments","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-disable_C_comments","()",""],["disable_close","DL::Handle","classes/DL/Handle.html#method-i-disable_close","()","<p>Disable a call to dlclose() when this DL::Handle is garbage collected.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-i-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-i-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-c-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-i-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-c-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-c-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-i-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-c-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::SMTP","classes/Net/SMTP.html#method-i-disable_ssl","()",""],["disable_ssl","Net::SMTP","classes/Net/SMTP.html#method-i-disable_ssl","()",""],["disable_starttls","Net::SMTP","classes/Net/SMTP.html#method-i-disable_starttls","()","<p>Disables SMTP/TLS (STARTTLS) for this object.  Must be called before the\nconnection is established to …\n"],["disable_starttls","Net::SMTP","classes/Net/SMTP.html#method-i-disable_starttls","()","<p>Disables SMTP/TLS (STARTTLS) for this object.  Must be called before the\nconnection is established to …\n"],["disable_tls","Net::SMTP","classes/Net/SMTP.html#method-i-disable_tls","()","<p>Disables SMTP/TLS for this object.  Must be called before the connection is\nestablished to have any effect. …\n"],["disable_tls","Net::SMTP","classes/Net/SMTP.html#method-i-disable_tls","()","<p>Disables SMTP/TLS for this object.  Must be called before the connection is\nestablished to have any effect. …\n"],["disasm","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-disasm","()",""],["disasm","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-disasm","(p1)",""],["disassemble","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-disassemble","(p1)",""],["disassemble","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-disassemble","()",""],["discard_ilseq=","Iconv","classes/Iconv.html#method-i-discard_ilseq-3D","(p1)","<p>Sets discard_ilseq flag.\n"],["discard_ilseq?","Iconv","classes/Iconv.html#method-i-discard_ilseq-3F","()","<p>Returns discard_ilseq flag.\n"],["disconnect","Net::IMAP","classes/Net/IMAP.html#method-i-disconnect","()","<p>Disconnects from the server.\n"],["disconnected?","Net::IMAP","classes/Net/IMAP.html#method-i-disconnected-3F","()","<p>Returns true if disconnected from the server.\n"],["disconnecting","GServer","classes/GServer.html#method-i-disconnecting","(clientPort)","<p>Called when a client disconnects, if audition is enabled.\n<p><code>clientPort</code> &mdash; the port of the client that is connecting …\n\n"],["dispid","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-dispid","()","<p>Returns dispatch ID.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;)\nmethod ...</code></pre>\n"],["display","DEBUGGER__","classes/DEBUGGER__.html#method-i-display","()",""],["display","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-display","()",""],["display","Object","classes/Object.html#method-i-display","(p1 = v1)","<p>Prints <em>obj</em> on the given port (default <code>$&gt;</code>).\nEquivalent to:\n\n<pre><code>def display(port=$&gt;)\n  port.write self\nend\n</code></pre>\n"],["display","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display","(document)","<p>Converts <code>document</code> to text and writes it to the pager\n"],["display","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-i-display","()",""],["display","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-c-display","(*args)",""],["display","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-display","()",""],["display","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-c-display","(*args)",""],["display","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-i-display","()",""],["display","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-i-display","()",""],["display","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-i-display","()",""],["display","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-c-display","(*args)",""],["display","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-i-display","()",""],["display?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-display-3F","()","<p>Should this CodeObject be shown in documentation?\n"],["display_attributes","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-display_attributes","()","<p>Debug method that prints a string along with its attributes\n"],["display_char","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_char","(mod)",""],["display_chars","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_chars","(mod)",""],["display_class","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_class","(name)","<p>Outputs formatted RI data for class <code>name</code>.  Groups undocumented\nclasses\n"],["display_error_message","Rake::Application","classes/Rake/Application.html#method-i-display_error_message","(ex)","<p>Display the error message that caused the exception.\n"],["display_error_message","Rake::Application","classes/Rake/Application.html#method-i-display_error_message","(ex)","<p>Display the error message that caused the exception.\n"],["display_expression","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-display_expression","(exp, binding)",""],["display_expressions","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-display_expressions","(binding)",""],["display_frames","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-display_frames","(pos)",""],["display_indices","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_indices","(mod)",""],["display_line","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_line","(mod)",""],["display_lineend","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_lineend","()",""],["display_lines","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_lines","(mod)",""],["display_linestart","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_linestart","()",""],["display_list","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-display_list","(b, e, file, line)",""],["display_method","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_method","(name)","<p>Outputs formatted RI data for method <code>name</code>\n"],["display_name","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_name","(name)","<p>Outputs formatted RI data for the class or method <code>name</code>.\n<p>Returns true if <code>name</code> was found, false if it was …\n"],["display_names","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_names","(names)","<p>Displays each name in <code>name</code>\n"],["display_prerequisites","Rake::Application","classes/Rake/Application.html#method-i-display_prerequisites","()","<p>Display the tasks and prerequisites\n"],["display_prerequisites","Rake::Application","classes/Rake/Application.html#method-i-display_prerequisites","()","<p>Display the tasks and prerequisites\n"],["display_tasks_and_comments","Rake::Application","classes/Rake/Application.html#method-i-display_tasks_and_comments","()","<p>Display the tasks and comments.\n"],["display_tasks_and_comments","Rake::Application","classes/Rake/Application.html#method-i-display_tasks_and_comments","()","<p>Display the tasks and comments.\n"],["display_wordend","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_wordend","()",""],["display_wordstart","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-display_wordstart","()",""],["distribute","ChatServer","classes/ChatServer.html#method-i-distribute","(there, str)",""],["div","BigDecimal","classes/BigDecimal.html#method-i-div","(p1, p2 = v2)",""],["div","Bignum","classes/Bignum.html#method-i-div","(p1)","<p>Performs integer division: returns integer value.\n"],["div","Fixnum","classes/Fixnum.html#method-i-div","(p1)","<p>Performs integer division: returns integer value.\n"],["div","Numeric","classes/Numeric.html#method-i-div","(p1)","<p>Uses <code>/</code> to perform division, then converts the result to an\ninteger. <code>numeric</code> does not define the <code>/</code> operator;\n…\n"],["divide","Set","classes/Set.html#method-i-divide","(&func)","<p>Divides the set into a set of subsets according to the commonality defined\nby the given block.\n<p>If the …\n"],["divmod","BigDecimal","classes/BigDecimal.html#method-i-divmod","(p1)","<p>Divides by the specified value, and returns the quotient and modulus as\nBigDecimal numbers. The quotient …\n"],["divmod","Bignum","classes/Bignum.html#method-i-divmod","(p1)","<p>See <code>Numeric#divmod</code>.\n"],["divmod","Fixnum","classes/Fixnum.html#method-i-divmod","(p1)","<p>See <code>Numeric#divmod</code>.\n"],["divmod","Float","classes/Float.html#method-i-divmod","(p1)","<p>See <code>Numeric#divmod</code>.\n"],["divmod","Numeric","classes/Numeric.html#method-i-divmod","(p1)","<p>Returns an array containing the quotient and modulus obtained by dividing\n<em>num</em> by <em>numeric</em>. If <code>q, r = </code> …\n"],["dlineinfo","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-dlineinfo","(index)",""],["dlineinfo","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-dlineinfo","(index)",""],["dlload","DL::Importer","classes/DL/Importer.html#method-i-dlload","(*libs)",""],["dlopen","DL","classes/DL.html#method-c-dlopen","(*args)",""],["dlunwrap","DL","classes/DL.html#method-c-dlunwrap","(p1)",""],["dlwrap","DL","classes/DL.html#method-c-dlwrap","(p1)",""],["dn","URI::LDAP","classes/URI/LDAP.html#method-i-dn","()","<p>returns dn.\n"],["dn=","URI::LDAP","classes/URI/LDAP.html#method-i-dn-3D","(val)","<p>setter for dn <code>val</code>\n"],["dnd_bindsource","Tk::TkDND::DND","classes/Tk/TkDND/DND.html#method-i-dnd_bindsource","(type, *args)","<p>def dnd_bindsource(type, cmd=Proc.new, prior=None)\n\n<pre><code>tk_call(&#39;dnd&#39;, &#39;bindsource&#39;, @path, type, cmd, prior) ...</code></pre>\n"],["dnd_bindsource_info","Tk::TkDND::DND","classes/Tk/TkDND/DND.html#method-i-dnd_bindsource_info","(type=nil)",""],["dnd_bindtarget","Tk::TkDND::DND","classes/Tk/TkDND/DND.html#method-i-dnd_bindtarget","(type, event, *args)","<p>def dnd_bindtarget(type, event, cmd=Proc.new, prior=50, *args)\n\n<pre><code>event = tk_event_sequence(event)\nif prior.kind_of?(Numeric) ...</code></pre>\n"],["dnd_bindtarget_info","Tk::TkDND::DND","classes/Tk/TkDND/DND.html#method-i-dnd_bindtarget_info","(type=nil, event=nil)",""],["dnd_clearsource","Tk::TkDND::DND","classes/Tk/TkDND/DND.html#method-i-dnd_clearsource","()",""],["dnd_cleartarget","Tk::TkDND::DND","classes/Tk/TkDND/DND.html#method-i-dnd_cleartarget","()",""],["dnd_drag","Tk::TkDND::DND","classes/Tk/TkDND/DND.html#method-i-dnd_drag","(keys=nil)",""],["do_CONNECT","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-do_CONNECT","(req, res)",""],["do_GET","DemoApplication","classes/DemoApplication.html#method-i-do_GET","(req, res)",""],["do_GET","HelloServlet","classes/HelloServlet.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_GET","(req, res)","<p>Raises a NotFound exception\n"],["do_GET","WEBrick::HTTPServlet::CGIHandler","classes/WEBrick/HTTPServlet/CGIHandler.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPServlet::DefaultFileHandler","classes/WEBrick/HTTPServlet/DefaultFileHandler.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPServlet::ERBHandler","classes/WEBrick/HTTPServlet/ERBHandler.html#method-i-do_GET","(req, res)","<p>Handles GET requests\n"],["do_GET","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-i-do_GET","(req, res)",""],["do_GET","WEBrick::HTTPServlet::ProcHandler","classes/WEBrick/HTTPServlet/ProcHandler.html#method-i-do_GET","(request, response)",""],["do_HEAD","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-do_HEAD","(req, res)",""],["do_HEAD","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_HEAD","(req, res)","<p>Dispatches to do_GET\n"],["do_OPTIONS","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-do_OPTIONS","(req, res)",""],["do_OPTIONS","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-do_OPTIONS","(req, res)",""],["do_OPTIONS","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_OPTIONS","(req, res)","<p>Returns the allowed HTTP request methods\n"],["do_OPTIONS","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-i-do_OPTIONS","(req, res)",""],["do_POST","DRb::HTTP0::Callback","classes/DRb/HTTP0/Callback.html#method-i-do_POST","(req, res)",""],["do_POST","DemoApplication","classes/DemoApplication.html#method-i-do_POST","(req, res)",""],["do_POST","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-do_POST","(req, res)",""],["do_POST","WEBrick::HTTPServlet::CGIHandler","classes/WEBrick/HTTPServlet/CGIHandler.html#method-i-do_POST","(req, res)",""],["do_POST","WEBrick::HTTPServlet::ERBHandler","classes/WEBrick/HTTPServlet/ERBHandler.html#method-i-do_POST","(req, res)","<p>Handles POST requests\n"],["do_POST","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-i-do_POST","(req, res)",""],["do_POST","WEBrick::HTTPServlet::ProcHandler","classes/WEBrick/HTTPServlet/ProcHandler.html#method-i-do_POST","(request, response)",""],["do_aliases","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_aliases","()","<p>Scans #content for rb_define_alias\n"],["do_attrs","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_attrs","()","<p>Scans #content for rb_attr and rb_define_attr\n"],["do_button","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-do_button","(what)",""],["do_callback","TkTimer","classes/TkTimer.html#method-i-do_callback","()","<p>instance methods\n"],["do_callback","TkTimer","classes/TkTimer.html#method-i-do_callback","()","<p>instance methods\n"],["do_classes","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_classes","()","<p>Scans #content for rb_define_module, rb_define_class, boot_defclass,\nrb_define_module_under, rb_define_class_under …\n"],["do_constants","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_constants","()","<p>Scans #content for rb_define_variable, rb_define_readonly_variable,\nrb_define_const and rb_define_global_const …\n"],["do_ctrl_frame","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-do_ctrl_frame","()",""],["do_detail_frame","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-do_detail_frame","()",""],["do_display","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-do_display","()",""],["do_includes","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_includes","()","<p>Scans #content for rb_include_module\n"],["do_it","Object","classes/Object.html#method-i-do_it","(v)",""],["do_log","Object","classes/Object.html#method-i-do_log","(log)",""],["do_methods","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_methods","()","<p>Scans #content for rb_define_method, rb_define_singleton_method,\nrb_define_module_function, rb_define_private_method …\n"],["do_motion","Object","classes/Object.html#method-i-do_motion","(x, y)",""],["do_not_reverse_lookup","BasicSocket","classes/BasicSocket.html#method-c-do_not_reverse_lookup","()","<p>Gets the global do_not_reverse_lookup flag.\n\n<pre><code>BasicSocket.do_not_reverse_lookup  #=&gt; false\n</code></pre>\n"],["do_not_reverse_lookup","BasicSocket","classes/BasicSocket.html#method-i-do_not_reverse_lookup","()","<p>Gets the do_not_reverse_lookup flag of <em>basicsocket</em>.\n\n<pre><code>TCPSocket.open(&quot;www.ruby-lang.org&quot;, 80) {|sock|\n  ...\n</code></pre>\n"],["do_not_reverse_lookup=","BasicSocket","classes/BasicSocket.html#method-c-do_not_reverse_lookup-3D","(p1)","<p>Sets the global do_not_reverse_lookup flag.\n<p>The flag is used for initial value of do_not_reverse_lookup …\n"],["do_not_reverse_lookup=","BasicSocket","classes/BasicSocket.html#method-i-do_not_reverse_lookup-3D","(p1)","<p>Sets the do_not_reverse_lookup flag of <em>basicsocket</em>.\n\n<pre><code>BasicSocket.do_not_reverse_lookup = false\np TCPSocket.new(&quot;127.0.0.1&quot;, ...</code></pre>\n"],["do_nothing","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-do_nothing","(markup_item)","<p>Does nothing to <code>markup_item</code> because it doesn&#39;t have any\nuser-built content\n"],["do_one_event","MultiTkIp","classes/MultiTkIp.html#method-i-do_one_event","(flag = TclTkLib::EventFlag::ALL)",""],["do_one_event","MultiTkIp","classes/MultiTkIp.html#method-i-do_one_event","(flag = TclTkLib::EventFlag::ALL)",""],["do_one_event","MultiTkIp","classes/MultiTkIp.html#method-i-do_one_event","(flag = TclTkLib::EventFlag::ALL)",""],["do_one_event","MultiTkIp","classes/MultiTkIp.html#method-i-do_one_event","(flag = TclTkLib::EventFlag::ALL)",""],["do_one_event","RemoteTkIp","classes/RemoteTkIp.html#method-i-do_one_event","(flag = nil)",""],["do_one_event","TclTkIp","classes/TclTkIp.html#method-i-do_one_event","(*args)",""],["do_one_event","TclTkLib","classes/TclTkLib.html#method-i-do_one_event","(flag = TclTkLib::EventFlag::ALL)",""],["do_one_event","TclTkLib","classes/TclTkLib.html#method-c-do_one_event","(*args)",""],["do_press","Object","classes/Object.html#method-i-do_press","(x, y)",""],["do_release","Object","classes/Object.html#method-i-do_release","(x, y)",""],["do_reply","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-do_reply","()","<p>Pulls lookup tuples out of the TupleSpace and sends their DRb object the\naddress of the local TupleSpace …\n"],["do_thread_callback","TclTkLib","classes/TclTkLib.html#method-c-do_thread_callback","(p1 = v1)",""],["do_validate","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-do_validate","()",""],["do_validate=","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-do_validate-3D","(new_value)",""],["do_write","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-do_write","(msg)","<p>Extracts the response URI from <code>msg</code> and adds it to TupleSpace\nwhere it will be picked up by <code>reply_service</code> …\n"],["doc_dir","Gem::Specification","classes/Gem/Specification.html#method-i-doc_dir","()","<p>Returns the full path to this spec&#39;s documentation directory.\n"],["doc_stats","RDoc::Stats","classes/RDoc/Stats.html#method-i-doc_stats","(collection)","<p>Returns the length and number of undocumented items in\n<code>collection</code>.\n"],["doctype","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-doctype","()","<p>IXMLDOMDocumentType doctype node corresponding to the DOCTYPE\n"],["doctype","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-doctype","()","<p>IXMLDOMDocumentType doctype node corresponding to the DOCTYPE\n"],["doctype","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-doctype","()","<p>IXMLDOMDocumentType doctype node corresponding to the DOCTYPE\n"],["doctype","Msxml","classes/Msxml.html#method-i-doctype","()","<p>HRESULT doctype get document type.\n\n<pre><code>BSTR arg0 --- p [OUT]</code></pre>\n"],["doctype","REXML::Attribute","classes/REXML/Attribute.html#method-i-doctype","()",""],["doctype","REXML::Document","classes/REXML/Document.html#method-i-doctype","()","<p>@return the DocType child of the document, if one exists, and nil\notherwise.\n"],["doctype","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-doctype","(name, pub_sys, long_name, uri)","<p>Handles a doctype declaration. Any attributes of the doctype which are not\nsupplied will be nil.  #  …\n"],["doctype","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-doctype","(name, pub_sys, long_name, uri)","<p>Handles a doctype declaration. Any attributes of the doctype which are not\nsupplied will be nil.  #  …\n"],["doctype","REXML::Text","classes/REXML/Text.html#method-i-doctype","()",""],["doctype?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-doctype-3F","()","<p>Content: [ String name, String pub_sys, String long_name, String uri ]\n"],["doctype_end","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-doctype_end","()","<p>Called when the doctype is done\n"],["document","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-document","(options)","<p>Generates documentation or a coverage report depending upon the settings in\n<code>options</code>.\n<p><code>options</code> can be either …\n"],["document","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish”\nor “ri”) and following …\n"],["document","REXML::Child","classes/REXML/Child.html#method-i-document","()","<p>Returns &mdash; the document this child belongs to, or nil if this child\n\n<p>belongs to no document\n"],["document","REXML::Element","classes/REXML/Element.html#method-i-document","()","<p>Evaluates to the document to which this element belongs, or nil if this\nelement doesn&#39;t belong to …\n"],["document","XMLRPC::XMLWriter::Simple","classes/XMLRPC/XMLWriter/Simple.html#method-i-document","(*params)",""],["document","XMLRPC::XMLWriter::XMLParser","classes/XMLRPC/XMLWriter/XMLParser.html#method-i-document","(*params)",""],["documentElement","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-documentElement","()","<p>IXMLDOMElement documentElement the root of the tree\n"],["documentElement","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-documentElement","()","<p>IXMLDOMElement documentElement the root of the tree\n"],["documentElement","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-documentElement","()","<p>IXMLDOMElement documentElement the root of the tree\n"],["document_children=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-document_children-3D","(document_children)","<p>Enables or disables documentation of this CodeObject&#39;s children unless\nit has been turned off by …\n"],["document_self=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-document_self-3D","(document_self)","<p>Enables or disables documentation of this CodeObject unless it has been\nturned off by :enddoc:.  If the …\n"],["document_to_str","XMLRPC::XMLWriter::Simple","classes/XMLRPC/XMLWriter/Simple.html#method-i-document_to_str","(doc)",""],["document_to_str","XMLRPC::XMLWriter::XMLParser","classes/XMLRPC/XMLWriter/XMLParser.html#method-i-document_to_str","(doc)",""],["documented?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-documented-3F","()","<p>Does this object have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::Constant","classes/RDoc/Constant.html#method-i-documented-3F","()","<p>A constant is documented if it has a comment, or is an alias for a\ndocumented class or module.\n"],["documented?","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-documented-3F","()","<p>A method/attribute is documented if any of the following is true:\n<p>it was marked with :nodoc:;\n<p>it has a …\n"],["dom_attr","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_attr","(idx)",""],["dom_form_element","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_form_element","(name)",""],["dom_formel","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_formel","(name)",""],["dom_id","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_id","(*spec)",""],["dom_ids","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_ids","(*spec)",""],["dom_name_index","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_name_index","(tag, name)",""],["dom_nameidx","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_nameidx","(tag, name)",""],["dom_radio_index","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_radio_index","(tag, name)",""],["dom_radioidx","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_radioidx","(tag, name)",""],["dom_tree","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_tree","(idx, val)",""],["dom_value","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-dom_value","(*spec)",""],["done","Gem::StreamUI::SilentDownloadReporter","classes/Gem/StreamUI/SilentDownloadReporter.html#method-i-done","()",""],["done","Gem::StreamUI::SilentProgressReporter","classes/Gem/StreamUI/SilentProgressReporter.html#method-i-done","()",""],["done","Gem::StreamUI::SimpleProgressReporter","classes/Gem/StreamUI/SimpleProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done","Gem::StreamUI::VerboseDownloadReporter","classes/Gem/StreamUI/VerboseDownloadReporter.html#method-i-done","()",""],["done","Gem::StreamUI::VerboseProgressReporter","classes/Gem/StreamUI/VerboseProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done","Notify","classes/Notify.html#method-i-done","()",""],["done?","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-done-3F","()",""],["done_adding","RDoc::Stats","classes/RDoc/Stats.html#method-i-done_adding","()","<p>Call this to mark the end of parsing for display purposes\n"],["done_adding","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-done_adding","(*)","<p>Prints when RDoc is done\n"],["done_documenting=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-done_documenting-3D","(value)","<p>Turns documentation on/off, and turns on/off #document_self and\n#document_children.\n<p>Once documentation …\n"],["dot","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-dot","(series, xcrd, ycrd, value)",""],["dotconfig","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-dotconfig","(series, key, value=None)",""],["double","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-double","( value )","<p>Emit double-quoted string\n"],["double","XMLRPC::Convert","classes/XMLRPC/Convert.html#method-c-double","(str)",""],["double_fig","BigDecimal","classes/BigDecimal.html#method-c-double_fig","()","<p>The BigDecimal.double_fig class method returns the number of digits a Float\nnumber is allowed to have. …\n"],["doupdate","Curses","classes/Curses.html#method-c-doupdate","()","<p>Refreshes the windows and lines.\n<p>Curses.doupdate allows multiple updates with more efficiency than\nCurses.refresh …\n"],["down","Board","classes/Board.html#method-i-down","()",""],["down","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-down","()",""],["downcase","String","classes/String.html#method-i-downcase","()","<p>Returns a copy of <em>str</em> with all uppercase letters replaced with\ntheir lowercase counterparts. The operation …\n"],["downcase","Symbol","classes/Symbol.html#method-i-downcase","()","<p>Same as <code>sym.to_s.downcase.intern</code>.\n"],["downcase!","String","classes/String.html#method-i-downcase-21","()","<p>Downcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made. Note: case replacement is effective …\n"],["download","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)","<p>Moves the gem <code>spec</code> from <code>source_uri</code> to the cache\ndir unless it is already there.  If the source_uri is …\n"],["download_reporter","Gem::SilentUI","classes/Gem/SilentUI.html#method-i-download_reporter","(*args)",""],["download_reporter","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-download_reporter","(*args)","<p>Return a download reporter object chosen from the current verbosity\n"],["download_to_cache","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-download_to_cache","(dependency)","<p>Given a name and requirement, downloads this gem into cache and returns the\nfilename. Returns nil if …\n"],["downto","Date","classes/Date.html#method-i-downto","(p1)","<p>This method is equivalent to step(min, -1){|date| …}.\n"],["downto","Integer","classes/Integer.html#method-i-downto","(p1)","<p>Iterates <em>block</em>, passing decreasing values from <em>int</em> down\nto and including <em>limit</em>.\n<p>If no block is given, …\n"],["downto","Integer","classes/Integer.html#method-i-downto","(p1)","<p>Iterates <em>block</em>, passing decreasing values from <em>int</em> down\nto and including <em>limit</em>.\n<p>If no block is given, …\n"],["dowrite","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-dowrite","()",""],["drag","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-drag","(win, x, y, token=None)",""],["drag","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-drag","(win, x, y)",""],["drag_end","Knights_Tour","classes/Knights_Tour.html#method-i-drag_end","(w, x, y)",""],["drag_motion","Knights_Tour","classes/Knights_Tour.html#method-i-drag_motion","(w, x, y)",""],["drag_start","Knights_Tour","classes/Knights_Tour.html#method-i-drag_start","(w, x, y)",""],["dragimage_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-dragimage_cget","(option)",""],["dragimage_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-dragimage_cget_strict","(option)",""],["dragimage_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-dragimage_cget_tkstring","(option)",""],["dragimage_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-dragimage_configinfo","(slot=nil)",""],["dragimage_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-dragimage_configure","(slot, value=None)",""],["dragto","Tk::Entry","classes/Tk/Entry.html#method-i-dragto","(pos)",""],["dragto","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-dragto","(pos)",""],["dragto","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-dragto","(pos)",""],["dragto","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-dragto","(pos)",""],["draw","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-draw","(focus_win=None)",""],["draw","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-draw","(mode=None)",""],["draw0","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw0","()","<p>START HERE! banner\n"],["draw1","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw1","()","<p>Dropping ball\n"],["draw10","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw10","()","<p>Boat\n"],["draw11","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw11","()","<p>2nd ball drop\n"],["draw12","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw12","()","<p>Hand\n"],["draw13","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw13","()","<p>Fax\n"],["draw14","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw14","()","<p>Paper in fax\n"],["draw14a","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw14a","(side)",""],["draw15","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw15","()","<p>Light beam\n"],["draw16","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw16","()","<p>Bell\n"],["draw17","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw17","()","<p>Cat\n"],["draw18","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw18","()","<p>Sling shot\n"],["draw19","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw19","()","<p>Water pipe\n"],["draw2","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw2","()","<p>Lighting the match\n"],["draw20","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw20","()","<p>Water pouring\n"],["draw21","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw21","()","<p>Bucket\n"],["draw22","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw22","()","<p>Bucket drop\n"],["draw23","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw23","()","<p>Blow dart\n"],["draw24","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw24","()","<p>Balloon\n"],["draw3","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw3","()","<p>Weight and pulleys\n"],["draw4","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw4","()","<p>Cage and door\n"],["draw5","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw5","()","<p>Mouse\n"],["draw6","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw6","()","<p>Dropping gumballs\n"],["draw6a","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw6a","(beta)",""],["draw7","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw7","()","<p>On/off switch\n"],["draw8","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw8","()","<p>Electricity to the fan\n"],["draw9","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw9","()","<p>Fan\n"],["draw_all","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-draw_all","()",""],["drawin","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-drawin","(canvas)",""],["drawlines","Object","classes/Object.html#method-i-drawlines","()",""],["drb_name=","DRbNamedObject","classes/DRbNamedObject.html#method-i-drb_name-3D","(name)",""],["drop","Array","classes/Array.html#method-i-drop","(p1)","<p>Drops first n elements from <code>ary</code> and returns the rest of the\nelements in an array.\n\n<pre><code>a = [1, 2, 3, 4, 5, ...</code></pre>\n"],["drop","Enumerable","classes/Enumerable.html#method-i-drop","(p1)","<p>Drops first n elements from <em>enum</em>, and returns rest elements in an\narray.\n\n<pre><code>a = [1, 2, 3, 4, 5, 0]\na.drop(3) ...</code></pre>\n"],["drop","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-drop","(win, x, y, token=None)",""],["drop","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-drop","(win, x, y)",""],["drop_while","Array","classes/Array.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns <code>nil</code> or <code>false</code> and …\n"],["drop_while","Enumerable","classes/Enumerable.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns <code>nil</code> or <code>false</code> and …\n"],["drum","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-drum","(text, width=nil, height=nil)",""],["dsa_sign_asn1","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-dsa_sign_asn1","(p1)","<p>See the OpenSSL documentation for ECDSA_sign()\n"],["dsa_verify_asn1","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-dsa_verify_asn1","(p1, p2)","<p>See the OpenSSL documentation for ECDSA_verify()\n"],["dst?","Time","classes/Time.html#method-i-dst-3F","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre><code># CST6CDT:\n  Time.local(2000, ...</code></pre>\n"],["dtag","Tk::Canvas","classes/Tk/Canvas.html#method-i-dtag","(tag, tag_to_del=None)",""],["dtag","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-dtag","(tag, tag_to_del=None)",""],["dtag","TkcTagAccess","classes/TkcTagAccess.html#method-i-dtag","(tag_to_del=None)",""],["dummy?","Encoding","classes/Encoding.html#method-i-dummy-3F","()","<p>Returns true for dummy encodings. A dummy encoding is an encoding for which\ncharacter handling is not …\n"],["dummy_makefile","Object","classes/Object.html#method-i-dummy_makefile","(srcdir)","<p>creates a stub Makefile.\n"],["dump","CSV","classes/CSV.html#method-c-dump","(ary_of_objs, io = \"\", options = Hash.new)","<p>This method allows you to serialize an Array of Ruby objects to a String or\nFile of CSV data.  This is …\n"],["dump","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-dump","()",""],["dump","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-dump","()",""],["dump","JSON","classes/JSON.html#method-i-dump","(obj, anIO = nil, limit = nil)","<p>Dumps <em>obj</em> as a JSON string, i.e. calls generate on the object and\nreturns the result.\n<p>If anIO (an IO-like …\n"],["dump","Marshal","classes/Marshal.html#method-c-dump","(p1, p2 = v2, p3 = v3)","<p>Serializes obj and all descendant objects. If anIO is specified, the\nserialized data will be written …\n"],["dump","Psych","classes/Psych.html#method-c-dump","(o, io = nil, options = {})","<p>Dump Ruby object <code>o</code> to a YAML string.  Optional\n<code>options</code> may be passed in to control the output format. …\n"],["dump","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-dump","(data_path)","<p>Dump <code>data_path</code> using pp\n"],["dump","REXML::Validation::Validator","classes/REXML/Validation/Validator.html#method-i-dump","()",""],["dump","String","classes/String.html#method-i-dump","()","<p>Produces a version of <em>str</em> with all nonprinting characters replaced\nby <code>\\nnn</code> notation and all special characters …\n"],["dump","Syck","classes/Syck.html#method-c-dump","( obj, io = nil )","<p>Converts <em>obj</em> to YAML and writes the YAML result to <em>io</em>.\n\n<pre><code>File.open( &#39;animals.yaml&#39;, &#39;w&#39; ) do |out|\n  YAML.dump( ...\n</code></pre>\n"],["dump","Syck","classes/Syck.html#method-c-dump","( obj, io = nil )","<p>Converts <em>obj</em> to YAML and writes the YAML result to <em>io</em>.\n\n<pre><code>File.open( &#39;animals.yaml&#39;, &#39;w&#39; ) do |out|\n  YAML.dump( ...\n</code></pre>\n"],["dump","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-dump","()",""],["dump_call","XMLRPC::Marshal","classes/XMLRPC/Marshal.html#method-i-dump_call","( methodName, *params )",""],["dump_response","XMLRPC::Marshal","classes/XMLRPC/Marshal.html#method-i-dump_response","( param )",""],["dump_stream","Psych","classes/Psych.html#method-c-dump_stream","(*objects)","<p>Dump a list of objects as separate documents to a document stream.\n<p>Example:\n\n<pre><code>Psych.dump_stream(&quot;foo\\n  &quot;, ...</code></pre>\n"],["dump_stream","Syck","classes/Syck.html#method-c-dump_stream","( *objs )","<p>Returns a YAML stream containing each of the items in <code>objs</code>,\neach having their own document.\n\n<pre><code>YAML.dump_stream( ...</code></pre>\n"],["dump_stream","Syck","classes/Syck.html#method-c-dump_stream","( *objs )","<p>Returns a YAML stream containing each of the items in <code>objs</code>,\neach having their own document.\n\n<pre><code>YAML.dump_stream( ...</code></pre>\n"],["dump_to_file","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-dump_to_file","(file)",""],["dup","Object","classes/Object.html#method-i-dup","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["dup","Rake::Cloneable","classes/Rake/Cloneable.html#method-i-dup","()","<p>Clone an object by making a new object and setting all the instance\nvariables to the same values.\n"],["dup","Singleton","classes/Singleton.html#method-i-dup","()","<p>Raises a TypeError to prevent duping.\n"],["dup","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-dup","()",""],["dup","TkTextIO","classes/TkTextIO.html#method-i-dup","()",""],["dup_vector","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-dup_vector","(vec)",""],["dynamic_width","Rake::Application","classes/Rake/Application.html#method-i-dynamic_width","()","<p>Calculate the dynamic width of the\n"],["dynamic_width","Rake::Application","classes/Rake/Application.html#method-i-dynamic_width","()","<p>Calculate the dynamic width of the\n"],["dynamic_width_stty","Rake::Application","classes/Rake/Application.html#method-i-dynamic_width_stty","()",""],["dynamic_width_stty","Rake::Application","classes/Rake/Application.html#method-i-dynamic_width_stty","()",""],["dynamic_width_tput","Rake::Application","classes/Rake/Application.html#method-i-dynamic_width_tput","()",""],["dynamic_width_tput","Rake::Application","classes/Rake/Application.html#method-i-dynamic_width_tput","()",""],["e2mm_message","E2MM","classes/E2MM.html#method-c-e2mm_message","(klass, exp)",""],["e2mm_message","E2MM","classes/E2MM.html#method-c-e2mm_message","(klass, exp)",""],["each","ARGF","classes/ARGF.html#method-i-each","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["each","Array","classes/Array.html#method-i-each","()","<p>Calls <em>block</em> once for each element in <code>self</code>, passing\nthat element as a parameter.\n<p>If no block is given, …\n"],["each","CSV","classes/CSV.html#method-i-each","()","<p>Yields each row of the data source in turn.\n<p>Support for Enumerable.\n<p>The data source must be open for reading. …\n"],["each","CSV::Row","classes/CSV/Row.html#method-i-each","(&block)","<p>Yields each pair of the row as header and field tuples (much like iterating\nover a Hash).\n<p>Support for …\n"],["each","CSV::Table","classes/CSV/Table.html#method-i-each","(&block)","<p>In the default mixed mode or row mode, iteration is the standard row major\nwalking of rows.  In column …\n"],["each","DBM","classes/DBM.html#method-i-each","()","<p>Calls the block once for each [key, value] pair in the database. Returns\nself.\n"],["each","Dir","classes/Dir.html#method-i-each","()","<p>Calls the block once for each entry in this directory, passing the filename\nof each entry as a parameter …\n"],["each","ENV","classes/ENV.html#method-c-each","()","<p>Yields each environment variable <code>name</code> and <code>value</code>.\n<p>If no block is given an Enumerator is returned.\n"],["each","Enumerator","classes/Enumerator.html#method-i-each","()","<p>Iterates over the block according to how this Enumerable was constructed.\nIf no block is given, returns …\n"],["each","GDBM","classes/GDBM.html#method-i-each","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> and the correspoding <em>value</em> as a parameter. …\n"],["each","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-each","(&block)","<p>Delegates to @hash\n"],["each","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-each","(&block)","<p>Iterator over dependency_order\n"],["each","Gem::Package::TarInput","classes/Gem/Package/TarInput.html#method-i-each","(&block)",""],["each","Gem::Package::TarReader","classes/Gem/Package/TarReader.html#method-i-each","()","<p>Iterates over files in the tarball yielding each entry\n"],["each","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-each","()","<p>Iterate over the specifications in the source index.\n"],["each","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-each","()","<p>Iterate over the specifications in the source index.\n"],["each","Gem::Specification","classes/Gem/Specification.html#method-c-each","()","<p>Enumerate every known spec.  See ::dirs= and ::add_spec to set the list of\nspecs.\n"],["each","GetoptLong","classes/GetoptLong.html#method-i-each","()","<p>Iterator version of `get&#39;.\n<p>The block is called repeatedly with two arguments: The first is the option\n…\n"],["each","Hash","classes/Hash.html#method-i-each","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the\nkey-value pair as parameters.\n<p>If no block is given, …\n"],["each","HttpServer::Table","classes/HttpServer/Table.html#method-i-each","()",""],["each","IO","classes/IO.html#method-i-each","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["each","Integer","classes/Integer.html#method-i-each","()",""],["each","Integer","classes/Integer.html#method-i-each","()",""],["each","Matrix","classes/Matrix.html#method-i-each","(which = :all)","<p>Yields all elements of the matrix, starting with those of the first row, or\nreturns an Enumerator is …\n"],["each","MyList","classes/MyList.html#method-i-each","()",""],["each","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-each","()",""],["each","Net::POP3","classes/Net/POP3.html#method-i-each","()",""],["each","Net::POP3","classes/Net/POP3.html#method-i-each","()",""],["each","Net::POP3","classes/Net/POP3.html#method-i-each","()",""],["each","Net::POP3","classes/Net/POP3.html#method-i-each","()",""],["each","OpenSSL::ASN1::Constructive","classes/OpenSSL/ASN1/Constructive.html#method-i-each","()","<p>Calls <em>block</em> once for each element in <code>self</code>, passing\nthat element as parameter <code>asn1</code>. If no block is given, …\n"],["each","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-each","(eol=$/)","<p>Executes the block for every line in the stream where lines are separated\nby <code>eol</code>.\n<p>See also #gets\n"],["each","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-each","()",""],["each","Prime","classes/Prime.html#method-i-each","(ubound = nil, generator = EratosthenesGenerator.new, &block)","<p>Iterates the given block over all prime numbers.\n<p>Parameters\n<p><code>ubound</code> &mdash; Optional. An arbitrary positive number. …\n"],["each","Prime::OldCompatibility","classes/Prime/OldCompatibility.html#method-i-each","(&block)","<p>Overwrites Prime#each.\n<p>Iterates the given block over all prime numbers. Note that enumeration\nstarts from …\n"],["each","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-each","(&block)","<p>Iterates the given block for each prime numbers.\n"],["each","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-each","(&block)","<p>Iterate over each node in the tree. Yields each node to <code>block</code>\ndepth first.\n"],["each","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-each","(system, site, home, gems, *extra_dirs)","<p>Iterates over each selected path yielding the directory and type.\n<p>Yielded types:\n<p>:system &mdash; Where Ruby&#39;s …\n"],["each","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-each","(&block)","<p>Iterate over the key/value pairs:\n\n<pre><code>attlist_decl.each { |attribute_name, attribute_value| ... }\n</code></pre>\n"],["each","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-each","( &block )",""],["each","REXML::Parent","classes/REXML/Parent.html#method-i-each","(&block)",""],["each","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-each","()",""],["each","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-each","(element, path, namespaces=EMPTY_HASH, &block)",""],["each","REXML::SyncEnumerator","classes/REXML/SyncEnumerator.html#method-i-each","()","<p>Enumerates rows of the Enumerable objects.\n"],["each","REXML::XPath","classes/REXML/XPath.html#method-c-each","(element, path=nil, namespaces=nil, variables={})","<p>Iterates over nodes that match the given path, calling the supplied block\nwith the match.\n<p>element &mdash; The …\n"],["each","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-each","(&block)",""],["each","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-each","(&block)",""],["each","Range","classes/Range.html#method-i-each","()","<p>Iterates over the elements <em>rng</em>, passing each in turn to the block.\nYou can only iterate if the start …\n"],["each","Rinda::NotifyTemplateEntry","classes/Rinda/NotifyTemplateEntry.html#method-i-each","()","<p>Yields event/tuple pairs until this NotifyTemplateEntry expires.\n"],["each","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-i-each","()","<p>Iterates over all discovered TupleSpaces starting with the primary.\n"],["each","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-each","()","<p>Iterate through the tuple, yielding the index or key, and the value, thus\nensuring arrays are iterated …\n"],["each","RubyVM::InstructionsLoader","classes/RubyVM/InstructionsLoader.html#method-i-each","()",""],["each","SDBM","classes/SDBM.html#method-i-each","()",""],["each","Set","classes/Set.html#method-i-each","()","<p>Calls the given block once for each element in the set, passing the element\nas parameter.  Returns an …\n"],["each","Shell::Cat","classes/Shell/Cat.html#method-i-each","(rs = nil)",""],["each","Shell::Concat","classes/Shell/Concat.html#method-i-each","(rs = nil)",""],["each","Shell::Echo","classes/Shell/Echo.html#method-i-each","(rs = nil)",""],["each","Shell::Filter","classes/Shell/Filter.html#method-i-each","(rs = nil)",""],["each","Shell::Glob","classes/Shell/Glob.html#method-i-each","(rs = nil)",""],["each","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-each","(rs = nil)",""],["each","Shell::Tee","classes/Shell/Tee.html#method-i-each","(rs = nil)",""],["each","Shell::Void","classes/Shell/Void.html#method-i-each","(rs = nil)",""],["each","StringIO","classes/StringIO.html#method-i-each","(*args)","<p>See IO#each.\n"],["each","Struct","classes/Struct.html#method-i-each","()","<p>Calls <em>block</em> once for each instance variable, passing the value as\na parameter.\n<p>If no block is given, an …\n"],["each","TkTextIO","classes/TkTextIO.html#method-i-each","(rs = $/)",""],["each","Vector","classes/Vector.html#method-i-each","(&block)","<p>Iterate over the elements of this vector\n"],["each","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-each","()",""],["each","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-each","()","<p>Iterates over the request headers\n"],["each","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-each","()","<p>Iterates over each header in the resopnse\n"],["each","WIN32OLE","classes/WIN32OLE.html#method-i-each","()","<p>Iterates over each item of OLE collection which has IEnumVARIANT interface.\n\n<pre><code>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...</code></pre>\n"],["each","Win32::Registry","classes/Win32/Registry.html#method-i-each","()",""],["each","YAML::DBM","classes/YAML/DBM.html#method-i-each","()",""],["each","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-each","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each2","Vector","classes/Vector.html#method-i-each2","(v)","<p>Iterate over the elements of this vector and <code>v</code> in conjunction.\n"],["each_active_object","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-each_active_object","()",""],["each_address","Resolv","classes/Resolv.html#method-c-each_address","(name, &block)","<p>Iterates over all IP addresses for <code>name</code>.\n"],["each_address","Resolv","classes/Resolv.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code>.\n"],["each_address","Resolv::DNS","classes/Resolv/DNS.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the DNS\nresolver.\n<p><code>name</code> can be a Resolv::DNS::Name …\n"],["each_address","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-each_address","(name, &proc)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the\nhosts file.\n"],["each_ancestor","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-each_ancestor","()","<p>Iterates the ancestors of this class or module for which an\nRDoc::ClassModule exists.\n"],["each_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-each_attribute","()","<p>Iterator for attributes\n"],["each_byte","ARGF","classes/ARGF.html#method-i-each_byte","()","\n<pre><code>Iterates over each byte of each file in +ARGV+.\nA byte is returned as a +Fixnum+ in the range 0..255. ...</code></pre>\n"],["each_byte","IO","classes/IO.html#method-i-each_byte","()","<p>Calls the given block once for each byte (0..255) in <em>ios</em>, passing\nthe byte as an argument. The stream …\n"],["each_byte","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-each_byte","()","<p>Calls the given block once for each byte in the stream.\n"],["each_byte","String","classes/String.html#method-i-each_byte","()","<p>Passes each byte in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre><code>&quot;hello&quot;.each_byte ...</code></pre>\n"],["each_byte","StringIO","classes/StringIO.html#method-i-each_byte","()","<p>See IO#each_byte.\n"],["each_byte","TkTextIO","classes/TkTextIO.html#method-i-each_byte","()",""],["each_byte","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-each_byte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_capitalized","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-each_capitalized","()","<p>As for #each_header, except the keys are provided in capitalized form.\n<p>Note that header names are capitalized …\n"],["each_capitalized_name","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-each_capitalized_name","()","<p>Iterates through the header names in the header, passing capitalized header\nnames to the code block. …\n"],["each_char","ARGF","classes/ARGF.html#method-i-each_char","()","<p>Iterates over each character of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["each_char","IO","classes/IO.html#method-i-each_char","()","<p>Calls the given block once for each character in <em>ios</em>, passing the\ncharacter as an argument. The stream …\n"],["each_char","String","classes/String.html#method-i-each_char","()","<p>Passes each character in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre><code>&quot;hello&quot;.each_char ...</code></pre>\n"],["each_char","StringIO","classes/StringIO.html#method-i-each_char","()","<p>See IO#each_char.\n"],["each_char","TkTextIO","classes/TkTextIO.html#method-i-each_char","()",""],["each_char","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-each_char","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_child","Pathname","classes/Pathname.html#method-i-each_child","(with_directory=true, &b)","<p>Iterates over the children of the directory (files and subdirectories, not\nrecursive). It yields Pathname …\n"],["each_child","REXML::Parent","classes/REXML/Parent.html#method-i-each_child","(&block)",""],["each_classmodule","RDoc::Context","classes/RDoc/Context.html#method-i-each_classmodule","()","<p>Iterator for classes and modules\n"],["each_codepoint","ARGF","classes/ARGF.html#method-i-each_codepoint","()","<p>Iterates over each codepoint of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["each_codepoint","IO","classes/IO.html#method-i-each_codepoint","()","<p>Passes the <code>Integer</code> ordinal of each character in <em>ios</em>,\npassing the codepoint as an argument. The stream …\n"],["each_codepoint","String","classes/String.html#method-i-each_codepoint","()","<p>Passes the <code>Integer</code> ordinal of each character in <em>str</em>,\nalso known as a <em>codepoint</em> when applied to Unicode …\n"],["each_codepoint","StringIO","classes/StringIO.html#method-i-each_codepoint","()","<p>See IO#each_codepoint.\n"],["each_cons","Enumerable","classes/Enumerable.html#method-i-each_cons","(p1)","<p>Iterates the given block for each array of consecutive &lt;n&gt; elements. \nIf no block is given, returns …\n"],["each_const","Object","classes/Object.html#method-i-each_const","()",""],["each_const","OptionParser","classes/OptionParser.html#method-i-each_const","(path, base = ::Object)",""],["each_constant","RDoc::Context","classes/RDoc/Context.html#method-i-each_constant","()","<p>Iterator for constants\n"],["each_data","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-each_data","()",""],["each_document","Syck","classes/Syck.html#method-c-each_document","( io, &block )","<p>Calls <em>block</em> with each consecutive document in the YAML stream\ncontained in <em>io</em>.\n\n<pre><code>File.open( &#39;many-docs.yaml&#39; ...</code></pre>\n"],["each_document","Syck","classes/Syck.html#method-c-each_document","( io, &block )","<p>Calls <em>block</em> with each consecutive document in the YAML stream\ncontained in <em>io</em>.\n\n<pre><code>File.open( &#39;many-docs.yaml&#39; ...</code></pre>\n"],["each_element","REXML::Element","classes/REXML/Element.html#method-i-each_element","( xpath=nil )","<p>Synonym for Element.elements.each\n"],["each_element_with_attribute","REXML::Element","classes/REXML/Element.html#method-i-each_element_with_attribute","( key, value=nil, max=0, name=nil )","<p>Iterates through the child elements, yielding for each Element that has a\nparticular attribute set.\n<p>key … &mdash; "],["each_element_with_text","REXML::Element","classes/REXML/Element.html#method-i-each_element_with_text","( text=nil, max=0, name=nil )","<p>Iterates through the children, yielding for each Element that has a\nparticular text set.\n<p>text &mdash; the text …\n"],["each_entry","Enumerable","classes/Enumerable.html#method-i-each_entry","(*args)","<p>Calls <em>block</em> once for each element in <code>self</code>, passing\nthat element as a parameter, converting multiple values …\n"],["each_entry","Gem::Package::TarReader","classes/Gem/Package/TarReader.html#method-i-each_entry","()",""],["each_entry","Pathname","classes/Pathname.html#method-i-each_entry","()","<p>Iterates over the entries (files and subdirectories) in the directory.  It\nyields a Pathname object for …\n"],["each_export","Exports::Bcc","classes/Exports/Bcc.html#method-i-each_export","(objs)",""],["each_export","Exports::Cygwin","classes/Exports/Cygwin.html#method-i-each_export","(objs)",""],["each_export","Exports::Mingw","classes/Exports/Mingw.html#method-i-each_export","(objs)",""],["each_export","Exports::Mswin","classes/Exports/Mswin.html#method-i-each_export","(objs)",""],["each_filename","Pathname","classes/Pathname.html#method-i-each_filename","()","<p>Iterates over each component of the path.\n\n<pre><code>Pathname.new(&quot;/usr/bin/ruby&quot;).each_filename {|filename| ... ...\n</code></pre>\n"],["each_firstbyte_range","ActionMap","classes/ActionMap.html#method-c-each_firstbyte_range","(prefix, region_rects)",""],["each_header","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-each_header","()","<p>Iterates through the header names and values, passing in the name and value\nto the code block supplied. …\n"],["each_include","RDoc::Context","classes/RDoc/Context.html#method-i-each_include","()","<p>Iterator for included modules\n"],["each_index","Array","classes/Array.html#method-i-each_index","()","<p>Same as <code>Array#each</code>, but passes the index of the element\ninstead of the element itself.\n<p>If no block is …\n"],["each_index","REXML::Parent","classes/REXML/Parent.html#method-i-each_index","( &block )",""],["each_installed_parser","XMLRPC::XMLParser","classes/XMLRPC/XMLParser.html#method-c-each_installed_parser","()","<p>yields an instance of each installed parser\n"],["each_installed_writer","XMLRPC::XMLWriter","classes/XMLRPC/XMLWriter.html#method-c-each_installed_writer","()","<p>yields an instance of each installed XML writer\n"],["each_key","DBM","classes/DBM.html#method-i-each_key","()","<p>Calls the block once for each key string in the database. Returns self.\n"],["each_key","ENV","classes/ENV.html#method-c-each_key","()","<p>Yields each environment variable name.\n<p>An Enumerator is returned if no block is given.\n"],["each_key","GDBM","classes/GDBM.html#method-i-each_key","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> as a parameter.\n"],["each_key","Hash","classes/Hash.html#method-i-each_key","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the key as\na parameter.\n<p>If no block is given, an enumerator …\n"],["each_key","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-each_key","()",""],["each_key","SDBM","classes/SDBM.html#method-i-each_key","()",""],["each_key","Win32::Registry","classes/Win32/Registry.html#method-i-each_key","()","<p>Enumerate subkeys.\n<p>subkey is String which contains name of subkey. wtime is last write time as\nFILETIME …\n"],["each_line","ARGF","classes/ARGF.html#method-i-each_line","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["each_line","Exports::Bcc","classes/Exports/Bcc.html#method-i-each_line","(objs, &block)",""],["each_line","Exports::Cygwin","classes/Exports/Cygwin.html#method-i-each_line","(objs, &block)",""],["each_line","Exports::Mswin","classes/Exports/Mswin.html#method-i-each_line","(objs, &block)",""],["each_line","IO","classes/IO.html#method-i-each_line","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["each_line","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-each_line","(eol=$/)",""],["each_line","Pathname","classes/Pathname.html#method-i-each_line","(p1 = v1, p2 = v2, p3 = v3)","<p>#each_line iterates over the line in the file.  It yields a String object\nfor each line.\n<p>This method is …\n"],["each_line","String","classes/String.html#method-i-each_line","(p1 = v1)","<p>Splits <em>str</em> using the supplied parameter as the record separator\n(<code>$/</code> by default), passing each substring …\n"],["each_line","StringIO","classes/StringIO.html#method-i-each_line","(*args)","<p>See IO#each.\n"],["each_line","TkTextIO","classes/TkTextIO.html#method-i-each_line","(rs = $/)",""],["each_line","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-each_line","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each_mail","Net::POP3","classes/Net/POP3.html#method-i-each_mail","()","<p>Yields each message to the passed-in block in turn. Equivalent to:\n\n<pre><code>pop3.mails.each do |popmail|\n  .... ...\n</code></pre>\n"],["each_mail","Net::POP3","classes/Net/POP3.html#method-i-each_mail","()","<p>Yields each message to the passed-in block in turn. Equivalent to:\n\n<pre><code>pop3.mails.each do |popmail|\n  .... ...\n</code></pre>\n"],["each_mail","Net::POP3","classes/Net/POP3.html#method-i-each_mail","()","<p>Yields each message to the passed-in block in turn. Equivalent to:\n\n<pre><code>pop3.mails.each do |popmail|\n  .... ...\n</code></pre>\n"],["each_mail","Net::POP3","classes/Net/POP3.html#method-i-each_mail","()","<p>Yields each message to the passed-in block in turn. Equivalent to:\n\n<pre><code>pop3.mails.each do |popmail|\n  .... ...\n</code></pre>\n"],["each_method","RDoc::Context","classes/RDoc/Context.html#method-i-each_method","()","<p>Iterator for methods\n"],["each_name","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-each_name","()","<p>Iterates through the header names in the header, passing each header name\nto the code block.\n"],["each_name","Object","classes/Object.html#method-i-each_name","(pat)",""],["each_name","Resolv","classes/Resolv.html#method-i-each_name","(address)","<p>Iterates over all hostnames for <code>address</code>.\n"],["each_name","Resolv","classes/Resolv.html#method-c-each_name","(address, &proc)","<p>Iterates over all hostnames for <code>address</code>.\n"],["each_name","Resolv::DNS","classes/Resolv/DNS.html#method-i-each_name","(address)","<p>Iterates over all hostnames for <code>address</code> retrieved from the DNS\nresolver.\n<p><code>address</code> must be a Resolv::IPv4 …\n"],["each_name","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-each_name","(address, &proc)","<p>Iterates over all hostnames for <code>address</code> retrieved from the\nhosts file.\n"],["each_name_of","RDoc::Markup::Attribute","classes/RDoc/Markup/Attribute.html#method-c-each_name_of","(bitmap)","<p>yields each attribute name in <code>bitmap</code>\n"],["each_names_with_len","Object","classes/Object.html#method-i-each_names_with_len","(pat, prefix_optional=nil)",""],["each_node","Syck","classes/Syck.html#method-c-each_node","( io, &doc_proc )","<p>Calls <em>block</em> with a tree of +YAML::BaseNodes+, one tree for each\nconsecutive document in the YAML stream …\n"],["each_node","Syck","classes/Syck.html#method-c-each_node","( io, &doc_proc )","<p>Calls <em>block</em> with a tree of +YAML::BaseNodes+, one tree for each\nconsecutive document in the YAML stream …\n"],["each_object","ObjectSpace","classes/ObjectSpace.html#method-c-each_object","(p1 = v1)","<p>Calls the block once for each living, nonimmediate object in this Ruby\nprocess. If <em>module</em> is specified, …\n"],["each_option","GetoptLong","classes/GetoptLong.html#method-i-each_option","()","<p>`each_option&#39; is an alias of `each&#39;.\n"],["each_option","OptionParser::List","classes/OptionParser/List.html#method-i-each_option","(&block)","<p>Iterates over each option, passing the option to the <code>block</code>.\n"],["each_pair","DBM","classes/DBM.html#method-i-each_pair","()","<p>Calls the block once for each [key, value] pair in the database. Returns\nself.\n"],["each_pair","ENV","classes/ENV.html#method-c-each_pair","()","<p>Yields each environment variable <code>name</code> and <code>value</code>.\n<p>If no block is given an Enumerator is returned.\n"],["each_pair","GDBM","classes/GDBM.html#method-i-each_pair","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> and the correspoding <em>value</em> as a parameter. …\n"],["each_pair","Hash","classes/Hash.html#method-i-each_pair","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the\nkey-value pair as parameters.\n<p>If no block is given, …\n"],["each_pair","SDBM","classes/SDBM.html#method-i-each_pair","()",""],["each_pair","Struct","classes/Struct.html#method-i-each_pair","()","<p>Calls <em>block</em> once for each instance variable, passing the name (as\na symbol) and the value as parameters. …\n"],["each_pair","YAML::DBM","classes/YAML/DBM.html#method-i-each_pair","()","<p>Calls the given block once for each <code>key</code>, <code>value</code>\npair in the database.\n<p>Returns <code>self</code>.\n"],["each_parent","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-each_parent","()","<p>Yields each parent of this CodeObject.  See also\nRDoc::ClassModule#each_ancestor\n"],["each_path","Syck::YPath","classes/Syck/YPath.html#method-c-each_path","( str )",""],["each_prime","Integer","classes/Integer.html#method-c-each_prime","(ubound)","<p>Iterates the given block over all prime numbers.\n<p>See <code>Prime</code>#each for more details.\n"],["each_prime","Integer","classes/Integer.html#method-c-each_prime","(ubound)","<p>Iterates the given block over all prime numbers.\n<p>See <code>Prime</code>#each for more details.\n"],["each_recursive","REXML::Node","classes/REXML/Node.html#method-i-each_recursive","()","<p>Visit all subnodes of <code>self</code> recursively\n"],["each_resource","Resolv::DNS","classes/Resolv/DNS.html#method-i-each_resource","(name, typeclass, &proc)","<p>Iterates over all <code>typeclass</code> DNS resources for\n<code>name</code>.  See #getresource for argument details.\n"],["each_section","RDoc::Context","classes/RDoc/Context.html#method-i-each_section","()","<p>Iterator for each section&#39;s contents sorted by title.  The\n<code>section</code>, the section&#39;s <code>constants</code> and …\n"],["each_slice","Enumerable","classes/Enumerable.html#method-i-each_slice","(p1)","<p>Iterates the given block for each slice of &lt;n&gt; elements.  If no block\nis given, returns an enumerator. …\n"],["each_strongly_connected_component","TSort","classes/TSort.html#method-i-each_strongly_connected_component","()","<p>The iterator version of the #strongly_connected_components method.\n<code><em>obj</em>.each_strongly_connected_component</code> …\n"],["each_strongly_connected_component_from","TSort","classes/TSort.html#method-i-each_strongly_connected_component_from","(node, id_map={}, stack=[])","<p>Iterates over strongly connected component in the subgraph reachable from\n<em>node</em>.\n<p>Return value is unspecified. …\n"],["each_top_level_statement","RubyLex","classes/RubyLex.html#method-i-each_top_level_statement","()",""],["each_value","DBM","classes/DBM.html#method-i-each_value","()","<p>Calls the block once for each value string in the database. Returns self.\n"],["each_value","ENV","classes/ENV.html#method-c-each_value","()","<p>Yields each environment variable <code>value</code>.\n<p>An Enumerator is returned if no block was given.\n"],["each_value","GDBM","classes/GDBM.html#method-i-each_value","()","<p>Executes <em>block</em> for each key in the database, passing the\ncorresponding <em>value</em> as a parameter.\n"],["each_value","Hash","classes/Hash.html#method-i-each_value","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the value\nas a parameter.\n<p>If no block is given, an enumerator …\n"],["each_value","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-each_value","()","<p>Iterates through header values, passing each value to the code block.\n"],["each_value","SDBM","classes/SDBM.html#method-i-each_value","()",""],["each_value","Win32::Registry","classes/Win32/Registry.html#method-i-each_value","()","<p>Enumerate values.\n"],["each_value","YAML::DBM","classes/YAML/DBM.html#method-i-each_value","()","<p>Calls the given block for each value in database.\n<p>Returns <code>self</code>.\n"],["each_with_index","Enumerable","classes/Enumerable.html#method-i-each_with_index","(*args)","<p>Calls <em>block</em> with two arguments, the item and its index, for each\nitem in <em>enum</em>.  Given arguments are passed …\n"],["each_with_index","Enumerator","classes/Enumerator.html#method-i-each_with_index","()","<p>Same as Enumerator#with_index(0), i.e. there is no starting offset.\n<p>If no block is given, a new Enumerator …\n"],["each_with_index","Matrix","classes/Matrix.html#method-i-each_with_index","(which = :all)","<p>Same as #each, but the row index and column index in addition to the\nelement\n\n<pre><code>Matrix[ [1,2], [3,4] ].each_with_index ...</code></pre>\n"],["each_with_object","Enumerable","classes/Enumerable.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object given,\nand returns the initially given …\n"],["each_with_object","Enumerator","classes/Enumerator.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object,\n<code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["eat","Object","classes/Object.html#method-i-eat","(n)",""],["echo","Curses","classes/Curses.html#method-c-echo","()","<p>Enables characters typed by the user to be echoed by Curses.getch as they\nare typed.\n"],["echo","RingEcho","classes/RingEcho.html#method-i-echo","(str)",""],["echo","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-echo","(*strings)",""],["echo=","IO","classes/IO.html#method-i-echo-3D","(p1)","<p>Enables/disables echo back. On some platforms, all combinations of this\nflags and raw/cooked mode may …\n"],["echo?","IO","classes/IO.html#method-i-echo-3F","()","<p>Returns <code>true</code> if echo back is enabled.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["edgemost","Knights_Tour","classes/Knights_Tour.html#method-i-edgemost","(nxt, pos)","<p>Select the square nearest the edge of the board\n"],["edit","DemoTree","classes/DemoTree.html#method-c-edit","(where, tree, list, node)",""],["edit","Syck::Stream","classes/Syck/Stream.html#method-i-edit","( doc_num, doc )",""],["edit","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-c-edit","(master, *args)",""],["edit","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-edit","(item, text, *args)",""],["edit","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-edit","(*args)",""],["edit","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-edit","(node, text, *args)",""],["edit","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-edit","(*args)",""],["edit","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-edit","(*args)",""],["egid","Process","classes/Process.html#method-c-egid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre><code>Process.egid   #=&gt; 500\n</code></pre>\n"],["egid=","Process","classes/Process.html#method-c-egid-3D","(p1)","<p>Sets the effective group ID for this process. Not available on all\nplatforms.\n"],["ehlo","Net::SMTP","classes/Net/SMTP.html#method-i-ehlo","(domain)",""],["ehlo","Net::SMTP","classes/Net/SMTP.html#method-i-ehlo","(domain)",""],["eid","Process::GID","classes/Process/GID.html#method-c-eid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre><code>Process.egid   #=&gt; 500\n</code></pre>\n"],["eid","Process::UID","classes/Process/UID.html#method-c-eid","()","<p>Returns the effective user ID for this process.\n\n<pre><code>Process.euid   #=&gt; 501\n</code></pre>\n"],["eigen","Matrix","classes/Matrix.html#method-i-eigen","()",""],["eigensystem","Matrix","classes/Matrix.html#method-i-eigensystem","()","<p>Returns the Eigensystem of the matrix; see\n<code>EigenvalueDecomposition</code>.\n\n<pre><code>m = Matrix[[1, 2], [3, 4]]\nv, d, v_inv ...</code></pre>\n"],["eigenvalue_matrix","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvalue_matrix","()","<p>Returns the block diagonal eigenvalue matrix <code>D</code>\n"],["eigenvalues","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvalues","()","<p>Returns the eigenvalues in an array\n"],["eigenvector_matrix","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix","()","<p>Returns the eigenvector matrix <code>V</code>\n"],["eigenvector_matrix_inv","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix_inv","()","<p>Returns the inverse of the eigenvector matrix <code>V</code>\n"],["eigenvectors","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvectors","()","<p>Returns an array of the eigenvectors\n"],["ele","XMLRPC::XMLWriter::Abstract","classes/XMLRPC/XMLWriter/Abstract.html#method-i-ele","(name, *children)",""],["element","Matrix","classes/Matrix.html#method-i-element","(i, j)",""],["element","Vector","classes/Vector.html#method-i-element","(i)",""],["element","XMLRPC::XMLWriter::Simple","classes/XMLRPC/XMLWriter/Simple.html#method-i-element","(name, attrs, *children)",""],["element","XMLRPC::XMLWriter::XMLParser","classes/XMLRPC/XMLWriter/XMLParser.html#method-i-element","(name, attrs, *children)",""],["element=","REXML::Attribute","classes/REXML/Attribute.html#method-i-element-3D","( element )","<p>Sets the element of which this object is an attribute.  Normally, this is\nnot directly called.\n<p>Returns …\n"],["element_activate","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_activate","(*args)",""],["element_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_bind","(tag, context, *args)",""],["element_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_bind_append","(tag, context, *args)",""],["element_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_bind_remove","(tag, context)",""],["element_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_bindinfo","(tag, context=nil)",""],["element_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_cget","(id, option)",""],["element_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-element_cget","(tagOrId, option)",""],["element_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_cget_strict","(id, option)",""],["element_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-element_cget_strict","(tagOrId, option)",""],["element_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_cget_tkstring","(id, option)",""],["element_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-element_cget_tkstring","(tagOrId, option)",""],["element_closest","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_closest","(x, y, var, *args)",""],["element_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_configinfo","(id, slot=nil)",""],["element_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-element_configinfo","(tagOrId, slot=nil)",""],["element_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_configure","(*args)",""],["element_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-element_configure","(tagOrId, slot, value=None)",""],["element_create","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_create","(id=nil, keys={})",""],["element_create","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-element_create","(name, type, *args)",""],["element_create_image","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-element_create_image","(name, *args)",""],["element_create_vsapi","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-element_create_vsapi","(name, class_name, part_id, *args)",""],["element_deactivate","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_deactivate","(*ids)",""],["element_delete","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_delete","(*ids)",""],["element_exist?","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_exist-3F","(id)",""],["element_initialize_arguments?","RSS::Utils","classes/RSS/Utils.html#method-i-element_initialize_arguments-3F","(args)",""],["element_lappend","TkVariable","classes/TkVariable.html#method-i-element_lappend","(idxs, *elems)",""],["element_lappend","TkVariable","classes/TkVariable.html#method-i-element_lappend","(idxs, *elems)",""],["element_lget","TkVariable","classes/TkVariable.html#method-i-element_lget","(elem_idxs, idx)",""],["element_lget","TkVariable","classes/TkVariable.html#method-i-element_lget","(elem_idxs, idx)",""],["element_lget_f","TkVariable","classes/TkVariable.html#method-i-element_lget_f","(elem_idxs, idx)",""],["element_lget_f","TkVariable","classes/TkVariable.html#method-i-element_lget_f","(elem_idxs, idx)",""],["element_lget_i","TkVariable","classes/TkVariable.html#method-i-element_lget_i","(elem_idxs, idx)",""],["element_lget_i","TkVariable","classes/TkVariable.html#method-i-element_lget_i","(elem_idxs, idx)",""],["element_lindex","TkVariable","classes/TkVariable.html#method-i-element_lindex","(elem_idxs, idx)",""],["element_lindex","TkVariable","classes/TkVariable.html#method-i-element_lindex","(elem_idxs, idx)",""],["element_lset","TkVariable","classes/TkVariable.html#method-i-element_lset","(elem_idxs, idx, val)",""],["element_lset","TkVariable","classes/TkVariable.html#method-i-element_lset","(elem_idxs, idx, val)",""],["element_names","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_names","(*pats)",""],["element_names","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-element_names","()",""],["element_options","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-element_options","(elem)",""],["element_show","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_show","(*names)",""],["element_to_a","TkVariable","classes/TkVariable.html#method-i-element_to_a","(*idxs)",""],["element_to_a","TkVariable","classes/TkVariable.html#method-i-element_to_a","(*idxs)",""],["element_to_f","TkVariable","classes/TkVariable.html#method-i-element_to_f","(*idxs)",""],["element_to_f","TkVariable","classes/TkVariable.html#method-i-element_to_f","(*idxs)",""],["element_to_i","TkVariable","classes/TkVariable.html#method-i-element_to_i","(*idxs)",""],["element_to_i","TkVariable","classes/TkVariable.html#method-i-element_to_i","(*idxs)",""],["element_to_s","TkVariable","classes/TkVariable.html#method-i-element_to_s","(*idxs)",""],["element_to_s","TkVariable","classes/TkVariable.html#method-i-element_to_s","(*idxs)",""],["element_to_sym","TkVariable","classes/TkVariable.html#method-i-element_to_sym","(*idxs)",""],["element_to_sym","TkVariable","classes/TkVariable.html#method-i-element_to_sym","(*idxs)",""],["element_type","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-element_type","(id)",""],["elementdecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-elementdecl","(content)","<p>&lt;!ELEMENT …&gt;\n"],["elementdecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-elementdecl","(content)","<p>&lt;!ELEMENT …&gt;\n"],["elementdecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-elementdecl-3F","()","<p>Content: [ String text ]\n"],["elements","Vector","classes/Vector.html#method-c-elements","(array, copy = true)","<p>Creates a vector from an Array.  The optional second argument specifies\nwhether the array itself or a …\n"],["elements_to_f","Matrix","classes/Matrix.html#method-i-elements_to_f","()",""],["elements_to_f","Vector","classes/Vector.html#method-i-elements_to_f","()",""],["elements_to_i","Matrix","classes/Matrix.html#method-i-elements_to_i","()",""],["elements_to_i","Vector","classes/Vector.html#method-i-elements_to_i","()",""],["elements_to_r","Matrix","classes/Matrix.html#method-i-elements_to_r","()",""],["elements_to_r","Vector","classes/Vector.html#method-i-elements_to_r","()",""],["emacs_editing_mode","Readline","classes/Readline.html#method-c-emacs_editing_mode","()","<p>Specifies Emacs editing mode. The default is this mode. See the manual of\nGNU Readline for details of …\n"],["emacs_editing_mode?","Readline","classes/Readline.html#method-c-emacs_editing_mode-3F","()","<p>Returns true if emacs mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["email_to_name","Gem::Security","classes/Gem/Security.html#method-c-email_to_name","(email_address, munge_re)","<p>Turns <code>email_address</code> into an OpenSSL::X509::Name\n"],["embDefBg","Object","classes/Object.html#method-i-embDefBg","(w)",""],["embDefBg2","Object","classes/Object.html#method-i-embDefBg2","(w)",""],["embPlotDown","Object","classes/Object.html#method-i-embPlotDown","(w, x, y)",""],["embPlotDown2","Object","classes/Object.html#method-i-embPlotDown2","(w, x, y)",""],["embPlotMove","Object","classes/Object.html#method-i-embPlotMove","(w, x, y)",""],["embPlotMove2","Object","classes/Object.html#method-i-embPlotMove2","(w, x, y)",""],["emit","Object::Syck::Emitter","classes/Object/Syck/Emitter.html#method-i-emit","(p1, &block)","<p>YAML::Syck::Emitter.emit( object_id ) { |out| … }\n"],["emit","Prelude","classes/Prelude.html#method-i-emit","(outfile)",""],["emit","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-emit","()",""],["emit","Syck::Stream","classes/Syck/Stream.html#method-i-emit","( io = nil )",""],["emitter","Syck","classes/Syck.html#method-c-emitter","()","<p>Returns a new default emitter\n"],["emitter","Syck","classes/Syck.html#method-c-emitter","()","<p>Returns a new default emitter\n"],["empty","Matrix","classes/Matrix.html#method-c-empty","(row_size = 0, column_size = 0)","<p>Creates a empty matrix of <code>row_size</code> x <code>column_size</code>.\nAt least one of <code>row_size</code> or <code>column_size</code> must be\n0. …\n"],["empty","Psych::Handler","classes/Psych/Handler.html#method-i-empty","()","<p>Called when an empty event happens. (Which, as far as I can tell, is\nnever).\n"],["empty?","Array","classes/Array.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <code>self</code> contains no elements.\n\n<pre><code>[].empty?   #=&gt; true\n</code></pre>\n"],["empty?","DBM","classes/DBM.html#method-i-empty-3F","()","<p>Returns true if the database is empty, false otherwise.\n"],["empty?","ENV","classes/ENV.html#method-c-empty-3F","()","<p>Returns true when there are no environment variables\n"],["empty?","GDBM","classes/GDBM.html#method-i-empty-3F","()","<p>Returns true if the database is empty.\n"],["empty?","Gem::Package::TarHeader","classes/Gem/Package/TarHeader.html#method-i-empty-3F","()","<p>Is the tar entry empty?\n"],["empty?","Gem::Platform","classes/Gem/Platform.html#method-i-empty-3F","()",""],["empty?","Hash","classes/Hash.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>hsh</em> contains no key-value pairs.\n\n<pre><code>{}.empty?   #=&gt; true\n</code></pre>\n"],["empty?","Matrix","classes/Matrix.html#method-i-empty-3F","()","<p>Returns <code>true</code> if this is an empty matrix, i.e. if the number of\nrows or the number of columns is 0.\n"],["empty?","Queue","classes/Queue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty?","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-empty-3F","()","<p>Does this document have no parts?\n"],["empty?","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-empty-3F","()","<p>Is the ListItem empty?\n"],["empty?","REXML::IOSource","classes/REXML/IOSource.html#method-i-empty-3F","()",""],["empty?","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-empty-3F","()","<p>Returns true if there are no more events\n"],["empty?","REXML::Source","classes/REXML/Source.html#method-i-empty-3F","()","<p>@return true if the Source is exhausted\n"],["empty?","REXML::Text","classes/REXML/Text.html#method-i-empty-3F","()",""],["empty?","SDBM","classes/SDBM.html#method-i-empty-3F","()",""],["empty?","Set","classes/Set.html#method-i-empty-3F","()","<p>Returns true if the set contains no elements.\n"],["empty?","String","classes/String.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>str</em> has a length of zero.\n\n<pre><code>&quot;hello&quot;.empty?   #=&gt; false\n&quot;&quot;.empty?        #=&gt; true\n</code></pre>\n"],["empty?","StringScanner","classes/StringScanner.html#method-i-empty-3F","()","<p>Equivalent to #eos?. This method is obsolete, use #eos? instead.\n"],["empty?","Symbol","classes/Symbol.html#method-i-empty-3F","()","<p>Returns that <em>sym</em> is :“” or not.\n"],["empty?","ThreadsWait","classes/ThreadsWait.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no threads in the pool still\nrunning.\n"],["empty?","ThreadsWait","classes/ThreadsWait.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no threads in the pool still\nrunning.\n"],["empty_action","ActionMap","classes/ActionMap.html#method-i-empty_action","()",""],["enable","GC","classes/GC.html#method-c-enable","()","<p>Enables garbage collection, returning <code>true</code> if garbage\ncollection was previously disabled.\n\n<pre><code>GC.disable  ...</code></pre>\n"],["enable","GC::Profiler","classes/GC/Profiler.html#method-c-enable","()","<p>Starts the GC profiler.\n"],["enable","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-enable","(idx)",""],["enable","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-enable","()",""],["enableMnemonics","Tk::Tile::KeyNav","classes/Tk/Tile/KeyNav.html#method-c-enableMnemonics","(w)",""],["enable_C_comments","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-enable_C_comments","()",""],["enable_close","DL::Handle","classes/DL/Handle.html#method-i-enable_close","()","<p>Enable a call to dlclose() when this DL::Handle is garbage collected.\n"],["enable_config","Object","classes/Object.html#method-i-enable_config","(config, default=nil)","<p>Tests for the presence of an –enable-<code>config</code> or\n–disable-<code>config</code> option. Returns true if the enable option …\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-c-enable_ssl","(*args)","<p>Enable SSL for all new instances. <code>params</code> is passed to\nOpenSSL::SSLContext#set_params.\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-i-enable_ssl","(verify_or_params = {}, certs = nil, port = nil)","<p>Enables SSL for this instance.  Must be called before the connection is\nestablished to have any effect. …\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-i-enable_ssl","(verify_or_params = {}, certs = nil, port = nil)","<p>Enables SSL for this instance.  Must be called before the connection is\nestablished to have any effect. …\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-c-enable_ssl","(*args)","<p>Enable SSL for all new instances. <code>params</code> is passed to\nOpenSSL::SSLContext#set_params.\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-i-enable_ssl","(verify_or_params = {}, certs = nil, port = nil)","<p>Enables SSL for this instance.  Must be called before the connection is\nestablished to have any effect. …\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-c-enable_ssl","(*args)","<p>Enable SSL for all new instances. <code>params</code> is passed to\nOpenSSL::SSLContext#set_params.\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-i-enable_ssl","(verify_or_params = {}, certs = nil, port = nil)","<p>Enables SSL for this instance.  Must be called before the connection is\nestablished to have any effect. …\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-c-enable_ssl","(*args)","<p>Enable SSL for all new instances. <code>params</code> is passed to\nOpenSSL::SSLContext#set_params.\n"],["enable_ssl","Net::SMTP","classes/Net/SMTP.html#method-i-enable_ssl","(context = SMTP.default_ssl_context)",""],["enable_ssl","Net::SMTP","classes/Net/SMTP.html#method-i-enable_ssl","(context = SMTP.default_ssl_context)",""],["enable_starttls","Net::SMTP","classes/Net/SMTP.html#method-i-enable_starttls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object. <code>context</code> is a\nOpenSSL::SSL::SSLContext object.\n"],["enable_starttls","Net::SMTP","classes/Net/SMTP.html#method-i-enable_starttls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object. <code>context</code> is a\nOpenSSL::SSL::SSLContext object.\n"],["enable_starttls_auto","Net::SMTP","classes/Net/SMTP.html#method-i-enable_starttls_auto","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object if server accepts.\n<code>context</code> is a OpenSSL::SSL::SSLContext …\n"],["enable_starttls_auto","Net::SMTP","classes/Net/SMTP.html#method-i-enable_starttls_auto","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object if server accepts.\n<code>context</code> is a OpenSSL::SSL::SSLContext …\n"],["enable_tls","Net::SMTP","classes/Net/SMTP.html#method-i-enable_tls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (SMTPS: SMTP over direct TLS connection) for this object. \nMust be called before the …\n"],["enable_tls","Net::SMTP","classes/Net/SMTP.html#method-i-enable_tls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (SMTPS: SMTP over direct TLS connection) for this object. \nMust be called before the …\n"],["enable_traversal","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-enable_traversal","()",""],["enable_traversal","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-enable_traversal","()",""],["enabled?","GC::Profiler","classes/GC/Profiler.html#method-c-enabled-3F","()","<p>The current status of GC profile mode.\n"],["enc_key","OpenSSL::PKCS7::RecipientInfo","classes/OpenSSL/PKCS7/RecipientInfo.html#method-i-enc_key","()",""],["enclose","ThreadGroup","classes/ThreadGroup.html#method-i-enclose","()","<p>Prevents threads from being added to or removed from the receiving\n<code>ThreadGroup</code>. New threads can still …\n"],["enclosed","TkcTag","classes/TkcTag.html#method-i-enclosed","(x1, y1, x2, y2)",""],["enclosed?","ThreadGroup","classes/ThreadGroup.html#method-i-enclosed-3F","()","<p>Returns <code>true</code> if <em>thgrp</em> is enclosed. See also\nThreadGroup#enclose.\n"],["encode","REXML::Encoding","classes/REXML/Encoding.html#method-i-encode","(string)",""],["encode","String","classes/String.html#method-i-encode","(*args)","<p>The first form returns a copy of <code>str</code> transcoded to encoding\n<code>encoding</code>. The second form returns a copy …\n"],["encode","URI::Escape","classes/URI/Escape.html#method-i-encode","(*arg)",""],["encode","XMLRPC::Base64","classes/XMLRPC/Base64.html#method-c-encode","(str)",""],["encode!","String","classes/String.html#method-i-encode-21","(*args)","<p>The first form transcodes the contents of <em>str</em> from str.encoding to\n<code>encoding</code>. The second form transcodes …\n"],["encode64","Base64","classes/Base64.html#method-i-encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with RFC 2045. Line feeds are added to …\n"],["encode_fallback","RDoc::Text","classes/RDoc/Text.html#method-c-encode_fallback","(character, encoding, fallback)","<p>Transcodes <code>character</code> to <code>encoding</code> with a\n<code>fallback</code> character.\n"],["encode_utf7","Net::IMAP","classes/Net/IMAP.html#method-c-encode_utf7","(s)","<p>Encode a string from UTF-8 format to modified UTF-7.\n"],["encode_utf8","Object","classes/Object.html#method-i-encode_utf8","(map)",""],["encode_www_form","URI","classes/URI.html#method-c-encode_www_form","(enum)","<p>Generate URL-encoded form data from given <code>enum</code>.\n<p>This generates application/x-www-form-urlencoded data …\n"],["encode_www_form_component","URI","classes/URI.html#method-c-encode_www_form_component","(str)","<p>Encode given <code>str</code> to URL-encoded form data.\n<p>This method doesn&#39;t convert *, -, ., 0-9, A-Z, _, a-z, …\n"],["encoded","XMLRPC::Base64","classes/XMLRPC/Base64.html#method-i-encoded","()",""],["encoding","IRB::FileInputMethod","classes/IRB/FileInputMethod.html#method-i-encoding","()",""],["encoding","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-encoding","()",""],["encoding","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-encoding","()",""],["encoding","MultiTkIp","classes/MultiTkIp.html#method-i-encoding","()",""],["encoding","MultiTkIp","classes/MultiTkIp.html#method-i-encoding","()",""],["encoding","MultiTkIp","classes/MultiTkIp.html#method-i-encoding","()",""],["encoding","MultiTkIp","classes/MultiTkIp.html#method-i-encoding","()",""],["encoding","REXML::Document","classes/REXML/Document.html#method-i-encoding","()","<p>@return the XMLDecl encoding of this document as an Encoding object. If no\nXMLDecl has been set, returns …\n"],["encoding","Regexp","classes/Regexp.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","String","classes/String.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Symbol","classes/Symbol.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of <em>sym</em>.\n"],["encoding","TclTkLib","classes/TclTkLib.html#method-c-encoding","()",""],["encoding","Tk","classes/Tk.html#method-i-encoding","()",""],["encoding","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-encoding","()",""],["encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-encoding-3D","(enc)",""],["encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-encoding-3D","(enc)",""],["encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-encoding-3D","(enc)",""],["encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-encoding-3D","(enc)",""],["encoding=","REXML::Encoding","classes/REXML/Encoding.html#method-i-encoding-3D","(encoding)",""],["encoding=","REXML::Source","classes/REXML/Source.html#method-i-encoding-3D","(enc)","<p>Inherited from Encoding Overridden to support optimized en/decoding\n"],["encoding=","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-encoding-3D","( enc )",""],["encoding=","TclTkLib","classes/TclTkLib.html#method-c-encoding-3D","(p1)",""],["encoding=","Tk","classes/Tk.html#method-i-encoding-3D","(name)",""],["encoding_convert_from","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convert_from","(str, enc=None)",""],["encoding_convert_from","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convert_from","(str, enc=None)",""],["encoding_convert_from","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convert_from","(str, enc=None)",""],["encoding_convert_from","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convert_from","(str, enc=None)",""],["encoding_convert_to","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convert_to","(str, enc=None)",""],["encoding_convert_to","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convert_to","(str, enc=None)",""],["encoding_convert_to","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convert_to","(str, enc=None)",""],["encoding_convert_to","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convert_to","(str, enc=None)",""],["encoding_convertfrom","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convertfrom","(str, enc=None)",""],["encoding_convertfrom","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convertfrom","(str, enc=None)",""],["encoding_convertfrom","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convertfrom","(str, enc=None)",""],["encoding_convertfrom","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convertfrom","(str, enc=None)",""],["encoding_convertto","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convertto","(str, enc=None)",""],["encoding_convertto","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convertto","(str, enc=None)",""],["encoding_convertto","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convertto","(str, enc=None)",""],["encoding_convertto","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_convertto","(str, enc=None)",""],["encoding_name","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_name","()",""],["encoding_name","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_name","()",""],["encoding_name","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_name","()",""],["encoding_name","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_name","()",""],["encoding_obj","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_obj","()",""],["encoding_obj","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_obj","()",""],["encoding_obj","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_obj","()",""],["encoding_obj","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_obj","()",""],["encoding_obj","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-encoding_obj","()",""],["encoding_system","TclTkLib","classes/TclTkLib.html#method-c-encoding_system","()",""],["encoding_system=","TclTkLib","classes/TclTkLib.html#method-c-encoding_system-3D","(p1)",""],["encoding_table","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_table","()",""],["encoding_table","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_table","()",""],["encoding_table","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_table","()",""],["encoding_table","MultiTkIp","classes/MultiTkIp.html#method-i-encoding_table","()",""],["encoding_table","TclTkIp","classes/TclTkIp.html#method-i-encoding_table","()",""],["encrypt","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-encrypt","(*args)","<p>Initializes the Cipher for encryption.\n<p>Make sure to call Cipher#encrypt or Cipher#decrypt before using …\n"],["encrypt","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-encrypt","(p1, p2, p3 = v3, p4 = v4)",""],["end","MatchData","classes/MatchData.html#method-i-end","(p1)","<p>Returns the offset of the character immediately following the end of the\n<em>n</em>th element of the match array …\n"],["end","Range","classes/Range.html#method-i-end","()","<p>Returns the object that defines the end of <em>rng</em>.\n\n<pre><code>(1..10).end    #=&gt; 10\n(1...10).end   #=&gt; 10\n</code></pre>\n"],["end","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-end","()","<p>Closes the stream. All operations on the closed stream will raise an\nexception.\n"],["endElement","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-endElement","(name)",""],["endElement","XMLRPC::XMLParser::StreamParserMixin","classes/XMLRPC/XMLParser/StreamParserMixin.html#method-i-endElement","(name)",""],["end_accepting","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-end_accepting","()","<p>Returns the generated output\n"],["end_accepting","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-end_accepting","()","<p>Returns the generated output\n"],["end_accepting","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-end_accepting","()","<p>Returns an Array of items that were wrapped in plus, tt or code.\n"],["end_document","Psych::Emitter","classes/Psych/Emitter.html#method-i-end_document","(p1)","<p>End a document emission with an <code>implicit</code> ending.\n<p>See Psych::Handler#end_document\n"],["end_document","Psych::Handler","classes/Psych/Handler.html#method-i-end_document","(implicit)","<p>Called with the document ends.  <code>implicit</code> is a boolean value\nindicating whether or not the document has …\n"],["end_document","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-end_document","(implicit_end = !streaming?)","<p>Handles end_document events with <code>version</code>,\n<code>tag_directives</code>, and <code>implicit</code> styling.\n<p>See Psych::Handler#start_document …\n"],["end_document","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-end_document","()",""],["end_element","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-end_element","(uri, localname, qname)",""],["end_element?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-end_element-3F","()","<p>Content: [ String tag_name ]\n"],["end_mapping","Psych::Emitter","classes/Psych/Emitter.html#method-i-end_mapping","()","<p>Emit the end of a mapping.\n<p>See Psych::Handler#end_mapping\n"],["end_mapping","Psych::Handler","classes/Psych/Handler.html#method-i-end_mapping","()","<p>Called when a map ends\n"],["end_prefix_mapping","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-end_prefix_mapping","(prefix)",""],["end_sequence","Psych::Emitter","classes/Psych/Emitter.html#method-i-end_sequence","()","<p>End sequence emission.\n<p>See Psych::Handler#end_sequence\n"],["end_sequence","Psych::Handler","classes/Psych/Handler.html#method-i-end_sequence","()","<p>Called when a sequence ends.\n"],["end_stream","Psych::Emitter","classes/Psych/Emitter.html#method-i-end_stream","()","<p>End a stream emission\n<p>See Psych::Handler#end_stream\n"],["end_stream","Psych::Handler","classes/Psych/Handler.html#method-i-end_stream","()","<p>Called when the YAML stream ends\n"],["end_stream","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-end_stream","()",""],["end_with?","String","classes/String.html#method-i-end_with-3F","(*args)","<p>Returns true if <em>str</em> ends with one of the suffixes given.\n"],["enddialog","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-enddialog","(ret)",""],["ended?","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-ended-3F","()","<p>Returns true if the stream is closed.\n"],["endgrent","Etc","classes/Etc.html#method-c-endgrent","()","<p>Ends the process of scanning through the /etc/group file begun by getgrent,\nand closes the file.\n"],["endpwent","Etc","classes/Etc.html#method-c-endpwent","()","<p>Ends the process of scanning through the /etc/passwd file begun with\ngetpwent, and closes the file.\n"],["energy","Object","classes/Object.html#method-i-energy","(bodies)",""],["engines","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-c-engines","()",""],["england","Date","classes/Date.html#method-i-england","()","<p>This method is equivalent to new_start(Date::ENGLAND).\n"],["enhance","Rake::Task","classes/Rake/Task.html#method-i-enhance","(deps=nil, &block)","<p>Enhance a task with prerequisites or actions.  Returns self.\n"],["enhance_with_matching_rule","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-enhance_with_matching_rule","(task_name, level=0)","<p>If a rule can be found that matches the task name, enhance the task with\nthe prerequisites and actions …\n"],["enq","MultiTkIp::Command_Queue","classes/MultiTkIp/Command_Queue.html#method-i-enq","(value)",""],["enq","PrettyPrint::GroupQueue","classes/PrettyPrint/GroupQueue.html#method-i-enq","(group)",""],["enq","Queue","classes/Queue.html#method-i-enq","(obj)","<p>Alias of push\n"],["enq","SizedQueue","classes/SizedQueue.html#method-i-enq","(obj)","<p>Alias of push\n"],["ensemble","Tk::Itcl","classes/Tk/Itcl.html#method-c-ensemble","(name, *args)",""],["ensure_dependencies_met","Gem::Installer","classes/Gem/Installer.html#method-i-ensure_dependencies_met","()",""],["ensure_dependency","Gem::Installer","classes/Gem/Installer.html#method-i-ensure_dependency","(spec, dependency)","<p>Ensure that the dependency is satisfied by the current installation of gem.\nIf it is not an exception …\n"],["ensure_gem_subdirectories","Gem","classes/Gem.html#method-c-ensure_gem_subdirectories","(dir = Gem.dir)","<p>Quietly ensure the named Gem directory contains all the proper\nsubdirectories.  If we can&#39;t create …\n"],["ensure_required_ruby_version_met","Gem::Installer","classes/Gem/Installer.html#method-i-ensure_required_ruby_version_met","()",""],["ensure_required_rubygems_version_met","Gem::Installer","classes/Gem/Installer.html#method-i-ensure_required_rubygems_version_met","()",""],["ensure_ssl_available","Gem","classes/Gem.html#method-i-ensure_ssl_available","()","<p>Ensure that SSL is available.  Throw an exception if it is not.\n"],["entities","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-entities","()","<p>IXMLDOMNamedNodeMap entities a list of entities in the document\n"],["entity","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-entity","()",""],["entity","REXML::DocType","classes/REXML/DocType.html#method-i-entity","( name )",""],["entity","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-entity","( reference, entities )",""],["entity","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-entity","(content)","<p>Called when %foo; is encountered in a doctype declaration. @p content “foo”\n"],["entity?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-entity-3F","()","<p>Content: [ String text ]\n"],["entity_class","DL::CStruct","classes/DL/CStruct.html#method-c-entity_class","()",""],["entity_class","DL::CUnion","classes/DL/CUnion.html#method-c-entity_class","()",""],["entity_expansion_limit","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10000.\n"],["entity_expansion_limit=","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10000.\n"],["entity_expansion_text_limit","REXML","classes/REXML.html#method-c-entity_expansion_text_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10240.\n"],["entity_expansion_text_limit","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_text_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10240.\n<p>Deprecated. Use REXML.entity_expansion_text_limit …\n"],["entity_expansion_text_limit=","REXML","classes/REXML.html#method-c-entity_expansion_text_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10240.\n"],["entity_expansion_text_limit=","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_text_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10240.\n<p>Deprecated. Use REXML.entity_expansion_text_limit= …\n"],["entitydecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-entitydecl","(name, decl)","<p>&lt;!ENTITY …&gt; The argument passed to this method is an array of the\nentity declaration.  It can …\n"],["entitydecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-entitydecl","(content)","<p>&lt;!ENTITY …&gt; The argument passed to this method is an array of the\nentity declaration.  It can …\n"],["entitydecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-entitydecl-3F","()","<p>Due to the wonders of DTDs, an entity declaration can be just about\nanything.  There&#39;s no way to …\n"],["entries","Dir","classes/Dir.html#method-c-entries","(*args)","<p>Returns an array containing all of the filenames in the given directory.\nWill raise a <code>SystemCallError</code> …\n"],["entries","Enumerable","classes/Enumerable.html#method-i-entries","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre><code>(1..7).to_a                       #=&gt; [1, 2, 3, 4, 5, 6, ...\n</code></pre>\n"],["entries","Pathname","classes/Pathname.html#method-i-entries","()","<p>Return the entries (files and subdirectories) in the directory, each as a\nPathname object.\n<p>The result …\n"],["entry_activate","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-entry_activate","(tag)",""],["entry_activate","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-entry_activate","()",""],["entry_before?","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-entry_before-3F","(tag1, tag2)",""],["entry_before?","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-entry_before-3F","(tag)",""],["entry_cget","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-entry_cget","(option)",""],["entry_cget_strict","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-entry_cget_strict","(option)",""],["entry_cget_tkstring","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-entry_cget_tkstring","(option)",""],["entry_children","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-entry_children","(tag, first=None, last=None)",""],["entry_children","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-entry_children","(first=None, last=None)",""],["entry_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-entry_configinfo","(slot=nil)",""],["entry_configure","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-entry_configure","(slot, value=None)",""],["entry_delete","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-entry_delete","(tag, first=None, last=None)",""],["entry_delete","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-entry_delete","(first=None, last=None)",""],["entry_hidden?","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-entry_hidden-3F","(tag)",""],["entry_hidden?","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-entry_hidden-3F","()",""],["entry_open?","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-entry_open-3F","(tag)",""],["entry_open?","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-entry_open-3F","()",""],["entry_size","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-entry_size","(tag)",""],["entry_size","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-entry_size","()",""],["entry_size_recurse","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-entry_size_recurse","(tag)",""],["entry_size_recurse","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-entry_size_recurse","()",""],["entry_widget","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-entry_widget","()",""],["entrybind","Tk::BWidget::LabelEntry","classes/Tk/BWidget/LabelEntry.html#method-i-entrybind","(context, *args)","<p>def entrybind(*args)\n\n<pre><code>_bind([path, &#39;bind&#39;], *args)\nself</code></pre>\n<p>end\n"],["entrybind","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-entrybind","(context, *args)","<p>def entrybind(*args)\n\n<pre><code>_bind([path, &#39;bind&#39;], *args)\nself</code></pre>\n<p>end\n"],["entrybind_append","Tk::BWidget::LabelEntry","classes/Tk/BWidget/LabelEntry.html#method-i-entrybind_append","(context, *args)","<p>def entrybind_append(*args)\n\n<pre><code>_bind_append([path, &#39;bind&#39;], *args)\nself</code></pre>\n<p>end\n"],["entrybind_append","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-entrybind_append","(context, *args)","<p>def entrybind_append(*args)\n\n<pre><code>_bind_append([path, &#39;bind&#39;], *args)\nself</code></pre>\n<p>end\n"],["entrybind_remove","Tk::BWidget::LabelEntry","classes/Tk/BWidget/LabelEntry.html#method-i-entrybind_remove","(*args)",""],["entrybind_remove","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-entrybind_remove","(*args)",""],["entrybindinfo","Tk::BWidget::LabelEntry","classes/Tk/BWidget/LabelEntry.html#method-i-entrybindinfo","(*args)",""],["entrybindinfo","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-entrybindinfo","(*args)",""],["entrycget","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-entrycget","(index, key)",""],["entrycget","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-entrycget","(index, key)",""],["entrycget_strict","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-entrycget_strict","(index, key)",""],["entrycget_strict","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-entrycget_strict","(index, key)",""],["entryconfiginfo","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-entryconfiginfo","(index, key=nil)",""],["entryconfiginfo","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-entryconfiginfo","(index, key=nil)",""],["entryconfigure","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-entryconfigure","(index, key, val=None)",""],["entryconfigure","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-entryconfigure","(index, key, val=None)",""],["enum","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-c-enum","(attribute)",""],["enum_for","Object","classes/Object.html#method-i-enum_for","(*args)","<p>Creates a new Enumerator which will enumerate by on calling\n<code>method</code> on <code>obj</code>.\n<p><code>method</code> &mdash; the method to call on …\n"],["environment","OptionParser","classes/OptionParser.html#method-i-environment","(env = File.basename($0, '.*'))","<p>Parses environment variable <code>env</code> or its uppercase with\nsplitting like a shell.\n<p><code>env</code> defaults to the basename …\n"],["eof","ARGF","classes/ARGF.html#method-i-eof","()","<p>Returns true if the current file in <code>ARGF</code> is at end of file,\ni.e. it has no data to read. The stream must …\n"],["eof","IO","classes/IO.html#method-i-eof","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eof","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-eof","()",""],["eof","StringIO","classes/StringIO.html#method-i-eof","()","<p>Returns true if <strong>strio</strong> is at end of file. The stringio must\nbe opened for reading or an <code>IOError</code> will be …\n"],["eof","TkTextIO","classes/TkTextIO.html#method-i-eof","()",""],["eof","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-eof","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has\nreached the end.\n"],["eof?","ARGF","classes/ARGF.html#method-i-eof-3F","()","<p>Returns true if the current file in <code>ARGF</code> is at end of file,\ni.e. it has no data to read. The stream must …\n"],["eof?","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-eof-3F","()","<p>Are we at the end of the tar entry?\n"],["eof?","IO","classes/IO.html#method-i-eof-3F","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eof?","IRB::FileInputMethod","classes/IRB/FileInputMethod.html#method-i-eof-3F","()",""],["eof?","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-eof-3F","()",""],["eof?","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-eof-3F","()",""],["eof?","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-eof-3F","()","<p>Returns true if the stream is at file which means there is no more data to\nbe read.\n"],["eof?","RubyLex","classes/RubyLex.html#method-i-eof-3F","()",""],["eof?","StringIO","classes/StringIO.html#method-i-eof-3F","()","<p>Returns true if <strong>strio</strong> is at end of file. The stringio must\nbe opened for reading or an <code>IOError</code> will be …\n"],["eof?","TkTextIO","classes/TkTextIO.html#method-i-eof-3F","()",""],["eof?","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-eof-3F","()",""],["eof?","XMP::StringInputMethod","classes/XMP/StringInputMethod.html#method-i-eof-3F","()",""],["eof?","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-eof-3F","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has\nreached the end.\n"],["eos?","StringScanner","classes/StringScanner.html#method-i-eos-3F","()","<p>Returns <code>true</code> if the scan pointer is at the end of the string.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\np s.eos? ...</code></pre>\n"],["epath","Button_with_Frame","classes/Button_with_Frame.html#method-i-epath","()",""],["epath","Tk::RbWidget::BalloonHelp","classes/Tk/RbWidget/BalloonHelp.html#method-i-epath","()",""],["epath","TkComposite","classes/TkComposite.html#method-i-epath","()",""],["eps","Function","classes/Function.html#method-i-eps","()",""],["eql?","Action","classes/Action.html#method-i-eql-3F","(other)",""],["eql?","Array","classes/Array.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <em>other</em> are the\nsame object, or are both arrays with the same content.\n"],["eql?","BigDecimal","classes/BigDecimal.html#method-i-eql-3F","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["eql?","Bignum","classes/Bignum.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a <code>Bignum</code>\nwith the same value as <em>big</em>. Contrast this with\n<code>Bignum#==</code>, which …\n"],["eql?","Branch","classes/Branch.html#method-i-eql-3F","(other)",""],["eql?","DL::CPtr","classes/DL/CPtr.html#method-i-eql-3F","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise\nreturns false.\n"],["eql?","DL::CPtr","classes/DL/CPtr.html#method-i-eql-3F","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise\nreturns false.\n"],["eql?","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-eql-3F","(other)",""],["eql?","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-eql-3F","(other)",""],["eql?","Float","classes/Float.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a <code>Float</code> with\nthe same value as <em>flt</em>. Contrast this with <code>Float#==</code>,\nwhich performs …\n"],["eql?","Gem::Platform","classes/Gem/Platform.html#method-i-eql-3F","(other)",""],["eql?","Hash","classes/Hash.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>hash</em> and <em>other</em> are both\nhashes with the same content.\n"],["eql?","IPAddr","classes/IPAddr.html#method-i-eql-3F","(other)","<p>Checks equality used by Hash.\n"],["eql?","MatchData","classes/MatchData.html#method-i-eql-3F","(p1)","<p>Equality—Two matchdata are equal if their target strings, patterns, and\nmatched positions are identical. …\n"],["eql?","Matrix","classes/Matrix.html#method-i-eql-3F","(other)",""],["eql?","Method","classes/Method.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition. …\n"],["eql?","Numeric","classes/Numeric.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>num</em> and <em>numeric</em> are the same\ntype and have equal values.\n\n<pre><code>1 == 1.0          #=&gt; true\n1.eql?(1.0) ...\n</code></pre>\n"],["eql?","Object","classes/Object.html#method-i-eql-3F","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["eql?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-eql-3F","(p1)",""],["eql?","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-eql-3F","(p1)",""],["eql?","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-eql-3F","(p1)",""],["eql?","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-eql-3F","(p1)",""],["eql?","Pathname","classes/Pathname.html#method-i-eql-3F","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["eql?","Proc","classes/Proc.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>prc</em> is the same object as\n<em>other_proc</em>, or if they are both procs with the same body.\n"],["eql?","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-eql-3F","(other)",""],["eql?","Range","classes/Range.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a Range, has equivalent\nbeginning and end items (by comparing them with  …\n"],["eql?","Regexp","classes/Regexp.html#method-i-eql-3F","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["eql?","String","classes/String.html#method-i-eql-3F","(p1)","<p>Two strings are equal if they have the same length and content.\n"],["eql?","Struct","classes/Struct.html#method-i-eql-3F","(p1)","<p>code-seq:\n\n<pre><code>struct.eql?(other)   -&gt; true or false</code></pre>\n<p>Two structures are equal if they are the same object, or …\n"],["eql?","Time","classes/Time.html#method-i-eql-3F","(p1)","<p>Return <code>true</code> if <em>time</em> and <em>other_time</em> are both\n<code>Time</code> objects with the same seconds and fractional seconds. …\n"],["eql?","URI::Generic","classes/URI/Generic.html#method-i-eql-3F","(oth)",""],["eql?","UnboundMethod","classes/UnboundMethod.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition. …\n"],["eql?","Vector","classes/Vector.html#method-i-eql-3F","(other)",""],["eql?","Version","classes/Version.html#method-i-eql-3F","(other)","<p>A Version is only eql? to another version if it&#39;s specified to the same\nprecision. Version “1.0” …\n"],["equal?","BasicObject","classes/BasicObject.html#method-i-equal-3F","(p1)","<p>Equality—At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <em>obj</em> and <em>other</em> are the same\nobject. Typically …\n"],["erase","Tk::Listbox","classes/Tk/Listbox.html#method-i-erase","()",""],["erase","Tk::RbWidget::BalloonHelp","classes/Tk/RbWidget/BalloonHelp.html#method-i-erase","()",""],["erase","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-erase","(widget)",""],["erf","Math","classes/Math.html#method-c-erf","(p1)","<p>Calculates the error function of x.\n"],["erfc","Math","classes/Math.html#method-c-erfc","(p1)","<p>Calculates the complementary error function of x.\n"],["err","DRbEx","classes/DRbEx.html#method-i-err","()",""],["errno","SystemCallError","classes/SystemCallError.html#method-i-errno","()","<p>Return this SystemCallError&#39;s error number.\n"],["error","GServer","classes/GServer.html#method-i-error","(detail)","<p>Called if #debug is true whenever an unhandled exception is raised. This\nimplementation simply logs the …\n"],["error","Gem::MockGemUi","classes/Gem/MockGemUi.html#method-i-error","()",""],["error","Logger","classes/Logger.html#method-i-error","(progname = nil, &block)","<p>Log an <code>ERROR</code> message.\n<p>See #info for more information.\n"],["error","Object","classes/Object.html#method-i-error","(exception)",""],["error","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-error","(msg)","<p>Aborts with <code>msg</code>\n"],["error","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-error","(msg)","<p>Report an error message and exit\n"],["error","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-error","(msg)","<p>Shortcut for logging an ERROR message\n"],["error?","Logger","classes/Logger.html#method-i-error-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>ERROR</code> messages.\n"],["error?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-error-3F","()",""],["error?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-error-3F","()","<p>Will the logger output ERROR messages?\n"],["error?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-error-3F","(code)","<p>Is <code>code</code> an error status?\n"],["errorCode","IXMLDOMParseError","classes/IXMLDOMParseError.html#method-i-errorCode","()","<p>I4 errorCode the error code\n"],["error_bytes","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-error_bytes","()","<p>Returns the discarded bytes when Encoding::InvalidByteSequenceError occurs.\n\n<pre><code>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</code></pre>\n"],["error_char","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-error_char","()","<p>Returns the one-character string which cause\nEncoding::UndefinedConversionError.\n\n<pre><code>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</code></pre>\n"],["error_message","GetoptLong","classes/GetoptLong.html#method-i-error_message","()","<p>Return the appropriate error message in POSIX-defined format. If no error\nhas occurred, returns nil. …\n"],["errors","OpenSSL","classes/OpenSSL.html#method-c-errors","()","<p>See any remaining errors held in queue.\n<p>Any errors you see here are probably due to a bug in ruby&#39;s …\n"],["errors","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-errors","(cmd=Proc.new)",""],["escape","CGI","classes/CGI.html#method-c-escape","(string)","<p>URL-encode a string.\n\n<pre><code>url_encoded_string = CGI::escape(&quot;&#39;Stop!&#39; said Fred&quot;)\n   # =&gt; &quot;%27Stop%21%27+said+Fred&quot;\n</code></pre>\n"],["escape","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-escape","(str)",""],["escape","Regexp","classes/Regexp.html#method-c-escape","(p1)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["escape","Shellwords","classes/Shellwords.html#method-c-escape","(str)",""],["escape","Syck","classes/Syck.html#method-c-escape","( value, skip = \"\" )","<p>Escape the string, condensing common escapes\n"],["escape","Syck","classes/Syck.html#method-c-escape","( value, skip = \"\" )","<p>Escape the string, condensing common escapes\n"],["escape","URI::Escape","classes/URI/Escape.html#method-i-escape","(*arg)","<p>Synopsis\n\n<pre><code>URI.escape(str [, unsafe])</code></pre>\n<p>Args\n"],["escape","URI::Parser","classes/URI/Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p><code>str</code> &mdash; String to make safe\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to self.regexp\n"],["escape","WEBrick::AccessLog","classes/WEBrick/AccessLog.html#method-i-escape","(data)",""],["escape","WEBrick::HTMLUtils","classes/WEBrick/HTMLUtils.html#method-c-escape","(string)","<p>Escapes &amp;, “, &gt; and &lt; in <code>string</code>\n"],["escapeElement","CGI","classes/CGI.html#method-c-escapeElement","(string, *elements)","<p>Escape only the tags of certain HTML elements in <code>string</code>.\n<p>Takes an element or elements or array of elements. …\n"],["escapeHTML","CGI","classes/CGI.html#method-c-escapeHTML","(string)","<p>Escape special characters in HTML, namely &amp;&quot;&lt;&gt;\n\n<pre><code>CGI::escapeHTML(&#39;Usage: foo &quot;bar&quot; &lt;baz&gt;&#39;) ...</code></pre>\n"],["escape_element","CGI","classes/CGI.html#method-c-escape_element","(str)","<p>Synonym for CGI::escapeElement(str)\n"],["escape_html","CGI","classes/CGI.html#method-c-escape_html","(str)","<p>Synonym for CGI::escapeHTML(str)\n"],["euid","Process","classes/Process.html#method-c-euid","()","<p>Returns the effective user ID for this process.\n\n<pre><code>Process.euid   #=&gt; 501\n</code></pre>\n"],["euid=","Process","classes/Process.html#method-c-euid-3D","(p1)","<p>Sets the effective user ID for this process. Not available on all\nplatforms.\n"],["eval","Binding","classes/Binding.html#method-i-eval","(p1, p2 = v2, p3 = v3)","<p>Evaluates the Ruby expression(s) in <em>string</em>, in the\n<em>binding</em>&#39;s context.  If the optional <em>filename</em> and …\n"],["eval","Kernel","classes/Kernel.html#method-i-eval","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Evaluates the Ruby expression(s) in <em>string</em>. If <em>binding</em> is\ngiven, which must be a <code>Binding</code> object, the …\n"],["eval","MultiTkIp","classes/MultiTkIp.html#method-i-eval","(*args, &blk)",""],["eval","MultiTkIp","classes/MultiTkIp.html#method-i-eval","(*args, &blk)",""],["eval","MultiTkIp","classes/MultiTkIp.html#method-i-eval","(*args, &blk)",""],["eval","MultiTkIp","classes/MultiTkIp.html#method-i-eval","(*args, &blk)",""],["eval","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-eval","()",""],["eval","Tk::WinDDE","classes/Tk/WinDDE.html#method-c-eval","(topic, cmd, *args)",""],["eval","TkConsole","classes/TkConsole.html#method-c-eval","(tcl_script)",""],["eval_A","Object","classes/Object.html#method-i-eval_A","(i,j)","<p>The Computer Language Shootout shootout.alioth.debian.org/ Contributed by\nSokolov Yura\n"],["eval_A_times_u","Object","classes/Object.html#method-i-eval_A_times_u","(u)",""],["eval_AtA_times_u","Object","classes/Object.html#method-i-eval_AtA_times_u","(u)",""],["eval_At_times_u","Object","classes/Object.html#method-i-eval_At_times_u","(u)",""],["eval_callback","MultiTkIp","classes/MultiTkIp.html#method-i-eval_callback","(*args)","<p>Not stable, so disable this feature\n"],["eval_callback","MultiTkIp","classes/MultiTkIp.html#method-i-eval_callback","(*args)","<p>Not stable, so disable this feature\n"],["eval_callback","MultiTkIp","classes/MultiTkIp.html#method-i-eval_callback","(*args)","<p>Not stable, so disable this feature\n"],["eval_callback","MultiTkIp","classes/MultiTkIp.html#method-i-eval_callback","(*args)","<p>Not stable, so disable this feature\n"],["eval_cmd","TkUtil","classes/TkUtil.html#method-c-eval_cmd","(p1, *args)",""],["eval_history=","IRB::Context","classes/IRB/Context.html#method-i-eval_history-3D","(no)",""],["eval_input","IRB::Irb","classes/IRB/Irb.html#method-i-eval_input","()",""],["eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-eval_proc","(*args, &blk)",""],["eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-eval_proc","(*args, &blk)",""],["eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-eval_proc","(*args, &blk)",""],["eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-eval_proc","(*args, &blk)",""],["eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-eval_str","(cmd, *eval_args)",""],["eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-eval_str","(cmd, *eval_args)",""],["eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-eval_str","(cmd, *eval_args)",""],["eval_str","MultiTkIp","classes/MultiTkIp.html#method-i-eval_str","(cmd, *eval_args)",""],["eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-eval_string","(cmd, *eval_args)",""],["eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-eval_string","(cmd, *eval_args)",""],["eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-eval_string","(cmd, *eval_args)",""],["eval_string","MultiTkIp","classes/MultiTkIp.html#method-i-eval_string","(cmd, *eval_args)",""],["eval_under_random_base","TkOptionDB","classes/TkOptionDB.html#method-c-eval_under_random_base","(parent = nil, &b)",""],["eval_under_random_base","TkOptionDB","classes/TkOptionDB.html#method-c-eval_under_random_base","(parent = nil, &b)",""],["eval_under_random_base","TkOptionDB","classes/TkOptionDB.html#method-c-eval_under_random_base","(parent = nil, &b)",""],["evaluate","IRB::Context","classes/IRB/Context.html#method-i-evaluate","(line, line_no)",""],["evaluate","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-evaluate","(context, statements, file = nil, line = nil)",""],["even?","Bignum","classes/Bignum.html#method-i-even-3F","()","<p>Returns <code>true</code> if <em>big</em> is an even number.\n"],["even?","Fixnum","classes/Fixnum.html#method-i-even-3F","()","<p>Returns <code>true</code> if <em>fix</em> is an even number.\n"],["even?","Integer","classes/Integer.html#method-i-even-3F","()","<p>Returns <code>true</code> if <em>int</em> is an even number.\n"],["even?","Integer","classes/Integer.html#method-i-even-3F","()","<p>Returns <code>true</code> if <em>int</em> is an even number.\n"],["event?","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-event-3F","()","<p>Returns true if the method is event.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;) ...</code></pre>\n"],["event_interface","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-event_interface","()","<p>Returns event interface name if the method is event.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object ...</code></pre>\n"],["event_type","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-event_type","()",""],["eventloop_tkwait","TkTimer","classes/TkTimer.html#method-i-eventloop_tkwait","()",""],["eventloop_tkwait","TkTimer","classes/TkTimer.html#method-i-eventloop_tkwait","()",""],["eventloop_tkwait","TkVariable","classes/TkVariable.html#method-i-eventloop_tkwait","()",""],["eventloop_tkwait","TkVariable","classes/TkVariable.html#method-i-eventloop_tkwait","()",""],["eventloop_wait","TkTimer","classes/TkTimer.html#method-i-eventloop_wait","(check_root = false)",""],["eventloop_wait","TkTimer","classes/TkTimer.html#method-i-eventloop_wait","(check_root = false)",""],["eventloop_wait","TkVariable","classes/TkVariable.html#method-i-eventloop_wait","(check_root = false)",""],["eventloop_wait","TkVariable","classes/TkVariable.html#method-i-eventloop_wait","(check_root = false)",""],["examine","Net::IMAP","classes/Net/IMAP.html#method-i-examine","(mailbox)","<p>Sends a EXAMINE command to select a <code>mailbox</code> so that messages\nin the <code>mailbox</code> can be accessed.  Behaves …\n"],["exception","DRb::DRbUnknown","classes/DRb/DRbUnknown.html#method-i-exception","()","<p>Create a DRbUnknownError exception containing this object.\n"],["exception","Exception","classes/Exception.html#method-i-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create …\n"],["exception","Exception","classes/Exception.html#method-c-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create …\n"],["exception_class","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-exception_class","()","<p>Determines whether there was an error and raies the appropriate error based\non the reply code of the …\n"],["exclude","Rake::FileList","classes/Rake/FileList.html#method-i-exclude","(*patterns, &block)","<p>Register a list of file name patterns that should be excluded from the\nlist.  Patterns may be regular …\n"],["exclude","TkcGroup","classes/TkcGroup.html#method-i-exclude","(*tags)",""],["exclude_end?","Range","classes/Range.html#method-i-exclude_end-3F","()","<p>Returns <code>true</code> if <em>rng</em> excludes its end value.\n"],["exclusive","Thread","classes/Thread.html#method-c-exclusive","()","<p>Wraps a block in Thread.critical, restoring the original value upon exit\nfrom the critical section, and …\n"],["excn_handle","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-excn_handle","(file, line, id, binding)",""],["exe_to_ico","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-exe_to_ico","(exe_file, ico_file, keys=nil)",""],["exec","Kernel","classes/Kernel.html#method-i-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>. <em>command…</em> is one of following forms. …\n"],["exec","Process","classes/Process.html#method-c-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>. <em>command…</em> is one of following forms. …\n"],["exec_cmd","Object","classes/Object.html#method-i-exec_cmd","(cmd)",""],["exec_command","Object","classes/Object.html#method-i-exec_command","(type, file, w)",""],["exec_format","Gem::Installer","classes/Gem/Installer.html#method-i-exec_format","()","<p>Defaults to use Ruby&#39;s program prefix and suffix.\n"],["exec_if","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-exec_if","()",""],["executable","Gem::Specification","classes/Gem/Specification.html#method-i-executable","()","<p>Singular accessor for #executables\n"],["executable=","Gem::Specification","classes/Gem/Specification.html#method-i-executable-3D","(o)","<p>Singular accessor for #executables\n"],["executable?","File","classes/File.html#method-c-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser id of this process.\n"],["executable?","File::Stat","classes/File/Stat.html#method-i-executable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is executable or if the\noperating system doesn&#39;t distinguish executable files …\n"],["executable?","FileTest","classes/FileTest.html#method-i-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser id of this process.\n"],["executable?","Pathname","classes/Pathname.html#method-i-executable-3F","()","<p>See <code>FileTest.executable?</code>.\n"],["executable_real?","File","classes/File.html#method-c-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nid of this process.\n"],["executable_real?","File::Stat","classes/File/Stat.html#method-i-executable_real-3F","()","<p>Same as <code>executable?</code>, but tests using the real owner of the\nprocess.\n"],["executable_real?","FileTest","classes/FileTest.html#method-i-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nid of this process.\n"],["executable_real?","Pathname","classes/Pathname.html#method-i-executable_real-3F","()","<p>See <code>FileTest.executable_real?</code>.\n"],["executables","Gem::Specification","classes/Gem/Specification.html#method-i-executables","()","<p>Executables included in the gem.\n"],["executables=","Gem::Specification","classes/Gem/Specification.html#method-i-executables-3D","(value)","<p>Sets executables to <code>value</code>, ensuring it is an array. Don&#39;t\nuse this, push onto the array instead. …\n"],["execute","Gem::Command","classes/Gem/Command.html#method-i-execute","()","<p>Override to provide command handling.\n<p>#options will be filled in with your parsed options, unparsed options …\n"],["execute","Gem::Commands::BuildCommand","classes/Gem/Commands/BuildCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CertCommand","classes/Gem/Commands/CertCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CheckCommand","classes/Gem/Commands/CheckCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CleanupCommand","classes/Gem/Commands/CleanupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ContentsCommand","classes/Gem/Commands/ContentsCommand.html#method-i-execute","()",""],["execute","Gem::Commands::DependencyCommand","classes/Gem/Commands/DependencyCommand.html#method-i-execute","()",""],["execute","Gem::Commands::EnvironmentCommand","classes/Gem/Commands/EnvironmentCommand.html#method-i-execute","()",""],["execute","Gem::Commands::FetchCommand","classes/Gem/Commands/FetchCommand.html#method-i-execute","()",""],["execute","Gem::Commands::GenerateIndexCommand","classes/Gem/Commands/GenerateIndexCommand.html#method-i-execute","()",""],["execute","Gem::Commands::HelpCommand","classes/Gem/Commands/HelpCommand.html#method-i-execute","()",""],["execute","Gem::Commands::InstallCommand","classes/Gem/Commands/InstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ListCommand","classes/Gem/Commands/ListCommand.html#method-i-execute","()",""],["execute","Gem::Commands::LockCommand","classes/Gem/Commands/LockCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OutdatedCommand","classes/Gem/Commands/OutdatedCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OwnerCommand","classes/Gem/Commands/OwnerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PristineCommand","classes/Gem/Commands/PristineCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PushCommand","classes/Gem/Commands/PushCommand.html#method-i-execute","()",""],["execute","Gem::Commands::QueryCommand","classes/Gem/Commands/QueryCommand.html#method-i-execute","()",""],["execute","Gem::Commands::RdocCommand","classes/Gem/Commands/RdocCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SearchCommand","classes/Gem/Commands/SearchCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ServerCommand","classes/Gem/Commands/ServerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SourcesCommand","classes/Gem/Commands/SourcesCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SpecificationCommand","classes/Gem/Commands/SpecificationCommand.html#method-i-execute","()",""],["execute","Gem::Commands::StaleCommand","classes/Gem/Commands/StaleCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UninstallCommand","classes/Gem/Commands/UninstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UnpackCommand","classes/Gem/Commands/UnpackCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UpdateCommand","classes/Gem/Commands/UpdateCommand.html#method-i-execute","()",""],["execute","Gem::Commands::WhichCommand","classes/Gem/Commands/WhichCommand.html#method-i-execute","()",""],["execute","IRB::ExtendCommand::ChangeWorkspace","classes/IRB/ExtendCommand/ChangeWorkspace.html#method-i-execute","(*obj)",""],["execute","IRB::ExtendCommand::CurrentWorkingWorkspace","classes/IRB/ExtendCommand/CurrentWorkingWorkspace.html#method-i-execute","(*obj)",""],["execute","IRB::ExtendCommand::Foreground","classes/IRB/ExtendCommand/Foreground.html#method-i-execute","(key)",""],["execute","IRB::ExtendCommand::Fork","classes/IRB/ExtendCommand/Fork.html#method-i-execute","(&block)",""],["execute","IRB::ExtendCommand::Help","classes/IRB/ExtendCommand/Help.html#method-i-execute","(*names)",""],["execute","IRB::ExtendCommand::IrbCommand","classes/IRB/ExtendCommand/IrbCommand.html#method-i-execute","(*obj)",""],["execute","IRB::ExtendCommand::Jobs","classes/IRB/ExtendCommand/Jobs.html#method-i-execute","()",""],["execute","IRB::ExtendCommand::Kill","classes/IRB/ExtendCommand/Kill.html#method-i-execute","(*keys)",""],["execute","IRB::ExtendCommand::Load","classes/IRB/ExtendCommand/Load.html#method-i-execute","(file_name, priv = nil)",""],["execute","IRB::ExtendCommand::Nop","classes/IRB/ExtendCommand/Nop.html#method-i-execute","(*opts)",""],["execute","IRB::ExtendCommand::Nop","classes/IRB/ExtendCommand/Nop.html#method-c-execute","(conf, *opts)",""],["execute","IRB::ExtendCommand::PopWorkspace","classes/IRB/ExtendCommand/PopWorkspace.html#method-i-execute","(*obj)",""],["execute","IRB::ExtendCommand::PushWorkspace","classes/IRB/ExtendCommand/PushWorkspace.html#method-i-execute","(*obj)",""],["execute","IRB::ExtendCommand::Require","classes/IRB/ExtendCommand/Require.html#method-i-execute","(file_name)",""],["execute","IRB::ExtendCommand::Source","classes/IRB/ExtendCommand/Source.html#method-i-execute","(file_name)",""],["execute","IRB::ExtendCommand::Workspaces","classes/IRB/ExtendCommand/Workspaces.html#method-i-execute","(*obj)",""],["execute","Rake::Task","classes/Rake/Task.html#method-i-execute","(args=nil)","<p>Execute the actions associated with this task.\n"],["execute","Tk::WinDDE","classes/Tk/WinDDE.html#method-c-execute","(service, topic, data)",""],["exist?","Dir","classes/Dir.html#method-c-exist-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["exist?","File","classes/File.html#method-c-exist-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.\n"],["exist?","FileTest","classes/FileTest.html#method-i-exist-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.\n"],["exist?","MultiTkIp","classes/MultiTkIp.html#method-i-exist-3F","(slave = '')",""],["exist?","MultiTkIp","classes/MultiTkIp.html#method-c-exist-3F","(slave = '')",""],["exist?","MultiTkIp","classes/MultiTkIp.html#method-c-exist-3F","(slave = '')",""],["exist?","MultiTkIp","classes/MultiTkIp.html#method-i-exist-3F","(slave = '')",""],["exist?","MultiTkIp","classes/MultiTkIp.html#method-c-exist-3F","(slave = '')",""],["exist?","MultiTkIp","classes/MultiTkIp.html#method-i-exist-3F","(slave = '')",""],["exist?","MultiTkIp","classes/MultiTkIp.html#method-c-exist-3F","(slave = '')",""],["exist?","MultiTkIp","classes/MultiTkIp.html#method-i-exist-3F","(slave = '')",""],["exist?","Pathname","classes/Pathname.html#method-i-exist-3F","()","<p>See <code>FileTest.exist?</code>.\n"],["exist?","StringScanner","classes/StringScanner.html#method-i-exist-3F","(p1)","<p>Looks <em>ahead</em> to see if the <code>pattern</code> exists\n<em>anywhere</em> in the string, without advancing the scan pointer. …\n"],["exist?","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-c-exist-3F","(name)",""],["exist?","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-exist-3F","()",""],["exist?","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-exist-3F","()",""],["exist?","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-exist-3F","()",""],["exist?","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-exist-3F","(keys={})",""],["exist?","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-exist-3F","(item)",""],["exist?","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-exist-3F","()",""],["exist?","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-exist-3F","(node)",""],["exist?","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-exist-3F","()",""],["exist?","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-exist-3F","()",""],["exist?","TkNamespace::Ensemble","classes/TkNamespace/Ensemble.html#method-c-exist-3F","(ensemble)",""],["exist?","TkTextMark","classes/TkTextMark.html#method-i-exist-3F","()",""],["exist?","TkTextMark","classes/TkTextMark.html#method-i-exist-3F","()",""],["exist?","TkTextTag","classes/TkTextTag.html#method-i-exist-3F","()",""],["exist?","TkTextTag","classes/TkTextTag.html#method-i-exist-3F","()",""],["exist?","TkVariable","classes/TkVariable.html#method-i-exist-3F","(*elems)",""],["exist?","TkVariable","classes/TkVariable.html#method-i-exist-3F","(*elems)",""],["exist?","TkWinfo","classes/TkWinfo.html#method-c-exist-3F","(win)",""],["exist?","TkWinfo","classes/TkWinfo.html#method-c-exist-3F","(win)",""],["exist?","TkcItem","classes/TkcItem.html#method-i-exist-3F","()",""],["exist?","TkcTag","classes/TkcTag.html#method-i-exist-3F","()",""],["exists?","Dir","classes/Dir.html#method-c-exists-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["exists?","File","classes/File.html#method-c-exists-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n"],["exists?","FileTest","classes/FileTest.html#method-i-exists-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n"],["exists?","TkNamespace::Ensemble","classes/TkNamespace/Ensemble.html#method-i-exists-3F","()",""],["exit","IRB::Context","classes/IRB/Context.html#method-i-exit","(ret = 0)",""],["exit","Kernel","classes/Kernel.html#method-i-exit","(p1 = v1)","<p>Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may …\n"],["exit","MultiTkIp","classes/MultiTkIp.html#method-i-exit","(st = true)",""],["exit","MultiTkIp","classes/MultiTkIp.html#method-i-exit","(st = true)",""],["exit","MultiTkIp","classes/MultiTkIp.html#method-i-exit","(st = true)",""],["exit","MultiTkIp","classes/MultiTkIp.html#method-i-exit","(st = true)",""],["exit","Process","classes/Process.html#method-c-exit","(p1 = v1)","<p>Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may …\n"],["exit","Thread","classes/Thread.html#method-c-exit","()","<p>Terminates the currently running thread and schedules another thread to be\nrun. If this thread is already …\n"],["exit","Thread","classes/Thread.html#method-i-exit","()","<p>Terminates <em>thr</em> and schedules another thread to be run. If this\nthread is already marked to be killed, …\n"],["exit!","Kernel","classes/Kernel.html#method-i-exit-21","(p1 = v1)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is\nreturned to the underlying system …\n"],["exit!","MultiTkIp","classes/MultiTkIp.html#method-i-exit-21","(st = false)",""],["exit!","MultiTkIp","classes/MultiTkIp.html#method-i-exit-21","(st = false)",""],["exit!","MultiTkIp","classes/MultiTkIp.html#method-i-exit-21","(st = false)",""],["exit!","MultiTkIp","classes/MultiTkIp.html#method-i-exit-21","(st = false)",""],["exit!","Process","classes/Process.html#method-c-exit-21","(p1 = v1)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is\nreturned to the underlying system …\n"],["exit_value","LocalJumpError","classes/LocalJumpError.html#method-i-exit_value","()","<p>call_seq:\n\n<pre><code>local_jump_error.exit_value  -&gt; obj</code></pre>\n<p>Returns the exit value associated with this <code>LocalJumpError</code> …\n"],["exited?","Process::Status","classes/Process/Status.html#method-i-exited-3F","()","<p>Returns <code>true</code> if <em>stat</em> exited normally (for example\nusing an <code>exit()</code> call or finishing the program).\n"],["exited?","Rake::PseudoStatus","classes/Rake/PseudoStatus.html#method-i-exited-3F","()",""],["exitstatus","Process::Status","classes/Process/Status.html#method-i-exitstatus","()","<p>Returns the least significant eight bits of the return code of\n<em>stat</em>. Only available if <code>exited?</code> is <code>true</code>\n…\n"],["exp","BigMath","classes/BigMath.html#method-c-exp","(p1, p2)","<p>Computes the value of e (the base of natural logarithms) raised to the\npower of x, to the specified number …\n"],["exp","CMath","classes/CMath.html#method-c-exp","(z)","<p>Math::E raised to the <code>z</code> power\n\n<pre><code>exp(Complex(0,0))      #=&gt; 1.0+0.0i\nexp(Complex(0,PI))     #=&gt; -1.0+1.2246467991473532e-16i ...\n</code></pre>\n"],["exp","Math","classes/Math.html#method-c-exp","(p1)","<p>Returns e**x.\n\n<pre><code>Math.exp(0)       #=&gt; 1.0\nMath.exp(1)       #=&gt; 2.718281828459045\nMath.exp(1.5)     #=&gt; ...\n</code></pre>\n"],["exp!","CMath","classes/CMath.html#method-c-exp-21","(z)",""],["exp_state","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-exp_state","()",""],["expand","ActionMap","classes/ActionMap.html#method-c-expand","(rects, &block)",""],["expand","DemoTree","classes/DemoTree.html#method-c-expand","(tree, but)",""],["expand","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-expand","( path )",""],["expand","REXML::Text","classes/REXML/Text.html#method-c-expand","(ref, doctype, filter)",""],["expand","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-expand","(node)",""],["expand_class","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-expand_class","(klass)","<p>Expands abbreviated klass <code>klass</code> into a fully-qualified class. \n“Zl::Da” will be expanded to …\n"],["expand_environ","Win32::Registry","classes/Win32/Registry.html#method-c-expand_environ","(str)","<p>Replace %w+% into the environment value of what is contained between the\n%&#39;s This method is used …\n"],["expand_hexstring","OpenSSL::X509::Name::RFC2253DN","classes/OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_hexstring","(str)",""],["expand_name","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-expand_name","(name)","<p>Expands the class portion of <code>name</code> into a fully-qualified\nclass.  See #expand_class.\n"],["expand_pair","OpenSSL::X509::Name::RFC2253DN","classes/OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_pair","(str)",""],["expand_path","File","classes/File.html#method-c-expand_path","(p1, p2 = v2)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["expand_path","Pathname","classes/Pathname.html#method-i-expand_path","(p1 = v1)","<p>See <code>File.expand_path</code>.\n"],["expand_path","Shell","classes/Shell.html#method-i-expand_path","(path)",""],["expand_path","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-expand_path","(path)","<p>CommandProcessor#expand_path(path)\n\n<pre><code>  path:   String\n  return: String\nreturns the absolute path for &lt;path&gt;</code></pre>\n"],["expand_rec","ActionMap","classes/ActionMap.html#method-c-expand_rec","(prefix, region_rects, &block)",""],["expand_ref_in","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-expand_ref_in","( arry, ind )",""],["expand_state","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-expand_state","()",""],["expand_tabs","RDoc::Text","classes/RDoc/Text.html#method-i-expand_tabs","(text)","<p>Expands tab characters in <code>text</code> to eight spaces\n"],["expand_value","OpenSSL::X509::Name::RFC2253DN","classes/OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_value","(str1, str2, str3)",""],["expanded?","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-expanded-3F","(node)",""],["expanded_list","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-expanded_list","()",""],["expanded_name","REXML::Document","classes/REXML/Document.html#method-i-expanded_name","()","<p>According to the XML spec, a root node has no expanded name\n"],["expect","IO","classes/IO.html#method-i-expect","(pat,timeout=9999999)","<p>Reads from the IO until pattern <code>pat</code> matches or the\n<code>timeout</code> is over. It returns an array with the read …\n"],["expected","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-expected","()",""],["expected","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-expected","()",""],["expected","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-i-expected","()",""],["expected","REXML::Validation::Optional","classes/REXML/Validation/Optional.html#method-i-expected","()",""],["expected","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-expected","()",""],["expected","REXML::Validation::ZeroOrMore","classes/REXML/Validation/ZeroOrMore.html#method-i-expected","()",""],["expired?","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-expired-3F","()","<p>Has this tuple expired? (true/false).\n<p>A tuple has expired when its expiry timer based on the <code>sec</code>\nargument …\n"],["expires","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-i-expires","()",""],["expires=","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-i-expires-3D","(t)",""],["explorerHeaderInvoke","Object","classes/Object.html#method-i-explorerHeaderInvoke","(t, w, c)",""],["exponent","BigDecimal","classes/BigDecimal.html#method-i-exponent","()","<p>Returns the exponent of the BigDecimal number, as an Integer.\n<p>If the number can be represented as 0.xxxxxx …\n"],["export","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-export","()","<p>Encodes this DH to its PEM encoding. Note that any existing per-session\npublic/private keys will <strong>not</strong> …\n"],["export","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-export","(p1 = v1, p2 = v2)","<p>Encodes this DSA to its PEM encoding.\n<p>Parameters\n<p><code>cipher</code> is an OpenSSL::Cipher.\n"],["export","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-export","(p1 = v1, p2 = v2)","<p>Outputs this keypair in PEM encoding.  If <code>cipher</code> and\n<code>pass_phrase</code> are given they will be used to encrypt …\n"],["export","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-export","(p1 = v1, p2 = v2)","<p>Outputs this keypair in PEM encoding.  If <code>cipher</code> and\n<code>pass_phrase</code> are given they will be used to encrypt …\n"],["export","Tk::Iwidgets::Messagebox","classes/Tk/Iwidgets/Messagebox.html#method-i-export","(file)",""],["export","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-export","(file)",""],["exports","Exports","classes/Exports.html#method-i-exports","(name = $name, library = $library, description = $description)",""],["exports","Exports::Cygwin","classes/Exports/Cygwin.html#method-i-exports","(*)",""],["expose_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-expose_cmd","(slave, cmd, aliasname = nil)",""],["expose_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-expose_cmd","(slave, cmd, aliasname = nil)",""],["expose_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-expose_cmd","(slave, cmd, aliasname = nil)",""],["expose_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-expose_cmd","(slave, cmd, aliasname = nil)",""],["expose_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-expose_cmd","(slave, cmd, aliasname = nil)",""],["expose_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-expose_cmd","(slave, cmd, aliasname = nil)",""],["expose_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-expose_cmd","(slave, cmd, aliasname = nil)",""],["expose_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-expose_cmd","(slave, cmd, aliasname = nil)",""],["expr","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-expr","(expression)",""],["expr","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-c-expr","(expression)",""],["expunge","Net::IMAP","classes/Net/IMAP.html#method-i-expunge","()","<p>Sends a EXPUNGE command to permanently remove from the currently selected\nmailbox all messages that have …\n"],["ext","String","classes/String.html#method-i-ext","(newext='')","<p>Replace the file extension with <code>newext</code>.  If there is no\nextension on the string, append the new extension …\n"],["extend","Object","classes/Object.html#method-i-extend","(*args)","<p>Adds to <em>obj</em> the instance methods from each module given as a\nparameter.\n\n<pre><code>module Mod\n  def hello\n    &quot;Hello ...\n</code></pre>\n"],["extend_object","E2MM","classes/E2MM.html#method-c-extend_object","(cl)",""],["extend_object","E2MM","classes/E2MM.html#method-c-extend_object","(cl)",""],["extend_object","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-extend_object","(obj)",""],["extend_object","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-extend_object","(obj)",""],["extend_object","MonitorMixin","classes/MonitorMixin.html#method-c-extend_object","(obj)",""],["extend_object","Mutex_m","classes/Mutex_m.html#method-c-extend_object","(obj)",""],["extend_object","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-c-extend_object","(obj)","<p>Initializes instance variable.\n"],["extend_object","Sync_m","classes/Sync_m.html#method-c-extend_object","(obj)",""],["extend_object","Sync_m","classes/Sync_m.html#method-c-extend_object","(obj)",""],["extended","IRB::HistorySavingAbility","classes/IRB/HistorySavingAbility.html#method-c-extended","(obj)","<p>def HistorySavingAbility.create_finalizer\n\n<pre><code>proc do\nif num = IRB.conf[:SAVE_HISTORY] and (num = num.to_i) ...</code></pre>\n"],["extended","MultiTkIp_PseudoToplevel_Evaluable","classes/MultiTkIp_PseudoToplevel_Evaluable.html#method-c-extended","(mod)",""],["extensions","Gem::Specification","classes/Gem/Specification.html#method-i-extensions","()","<p>Extensions to build when installing the gem.  See\nGem::Installer#build_extensions for valid values.\n"],["extensions","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-extensions","()","<p>Gets X509v3 extensions as array of X509Ext objects\n"],["extensions","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-extensions","()",""],["extensions","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-extensions","()","<p>Gets X509v3 extensions as array of X509Ext objects\n"],["extensions","URI::LDAP","classes/URI/LDAP.html#method-i-extensions","()","<p>returns extensions.\n"],["extensions=","Gem::Specification","classes/Gem/Specification.html#method-i-extensions-3D","(extensions)","<p>Sets extensions to <code>extensions</code>, ensuring it is an array.\nDon&#39;t use this, push onto the array instead. …\n"],["extensions=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-extensions-3D","(p1)","<p>Sets X509_EXTENSIONs\n"],["extensions=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-extensions-3D","(p1)",""],["extensions=","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-extensions-3D","(p1)","<p>Sets X509_EXTENSIONs\n"],["extensions=","URI::LDAP","classes/URI/LDAP.html#method-i-extensions-3D","(val)","<p>setter for extensions <code>val</code>\n"],["extents","Tk::BLT::Barchart","classes/Tk/BLT/Barchart.html#method-i-extents","(item)","<p>BarElement_ID = [&#39;blt_barchart_bar&#39;.freeze,\nTkUtil.untrust(&#39;00000&#39;)].freeze\n<p>def bar(elem=nil, …\n"],["extents","Tk::BLT::Graph","classes/Tk/BLT/Graph.html#method-i-extents","(item)","<p>BarElement_ID = [&#39;blt_graph_bar&#39;.freeze,\nTkUtil.untrust(&#39;00000&#39;)].freeze\n<p>def bar(elem=nil, …\n"],["extents","Tk::BLT::Stripchart","classes/Tk/BLT/Stripchart.html#method-i-extents","(item)","<p>BarElement_ID = [&#39;blt_stripchart_bar&#39;.freeze,\nTkUtil.untrust(&#39;00000&#39;)].freeze\n<p>def bar(elem=nil, …\n"],["extents","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-extents","(container, item)",""],["extern","DL::Importer","classes/DL/Importer.html#method-i-extern","(signature, *opts)",""],["external_encoding","ARGF","classes/ARGF.html#method-i-external_encoding","()","\n<pre><code>Returns the external encoding for files read from +ARGF+ as an +Encoding+\nobject. The external encoding ...</code></pre>\n"],["external_encoding","IO","classes/IO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If io\nis write mode and no encoding …\n"],["external_encoding","StringIO","classes/StringIO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If\nstrio is write mode and no encoding …\n"],["extmake","Object","classes/Object.html#method-i-extmake","(target)",""],["extname","File","classes/File.html#method-c-extname","(p1)","<p>Returns the extension (the portion of file name in <em>path</em> after the\nperiod).\n\n<pre><code>File.extname(&quot;test.rb&quot;)    ...</code></pre>\n"],["extname","Pathname","classes/Pathname.html#method-i-extname","()","<p>See <code>File.extname</code>.  Returns the file&#39;s extension.\n"],["extra_args","Gem::Command","classes/Gem/Command.html#method-c-extra_args","()",""],["extra_args=","Gem::Command","classes/Gem/Command.html#method-c-extra_args-3D","(value)",""],["extra_rdoc_files","Gem::Specification","classes/Gem/Specification.html#method-i-extra_rdoc_files","()","<p>Extra files to add to RDoc such as README or doc/examples.txt\n"],["extra_rdoc_files=","Gem::Specification","classes/Gem/Specification.html#method-i-extra_rdoc_files-3D","(files)","<p>Sets extra_rdoc_files to <code>files</code>, ensuring it is an array.\nDon&#39;t use this, push onto the array instead. …\n"],["extract","Exports","classes/Exports.html#method-c-extract","(objs, *rest)",""],["extract","Transformation","classes/Transformation.html#method-i-extract","(j)",""],["extract","URI","classes/URI.html#method-c-extract","(str, schemes = nil, &block)","<p>Synopsis\n\n<pre><code>URI::extract(str[, schemes][,&amp;blk])</code></pre>\n<p>Args\n"],["extract","URI::Parser","classes/URI/Parser.html#method-i-extract","(str, schemes = nil, &block)","<p>Args\n<p><code>str</code> &mdash; String to search\n<p><code>schemes</code> &mdash; Patterns to apply to <code>str</code>\n"],["extract_call_seq","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-extract_call_seq","(comment, meth)","<p>Look for a &#39;call-seq&#39; in the comment, and override the normal\nparameter stuff\n"],["extract_comment","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-extract_comment","(comment)","<p>Extracts the comment for this section from the original comment block. If\nthe first line contains :section:, …\n"],["extract_entry","Gem::Package::TarInput","classes/Gem/Package/TarInput.html#method-i-extract_entry","(destdir, entry, expected_md5sum = nil)",""],["extract_files","Gem::Installer","classes/Gem/Installer.html#method-i-extract_files","()","<p>Reads the file index and extracts each file into the gem directory.\n<p>Ensures that files can&#39;t be installed …\n"],["extract_makefile","Object","classes/Object.html#method-i-extract_makefile","(makefile, keep = true)",""],["facility","Syslog","classes/Syslog.html#method-c-facility","()","<p>Returns the facility number used in the last call to open()\n"],["fact","Object","classes/Object.html#method-i-fact","(n)",""],["fade","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-fade","(mode)",""],["fade?","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-fade-3F","()",""],["fail","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-fail","(err = nil, *rest)",""],["fail","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-fail","(err = nil, *rest)",""],["fail","Kernel","classes/Kernel.html#method-i-fail","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\n<code>RuntimeError</code> if <code>$!</code> is <code>nil</code>. With a\nsingle <code>String</code> …\n"],["failed","Iconv::Failure","classes/Iconv/Failure.html#method-i-failed","()","<p>Returns substring of the original string passed to Iconv that starts at the\ncharacter caused the exception. …\n"],["failsafe","TkFont","classes/TkFont.html#method-c-failsafe","(font)",""],["failsafe","TkFont","classes/TkFont.html#method-c-failsafe","(font)",""],["false","REXML::Functions","classes/REXML/Functions.html#method-c-false","( )","<p>UNTESTED\n"],["families","TkFont","classes/TkFont.html#method-c-families","(win=nil)",""],["families","TkFont","classes/TkFont.html#method-c-families","(win=nil)",""],["family","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-family","()","<p>returns the socket family as an integer.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).family ...</code></pre>\n"],["family","Socket::Option","classes/Socket/Option.html#method-i-family","()","<p>returns the socket family as an integer.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).family ...</code></pre>\n"],["family_addrinfo","Addrinfo","classes/Addrinfo.html#method-i-family_addrinfo","(*args)","<p>creates an Addrinfo object from the arguments.\n<p>The arguments are interpreted as similar to self.\n\n<pre><code>Addrinfo.tcp(&quot;0.0.0.0&quot;, ...</code></pre>\n"],["fannkuch","Object","classes/Object.html#method-i-fannkuch","(n)","<p>The Computer Language Shootout shootout.alioth.debian.org/ Contributed by\nSokolov Yura Modified by Ryan …\n"],["fast_delete","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-fast_delete","(*args)",""],["fast_generate","JSON","classes/JSON.html#method-i-fast_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. This method disables the checks …\n"],["fast_insert","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-fast_insert","(*args)",""],["fastmode=","GDBM","classes/GDBM.html#method-i-fastmode-3D","(p1)","<p>Turns the database&#39;s fast mode on or off. If fast mode is turned on,\ngdbm does not wait for writes …\n"],["fatal","Logger","classes/Logger.html#method-i-fatal","(progname = nil, &block)","<p>Log a <code>FATAL</code> message.\n<p>See #info for more information.\n"],["fatal","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-fatal","(msg)","<p>Shortcut for logging a FATAL message\n"],["fatal?","Logger","classes/Logger.html#method-i-fatal-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>FATAL</code> messages.\n"],["fatal?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-fatal-3F","()","<p>Will the logger output FATAL messages?\n"],["fault","XMLRPC::Convert","classes/XMLRPC/Convert.html#method-c-fault","(hash)",""],["fcntl","IO","classes/IO.html#method-i-fcntl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query\nfile-oriented I/O streams. Arguments …\n"],["fcntl","StringIO","classes/StringIO.html#method-i-fcntl","(*args)",""],["fcntl","TkTextIO","classes/TkTextIO.html#method-i-fcntl","(*args)",""],["fdatasync","IO","classes/IO.html#method-i-fdatasync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk.\n<p>If the underlying operating system does not support …\n"],["fdiv","Bignum","classes/Bignum.html#method-i-fdiv","(p1)","<p>Returns the floating point result of dividing <em>big</em> by\n<em>numeric</em>.\n\n<pre><code>-1234567890987654321.fdiv(13731)      #=&gt; ...\n</code></pre>\n"],["fdiv","Complex","classes/Complex.html#method-i-fdiv","(p1)","<p>Performs division as each part is a float, never returns a float.\n<p>For example:\n\n<pre><code>Complex(11,22).fdiv(3)  ...</code></pre>\n"],["fdiv","Fixnum","classes/Fixnum.html#method-i-fdiv","(p1)","<p>Returns the floating point result of dividing <em>fix</em> by\n<em>numeric</em>.\n\n<pre><code>654321.fdiv(13731)      #=&gt; 47.6528293642124 ...\n</code></pre>\n"],["fdiv","Float","classes/Float.html#method-i-fdiv","(p1)","<p>Returns float / numeric.\n"],["fdiv","Numeric","classes/Numeric.html#method-i-fdiv","(p1)","<p>Returns float division.\n"],["fdiv","Rational","classes/Rational.html#method-i-fdiv","(p1)","<p>Performs division and returns the value as a float.\n<p>For example:\n\n<pre><code>Rational(2, 3).fdiv(1)       #=&gt; 0.6666666666666666 ...\n</code></pre>\n"],["feed","Enumerator","classes/Enumerator.html#method-i-feed","(p1)","<p>Sets the value to be returned by the next yield inside <code>e</code>.\n<p>If the value is not set, the yield returns nil. …\n"],["feed_info","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-feed_info","()",""],["fetch","Array","classes/Array.html#method-i-fetch","(p1, p2 = v2)","<p>Tries to return the element at position <em>index</em>. If the index lies\noutside the array, the first form throws …\n"],["fetch","Board","classes/Board.html#method-i-fetch","(x,y)",""],["fetch","DBM","classes/DBM.html#method-i-fetch","(p1, p2 = v2)","<p>Return a value from the database by locating the key string provided.  If\nthe key is not found, returns …\n"],["fetch","DRb::TimerIdConv::TimerHolder2","classes/DRb/TimerIdConv/TimerHolder2.html#method-i-fetch","(key, dv=@sentinel)",""],["fetch","ENV","classes/ENV.html#method-c-fetch","(p1, p2 = v2)","<p>Retrieves the environment variable <code>name</code>.\n<p>If the given name does not exist and neither <code>default</code> nor a\nblock …\n"],["fetch","GDBM","classes/GDBM.html#method-i-fetch","(p1, p2 = v2)","<p>Retrieves the <em>value</em> corresponding to <em>key</em>. If there is no\nvalue associated with <em>key</em>, <em>default</em> will be returned …\n"],["fetch","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-fetch","(*args)",""],["fetch","Gem::StreamUI::SilentDownloadReporter","classes/Gem/StreamUI/SilentDownloadReporter.html#method-i-fetch","(filename, filesize)",""],["fetch","Gem::StreamUI::VerboseDownloadReporter","classes/Gem/StreamUI/VerboseDownloadReporter.html#method-i-fetch","(file_name, total_bytes)",""],["fetch","Hash","classes/Hash.html#method-i-fetch","(p1, p2 = v2)","<p>Returns a value from the hash for the given key. If the key can&#39;t be\nfound, there are several options: …\n"],["fetch","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-fetch","(key, *args)","<p>Returns the header field corresponding to the case-insensitive key. Returns\nthe default value <code>args</code>, or …\n"],["fetch","Net::IMAP","classes/Net/IMAP.html#method-i-fetch","(set, attr)","<p>Sends a FETCH command to retrieve data associated with a message in the\nmailbox. The <code>set</code> parameter is …\n"],["fetch","PStore","classes/PStore.html#method-i-fetch","(name, default=PStore::Error)","<p>This method is just like PStore#[], save that you may also provide a\n<em>default</em> value for the object.   …\n"],["fetch","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-fetch","(k)","<p>Fetches item <code>k</code> from the tuple.\n"],["fetch","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-fetch","(key)","<p>Fetches <code>key</code> from the tuple.\n"],["fetch","SDBM","classes/SDBM.html#method-i-fetch","(p1, p2 = v2)",""],["fetch","YAML::DBM","classes/YAML/DBM.html#method-i-fetch","( keystr, ifnone = nil )","<p>Return value associated with <code>key</code>.\n<p>If there is no value for <code>key</code> and no block is given, returns\n<code>ifnone</code>. …\n"],["fetch_file","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-fetch_file","(uri, *_)","<p>File Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_http","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-fetch_http","(uri, last_modified = nil, head = false, depth = 0)","<p>HTTP Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_https","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-fetch_https","(uri, last_modified = nil, head = false, depth = 0)",""],["fetch_path","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-fetch_path","(uri, mtime = nil, head = false)","<p>Downloads <code>uri</code> and returns it as a String.\n"],["fetch_server","DRb","classes/DRb.html#method-c-fetch_server","(uri)",""],["fetch_size","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-fetch_size","(uri)","<p>Returns the size of <code>uri</code> in bytes.\n"],["fetch_spec","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-fetch_spec","(spec, source_uri)",""],["fetch_with_errors","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-fetch_with_errors","(dependency, all = false, matching_platform = true, prerelease = false)","<p>Fetch specs matching <code>dependency</code>.  If <code>all</code> is true,\nall matching (released) versions are returned.  If …\n"],["fetcher","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-c-fetcher","()","<p>Cached RemoteFetcher instance.\n"],["fetcher","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-c-fetcher","()",""],["fib","Object","classes/Object.html#method-i-fib","(n)",""],["fiddle?","DL","classes/DL.html#method-c-fiddle-3F","()",""],["field","CSV::Row","classes/CSV/Row.html#method-i-field","(header_or_index, minimum_index = 0)","<p>This method will fetch the field value by <code>header</code> or\n<code>index</code>.  If a field is not found, <code>nil</code> is returned.\n…\n"],["field?","CSV::Row","classes/CSV/Row.html#method-i-field-3F","(data)","<p>Returns <code>true</code> if <code>data</code> matches a field in this row,\nand <code>false</code> otherwise.\n"],["field_row?","CSV::Row","classes/CSV/Row.html#method-i-field_row-3F","()","<p>Returns <code>true</code> if this is a field row.\n"],["fields","CSV::Row","classes/CSV/Row.html#method-i-fields","(*headers_and_or_indices)","<p>This method accepts any number of arguments which can be headers, indices,\nRanges of either, or two-element …\n"],["fig_erase","PhotoCanvas","classes/PhotoCanvas.html#method-i-fig_erase","()",""],["file","ARGF","classes/ARGF.html#method-i-file","()","<p>Returns the current file as an <code>IO</code> or <code>File</code> object.\n#&lt;IO:&lt;STDIN&gt;&gt; is returned when the current …\n"],["file","Digest::Class","classes/Digest/Class.html#method-c-file","(name)","<p>creates a digest object and reads a given file, <em>name</em>.\n\n<pre><code>p Digest::SHA256.file(&quot;X11R6.8.2-src.tar.bz2&quot;).hexdigest ...</code></pre>\n"],["file","Digest::Instance","classes/Digest/Instance.html#method-i-file","(name)","<p>updates the digest with the contents of a given file <em>name</em> and\nreturns self.\n"],["file?","File","classes/File.html#method-c-file-3F","(p1)","<p>Returns <code>true</code> if the named file exists and is a regular file.\n"],["file?","File::Stat","classes/File/Stat.html#method-i-file-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a regular file (not a device\nfile, pipe, socket, etc.).\n\n<pre><code>File.stat(&quot;testfile&quot;).file? ...</code></pre>\n"],["file?","FileTest","classes/FileTest.html#method-i-file-3F","(p1)","<p>Returns <code>true</code> if the named file exists and is a regular file.\n"],["file?","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-file-3F","()","<p>Is this tar entry a file?\n"],["file?","Pathname","classes/Pathname.html#method-i-file-3F","()","<p>See <code>FileTest.file?</code>.\n"],["fileDialog","Object","classes/Object.html#method-i-fileDialog","(w,ent,operation)",""],["file_dir","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-file_dir","()","<p>Directory where generated class HTML files live relative to the output dir.\n"],["file_field","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-file_field","(name = \"\", size = 20, maxlength = nil)","<p>Generate an File Upload Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["file_input?","IRB::Context","classes/IRB/Context.html#method-i-file_input-3F","()",""],["file_name","Gem::Specification","classes/Gem/Specification.html#method-i-file_name","()","<p>The default (generated) file name of the gem.  See also #spec_name.\n\n<pre><code>spec.file_name # =&gt; &quot;example-1.0.gem&quot;\n</code></pre>\n"],["file_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-file_name","()","<p>File name where this CodeObject was found.\n<p>See also RDoc::Context#in_files\n"],["filename","ARGF","classes/ARGF.html#method-i-filename","()","<p>Returns the current filename. “-” is returned when the current file is\nSTDIN.\n<p>For example:\n\n<pre><code>$ ...</code></pre>\n"],["filename","Ripper::Filter","classes/Ripper/Filter.html#method-i-filename","()","<p>The file name of the input.\n"],["filename_quote_characters","Readline","classes/Readline.html#method-c-filename_quote_characters","()","<p>Gets a list of characters that cause a filename to be quoted by the\ncompleter when they appear in a completed …\n"],["filename_quote_characters=","Readline","classes/Readline.html#method-c-filename_quote_characters-3D","(p1)","<p>Sets a list of characters that cause a filename to be quoted by the\ncompleter when they appear in a completed …\n"],["fileno","ARGF","classes/ARGF.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for the current\nfile. Raises an <code>ArgumentError</code> …\n"],["fileno","IO","classes/IO.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for\n<em>ios</em>.\n\n<pre><code>$stdin.fileno    #=&gt; 0\n$stdout.fileno ...\n</code></pre>\n"],["fileno","StringIO","classes/StringIO.html#method-i-fileno","()",""],["fileno","TkTextIO","classes/TkTextIO.html#method-i-fileno","()",""],["filepos","IXMLDOMParseError","classes/IXMLDOMParseError.html#method-i-filepos","()","<p>I4 filepos the absolute file position in the XML document containing the\nerror\n"],["files","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-files","()",""],["files","Gem::Specification","classes/Gem/Specification.html#method-i-files","()","<p>Files included in this gem.  You cannot append to this accessor, you must\nassign to it.\n<p>Only add files …\n"],["files","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-files","()",""],["files","Tk::MacResource","classes/Tk/MacResource.html#method-c-files","(rsrcRef=nil)",""],["files=","Gem::Specification","classes/Gem/Specification.html#method-i-files-3D","(files)","<p>Sets files to <code>files</code>, ensuring it is an array.\n"],["files_hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-files_hash","()",""],["fill","Array","classes/Array.html#method-i-fill","(p1 = v1, p2 = v2)","<p>The first three forms set the selected elements of <code>self</code> (which\nmay be the entire array) to <em>obj</em>. A <em>start</em> …\n"],["fillMenu","Object","classes/Object.html#method-i-fillMenu","(menu)","<p>Side-by side check, radio, and menu button comparison:\n"],["fillTree","Object","classes/Object.html#method-i-fillTree","(treeview)",""],["fill_breakable","PrettyPrint","classes/PrettyPrint.html#method-i-fill_breakable","(sep=' ', width=sep.length)","<p>This is similar to #breakable except the decision to break or not is\ndetermined individually.\n<p>Two #fill_breakable …\n"],["fill_headers","Object","classes/Object.html#method-i-fill_headers","(w, r=10, c=10)",""],["fill_table","Object","classes/Object.html#method-i-fill_table","(tbl_list, page, r=10, c=10)",""],["fillcolor","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-fillcolor","(name=None)",""],["filter","CSV","classes/CSV.html#method-c-filter","(*args)","<p>This method is a convenience for building Unix-like filters for CSV data.\nEach row is yielded to the …\n"],["filter","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-filter","(elements, path)","<p>Given an array of nodes it filters the array based on the path. The result\nis that when this method returns, …\n"],["filter","Tk::Iwidgets::Extfileselectionbox","classes/Tk/Iwidgets/Extfileselectionbox.html#method-i-filter","()",""],["filter","Tk::Iwidgets::Extfileselectiondialog","classes/Tk/Iwidgets/Extfileselectiondialog.html#method-i-filter","()",""],["filter","Tk::Iwidgets::Fileselectionbox","classes/Tk/Iwidgets/Fileselectionbox.html#method-i-filter","()",""],["filter","Tk::Iwidgets::Fileselectiondialog","classes/Tk/Iwidgets/Fileselectiondialog.html#method-i-filter","()",""],["filter","URI::LDAP","classes/URI/LDAP.html#method-i-filter","()","<p>returns filter.\n"],["filter=","URI::LDAP","classes/URI/LDAP.html#method-i-filter-3D","(val)","<p>setter for filter <code>val</code>\n"],["filter_backtrace","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-filter_backtrace","(bt)","<p>error message manipulator\n"],["filter_backtrace","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-c-filter_backtrace","(array)",""],["filter_methods","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-filter_methods","(found, name)","<p>Filters the methods in <code>found</code> trying to find a match for\n<code>name</code>.\n"],["final","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-final","()","<p>Returns the remaining data held in the cipher object.  Further calls to\nCipher#update or Cipher#final …\n"],["find","Encoding","classes/Encoding.html#method-c-find","(p1)","<p>Search the encoding with specified <em>name</em>. <em>name</em> should be a\nstring or symbol.\n\n<pre><code>Encoding.find(&quot;US-ASCII&quot;) ...</code></pre>\n"],["find","Enumerable","classes/Enumerable.html#method-i-find","(p1 = v1)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not false.  If no object matches, …\n"],["find","Find","classes/Find.html#method-c-find","(*paths)","<p>Calls the associated block with the name of every file and directory listed\nas arguments, then recursively …\n"],["find","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-find","(glob)","<p>Look in all the installed gems until a matching <code>glob</code> is found.\nReturn the <em>gemspec</em> of the gem where it …\n"],["find","IRB::Locale","classes/IRB/Locale.html#method-i-find","(file , paths = $:)",""],["find","Pathname","classes/Pathname.html#method-i-find","()","<p>Pathname#find is an iterator to traverse a directory tree in a depth first\nmanner.  It yields a Pathname …\n"],["find","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-find","(template)","<p>Finds a live tuple that matches <code>template</code>.\n"],["find","Rinda::TupleBag::TupleBin","classes/Rinda/TupleBag/TupleBin.html#method-i-find","(&blk)",""],["find","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-find","(keys={})",""],["find","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-find","(first, last, keys={})",""],["find","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-find","(findinfo, confine=None)",""],["find","Tk::Canvas","classes/Tk/Canvas.html#method-i-find","(mode, *args)",""],["find","Tk::Iwidgets::Finddialog","classes/Tk/Iwidgets/Finddialog.html#method-i-find","()",""],["find","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-find","(mode, *args)",""],["find","TkNamedFont","classes/TkNamedFont.html#method-c-find","(name)","<p>for built-in named fonts\n"],["find","TkcTagAccess","classes/TkcTagAccess.html#method-i-find","()",""],["find_X11","Object","classes/Object.html#method-i-find_X11","(*opt_paths)",""],["find_above","Tk::Canvas","classes/Tk/Canvas.html#method-i-find_above","(target)",""],["find_above","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-find_above","(target)",""],["find_active","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-find_active","(glob)",""],["find_alias_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_alias_comment","(class_name, new_name, old_name)","<p>Finds the comment for an alias on <code>class_name</code> from\n<code>new_name</code> to <code>old_name</code>\n"],["find_all","Enumerable","classes/Enumerable.html#method-i-find_all","()","<p>Returns an array containing all elements of <em>enum</em> for which\n<em>block</em> is not <code>false</code> (see also\n<code>Enumerable#reject</code> …\n"],["find_all","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-find_all","(glob)","<p>Works like #find, but finds all gemspecs matching <code>glob</code>.\n"],["find_all","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-find_all","(template)","<p>Finds all live tuples that match <code>template</code>.\n"],["find_all","Tk::Canvas","classes/Tk/Canvas.html#method-i-find_all","()",""],["find_all","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-find_all","()",""],["find_all_by_name","Gem::Specification","classes/Gem/Specification.html#method-c-find_all_by_name","(name, *requirements)","<p>Returns every spec that matches <code>name</code> and optional\n<code>requirements</code>.\n"],["find_all_template","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-find_all_template","(tuple)","<p>Finds all tuples in the TupleBag which when treated as templates, match\n<code>tuple</code> and are alive.\n"],["find_ancestor_local_symbol","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-find_ancestor_local_symbol","(symbol)","<p>Looks for a symbol in the #ancestors. See Context#find_local_symbol.\n"],["find_attr_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_attr_comment","(var_name, attr_name, read = nil, write = nil)","<p>Finds a comment for rb_define_attr, rb_attr or Document-attr.\n<p><code>var_name</code> is the C class variable the attribute …\n"],["find_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-find_attribute","(name, singleton)","<p>Finds an attribute <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_attribute_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_attribute_named","(name)","<p>Finds an attribute with <code>name</code> in this context\n"],["find_below","Tk::Canvas","classes/Tk/Canvas.html#method-i-find_below","(target)",""],["find_below","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-find_below","(target)",""],["find_body","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_body","(class_name, meth_name, meth_obj, file_content, quiet = false)","<p>Find the C code corresponding to a Ruby method\n"],["find_by_name","Gem::Specification","classes/Gem/Specification.html#method-c-find_by_name","(name, *requirements)","<p>Find the best specification matching a <code>name</code> and\n<code>requirements</code>. Raises if the dependency doesn&#39;t resolve …\n"],["find_by_path","Gem::Specification","classes/Gem/Specification.html#method-c-find_by_path","(path)","<p>Return the best specification that contains the file matching\n<code>path</code>.\n"],["find_child","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-find_child","(label)",""],["find_class","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_class","(raw_name, name)","<p>Finds a RDoc::NormalClass or RDoc::NormalModule for <code>raw_name</code>\n"],["find_class_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_class_comment","(class_name, class_mod)","<p>Look for class or module documentation above Init_+class_name+(void), in a\nDocument-class <code>class_name</code> …\n"],["find_class_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_class_method_named","(name)","<p>Finds a class method with <code>name</code> in this context\n"],["find_class_named","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-find_class_named","(name)","<p>Finds a class or module with <code>name</code> in this namespace or its\ndescendants\n"],["find_class_named","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-find_class_named","(name)","<p>Finds the class with <code>name</code> in all discovered classes\n"],["find_class_named_from","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-find_class_named_from","(name, from)","<p>Finds the class with <code>name</code> starting in namespace\n<code>from</code>\n"],["find_class_or_module","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_class_or_module","(name)","<p>See RDoc::TopLevel::find_class_or_module\n"],["find_class_or_module","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-find_class_or_module","(name)","<p>Finds the class or module with <code>name</code>\n"],["find_classes","Tk::Itcl","classes/Tk/Itcl.html#method-c-find_classes","(pat=None)",""],["find_closest","Tk::Canvas","classes/Tk/Canvas.html#method-i-find_closest","(x, y, halo=None, start=None)",""],["find_closest","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-find_closest","(x, y, halo=None, start=None)",""],["find_command","Gem::CommandManager","classes/Gem/CommandManager.html#method-i-find_command","(cmd_name)",""],["find_command","Tk::BLT::Container","classes/Tk/BLT/Container.html#method-i-find_command","(pat)",""],["find_command_possibilities","Gem::CommandManager","classes/Gem/CommandManager.html#method-i-find_command_possibilities","(cmd_name)",""],["find_const_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_const_comment","(type, const_name, class_name = nil)","<p>Finds a comment matching <code>type</code> and <code>const_name</code>\neither above the comment or in the matching Document- section. …\n"],["find_constant_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_constant_named","(name)","<p>Finds a constant with <code>name</code> in this context\n"],["find_crl","CrlStore","classes/CrlStore.html#method-i-find_crl","(cert)",""],["find_enclosed","Tk::Canvas","classes/Tk/Canvas.html#method-i-find_enclosed","(x1, y1, x2, y2)",""],["find_enclosed","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-find_enclosed","(x1, y1, x2, y2)",""],["find_enclosing_module_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_enclosing_module_named","(name)","<p>Find a module at a higher scope\n"],["find_executable","Object","classes/Object.html#method-i-find_executable","(bin, path = nil)","<p>Searches for the executable <code>bin</code> on <code>path</code>. The\ndefault path is your PATH environment variable. If that …\n"],["find_external_alias","RDoc::Context","classes/RDoc/Context.html#method-i-find_external_alias","(name, singleton)","<p>Finds an external alias <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_external_alias_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_external_alias_named","(name)","<p>Finds an external alias with <code>name</code> in this context\n"],["find_file_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_file_named","(name)","<p>Finds a file with <code>name</code> in this context\n"],["find_file_named","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-find_file_named","(name)","<p>Finds the file with <code>name</code> in all discovered files\n"],["find_files","Gem","classes/Gem.html#method-c-find_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> that can be used by a\ngem to pick up features from other gems. …\n"],["find_first_recursive","REXML::Node","classes/REXML/Node.html#method-i-find_first_recursive","()","<p>Find (and return) first subnode (recursively) for which the block evaluates\nto true. Returns <code>nil</code> if none …\n"],["find_framework","Object","classes/Object.html#method-i-find_framework","(tcl_hdr, tk_hdr)",""],["find_gems_with_sources","Gem::DependencyInstaller","classes/Gem/DependencyInstaller.html#method-i-find_gems_with_sources","(dep)","<p>Returns a list of pairs of gemspecs and source_uris that match\nGem::Dependency <code>dep</code> from both local (Dir.pwd) …\n"],["find_header","Object","classes/Object.html#method-i-find_header","(header, *paths)","<p>Instructs mkmf to search for the given <code>header</code> in any of the\n<code>paths</code> provided, and returns whether or not …\n"],["find_in_cache","Gem::Commands::UnpackCommand","classes/Gem/Commands/UnpackCommand.html#method-i-find_in_cache","(filename)","<p>Find cached filename in Gem.path. Returns nil if the file cannot be found.\n"],["find_in_unresolved","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-find_in_unresolved","(glob)",""],["find_in_unresolved","Gem::Specification","classes/Gem/Specification.html#method-c-find_in_unresolved","(path)","<p>Return currently unresolved specs that contain the file matching\n<code>path</code>.\n"],["find_in_unresolved_tree","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-find_in_unresolved_tree","(glob)",""],["find_in_unresolved_tree","Gem::Specification","classes/Gem/Specification.html#method-c-find_in_unresolved_tree","(path)","<p>Search through all unresolved deps and sub-dependencies and return specs\nthat contain the file matching …\n"],["find_include_file","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-i-find_include_file","(name)","<p>Look for the given file in the directory containing the current file, and\nthen in each of the directories …\n"],["find_index","Array","classes/Array.html#method-i-find_index","(p1)","<p>Returns the index of the first object in <code>self</code> such that the\nobject is <code>==</code> to <em>obj</em>. If a block is given …\n"],["find_index","Enumerable","classes/Enumerable.html#method-i-find_index","(p1)","<p>Compares each entry in <em>enum</em> with <em>value</em> or passes to\n<em>block</em>.  Returns the index for the first for which …\n"],["find_index","Matrix","classes/Matrix.html#method-i-find_index","(*args)",""],["find_instance_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_instance_method_named","(name)","<p>Finds an instance method with <code>name</code> in this context\n"],["find_library","Object","classes/Object.html#method-i-find_library","(lib, func, *paths, &b)","<p>Returns whether or not the entry point <code>func</code> can be found\nwithin the library <code>lib</code> in one of the <code>paths</code>\nspecified, …\n"],["find_line","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-find_line","(linenum)",""],["find_local_symbol","RDoc::Context","classes/RDoc/Context.html#method-i-find_local_symbol","(symbol)","<p>Finds a method, constant, attribute, external alias, module or file named\n<code>symbol</code> in this context.\n"],["find_local_symbol","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_local_symbol","(symbol)","<p>Finds a class or module named <code>symbol</code>\n"],["find_macosx_framework","Object","classes/Object.html#method-i-find_macosx_framework","()",""],["find_matching","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-find_matching","(*args)",""],["find_matching_with_errors","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-find_matching_with_errors","(dependency, all = false, matching_platform = true, prerelease = false)","<p>Find spec names that match <code>dependency</code>.  If <code>all</code> is\ntrue, all matching released versions are returned. …\n"],["find_method","RDoc::Context","classes/RDoc/Context.html#method-i-find_method","(name, singleton)","<p>Finds a method named <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_method_named","(name)","<p>Finds a instance or module method with <code>name</code> in this context\n"],["find_methods","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-find_methods","(name)","<p>Yields items matching <code>name</code> including the store they were found\nin, the class being searched for, the …\n"],["find_modifiers","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_modifiers","(comment, meth_obj)","<p>Handles modifiers in <code>comment</code> and updates <code>meth_obj</code>\nas appropriate.\n<p>If <code>:nodoc:</code> is found, documentation on …\n"],["find_module_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_module_named","(name)","<p>Find a module with <code>name</code> using ruby&#39;s scoping rules\n"],["find_module_named","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-find_module_named","(name)","<p>Finds the module with <code>name</code> in all discovered modules\n"],["find_module_named","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_module_named","(name)","<p>Finds a module or class with <code>name</code>\n"],["find_name","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-find_name","(full_name)",""],["find_name","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-find_name","(gem_name, requirement = Gem::Requirement.default)","<p>Find a gem by an exact match on the short name.\n"],["find_name","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-find_name","(gem_name, requirement = Gem::Requirement.default)","<p>Find a gem by an exact match on the short name.\n"],["find_name","Tk::BLT::Container","classes/Tk/BLT/Container.html#method-i-find_name","(pat)",""],["find_next_char","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-find_next_char","(idx, chr)",""],["find_next_space","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-find_next_space","(idx)",""],["find_objects","Tk::Itcl","classes/Tk/Itcl.html#method-c-find_objects","(*args)",""],["find_overlapping","Tk::Canvas","classes/Tk/Canvas.html#method-i-find_overlapping","(x1, y1, x2, y2)",""],["find_overlapping","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-find_overlapping","(x1, y1, x2, y2)",""],["find_override_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_override_comment","(class_name, meth_obj)","<p>Finds a <code>Document-method</code> override for <code>meth_obj</code> on\n<code>class_name</code>\n"],["find_paths","Gem::Commands::WhichCommand","classes/Gem/Commands/WhichCommand.html#method-i-find_paths","(package_name, dirs)",""],["find_position","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-find_position","(x, y, confine=None)",""],["find_previous_space","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-find_previous_space","(idx)",""],["find_proxy","URI::Generic","classes/URI/Generic.html#method-i-find_proxy","()","<p>returns a proxy URI. The proxy URI is obtained from environment variables\nsuch as http_proxy, ftp_proxy …\n"],["find_rakefile_location","Rake::Application","classes/Rake/Application.html#method-i-find_rakefile_location","()",""],["find_rakefile_location","Rake::Application","classes/Rake/Application.html#method-i-find_rakefile_location","()",""],["find_reverse_dependencies","Gem::Commands::DependencyCommand","classes/Gem/Commands/DependencyCommand.html#method-i-find_reverse_dependencies","(spec)","<p>Returns an Array of [specification, dep] that are satisfied by\n<code>spec</code>.\n"],["find_runnable","Rake::AltSystem","classes/Rake/AltSystem.html#method-i-find_runnable","(file)",""],["find_seq","Object","classes/Object.html#method-i-find_seq","( seq,s )",""],["find_spec_by_name_and_version","Gem::DependencyInstaller","classes/Gem/DependencyInstaller.html#method-i-find_spec_by_name_and_version","(gem_name, version = Gem::Requirement.default, prerelease = false)","<p>Finds a spec and the source_uri it came from for gem <code>gem_name</code>\nand <code>version</code>.  Returns an Array of specs …\n"],["find_spec_for_file","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-find_spec_for_file","(file)","<p>Looks through the available gemspecs and finds the first one that contains\n<code>file</code> as a requirable file. …\n"],["find_symbol","RDoc::Context","classes/RDoc/Context.html#method-i-find_symbol","(symbol)","<p>Look up <code>symbol</code>, first as a module, then as a local symbol.\n"],["find_symbol_module","RDoc::Context","classes/RDoc/Context.html#method-i-find_symbol_module","(symbol)","<p>Look up a module named <code>symbol</code>.\n"],["find_system_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-find_system_command","(command)","<p>private functions\n"],["find_tcl","Object","classes/Object.html#method-i-find_tcl","(tcllib, stubs, version, *opt_paths)",""],["find_tcltk_header","Object","classes/Object.html#method-i-find_tcltk_header","(tclver, tkver)",""],["find_tcltk_library","Object","classes/Object.html#method-i-find_tcltk_library","(tcllib, tklib, stubs, tclversion, tkversion, tcl_opt_paths, tk_opt_paths)",""],["find_tk","Object","classes/Object.html#method-i-find_tk","(tklib, stubs, version, *opt_paths)",""],["find_type","Object","classes/Object.html#method-i-find_type","(type, opt, *headers, &b)","<p>Returns where the static type <code>type</code> is defined.\n<p>You may also pass additional flags to <code>opt</code> which are then …\n"],["find_unique","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-find_unique","(all_hash)","<p>Finds unique classes/modules defined in <code>all_hash</code>, and returns\nthem as an array. Performs the alias updates …\n"],["find_withtag","Tk::Canvas","classes/Tk/Canvas.html#method-i-find_withtag","(tag)",""],["find_withtag","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-find_withtag","(tag)",""],["finger","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-c-finger","()","<p>Creates a singleton RingFinger and looks for a RingServer.  Returns the\ncreated RingFinger.\n"],["finish","Encoding::Converter","classes/Encoding/Converter.html#method-i-finish","()","<p>Finishes the converter. It returns the last part of the converted string.\n\n<pre><code>ec = Encoding::Converter.new(&quot;utf-8&quot;, ...</code></pre>\n"],["finish","Net::HTTP","classes/Net/HTTP.html#method-i-finish","()","<p>Finishes the HTTP session and closes the TCP connection. Raises IOError if\nthe session has not been started. …\n"],["finish","Net::HTTP","classes/Net/HTTP.html#method-i-finish","()","<p>Finishes the HTTP session and closes the TCP connection. Raises IOError if\nthe session has not been started. …\n"],["finish","Net::POP3","classes/Net/POP3.html#method-i-finish","()","<p>Finishes a POP3 session and closes TCP connection.\n"],["finish","Net::POP3","classes/Net/POP3.html#method-i-finish","()","<p>Finishes a POP3 session and closes TCP connection.\n"],["finish","Net::POP3","classes/Net/POP3.html#method-i-finish","()","<p>Finishes a POP3 session and closes TCP connection.\n"],["finish","Net::POP3","classes/Net/POP3.html#method-i-finish","()","<p>Finishes a POP3 session and closes TCP connection.\n"],["finish","Net::SMTP","classes/Net/SMTP.html#method-i-finish","()","<p>Finishes the SMTP session and closes TCP connection. Raises IOError if not\nstarted.\n"],["finish","Net::SMTP","classes/Net/SMTP.html#method-i-finish","()","<p>Finishes the SMTP session and closes TCP connection. Raises IOError if not\nstarted.\n"],["finish","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-finish","()",""],["finish","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-finish","()",""],["finish","RDoc::Options","classes/RDoc/Options.html#method-i-finish","()","<p>Completes any unfinished option setup business such as filtering for\nexistent files, creating a regexp …\n"],["finish","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-finish","()","<p>Closes the GzipFile object. Unlike Zlib::GzipFile#close, this method never\ncalls the close method of …\n"],["finish","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-finish","()","<p>Finishes the stream and flushes output buffer. See Zlib::Deflate#finish and\nZlib::Inflate#finish for …\n"],["finish_all_jobs","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-finish_all_jobs","()",""],["finished?","ThreadsWait","classes/ThreadsWait.html#method-i-finished-3F","()","<p>Returns <code>true</code> if any thread has terminated and is ready to be\ncollected.\n"],["finished?","ThreadsWait","classes/ThreadsWait.html#method-i-finished-3F","()","<p>Returns <code>true</code> if any thread has terminated and is ready to be\ncollected.\n"],["finished?","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-finished-3F","()","<p>Returns true if the stream is finished.\n"],["finite?","BigDecimal","classes/BigDecimal.html#method-i-finite-3F","()","<p>Returns True if the value is finite (not NaN or infinite)\n"],["finite?","Float","classes/Float.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <em>flt</em> is a valid IEEE floating point\nnumber (it is not infinite, and <code>nan?</code> is <code>false</code>).\n"],["first","Array","classes/Array.html#method-i-first","(*args)","<p>Returns the first element, or the first <code>n</code> elements, of the\narray. If the array is empty, the first form …\n"],["first","Enumerable","classes/Enumerable.html#method-i-first","(p1 = v1)","<p>Returns the first element, or the first <code>n</code> elements, of the\nenumerable. If the enumerable is empty, the …\n"],["first","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-first","(element, path, namespaces=EMPTY_HASH)",""],["first","REXML::XPath","classes/REXML/XPath.html#method-c-first","(element, path=nil, namespaces=nil, variables={})","<p>Finds and returns the first node that matches the supplied xpath.\n<p>element &mdash; The context element\n<p>path &mdash; The …\n"],["first","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-first","( path_stack, node )","<p>Performs a depth-first (document order) XPath search, and returns the first\nmatch.  This is the fastest, …\n"],["first","Range","classes/Range.html#method-i-first","(p1)","<p>Returns the first object in <em>rng</em>, or the first <code>n</code>\nelements.\n"],["first","TkTextTag","classes/TkTextTag.html#method-i-first","()",""],["first","TkTextTag","classes/TkTextTag.html#method-i-first","()",""],["first?","PrettyPrint","classes/PrettyPrint.html#method-i-first-3F","()","<p>first? is a predicate to test the call is a first call to first? with\ncurrent group.\n<p>It is useful to format …\n"],["first?","PrettyPrint::Group","classes/PrettyPrint/Group.html#method-i-first-3F","()",""],["first?","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-first-3F","()",""],["firstChild","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXMLDOMText","classes/IXMLDOMText.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","IXTLRuntime","classes/IXTLRuntime.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["firstChild","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-firstChild","()","<p>IXMLDOMNode firstChild first child of the node\n"],["first_child","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-first_child","()",""],["fix","BigDecimal","classes/BigDecimal.html#method-i-fix","()","<p>Return the integer part of the number.\n"],["fix_basic_object_inheritance","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-fix_basic_object_inheritance","()","<p>Fixes the erroneous <code>BasicObject &lt; Object</code> in 1.9.\n<p>Because we assumed all classes without a stated superclass …\n"],["fixed_encoding?","Regexp","classes/Regexp.html#method-i-fixed_encoding-3F","()","<p>Returns false if rxp is applicable to a string with any ASCII compatible\nencoding. Returns true otherwise. …\n"],["fixup","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-fixup","()",""],["flags=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-flags-3D","(p1)",""],["flash","Curses","classes/Curses.html#method-c-flash","()","<p>Flashs the screen, for visual alarm on the terminal, if possible; otherwise\nit sounds the alert.\n<p>see also …\n"],["flash","Tk::Button","classes/Tk/Button.html#method-i-flash","()",""],["flash","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-flash","(idx)",""],["flash","Tk::Iwidgets::Extbutton","classes/Tk/Iwidgets/Extbutton.html#method-i-flash","()",""],["flash","Tk::Iwidgets::Pushbutton","classes/Tk/Iwidgets/Pushbutton.html#method-i-flash","()",""],["flash","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-flash","(idx)",""],["flat_map","Enumerable","classes/Enumerable.html#method-i-flat_map","()","<p>Returns a new array with the concatenated results of running <em>block</em>\nonce for every element in <em>enum</em>.\n<p>If …\n"],["flatten","Array","classes/Array.html#method-i-flatten","(p1 = v1)","<p>Returns a new array that is a one-dimensional flattening of this array\n(recursively). That is, for every …\n"],["flatten","Hash","classes/Hash.html#method-i-flatten","(*args)","<p>Returns a new array that is a one-dimensional flattening of this hash. That\nis, for every key or value …\n"],["flatten","Set","classes/Set.html#method-i-flatten","()","<p>Returns a new set that is a copy of the set, flattening each containing set\nrecursively.\n"],["flatten!","Array","classes/Array.html#method-i-flatten-21","(p1 = v1)","<p>Flattens <code>self</code> in place. Returns <code>nil</code> if no\nmodifications were made (i.e., <em>ary</em> contains no subarrays.) …\n"],["flatten!","Set","classes/Set.html#method-i-flatten-21","()","<p>Equivalent to Set#flatten, but replaces the receiver with the result in\nplace.  Returns nil if no modifications …\n"],["flock","File","classes/File.html#method-i-flock","(p1)","<p>Locks or unlocks a file according to <em>locking_constant</em> (a logical\n<em>or</em> of the values in the table below). …\n"],["floor","BigDecimal","classes/BigDecimal.html#method-i-floor","(p1 = v1)","<p>Return the largest integer less than or equal to the value, as a\nBigDecimal.\n<p>BigDecimal(&#39;3.14159&#39;).floor …\n"],["floor","Float","classes/Float.html#method-i-floor","()","<p>Returns the largest integer less than or equal to <em>flt</em>.\n\n<pre><code>1.2.floor      #=&gt; 1\n2.0.floor      #=&gt; 2\n(-1.2).floor ...\n</code></pre>\n"],["floor","Integer","classes/Integer.html#method-i-floor","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["floor","Integer","classes/Integer.html#method-i-floor","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["floor","Numeric","classes/Numeric.html#method-i-floor","()","<p>Returns the largest integer less than or equal to <em>num</em>.\n<code>Numeric</code> implements this by converting <em>anInteger</em> …\n"],["floor","REXML::Functions","classes/REXML/Functions.html#method-c-floor","( number )",""],["floor","Rational","classes/Rational.html#method-i-floor","(*args)","<p>Returns the truncated value (toward negative infinity).\n<p>For example:\n\n<pre><code>Rational(3).floor      #=&gt; 3\nRational(2, ...\n</code></pre>\n"],["floor2_bg1","Object","classes/Object.html#method-i-floor2_bg1","(w,fill,outline)","<p>floor2_bg1 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor2_bg2","Object","classes/Object.html#method-i-floor2_bg2","(w,fill,outline)","<p>floor2_bg2 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor2_bg3","Object","classes/Object.html#method-i-floor2_bg3","(w,fill,outline)","<p>floor2_bg3 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor2_fg1","Object","classes/Object.html#method-i-floor2_fg1","(w,color)","<p>floor2_fg1 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor2_fg2","Object","classes/Object.html#method-i-floor2_fg2","(w,color)","<p>floor2_fg2 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor2_fg3","Object","classes/Object.html#method-i-floor2_fg3","(w,color)","<p>floor2_fg3 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floorDisplay","Object","classes/Object.html#method-i-floorDisplay","(w,active)","<p>floorDisplay – Recreate the floorplan display in the canvas given by “w”. \nThe floor given …\n"],["floorDisplay2","Object","classes/Object.html#method-i-floorDisplay2","(w,active)","<p>floorDisplay2 – Recreate the floorplan display in the canvas given by “w”. \nThe floor given …\n"],["floor_bg1","Object","classes/Object.html#method-i-floor_bg1","(w,fill,outline)","<p>floor_bg1 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor_bg2","Object","classes/Object.html#method-i-floor_bg2","(w,fill,outline)","<p>floor_bg2 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor_bg3","Object","classes/Object.html#method-i-floor_bg3","(w,fill,outline)","<p>floor_bg3 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor_fg1","Object","classes/Object.html#method-i-floor_fg1","(w,color)","<p>floor_fg1 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor_fg2","Object","classes/Object.html#method-i-floor_fg2","(w,color)","<p>floor_fg2 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["floor_fg3","Object","classes/Object.html#method-i-floor_fg3","(w,color)","<p>floor_fg3 – This method represents part of the floorplan database.  When\ninvoked, it instantiates the …\n"],["flow","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-flow","(str)","<p>Processes <code>str</code> converting attributes, HTML and specials\n"],["flush","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-i-flush","()","<p>Flushes the TarWriter&#39;s IO\n"],["flush","IO","classes/IO.html#method-i-flush","()","<p>Flushes any buffered data within <em>ios</em> to the underlying operating\nsystem (note that this is Ruby internal …\n"],["flush","Logger","classes/Logger.html#method-i-flush","()",""],["flush","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-flush","()","<p>Flushes buffered data to the SSLSocket.\n"],["flush","PrettyPrint","classes/PrettyPrint.html#method-i-flush","()","<p>outputs buffered data.\n"],["flush","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-flush","()",""],["flush","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-flush","()",""],["flush","StringIO","classes/StringIO.html#method-i-flush","()",""],["flush","Tk::Tcllib::Widget::Canvas_Sqmap","classes/Tk/Tcllib/Widget/Canvas_Sqmap.html#method-i-flush","()",""],["flush","TkTextIO","classes/TkTextIO.html#method-i-flush","()",""],["flush","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database\nwill be written there instead of to the …\n"],["flush","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-i-flush","(output=nil)","<p>Flush the group database.  If <code>output</code> is given the database\nwill be written there instead of to the original …\n"],["flush","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database\nwill be written there instead of to the …\n"],["flush","Win32::Registry","classes/Win32/Registry.html#method-i-flush","()","<p>Write all the attributes into the registry file.\n"],["flush","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-flush","(p1 = v1)","<p>This method is equivalent to <code>deflate(&#39;&#39;, flush)</code>.  If\nflush is omitted, <code>SYNC_FLUSH</code> is used as …\n"],["flush","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-flush","(p1 = v1)","<p>Flushes all the internal buffers of the GzipWriter object.  The meaning of\n<code>flush</code> is same as in Zlib::Deflate#deflate …\n"],["flush_left","RDoc::Text","classes/RDoc/Text.html#method-i-flush_left","(text)","<p>Flush <code>text</code> left based on the shortest line\n"],["flush_next_in","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-flush_next_in","()","<p>Flushes input buffer and returns all data in that buffer.\n"],["flush_next_out","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-flush_next_out","()","<p>Flushes output buffer and returns all data in that buffer.\n"],["flush_sessions","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-flush_sessions","(p1 = v1)","<p>Removes sessions in the internal cache that have expired at\n<code>time</code>.\n"],["fnmatch","File","classes/File.html#method-c-fnmatch","(p1, p2, p3 = v3)","<p>Returns true if <em>path</em> matches against <em>pattern</em> The pattern\nis not a regular expression; instead it follows …\n"],["fnmatch","Pathname","classes/Pathname.html#method-i-fnmatch","(p1, p2 = v2)","<p>See <code>File.fnmatch</code>.  Return <code>true</code> if the receiver\nmatches the given pattern.\n"],["fnmatch?","File","classes/File.html#method-c-fnmatch-3F","(p1, p2, p3 = v3)","<p>Returns true if <em>path</em> matches against <em>pattern</em> The pattern\nis not a regular expression; instead it follows …\n"],["fnmatch?","Pathname","classes/Pathname.html#method-i-fnmatch-3F","(p1, p2 = v2)","<p>See <code>File.fnmatch</code>.  Return <code>true</code> if the receiver\nmatches the given pattern.\n"],["focus","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-focus","(index)",""],["focus","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-focus","()",""],["focus","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-focus","()",""],["focus","Tk::BWidget","classes/Tk/BWidget.html#method-c-focus","(opt, path)",""],["focus","TkcTagAccess","classes/TkcTagAccess.html#method-i-focus","()",""],["focusAndFlash","Object","classes/Object.html#method-i-focusAndFlash","(widget, fg, bg, count=5)","<p>focusAndFlash – Error handler for entry widgets that forces the focus onto\nthe widget and makes the …\n"],["focusMonitor","Object","classes/Object.html#method-i-focusMonitor","()",""],["focusNext","TkManageFocus","classes/TkManageFocus.html#method-i-focusNext","()",""],["focusPrev","TkManageFocus","classes/TkManageFocus.html#method-i-focusPrev","()",""],["focus_next","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-focus_next","(win)",""],["focus_ok","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-focus_ok","(win)",""],["focus_prev","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-focus_prev","(win)",""],["focusmodel","Tk::Wm","classes/Tk/Wm.html#method-c-focusmodel","(win, mode = nil)",""],["focusmodel","Tk::Wm","classes/Tk/Wm.html#method-i-focusmodel","(mode = nil)",""],["fold","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-fold","( value )","<p>Folding paragraphs within a column\n"],["follow_link","Tk::Iwidgets::Hyperhelp","classes/Tk/Iwidgets/Hyperhelp.html#method-i-follow_link","(href)",""],["followsMouse","TkManageFocus","classes/TkManageFocus.html#method-c-followsMouse","()",""],["font","TkFont","classes/TkFont.html#method-i-font","()",""],["font","TkFont","classes/TkFont.html#method-i-font","()",""],["font","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-font","()",""],["font_configinfo","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-font_configinfo","()",""],["font_configure","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-font_configure","(slot)","<p>alias font font_configinfo\n"],["font_copy","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-font_copy","(win, wintag=nil)",""],["font_id","TkFont","classes/TkFont.html#method-i-font_id","()",""],["font_id","TkFont","classes/TkFont.html#method-i-font_id","()",""],["font_id","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-font_id","()",""],["font_of_part","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-font_of_part","(keyword, newfont)",""],["foo","Foo","classes/Foo.html#method-i-foo","(n)",""],["foobar","Object","classes/Object.html#method-i-foobar","()",""],["for","RDoc::Parser","classes/RDoc/Parser.html#method-c-for","(top_level, file_name, body, options, stats)","<p>Find the correct parser for a particular file name. Return a SimpleParser\nfor ones that we don&#39;t …\n"],["for_cache","Gem::Specification","classes/Gem/Specification.html#method-i-for_cache","()","<p>Creates a duplicate spec without large blobs that aren&#39;t used at\nruntime.\n"],["for_fd","BasicSocket","classes/BasicSocket.html#method-c-for_fd","(p1)","<p>Returns a socket object which contains the file descriptor, <em>fd</em>.\n\n<pre><code># If invoked by inetd, STDIN/STDOUT/STDERR ...</code></pre>\n"],["for_fd","IO","classes/IO.html#method-c-for_fd","(*args)","<p>Synonym for <code>IO.new</code>.\n"],["for_files","Sys","classes/Sys.html#method-i-for_files","(*wildcards)","<p>Perform a block with each file matching a set of wildcards.\n"],["force_default_encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-force_default_encoding-3D","(mode)",""],["force_default_encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-force_default_encoding-3D","(mode)",""],["force_default_encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-force_default_encoding-3D","(mode)",""],["force_default_encoding=","MultiTkIp","classes/MultiTkIp.html#method-i-force_default_encoding-3D","(mode)",""],["force_default_encoding?","MultiTkIp","classes/MultiTkIp.html#method-i-force_default_encoding-3F","()",""],["force_default_encoding?","MultiTkIp","classes/MultiTkIp.html#method-i-force_default_encoding-3F","()",""],["force_default_encoding?","MultiTkIp","classes/MultiTkIp.html#method-i-force_default_encoding-3F","()",""],["force_default_encoding?","MultiTkIp","classes/MultiTkIp.html#method-i-force_default_encoding-3F","()",""],["force_documentation=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-force_documentation-3D","(value)","<p>Force the documentation of this object unless documentation has been turned\noff by :endoc:\n"],["force_encoding","String","classes/String.html#method-i-force_encoding","(p1)","<p>Changes the encoding to <code>encoding</code> and returns self.\n"],["force_quotes?","CSV","classes/CSV.html#method-i-force_quotes-3F","()","<p>Returns <code>true</code> if all output fields are quoted. See CSV::new for\ndetails.\n"],["foreach","Addrinfo","classes/Addrinfo.html#method-c-foreach","(nodename, service, family=nil, socktype=nil, protocol=nil, flags=nil, &block)","<p>iterates over the list of Addrinfo objects obtained by\nAddrinfo.getaddrinfo.\n\n<pre><code>Addrinfo.foreach(nil, 80) ...</code></pre>\n"],["foreach","CSV","classes/CSV.html#method-c-foreach","(path, options = Hash.new, &block)","<p>This method is intended as the primary interface for reading CSV files. \nYou pass a <code>path</code> and any <code>options</code> …\n"],["foreach","Dir","classes/Dir.html#method-c-foreach","(*args)","<p>Calls the block once for each entry in the named directory, passing the\nfilename of each entry as a parameter …\n"],["foreach","IO","classes/IO.html#method-c-foreach","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Executes the block for every line in the named I/O port, where lines are\nseparated by <em>sep</em>.\n<p>If no block …\n"],["foreach","Net::POP3","classes/Net/POP3.html#method-c-foreach","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Starts a POP3 session and iterates over each POPMail object, yielding it to\nthe <code>block</code>. This method is …\n"],["foreach","Net::POP3","classes/Net/POP3.html#method-c-foreach","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Starts a POP3 session and iterates over each POPMail object, yielding it to\nthe <code>block</code>. This method is …\n"],["foreach","Net::POP3","classes/Net/POP3.html#method-c-foreach","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Starts a POP3 session and iterates over each POPMail object, yielding it to\nthe <code>block</code>. This method is …\n"],["foreach","Net::POP3","classes/Net/POP3.html#method-c-foreach","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Starts a POP3 session and iterates over each POPMail object, yielding it to\nthe <code>block</code>. This method is …\n"],["foreach","RubyVM::VPATH","classes/RubyVM/VPATH.html#method-i-foreach","(file, *args, &block)",""],["foreach","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-foreach","(path = nil, *rs)","<p>File related commands Shell#foreach Shell#open Shell#unlink Shell#test\n<p>-\n<p>CommandProcessor#foreach(path, …\n"],["foreachWidget","Object","classes/Object.html#method-i-foreachWidget","(wins, cmd)","<p>Utilities:\n"],["foreach_proc_entry","Object","classes/Object.html#method-i-foreach_proc_entry","()",""],["forget","Tk::BLT::Busy","classes/Tk/BLT/Busy.html#method-i-forget","(*wins)",""],["forget","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-forget","(*wins)",""],["forget","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-i-forget","()",""],["forget","Tk::Busy","classes/Tk/Busy.html#method-i-forget","(*wins)",""],["forget","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-forget","(win, *wins)",""],["forget","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-forget","(win, *wins)",""],["forget","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-forget","(idx)",""],["forget","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-forget","(idx)",""],["forget","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-forget","(pane)",""],["forget","Tk::Wm","classes/Tk/Wm.html#method-c-forget","(win)",""],["forget","TkGrid","classes/TkGrid.html#method-c-forget","(*args)",""],["forget","TkGrid","classes/TkGrid.html#method-c-forget","(*args)",""],["forget","TkPack","classes/TkPack.html#method-c-forget","(*args)",""],["forget","TkPack","classes/TkPack.html#method-c-forget","(*args)",""],["forget","TkPackage","classes/TkPackage.html#method-i-forget","(package)",""],["forget","TkPlace","classes/TkPlace.html#method-c-forget","(win)",""],["forget","TkPlace","classes/TkPlace.html#method-c-forget","(win)",""],["fork","Kernel","classes/Kernel.html#method-i-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Process","classes/Process.html#method-c-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Thread","classes/Thread.html#method-c-fork","(*args)","<p>Basically the same as <code>Thread::new</code>. However, if class\n<code>Thread</code> is subclassed, then calling <code>start</code> in that\n…\n"],["form","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-form","(method = \"post\", action = script_name, enctype = \"application/x-www-form-urlencoded\")","<p>Generate a Form element as a string.\n<p><code>method</code> should be either “get” or “post”, and …\n"],["form_cmd","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-form_cmd","(n, cmd, *args)",""],["form_data=","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-form_data-3D","(params, sep = '&')",""],["form_info","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-form_info","(*args)",""],["format","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-format","(format = nil, *args)","<p>Returns the contents of this Tms object as a formatted string, according to\na format string like that …\n"],["format","Gem::Installer","classes/Gem/Installer.html#method-i-format","()","<p>Lazy accessor for the installer&#39;s Gem::Format instance.\n"],["format","IRB::Locale","classes/IRB/Locale.html#method-i-format","(*opts)",""],["format","Kernel","classes/Kernel.html#method-i-format","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments.  Within the format …\n"],["format","PrettyPrint","classes/PrettyPrint.html#method-c-format","(output='', maxwidth=79, newline=\"\\n\", genspace=lambda {|n| ' ' * n})","<p>This is a convenience method which is same as follows:\n\n<pre><code>begin\n  q = PrettyPrint.new(output, maxwidth, newline, ...</code></pre>\n"],["format","Tk::Clock","classes/Tk/Clock.html#method-c-format","(clk, form=nil)",""],["format","WEBrick::AccessLog","classes/WEBrick/AccessLog.html#method-i-format","(format_string, params)",""],["formatDate","IXTLRuntime","classes/IXTLRuntime.html#method-i-formatDate","(arg0, arg1, arg2=nil)","<p>BSTR formatDate\n\n<pre><code>VARIANT arg0 --- varDate [IN]\nBSTR arg1 --- bstrFormat [IN]\nVARIANT arg2 --- varDestLocale ...</code></pre>\n"],["formatGMT","Tk::Clock","classes/Tk/Clock.html#method-c-formatGMT","(clk, form=nil)",""],["formatIndex","IXTLRuntime","classes/IXTLRuntime.html#method-i-formatIndex","(arg0, arg1)","<p>BSTR formatIndex\n\n<pre><code>I4 arg0 --- lIndex [IN]\nBSTR arg1 --- bstrFormat [IN]</code></pre>\n"],["formatNumber","IXTLRuntime","classes/IXTLRuntime.html#method-i-formatNumber","(arg0, arg1)","<p>BSTR formatNumber\n\n<pre><code>R8 arg0 --- dblNumber [IN]\nBSTR arg1 --- bstrFormat [IN]</code></pre>\n"],["formatTime","IXTLRuntime","classes/IXTLRuntime.html#method-i-formatTime","(arg0, arg1, arg2=nil)","<p>BSTR formatTime\n\n<pre><code>VARIANT arg0 --- varTime [IN]\nBSTR arg1 --- bstrFormat [IN]\nVARIANT arg2 --- varDestLocale ...</code></pre>\n"],["format_date","Net::IMAP","classes/Net/IMAP.html#method-c-format_date","(time)","<p>Formats <code>time</code> as an IMAP-style date.\n"],["format_datetime","Net::IMAP","classes/Net/IMAP.html#method-c-format_datetime","(time)","<p>Formats <code>time</code> as an IMAP-style date-time.\n"],["format_frame","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-format_frame","(pos)",""],["format_infos","ActionMap","classes/ActionMap.html#method-i-format_infos","(infos)",""],["format_offsets","ActionMap","classes/ActionMap.html#method-i-format_offsets","(min, max, offsets)",""],["format_text","Gem::Text","classes/Gem/Text.html#method-i-format_text","(text, wrap, indent=0)","<p>Wraps <code>text</code> to <code>wrap</code> characters and optionally\nindents by <code>indent</code> characters\n"],["formatted_program_filename","Gem::Installer","classes/Gem/Installer.html#method-i-formatted_program_filename","(filename)","<p>Prefix and suffix the program filename the same as ruby.\n"],["formatted_program_filename","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-formatted_program_filename","(filename)",""],["formatter","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-formatter","()","<p>Creates an RDoc::Markup::ToHtmlCrossref formatter\n"],["formatter","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-formatter","(io)","<p>Creates a new RDoc::Markup::Formatter.  If a formatter is given with -f,\nuse it.  If we&#39;re outputting …\n"],["forminfo","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-forminfo","(*args)",""],["forward","Tk::Iwidgets::Hyperhelp","classes/Tk/Iwidgets/Hyperhelp.html#method-i-forward","()",""],["forwarding","Exports::Bcc","classes/Exports/Bcc.html#method-i-forwarding","(internal, export)",""],["fpixels","TkWinfo","classes/TkWinfo.html#method-c-fpixels","(win, dist)",""],["fpixels","TkWinfo","classes/TkWinfo.html#method-c-fpixels","(win, dist)",""],["frac","BigDecimal","classes/BigDecimal.html#method-i-frac","()","<p>Return the fractional part of the number.\n"],["fraction","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-fraction","(*percentages)",""],["fraction","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-fraction","(x, y)","<p>def fraction(x=None, y=None)\n"],["fragment=","URI::Generic","classes/URI/Generic.html#method-i-fragment-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["frame","Tk::Wm","classes/Tk/Wm.html#method-i-frame","()",""],["frame","Tk::Wm","classes/Tk/Wm.html#method-c-frame","(win)",""],["frame_set_pos","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-frame_set_pos","(file, line)",""],["frecuency","Object","classes/Object.html#method-i-frecuency","( seq,length )",""],["free","DL","classes/DL.html#method-c-free","(p1)","<p>Free the memory at address <code>addr</code>\n"],["free","DL::CPtr","classes/DL/CPtr.html#method-i-free","()","<p>Get the free function for this pointer.  Returns  DL::CFunc or nil.\n"],["free","DL::CPtr","classes/DL/CPtr.html#method-i-free","()","<p>Get the free function for this pointer.  Returns  DL::CFunc or nil.\n"],["free=","DL::CPtr","classes/DL/CPtr.html#method-i-free-3D","(p1)","<p>Set the free function for this pointer to the DL::CFunc in\n<code>function</code>.\n"],["free=","DL::CPtr","classes/DL/CPtr.html#method-i-free-3D","(p1)","<p>Set the free function for this pointer to the DL::CFunc in\n<code>function</code>.\n"],["freeze","Delegator","classes/Delegator.html#method-i-freeze","","<p>Freeze both the object returned by _<em>getobj</em>_ and self.\n"],["freeze","Module","classes/Module.html#method-i-freeze","()","<p>Prevents further modifications to <em>mod</em>.\n<p>This method returns self.\n"],["freeze","Object","classes/Object.html#method-i-freeze","()","<p>Prevents further modifications to <em>obj</em>. A <code>RuntimeError</code>\nwill be raised if modification is attempted. There …\n"],["freeze","Pathname","classes/Pathname.html#method-i-freeze","()",""],["frexp","Math","classes/Math.html#method-c-frexp","(p1)","<p>Returns a two-element array containing the normalized fraction (a\n<code>Float</code>) and exponent (a <code>Fixnum</code>) of  …\n"],["friday?","Date","classes/Date.html#method-i-friday-3F","()","<p>Returns true if the date is Friday.\n"],["friday?","Time","classes/Time.html#method-i-friday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Friday.\n\n<pre><code>t = Time.local(1987, 12, 18)     #=&gt; 1987-12-18 00:00:00 -0600 ...\n</code></pre>\n"],["friendly_path","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-friendly_path","()","<p>Friendly rendition of #path\n"],["from","Gem::Package::TarHeader","classes/Gem/Package/TarHeader.html#method-c-from","(stream)","<p>Creates a tar header from IO <code>stream</code>\n"],["from_file_by_path","Gem::Format","classes/Gem/Format.html#method-c-from_file_by_path","(file_path, security_policy = nil)","<p>Reads the gem <code>file_path</code> using <code>security_policy</code> and\nreturns a Format representing the data in the gem\n"],["from_file_by_path","Gem::OldFormat","classes/Gem/OldFormat.html#method-c-from_file_by_path","(file_path)","<p>Reads the named gem file and returns a Format object, representing the data\nfrom the gem file\n<p>file_path … &mdash; "],["from_gems_in","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-from_gems_in","(*spec_dirs)","<p>Creates a new SourceIndex from the ruby format gem specifications in\n<code>spec_dirs</code>.\n"],["from_gems_in","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-from_gems_in","(*spec_dirs)","<p>Creates a new SourceIndex from the ruby format gem specifications in\n<code>spec_dirs</code>.\n"],["from_installed_gems","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-from_installed_gems","(*deprecated)","<p>Factory method to construct a source index instance for a given path.\n<p>deprecated &mdash; If supplied, from_installed_gems …\n"],["from_installed_gems","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-from_installed_gems","(*deprecated)","<p>Factory method to construct a source index instance for a given path.\n<p>deprecated &mdash; If supplied, from_installed_gems …\n"],["from_io","Gem::Format","classes/Gem/Format.html#method-c-from_io","(io, gem_path=\"(io)\", security_policy = nil)","<p>Reads a gem from <code>io</code> at <code>gem_path</code> using\n<code>security_policy</code> and returns a Format representing the data\nfrom …\n"],["from_io","Gem::OldFormat","classes/Gem/OldFormat.html#method-c-from_io","(io, gem_path=\"(io)\")","<p>Reads a gem from an io stream and returns a Format object, representing the\ndata from the gem file\n<p>io … &mdash; "],["from_main","Object","classes/Object.html#method-i-from_main","()",""],["from_module","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-c-from_module","(class_type, mod)","<p>Return a RDoc::ClassModule of class <code>class_type</code> that is a copy\nof module <code>module</code>. Used to promote modules …\n"],["from_prime_division","Integer","classes/Integer.html#method-c-from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>See Prime#int_from_prime_division for more …\n"],["from_prime_division","Integer","classes/Integer.html#method-c-from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>See Prime#int_from_prime_division for more …\n"],["from_sjis","JISX0208::Char","classes/JISX0208/Char.html#method-i-from_sjis","(sjis)",""],["from_source_index","Gem::DependencyList","classes/Gem/DependencyList.html#method-c-from_source_index","(ignored=nil)","<p>Creates a DependencyList from a Gem::SourceIndex <code>source_index</code>\n"],["from_specs","Gem::DependencyList","classes/Gem/DependencyList.html#method-c-from_specs","()","<p>Creates a DependencyList from the current specs.\n"],["from_state","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-c-from_state","(p1)","<p>Creates a State object from <em>opts</em>, which ought to be Hash to create\na new State instance configured by …\n"],["from_yaml","Gem::Specification","classes/Gem/Specification.html#method-c-from_yaml","(input)","<p>Special loader for YAML files.  When a Specification object is loaded from\na YAML file, it bypasses the …\n"],["fromout","Object","classes/Object.html#method-i-fromout","(date, from, subj)",""],["front","DRb","classes/DRb.html#method-c-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb::ExtServ","classes/DRb/ExtServ.html#method-i-front","()",""],["frozen?","Array","classes/Array.html#method-i-frozen-3F","()","<p>Return <code>true</code> if this array is frozen (or temporarily frozen\nwhile being sorted).\n"],["frozen?","Object","classes/Object.html#method-i-frozen-3F","()","<p>Returns the freeze status of <em>obj</em>.\n\n<pre><code>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\na.freeze    #=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\na.frozen?   #=&gt; ...\n</code></pre>\n"],["fsync","IO","classes/IO.html#method-i-fsync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk. Note that\n<code>fsync</code> differs from using <code>IO#sync=</code>. The …\n"],["fsync","StringIO","classes/StringIO.html#method-i-fsync","()",""],["fsync","TkTextIO","classes/TkTextIO.html#method-i-fsync","()",""],["ftype","File","classes/File.html#method-c-ftype","(p1)","<p>Identifies the type of the named file; the return string is one of\n“<code>file</code>&#39;&#39;, “<code>directory</code>&#39;&#39;, …\n"],["ftype","File::Stat","classes/File/Stat.html#method-i-ftype","()","<p>Identifies the type of <em>stat</em>. The return string is one of:\n“<code>file</code>&#39;&#39;, “<code>directory</code>&#39;&#39;, “ …\n"],["ftype","Pathname","classes/Pathname.html#method-i-ftype","()","<p>See <code>File.ftype</code>.  Returns “type” of file (“file”, “directory”,\netc).\n"],["full_gem_path","Gem::Specification","classes/Gem/Specification.html#method-i-full_gem_path","()","<p>The full path to the gem (install path + full name).\n"],["full_name","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-full_name","()","<p>Full name of the tar entry\n"],["full_name","Gem::Specification","classes/Gem/Specification.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is\nincluded (name-version-platform) …\n"],["full_name","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-full_name","()","<p>Return the fully qualified name of this class or module\n"],["full_name","RDoc::Context","classes/RDoc/Context.html#method-i-full_name","()","<p>The full name for this context.  This method is overridden by subclasses.\n"],["full_name","RDoc::Include","classes/RDoc/Include.html#method-i-full_name","()","<p>Full name based on #module\n"],["full_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-full_name","()","<p>Full method/attribute name including namespace\n"],["full_name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-full_name","()","<p>Returns the relative name of this file\n"],["full_name","RSS::Element","classes/RSS/Element.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesCategory","classes/RSS/ITunesChannelModel/ITunesCategory.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesImage","classes/RSS/ITunesChannelModel/ITunesImage.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesOwner","classes/RSS/ITunesChannelModel/ITunesOwner.html#method-i-full_name","()",""],["full_name","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-full_name","()",""],["full_name","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-full_name","()",""],["full_name","RSS::ImageItemModel::ImageItem","classes/RSS/ImageItemModel/ImageItem.html#method-i-full_name","()",""],["full_name","RSS::RDF","classes/RSS/RDF.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-full_name","()",""],["full_name","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-full_name","()",""],["full_name","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-i-full_name","()",""],["full_name","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-full_name","()",""],["full_name","RSS::TrackBackModel10::TrackBackAbout","classes/RSS/TrackBackModel10/TrackBackAbout.html#method-i-full_name","()",""],["full_name","RSS::TrackBackModel10::TrackBackPing","classes/RSS/TrackBackModel10/TrackBackPing.html#method-i-full_name","()",""],["full_name","RSS::TrackBackModel20::TrackBackAbout","classes/RSS/TrackBackModel20/TrackBackAbout.html#method-i-full_name","()",""],["full_name","RSS::TrackBackModel20::TrackBackPing","classes/RSS/TrackBackModel20/TrackBackPing.html#method-i-full_name","()",""],["full_name","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-full_name","()",""],["full_name=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-full_name-3D","(full_name)","<p>Sets the full_name overriding any computed full name.\n<p>Set to <code>nil</code> to clear RDoc&#39;s cached value\n"],["full_old_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-full_old_name","()","<p>Full old name including namespace\n"],["fullpath","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-fullpath","()",""],["fullscreen","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-fullscreen","()","<p>Go from window mode to full-screen mode.\n"],["fullscreen_off","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-fullscreen_off","()","<p>Go from full-screen mode back to window mode.\n"],["fully_documented?","RDoc::Context","classes/RDoc/Context.html#method-i-fully_documented-3F","()","<p>Does this context and its methods and constants all have documentation?\n<p>(Yes, fully documented doesn&#39;t …\n"],["fully_documented?","RDoc::Stats","classes/RDoc/Stats.html#method-i-fully_documented-3F","()","<p>The documentation status of this project.  <code>true</code> when 100%,\n<code>false</code> when less than 100% and <code>nil</code> when unknown. …\n"],["fully_expanded_name","REXML::Namespace","classes/REXML/Namespace.html#method-i-fully_expanded_name","()","<p>Fully expand the name, even if the prefix wasn&#39;t specified in the\nsource file.\n"],["func_name","Object","classes/Object.html#method-i-func_name","(ty, argc, n, calltype)",""],["funcall_style","String","classes/String.html#method-i-funcall_style","()",""],["function","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-function","( elements, fname, rest )",""],["gamma","Math","classes/Math.html#method-c-gamma","(p1)","<p>Calculates the gamma function of x.\n<p>Note that gamma(n) is same as fact(n-1) for integer n &gt; 0. However …\n"],["garbage_collect","GC","classes/GC.html#method-i-garbage_collect","()","<p>Initiates garbage collection, unless manually disabled.\n"],["garbage_collect","ObjectSpace","classes/ObjectSpace.html#method-c-garbage_collect","()","<p>Initiates garbage collection, unless manually disabled.\n"],["gather_dependencies","Gem::DependencyInstaller","classes/Gem/DependencyInstaller.html#method-i-gather_dependencies","()","<p>Gathers all dependencies necessary for the installation from local and\nremote sources unless the ignore_dependencies …\n"],["gather_files","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-gather_files","(files)","<p>Gathers a set of parseable files from the files and directories listed in\n<code>files</code>.\n"],["gcd","Integer","classes/Integer.html#method-i-gcd","(p1)","<p>Returns the greatest common divisor (always positive).  0.gcd(x) and\nx.gcd(0) return abs(x).\n<p>For example: …\n"],["gcd","Integer","classes/Integer.html#method-i-gcd","(p1)","<p>Returns the greatest common divisor (always positive).  0.gcd(x) and\nx.gcd(0) return abs(x).\n<p>For example: …\n"],["gcdlcm","Integer","classes/Integer.html#method-i-gcdlcm","(p1)","<p>Returns an array; [int.gcd(int2), int.lcm(int2)].\n<p>For example:\n\n<pre><code>2.gcdlcm(2)                    #=&gt; [2, 2] ...\n</code></pre>\n"],["gcdlcm","Integer","classes/Integer.html#method-i-gcdlcm","(p1)","<p>Returns an array; [int.gcd(int2), int.lcm(int2)].\n<p>For example:\n\n<pre><code>2.gcdlcm(2)                    #=&gt; [2, 2] ...\n</code></pre>\n"],["gem","Kernel","classes/Kernel.html#method-i-gem","(gem_name, *requirements)","<p>Use Kernel#gem to activate a specific version of <code>gem_name</code>.\n<p><code>requirements</code> is a list of version requirements …\n"],["gem_dir","Gem::Installer","classes/Gem/Installer.html#method-i-gem_dir","()","<p>Lazy accessor for the spec&#39;s gem directory.\n"],["gem_dir","Gem::Specification","classes/Gem/Specification.html#method-i-gem_dir","()","<p>Returns the full path to this spec&#39;s gem directory. eg:\n/usr/local/lib/ruby/1.8/gems/mygem-1.0\n"],["gem_file_list","Gem::Indexer","classes/Gem/Indexer.html#method-i-gem_file_list","()","<p>List of gem file names to index.\n"],["gem_original_require","Kernel","classes/Kernel.html#method-i-gem_original_require","(path)","<p>The Kernel#require from before RubyGems was loaded.\n"],["gem_paths","Gem::Commands::WhichCommand","classes/Gem/Commands/WhichCommand.html#method-i-gem_paths","(spec)",""],["gem_signature","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-gem_signature","(gem_full_name)","<p>The signature for the given gem specification.\n"],["gem_signature","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-gem_signature","(gem_full_name)","<p>The signature for the given gem specification.\n"],["gemdirs","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-gemdirs","()","<p>The latest installed gems&#39; ri directories\n"],["gems_dir","Gem::Specification","classes/Gem/Specification.html#method-i-gems_dir","()","<p>Returns the full path to the gems directory containing this spec&#39;s gem\ndirectory. eg: /usr/local/lib/ruby/1.8/gems …\n"],["gen","DRbEx4","classes/DRbEx4.html#method-i-gen","()",""],["gen_callback_file","Object","classes/Object.html#method-i-gen_callback_file","(ty)",""],["gen_push_addr_ary","Object","classes/Object.html#method-i-gen_push_addr_ary","(ty, aryname, calltype)",""],["gen_push_proc_ary","Object","classes/Object.html#method-i-gen_push_proc_ary","(ty, aryname)",""],["gen_random","Object","classes/Object.html#method-i-gen_random","(max,im=139968,ia=3877,ic=29573)",""],["gen_relative_url","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-c-gen_relative_url","(path, target)","<p>Converts a target url to one that is relative to a given path\n"],["gen_str","ActionMap","classes/ActionMap.html#method-i-gen_str","(bytes)",""],["gen_sub_directories","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-gen_sub_directories","()","<p>Create the directories the generated docs will live in if they don&#39;t\nalready exist.\n"],["gen_url","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-gen_url","(url, text)","<p>Generate a link for <code>url</code>, labeled with <code>text</code>. \nHandles the special cases for img: and link: described under …\n"],["gen_url","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-gen_url","(url, text)","<p>Generates links for <code>rdoc-ref:</code> scheme URLs and allows\nRDoc::Markup::ToHtml to handle other schemes.\n"],["gencallback","Object","classes/Object.html#method-i-gencallback","(ty, calltype, proc_entry, argc, n)",""],["generate","CSV","classes/CSV.html#method-c-generate","(*args)","<p>This method wraps a String you provide, or an empty default String, in a\nCSV object which is passed to …\n"],["generate","EmojiTable","classes/EmojiTable.html#method-i-generate","(io, from_carrier, to_carrier)",""],["generate","JSON","classes/JSON.html#method-i-generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. <em>state</em> is * a JSON::State object, …\n"],["generate","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-generate","(p1)","<p>Generates a valid JSON document from object <code>obj</code> and returns\nthe result. If no valid JSON document can …\n"],["generate","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-c-generate","(p1, p2 = v2)","<p>Creates a new DH instance from scratch by generating the private and public\ncomponents alike.\n<p>Parameters …\n"],["generate","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-c-generate","(p1)","<p>Creates a new DSA instance by generating a private/public key pair from\nscratch.\n<p>Parameters\n<p><code>size</code> is an …\n"],["generate","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-c-generate","(p1, p2 = v2)","<p>Generates an RSA keypair.  <code>size</code> is an integer representing the\ndesired key size.  Keys smaller than 1024 …\n"],["generate","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-c-generate","(p1, p2 = v2)","<p>Generates an RSA keypair.  <code>size</code> is an integer representing the\ndesired key size.  Keys smaller than 1024 …\n"],["generate","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate","(top_levels)","<p>Build the initial indices and output objects based on an array of TopLevel\nobjects containing the extracted …\n"],["generate","RDoc::Generator::RI","classes/RDoc/Generator/RI.html#method-i-generate","(top_levels)","<p>Build the initial indices and output objects based on an array of TopLevel\nobjects containing the extracted …\n"],["generate","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-generate","(file_info)","<p>Generates documentation for <code>file_info</code> (from #parse_files) into\nthe output dir using the generator selected …\n"],["generate","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate","RubyVM::InsnsIncGenerator","classes/RubyVM/InsnsIncGenerator.html#method-i-generate","()",""],["generate","RubyVM::InsnsInfoIncGenerator","classes/RubyVM/InsnsInfoIncGenerator.html#method-i-generate","()",""],["generate","RubyVM::MInsnsIncGenerator","classes/RubyVM/MInsnsIncGenerator.html#method-i-generate","()",""],["generate","RubyVM::OptInsnIncGenerator","classes/RubyVM/OptInsnIncGenerator.html#method-i-generate","()",""],["generate","RubyVM::OptSCIncGenerator","classes/RubyVM/OptSCIncGenerator.html#method-i-generate","()",""],["generate","RubyVM::OptUnifsIncGenerator","classes/RubyVM/OptUnifsIncGenerator.html#method-i-generate","()",""],["generate","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-i-generate","()",""],["generate","RubyVM::VmBodyGenerator","classes/RubyVM/VmBodyGenerator.html#method-i-generate","()","<p>vm.inc\n"],["generate","RubyVM::VmTCIncGenerator","classes/RubyVM/VmTCIncGenerator.html#method-i-generate","()",""],["generate","RubyVM::YARVDocGenerator","classes/RubyVM/YARVDocGenerator.html#method-i-generate","()",""],["generate","RubyVM::YASMDataRbGenerator","classes/RubyVM/YASMDataRbGenerator.html#method-i-generate","()",""],["generate","TkEvent::Event","classes/TkEvent/Event.html#method-i-generate","(win, modkeys={})",""],["generate","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate","(io = STDOUT)",""],["generate_args","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_args","(method)",""],["generate_argtype","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_argtype","(typedetails)",""],["generate_argtypes","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_argtypes","(method, proptypes)",""],["generate_bin","Gem::Installer","classes/Gem/Installer.html#method-i-generate_bin","()",""],["generate_bin_script","Gem::Installer","classes/Gem/Installer.html#method-i-generate_bin_script","(filename, bindir)","<p>Creates the scripts to run the applications in the gem.\n"],["generate_bin_symlink","Gem::Installer","classes/Gem/Installer.html#method-i-generate_bin_symlink","(filename, bindir)","<p>Creates the symlinks to run the applications in the gem.  Moves the symlink\nif the gem being installed …\n"],["generate_cert","CertStore","classes/CertStore.html#method-i-generate_cert","(filename)",""],["generate_class","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_class","(klass, io = STDOUT)",""],["generate_class_files","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_class_files","()","<p>Generate a documentation file for each class\n"],["generate_constants","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_constants","(klass, io = STDOUT)",""],["generate_default_dirs","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-generate_default_dirs","(install_destdir)",""],["generate_doc","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-generate_doc","(dir, widgetlist)",""],["generate_event","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-generate_event","( event )",""],["generate_eventids1","Object","classes/Object.html#method-i-generate_eventids1","(ids)",""],["generate_eventids2_table","Object","classes/Object.html#method-i-generate_eventids2_table","(ids)",""],["generate_file_files","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_file_files","()","<p>Generate a documentation file for each file\n"],["generate_from_insnname","RubyVM::VmBodyGenerator","classes/RubyVM/VmBodyGenerator.html#method-i-generate_from_insnname","(insnname)",""],["generate_from_ucs","Object","classes/Object.html#method-i-generate_from_ucs","(params, pairs)",""],["generate_func_methods","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_func_methods","(klass, io = STDOUT)",""],["generate_index","Gem::Indexer","classes/Gem/Indexer.html#method-i-generate_index","()","<p>Builds and installs indicies.\n"],["generate_index","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_index","()","<p>Generate an index page which lists all the classes which are documented.\n"],["generate_info","ActionMap","classes/ActionMap.html#method-i-generate_info","(info)",""],["generate_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-generate_key","()","<p>See the OpenSSL documentation for EC_KEY_generate_key()\n"],["generate_key!","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-generate_key-21","()","<p>Generates a private and public key unless a private key already exists. If\nthis DH instance was generated …\n"],["generate_line","CSV","classes/CSV.html#method-c-generate_line","(row, options = Hash.new)","<p>This method is a shortcut for converting a single row (Array) into a CSV\nString.\n<p>The <code>options</code> parameter …\n"],["generate_lookup_node","ActionMap","classes/ActionMap.html#method-i-generate_lookup_node","(name, table)",""],["generate_method","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_method","(method, disptype, io = STDOUT, types = nil)",""],["generate_method_args_help","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_method_args_help","(method)",""],["generate_method_body","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_method_body","(method, disptype, types=nil)",""],["generate_method_help","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_method_help","(method, type = nil)",""],["generate_methods","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_methods","(klass, io = STDOUT)",""],["generate_node","ActionMap","classes/ActionMap.html#method-i-generate_node","(name_hint=nil)",""],["generate_prime","OpenSSL::BN","classes/OpenSSL/BN.html#method-c-generate_prime","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Parameters\n<p><code>bits</code> - integer\n<p><code>safe</code> - boolean\n"],["generate_properties_with_args","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_properties_with_args","(klass, io = STDOUT)",""],["generate_propget_methods","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_propget_methods","(klass, io = STDOUT)",""],["generate_propput_methods","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_propput_methods","(klass, io = STDOUT)",""],["generate_propputref_methods","WIN32COMGen","classes/WIN32COMGen.html#method-i-generate_propputref_methods","(klass, io = STDOUT)",""],["generate_rdoc","Gem::DocManager","classes/Gem/DocManager.html#method-i-generate_rdoc","()","<p>Generate the RDoc documents for this gem spec.\n<p>Note that if both RI and RDoc documents are generated from …\n"],["generate_ri","Gem::DocManager","classes/Gem/DocManager.html#method-i-generate_ri","()","<p>Generate the RI documents for this gem spec.\n<p>Note that if both RI and RDoc documents are generated from …\n"],["generate_to_ucs","Object","classes/Object.html#method-i-generate_to_ucs","(params, pairs)",""],["generate_widget_doc","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-generate_widget_doc","(klass, iscmd, file)",""],["generate_windows_script","Gem::Installer","classes/Gem/Installer.html#method-i-generate_windows_script","(filename, bindir)","<p>Creates windows .bat files for easy running of commands\n"],["generation_hook","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in\n<code>specs</code>\n"],["generator","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-generator","()","<p>See the OpenSSL documentation for EC_GROUP_get0_generator()\n"],["generator_descriptions","RDoc::Options","classes/RDoc/Options.html#method-i-generator_descriptions","()","<p>Returns a properly-space list of generators and their descriptions.\n"],["generic_parser","Syck","classes/Syck.html#method-c-generic_parser","()","<p>Returns a new generic parser\n"],["generic_parser","Syck","classes/Syck.html#method-c-generic_parser","()","<p>Returns a new generic parser\n"],["gennode","ActionMap","classes/ActionMap.html#method-i-gennode","(bytes_code, words_code, name_hint=nil)",""],["geometry","Tk::Wm","classes/Tk/Wm.html#method-i-geometry","(geom=nil)",""],["geometry","Tk::Wm","classes/Tk/Wm.html#method-c-geometry","(win, geom=nil)",""],["geometry","TkWinfo","classes/TkWinfo.html#method-c-geometry","(win)",""],["geometry","TkWinfo","classes/TkWinfo.html#method-c-geometry","(win)",""],["get","GetoptLong","classes/GetoptLong.html#method-i-get","()","<p>Get next option name and its argument, as an Array of two elements.\n<p>The option name is always converted …\n"],["get","Net::FTP","classes/Net/FTP.html#method-i-get","(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)","<p>Retrieves <code>remotefile</code> in whatever mode the session is set (text\nor binary).  See #gettextfile and #getbinaryfile …\n"],["get","Net::HTTP","classes/Net/HTTP.html#method-c-get","(uri_or_host, path = nil, port = nil)","<p>Sends a GET request to the target and returns the HTTP response as a\nstring.  The target can either be …\n"],["get","Net::HTTP","classes/Net/HTTP.html#method-i-get","(path, initheader = {}, dest = nil)","<p>Gets data from <code>path</code> on the connected-to host.\n<code>initheader</code> must be a Hash like { &#39;Accept&#39; =&gt; …\n"],["get","Net::HTTP","classes/Net/HTTP.html#method-i-get","(path, initheader = {}, dest = nil)","<p>Gets data from <code>path</code> on the connected-to host.\n<code>initheader</code> must be a Hash like { &#39;Accept&#39; =&gt; …\n"],["get","Net::HTTP","classes/Net/HTTP.html#method-c-get","(uri_or_host, path = nil, port = nil)","<p>Sends a GET request to the target and returns the HTTP response as a\nstring.  The target can either be …\n"],["get","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-get","()","<p>Pulls the next token from the stream.\n"],["get","Tk::BLT::CutBuffer","classes/Tk/BLT/CutBuffer.html#method-c-get","(num = 0)",""],["get","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-get","(pos, y=nil)",""],["get","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-get","()",""],["get","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-get","(*tags)",""],["get","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-get","()",""],["get","Tk::Entry","classes/Tk/Entry.html#method-i-get","()",""],["get","Tk::Iwidgets::Calendar","classes/Tk/Iwidgets/Calendar.html#method-i-get","()",""],["get","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-get","(idx=nil)",""],["get","Tk::Iwidgets::Datefield","classes/Tk/Iwidgets/Datefield.html#method-i-get","()",""],["get","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-get","()",""],["get","Tk::Iwidgets::Extfileselectionbox","classes/Tk/Iwidgets/Extfileselectionbox.html#method-i-get","()",""],["get","Tk::Iwidgets::Extfileselectiondialog","classes/Tk/Iwidgets/Extfileselectiondialog.html#method-i-get","()",""],["get","Tk::Iwidgets::Fileselectionbox","classes/Tk/Iwidgets/Fileselectionbox.html#method-i-get","()",""],["get","Tk::Iwidgets::Fileselectiondialog","classes/Tk/Iwidgets/Fileselectiondialog.html#method-i-get","()",""],["get","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-get","(*index)",""],["get","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-get","(first=nil, last=nil)",""],["get","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-get","()",""],["get","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-get","()",""],["get","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-get","(*index)",""],["get","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-get","(*index)",""],["get","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-get","()",""],["get","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-get","()",""],["get","Tk::Iwidgets::Spindate","classes/Tk/Iwidgets/Spindate.html#method-i-get","()",""],["get","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-get","()",""],["get","Tk::Iwidgets::Spintime","classes/Tk/Iwidgets/Spintime.html#method-i-get","()",""],["get","Tk::Iwidgets::Timefield","classes/Tk/Iwidgets/Timefield.html#method-i-get","()",""],["get","Tk::Iwidgets::Watch","classes/Tk/Iwidgets/Watch.html#method-i-get","()",""],["get","Tk::Listbox","classes/Tk/Listbox.html#method-i-get","(first, last=nil)",""],["get","Tk::Scale","classes/Tk/Scale.html#method-i-get","(x=None, y=None)",""],["get","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-get","()",""],["get","Tk::TclX::XPG3_MsgCat","classes/Tk/TclX/XPG3_MsgCat.html#method-i-get","(setnum, msgnum, defaultstr)",""],["get","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-get","(file, index, keys=nil)",""],["get","Tk::Tcllib::Widget::Calendar","classes/Tk/Tcllib/Widget/Calendar.html#method-i-get","(what = 'all')",""],["get","Tk::TkTable","classes/Tk/TkTable.html#method-i-get","(idx)",""],["get","Tk::Vu::Bargraph","classes/Tk/Vu/Bargraph.html#method-i-get","()",""],["get","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-get","(*args)",""],["get","Tk::WinRegistry","classes/Tk/WinRegistry.html#method-c-get","(keynam, valnam)",""],["get","TkClipboard","classes/TkClipboard.html#method-c-get","(type=nil)",""],["get","TkClipboard","classes/TkClipboard.html#method-i-get","(type=nil)",""],["get","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-get","(idx_s, idx_e=nil)",""],["get","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-get","(*idx)",""],["get","TkMultiListbox","classes/TkMultiListbox.html#method-i-get","(*idx)",""],["get","TkOptionDB","classes/TkOptionDB.html#method-c-get","(win, name, klass)",""],["get","TkOptionDB","classes/TkOptionDB.html#method-c-get","(win, name, klass)",""],["get","TkOptionDB","classes/TkOptionDB.html#method-c-get","(win, name, klass)",""],["get","TkPhotoImage","classes/TkPhotoImage.html#method-i-get","(x, y)","<p>Returns the color of the pixel at coordinates (x,y) in the image as a list \nof three integers between …\n"],["get","TkPhotoImage","classes/TkPhotoImage.html#method-i-get","(x, y)","<p>Returns the color of the pixel at coordinates (x,y) in the image as a list \nof three integers between …\n"],["get","TkSelection","classes/TkSelection.html#method-c-get","(keys=nil)",""],["get","TkSelection","classes/TkSelection.html#method-i-get","(keys=nil)",""],["get","TkSelection","classes/TkSelection.html#method-i-get","(keys=nil)",""],["get","TkSelection","classes/TkSelection.html#method-c-get","(keys=nil)",""],["get","TkTextWin","classes/TkTextWin.html#method-i-get","(*index)",""],["get","TupleSpace","classes/TupleSpace.html#method-i-get","(template, non_block=false)",""],["get2","Net::HTTP","classes/Net/HTTP.html#method-i-get2","(path, initheader = nil)",""],["get2","Net::HTTP","classes/Net/HTTP.html#method-i-get2","(path, initheader = nil)",""],["get3dcolor","Tk::BWidget","classes/Tk/BWidget.html#method-c-get3dcolor","(path, bgcolor)",""],["getAllResponseHeaders","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-getAllResponseHeaders","()","<p>BSTR getAllResponseHeaders Get all HTTP response headers\n"],["getAllResponseHeaders","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-getAllResponseHeaders","()","<p>BSTR getAllResponseHeaders Get all HTTP response headers\n"],["getAttribute","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-getAttribute","(arg0)","<p>VARIANT getAttribute look up the string value of an attribute by name\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["getAttributeNode","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-getAttributeNode","(arg0)","<p>IXMLDOMAttribute getAttributeNode look up the attribute node by name\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["getElementsByTagName","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-getElementsByTagName","(arg0)","<p>IXMLDOMNodeList getElementsByTagName build a list of elements by name\n\n<pre><code>BSTR arg0 --- tagName [IN]</code></pre>\n"],["getElementsByTagName","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-getElementsByTagName","(arg0)","<p>IXMLDOMNodeList getElementsByTagName build a list of elements by name\n\n<pre><code>BSTR arg0 --- tagName [IN]</code></pre>\n"],["getElementsByTagName","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-getElementsByTagName","(arg0)","<p>IXMLDOMNodeList getElementsByTagName build a list of elements by name\n\n<pre><code>BSTR arg0 --- tagName [IN]</code></pre>\n"],["getElementsByTagName","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-getElementsByTagName","(arg0)","<p>IXMLDOMNodeList getElementsByTagName build a list of elements by name\n\n<pre><code>BSTR arg0 --- tagName [IN]</code></pre>\n"],["getNamedItem","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-getNamedItem","(arg0)","<p>IXMLDOMNode getNamedItem lookup item by name\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["getQualifiedItem","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-getQualifiedItem","(arg0, arg1)","<p>IXMLDOMNode getQualifiedItem lookup the item by name and namespace\n\n<pre><code>BSTR arg0 --- baseName [IN]\nBSTR arg1 ...</code></pre>\n"],["getResponseHeader","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-getResponseHeader","(arg0)","<p>BSTR getResponseHeader Get HTTP response header\n\n<pre><code>BSTR arg0 --- bstrHeader [IN]</code></pre>\n"],["getResponseHeader","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-getResponseHeader","(arg0)","<p>BSTR getResponseHeader Get HTTP response header\n\n<pre><code>BSTR arg0 --- bstrHeader [IN]</code></pre>\n"],["get_all_gem_names","Gem::Command","classes/Gem/Command.html#method-i-get_all_gem_names","()","<p>Get all gem names from the command line.\n"],["get_area","Tk::TkTable","classes/Tk/TkTable.html#method-i-get_area","(idx1, idx2)",""],["get_attributes","RSS::Element","classes/RSS/Element.html#method-i-get_attributes","()",""],["get_attrs","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-i-get_attrs","(var)",""],["get_bgerror_handler","MultiTkIp","classes/MultiTkIp.html#method-i-get_bgerror_handler","(slave = '')",""],["get_bgerror_handler","MultiTkIp","classes/MultiTkIp.html#method-i-get_bgerror_handler","(slave = '')",""],["get_bgerror_handler","MultiTkIp","classes/MultiTkIp.html#method-i-get_bgerror_handler","(slave = '')",""],["get_bgerror_handler","MultiTkIp","classes/MultiTkIp.html#method-i-get_bgerror_handler","(slave = '')",""],["get_bool","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_bool","()","<p>Looks for a true or false token.  Returns false if TkFALSE or TkNIL are\nfound.\n"],["get_buttonbox","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-get_buttonbox","(&b)",""],["get_by_hash","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-get_by_hash","(*idx)",""],["get_by_hash","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-get_by_hash","(*idx)",""],["get_by_hash","TkMultiListbox","classes/TkMultiListbox.html#method-i-get_by_hash","(*idx)",""],["get_by_name","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-get_by_name","(file, name, keys=nil)",""],["get_byte","StringScanner","classes/StringScanner.html#method-i-get_byte","()","<p>Scans one byte and returns it. This method is not multibyte character\nsensitive. See also: #getch.\n\n<pre><code>s = ...</code></pre>\n"],["get_cb_entry","MultiTkIp","classes/MultiTkIp.html#method-c-get_cb_entry","(cmd)",""],["get_cb_entry","MultiTkIp","classes/MultiTkIp.html#method-c-get_cb_entry","(cmd)",""],["get_cb_entry","MultiTkIp","classes/MultiTkIp.html#method-c-get_cb_entry","(cmd)",""],["get_cb_entry","MultiTkIp","classes/MultiTkIp.html#method-c-get_cb_entry","(cmd)",""],["get_certs","CHashDir","classes/CHashDir.html#method-i-get_certs","(name = nil)",""],["get_class_or_module","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_class_or_module","(container)","<p>Look for the name of a class of module (optionally with a leading  &mdash; or\n<p>with  &mdash; separated named) and return …\n\n"],["get_class_specification","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_class_specification","()","<p>Return a superclass, which can be either a constant of an expression\n"],["get_clicks","Tk::Iwidgets::Calendar","classes/Tk/Iwidgets/Calendar.html#method-i-get_clicks","()",""],["get_clicks","Tk::Iwidgets::Datefield","classes/Tk/Iwidgets/Datefield.html#method-i-get_clicks","()",""],["get_clicks","Tk::Iwidgets::Spindate","classes/Tk/Iwidgets/Spindate.html#method-i-get_clicks","()",""],["get_clicks","Tk::Iwidgets::Spintime","classes/Tk/Iwidgets/Spintime.html#method-i-get_clicks","()",""],["get_clicks","Tk::Iwidgets::Timefield","classes/Tk/Iwidgets/Timefield.html#method-i-get_clicks","()",""],["get_clicks","Tk::Iwidgets::Watch","classes/Tk/Iwidgets/Watch.html#method-i-get_clicks","()",""],["get_config","Tk::Tcllib::KHIM","classes/Tk/Tcllib/KHIM.html#method-c-get_config","()",""],["get_constant","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_constant","()","<p>Parse a constant, which might be qualified by one or more class or module\nnames\n"],["get_constant_with_optional_parens","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_constant_with_optional_parens","()","<p>Get a constant that may be surrounded by parens\n"],["get_crls","CHashDir","classes/CHashDir.html#method-i-get_crls","(name = nil)",""],["get_curselection","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-get_curselection","()","<p>scrolledlistbox methods\n"],["get_curselection","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-get_curselection","()",""],["get_data","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-get_data","(win, fmt=nil, cmd=nil)",""],["get_data","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-get_data","(file, index, keys={})",""],["get_default_handler","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-i-get_default_handler","()",""],["get_displaychars","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-get_displaychars","(*index)",""],["get_elements","REXML::Element","classes/REXML/Element.html#method-i-get_elements","( xpath )","<p>Synonym for Element.to_a This is a little slower than calling elements.each\ndirectly.\n<p>xpath &mdash; any XPath …\n"],["get_eventloop_tick","MultiTkIp","classes/MultiTkIp.html#method-i-get_eventloop_tick","()",""],["get_eventloop_tick","MultiTkIp","classes/MultiTkIp.html#method-i-get_eventloop_tick","()",""],["get_eventloop_tick","MultiTkIp","classes/MultiTkIp.html#method-i-get_eventloop_tick","()",""],["get_eventloop_tick","MultiTkIp","classes/MultiTkIp.html#method-i-get_eventloop_tick","()",""],["get_eventloop_tick","RemoteTkIp","classes/RemoteTkIp.html#method-i-get_eventloop_tick","()",""],["get_eventloop_tick","TclTkIp","classes/TclTkIp.html#method-i-get_eventloop_tick","()",""],["get_eventloop_tick","TclTkLib","classes/TclTkLib.html#method-i-get_eventloop_tick","()",""],["get_eventloop_tick","TclTkLib","classes/TclTkLib.html#method-c-get_eventloop_tick","()",""],["get_eventloop_weight","MultiTkIp","classes/MultiTkIp.html#method-i-get_eventloop_weight","()",""],["get_eventloop_weight","MultiTkIp","classes/MultiTkIp.html#method-i-get_eventloop_weight","()",""],["get_eventloop_weight","MultiTkIp","classes/MultiTkIp.html#method-i-get_eventloop_weight","()",""],["get_eventloop_weight","MultiTkIp","classes/MultiTkIp.html#method-i-get_eventloop_weight","()",""],["get_eventloop_weight","RemoteTkIp","classes/RemoteTkIp.html#method-i-get_eventloop_weight","()",""],["get_eventloop_weight","TclTkIp","classes/TclTkIp.html#method-i-get_eventloop_weight","()",""],["get_eventloop_weight","TclTkLib","classes/TclTkLib.html#method-i-get_eventloop_weight","()",""],["get_eventloop_weight","TclTkLib","classes/TclTkLib.html#method-c-get_eventloop_weight","()",""],["get_eventloop_window_mode","TclTkLib","classes/TclTkLib.html#method-c-get_eventloop_window_mode","()",""],["get_ext_list","Object","classes/Object.html#method-i-get_ext_list","()",""],["get_fields","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-get_fields","(key)","<p>Ruby 1.8.3 &mdash; Returns an array of header field strings corresponding to the\ncase-insensitive <code>key</code>.  This …\n"],["get_file","Object","classes/Object.html#method-i-get_file","(name)",""],["get_file_and_line_from_caller","RSS::Utils","classes/RSS/Utils.html#method-i-get_file_and_line_from_caller","(i=0)",""],["get_fileicon","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-get_fileicon","(file, keys=nil)",""],["get_files","Object","classes/Object.html#method-i-get_files","(file)",""],["get_first","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-get_first","(path, nodeset)",""],["get_frame","ScrolledWindow","classes/ScrolledWindow.html#method-i-get_frame","()",""],["get_frame","ScrolledWindow","classes/ScrolledWindow.html#method-i-get_frame","()",""],["get_frame","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-get_frame","(&b)",""],["get_frame","Tk::BWidget::LabelFrame","classes/Tk/BWidget/LabelFrame.html#method-i-get_frame","(&b)",""],["get_frame","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-get_frame","(&b)",""],["get_frame","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-get_frame","(page, &b)",""],["get_frame","Tk::BWidget::PagesManager","classes/Tk/BWidget/PagesManager.html#method-i-get_frame","(page, &b)",""],["get_frame","Tk::BWidget::PanedWindow","classes/Tk/BWidget/PanedWindow.html#method-i-get_frame","(idx, &b)",""],["get_frame","Tk::BWidget::PanelFrame","classes/Tk/BWidget/PanelFrame.html#method-i-get_frame","(&b)",""],["get_frame","Tk::BWidget::ScrollableFrame","classes/Tk/BWidget/ScrollableFrame.html#method-i-get_frame","(&b)",""],["get_frame","Tk::BWidget::ScrolledWindow","classes/Tk/BWidget/ScrolledWindow.html#method-i-get_frame","(&b)",""],["get_frame","Tk::BWidget::StatusBar","classes/Tk/BWidget/StatusBar.html#method-i-get_frame","(&b)",""],["get_frame","Tk::BWidget::TitleFrame","classes/Tk/BWidget/TitleFrame.html#method-i-get_frame","(&b)",""],["get_frame","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-i-get_frame","()",""],["get_frame","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-i-get_frame","()",""],["get_frame","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-get_frame","()",""],["get_full","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-get_full","(*tags)",""],["get_full","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-get_full","()",""],["get_highlight_classes","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-get_highlight_classes","()",""],["get_hosts_path","Win32::Resolv","classes/Win32/Resolv.html#method-c-get_hosts_path","()",""],["get_icon","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-get_icon","(*args)",""],["get_icon_by_name","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-get_icon_by_name","(*args)",""],["get_id","Tk::BLT::Tabnotebook","classes/Tk/BLT/Tabnotebook.html#method-i-get_id","(index)",""],["get_image","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-get_image","(file, index, keys={})",""],["get_index_of_value","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-get_index_of_value","()",""],["get_indicator","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-get_indicator","(idx, &b)",""],["get_initial_token","Win32::SSPI::NegotiateAuth","classes/Win32/SSPI/NegotiateAuth.html#method-i-get_initial_token","()","<p>Gets the initial Negotiate token. Returns it as a base64 encoded string\nsuitable for use in HTTP. Can …\n"],["get_instance","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-c-get_instance","(server, *options)","<p>Factory for servlet instances that will handle a request from\n<code>server</code> using <code>options</code> from the mount point. …\n"],["get_instance","WEBrick::HTTPServlet::ProcHandler","classes/WEBrick/HTTPServlet/ProcHandler.html#method-i-get_instance","(server, *options)",""],["get_instance","XMLRPC::WEBrickServlet","classes/XMLRPC/WEBrickServlet.html#method-i-get_instance","(config, *options)",""],["get_item","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-get_item","(idx)",""],["get_label","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-get_label","(val=nil)",""],["get_lhs","Tk::Iwidgets::Disjointlistbox","classes/Tk/Iwidgets/Disjointlistbox.html#method-i-get_lhs","()",""],["get_libpath","Object","classes/Object.html#method-i-get_libpath","(lib_flag, lib_spec)",""],["get_limit","MultiTkIp","classes/MultiTkIp.html#method-c-get_limit","(limit_type, slave = '', slot = nil)",""],["get_limit","MultiTkIp","classes/MultiTkIp.html#method-c-get_limit","(limit_type, slave = '', slot = nil)",""],["get_limit","MultiTkIp","classes/MultiTkIp.html#method-c-get_limit","(limit_type, slave = '', slot = nil)",""],["get_limit","MultiTkIp","classes/MultiTkIp.html#method-i-get_limit","(limit_type, slave = '', slot = nil)",""],["get_limit","MultiTkIp","classes/MultiTkIp.html#method-i-get_limit","(limit_type, slave = '', slot = nil)",""],["get_limit","MultiTkIp","classes/MultiTkIp.html#method-i-get_limit","(limit_type, slave = '', slot = nil)",""],["get_limit","MultiTkIp","classes/MultiTkIp.html#method-i-get_limit","(limit_type, slave = '', slot = nil)",""],["get_limit","MultiTkIp","classes/MultiTkIp.html#method-c-get_limit","(limit_type, slave = '', slot = nil)",""],["get_list_contents","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-get_list_contents","(index)",""],["get_listbox","Tk::BWidget::ComboBox","classes/Tk/BWidget/ComboBox.html#method-i-get_listbox","(&b)",""],["get_mailfile","Object","classes/Object.html#method-i-get_mailfile","(user)",""],["get_members","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-get_members","(file, name, keys=nil)",""],["get_menu","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-get_menu","(menu_id, &b)",""],["get_menustate","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-get_menustate","(tag)",""],["get_metadata","Gem::Commands::UnpackCommand","classes/Gem/Commands/UnpackCommand.html#method-i-get_metadata","(path)","<p>Extracts the Gem::Specification and raw metadata from the .gem file at\n<code>path</code>.\n"],["get_methods","XMLRPC::Service::Interface","classes/XMLRPC/Service/Interface.html#method-i-get_methods","(obj, delim=\".\")",""],["get_methods","XMLRPC::Service::PublicInstanceMethodsInterface","classes/XMLRPC/Service/PublicInstanceMethodsInterface.html#method-i-get_methods","(obj, delim=\".\")",""],["get_name","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-get_name","()",""],["get_name","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-get_name","(nick)",""],["get_namespace","REXML::Functions","classes/REXML/Functions.html#method-c-get_namespace","( node_set = nil )","<p>Helper method.\n"],["get_no_event_wait","MultiTkIp","classes/MultiTkIp.html#method-i-get_no_event_wait","()",""],["get_no_event_wait","MultiTkIp","classes/MultiTkIp.html#method-i-get_no_event_wait","()",""],["get_no_event_wait","MultiTkIp","classes/MultiTkIp.html#method-i-get_no_event_wait","()",""],["get_no_event_wait","MultiTkIp","classes/MultiTkIp.html#method-i-get_no_event_wait","()",""],["get_no_event_wait","RemoteTkIp","classes/RemoteTkIp.html#method-i-get_no_event_wait","()",""],["get_no_event_wait","TclTkIp","classes/TclTkIp.html#method-i-get_no_event_wait","()",""],["get_no_event_wait","TclTkLib","classes/TclTkLib.html#method-i-get_no_event_wait","()",""],["get_no_event_wait","TclTkLib","classes/TclTkLib.html#method-c-get_no_event_wait","()",""],["get_node","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-get_node","(node, idx)",""],["get_obj","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-get_obj","()",""],["get_obj","TkFont","classes/TkFont.html#method-c-get_obj","(name)",""],["get_obj","TkFont","classes/TkFont.html#method-c-get_obj","(name)",""],["get_objs","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-get_objs","()",""],["get_on_display","TkClipboard","classes/TkClipboard.html#method-c-get_on_display","(win, type=nil)",""],["get_on_display","TkSelection","classes/TkSelection.html#method-c-get_on_display","(win, keys=nil)",""],["get_on_display","TkSelection","classes/TkSelection.html#method-c-get_on_display","(win, keys=nil)",""],["get_one_gem_name","Gem::Command","classes/Gem/Command.html#method-i-get_one_gem_name","()","<p>Get a single gem name from the command line.  Fail if there is no gem name\nor if there is more than one …\n"],["get_one_optional_argument","Gem::Command","classes/Gem/Command.html#method-i-get_one_optional_argument","()","<p>Get a single optional argument from the command line.  If more than one\nargument is given, return only …\n"],["get_option","GetoptLong","classes/GetoptLong.html#method-i-get_option","()","<p>`get_option&#39; is an alias of `get&#39;.\n"],["get_option","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-get_option","(win, option)",""],["get_options","Tk::Tcllib::KHIM","classes/Tk/Tcllib/KHIM.html#method-c-get_options","(parent='')",""],["get_output","Tk::Iwidgets::Canvasprintbox","classes/Tk/Iwidgets/Canvasprintbox.html#method-i-get_output","()",""],["get_output","Tk::Iwidgets::Canvasprintdialog","classes/Tk/Iwidgets/Canvasprintdialog.html#method-i-get_output","()",""],["get_owner","TkSelection","classes/TkSelection.html#method-i-get_owner","(sel=nil)",""],["get_owner","TkSelection","classes/TkSelection.html#method-i-get_owner","(sel=nil)",""],["get_owner","TkSelection","classes/TkSelection.html#method-c-get_owner","(sel=nil)",""],["get_owner","TkSelection","classes/TkSelection.html#method-c-get_owner","(sel=nil)",""],["get_owner_on_display","TkSelection","classes/TkSelection.html#method-c-get_owner_on_display","(win, sel=nil)",""],["get_owner_on_display","TkSelection","classes/TkSelection.html#method-c-get_owner_on_display","(win, sel=nil)",""],["get_page","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-get_page","(page)",""],["get_page","Tk::BWidget::PagesManager","classes/Tk/BWidget/PagesManager.html#method-i-get_page","(page)",""],["get_passwd","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in\n<code>realm</code>.  If <code>reload_db</code> is true the database will be\n…\n"],["get_passwd","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in\n<code>realm</code>.  If <code>reload_db</code> is true the database will be\n…\n"],["get_passwd","WEBrick::HTTPAuth::UserDB","classes/WEBrick/HTTPAuth/UserDB.html#method-i-get_passwd","(realm, user, reload_db=false)","<p>Retrieves a password in <code>realm</code> for <code>user</code> for the\nauth_type of this database.  <code>reload_db</code> is a dummy value. …\n"],["get_path","Gem::Commands::UnpackCommand","classes/Gem/Commands/UnpackCommand.html#method-i-get_path","(dependency)","<p>Return the full path to the cached gem file matching the given name and\nversion requirement.  Returns …\n"],["get_pkg_list","Object","classes/Object.html#method-i-get_pkg_list","(file)",""],["get_position","Object","classes/Object.html#method-i-get_position","(z)",""],["get_print","Net::HTTP","classes/Net/HTTP.html#method-c-get_print","(uri_or_host, path = nil, port = nil)","<p>Gets the body text from the target and outputs it to $stdout.  The target\ncan either be specified as …\n"],["get_print","Net::HTTP","classes/Net/HTTP.html#method-c-get_print","(uri_or_host, path = nil, port = nil)","<p>Gets the body text from the target and outputs it to $stdout.  The target\ncan either be specified as …\n"],["get_procs","TkTimer","classes/TkTimer.html#method-i-get_procs","()",""],["get_procs","TkTimer","classes/TkTimer.html#method-i-get_procs","()",""],["get_proxy_from_env","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-get_proxy_from_env","()","<p>Returns an HTTP proxy URI if one is set in the environment variables.\n"],["get_range","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-get_range","(first, last)",""],["get_readed","RubyLex","classes/RubyLex.html#method-i-get_readed","()",""],["get_release_type_name","TclTkLib","classes/TclTkLib.html#method-c-get_release_type_name","(*args)",""],["get_resolv_info","Win32::Resolv","classes/Win32/Resolv.html#method-c-get_resolv_info","()",""],["get_response","Net::HTTP","classes/Net/HTTP.html#method-c-get_response","(uri_or_host, path = nil, port = nil, &block)","<p>Sends a GET request to the target and returns the HTTP response as a\nNet::HTTPResponse object.  The target …\n"],["get_response","Net::HTTP","classes/Net/HTTP.html#method-c-get_response","(uri_or_host, path = nil, port = nil, &block)","<p>Sends a GET request to the target and returns the HTTP response as a\nNet::HTTPResponse object.  The target …\n"],["get_revisions","VCS","classes/VCS.html#method-i-get_revisions","(path)","<p>return a pair of strings, the last revision and the last revision in which\n<code>path</code> was modified.\n"],["get_revisions","VCS::GIT","classes/VCS/GIT.html#method-c-get_revisions","(path)",""],["get_revisions","VCS::SVN","classes/VCS/SVN.html#method-c-get_revisions","(path)",""],["get_rhs","Tk::Iwidgets::Disjointlistbox","classes/Tk/Iwidgets/Disjointlistbox.html#method-i-get_rhs","()",""],["get_screen_size","Readline","classes/Readline.html#method-c-get_screen_size","()","<p>Returns the terminal&#39;s rows and columns.\n<p>See GNU Readline&#39;s rl_get_screen_size function.\n<p>Raises …\n"],["get_scrollbarwidth","Tk::ScrollbarComposite","classes/Tk/ScrollbarComposite.html#method-i-get_scrollbarwidth","()","<p>get/set width of scrollbar\n"],["get_select","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-get_select","()",""],["get_selected","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-get_selected","()",""],["get_service_hook","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-i-get_service_hook","()",""],["get_shlib_path_head","Object","classes/Object.html#method-i-get_shlib_path_head","()",""],["get_shlib_versions","Object","classes/Object.html#method-i-get_shlib_versions","(major = 8, minor_max = 9, minor_min = 0, ext = \"\")",""],["get_sorted_module_list","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-get_sorted_module_list","(classes)","<p>Return a list of the documented modules sorted by salience first, then by\nname.\n"],["get_step","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-get_step","(who, step)","<p>Each Move## keeps its state info in STEP, this retrieves and increments it\n"],["get_string","Tk::Iwidgets::Calendar","classes/Tk/Iwidgets/Calendar.html#method-i-get_string","()","\n<pre><code>def command(cmd = Proc.new, args = nil)\n  if cmd.kind_of?(CalendarCommand)\n    configure(&#39;command&#39;, cmd) ...\n</code></pre>\n"],["get_string","Tk::Iwidgets::Datefield","classes/Tk/Iwidgets/Datefield.html#method-i-get_string","()",""],["get_string","Tk::Iwidgets::Spindate","classes/Tk/Iwidgets/Spindate.html#method-i-get_string","()",""],["get_string","Tk::Iwidgets::Spintime","classes/Tk/Iwidgets/Spintime.html#method-i-get_string","()",""],["get_string","Tk::Iwidgets::Timefield","classes/Tk/Iwidgets/Timefield.html#method-i-get_string","()",""],["get_string","Tk::Iwidgets::Watch","classes/Tk/Iwidgets/Watch.html#method-i-get_string","()",""],["get_svninfo","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-get_svninfo","(klass)","<p>Try to extract Subversion information out of the first constant whose value\nlooks like a subversion  …\n"],["get_symbol_or_name","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_symbol_or_name","()","<p>Extracts a name or symbol from the token stream.\n"],["get_tab","Tk::BLT::Tabnotebook","classes/Tk/BLT/Tabnotebook.html#method-i-get_tab","(index)",""],["get_tab","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-get_tab","(index)",""],["get_tabobj","Tk::BLT::Tabnotebook","classes/Tk/BLT/Tabnotebook.html#method-i-get_tabobj","(index)",""],["get_tabobj","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-get_tabobj","(index)",""],["get_tag","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-get_tag","()",""],["get_tag","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-get_tag","(val=nil)",""],["get_tags","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-get_tags","()",""],["get_tclConfig","Object","classes/Object.html#method-i-get_tclConfig","(tclConfig_file, tkConfig_file, tclConfig_dir, tkConfig_dir)",""],["get_tclConfig_dirs","Object","classes/Object.html#method-i-get_tclConfig_dirs","()",""],["get_text","REXML::Element","classes/REXML/Element.html#method-i-get_text","(path = nil)","<p>Returns the first child Text node, if any, or <code>nil</code> otherwise.\nThis method returns the actual <code>Text</code> node, …\n"],["get_textborderwidth","TkTextFrame","classes/TkTextFrame.html#method-i-get_textborderwidth","()",""],["get_texts","PhotoCanvas","classes/PhotoCanvas.html#method-i-get_texts","()",""],["get_thread","DEBUGGER__","classes/DEBUGGER__.html#method-i-get_thread","(num)",""],["get_tk","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-get_tk","()","<p>Fetches the next token from the scanner\n"],["get_tk_until","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-get_tk_until","(*tokens)","<p>Reads and returns all tokens up to one of <code>tokens</code>.  Leaves the\nmatched token in the token list.\n"],["get_tkread","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-get_tkread","()","<p>Retrieves a String representation of the read tokens\n"],["get_toolbar","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-get_toolbar","(idx, &b)",""],["get_transparency","TkPhotoImage","classes/TkPhotoImage.html#method-i-get_transparency","(x, y)","<p>Returns a boolean indicating if the pixel at (x,y) is transparent.\n"],["get_transparency","TkPhotoImage","classes/TkPhotoImage.html#method-i-get_transparency","(x, y)","<p>Returns a boolean indicating if the pixel at (x,y) is transparent.\n"],["get_valid_ip","XMLRPC::WEBrickServlet","classes/XMLRPC/WEBrickServlet.html#method-i-get_valid_ip","()",""],["get_value","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-get_value","(section, key)",""],["get_value","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-get_value","(key, default_val=None)",""],["get_value","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-get_value","()",""],["get_value","Tk::RadioButton","classes/Tk/RadioButton.html#method-i-get_value","()",""],["get_value","Tk::RadioButton","classes/Tk/RadioButton.html#method-i-get_value","()",""],["get_value_index","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-get_value_index","()",""],["get_variable","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-get_variable","(win, varname, my_varname=None)",""],["get_version","TclTkLib","classes/TclTkLib.html#method-c-get_version","(*args)",""],["getacl","Net::IMAP","classes/Net/IMAP.html#method-i-getacl","(mailbox)","<p>Send the GETACL command along with specified <code>mailbox</code>. If this\nmailbox exists, an array containing objects …\n"],["getaddress","IPSocket","classes/IPSocket.html#method-i-getaddress","(s)","<p>Returns a <code>String</code> based representation of a valid DNS hostname,\nIPv4 or IPv6 address.\n\n<pre><code>IPSocket.getaddress ...</code></pre>\n"],["getaddress","IPSocket","classes/IPSocket.html#method-c-getaddress","(p1)","<p>Lookups the IP address of <em>host</em>.\n\n<pre><code>IPSocket.getaddress(&quot;localhost&quot;)     #=&gt; &quot;127.0.0.1&quot;\nIPSocket.getaddress(&quot;ip6-localhost&quot;) ...\n</code></pre>\n"],["getaddress","Resolv","classes/Resolv.html#method-c-getaddress","(name)","<p>Looks up the first IP address for <code>name</code>.\n"],["getaddress","Resolv","classes/Resolv.html#method-i-getaddress","(name)","<p>Looks up the first IP address for <code>name</code>.\n"],["getaddress","Resolv::DNS","classes/Resolv/DNS.html#method-i-getaddress","(name)","<p>Gets the IP address of <code>name</code> from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name or a String.  Retrieved …\n"],["getaddress","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-getaddress","(name)","<p>Gets the IP address of <code>name</code> from the hosts file.\n"],["getaddresses","Resolv","classes/Resolv.html#method-c-getaddresses","(name)","<p>Looks up all IP address for <code>name</code>.\n"],["getaddresses","Resolv","classes/Resolv.html#method-i-getaddresses","(name)","<p>Looks up all IP address for <code>name</code>.\n"],["getaddresses","Resolv::DNS","classes/Resolv/DNS.html#method-i-getaddresses","(name)","<p>Gets all IP addresses for <code>name</code> from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name or a String.  Retrieved …\n"],["getaddresses","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-getaddresses","(name)","<p>Gets all IP addresses for <code>name</code> from the hosts file.\n"],["getaddrinfo","Addrinfo","classes/Addrinfo.html#method-c-getaddrinfo","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = v6)","<p>returns a list of addrinfo objects as an array.\n<p>This method converts nodename (hostname) and service (port) …\n"],["getaddrinfo","Socket","classes/Socket.html#method-c-getaddrinfo","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)","<p>Obtains address information for <em>nodename</em>:<em>servname</em>.\n<p><em>family</em> should be an address family such as: :INET, …\n"],["getbinaryfile","Net::FTP","classes/Net/FTP.html#method-i-getbinaryfile","(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)","<p>Retrieves <code>remotefile</code> in binary mode, storing the result in\n<code>localfile</code>. If <code>localfile</code> is nil, returns retrieved\n…\n"],["getbkgd","Curses::Window","classes/Curses/Window.html#method-i-getbkgd","()","<p>Returns an Interer (<code>ch</code>) for the character property in the\ncurrent window.\n"],["getbyte","ARGF","classes/ARGF.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <code>ARGF</code>. Returns\n<code>nil</code> if called at the end of the stream.\n<p>For example: …\n"],["getbyte","IO","classes/IO.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <em>ios</em>. Returns\n<code>nil</code> if called at end of file.\n\n<pre><code>f = File.new(&quot;testfile&quot;) ...</code></pre>\n"],["getbyte","String","classes/String.html#method-i-getbyte","(p1)","<p>returns the <em>index</em>th byte as an integer.\n"],["getbyte","StringIO","classes/StringIO.html#method-i-getbyte","()","<p>See IO#getbyte.\n"],["getbyte","StringScanner","classes/StringScanner.html#method-i-getbyte","()","<p>Equivalent to #get_byte. This method is obsolete; use #get_byte instead.\n"],["getbyte","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-getbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getc","ARGF","classes/ARGF.html#method-i-getc","()","<p>Reads the next character from <code>ARGF</code> and returns it as a\n<code>String</code>. Returns <code>nil</code> at the end of the stream. …\n"],["getc","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-getc","()","<p>Read one byte from the tar entry\n"],["getc","IO","classes/IO.html#method-i-getc","()","<p>Reads a one-character string from <em>ios</em>. Returns <code>nil</code> if\ncalled at end of file.\n\n<pre><code>f = File.new(&quot;testfile&quot;) ...</code></pre>\n"],["getc","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-getc","()","<p>Reads one character from the stream.  Returns nil if called at end of file.\n"],["getc","RubyLex","classes/RubyLex.html#method-i-getc","()",""],["getc","StringIO","classes/StringIO.html#method-i-getc","()","<p>See IO#getc.\n"],["getc","TkTextIO","classes/TkTextIO.html#method-i-getc","()",""],["getc","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-getc","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getc_of_rests","RubyLex","classes/RubyLex.html#method-i-getc_of_rests","()",""],["getch","Curses","classes/Curses.html#method-c-getch","()","<p>Read and returns a character from the window.\n<p>See Curses::Key to all the function KEY_* available\n"],["getch","Curses::Window","classes/Curses/Window.html#method-i-getch","()","<p>Read and returns a character from the window.\n<p>See Curses::Key to all the function KEY_* available\n"],["getch","IO","classes/IO.html#method-i-getch","(*args)","<p>Reads and returns a character in raw mode.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["getch","IO::readable","classes/IO/readable.html#method-i-getch","(*args)",""],["getch","StringScanner","classes/StringScanner.html#method-i-getch","()","<p>Scans one character and returns it. This method is multibyte character\nsensitive.\n\n<pre><code>s = StringScanner.new(&quot;ab&quot;) ...</code></pre>\n"],["getdir","DemoTree","classes/DemoTree.html#method-c-getdir","(tree, node, path)",""],["getdir","Net::FTP","classes/Net/FTP.html#method-i-getdir","()",""],["getegid","Process::Sys","classes/Process/Sys.html#method-c-getegid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre><code>Process.egid   #=&gt; 500\n</code></pre>\n"],["geteuid","Process::Sys","classes/Process/Sys.html#method-c-geteuid","()","<p>Returns the effective user ID for this process.\n\n<pre><code>Process.euid   #=&gt; 501\n</code></pre>\n"],["getframe","ScrolledWindow","classes/ScrolledWindow.html#method-i-getframe","()",""],["getframe","ScrolledWindow","classes/ScrolledWindow.html#method-i-getframe","()",""],["getframe","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-i-getframe","()",""],["getframe","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-getframe","()",""],["getgid","Process::Sys","classes/Process/Sys.html#method-c-getgid","()","<p>Returns the (real) group ID for this process.\n\n<pre><code>Process.gid   #=&gt; 500\n</code></pre>\n"],["getgm","Time","classes/Time.html#method-i-getgm","()","<p>Returns a new <code>new_time</code> object representing <em>time</em> in\nUTC.\n\n<pre><code>t = Time.local(2000,1,1,20,15,1)   #=&gt; 2000-01-01 ...\n</code></pre>\n"],["getgrent","Etc","classes/Etc.html#method-c-getgrent","()","<p>Returns an entry from the /etc/group file. The first time it is called it\nopens the file and returns …\n"],["getgrgid","Etc","classes/Etc.html#method-c-getgrgid","(p1 = v1)","<p>Returns information about the group with specified integer group id (gid),\nas found in /etc/group.\n<p>The …\n"],["getgrnam","Etc","classes/Etc.html#method-c-getgrnam","(p1)","<p>Returns information about the group with specified String name, as found in\n/etc/group.\n<p>The information …\n"],["gethostbyaddr","Socket","classes/Socket.html#method-c-gethostbyaddr","(p1, p2 = v2)","<p>Obtains the host information for <em>address</em>.\n\n<pre><code>p Socket.gethostbyaddr([221,186,184,68].pack(&quot;CCCC&quot;))\n#=&gt; [&quot;carbon.ruby-lang.org&quot;, ...\n</code></pre>\n"],["gethostbyname","Socket","classes/Socket.html#method-c-gethostbyname","(p1)","<p>Obtains the host information for <em>hostname</em>.\n\n<pre><code>p Socket.gethostbyname(&quot;hal&quot;) #=&gt; [&quot;localhost&quot;, [&quot;hal&quot;], 2, ...\n</code></pre>\n"],["gethostbyname","TCPSocket","classes/TCPSocket.html#method-c-gethostbyname","(p1)","<p>Lookups host information by <em>hostname</em>.\n\n<pre><code>TCPSocket.gethostbyname(&quot;localhost&quot;)\n#=&gt; [&quot;localhost&quot;, [&quot;hal&quot;], ...\n</code></pre>\n"],["gethostname","Socket","classes/Socket.html#method-c-gethostname","()","<p>Returns the hostname.\n\n<pre><code>p Socket.gethostname #=&gt; &quot;hal&quot;\n</code></pre>\n<p>Note that it is not guaranteed to be able to convert …\n"],["getlocal","Time","classes/Time.html#method-i-getlocal","(p1 = v1)","<p>Returns a new <code>new_time</code> object representing <em>time</em> in\nlocal time (using the local time zone in effect for …\n"],["getlogin","Etc","classes/Etc.html#method-c-getlogin","()","<p>Returns the short user name of the currently logged in user. Unfortunately,\nit is often rather easy to …\n"],["getmouse","Curses","classes/Curses.html#method-c-getmouse","()","<p>Returns coordinates of the mouse.\n<p>This will read and pop the mouse event data off the queue\n<p>See the BUTTON*, …\n"],["getname","Resolv","classes/Resolv.html#method-c-getname","(address)","<p>Looks up the hostname of <code>address</code>.\n"],["getname","Resolv","classes/Resolv.html#method-i-getname","(address)","<p>Looks up the hostname of <code>address</code>.\n"],["getname","Resolv::DNS","classes/Resolv/DNS.html#method-i-getname","(address)","<p>Gets the hostname for <code>address</code> from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4, Resolv::IPv6 or a …\n"],["getname","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-getname","(address)","<p>Gets the hostname of <code>address</code> from the hosts file.\n"],["getname","Tk::BWidget","classes/Tk/BWidget.html#method-c-getname","(name)",""],["getnameinfo","Addrinfo","classes/Addrinfo.html#method-i-getnameinfo","(p1 = v1)","<p>returns nodename and service as a pair of strings. This converts struct\nsockaddr in addrinfo to textual …\n"],["getnameinfo","Socket","classes/Socket.html#method-c-getnameinfo","(p1, p2 = v2)","<p>Obtains name information for <em>sockaddr</em>.\n<p><em>sockaddr</em> should be one of follows.\n<p>packed sockaddr string such as …\n"],["getnames","Resolv","classes/Resolv.html#method-c-getnames","(address)","<p>Looks up all hostnames for <code>address</code>.\n"],["getnames","Resolv","classes/Resolv.html#method-i-getnames","(address)","<p>Looks up all hostnames for <code>address</code>.\n"],["getnames","Resolv::DNS","classes/Resolv/DNS.html#method-i-getnames","(address)","<p>Gets all hostnames for <code>address</code> from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4, Resolv::IPv6 or …\n"],["getnames","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-getnames","(address)","<p>Gets all hostnames for <code>address</code> from the hosts file.\n"],["getopts","OptionParser","classes/OptionParser.html#method-c-getopts","(*args)","<p>See #getopts.\n"],["getopts","OptionParser","classes/OptionParser.html#method-i-getopts","(*args)","<p>Wrapper method for getopts.rb.\n\n<pre><code>params = ARGV.getopts(&quot;ab:&quot;, &quot;foo&quot;, &quot;bar:&quot;)\n# params[:a] = true   # -a ...</code></pre>\n"],["getopts","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-getopts","(*args)","<p>Substitution of getopts is possible as follows. Also see\nOptionParser#getopts.\n\n<pre><code>def getopts(*args)\n  ($OPT ...\n</code></pre>\n"],["getpeereid","BasicSocket","classes/BasicSocket.html#method-i-getpeereid","()","<p>Returns the user and group on the peer of the UNIX socket. The result is a\ntwo element array which contains …\n"],["getpeername","BasicSocket","classes/BasicSocket.html#method-i-getpeername","()","<p>Returns the remote address of the socket as a sockaddr string.\n\n<pre><code>TCPServer.open(&quot;127.0.0.1&quot;, 1440) {|serv| ...\n</code></pre>\n"],["getpgid","Process","classes/Process.html#method-c-getpgid","(p1)","<p>Returns the process group ID for the given process id. Not available on all\nplatforms.\n\n<pre><code>Process.getpgid(Process.ppid()) ...</code></pre>\n"],["getpgrp","Process","classes/Process.html#method-c-getpgrp","()","<p>Returns the process group ID for this process. Not available on all\nplatforms.\n\n<pre><code>Process.getpgid(0)   #=&gt; ...\n</code></pre>\n"],["getpos","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-getpos","(anchor, obj)",""],["getpriority","Process","classes/Process.html#method-c-getpriority","(p1, p2)","<p>Gets the scheduling priority for specified process, process group, or user.\n<em>kind</em> indicates the kind of …\n"],["getpty","PTY","classes/PTY.html#method-c-getpty","(*args)","<p>Spawns the specified command on a newly allocated pty.\n<p>The command&#39;s controlling tty is set to the …\n"],["getpwent","Etc","classes/Etc.html#method-c-getpwent","()","<p>Returns an entry from the /etc/passwd file. The first time it is called it\nopens the file and returns …\n"],["getpwnam","Etc","classes/Etc.html#method-c-getpwnam","(p1)","<p>Returns the /etc/passwd information for the user with specified login name.\n<p>The information is returned …\n"],["getpwuid","Etc","classes/Etc.html#method-c-getpwuid","(p1 = v1)","<p>Returns the /etc/passwd information for the user with specified integer\nuser id (uid).\n<p>The information …\n"],["getquota","Net::IMAP","classes/Net/IMAP.html#method-i-getquota","(mailbox)","<p>Sends the GETQUOTA command along with specified <code>mailbox</code>. If\nthis mailbox exists, then an array containing …\n"],["getquotaroot","Net::IMAP","classes/Net/IMAP.html#method-i-getquotaroot","(mailbox)","<p>Sends the GETQUOTAROOT command along with specified <code>mailbox</code>.\nThis command is generally available to both …\n"],["getresource","Resolv::DNS","classes/Resolv/DNS.html#method-i-getresource","(name, typeclass)","<p>Look up the <code>typeclass</code> DNS resource of <code>name</code>.\n<p><code>name</code> must be a Resolv::DNS::Name or a String.\n<p><code>typeclass</code> should …\n"],["getresources","Resolv::DNS","classes/Resolv/DNS.html#method-i-getresources","(name, typeclass)","<p>Looks up all <code>typeclass</code> DNS resources for <code>name</code>. \nSee #getresource for argument details.\n"],["getrlimit","Process","classes/Process.html#method-c-getrlimit","(p1)","<p>Gets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["gets","ARGF","classes/ARGF.html#method-i-gets","(*args)","<p>Returns the next line from the current file in <code>ARGF</code>.\n<p>By default lines are assumed to be separated by +$/+; …\n"],["gets","CSV","classes/CSV.html#method-i-gets","()",""],["gets","IO","classes/IO.html#method-i-gets","(*args)","<p>Reads the next “line&#39;&#39; from the I/O stream; lines are separated by\n<em>sep</em>. A separator of <code>nil</code> reads …\n"],["gets","IRB::FileInputMethod","classes/IRB/FileInputMethod.html#method-i-gets","()",""],["gets","IRB::InputMethod","classes/IRB/InputMethod.html#method-i-gets","()",""],["gets","IRB::Locale","classes/IRB/Locale.html#method-i-gets","(*rs)",""],["gets","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-gets","()",""],["gets","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-gets","()",""],["gets","Kernel","classes/Kernel.html#method-i-gets","(*args)","<p>Returns (and assigns to <code>$_</code>) the next line from the list of\nfiles in <code>ARGV</code> (or <code>$*</code>), or from standard input …\n"],["gets","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-gets","(eol=$/, limit=nil)","<p>Reads the next “line+ from the stream.  Lines are separated by\n<code>eol</code>.  If <code>limit</code> is provided the result …\n"],["gets","RubyLex","classes/RubyLex.html#method-i-gets","()",""],["gets","StringIO","classes/StringIO.html#method-i-gets","(*args)","<p>See IO#gets.\n"],["gets","TkTextIO","classes/TkTextIO.html#method-i-gets","(rs = $/)",""],["gets","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-gets","(eol=LF, size=nil)",""],["gets","XMP::StringInputMethod","classes/XMP/StringInputMethod.html#method-i-gets","()",""],["gets","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-gets","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["getselection","TkTree","classes/TkTree.html#method-i-getselection","()",""],["getservbyname","Socket","classes/Socket.html#method-c-getservbyname","(p1, p2 = v2)","<p>Obtains the port number for <em>service_name</em>.\n<p>If <em>protocol_name</em> is not given, “tcp” is assumed.\n\n<pre><code>Socket.getservbyname(&quot;smtp&quot;) ...</code></pre>\n"],["getservbyport","Socket","classes/Socket.html#method-c-getservbyport","(p1, p2 = v2)","<p>Obtains the port number for <em>port</em>.\n<p>If <em>protocol_name</em> is not given, “tcp” is assumed.\n\n<pre><code>Socket.getservbyport(80) ...</code></pre>\n"],["getservername","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-c-getservername","()",""],["getservername","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-getservername","()","<p>The server hostname\n"],["getsockname","BasicSocket","classes/BasicSocket.html#method-i-getsockname","()","<p>Returns the local address of the socket as a sockaddr string.\n\n<pre><code>TCPServer.open(&quot;127.0.0.1&quot;, 15120) {|serv| ...\n</code></pre>\n"],["getsockopt","BasicSocket","classes/BasicSocket.html#method-i-getsockopt","(p1, p2)","<p>Gets a socket option. These are protocol and system specific, see your\nlocal system documentation for …\n"],["getstr","Curses","classes/Curses.html#method-c-getstr","()","<p>This is equivalent to a series f Curses::Window.getch calls\n"],["getstr","Curses::Window","classes/Curses/Window.html#method-i-getstr","()","<p>This is equivalent to a series f Curses::Window.getch calls\n"],["gettags","Tk::Canvas","classes/Tk/Canvas.html#method-i-gettags","(tagOrId)",""],["gettags","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-gettags","(tagOrId)",""],["gettags","TkcTagAccess","classes/TkcTagAccess.html#method-i-gettags","()",""],["getter","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-getter","(uri, tag_name)",""],["gettextfile","Net::FTP","classes/Net/FTP.html#method-i-gettextfile","(remotefile, localfile = File.basename(remotefile))","<p>Retrieves <code>remotefile</code> in ASCII (text) mode, storing the result\nin <code>localfile</code>. If <code>localfile</code> is nil, returns …\n"],["getuid","Process::Sys","classes/Process/Sys.html#method-c-getuid","()","<p>Returns the (real) user ID of this process.\n\n<pre><code>Process.uid   #=&gt; 501\n</code></pre>\n"],["getutc","Time","classes/Time.html#method-i-getutc","()","<p>Returns a new <code>new_time</code> object representing <em>time</em> in\nUTC.\n\n<pre><code>t = Time.local(2000,1,1,20,15,1)   #=&gt; 2000-01-01 ...\n</code></pre>\n"],["getwd","Dir","classes/Dir.html#method-c-getwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre><code>Dir.chdir(&quot;/tmp&quot;)   #=&gt; ...\n</code></pre>\n"],["getwd","FileUtils","classes/FileUtils.html#method-c-getwd","()",""],["getwd","Pathname","classes/Pathname.html#method-c-getwd","()","<p>See <code>Dir.getwd</code>.  Returns the current working directory as a\nPathname.\n"],["gid","File::Stat","classes/File/Stat.html#method-i-gid","()","<p>Returns the numeric group id of the owner of <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).gid   #=&gt; 500\n</code></pre>\n"],["gid","Process","classes/Process.html#method-c-gid","()","<p>Returns the (real) group ID for this process.\n\n<pre><code>Process.gid   #=&gt; 500\n</code></pre>\n"],["gid=","Process","classes/Process.html#method-c-gid-3D","(p1)","<p>Sets the group ID for this process.\n"],["glob","Dir","classes/Dir.html#method-c-glob","(p1, p2 = v2)","<p>Returns the filenames found by expanding <em>pattern</em> which is an\n<code>Array</code> of the patterns or the pattern <code>String</code> …\n"],["glob","Pathname","classes/Pathname.html#method-c-glob","(p1, p2 = v2)","<p>See <code>Dir.glob</code>.  Returns or yields Pathname objects.\n"],["glob","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-glob","(pattern)","<p>def sort(*filenames)\n\n<pre><code>Sort.new(self, *filenames)</code></pre>\n<p>end\n"],["global_variables","Kernel","classes/Kernel.html#method-i-global_variables","()","<p>Returns an array of the names of global variables.\n\n<pre><code>global_variables.grep /std/   #=&gt; [:$stdin, :$stdout, ...\n</code></pre>\n"],["gm","Time","classes/Time.html#method-c-gm","(*args)","<p>Creates a time based on given values, interpreted as UTC (GMT). The year\nmust be specified. Other values …\n"],["gmt?","Time","classes/Time.html#method-i-gmt-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre><code>t = Time.now                        #=&gt; 2007-11-19 ...\n</code></pre>\n"],["gmt_offset","Time","classes/Time.html#method-i-gmt_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=&gt; ...\n</code></pre>\n"],["gmtime","Time","classes/Time.html#method-i-gmtime","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:18:31 -0600\nt.gmt? ...\n</code></pre>\n"],["gmtoff","Time","classes/Time.html#method-i-gmtoff","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=&gt; ...\n</code></pre>\n"],["go","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-go","(who = nil)",""],["goto_line","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-goto_line","(idx)",""],["grab","Tk::BWidget","classes/Tk/BWidget.html#method-c-grab","(opt, path)",""],["grammar","Object","classes/Object.html#method-i-grammar","(f, out)",""],["grant_privilege","Process::GID","classes/Process/GID.html#method-c-grant_privilege","(p1)","<p>Set the effective group ID, and if possible, the saved group ID of the\nprocess to the given <em>integer</em>. …\n"],["grant_privilege","Process::UID","classes/Process/UID.html#method-c-grant_privilege","(p1)","<p>Set the effective user ID, and if possible, the saved user ID of the\nprocess to the given <em>integer</em>. Returns …\n"],["gravity","TkTextMark","classes/TkTextMark.html#method-i-gravity","()",""],["gravity","TkTextMark","classes/TkTextMark.html#method-i-gravity","()",""],["gravity=","TkTextMark","classes/TkTextMark.html#method-i-gravity-3D","(direction)",""],["gravity=","TkTextMark","classes/TkTextMark.html#method-i-gravity-3D","(direction)",""],["great_job","RDoc::Stats","classes/RDoc/Stats.html#method-i-great_job","()","<p>A report that says you did a great job!\n"],["greeting","DQEntry","classes/DQEntry.html#method-i-greeting","()",""],["gregorian","Date","classes/Date.html#method-i-gregorian","()","<p>This method is equivalent to new_start(Date::GREGORIAN).\n"],["gregorian?","Date","classes/Date.html#method-i-gregorian-3F","()","<p>Retunrs true if the date is on or after the day of calendar reform.\n<p>For example:\n\n<pre><code>Date.new(1582,10,15).gregorian? ...</code></pre>\n"],["gregorian_leap?","Date","classes/Date.html#method-c-gregorian_leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Gregorian\ncalendar.\n<p>For example:\n\n<pre><code>Date.gregorian_leap?(1900) ...</code></pre>\n"],["grep","Enumerable","classes/Enumerable.html#method-i-grep","(p1)","<p>Returns an array of every element in <em>enum</em> for which <code>Pattern\n=== element</code>. If the optional <em>block</em> is supplied, …\n"],["grid","Tk::Wm","classes/Tk/Wm.html#method-c-grid","(win, *args)",""],["grid","TkGrid","classes/TkGrid.html#method-c-grid","(*args)",""],["grid","TkGrid","classes/TkGrid.html#method-c-grid","(*args)",""],["grid_cells","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-grid_cells","(xcrd, ycrd)",""],["grid_size","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-grid_size","(nxcells, nycells)",""],["gridline_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-gridline_cget","(option)",""],["gridline_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-gridline_cget_strict","(option)",""],["gridline_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-gridline_cget_tkstring","(option)",""],["gridline_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-gridline_configinfo","(slot=nil)",""],["gridline_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-gridline_configure","(slot, value=None)",""],["gridline_off","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-gridline_off","()",""],["gridline_on","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-gridline_on","()",""],["gridline_toggle","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-gridline_toggle","()",""],["group","Cal","classes/Cal.html#method-i-group","(xs, n)",""],["group","Etc","classes/Etc.html#method-c-group","()","<p>Provides a convenient Ruby iterator which executes a block for each entry\nin the /etc/group file.\n<p>The …\n"],["group","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-group","()","<p>Returns a constant <code>OpenSSL::EC::Group</code> that is tied to the key.\nModifying the returned group can make …\n"],["group","PrettyPrint","classes/PrettyPrint.html#method-i-group","(indent=0, open_obj='', close_obj='', open_width=open_obj.length, close_width=close_obj.length)","<p>Groups line break hints added in the block. The line break hints are all to\nbe used or not.\n<p>If <code>indent</code> …\n"],["group","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-group","(indent=nil, open_obj='', close_obj='', open_width=nil, close_width=nil)",""],["group","Thread","classes/Thread.html#method-i-group","()","<p>Returns the <code>ThreadGroup</code> which contains <em>thr</em>, or nil if\nthe thread is not a member of any group.\n\n<pre><code>Thread.main.group ...</code></pre>\n"],["group","Tk::Wm","classes/Tk/Wm.html#method-c-group","(win, leader = nil)",""],["group","Tk::Wm","classes/Tk/Wm.html#method-i-group","(leader = nil)",""],["group=","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-group-3D","(p1)","<p>Returns the same object passed, not the group object associated with the\nkey. If you wish to access the …\n"],["group_by","Enumerable","classes/Enumerable.html#method-i-group_by","()","<p>Returns a hash, which keys are evaluated result from the block, and values\nare arrays of elements in …\n"],["group_flag","TkEvent::Event","classes/TkEvent/Event.html#method-c-group_flag","(id)",""],["group_sub","PrettyPrint","classes/PrettyPrint.html#method-i-group_sub","()",""],["groups","Process","classes/Process.html#method-c-groups","()","<p>Get an <code>Array</code> of the gids of groups in the supplemental group\naccess list for this process.\n\n<pre><code>Process.groups ...</code></pre>\n"],["groups=","Process","classes/Process.html#method-c-groups-3D","(p1)","<p>Set the supplemental group access list to the given <code>Array</code> of\ngroup IDs.\n\n<pre><code>Process.groups   #=&gt; [0, 1, 2, ...\n</code></pre>\n"],["grpowned?","File","classes/File.html#method-c-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["grpowned?","File::Stat","classes/File/Stat.html#method-i-grpowned-3F","()","<p>Returns true if the effective group id of the process is the same as the\ngroup id of <em>stat</em>. On Windows …\n"],["grpowned?","FileTest","classes/FileTest.html#method-i-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["grpowned?","Pathname","classes/Pathname.html#method-i-grpowned-3F","()","<p>See <code>FileTest.grpowned?</code>.\n"],["gsub","Kernel","classes/Kernel.html#method-i-gsub","(*args)","<p>Equivalent to <code>$_.gsub...</code>, except that <code>$_</code> receives\nthe modified result. Available only when -p/-n command …\n"],["gsub","String","classes/String.html#method-i-gsub","(*args)","<p>Returns a copy of <em>str</em> with the <em>all</em> occurrences of\n<em>pattern</em> substituted for the second argument. The <em>pattern</em>\n…\n"],["gsub!","String","classes/String.html#method-i-gsub-21","(*args)","<p>Performs the substitutions of <code>String#gsub</code> in place, returning\n<em>str</em>, or <code>nil</code> if no substitutions were performed. …\n"],["guard_inspect_key","PP::PPMethods","classes/PP/PPMethods.html#method-i-guard_inspect_key","()",""],["guess","Kconv","classes/Kconv.html#method-c-guess","(str)","<p>Guess input encoding by NKF.guess\n"],["guess","NKF","classes/NKF.html#method-c-guess","(p1)","<p>Returns guessed encoding of <em>str</em> by nkf routine.\n"],["guess","OptionParser::Switch","classes/OptionParser/Switch.html#method-c-guess","(arg)","<p>Guesses argument style from <code>arg</code>.  Returns corresponding\nOptionParser::Switch class (OptionalArgument, …\n"],["guid","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-guid","()","<p>Returns GUID.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;)\nputs tobj.guid ...</code></pre>\n"],["guid","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-guid","()","<p>Returns guid string which specifies type library.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object ...</code></pre>\n"],["gunzip","Gem","classes/Gem.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gunzip_data","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-gunzip_data","(dat)",""],["gunzip_file","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-gunzip_file","(file, dat)",""],["gzip","Gem","classes/Gem.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip","Gem::Indexer","classes/Gem/Indexer.html#method-i-gzip","(filename)","<p>Zlib::GzipWriter wrapper that gzips <code>filename</code> on disk.\n"],["gzip_data","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-gzip_data","(dat)",""],["gzip_file","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-gzip_file","(file, dat)",""],["h","ERB::Util","classes/ERB/Util.html#method-c-h","(s)",""],["h","RSS::Utils","classes/RSS/Utils.html#method-i-h","(s)",""],["h20","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-h20","(y, f)",""],["handle","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-i-handle","(text, code_object = nil, &block)","<p>Look for directives in a chunk of <code>text</code>.\n<p>Options that we don&#39;t handle are yielded.  If the block returns …\n"],["handle","TkSelection","classes/TkSelection.html#method-c-handle","(win, func=Proc.new, keys=nil, &b)",""],["handle","TkSelection","classes/TkSelection.html#method-i-handle","(func=Proc.new, keys=nil, &b)",""],["handle","TkSelection","classes/TkSelection.html#method-c-handle","(win, func=Proc.new, keys=nil, &b)",""],["handle","TkSelection","classes/TkSelection.html#method-i-handle","(func=Proc.new, keys=nil, &b)",""],["handle_arguments","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-handle_arguments","(arg_list)","<p>Handle the command arguments.\n"],["handle_attr","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_attr","(var_name, attr_name, read, write)","<p>Creates a new RDoc::Attr <code>attr_name</code> on class\n<code>var_name</code> that is either <code>read</code>, <code>write</code>\nor both\n"],["handle_class_module","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_class_module","(var_name, type, class_name, parent, in_module)","<p>Creates a new RDoc::NormalClass or RDoc::NormalModule based on\n<code>type</code> named <code>class_name</code> in <code>parent</code>\nwhich …\n"],["handle_constants","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_constants","(type, var_name, const_name, definition)","<p>Adds constants.  By providing some_value: at the start of the comment you\ncan override the C value of …\n"],["handle_directive","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-i-handle_directive","(prefix, directive, param, code_object = nil, encoding = nil)",""],["handle_ifdefs_in","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_ifdefs_in","(body)","<p>Removes #ifdefs that would otherwise confuse us\n"],["handle_method","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_method","(type, var_name, meth_name, function, param_count, source_file = nil)","<p>Adds an RDoc::AnyMethod <code>meth_name</code> defined on a class or module\nassigned to <code>var_name</code>.  <code>type</code> is the type …\n"],["handle_options","Gem::Command","classes/Gem/Command.html#method-i-handle_options","(args)","<p>Handle the given list of arguments by parsing them and recording the\nresults.\n"],["handle_options","Rake::Application","classes/Rake/Application.html#method-i-handle_options","()","<p>Read and handle the command line options.\n"],["handle_options","Rake::Application","classes/Rake/Application.html#method-i-handle_options","()","<p>Read and handle the command line options.\n"],["handle_pipe","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-handle_pipe","()","<p>Turns RDoc from stdin into HTML\n"],["handle_singleton","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_singleton","(sclass_var, class_var)","<p>Registers a singleton class <code>sclass_var</code> as a singleton of\n<code>class_var</code>\n"],["handle_special_CROSSREF","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-handle_special_CROSSREF","(special)","<p>We&#39;re invoked when any text matches the CROSSREF pattern.  If we find\nthe corresponding reference, …\n"],["handle_special_HYPERLINK","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-handle_special_HYPERLINK","(special)","<p><code>special</code> is a potential link.  The following schemes are\nhandled:\n<p><code>mailto:</code> &mdash; Inserted as-is.\n<p><code>http:</code> &mdash; Links are …\n"],["handle_special_HYPERLINK","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-handle_special_HYPERLINK","(special)","<p>Handles <code>rdoc-ref:</code> scheme links and allows RDoc::Markup::ToHtml\nto handle other schemes.\n"],["handle_special_SUPPRESSED_CROSSREF","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-handle_special_SUPPRESSED_CROSSREF","(special)","<p>Removes preceding \\ from the suppressed crossref <code>special</code>\n"],["handle_special_TIDYLINK","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-handle_special_TIDYLINK","(special)","<p>This <code>special</code> is a link where the label is different from the\nURL <code>label[url]</code> or <code>{long label}[url]</code>\n"],["handle_tab_width","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_tab_width","(body)","<p>Normalizes tabs in <code>body</code>\n"],["handle_target","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-handle_target","(win, type, val=None)",""],["handler","DL::Importer","classes/DL/Importer.html#method-i-handler","()",""],["handler","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-handler","()","<p>returns handler object.\n"],["handler=","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-handler-3D","(p1)","<p>sets event handler object. If handler object has onXXX method according to\nXXX event, then onXXX method …\n"],["handlers","DL::CompositeHandler","classes/DL/CompositeHandler.html#method-i-handlers","()",""],["handles?","Gem::Command","classes/Gem/Command.html#method-i-handles-3F","(args)","<p>True if the command handles the given argument list.\n"],["hasChildNodes","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXMLDOMText","classes/IXMLDOMText.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","IXTLRuntime","classes/IXTLRuntime.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-hasChildNodes","()","<p>BOOL hasChildNodes\n"],["hasChildNodes","NQXML::Node","classes/NQXML/Node.html#method-i-hasChildNodes","()",""],["hasFeature","IXMLDOMImplementation","classes/IXMLDOMImplementation.html#method-i-hasFeature","(arg0, arg1)","<p>BOOL hasFeature\n\n<pre><code>BSTR arg0 --- feature [IN]\nBSTR arg1 --- version [IN]</code></pre>\n"],["has_attributes?","REXML::Element","classes/REXML/Element.html#method-i-has_attributes-3F","()","<p>Evaluates to <code>true</code> if this element has any attributes set,\nfalse otherwise.\n"],["has_changed","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-has_changed","(win, option, pvalue)",""],["has_colors?","Curses","classes/Curses.html#method-c-has_colors-3F","()","<p>Returns <code>true</code> or <code>false</code> depending on whether the\nterminal has color capbilities.\n"],["has_elements?","REXML::Element","classes/REXML/Element.html#method-i-has_elements-3F","()","<p>Evaluates to <code>true</code> if this element has at least one child\nElement\n\n<pre><code>doc = Document.new &quot;&lt;a&gt;&lt;b/&gt;&lt;c&gt;Text&lt;/c&gt;&lt;/a&gt;&quot; ...</code></pre>\n"],["has_expires?","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-has_expires-3F","()","<p><code>true</code> if the TupleBag to see if it has any expired entries.\n"],["has_key?","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-has_key-3F","(*args)","<p>Returns true if a given query string parameter exists.\n"],["has_key?","DBM","classes/DBM.html#method-i-has_key-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["has_key?","ENV","classes/ENV.html#method-c-has_key-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["has_key?","GDBM","classes/GDBM.html#method-i-has_key-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["has_key?","Hash","classes/Hash.html#method-i-has_key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_key?(&quot;a&quot;)   #=&gt; ...\n</code></pre>\n"],["has_key?","SDBM","classes/SDBM.html#method-i-has_key-3F","(p1)",""],["has_key?","Syck::Omap","classes/Syck/Omap.html#method-i-has_key-3F","( k )",""],["has_key?","Syck::Pairs","classes/Syck/Pairs.html#method-i-has_key-3F","( k )",""],["has_mainwindow?","MultiTkIp","classes/MultiTkIp.html#method-i-has_mainwindow-3F","()",""],["has_mainwindow?","MultiTkIp","classes/MultiTkIp.html#method-i-has_mainwindow-3F","()",""],["has_mainwindow?","MultiTkIp","classes/MultiTkIp.html#method-i-has_mainwindow-3F","()",""],["has_mainwindow?","MultiTkIp","classes/MultiTkIp.html#method-i-has_mainwindow-3F","()",""],["has_mainwindow?","RemoteTkIp","classes/RemoteTkIp.html#method-i-has_mainwindow-3F","()",""],["has_mainwindow?","TclTkIp","classes/TclTkIp.html#method-i-has_mainwindow-3F","()",""],["has_name?","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-has_name-3F","( name, namespace = '' )",""],["has_name?","REXML::Namespace","classes/REXML/Namespace.html#method-i-has_name-3F","( other, ns=nil )","<p>Compares names optionally WITH namespaces\n"],["has_next?","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-has_next-3F","()","<p>Returns true if there are more events.  Synonymous with !empty?\n"],["has_rdoc","Gem::Specification","classes/Gem/Specification.html#method-i-has_rdoc","()","<p>Deprecated and ignored, defaults to true.\n<p>Formerly used to indicate this gem was RDoc-capable.\n"],["has_rdoc=","Gem::Specification","classes/Gem/Specification.html#method-i-has_rdoc-3D","(ignored)","<p>Deprecated and ignored.\n<p>Formerly used to indicate this gem was RDoc-capable.\n"],["has_rdoc?","Gem::Specification","classes/Gem/Specification.html#method-i-has_rdoc-3F","()",""],["has_text?","REXML::Element","classes/REXML/Element.html#method-i-has_text-3F","()","<p>Evaluates to <code>true</code> if this element has at least one Text child\n"],["has_unit_tests?","Gem::Specification","classes/Gem/Specification.html#method-i-has_unit_tests-3F","()","<p>True if this gem has files in test_files\n"],["has_value?","DBM","classes/DBM.html#method-i-has_value-3F","(p1)","<p>Returns true if the database contains the specified string value, false\notherwise.\n"],["has_value?","ENV","classes/ENV.html#method-c-has_value-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>value</code>.\n"],["has_value?","GDBM","classes/GDBM.html#method-i-has_value-3F","(p1)","<p>Returns true if the given value <em>v</em> exists within the database.\nReturns false otherwise.\n"],["has_value?","Hash","classes/Hash.html#method-i-has_value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_value?(100) ...\n</code></pre>\n"],["has_value?","SDBM","classes/SDBM.html#method-i-has_value-3F","(p1)",""],["has_value?","YAML::DBM","classes/YAML/DBM.html#method-i-has_value-3F","( val )","<p>Returns true if specified value is found in the database.\n"],["hash","Action","classes/Action.html#method-i-hash","()",""],["hash","Array","classes/Array.html#method-i-hash","()","<p>Compute a hash-code for this array. Two arrays with the same content will\nhave the same hash code (and …\n"],["hash","BigDecimal","classes/BigDecimal.html#method-i-hash","()",""],["hash","Bignum","classes/Bignum.html#method-i-hash","()","<p>Compute a hash based on the value of <em>big</em>.\n"],["hash","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-hash","()",""],["hash","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-hash","()",""],["hash","Float","classes/Float.html#method-i-hash","()","<p>Returns a hash code for this float.\n"],["hash","Hash","classes/Hash.html#method-i-hash","()","<p>Compute a hash-code for this hash. Two hashes with the same content will\nhave the same hash code (and …\n"],["hash","IPAddr","classes/IPAddr.html#method-i-hash","()","<p>Returns a hash value used by Hash, Set, and Array classes\n"],["hash","MatchData","classes/MatchData.html#method-i-hash","()","<p>Produce a hash based on the target string, regexp and matched positions of\nthis matchdata.\n"],["hash","Matrix","classes/Matrix.html#method-i-hash","()","<p>Returns a hash-code for the matrix.\n"],["hash","Method","classes/Method.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n"],["hash","Object","classes/Object.html#method-i-hash","()","<p>Generates a <code>Fixnum</code> hash value for this object. This function\nmust have the property that a.eql?(b) implies …\n"],["hash","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-hash","()","<p>The hash value returned is suitable for use as a certificate&#39;s filename\nin a CA path.\n"],["hash","Proc","classes/Proc.html#method-i-hash","()","<p>Returns a hash value corresponding to proc body.\n"],["hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-hash","()","<p>An RDoc::TopLevel has the same hash as another with the same absolute_name\n"],["hash","REXML::Attribute","classes/REXML/Attribute.html#method-i-hash","()","<p>Creates (and returns) a hash from both the name and value\n"],["hash","Range","classes/Range.html#method-i-hash","()","<p>Generate a hash value such that two ranges with the same start and end\npoints, and the same value for …\n"],["hash","Regexp","classes/Regexp.html#method-i-hash","()","<p>Produce a hash based on the text and options of this regular expression.\n"],["hash","String","classes/String.html#method-i-hash","()","<p>Return a hash based on the string&#39;s length and content.\n"],["hash","Struct","classes/Struct.html#method-i-hash","()","<p>Return a hash value based on this struct&#39;s contents.\n"],["hash","Time","classes/Time.html#method-i-hash","()","<p>Return a hash code for this time object.\n"],["hash","URI::Generic","classes/URI/Generic.html#method-i-hash","()",""],["hash","UnboundMethod","classes/UnboundMethod.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n"],["hash","Vector","classes/Vector.html#method-i-hash","()","<p>Return a hash-code for the vector.\n"],["hash_dir","CHashDir","classes/CHashDir.html#method-i-hash_dir","(silent = false)",""],["hash_kv","TkUtil","classes/TkUtil.html#method-i-hash_kv","(*args)",""],["hash_kv","TkUtil","classes/TkUtil.html#method-c-hash_kv","(*args)",""],["hash_old","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-hash_old","()","<p>hash_old returns MD5 based hash used in OpenSSL 0.9.X.\n"],["have_author?","RSS::Atom::Entry","classes/RSS/Atom/Entry.html#method-i-have_author-3F","()",""],["have_author?","RSS::Atom::Feed","classes/RSS/Atom/Feed.html#method-i-have_author-3F","()",""],["have_author?","RSS::Atom::Feed::Entry","classes/RSS/Atom/Feed/Entry.html#method-i-have_author-3F","(check_parent=true)",""],["have_author?","RSS::Atom::Feed::Entry::Source","classes/RSS/Atom/Feed/Entry/Source.html#method-i-have_author-3F","()",""],["have_children_elements","RSS::Element","classes/RSS/Element.html#method-i-have_children_elements","()",""],["have_const","Object","classes/Object.html#method-i-have_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.  You may\noptionally pass the <code>type</code> of <code>const</code> as  …\n"],["have_content?","RSS::Element","classes/RSS/Element.html#method-i-have_content-3F","()",""],["have_framework","Object","classes/Object.html#method-i-have_framework","(fw, &b)","<p>Returns whether or not the given <code>framework</code> can be found on\nyour system. If found, a macro is passed as …\n"],["have_func","Object","classes/Object.html#method-i-have_func","(func, headers = nil, opt = \"\", &b)",""],["have_header","Object","classes/Object.html#method-i-have_header","(header, preheaders = nil, opt = \"\", &b)",""],["have_library","Object","classes/Object.html#method-i-have_library","(lib, func = nil, headers = nil, opt = \"\", &b)",""],["have_libvar","Object","classes/Object.html#method-i-have_libvar","(var, headers = nil, opt = \"\", &b)","<p>END BACKPORTED FROM 2.0\n"],["have_macro","Object","classes/Object.html#method-i-have_macro","(macro, headers = nil, opt = \"\", &b)","<p>Returns whether or not <code>macro</code> is defined either in the common\nheader files or within any <code>headers</code> you provide. …\n"],["have_rakefile","Rake::Application","classes/Rake/Application.html#method-i-have_rakefile","()","<p>True if one of the files in RAKEFILES is in the current directory. If a\nmatch is found, it is copied …\n"],["have_rakefile","Rake::Application","classes/Rake/Application.html#method-i-have_rakefile","()","<p>True if one of the files in RAKEFILES is in the current directory. If a\nmatch is found, it is copied …\n"],["have_readline_func","Object","classes/Object.html#method-i-have_readline_func","(func)",""],["have_readline_header","Object","classes/Object.html#method-i-have_readline_header","(header)",""],["have_readline_macro","Object","classes/Object.html#method-i-have_readline_macro","(macro)",""],["have_readline_var","Object","classes/Object.html#method-i-have_readline_var","(var)",""],["have_required_elements?","RSS::Element","classes/RSS/Element.html#method-i-have_required_elements-3F","()",""],["have_required_values?","RSS::Maker::Atom::Feed::Channel","classes/RSS/Maker/Atom/Feed/Channel.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::Atom::Feed::Items::Item","classes/RSS/Maker/Atom/Feed/Items/Item.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ImageFaviconModel::ImageFaviconBase","classes/RSS/Maker/ImageFaviconModel/ImageFaviconBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ImageItemModel::ImageItemBase","classes/RSS/Maker/ImageItemModel/ImageItemBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::RSS10::Image","classes/RSS/Maker/RSS10/Image.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::RSS10::Textinput","classes/RSS/Maker/RSS10/Textinput.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase::TaxonomyTopicBase","classes/RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase/TaxonomyTopicBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","classes/RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html#method-i-have_required_values-3F","()",""],["have_struct_member","Object","classes/Object.html#method-i-have_struct_member","(type, member, headers = nil, &b)","<p>Returns whether or not the struct of type <code>type</code> contains\n<code>member</code>.  If it does not, or the struct type can&#39;t …\n"],["have_type","Object","classes/Object.html#method-i-have_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.  You\nmay optionally pass additional <code>headers</code> to …\n"],["have_var","Object","classes/Object.html#method-i-have_var","(var, headers = nil, opt = \"\", &b)",""],["have_xml_content?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-have_xml_content-3F","()",""],["have_xml_content?","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-i-have_xml_content-3F","()",""],["have_xml_content?","RSS::Element","classes/RSS/Element.html#method-i-have_xml_content-3F","()",""],["head","Net::HTTP","classes/Net/HTTP.html#method-i-head","(path, initheader = nil)","<p>Gets only the header from <code>path</code> on the connected-to host.\n<code>header</code> is a Hash like { &#39;Accept&#39; =&gt; …\n"],["head","Net::HTTP","classes/Net/HTTP.html#method-i-head","(path, initheader = nil)","<p>Gets only the header from <code>path</code> on the connected-to host.\n<code>header</code> is a Hash like { &#39;Accept&#39; =&gt; …\n"],["head2","Net::HTTP","classes/Net/HTTP.html#method-i-head2","(path, initheader = nil, &block)",""],["head2","Net::HTTP","classes/Net/HTTP.html#method-i-head2","(path, initheader = nil, &block)",""],["header","CGI","classes/CGI.html#method-i-header","(options='text/html')","<p>Create an HTTP header block as a string.\n<p>Includes the empty line that ends the header block.\n<p><code>content_type_string</code> … &mdash; "],["header","Mail","classes/Mail.html#method-i-header","()",""],["header","Net::POPMail","classes/Net/POPMail.html#method-i-header","(dest = '')","<p>Fetches the message header.\n<p>The optional <code>dest</code> argument is obsolete.\n<p>This method raises a POPError if an …\n"],["header","Object","classes/Object.html#method-i-header","(params)",""],["header?","CSV::Row","classes/CSV/Row.html#method-i-header-3F","(name)","<p>Returns <code>true</code> if <code>name</code> is a header for this row,\nand <code>false</code> otherwise.\n"],["header_convert","CSV","classes/CSV.html#method-i-header_convert","(name = nil, &converter)","<p>Identical to CSV#convert(), but for header rows.\n<p>Note that this method must be called before header rows …\n"],["header_converters","CSV","classes/CSV.html#method-i-header_converters","()","<p>Returns the current list of converters in effect for headers.  See CSV::new\nfor details.  Built-in converters …\n"],["header_row?","CSV","classes/CSV.html#method-i-header_row-3F","()","<p>Returns <code>true</code> if the next row read will be a header row.\n"],["header_row?","CSV::Row","classes/CSV/Row.html#method-i-header_row-3F","()","<p>Returns <code>true</code> if this is a header row.\n"],["headers","CSV","classes/CSV.html#method-i-headers","()","<p>Returns <code>nil</code> if headers will not be used, <code>true</code> if\nthey will but have not yet been read, or the actual …\n"],["headers","CSV::Row","classes/CSV/Row.html#method-i-headers","()","<p>Returns the headers of this row.\n"],["headers","CSV::Table","classes/CSV/Table.html#method-i-headers","()","<p>Returns the headers for the first row of this table (assumed to match all\nother rows).  An empty Array …\n"],["headers=","URI::MailTo","classes/URI/MailTo.html#method-i-headers-3D","(v)","<p>setter for headers <code>v</code>\n"],["heading_cget","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-heading_cget","(tagOrId, option)",""],["heading_cget_strict","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-heading_cget_strict","(tagOrId, option)",""],["heading_cget_tkstring","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-heading_cget_tkstring","(tagOrId, option)",""],["heading_configinfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-heading_configinfo","(tagOrId, slot=nil)",""],["heading_configure","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-heading_configure","(tagOrId, slot, value=None)",""],["headingcget","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-headingcget","(tagOrId, option)",""],["headingcget_strict","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-headingcget_strict","(tagOrId, option)",""],["headingcget_tkstring","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-headingcget_tkstring","(tagOrId, option)","<p>Treeview Heading\n"],["headingconfiginfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-headingconfiginfo","(tagOrId, slot=nil)",""],["headingconfigure","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-headingconfigure","(tagOrId, slot, value=None)",""],["height","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-height","()",""],["height","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-c-height","(name)",""],["height","Tk::TkTable","classes/Tk/TkTable.html#method-i-height","(row)",""],["height","TkImage","classes/TkImage.html#method-i-height","()",""],["height","TkWinfo","classes/TkWinfo.html#method-c-height","(win)",""],["height","TkWinfo","classes/TkWinfo.html#method-c-height","(win)",""],["height_list","Tk::TkTable","classes/Tk/TkTable.html#method-i-height_list","()",""],["hello","DRbEx","classes/DRbEx.html#method-i-hello","()",""],["hello","Foo","classes/Foo.html#method-i-hello","(it)",""],["hello","HelloWorld","classes/HelloWorld.html#method-i-hello","(name)",""],["helo","Net::SMTP","classes/Net/SMTP.html#method-i-helo","(domain)",""],["helo","Net::SMTP","classes/Net/SMTP.html#method-i-helo","(domain)",""],["help","Net::FTP","classes/Net/FTP.html#method-i-help","(arg = nil)","<p>Issues the HELP command.\n"],["help","Object","classes/Object.html#method-i-help","()","<p>Display help message.\n\n<pre><code>ruby -run -e help [COMMAND]</code></pre>\n"],["help","OptionParser","classes/OptionParser.html#method-i-help","()","<p>Returns option summary string.\n"],["helpButton1","Object","classes/Object.html#method-i-helpButton1","(w, x, y)",""],["helpLeave1","Object","classes/Object.html#method-i-helpLeave1","(w, x, y)",""],["helpMotion","Object","classes/Object.html#method-i-helpMotion","(w, x, y)",""],["helpMotion1","Object","classes/Object.html#method-i-helpMotion1","(w, x, y)",""],["helpMotion2","Object","classes/Object.html#method-i-helpMotion2","(w, x, y)","<p>Alternate implementation doesn&#39;t rely on mouseover state\n"],["helpRelease1","Object","classes/Object.html#method-i-helpRelease1","(w, x, y)",""],["help_msg","Object","classes/Object.html#method-i-help_msg","()",""],["helpcontext","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-helpcontext","()","<p>Returns help context.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;)\nmethod ...</code></pre>\n"],["helpcontext","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-helpcontext","()","<p>Returns helpcontext. If helpcontext is not found, then returns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["helpfile","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-helpfile","()","<p>Returns help file. If help file is not found, then the method returns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["helpfile","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-helpfile","()","<p>Returns helpfile path. If helpfile is not found, then returns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["helpstring","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-helpstring","()","<p>Returns help string of OLE method. If the help string is not found, then\nthe method returns nil.\n\n<pre><code>tobj ...</code></pre>\n"],["helpstring","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-helpstring","()","<p>Returns help string.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Internet Controls&#39;, &#39;IWebBrowser&#39;)\nputs tobj.helpstring ...</code></pre>\n"],["here?","DRb","classes/DRb.html#method-c-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-here-3F","(uri)",""],["hermitian?","Matrix","classes/Matrix.html#method-i-hermitian-3F","()","<p>Returns <code>true</code> is this is an hermitian matrix. Raises an error\nif matrix is not square.\n"],["hex","SecureRandom","classes/SecureRandom.html#method-c-hex","(n=nil)","<p>SecureRandom.hex generates a random hex string.\n<p>The argument <em>n</em> specifies the length of the random length. …\n"],["hex","String","classes/String.html#method-i-hex","()","<p>Treats leading characters from <em>str</em> as a string of hexadecimal\ndigits (with an optional sign and an optional …\n"],["hexdigest","Digest::Class","classes/Digest/Class.html#method-c-hexdigest","(*args)","<p>Returns the hex-encoded hash value of a given <em>string</em>.  This is\nalmost equivalent to Digest.hexencode …\n"],["hexdigest","Digest::Instance","classes/Digest/Instance.html#method-i-hexdigest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest in a\nhex-encoded form, keeping the digest&#39;s …\n"],["hexdigest","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-c-hexdigest","(p1, p2, p3)",""],["hexdigest","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-hexdigest","()",""],["hexdigest!","Digest::Instance","classes/Digest/Instance.html#method-i-hexdigest-21","()","<p>Returns the resulting hash value in a hex-encoded form and resets the\ndigest to the initial state.\n"],["hexencode","Digest","classes/Digest.html#method-c-hexencode","(p1)","<p>Generates a hex-encoded version of a given <em>string</em>.\n"],["hi","JISX0208::Char","classes/JISX0208/Char.html#method-i-hi","()",""],["hi_function","Object","classes/Object.html#method-i-hi_function","(num)",""],["hidden","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-hidden","(name = \"\", value = nil)","<p>Generate a Hidden Input element as a string.\n<p>The attributes of the element can be specified as two arguments, …\n"],["hidden?","Tk::TkTable","classes/Tk/TkTable.html#method-i-hidden-3F","(idx, *args)",""],["hidden_cmds","MultiTkIp","classes/MultiTkIp.html#method-c-hidden_cmds","(slave = '')",""],["hidden_cmds","MultiTkIp","classes/MultiTkIp.html#method-i-hidden_cmds","(slave = '')",""],["hidden_cmds","MultiTkIp","classes/MultiTkIp.html#method-i-hidden_cmds","(slave = '')",""],["hidden_cmds","MultiTkIp","classes/MultiTkIp.html#method-i-hidden_cmds","(slave = '')",""],["hidden_cmds","MultiTkIp","classes/MultiTkIp.html#method-c-hidden_cmds","(slave = '')",""],["hidden_cmds","MultiTkIp","classes/MultiTkIp.html#method-c-hidden_cmds","(slave = '')",""],["hidden_cmds","MultiTkIp","classes/MultiTkIp.html#method-i-hidden_cmds","(slave = '')",""],["hidden_cmds","MultiTkIp","classes/MultiTkIp.html#method-c-hidden_cmds","(slave = '')",""],["hidden_list","Tk::TkTable","classes/Tk/TkTable.html#method-i-hidden_list","()",""],["hide","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-hide","(*tags)",""],["hide","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-hide","()",""],["hide","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-hide","(idx)",""],["hide","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-hide","(idx)",""],["hide","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-hide","(idx)",""],["hide","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-hide","(name)",""],["hide","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-i-hide","()",""],["hide","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-i-hide","()",""],["hide","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-hide","(idx)",""],["hide","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-hide","(idx)",""],["hide","TkConsole","classes/TkConsole.html#method-c-hide","()",""],["hide","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-hide","()",""],["hide_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-hide_cmd","(slave, cmd, aliasname = nil)",""],["hide_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-hide_cmd","(slave, cmd, aliasname = nil)",""],["hide_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-hide_cmd","(slave, cmd, aliasname = nil)",""],["hide_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-hide_cmd","(slave, cmd, aliasname = nil)",""],["hide_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-hide_cmd","(slave, cmd, aliasname = nil)",""],["hide_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-hide_cmd","(slave, cmd, aliasname = nil)",""],["hide_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-hide_cmd","(slave, cmd, aliasname = nil)",""],["hide_cmd","MultiTkIp","classes/MultiTkIp.html#method-c-hide_cmd","(slave, cmd, aliasname = nil)",""],["hide_each_hscr","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-hide_each_hscr","()",""],["hide_each_hscr","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-hide_each_hscr","()",""],["hide_names","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-hide_names","()",""],["hide_topic","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-hide_topic","()",""],["hide_win_hscr","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-hide_win_hscr","()",""],["hide_win_hscr","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-hide_win_hscr","()",""],["hierarchical?","URI::Generic","classes/URI/Generic.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path\n"],["hierarchical?","URI::LDAP","classes/URI/LDAP.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path For URI::LDAP this will return <code>false</code>\n"],["highlight","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-highlight","(index)",""],["highlight","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-highlight","(*args)",""],["history_add","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-i-history_add","(text)",""],["history_clear","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-i-history_clear","()",""],["history_configinfo","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-i-history_configinfo","(opt)",""],["history_configure","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-i-history_configure","(opt, value)",""],["history_file","IRB::Context","classes/IRB/Context.html#method-i-history_file","()",""],["history_file=","IRB::Context","classes/IRB/Context.html#method-i-history_file-3D","(hist)",""],["history_get","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-i-history_get","()",""],["history_remove","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-i-history_remove","()",""],["hold","Tk::BLT::Busy","classes/Tk/BLT/Busy.html#method-i-hold","(win, keys={})",""],["hold","Tk::Busy","classes/Tk/Busy.html#method-i-hold","(win, keys={})",""],["home","Dir","classes/Dir.html#method-c-home","(p1 = v1)","<p>Returns the home directory of the current user or the named user if given.\n"],["home_workspace","IRB::Context","classes/IRB/Context.html#method-i-home_workspace","()",""],["hook_add","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-hook_add","(type, *args, &blk)",""],["hook_hscroll_off","TkTextFrame","classes/TkTextFrame.html#method-i-hook_hscroll_off","(wrap_mode)",""],["hook_hscroll_on","TkTextFrame","classes/TkTextFrame.html#method-i-hook_hscroll_on","(wrap_mode=nil)","<p>def component_delegates; end private :component_delegates\n"],["hook_list","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-hook_list","(type)",""],["hook_remove","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-hook_remove","(type, cmd)",""],["hook_run","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-hook_run","(type, *cmd_args)",""],["host","Gem","classes/Gem.html#method-c-host","()","<p>Get the default RubyGems API host. This is normally\n<code>https://rubygems.org</code>.\n"],["host","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-host","()","<p>The host this request is for\n"],["host=","Gem","classes/Gem.html#method-c-host-3D","(host)","<p>Set the default RubyGems API host.\n"],["host=","URI::Generic","classes/URI/Generic.html#method-i-host-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["hostname","URI::Generic","classes/URI/Generic.html#method-i-hostname","()","<p>extract the host part of the URI and unwrap brackets for IPv6 addresses.\n<p>This method is same as URI::Generic#host …\n"],["hostname=","URI::Generic","classes/URI/Generic.html#method-i-hostname-3D","(v)","<p>set the host part of the URI as the argument with brackets for IPv6\naddresses.\n<p>This method is same as …\n"],["hour","Time","classes/Time.html#method-i-hour","()","<p>Returns the hour of the day (0..23) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:26:20 -0600\nt.hour     ...\n</code></pre>\n"],["hour=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-hour-3D","(hour)",""],["hour=","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-hour-3D","(hour)",""],["hour=","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-hour-3D","(value)",""],["href","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-href","(x, y)",""],["href=","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-i-href-3D","(value)",""],["href_binding","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-href_binding","(w, x, y)","<p>This binding fires when there is a click on a hyperlink\n"],["hscroll","Tk::RbWidget::ScrollFrame","classes/Tk/RbWidget/ScrollFrame.html#method-i-hscroll","(mode)","<p>horizontal scrollbar : ON/OFF\n"],["hscroll","Tk::ScrollbarComposite","classes/Tk/ScrollbarComposite.html#method-i-hscroll","(mode, *args)","<p>horizontal scrollbar : ON/OFF\n"],["hscroll","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-hscroll","(scr)",""],["hscroll","Tk::Tcllib::Plotchart::Timechart","classes/Tk/Tcllib/Plotchart/Timechart.html#method-i-hscroll","(scr)",""],["hscroll","TkTextFrame","classes/TkTextFrame.html#method-i-hscroll","(mode, wrap_mode=\"char\")",""],["hscroll=","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-hscroll-3D","(scr)",""],["hscroll=","Tk::Tcllib::Plotchart::Timechart","classes/Tk/Tcllib/Plotchart/Timechart.html#method-i-hscroll-3D","(scr)",""],["html","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-html","(attributes = {})","<p>Generate a top-level HTML element as a string.\n<p>The attributes of the element are specified as a hash. …\n"],["html_escape","ERB::Util","classes/ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters in <em>s</em>.\n\n<pre><code>require &quot;erb&quot;\ninclude ERB::Util\n\nputs html_escape(&quot;is ...\n</code></pre>\n"],["html_escape","RSS::Utils","classes/RSS/Utils.html#method-i-html_escape","(s)","<p>escape &#39;&amp;&#39;, &#39;“&#39;, &#39;&lt;&#39; and &#39;&gt;&#39; for\nuse in HTML.\n"],["html_list_name","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-html_list_name","(list_type, open_tag)","<p>Determines the HTML list element for <code>list_type</code> and\n<code>open_tag</code>\n"],["html_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-html_name","()","<p>HTML id-friendly version of <code>#new_name</code>.\n"],["html_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-html_name","()","<p>HTML id-friendly method/attribute name\n"],["html_text","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-html_text","(first, last)",""],["htmlclip","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-htmlclip","()",""],["hton","IPAddr","classes/IPAddr.html#method-i-hton","()","<p>Returns a network byte ordered string form of the IP address.\n"],["http_default_port","Net::HTTP","classes/Net/HTTP.html#method-c-http_default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["http_default_port","Net::HTTP","classes/Net/HTTP.html#method-c-http_default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["http_url","RDoc::Context","classes/RDoc/Context.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["http_url","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["httpd","Object","classes/Object.html#method-i-httpd","()","<p>Run WEBrick HTTP server.\n\n<pre><code>ruby -run -e httpd -- [OPTION] DocumentRoot\n\n--bind-address=ADDR         address ...</code></pre>\n"],["httpdate","Date","classes/Date.html#method-i-httpdate","()","<p>This method is equivalent to strftime(&#39;%a, %d %b %Y %T GMT&#39;). See\nalso RFC 2616.\n"],["httpdate","Date","classes/Date.html#method-c-httpdate","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some RFC\n2616 format.\n<p>For example:\n\n<pre><code>Date.httpdate(&#39;Sat, ...</code></pre>\n"],["httpdate","DateTime","classes/DateTime.html#method-c-httpdate","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some RFC\n2616 format.\n<p>For example:\n\n<pre><code>DateTime.httpdate(&#39;Sat, ...</code></pre>\n"],["httpdate","Time","classes/Time.html#method-i-httpdate","(date)","<p>Parses <code>date</code> as HTTP-date defined by RFC 2616 and converts it\nto a Time object.\n<p>ArgumentError is raised …\n"],["https?","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-https-3F","(uri)",""],["https_default_port","Net::HTTP","classes/Net/HTTP.html#method-c-https_default_port","()","<p>The default port to use for HTTPS requests; defaults to 443.\n"],["https_default_port","Net::HTTP","classes/Net/HTTP.html#method-c-https_default_port","()","<p>The default port to use for HTTPS requests; defaults to 443.\n"],["hyper_cmd","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-hyper_cmd","(*args)",""],["hypot","Math","classes/Math.html#method-c-hypot","(p1, p2)","<p>Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with\nsides <em>x</em> and <em>y</em>.\n\n<pre><code>Math.hypot(3, ...</code></pre>\n"],["i","Numeric","classes/Numeric.html#method-i-i","()","<p>Returns the corresponding imaginary number. Not available for complex\nnumbers.\n"],["iMovieButton1","Object","classes/Object.html#method-i-iMovieButton1","(w, x, y)",""],["iPIMethods","XMLRPC","classes/XMLRPC.html#method-c-iPIMethods","(prefix)","<p>short-cut for creating a PublicInstanceMethodsInterface\n"],["i_move","Tk::Canvas","classes/Tk/Canvas.html#method-i-i_move","(tagOrId, idx, x, y)",""],["i_move","TkcTagAccess","classes/TkcTagAccess.html#method-i-i_move","(idx, x, y)",""],["icon_info","Tk::Winico","classes/Tk/Winico.html#method-c-icon_info","(id)",""],["iconbitmap","Tk::Wm","classes/Tk/Wm.html#method-i-iconbitmap","(bmp=nil)",""],["iconbitmap","Tk::Wm","classes/Tk/Wm.html#method-c-iconbitmap","(win, bmp=nil)",""],["iconify","Tk::Wm","classes/Tk/Wm.html#method-c-iconify","(win, ex = true)",""],["iconify","Tk::Wm","classes/Tk/Wm.html#method-i-iconify","(ex = true)",""],["iconmask","Tk::Wm","classes/Tk/Wm.html#method-i-iconmask","(bmp=nil)",""],["iconmask","Tk::Wm","classes/Tk/Wm.html#method-c-iconmask","(win, bmp=nil)",""],["iconname","Tk::Wm","classes/Tk/Wm.html#method-i-iconname","(name=nil)",""],["iconname","Tk::Wm","classes/Tk/Wm.html#method-c-iconname","(win, name=nil)",""],["iconphoto","Tk::Wm","classes/Tk/Wm.html#method-c-iconphoto","(win, *imgs)",""],["iconphoto","Tk::Wm","classes/Tk/Wm.html#method-i-iconphoto","(*imgs)",""],["iconphoto_default","Tk::Wm","classes/Tk/Wm.html#method-i-iconphoto_default","(*imgs)",""],["iconphoto_default","Tk::Wm","classes/Tk/Wm.html#method-c-iconphoto_default","(win, *imgs)",""],["iconposition","Tk::Wm","classes/Tk/Wm.html#method-i-iconposition","(*args)",""],["iconposition","Tk::Wm","classes/Tk/Wm.html#method-c-iconposition","(win, *args)",""],["icons","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-icons","(file, keys=nil)",""],["iconv","Iconv","classes/Iconv.html#method-c-iconv","(*args)","<p>Shorthand for\n\n<pre><code>Iconv.open(to, from) { |cd|\n  (strs + [nil]).collect { |s| cd.iconv(s) }\n}\n</code></pre>\n<p>Parameters\n"],["iconv","Iconv","classes/Iconv.html#method-i-iconv","(p1, p2 = v2, p3 = v3)","<p>Converts string and returns the result.\n<p>If <code>str</code> is a String, converts <code>str[start, length]</code>\nand returns the …\n"],["iconv","JSON","classes/JSON.html#method-c-iconv","(to, from, string)","<p>Encodes string using Ruby&#39;s <em>String.encode</em>\n"],["iconwindow","Tk::Wm","classes/Tk/Wm.html#method-i-iconwindow","(iconwin = nil)",""],["iconwindow","Tk::Wm","classes/Tk/Wm.html#method-c-iconwindow","(win, iconwin = nil)",""],["icursor","Tk::BWidget::ComboBox","classes/Tk/BWidget/ComboBox.html#method-i-icursor","(idx)",""],["icursor","Tk::Canvas","classes/Tk/Canvas.html#method-i-icursor","(tagOrId, index)",""],["icursor","Tk::Entry","classes/Tk/Entry.html#method-i-icursor","()",""],["icursor","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-icursor","(index)",""],["icursor","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-icursor","(index)",""],["icursor","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-icursor","(tagOrId, index)",""],["icursor","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-icursor","(index)",""],["icursor","Tk::TkTable","classes/Tk/TkTable.html#method-i-icursor","()",""],["icursor","TkcTagAccess","classes/TkcTagAccess.html#method-i-icursor","(index)",""],["icursor=","Tk::Entry","classes/Tk/Entry.html#method-i-icursor-3D","(index)",""],["icursor_set","Tk::TkTable","classes/Tk/TkTable.html#method-i-icursor_set","(idx)",""],["id","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-id","()",""],["id","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-id","()","<p>Returns the Session ID.\n"],["id","REXML::Functions","classes/REXML/Functions.html#method-c-id","( object )","<p>Since REXML is non-validating, this method is not implemented as it\nrequires a DTD\n"],["id","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-id","()",""],["id","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-id","()",""],["id","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-id","()",""],["id","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-id","()",""],["id","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-id","()",""],["id","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-id","()",""],["id","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-id","()",""],["id","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-id","()",""],["id","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-id","()",""],["id","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-i-id","()",""],["id","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-id","()",""],["id","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-id","()",""],["id","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-id","()",""],["id","Tk::Winico","classes/Tk/Winico.html#method-i-id","()",""],["id","TkFont","classes/TkFont.html#method-i-id","()",""],["id","TkFont","classes/TkFont.html#method-i-id","()",""],["id","TkTextImage","classes/TkTextImage.html#method-i-id","()",""],["id","TkTextImage","classes/TkTextImage.html#method-i-id","()",""],["id","TkTextMark","classes/TkTextMark.html#method-i-id","()",""],["id","TkTextMark","classes/TkTextMark.html#method-i-id","()",""],["id","TkTextTag","classes/TkTextTag.html#method-i-id","()",""],["id","TkTextTag","classes/TkTextTag.html#method-i-id","()",""],["id","TkTextWindow","classes/TkTextWindow.html#method-i-id","()",""],["id","TkTextWindow","classes/TkTextWindow.html#method-i-id","()",""],["id","TkVariable","classes/TkVariable.html#method-i-id","()",""],["id","TkVariable","classes/TkVariable.html#method-i-id","()",""],["id","TkWinfo","classes/TkWinfo.html#method-c-id","(win)",""],["id","TkWinfo","classes/TkWinfo.html#method-c-id","(win)",""],["id","TkcItem","classes/TkcItem.html#method-i-id","()",""],["id","TkcTag","classes/TkcTag.html#method-i-id","()",""],["id2name","Symbol","classes/Symbol.html#method-i-id2name","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre><code>:fred.id2name   #=&gt; &quot;fred&quot;\n</code></pre>\n"],["id2obj","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-c-id2obj","(chart, id)",""],["id2obj","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-c-id2obj","(chart, id)",""],["id2obj","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-c-id2obj","(chart, id)",""],["id2obj","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-c-id2obj","(chart, id)",""],["id2obj","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-c-id2obj","(tabset, id)",""],["id2obj","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-c-id2obj","(tree, id)",""],["id2obj","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-c-id2obj","(tree, id)",""],["id2obj","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-c-id2obj","(lbox, id)",""],["id2obj","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-c-id2obj","(tree, id)",""],["id2obj","Tk::Tcllib::Plotchart::PlotSeries","classes/Tk/Tcllib/Plotchart/PlotSeries.html#method-c-id2obj","(chart, id)",""],["id2obj","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-c-id2obj","(tbar, id)",""],["id2obj","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-c-id2obj","(table, id)",""],["id2obj","Tk::Winico","classes/Tk/Winico.html#method-c-id2obj","(id)",""],["id2obj","TkNamespace","classes/TkNamespace.html#method-c-id2obj","(id)",""],["id2obj","TkTextMark","classes/TkTextMark.html#method-c-id2obj","(text, id)",""],["id2obj","TkTextMark","classes/TkTextMark.html#method-c-id2obj","(text, id)",""],["id2obj","TkTextTag","classes/TkTextTag.html#method-c-id2obj","(text, id)",""],["id2obj","TkTextTag","classes/TkTextTag.html#method-c-id2obj","(text, id)",""],["id2obj","TkcItem","classes/TkcItem.html#method-c-id2obj","(canvas, id)",""],["id2obj","TkcTag","classes/TkcTag.html#method-c-id2obj","(canvas, id)",""],["ident","Syslog","classes/Syslog.html#method-c-ident","()","<p>Returns the identity string used in the last call to open()\n"],["identical?","File","classes/File.html#method-c-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n\n<pre><code>open(&quot;a&quot;, &quot;w&quot;) {}\np File.identical?(&quot;a&quot;, &quot;a&quot;)      #=&gt; ...\n</code></pre>\n"],["identical?","FileTest","classes/FileTest.html#method-i-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n\n<pre><code>open(&quot;a&quot;, &quot;w&quot;) {}\np File.identical?(&quot;a&quot;, &quot;a&quot;)      #=&gt; ...\n</code></pre>\n"],["identical?","FileUtils","classes/FileUtils.html#method-c-identical-3F","(a, b)",""],["identify","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-identify","(x, y)",""],["identify","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-identify","(x, y)",""],["identify","Tk::Scale","classes/Tk/Scale.html#method-i-identify","(x, y)",""],["identify","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-identify","(x, y)",""],["identify","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-identify","(x, y)",""],["identify","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-identify","(x, y)",""],["identify","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-identify","(x, y)",""],["identify","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-identify","(x, y)",""],["identify_comment","RubyLex","classes/RubyLex.html#method-i-identify_comment","()",""],["identify_gvar","RubyLex","classes/RubyLex.html#method-i-identify_gvar","()",""],["identify_here_document","RubyLex","classes/RubyLex.html#method-i-identify_here_document","()",""],["identify_identifier","RubyLex","classes/RubyLex.html#method-i-identify_identifier","()",""],["identify_number","RubyLex","classes/RubyLex.html#method-i-identify_number","()",""],["identify_quotation","RubyLex","classes/RubyLex.html#method-i-identify_quotation","()",""],["identify_string","RubyLex","classes/RubyLex.html#method-i-identify_string","(ltype, quoted = ltype)",""],["identify_string_dvar","RubyLex","classes/RubyLex.html#method-i-identify_string_dvar","()",""],["identity","Matrix","classes/Matrix.html#method-c-identity","(n)","<p>Creates an <code>n</code> by <code>n</code> identity matrix.\n\n<pre><code>Matrix.identity(2)\n  =&gt; 1 0\n     0 1\n</code></pre>\n"],["idle","Net::IMAP","classes/Net/IMAP.html#method-i-idle","(&response_handler)","<p>Sends an IDLE command that waits for notifications of new or expunged\nmessages.  Yields responses from …\n"],["idle_done","Net::IMAP","classes/Net/IMAP.html#method-i-idle_done","()","<p>Leaves IDLE.\n"],["idlok","Curses::Window","classes/Curses/Window.html#method-i-idlok","(p1)","<p>If <code>bool</code> is <code>true</code> curses considers using the\nhardware insert/delete line feature of terminals so equipped. …\n"],["if_needed","TkPackage","classes/TkPackage.html#method-i-if_needed","(pkg, ver, *arg, &b)",""],["iflush","IO","classes/IO.html#method-i-iflush","()","<p>Flushes input buffer in kernel.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["ignore","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-ignore","()","<p>Use this to ignore a CodeObject and all its children until found again\n(#record_location is called). …\n"],["ignore_unknown_element","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-ignore_unknown_element","()",""],["ignore_unknown_element=","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-ignore_unknown_element-3D","(new_value)",""],["ignore_whitespace_nodes","REXML::Element","classes/REXML/Element.html#method-i-ignore_whitespace_nodes","()",""],["ignored?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-ignored-3F","()","<p>Has this class been ignored?\n"],["imag","Complex","classes/Complex.html#method-i-imag","()","<p>Returns the imaginary part.\n"],["imag","Matrix","classes/Matrix.html#method-i-imag","()",""],["imag","Numeric","classes/Numeric.html#method-i-imag","()","<p>Returns zero.\n"],["image","RSS::Rss","classes/RSS/Rss.html#method-i-image","()",""],["image","TkTextImage","classes/TkTextImage.html#method-i-image","()",""],["image","TkTextImage","classes/TkTextImage.html#method-i-image","()",""],["image=","TkTextImage","classes/TkTextImage.html#method-i-image-3D","(value)",""],["image=","TkTextImage","classes/TkTextImage.html#method-i-image-3D","(value)",""],["image_add","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-image_add","(id, img)",""],["image_at","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-image_at","(x, y)",""],["image_button","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-image_button","(src = \"\", name = nil, alt = nil)","<p>Generate an Image Button Input element as a string.\n<p><code>src</code> is the URL of the image to use for the button. …\n"],["image_cget","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-image_cget","(index, slot)",""],["image_cget_strict","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-image_cget_strict","(index, slot)",""],["image_cget_tkstring","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-image_cget_tkstring","(index, slot)",""],["image_cmd","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-image_cmd","(hs, *args)",""],["image_configinfo","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-image_configinfo","(index, slot = nil)",""],["image_configure","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-image_configure","(index, slot, value=None)",""],["image_convolve","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_convolve","(src, dest, filter)",""],["image_convolve","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_convolve","(src, dest, filter)",""],["image_gradient","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_gradient","(photo, left, right, type)",""],["image_gradient","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_gradient","(photo, left, right, type)",""],["image_names","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-image_names","()",""],["image_obj","TkComm","classes/TkComm.html#method-c-image_obj","(val)",""],["image_read_jpeg","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_read_jpeg","(file, photo)",""],["image_read_jpeg","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_read_jpeg","(file, photo)",""],["image_resample","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_resample","(src, dest, horiz_filter=None, vert_filter=None)",""],["image_resample","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_resample","(src, dest, horiz_filter=None, vert_filter=None)",""],["image_rotate","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_rotate","(src, dest, angle)",""],["image_rotate","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_rotate","(src, dest, angle)",""],["image_set","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-image_set","(id, num)",""],["image_set","Tk::Tcllib::Widget::Canvas_Sqmap","classes/Tk/Tcllib/Widget/Canvas_Sqmap.html#method-i-image_set","(cell, img)",""],["image_size=","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-image_size-3D","(new_value)",""],["image_snap","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_snap","(win, photo, width=None, height=None)",""],["image_snap","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_snap","(win, photo, width=None, height=None)",""],["image_subsample","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_subsample","(src, dest, x, y, width, height, horiz_filter=None, vert_filter=None)",""],["image_subsample","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-image_subsample","(src, dest, x, y, width, height, horiz_filter=None, vert_filter=None)",""],["image_tint","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-image_tint","(img, color, alpha)",""],["image_tint","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-image_tint","(img, color, alpha)",""],["image_unset","Tk::Tcllib::Widget::Canvas_Sqmap","classes/Tk/Tcllib/Widget/Canvas_Sqmap.html#method-i-image_unset","(cell)",""],["image_update","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-image_update","(id, imgs)",""],["imagebind","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-imagebind","(context, *args)","<p>def imagebind(*args)\n\n<pre><code>_bind_for_event_class(Event_for_Items, [path, &#39;bindImage&#39;], *args)\nself</code></pre>\n<p>end\n"],["imagebind","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-imagebind","(context, *args)","<p>def imagebind(*args)\n\n<pre><code>_bind_for_event_class(Event_for_Items, [path, &#39;bindImage&#39;], *args)\nself</code></pre>\n<p>end\n"],["imagebind_append","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-imagebind_append","(context, *args)","<p>def imagebind_append(*args)\n\n<pre><code>_bind_append_for_event_class(Event_for_Items, [path, &#39;bindImage&#39;], *args) ...</code></pre>\n"],["imagebind_append","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-imagebind_append","(context, *args)","<p>def imagebind_append(*args)\n\n<pre><code>_bind_append_for_event_class(Event_for_Items, [path, &#39;bindImage&#39;], *args) ...</code></pre>\n"],["imagebind_remove","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-imagebind_remove","(*args)",""],["imagebind_remove","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-imagebind_remove","(*args)",""],["imagebindinfo","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-imagebindinfo","(*args)",""],["imagebindinfo","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-imagebindinfo","(*args)",""],["images","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-images","()",""],["imaginary","Complex","classes/Complex.html#method-i-imaginary","()","<p>Returns the imaginary part.\n"],["imaginary","Matrix","classes/Matrix.html#method-i-imaginary","()","<p>Returns the imaginary part of the matrix.\n\n<pre><code>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i ...\n</code></pre>\n"],["imaginary","Numeric","classes/Numeric.html#method-i-imaginary","()","<p>Returns zero.\n"],["imconfiginfo","TkXIM","classes/TkXIM.html#method-i-imconfiginfo","(slot=nil)",""],["imconfigure","TkXIM","classes/TkXIM.html#method-i-imconfigure","(slot, value=None)",""],["img","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-img","(src = \"\", alt = \"\", width = nil, height = nil)","<p>Generate an Image element as a string.\n<p><code>src</code> is the URL of the image.  <code>alt</code> is the\nalternative text for the …\n"],["imove","Tk::Canvas","classes/Tk/Canvas.html#method-i-imove","(tagOrId, idx, x, y)",""],["imove","TkcTagAccess","classes/TkcTagAccess.html#method-i-imove","(idx, x, y)",""],["implementation","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-implementation","()","<p>IXMLDOMImplementation implementation info on this DOM implementation\n"],["implementation","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-implementation","()","<p>IXMLDOMImplementation implementation info on this DOM implementation\n"],["implementation","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-implementation","()","<p>IXMLDOMImplementation implementation info on this DOM implementation\n"],["implemented_ole_types","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-implemented_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["import","Tk::Iwidgets::Scrolledhtml","classes/Tk/Iwidgets/Scrolledhtml.html#method-i-import","(href)",""],["import","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-import","(file, idx=nil)",""],["import_function","DL::Importer","classes/DL/Importer.html#method-i-import_function","(name, ctype, argtype, call_type = nil)",""],["import_link","Tk::Iwidgets::Scrolledhtml","classes/Tk/Iwidgets/Scrolledhtml.html#method-i-import_link","(href)",""],["import_symbol","DL::Importer","classes/DL/Importer.html#method-i-import_symbol","(name)",""],["import_ucm","Object","classes/Object.html#method-i-import_ucm","(path)",""],["import_value","DL::Importer","classes/DL/Importer.html#method-i-import_value","(ty, addr)",""],["in","SimpleTupleSpace","classes/SimpleTupleSpace.html#method-i-in","(key)",""],["in","TupleSpace","classes/TupleSpace.html#method-i-in","(template, non_block=false)",""],["in_namespace","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-in_namespace","(name)","<p>Evaluate the block in a nested namespace named <code>name</code>.  Create\nan anonymous namespace if <code>name</code> is nil.\n"],["in_path?","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-in_path-3F","(file)","<p>Is <code>file</code> in ENV?\n"],["in_service?","GServer","classes/GServer.html#method-c-in_service-3F","(port, host = DEFAULT_HOST)","<p>Check if a server is running on the given port and host\n<p><code>port</code> &mdash; port, as a FixNum, of the server to check …\n"],["in_tt?","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-in_tt-3F","()","<p>Are we currently inside tt tags?\n"],["inactivate","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-inactivate","(pc)",""],["inc","OptionParser","classes/OptionParser.html#method-c-inc","(arg, default = nil)","<p>Returns an incremented value of <code>default</code> according to\n<code>arg</code>.\n"],["inc","OptionParser","classes/OptionParser.html#method-i-inc","(*args)",""],["inch","Curses","classes/Curses.html#method-c-inch","()","<p>Returns the character at the current position.\n"],["inch","Curses::Window","classes/Curses/Window.html#method-i-inch","()","<p>Returns the character at the current position of the window.\n"],["include","Rake::FileList","classes/Rake/FileList.html#method-i-include","(*filenames)","<p>Add file names defined by glob patterns to the file list.  If an array is\ngiven, add each element of …\n"],["include","Tk::BWidget::DragSite","classes/Tk/BWidget/DragSite.html#method-c-include","(klass, type, event)",""],["include","Tk::BWidget::DropSite","classes/Tk/BWidget/DropSite.html#method-c-include","(klass, type)",""],["include","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-include","(klass, type)",""],["include","TkcGroup","classes/TkcGroup.html#method-i-include","(*tags)","<p>private :create_self\n"],["include?","Array","classes/Array.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given object is present in\n<code>self</code> (that is, if any object <code>==</code>\n<em>anObject</em>), <code>false</code> otherwise. …\n"],["include?","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-include-3F","(*args)",""],["include?","CSV::Row","classes/CSV/Row.html#method-i-include-3F","(name)",""],["include?","DBM","classes/DBM.html#method-i-include-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["include?","DRb::TimerIdConv::TimerHolder2","classes/DRb/TimerIdConv/TimerHolder2.html#method-i-include-3F","(key)",""],["include?","ENV","classes/ENV.html#method-c-include-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["include?","Enumerable","classes/Enumerable.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre><code>IO.constants.include? :SEEK_SET ...</code></pre>\n"],["include?","GDBM","classes/GDBM.html#method-i-include-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["include?","Hash","classes/Hash.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_key?(&quot;a&quot;)   #=&gt; ...\n</code></pre>\n"],["include?","IPAddr","classes/IPAddr.html#method-i-include-3F","(other)","<p>Returns true if the given ipaddr is in the range.\n<p>e.g.:\n\n<pre><code>require &#39;ipaddr&#39;\nnet1 = IPAddr.new(&quot;192.168.2.0/24&quot;) ...\n</code></pre>\n"],["include?","Module","classes/Module.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>module</em> is included in <em>mod</em> or\none of <em>mod</em>&#39;s ancestors.\n\n<pre><code>module A\nend\nclass B\n  include ...\n</code></pre>\n"],["include?","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-include-3F","(key)","<p>Whether an attlist declaration includes the given attribute definition\n\n<pre><code>if attlist_decl.include? &quot;xmlns:foobar&quot;</code></pre>\n"],["include?","Range","classes/Range.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an element of <em>rng</em>,\n<code>false</code> otherwise.  If beg and end are numeric, comparison is …\n"],["include?","SDBM","classes/SDBM.html#method-i-include-3F","(p1)",""],["include?","Set","classes/Set.html#method-i-include-3F","(o)","<p>Returns true if the set contains the given object.\n"],["include?","String","classes/String.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>str</em> contains the given string or\ncharacter.\n\n<pre><code>&quot;hello&quot;.include? &quot;lo&quot;   #=&gt; true\n&quot;hello&quot;.include? ...\n</code></pre>\n"],["include?","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-include-3F","(idx)",""],["include_file","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-i-include_file","(name, indent, encoding)","<p>Handles the <code>:include: <em>filename</em></code> directive.\n<p>If the first line of the included file starts with &#39;#&#39;, …\n"],["included","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-c-included","(p1)","<p>Extends <em>modul</em> with the String::Extend module.\n"],["included_modules","Module","classes/Module.html#method-i-included_modules","()","<p>Returns the list of modules included in <em>mod</em>.\n\n<pre><code>module Mixin\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules ...\n</code></pre>\n"],["incompatible_argument_styles","OptionParser::Switch","classes/OptionParser/Switch.html#method-c-incompatible_argument_styles","(arg, t)",""],["incompatible_argument_styles","OptionParser::Switch::NoArgument","classes/OptionParser/Switch/NoArgument.html#method-c-incompatible_argument_styles","(*)",""],["incomplete_input?","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-incomplete_input-3F","()","<p>Returns true if the invalid byte sequence error is caused by premature end\nof string.\n\n<pre><code>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</code></pre>\n"],["indent","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-indent","()","<p>This string is used to indent levels in the JSON text.\n"],["indent","REXML::Node","classes/REXML/Node.html#method-i-indent","(to, ind)",""],["indent","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-indent","( mod = nil )","<p>Write a current indent\n"],["indent!","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-indent-21","()","<p>Add indent to the buffer\n"],["indent=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-indent-3D","(p1)","<p>This string is used to indent levels in the JSON text.\n"],["indent_text","REXML::Text","classes/REXML/Text.html#method-i-indent_text","(string, level=1, style=\"\\t\", indentfirstline=true)",""],["indent_text","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-indent_text","( text, mod, first_line = true )","<p>Write a text block with the current indent\n"],["indentation","Psych::Emitter","classes/Psych/Emitter.html#method-i-indentation","()","<p>Get the indentation level.\n"],["indentation=","Psych::Emitter","classes/Psych/Emitter.html#method-i-indentation-3D","(p1)","<p>Set the indentation level to <code>level</code>.  The level must be less\nthan 10 and greater than 1.\n"],["index","Array","classes/Array.html#method-i-index","(p1)","<p>Returns the index of the first object in <code>self</code> such that the\nobject is <code>==</code> to <em>obj</em>. If a block is given …\n"],["index","CSV::Row","classes/CSV/Row.html#method-i-index","(header, minimum_index = 0)","<p>This method will return the index of a field with the provided\n<code>header</code>. The <code>offset</code> can be used to locate …\n"],["index","ENV","classes/ENV.html#method-c-index","(p1)","<p>Deprecated method that is equivalent to ENV.key\n"],["index","Matrix","classes/Matrix.html#method-i-index","(*args)","<p>The index method is specialized to return the index as [row, column] It\nalso accepts an optional <code>selector</code> …\n"],["index","REXML::Parent","classes/REXML/Parent.html#method-i-index","( child )","<p>Fetches the index of a given child @param child the child to get the index\nof @return the index of the …\n"],["index","SDBM","classes/SDBM.html#method-i-index","(p1)",""],["index","String","classes/String.html#method-i-index","(p1, p2 = v2)","<p>Returns the index of the first occurrence of the given <em>substring</em>\nor pattern (<em>regexp</em>) in <em>str</em>. Returns …\n"],["index","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-index","(str)",""],["index","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-index","(str)",""],["index","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-index","()",""],["index","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-index","()",""],["index","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-index","(str)",""],["index","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-index","(str)",""],["index","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-index","(idx, val=None)",""],["index","Tk::BWidget::ButtonBox","classes/Tk/BWidget/ButtonBox.html#method-i-index","(idx)",""],["index","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-index","(idx)",""],["index","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-index","(item)",""],["index","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-index","()",""],["index","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-index","(page)",""],["index","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-index","(node)",""],["index","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-index","()",""],["index","Tk::Canvas","classes/Tk/Canvas.html#method-i-index","(tagOrId, idx)",""],["index","Tk::Entry","classes/Tk/Entry.html#method-i-index","(idx)",""],["index","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-index","(idx, count=None, unit=None)",""],["index","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-index","(index)",""],["index","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-index","(index)",""],["index","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-index","(tagOrId, idx)",""],["index","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-index","(idx)",""],["index","Tk::Iwidgets::Toolbar","classes/Tk/Iwidgets/Toolbar.html#method-i-index","(idx)",""],["index","Tk::Listbox","classes/Tk/Listbox.html#method-i-index","(idx)",""],["index","Tk::Menu","classes/Tk/Menu.html#method-i-index","(idx)",""],["index","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-index","(index)",""],["index","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-index","(index)",""],["index","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-index","(idx)",""],["index","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-index","(idx)",""],["index","Tk::TkTable","classes/Tk/TkTable.html#method-i-index","(idx)",""],["index","TkcTagAccess","classes/TkcTagAccess.html#method-i-index","(idx)",""],["index","YAML::DBM","classes/YAML/DBM.html#method-i-index","( keystr )","<p>Deprecated, used YAML::DBM#key instead.\n"],["index_at","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-index_at","(tag, str)",""],["index_at_path","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-index_at_path","(tag, str)",""],["index_in_parent","REXML::Node","classes/REXML/Node.html#method-i-index_in_parent","()","<p>Returns the position that <code>self</code> holds in its parent&#39;s\narray, indexed from 1.\n"],["index_name","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-index_name","(tab)",""],["index_path","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-index_path","(str)",""],["index_pos","TkTextIO","classes/TkTextIO.html#method-i-index_pos","()",""],["index_pos=","TkTextIO","classes/TkTextIO.html#method-i-index_pos-3D","(idx)",""],["index_signature","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-index_signature","()","<p>The signature for the source index.  Changes in the signature indicate a\nchange in the index.\n"],["index_signature","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-index_signature","()","<p>The signature for the source index.  Changes in the signature indicate a\nchange in the index.\n"],["indices","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-indices","(mod)",""],["indir","Sys","classes/Sys.html#method-i-indir","(dir)","<p>Make <code>dir</code> the current working directory for the duration of\nexecuting the given block.\n"],["infinite?","BigDecimal","classes/BigDecimal.html#method-i-infinite-3F","()","<p>Returns nil, -1, or +1 depending on whether the value is finite, -infinity,\nor +infinity.\n"],["infinite?","Float","classes/Float.html#method-i-infinite-3F","()","<p>Returns <code>nil</code>, -1, or +1 depending on whether <em>flt</em> is\nfinite, -infinity, or +infinity.\n\n<pre><code>(0.0).infinite?   ...</code></pre>\n"],["infinity?","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-infinity-3F","()",""],["inflate","Gem","classes/Gem.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["inflate","Zlib","classes/Zlib.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a\npreset dictionary is needed for decompression. …\n"],["inflate","Zlib::Inflate","classes/Zlib/Inflate.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a\npreset dictionary is needed for decompression. …\n"],["inflate","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-inflate","(p1)","<p>Inputs <code>string</code> into the inflate stream and returns the output\nfrom the stream.  Calling this method, both …\n"],["info","Logger","classes/Logger.html#method-i-info","(progname = nil, &block)","<p>Log an <code>INFO</code> message.\n<p><code>message</code> &mdash; the message to log; does not need to be a String\n<p><code>progname</code> &mdash; in the block form, …\n"],["info","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-info","(container)",""],["info","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-i-info","()",""],["info","Tk::Winico","classes/Tk/Winico.html#method-c-info","()",""],["info","Tk::Winico","classes/Tk/Winico.html#method-i-info","()",""],["info","TkGrid","classes/TkGrid.html#method-c-info","(slave)",""],["info","TkGrid","classes/TkGrid.html#method-c-info","(slave)",""],["info","TkPack","classes/TkPack.html#method-c-info","(slave)",""],["info","TkPack","classes/TkPack.html#method-c-info","(slave)",""],["info","TkPlace","classes/TkPlace.html#method-c-info","(win)",""],["info","TkPlace","classes/TkPlace.html#method-c-info","(win)",""],["info","TkTimer","classes/TkTimer.html#method-i-info","()",""],["info","TkTimer","classes/TkTimer.html#method-c-info","(obj = nil)",""],["info","TkTimer","classes/TkTimer.html#method-c-info","(obj = nil)",""],["info","TkTimer","classes/TkTimer.html#method-i-info","()",""],["info","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-info","(msg)","<p>Shortcut for logging an INFO message\n"],["info","Win32::Registry","classes/Win32/Registry.html#method-i-info","()","<p>Returns key information as Array of: :num_keys\n\n<pre><code>The number of subkeys.</code></pre>\n<p>:max_key_length\n"],["info?","Logger","classes/Logger.html#method-i-info-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>INFO</code> messages.\n"],["info?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-info-3F","()","<p>Will the logger output INFO messages?\n"],["info?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-info-3F","(code)","<p>Is <code>code</code> an informational status?\n"],["info_class","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-info_class","()",""],["info_function","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-info_function","(*args)",""],["info_heritage","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-info_heritage","()",""],["info_inherit","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-info_inherit","()",""],["info_variable","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-info_variable","(*args)",""],["infox","Tk::TclX","classes/Tk/TclX.html#method-c-infox","(*args)",""],["inherited","Exports","classes/Exports.html#method-c-inherited","(klass)",""],["inherited","MultiTkIp","classes/MultiTkIp.html#method-c-inherited","(subclass)",""],["inherited","MultiTkIp","classes/MultiTkIp.html#method-c-inherited","(subclass)",""],["inherited","MultiTkIp","classes/MultiTkIp.html#method-c-inherited","(subclass)",""],["inherited","MultiTkIp","classes/MultiTkIp.html#method-c-inherited","(subclass)",""],["inherited","RSS::Element","classes/RSS/Element.html#method-i-inherited","(klass)",""],["inherited","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-inherited","(subclass)",""],["inherited_array_reader","RSS::Utils::InheritedReader","classes/RSS/Utils/InheritedReader.html#method-i-inherited_array_reader","(constant_name)",""],["inherited_base","RSS::Element","classes/RSS/Element.html#method-i-inherited_base","()",""],["inherited_base","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-inherited_base","()",""],["inherited_hash_reader","RSS::Utils::InheritedReader","classes/RSS/Utils/InheritedReader.html#method-i-inherited_hash_reader","(constant_name)",""],["inherited_reader","RSS::Utils::InheritedReader","classes/RSS/Utils/InheritedReader.html#method-i-inherited_reader","(constant_name)",""],["init","DemoTree","classes/DemoTree.html#method-c-init","(tree, list, *args)",""],["init","Gem::PackageTask","classes/Gem/PackageTask.html#method-i-init","(gem)","<p>Initialization tasks without the “yield self” or define operations.\n"],["init","IRB::Inspector","classes/IRB/Inspector.html#method-i-init","()",""],["init","Rake::Application","classes/Rake/Application.html#method-i-init","(app_name='rake')","<p>Initialize the command line parameters and app name.\n"],["init","Rake::Application","classes/Rake/Application.html#method-i-init","(app_name='rake')","<p>Initialize the command line parameters and app name.\n"],["init","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-init","(name, version)","<p>Initialization that bypasses the “yield self” and “define” step.\n"],["init","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-init","(klass, win, options)",""],["init","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-c-init","(entry, length=None)",""],["init_color","Curses","classes/Curses.html#method-c-init_color","(p1, p2, p3, p4)","<p>Changes the definition of a color. It takes four arguments:\n<p>the number of the color to be changed, <code>color</code> …\n"],["init_config","IRB","classes/IRB.html#method-c-init_config","(ap_path)","<p>@CONF default setting\n"],["init_curses","FileViewer","classes/FileViewer.html#method-i-init_curses","()","<p>Perform the curses setup\n"],["init_error","IRB","classes/IRB.html#method-c-init_error","()",""],["init_gemspecs","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-init_gemspecs","()","<p>Return a list of all installed gemspecs, sorted by alphabetical order and\nin reverse version order.  …\n"],["init_ip_env","MultiTkIp","classes/MultiTkIp.html#method-c-init_ip_env","(script = Proc.new)",""],["init_ip_env","MultiTkIp","classes/MultiTkIp.html#method-c-init_ip_env","(script = Proc.new)",""],["init_ip_env","MultiTkIp","classes/MultiTkIp.html#method-c-init_ip_env","(script = Proc.new)",""],["init_ip_env","MultiTkIp","classes/MultiTkIp.html#method-c-init_ip_env","(script = Proc.new)",""],["init_ip_internal","MultiTkIp","classes/MultiTkIp.html#method-c-init_ip_internal","()",""],["init_ip_internal","MultiTkIp","classes/MultiTkIp.html#method-c-init_ip_internal","()",""],["init_ip_internal","MultiTkIp","classes/MultiTkIp.html#method-c-init_ip_internal","()",""],["init_ip_internal","MultiTkIp","classes/MultiTkIp.html#method-c-init_ip_internal","()",""],["init_pair","Curses","classes/Curses.html#method-c-init_pair","(p1, p2, p3)","<p>Changes the definition of a color-pair.\n<p>It takes three arguments: the number of the color-pair to be changed …\n"],["init_pics","TkTreeCtrl_demo","classes/TkTreeCtrl_demo.html#method-i-init_pics","(*args)",""],["init_save_history","IRB::Context","classes/IRB/Context.html#method-i-init_save_history","()",""],["init_screen","Curses","classes/Curses.html#method-c-init_screen","()","<p>Initialize a standard screen\n<p>see also Curses.stdscr\n"],["init_source","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-init_source","(win)",""],["init_tags","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-i-init_tags","()","<p>Maps attributes to ANSI sequences\n"],["init_tags","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-init_tags","()","<p>Sets a flag that is picked up by #annotate to do the right thing in\n#convert_string\n"],["init_tags","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-init_tags","()","<p>Maps attributes to HTML tags\n"],["init_tags","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-init_tags","()","<p>Maps attributes to HTML sequences\n"],["init_widget_font","TkFont","classes/TkFont.html#method-c-init_widget_font","(pathname, *args)",""],["init_widget_font","TkFont","classes/TkFont.html#method-c-init_widget_font","(pathname, *args)",""],["initaialize","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-initaialize","(parent, *args)",""],["initgroups","Process","classes/Process.html#method-c-initgroups","(p1, p2)","<p>Initializes the supplemental group access list by reading the system group\ndatabase and using all groups …\n"],["initialize","RDoc::Generator::RI","classes/RDoc/Generator/RI.html#method-i-initialize","(options)","<p>Set up a new ri generator\n"],["initialize","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-initialize","()",""],["initializeMatchPatterns","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-initializeMatchPatterns","()",""],["initialize_composite","Tk::RbWidget::ScrollFrame","classes/Tk/RbWidget/ScrollFrame.html#method-i-initialize_composite","(keys={})",""],["initialize_composite","TkScrolledCanvas","classes/TkScrolledCanvas.html#method-i-initialize_composite","(keys={})",""],["initialize_copy","Array","classes/Array.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <code>self</code> with the contents of\n<em>other_ary</em>, truncating or expanding if necessary.\n\n<pre><code>a ...</code></pre>\n"],["initialize_copy","Gem::Specification","classes/Gem/Specification.html#method-i-initialize_copy","(other_spec)","<p>Duplicates array_attributes from <code>other_spec</code> so state isn&#39;t\nshared.\n"],["initialize_copy","Hash","classes/Hash.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <em>hsh</em> with the contents of\n<em>other_hash</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ ...\n</code></pre>\n"],["initialize_copy","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-initialize_copy","(p1)","<p>Initializes this object from orig if it to be duplicated/cloned and returns\nit.\n"],["initialize_copy","OpenStruct","classes/OpenStruct.html#method-i-initialize_copy","(orig)","<p>Duplicate an OpenStruct object members.\n"],["initialize_copy","Set","classes/Set.html#method-i-initialize_copy","(orig)","<p>Copy internal hash.\n"],["initialize_copy","String","classes/String.html#method-i-initialize_copy","(p1)","<p>Replaces the contents and taintedness of <em>str</em> with the\ncorresponding values in <em>other_str</em>.\n\n<pre><code>s = &quot;hello&quot;  ...</code></pre>\n"],["initialize_copy","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-initialize_copy","(p1)","<p>Duplicates the deflate stream.\n"],["initialize_http_header","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-initialize_http_header","(initheader)",""],["initialize_input","RubyLex","classes/RubyLex.html#method-i-initialize_input","()",""],["initialize_methods_etc","RDoc::Context","classes/RDoc/Context.html#method-i-initialize_methods_etc","()","<p>Sets the defaults for methods and so-forth\n"],["initialize_tracer","IRB","classes/IRB.html#method-c-initialize_tracer","()","<p>initialize tracing function\n"],["inittoplevel","Test1","classes/Test1.html#method-i-inittoplevel","(ip, parent, title)","<p>inittoplevel(ip, parent, title)\n\n<pre><code>以下の処理をまとめて行う.\n    1. toplevel ウィジェットを作成する.\n    2. コールバックを登録する配列を用意し, toplevel ...</code></pre>\n"],["inject","Enumerable","classes/Enumerable.html#method-i-inject","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["inline_html?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_html-3F","()",""],["inline_other?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_other-3F","()",""],["inline_other_base64?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_base64-3F","()",""],["inline_other_text?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_text-3F","()",""],["inline_other_xml?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_xml-3F","()",""],["inline_text?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_text-3F","()",""],["inline_xhtml?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_xhtml-3F","()",""],["inner_product","Vector","classes/Vector.html#method-i-inner_product","(v)","<p>Returns the inner product of this vector with the other.\n\n<pre><code>Vector[4,7].inner_product Vector[10,1]  =&gt; 47\n</code></pre>\n"],["ino","File::Stat","classes/File/Stat.html#method-i-ino","()","<p>Returns the inode number for <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).ino   #=&gt; 1083669\n</code></pre>\n"],["inplace_mode","ARGF","classes/ARGF.html#method-i-inplace_mode","()","<p>Returns the file extension appended to the names of modified files under\ninplace-edit mode. This value …\n"],["inplace_mode=","ARGF","classes/ARGF.html#method-i-inplace_mode-3D","(p1)","\n<pre><code>Sets the filename extension for inplace editing mode to the given String.\nEach file being edited has ...</code></pre>\n"],["input","Gem::MockGemUi","classes/Gem/MockGemUi.html#method-i-input","()",""],["input=","Readline","classes/Readline.html#method-c-input-3D","(p1)","<p>Specifies a File object <code>input</code> that is input stream for\nReadline.readline method.\n<p>Raises SecurityError …\n"],["input=","Shell::AppendFile","classes/Shell/AppendFile.html#method-i-input-3D","(filter)",""],["input=","Shell::AppendIO","classes/Shell/AppendIO.html#method-i-input-3D","(filter)",""],["input=","Shell::Filter","classes/Shell/Filter.html#method-i-input-3D","(filter)",""],["input=","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-input-3D","(inp)",""],["input?","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-input-3F","()","<p>Returns true if the parameter is input.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["input_end","TkKinput","classes/TkKinput.html#method-c-input_end","(win)",""],["input_start","TkKinput","classes/TkKinput.html#method-c-input_start","(win, keys=nil)",""],["insch","Curses","classes/Curses.html#method-c-insch","(p1)","<p>Insert a character <code>ch</code>, before the cursor.\n"],["insch","Curses::Window","classes/Curses/Window.html#method-i-insch","(p1)","<p>Insert a character <code>ch</code>, before the cursor, in the current\nwindow\n"],["insert","Array","classes/Array.html#method-i-insert","(*args)","<p>Inserts the given values before the element with the given index (which may\nbe negative).\n\n<pre><code>a = %w{ a b ...</code></pre>\n"],["insert","IRB::JobManager","classes/IRB/JobManager.html#method-i-insert","(irb)",""],["insert","String","classes/String.html#method-i-insert","(p1, p2)","<p>Inserts <em>other_str</em> before the character at the given\n<em>index</em>, modifying <em>str</em>. Negative indices count from …\n"],["insert","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-insert","(container, *args)",""],["insert","Tk::BLT::Tabnotebook","classes/Tk/BLT/Tabnotebook.html#method-i-insert","(pos=nil, keys={})",""],["insert","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-insert","(pos, tab, keys={})",""],["insert","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-insert","(pos, parent=nil, keys={})",""],["insert","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-insert","(pos, parent=nil, keys={})",""],["insert","Tk::BWidget::ButtonBox","classes/Tk/BWidget/ButtonBox.html#method-i-insert","(idx, keys={}, &b)",""],["insert","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-insert","(idx, item, keys={})",""],["insert","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-insert","(index, page, keys={}, &b)",""],["insert","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-insert","(idx, parent, node, keys={})",""],["insert","Tk::Canvas","classes/Tk/Canvas.html#method-i-insert","(tagOrId, index, string)",""],["insert","Tk::Entry","classes/Tk/Entry.html#method-i-insert","(pos,text)",""],["insert","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-insert","(idx, tag=nil, keys={})",""],["insert","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-insert","(idx, tag=nil, keys={})",""],["insert","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-insert","(idx, tag=nil, keys={})",""],["insert","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-insert","(pos,text)",""],["insert","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-insert","(index, chars, *tags)",""],["insert","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-insert","(idx, type, tag=nil, keys={})",""],["insert","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-insert","(idx, keys={})",""],["insert","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-insert","(idx, *args)",""],["insert","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-insert","(idx, tag=nil, keys={})",""],["insert","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-insert","(pos,text)",""],["insert","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-insert","(idx, tag=nil, keys={})",""],["insert","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-insert","(tagOrId, index, string)",""],["insert","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-insert","(index, *args)",""],["insert","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-insert","(index, *args)",""],["insert","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-insert","(pos,text)",""],["insert","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-insert","(idx, keys={})",""],["insert","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-insert","(idx, keys={})",""],["insert","Tk::Iwidgets::Toolbar","classes/Tk/Iwidgets/Toolbar.html#method-i-insert","(idx, type, tag=nil, keys={})",""],["insert","Tk::Menu","classes/Tk/Menu.html#method-i-insert","(index, type, keys=nil)",""],["insert","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-insert","(index, value)",""],["insert","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-insert","(index, value)",""],["insert","Tk::RbWidget::AlignBox","classes/Tk/RbWidget/AlignBox.html#method-i-insert","(idx, widget)",""],["insert","Tk::Tcllib::IP_Entry","classes/Tk/Tcllib/IP_Entry.html#method-i-insert","(*ip)",""],["insert","Tk::Tcllib::IP_Entry","classes/Tk/Tcllib/IP_Entry.html#method-i-insert","(*ip)",""],["insert","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-insert","(idx, subwin, keys=nil)",""],["insert","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-insert","(idx, subwin, keys=nil)",""],["insert","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-insert","(pos, win, keys)",""],["insert","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-insert","(idx, *lines)",""],["insert","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-insert","(idx, *lines)",""],["insert","TkMultiListbox","classes/TkMultiListbox.html#method-i-insert","(idx, *lines)",""],["insert","TkTextWin","classes/TkTextWin.html#method-i-insert","(index, *args)",""],["insert","TkcTagAccess","classes/TkcTagAccess.html#method-i-insert","(beforethis, string)",""],["insertBefore","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXMLDOMText","classes/IXMLDOMText.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","IXTLRuntime","classes/IXTLRuntime.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertBefore","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-insertBefore","(arg0, arg1)","<p>IXMLDOMNode insertBefore insert a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nVARIANT arg1 --- refChild ...</code></pre>\n"],["insertData","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-insertData","(arg0, arg1)","<p>VOID insertData insert string into value\n\n<pre><code>I4 arg0 --- offset [IN]\nBSTR arg1 --- data [IN]</code></pre>\n"],["insertData","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-insertData","(arg0, arg1)","<p>VOID insertData insert string into value\n\n<pre><code>I4 arg0 --- offset [IN]\nBSTR arg1 --- data [IN]</code></pre>\n"],["insertData","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-insertData","(arg0, arg1)","<p>VOID insertData insert string into value\n\n<pre><code>I4 arg0 --- offset [IN]\nBSTR arg1 --- data [IN]</code></pre>\n"],["insertData","IXMLDOMText","classes/IXMLDOMText.html#method-i-insertData","(arg0, arg1)","<p>VOID insertData insert string into value\n\n<pre><code>I4 arg0 --- offset [IN]\nBSTR arg1 --- data [IN]</code></pre>\n"],["insert_active","Tk::TkTable","classes/Tk/TkTable.html#method-i-insert_active","(idx, val)",""],["insert_after","REXML::Parent","classes/REXML/Parent.html#method-i-insert_after","( child1, child2 )","<p>Inserts an child after another child @param child1 this is either an xpath\nor an Element.  If an Element …\n"],["insert_after","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-insert_after","(container, *args)",""],["insert_at","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-insert_at","(tag, pos, parent=nil, keys={})",""],["insert_at_last","ArrayCode","classes/ArrayCode.html#method-i-insert_at_last","(num, str)",""],["insert_before","REXML::Parent","classes/REXML/Parent.html#method-i-insert_before","( child1, child2 )","<p>Inserts an child before another child @param child1 this is either an xpath\nor an Element.  If an Element …\n"],["insert_before","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-insert_before","(container, *args)",""],["insert_cols","Tk::TkTable","classes/Tk/TkTable.html#method-i-insert_cols","(*args)",""],["insert_cursor","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-insert_cursor","(idx)",""],["insert_entry","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-insert_entry","(idx, *elems)",""],["insert_items","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-insert_items","(idx, *args)",""],["insert_items","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-insert_items","(idx, *args)",""],["insert_lhs","Tk::Iwidgets::Disjointlistbox","classes/Tk/Iwidgets/Disjointlistbox.html#method-i-insert_lhs","(*items)",""],["insert_list","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-insert_list","(idx, *elems)",""],["insert_output","Encoding::Converter","classes/Encoding/Converter.html#method-i-insert_output","(p1)","<p>Inserts string into the encoding converter. The string will be converted to\nthe destination encoding …\n"],["insert_rhs","Tk::Iwidgets::Disjointlistbox","classes/Tk/Iwidgets/Disjointlistbox.html#method-i-insert_rhs","(*items)",""],["insert_rows","Tk::TkTable","classes/Tk/TkTable.html#method-i-insert_rows","(*args)",""],["insert_selection","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-insert_selection","(pos, text)",""],["insert_selection","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-insert_selection","(pos, text)",""],["insert_tabs","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-insert_tabs","(pos, *tabs)",""],["insertln","Curses","classes/Curses.html#method-c-insertln","()","<p>Inserts a line above the cursor, and the bottom line is lost\n"],["insertln","Curses::Window","classes/Curses/Window.html#method-i-insertln","()","<p>Inserts a line above the cursor, and the bottom line is lost\n"],["inside","Tk::BLT::Barchart","classes/Tk/BLT/Barchart.html#method-i-inside","(x, y)",""],["inside","Tk::BLT::Graph","classes/Tk/BLT/Graph.html#method-i-inside","(x, y)",""],["inside","Tk::BLT::Stripchart","classes/Tk/BLT/Stripchart.html#method-i-inside","(x, y)",""],["inspect","ActionMap","classes/ActionMap.html#method-i-inspect","()",""],["inspect","Addrinfo","classes/Addrinfo.html#method-i-inspect","()","<p>returns a string which shows addrinfo in human-readable form.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).inspect #=&gt; ...\n</code></pre>\n"],["inspect","Array","classes/Array.html#method-i-inspect","()","<p>Creates a string representation of <code>self</code>.\n"],["inspect","BigDecimal","classes/BigDecimal.html#method-i-inspect","()","<p>Returns debugging information about the value as a string of\ncomma-separated values in angle brackets …\n"],["inspect","CSV","classes/CSV.html#method-i-inspect","()","<p>Returns a simplified description of the key CSV attributes in an ASCII\ncompatible String.\n"],["inspect","CSV::Row","classes/CSV/Row.html#method-i-inspect","()","<p>A summary of fields, by header, in an ASCII compatible String.\n"],["inspect","CSV::Table","classes/CSV/Table.html#method-i-inspect","()","<p>Shows the mode and size of this table in a US-ASCII String.\n"],["inspect","Complex","classes/Complex.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n"],["inspect","DL::CFunc","classes/DL/CFunc.html#method-i-inspect","()","<p>Returns a string formatted with an easily readable representation of the\ninternal state of the DL::CFunc …\n"],["inspect","DL::CPtr","classes/DL/CPtr.html#method-i-inspect","()","<p>Returns a string formatted with an easily readable representation of the\ninternal state of the DL::CPtr …\n"],["inspect","DL::CPtr","classes/DL/CPtr.html#method-i-inspect","()","<p>Returns a string formatted with an easily readable representation of the\ninternal state of the DL::CPtr …\n"],["inspect","Date","classes/Date.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).inspect\n          #=&gt; &quot;#&lt;Date: ...\n</code></pre>\n"],["inspect","Digest::HMAC","classes/Digest/HMAC.html#method-i-inspect","()","<p>Creates a printable version of the hmac object.\n"],["inspect","Digest::Instance","classes/Digest/Instance.html#method-i-inspect","()","<p>Creates a printable version of the digest object.\n"],["inspect","Dir","classes/Dir.html#method-i-inspect","()","<p>Return a string describing this Dir object.\n"],["inspect","ENV","classes/ENV.html#method-c-inspect","()","<p>Returns the contents of the environment as a String.\n"],["inspect","Encoding","classes/Encoding.html#method-i-inspect","()","<p>Returns a string which represents the encoding for programmers.\n\n<pre><code>Encoding::UTF_8.inspect       #=&gt; &quot;#&lt;Encoding:UTF-8&gt;&quot; ...\n</code></pre>\n"],["inspect","Encoding::Converter","classes/Encoding/Converter.html#method-i-inspect","()","<p>Returns a printable version of <em>ec</em>\n\n<pre><code>ec = Encoding::Converter.new(&quot;iso-8859-1&quot;, &quot;utf-8&quot;)\nputs ec.inspect ...</code></pre>\n"],["inspect","Enumerator","classes/Enumerator.html#method-i-inspect","()","<p>Creates a printable version of <em>e</em>.\n"],["inspect","Exception","classes/Exception.html#method-i-inspect","()","<p>Return this exception&#39;s class name an message\n"],["inspect","File::Stat","classes/File/Stat.html#method-i-inspect","()","<p>Produce a nicely formatted description of <em>stat</em>.\n\n<pre><code>File.stat(&quot;/etc/passwd&quot;).inspect\n   #=&gt; &quot;#&lt;File::Stat ...\n</code></pre>\n"],["inspect","Gem::Platform","classes/Gem/Platform.html#method-i-inspect","()",""],["inspect","Hash","classes/Hash.html#method-i-inspect","()","<p>Return the contents of this hash as a string.\n\n<pre><code>h = { &quot;c&quot; =&gt; 300, &quot;a&quot; =&gt; 100, &quot;d&quot; =&gt; 400, &quot;c&quot; =&gt; 300  } ...\n</code></pre>\n"],["inspect","IO","classes/IO.html#method-i-inspect","()","<p>Return a string describing this IO object.\n"],["inspect","IPAddr","classes/IPAddr.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the ipaddr.\n(“#&lt;IPAddr: family:address/mask&gt;”) …\n"],["inspect","IRB::Context","classes/IRB/Context.html#method-i-inspect","()",""],["inspect","IRB::History","classes/IRB/History.html#method-i-inspect","()",""],["inspect","IRB::Irb","classes/IRB/Irb.html#method-i-inspect","()",""],["inspect","IRB::JobManager","classes/IRB/JobManager.html#method-i-inspect","()",""],["inspect","IRB::SLex","classes/IRB/SLex.html#method-i-inspect","()",""],["inspect","Iconv::Failure","classes/Iconv/Failure.html#method-i-inspect","()","<p>Returns inspected string like as: #&lt;<em>class</em>: <em>success</em>,\n<em>failed</em>&gt;\n"],["inspect","JISX0208::Char","classes/JISX0208/Char.html#method-i-inspect","()",""],["inspect","MatchData","classes/MatchData.html#method-i-inspect","()","<p>Returns a printable version of <em>mtch</em>.\n\n<pre><code>puts /.$/.match(&quot;foo&quot;).inspect\n#=&gt; #&lt;MatchData &quot;o&quot;&gt;\n\nputs /(.)(.)(.)/.match(&quot;foo&quot;).inspect ...\n</code></pre>\n"],["inspect","Matrix","classes/Matrix.html#method-i-inspect","()","<p>Overrides Object#inspect\n"],["inspect","Method","classes/Method.html#method-i-inspect","()","<p>Returns the name of the underlying method.\n\n<pre><code>&quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: String#count&gt;&quot;\n</code></pre>\n"],["inspect","MultiTkIp","classes/MultiTkIp.html#method-i-inspect","()",""],["inspect","MultiTkIp","classes/MultiTkIp.html#method-i-inspect","()",""],["inspect","MultiTkIp","classes/MultiTkIp.html#method-i-inspect","()",""],["inspect","MultiTkIp","classes/MultiTkIp.html#method-i-inspect","()",""],["inspect","Net::HTTP","classes/Net/HTTP.html#method-i-inspect","()",""],["inspect","Net::HTTP","classes/Net/HTTP.html#method-i-inspect","()",""],["inspect","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-inspect","()",""],["inspect","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-inspect","()",""],["inspect","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-inspect","()",""],["inspect","Net::POP3","classes/Net/POP3.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::POP3","classes/Net/POP3.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::POP3","classes/Net/POP3.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::POP3","classes/Net/POP3.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::POPMail","classes/Net/POPMail.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::SMTP","classes/Net/SMTP.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::SMTP","classes/Net/SMTP.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","NilClass","classes/NilClass.html#method-i-inspect","()","<p>Always returns the string “nil”.\n"],["inspect","Object","classes/Object.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of\n<em>obj</em>. If not overridden and no instance …\n"],["inspect","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-inspect","()",""],["inspect","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-inspect","()",""],["inspect","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-inspect","()",""],["inspect","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-inspect","()",""],["inspect","OpenStruct","classes/OpenStruct.html#method-i-inspect","()","<p>Returns a string containing a detailed summary of the keys and values.\n"],["inspect","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-inspect","()",""],["inspect","Process::Status","classes/Process/Status.html#method-i-inspect","()","<p>Override the inspection method.\n\n<pre><code>system(&quot;false&quot;)\np $?.inspect #=&gt; &quot;#&lt;Process::Status: pid 12861 exit 1&gt;&quot;\n</code></pre>\n"],["inspect","REXML::Attribute","classes/REXML/Attribute.html#method-i-inspect","()",""],["inspect","REXML::Element","classes/REXML/Element.html#method-i-inspect","()",""],["inspect","REXML::Instruction","classes/REXML/Instruction.html#method-i-inspect","()",""],["inspect","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-inspect","()",""],["inspect","REXML::Text","classes/REXML/Text.html#method-i-inspect","()",""],["inspect","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-inspect","()",""],["inspect","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-inspect","()",""],["inspect","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-inspect","()",""],["inspect","REXML::Validation::Ref","classes/REXML/Validation/Ref.html#method-i-inspect","()",""],["inspect","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-inspect","()",""],["inspect","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-inspect","()",""],["inspect","Rake::Task","classes/Rake/Task.html#method-i-inspect","()",""],["inspect","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-inspect","()",""],["inspect","Range","classes/Range.html#method-i-inspect","()","<p>Convert this range object to a printable form (using <code>inspect</code>\nto convert the start and end objects).\n"],["inspect","Rational","classes/Rational.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n<p>For example:\n\n<pre><code>Rational(2).inspect      #=&gt; &quot;(2/1)&quot;\nRational(-8, ...\n</code></pre>\n"],["inspect","Regexp","classes/Regexp.html#method-i-inspect","()","<p>Produce a nicely formatted string-version of <em>rxp</em>. Perhaps\nsurprisingly, <code>#inspect</code> actually produces the …\n"],["inspect","RubyVM::Instruction","classes/RubyVM/Instruction.html#method-i-inspect","()",""],["inspect","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-inspect","()",""],["inspect","Set","classes/Set.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the set.\n(“#&lt;Set: {element1, element2, …\n"],["inspect","Shell","classes/Shell.html#method-i-inspect","()",""],["inspect","Shell::Filter","classes/Shell/Filter.html#method-i-inspect","()",""],["inspect","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-inspect","()","<p>returns a string which shows ancillarydata in human-readable form.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, ...</code></pre>\n"],["inspect","Socket::Option","classes/Socket/Option.html#method-i-inspect","()","<p>Returns a string which shows sockopt in human-readable form.\n\n<pre><code>p Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, ...</code></pre>\n"],["inspect","String","classes/String.html#method-i-inspect","()","<p>Returns a printable version of <em>str</em>, surrounded by quote marks,\nwith special characters escaped.\n\n<pre><code>str = ...</code></pre>\n"],["inspect","StringScanner","classes/StringScanner.html#method-i-inspect","()","<p>Returns a string that represents the StringScanner object, showing:\n<p>the current position\n<p>the size of the …\n"],["inspect","Struct","classes/Struct.html#method-i-inspect","()","<p>Describe the contents of this struct in a string.\n"],["inspect","Syck::SpecialHash","classes/Syck/SpecialHash.html#method-i-inspect","()",""],["inspect","Symbol","classes/Symbol.html#method-i-inspect","()","<p>Returns the representation of <em>sym</em> as a symbol literal.\n\n<pre><code>:fred.inspect   #=&gt; &quot;:fred&quot;\n</code></pre>\n"],["inspect","Syslog","classes/Syslog.html#method-c-inspect","()","<p>Returns an inspect() string summarizing the object state.\n"],["inspect","Thread","classes/Thread.html#method-i-inspect","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["inspect","Time","classes/Time.html#method-i-inspect","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n<code>Time#strftime</code> with a format string of “<code>%Y-%m-%d</code> …\n"],["inspect","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-inspect","()",""],["inspect","TkCallbackEntry","classes/TkCallbackEntry.html#method-c-inspect","()","<p>/\n"],["inspect","TkComposite","classes/TkComposite.html#method-i-inspect","()",""],["inspect","TkCore","classes/TkCore.html#method-i-inspect","()",""],["inspect","TkFont","classes/TkFont.html#method-i-inspect","()",""],["inspect","TkFont","classes/TkFont.html#method-i-inspect","()",""],["inspect","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-inspect","()",""],["inspect","TkUtil::CallbackSubst::Info","classes/TkUtil/CallbackSubst/Info.html#method-c-inspect","()",""],["inspect","TkVariable","classes/TkVariable.html#method-i-inspect","()",""],["inspect","TkVariable","classes/TkVariable.html#method-i-inspect","()",""],["inspect","URI::Generic","classes/URI/Generic.html#method-i-inspect","()",""],["inspect","URI::Parser","classes/URI/Parser.html#method-i-inspect","()",""],["inspect","UnboundMethod","classes/UnboundMethod.html#method-i-inspect","()","<p>Returns the name of the underlying method.\n\n<pre><code>&quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: String#count&gt;&quot;\n</code></pre>\n"],["inspect","Vector","classes/Vector.html#method-i-inspect","()","<p>Overrides Object#inspect\n"],["inspect","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-inspect","()","<p>Returns the method name with class name.\n"],["inspect","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-inspect","()","<p>Returns the parameter name with class name. If the parameter has default\nvalue, then returns name=value …\n"],["inspect","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-inspect","()","<p>Returns the type name with class name.\n\n<pre><code>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;)\nie.ole_type.inspect ...</code></pre>\n"],["inspect","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-inspect","()","<p>Returns the type library name with class name.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object ...</code></pre>\n"],["inspect","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-inspect","()","<p>Returns the OLE variable name and the value with class name.\n"],["inspect","Win32::Registry","classes/Win32/Registry.html#method-i-inspect","()",""],["inspect","Zlib::GzipFile::Error","classes/Zlib/GzipFile/Error.html#method-i-inspect","()","<p>Constructs a String of the GzipFile Error\n"],["inspect?","IRB::Context","classes/IRB/Context.html#method-i-inspect-3F","()",""],["inspect_last_value","IRB::Context","classes/IRB/Context.html#method-i-inspect_last_value","()",""],["inspect_mode=","IRB::Context","classes/IRB/Context.html#method-i-inspect_mode-3D","(opt)",""],["inspect_sockaddr","Addrinfo","classes/Addrinfo.html#method-i-inspect_sockaddr","()","<p>returns a string which shows the sockaddr in <em>addrinfo</em> with\nhuman-readable form.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, ...</code></pre>\n"],["inspect_value","IRB::Inspector","classes/IRB/Inspector.html#method-i-inspect_value","(v)",""],["install","FileUtils","classes/FileUtils.html#method-c-install","(src, dest, options = {})","<p>Options: mode preserve noop verbose\n<p>If <code>src</code> is not same as <code>dest</code>, copies it and changes\nthe permission mode …\n"],["install","Gem::DependencyInstaller","classes/Gem/DependencyInstaller.html#method-i-install","(dep_or_name, version = Gem::Requirement.default)","<p>Installs the gem <code>dep_or_name</code> and all its dependencies. \nReturns an Array of installed gem specifications. …\n"],["install","Gem::Installer","classes/Gem/Installer.html#method-i-install","()","<p>Installs the gem and returns a loaded Gem::Specification for the installed\ngem.\n<p>The gem will be installed …\n"],["install","Object","classes/Object.html#method-i-install","()","<p>Copy SOURCE to DEST.\n\n<pre><code>ruby -run -e install -- [OPTION] SOURCE DEST\n\n-p          apply access/modification ...</code></pre>\n"],["install","Sys","classes/Sys.html#method-i-install","(wildcard, dest_dir, mode)","<p>Install all the files matching <code>wildcard</code> into the\n<code>dest_dir</code> directory.  The permission mode is set to  …\n"],["install_acl","DRb","classes/DRb.html#method-c-install_acl","(acl)","<p>Set the default acl.\n<p>See DRb::DRbServer.default_acl.\n"],["install_alias_method","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-install_alias_method","(to, from, override = NO_OVERRIDE)","<p>override = {NO_OVERRIDE, OVERRIDE_PRIVATE_ONLY, OVERRIDE_ALL}\n"],["install_alias_method","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-install_alias_method","(to, from, override = NO_OVERRIDE)","<p>override = {NO_OVERRIDE, OVERRIDE_PRIVATE_ONLY, OVERRIDE_ALL}\n"],["install_bind","TkEvent","classes/TkEvent.html#method-i-install_bind","(cmd, *args)",""],["install_bind_for_event_class","TkEvent","classes/TkEvent.html#method-i-install_bind_for_event_class","(klass, cmd, *args)",""],["install_builtin_commands","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-install_builtin_commands","()","<p>define default builtin commands\n"],["install_class_name","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-install_class_name","(uri, tag_name, class_name)","<p>record class_name for the supplied uri and tag_name\n"],["install_cmd","TkComm","classes/TkComm.html#method-i-install_cmd","(cmd)","<p>private :install_cmd, :uninstall_cmd module_function :install_cmd,\n:uninstall_cmd\n"],["install_cmd","TkComm","classes/TkComm.html#method-c-install_cmd","(cmd, local_cmdtbl=nil)",""],["install_cmd","TkUtil","classes/TkUtil.html#method-c-install_cmd","(p1 = v1)",""],["install_date_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_date_element","(tag_name, uri, occurs, name=nil, type=nil, disp_name=nil)",""],["install_dublin_core","RSS::Maker::DublinCoreModel","classes/RSS/Maker/DublinCoreModel.html#method-c-install_dublin_core","(klass)",""],["install_executables","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-install_executables","(bin_dir)",""],["install_extend_commands","IRB::ContextExtender","classes/IRB/ContextExtender.html#method-c-install_extend_commands","()",""],["install_extend_commands","IRB::ContextExtender","classes/IRB/ContextExtender.html#method-c-install_extend_commands","()",""],["install_extend_commands","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-install_extend_commands","()",""],["install_extend_commands","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-install_extend_commands","()",""],["install_get_attribute","RSS::Element","classes/RSS/Element.html#method-i-install_get_attribute","(name, uri, required=true, type=nil, disp_name=nil, element_name=nil)",""],["install_get_text_element","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-install_get_text_element","(uri, name, accessor_base)",""],["install_have_attribute_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_have_attribute_element","(tag_name, uri, occurs, name=nil, type=nil)",""],["install_have_child_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_have_child_element","(tag_name, uri, occurs, name=nil, type=nil)",""],["install_have_children_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_have_children_element","(tag_name, uri, occurs, name=nil, plural_name=nil)",""],["install_id_conv","DRb","classes/DRb.html#method-c-install_id_conv","(idconv)","<p>Set the default id conv object.\n<p>See DRbServer#default_id_conv.\n"],["install_image_favicon","RSS::Maker::ImageFaviconModel","classes/RSS/Maker/ImageFaviconModel.html#method-c-install_image_favicon","(klass)",""],["install_image_item","RSS::Maker::ImageItemModel","classes/RSS/Maker/ImageItemModel.html#method-c-install_image_item","(klass)",""],["install_indicies","Gem::Indexer","classes/Gem/Indexer.html#method-i-install_indicies","()","<p>Install generated indicies into the destination directory.\n"],["install_lib","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-install_lib","(lib_dir)",""],["install_list","ACL","classes/ACL.html#method-i-install_list","(list)","<p>Adds <code>list</code> of ACL entries to this ACL.\n"],["install_model","RSS::Element","classes/RSS/Element.html#method-i-install_model","(tag, uri, occurs=nil, getter=nil, plural=false)",""],["install_must_call_validator","RSS::Element","classes/RSS/Element.html#method-i-install_must_call_validator","(prefix, uri)",""],["install_ns","RSS::Element","classes/RSS/Element.html#method-i-install_ns","(prefix, uri)",""],["install_rdoc","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-install_rdoc","()",""],["install_rdoc","Gem::DocManager","classes/Gem/DocManager.html#method-i-install_rdoc","()","<p>Generate and install RDoc into the documentation directory\n"],["install_ri","Gem::DocManager","classes/Gem/DocManager.html#method-i-install_ri","()","<p>Generate and install RI into the documentation directory\n"],["install_siginfo_handler","RDoc::Generator::RI","classes/RDoc/Generator/RI.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["install_siginfo_handler","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["install_system_commands","Shell","classes/Shell.html#method-c-install_system_commands","(pre = \"sys_\")",""],["install_system_commands","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-install_system_commands","(pre = \"sys_\")","<p>CommandProcessor.install_system_commands(pre)\n\n<pre><code>pre: String - command name prefix</code></pre>\n<p>defines every command which …\n"],["install_taxo_topic","RSS::Maker::TaxonomyTopicModel","classes/RSS/Maker/TaxonomyTopicModel.html#method-c-install_taxo_topic","(klass)",""],["install_taxo_topics","RSS::Maker::TaxonomyTopicsModel","classes/RSS/Maker/TaxonomyTopicsModel.html#method-c-install_taxo_topics","(klass)",""],["install_text_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_text_element","(tag_name, uri, occurs, name=nil, type=nil, disp_name=nil)",""],["install_update_defaults_str","Gem::InstallUpdateOptions","classes/Gem/InstallUpdateOptions.html#method-i-install_update_defaults_str","()","<p>Default options for the gem install command.\n"],["installation_path","Gem::Specification","classes/Gem/Specification.html#method-i-installation_path","()","<p>The directory that this gem was installed into. TODO: rename - horrible.\nthis is the base_dir for a gem …\n"],["installation_satisfies_dependency?","Gem::Installer","classes/Gem/Installer.html#method-i-installation_satisfies_dependency-3F","(dependency)","<p>True if the gems in the source_index satisfy <code>dependency</code>.\n"],["installed_spec_directories","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-installed_spec_directories","()","<p>Returns a list of directories from Gem.path that contain specifications.\n"],["installed_spec_directories","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-installed_spec_directories","()","<p>Returns a list of directories from Gem.path that contain specifications.\n"],["instance","CSV","classes/CSV.html#method-c-instance","(data = $stdout, options = Hash.new)","<p>This method will return a CSV instance, just like CSV::new(), but the\ninstance will be cached and returned …\n"],["instance","Gem::CommandManager","classes/Gem/CommandManager.html#method-c-instance","()","<p>Return the authoritative instance of the command manager.\n"],["instance","Prime","classes/Prime.html#method-i-instance","()","<p>Returns the default instance of Prime.\n"],["instance","Syslog","classes/Syslog.html#method-c-instance","()","<p>Returns self, for backward compatibility.\n"],["instance_attributes","RDoc::Context","classes/RDoc/Context.html#method-i-instance_attributes","()","<p>Instance attributes\n"],["instance_delegate","Forwardable","classes/Forwardable.html#method-i-instance_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols. \nThese symbols correspond …\n"],["instance_eval","BasicObject","classes/BasicObject.html#method-i-instance_eval","(*args)","<p>Evaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver …\n"],["instance_eval","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-instance_eval","(*args, &b)",""],["instance_exec","BasicObject","classes/BasicObject.html#method-i-instance_exec","(*args)","<p>Executes the given block within the context of the receiver (<em>obj</em>).\nIn order to set the context, the variable …\n"],["instance_method","Module","classes/Module.html#method-i-instance_method","(p1)","<p>Returns an <code>UnboundMethod</code> representing the given instance\nmethod in <em>mod</em>.\n\n<pre><code>class Interpreter\n  def do_a() ...\n</code></pre>\n"],["instance_method_list","RDoc::Context","classes/RDoc/Context.html#method-i-instance_method_list","()","<p>Instance methods\n"],["instance_methods","Module","classes/Module.html#method-i-instance_methods","(*args)","<p>Returns an array containing the names of the public and protected instance\nmethods in the receiver.  …\n"],["instance_methods","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-instance_methods","()","<p>Instance methods cache accessor.  Maps a class to an Array of its instance\nmethods (not full name).\n"],["instance_of?","Object","classes/Object.html#method-i-instance_of-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an instance of the given\nclass. See also <code>Object#kind_of?</code>.\n\n<pre><code>class A;     end\nclass ...\n</code></pre>\n"],["instance_variable_defined?","Object","classes/Object.html#method-i-instance_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given instance variable is defined in\n<em>obj</em>.\n\n<pre><code>class Fred\n  def initialize(p1, p2)\n   ...\n</code></pre>\n"],["instance_variable_get","Object","classes/Object.html#method-i-instance_variable_get","(p1)","<p>Returns the value of the given instance variable, or nil if the instance\nvariable is not set. The <code>@</code> part …\n"],["instance_variable_get","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-instance_variable_get","(key)",""],["instance_variable_set","Object","classes/Object.html#method-i-instance_variable_set","(p1, p2)","<p>Sets the instance variable names by <em>symbol</em> to <em>object</em>,\nthereby frustrating the efforts of the class&#39;s …\n"],["instance_variable_set","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-instance_variable_set","(key, value)",""],["instance_variables","Object","classes/Object.html#method-i-instance_variables","()","<p>Returns an array of instance variable names for the receiver. Note that\nsimply defining an accessor does …\n"],["instance_variables","Tk::EncodedString","classes/Tk/EncodedString.html#method-i-instance_variables","()",""],["instruction","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-instruction","(name, instruction)","<p>Called when an instruction is encountered.  EG: &lt;?xsl\nsheet=&#39;foo&#39;?&gt; @p name the instruction …\n"],["instruction","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-instruction","(name, content)",""],["instruction?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-instruction-3F","()","<p>Content: [ String text ]\n"],["instructions","REXML::Element","classes/REXML/Element.html#method-i-instructions","()","<p>Get an array of all Instruction children. IMMUTABLE\n"],["int","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-int","()","<p>Returns the data in <em>ancillarydata</em> as an int.\n<p>The size and endian is dependent on the host.\n\n<pre><code>ancdata = Socket::AncillaryData.int(:UNIX, ...</code></pre>\n"],["int","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-int","(p1, p2, p3, p4)","<p>Creates a new Socket::AncillaryData object which contains a int as data.\n<p>The size and endian is dependent …\n"],["int","Socket::Option","classes/Socket/Option.html#method-c-int","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains an int as data.\n<p>The size and endian is dependent on …\n"],["int","Socket::Option","classes/Socket/Option.html#method-i-int","()","<p>Returns the data in <em>sockopt</em> as an int.\n<p>The size and endian is dependent on the platform.\n\n<pre><code>sockopt = Socket::Option.int(:INET, ...</code></pre>\n"],["int","XMLRPC::Convert","classes/XMLRPC/Convert.html#method-c-int","(str)",""],["int_from_prime_division","Prime","classes/Prime.html#method-i-int_from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>Parameters\n<p><code>pd</code> &mdash; Array of pairs of integers. The …\n"],["integer?","Integer","classes/Integer.html#method-i-integer-3F","()","<p>Always returns <code>true</code>.\n"],["integer?","Integer","classes/Integer.html#method-i-integer-3F","()","<p>Always returns <code>true</code>.\n"],["integer?","Numeric","classes/Numeric.html#method-i-integer-3F","()","<p>Returns <code>true</code> if <em>num</em> is an <code>Integer</code>\n(including <code>Fixnum</code> and <code>Bignum</code>).\n"],["interact","FileViewer","classes/FileViewer.html#method-i-interact","()","<p>Allow the user to interact with the display. This uses EMACS-like\nkeybindings, and also vi-like keybindings …\n"],["interactive","Object","classes/Object.html#method-i-interactive","(str)",""],["interactive","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-interactive","()","<p>Runs ri interactively using Readline if it is available.\n"],["interface","XMLRPC","classes/XMLRPC.html#method-c-interface","(prefix, &p)","<p>short-form to create a Service::Interface\n"],["intern","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-intern","(task_class, task_name)","<p>Lookup a task.  Return an existing task if found, otherwise create a task\nof the current type.\n"],["intern","String","classes/String.html#method-i-intern","()","<p>Returns the <code>Symbol</code> corresponding to <em>str</em>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code> …\n"],["intern","Symbol","classes/Symbol.html#method-i-intern","()","<p>In general, <code>to_sym</code> returns the <code>Symbol</code>\ncorresponding to an object. As <em>sym</em> is already a symbol,\n<code>self</code> is …\n"],["internal_encoding","ARGF","classes/ARGF.html#method-i-internal_encoding","()","<p>Returns the internal encoding for strings read from <code>ARGF</code> as an\n<code>Encoding</code> object.\n<p>If <code>ARGF.set_encoding</code> has …\n"],["internal_encoding","IO","classes/IO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified. \nOtherwise returns nil.\n"],["internal_encoding","StringIO","classes/StringIO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified. \nOtherwise returns nil.\n"],["interps","TkWinfo","classes/TkWinfo.html#method-c-interps","(win=nil)",""],["interps","TkWinfo","classes/TkWinfo.html#method-c-interps","(win=nil)",""],["interrupt","DEBUGGER__","classes/DEBUGGER__.html#method-i-interrupt","()",""],["interrupt","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-i-interrupt","(thread, id, exception)","<p>Interrupts the timeout handler <code>id</code> and raises\n<code>exception</code>\n"],["intersection","Set","classes/Set.html#method-i-intersection","(enum)",""],["interval","Tk::RbWidget::BalloonHelp","classes/Tk/RbWidget/BalloonHelp.html#method-i-interval","(val)",""],["interval","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-interval","(series, xcrd, ymin, ymax, ycenter=None)",""],["inuse","Tk::BWidget","classes/Tk/BWidget.html#method-c-inuse","(klass)",""],["inuse","TkImage","classes/TkImage.html#method-i-inuse","()",""],["inv","Matrix","classes/Matrix.html#method-i-inv","()",""],["invalid_namespace?","MultiTkIp","classes/MultiTkIp.html#method-i-invalid_namespace-3F","()",""],["invalid_namespace?","MultiTkIp","classes/MultiTkIp.html#method-i-invalid_namespace-3F","()",""],["invalid_namespace?","MultiTkIp","classes/MultiTkIp.html#method-i-invalid_namespace-3F","()",""],["invalid_namespace?","MultiTkIp","classes/MultiTkIp.html#method-i-invalid_namespace-3F","()",""],["invalid_namespace?","RemoteTkIp","classes/RemoteTkIp.html#method-i-invalid_namespace-3F","()",""],["invalid_namespace?","TclTkIp","classes/TclTkIp.html#method-i-invalid_namespace-3F","()","<p>is deleted?\n"],["inverse","Matrix","classes/Matrix.html#method-i-inverse","()","<p>Returns the inverse of the matrix.\n\n<pre><code>Matrix[[-1, -1], [0, -1]].inverse\n  =&gt; -1  1\n      0 -1\n</code></pre>\n"],["invert","DBM","classes/DBM.html#method-i-invert","()","<p>Returns a Hash (not a DBM database) created by using each value in the\ndatabase as a key, with the corresponding …\n"],["invert","ENV","classes/ENV.html#method-c-invert","()","<p>Returns a new hash created by using environment variable names as values\nand values as names.\n"],["invert","GDBM","classes/GDBM.html#method-i-invert","()","<p>Returns a hash created by using <em>gdbm</em>&#39;s values as keys, and the\nkeys as values.\n"],["invert","Hash","classes/Hash.html#method-i-invert","()","<p>Returns a new hash created by using <em>hsh</em>&#39;s values as keys, and\nthe keys as values.\n\n<pre><code>h = { &quot;n&quot; =&gt; 100, ...\n</code></pre>\n"],["invert","SDBM","classes/SDBM.html#method-i-invert","()",""],["invert","YAML::DBM","classes/YAML/DBM.html#method-i-invert","()","<p>Returns a Hash (not a DBM database) created by using each value in the\ndatabase as a key, with the corresponding …\n"],["invert!","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-invert-21","()",""],["investigation","Rake::Task","classes/Rake/Task.html#method-i-investigation","()","<p>Return a string describing the internal state of a task.  Useful for\ndebugging.\n"],["invkind","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-invkind","()","<p>Returns the method invoke kind.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...</code></pre>\n"],["invoke","Gem::Command","classes/Gem/Command.html#method-i-invoke","(*args)","<p>Invoke the command with the given list of arguments.\n"],["invoke","Rake::Task","classes/Rake/Task.html#method-i-invoke","(*args)","<p>Invoke the task if it is needed.  Prerequisites are invoked first.\n"],["invoke","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-invoke","(index)",""],["invoke","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-invoke","()",""],["invoke","Tk::BWidget::ButtonBox","classes/Tk/BWidget/ButtonBox.html#method-i-invoke","(idx)",""],["invoke","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-invoke","(idx)",""],["invoke","Tk::BWidget::Entry","classes/Tk/BWidget/Entry.html#method-i-invoke","()",""],["invoke","Tk::Button","classes/Tk/Button.html#method-i-invoke","()","<p>def create_self(keys)\n\n<pre><code>if keys and keys != None\n  tk_call_without_enc(&#39;button&#39;, @path, *hash_kv(keys, true)) ...</code></pre>\n"],["invoke","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-invoke","(idx=nil)",""],["invoke","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-invoke","(idx=nil)",""],["invoke","Tk::Iwidgets::Extbutton","classes/Tk/Iwidgets/Extbutton.html#method-i-invoke","()",""],["invoke","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-invoke","(idx)",""],["invoke","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-invoke","(idx=nil)",""],["invoke","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-invoke","(name=nil)",""],["invoke","Tk::Iwidgets::Pushbutton","classes/Tk/Iwidgets/Pushbutton.html#method-i-invoke","()",""],["invoke","Tk::Menu","classes/Tk/Menu.html#method-i-invoke","(index)",""],["invoke","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-invoke","(index)",""],["invoke","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-invoke","(index)",""],["invoke","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-invoke","(elem)",""],["invoke","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-invoke","(elem)",""],["invoke","WIN32OLE","classes/WIN32OLE.html#method-i-invoke","(*args)","<p>Runs OLE method. The first argument specifies the method name of OLE\nAutomation object. The others specify …\n"],["invoke_hidden","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden","(slave, cmd, *args)",""],["invoke_hidden","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden","(slave, cmd, *args)",""],["invoke_hidden","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden","(slave, cmd, *args)",""],["invoke_hidden","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden","(slave, cmd, *args)",""],["invoke_hidden","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden","(slave, cmd, *args)",""],["invoke_hidden","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden","(slave, cmd, *args)",""],["invoke_hidden","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden","(slave, cmd, *args)",""],["invoke_hidden","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden","(slave, cmd, *args)",""],["invoke_hidden_on_global","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden_on_global","(slave, cmd, *args)",""],["invoke_hidden_on_global","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden_on_global","(slave, cmd, *args)",""],["invoke_hidden_on_global","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden_on_global","(slave, cmd, *args)",""],["invoke_hidden_on_global","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden_on_global","(slave, cmd, *args)",""],["invoke_hidden_on_global","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden_on_global","(slave, cmd, *args)",""],["invoke_hidden_on_global","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden_on_global","(slave, cmd, *args)",""],["invoke_hidden_on_global","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden_on_global","(slave, cmd, *args)",""],["invoke_hidden_on_global","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden_on_global","(slave, cmd, *args)",""],["invoke_hidden_on_namespace","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden_on_namespace","(slave, ns, cmd, *args)",""],["invoke_hidden_on_namespace","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden_on_namespace","(slave, ns, cmd, *args)",""],["invoke_hidden_on_namespace","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden_on_namespace","(slave, ns, cmd, *args)",""],["invoke_hidden_on_namespace","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden_on_namespace","(slave, ns, cmd, *args)",""],["invoke_hidden_on_namespace","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden_on_namespace","(slave, ns, cmd, *args)",""],["invoke_hidden_on_namespace","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden_on_namespace","(slave, ns, cmd, *args)",""],["invoke_hidden_on_namespace","MultiTkIp","classes/MultiTkIp.html#method-c-invoke_hidden_on_namespace","(slave, ns, cmd, *args)",""],["invoke_hidden_on_namespace","MultiTkIp","classes/MultiTkIp.html#method-i-invoke_hidden_on_namespace","(slave, ns, cmd, *args)",""],["invoke_kind","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-invoke_kind","()","<p>Returns the method kind string. The string is “UNKNOWN” or “PROPERTY” or\n“PROPERTY” …\n"],["invoke_task","Rake::Application","classes/Rake/Application.html#method-i-invoke_task","(task_string)","<p>private —————————————————————-\n"],["invoke_task","Rake::Application","classes/Rake/Application.html#method-i-invoke_task","(task_string)","<p>private —————————————————————-\n"],["invoke_validate","Tk::Entry","classes/Tk/Entry.html#method-i-invoke_validate","()",""],["invtransform","Tk::BLT::Barchart","classes/Tk/BLT/Barchart.html#method-i-invtransform","(x, y)",""],["invtransform","Tk::BLT::Graph","classes/Tk/BLT/Graph.html#method-i-invtransform","(x, y)",""],["invtransform","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-invtransform","(val)",""],["invtransform","Tk::BLT::Stripchart","classes/Tk/BLT/Stripchart.html#method-i-invtransform","(x, y)",""],["ioctl","IO","classes/IO.html#method-i-ioctl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query I/O\ndevices. Arguments and results …\n"],["ioctrl","TkTextIO","classes/TkTextIO.html#method-i-ioctrl","(*args)",""],["ioflush","IO","classes/IO.html#method-i-ioflush","()","<p>Flushes input and output buffers in kernel.\n<p>You must require &#39;io/console&#39; to use this method. …\n"],["ip","Addrinfo","classes/Addrinfo.html#method-c-ip","(p1)","<p>returns an addrinfo object for IP address.\n<p>The port, socktype, protocol of the result is filled by zero. …\n"],["ip6_arpa","IPAddr","classes/IPAddr.html#method-i-ip6_arpa","()","<p>Returns a string for DNS reverse lookup compatible with RFC3172.\n"],["ip6_int","IPAddr","classes/IPAddr.html#method-i-ip6_int","()","<p>Returns a string for DNS reverse lookup compatible with RFC1886.\n"],["ip?","Addrinfo","classes/Addrinfo.html#method-i-ip-3F","()","<p>returns true if addrinfo is internet (IPv4/IPv6) address. returns false\notherwise.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, ...</code></pre>\n"],["ip_address","Addrinfo","classes/Addrinfo.html#method-i-ip_address","()","<p>Returns the IP address as a string.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_address    #=&gt; &quot;127.0.0.1&quot;\nAddrinfo.tcp(&quot;::1&quot;, ...\n</code></pre>\n"],["ip_address_list","Socket","classes/Socket.html#method-c-ip_address_list","()","<p>Returns local IP addresses as an array.\n<p>The array contains Addrinfo objects.\n\n<pre><code>pp Socket.ip_address_list ...</code></pre>\n"],["ip_name","MultiTkIp","classes/MultiTkIp.html#method-c-ip_name","()",""],["ip_name","MultiTkIp","classes/MultiTkIp.html#method-i-ip_name","()",""],["ip_name","MultiTkIp","classes/MultiTkIp.html#method-c-ip_name","()",""],["ip_name","MultiTkIp","classes/MultiTkIp.html#method-c-ip_name","()",""],["ip_name","MultiTkIp","classes/MultiTkIp.html#method-i-ip_name","()",""],["ip_name","MultiTkIp","classes/MultiTkIp.html#method-i-ip_name","()",""],["ip_name","MultiTkIp","classes/MultiTkIp.html#method-i-ip_name","()",""],["ip_name","MultiTkIp","classes/MultiTkIp.html#method-c-ip_name","()",""],["ip_pktinfo","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-ip_pktinfo","()","<p>Extracts addr, ifindex and spec_dst from IP_PKTINFO ancillary data.\n<p>IP_PKTINFO is not standard.\n<p>Supported …\n"],["ip_pktinfo","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-ip_pktinfo","(p1, p2, p3 = v3)","<p>Returns new ancillary data for IP_PKTINFO.\n<p>If spec_dst is not given, addr is used.\n<p>IP_PKTINFO is not standard. …\n"],["ip_port","Addrinfo","classes/Addrinfo.html#method-i-ip_port","()","<p>Returns the port number as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_port    #=&gt; 80\nAddrinfo.tcp(&quot;::1&quot;, ...\n</code></pre>\n"],["ip_unpack","Addrinfo","classes/Addrinfo.html#method-i-ip_unpack","()","<p>Returns the IP address and port number as 2-element array.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_unpack    ...</code></pre>\n"],["ipv4?","Addrinfo","classes/Addrinfo.html#method-i-ipv4-3F","()","<p>returns true if addrinfo is IPv4 address. returns false otherwise.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ipv4? ...</code></pre>\n"],["ipv4?","IPAddr","classes/IPAddr.html#method-i-ipv4-3F","()","<p>Returns true if the ipaddr is an IPv4 address.\n"],["ipv4_compat","IPAddr","classes/IPAddr.html#method-i-ipv4_compat","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an\nIPv4-compatible IPv6 address. …\n"],["ipv4_compat?","IPAddr","classes/IPAddr.html#method-i-ipv4_compat-3F","()","<p>Returns true if the ipaddr is an IPv4-compatible IPv6 address.\n"],["ipv4_loopback?","Addrinfo","classes/Addrinfo.html#method-i-ipv4_loopback-3F","()","<p>Returns true for IPv4 loopback address (127.0.0.0/8). It returns false\notherwise.\n"],["ipv4_mapped","IPAddr","classes/IPAddr.html#method-i-ipv4_mapped","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an\nIPv4-mapped IPv6 address.\n"],["ipv4_mapped?","IPAddr","classes/IPAddr.html#method-i-ipv4_mapped-3F","()","<p>Returns true if the ipaddr is an IPv4-mapped IPv6 address.\n"],["ipv4_multicast?","Addrinfo","classes/Addrinfo.html#method-i-ipv4_multicast-3F","()","<p>Returns true for IPv4 multicast address (224.0.0.0/4). It returns false\notherwise.\n"],["ipv4_private?","Addrinfo","classes/Addrinfo.html#method-i-ipv4_private-3F","()","<p>Returns true for IPv4 private address (10.0.0.0/8, 172.16.0.0/12,\n192.168.0.0/16). It returns false otherwise. …\n"],["ipv6?","Addrinfo","classes/Addrinfo.html#method-i-ipv6-3F","()","<p>returns true if addrinfo is IPv6 address. returns false otherwise.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ipv6? ...</code></pre>\n"],["ipv6?","IPAddr","classes/IPAddr.html#method-i-ipv6-3F","()","<p>Returns true if the ipaddr is an IPv6 address.\n"],["ipv6_linklocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_linklocal-3F","()","<p>Returns true for IPv6 link local address (ff80::/10). It returns false\notherwise.\n"],["ipv6_loopback?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_loopback-3F","()","<p>Returns true for IPv6 loopback address (::1). It returns false otherwise.\n"],["ipv6_mc_global?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_global-3F","()","<p>Returns true for IPv6 multicast global scope address. It returns false\notherwise.\n"],["ipv6_mc_linklocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_linklocal-3F","()","<p>Returns true for IPv6 multicast link-local scope address. It returns false\notherwise.\n"],["ipv6_mc_nodelocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_nodelocal-3F","()","<p>Returns true for IPv6 multicast node-local scope address. It returns false\notherwise.\n"],["ipv6_mc_orglocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_orglocal-3F","()","<p>Returns true for IPv6 multicast organization-local scope address. It\nreturns false otherwise.\n"],["ipv6_mc_sitelocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_sitelocal-3F","()","<p>Returns true for IPv6 multicast site-local scope address. It returns false\notherwise.\n"],["ipv6_multicast?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_multicast-3F","()","<p>Returns true for IPv6 multicast address (ff00::/8). It returns false\notherwise.\n"],["ipv6_pktinfo","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-ipv6_pktinfo","()","<p>Extracts addr and ifindex from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre><code>addr = ...</code></pre>\n"],["ipv6_pktinfo","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-ipv6_pktinfo","(p1, p2)","<p>Returns new ancillary data for IPV6_PKTINFO.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre><code>addr = Addrinfo.ip(&quot;::1&quot;) ...</code></pre>\n"],["ipv6_pktinfo_addr","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-ipv6_pktinfo_addr","()","<p>Extracts addr from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre><code>addr = Addrinfo.ip(&quot;::1&quot;) ...</code></pre>\n"],["ipv6_pktinfo_ifindex","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-ipv6_pktinfo_ifindex","()","<p>Extracts ifindex from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre><code>addr = Addrinfo.ip(&quot;::1&quot;) ...</code></pre>\n"],["ipv6_sitelocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_sitelocal-3F","()","<p>Returns true for IPv6 site local address (ffc0::/10). It returns false\notherwise.\n"],["ipv6_to_ipv4","Addrinfo","classes/Addrinfo.html#method-i-ipv6_to_ipv4","()","<p>Returns IPv4 address of IPv4 mapped/compatible IPv6 address. It returns nil\nif <code>self</code> is not IPv4 mapped/compatible …\n"],["ipv6_unspecified?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_unspecified-3F","()","<p>Returns true for IPv6 unspecified address (::). It returns false otherwise.\n"],["ipv6_v4compat?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_v4compat-3F","()","<p>Returns true for IPv4-compatible IPv6 address (::/80). It returns false\notherwise.\n"],["ipv6_v4mapped?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_v4mapped-3F","()","<p>Returns true for IPv4-mapped IPv6 address (::ffff:0:0/80). It returns false\notherwise.\n"],["irb","IRB","classes/IRB.html#method-c-irb","(file = nil, *main)","<p>invoke multi-irb\n"],["irb","IRB::ExtendCommand::Nop","classes/IRB/ExtendCommand/Nop.html#method-i-irb","()",""],["irb","IRB::JobManager","classes/IRB/JobManager.html#method-i-irb","(key)",""],["irb_abort","IRB","classes/IRB.html#method-c-irb_abort","(irb, exception = Abort)",""],["irb_at_exit","IRB","classes/IRB.html#method-c-irb_at_exit","()",""],["irb_context","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_context","()",""],["irb_context","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_context","()",""],["irb_exit","IRB","classes/IRB.html#method-c-irb_exit","(irb, ret)",""],["irb_exit","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_exit","(ret = 0)",""],["irb_exit","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_exit","(ret = 0)",""],["irb_level","IRB::Context","classes/IRB/Context.html#method-i-irb_level","()",""],["irb_load","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_load","(*opts, &b)",""],["irb_load","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_load","(*opts, &b)",""],["irb_load","IRB::IrbLoader","classes/IRB/IrbLoader.html#method-i-irb_load","(fn, priv = nil)",""],["irb_original_method_name","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-irb_original_method_name","(method_name)",""],["irb_original_method_name","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-irb_original_method_name","(method_name)",""],["irb_require","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_require","(*opts, &b)",""],["irb_require","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_require","(*opts, &b)",""],["isEqual","Jacobian","classes/Jacobian.html#method-i-isEqual","(a,b,zero=0.0,e=1.0e-8)","<p>Determines the equality of two numbers by comparing to zero, or using the\nepsilon value\n"],["is_a?","Object","classes/Object.html#method-i-is_a-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["is_a?","Rake::FileList","classes/Rake/FileList.html#method-i-is_a-3F","(klass)","<p>Lie about our class.\n"],["is_binary_data?","String","classes/String.html#method-i-is_binary_data-3F","()",""],["is_busy","Tk::BLT::Busy","classes/Tk/BLT/Busy.html#method-i-is_busy","(pat=None)",""],["is_ca?","CertStore","classes/CertStore.html#method-i-is_ca-3F","(cert)",""],["is_complex_yaml?","String","classes/String.html#method-i-is_complex_yaml-3F","()",""],["is_complex_yaml?","Syck::Omap","classes/Syck/Omap.html#method-i-is_complex_yaml-3F","()",""],["is_complex_yaml?","Syck::Pairs","classes/Syck/Pairs.html#method-i-is_complex_yaml-3F","()",""],["is_hash?","TkVariable","classes/TkVariable.html#method-i-is_hash-3F","()",""],["is_hash?","TkVariable","classes/TkVariable.html#method-i-is_hash-3F","()",""],["is_itcl_class","Tk::Itcl","classes/Tk/Itcl.html#method-c-is_itcl_class","(target)",""],["is_itcl_instance","Tk::Itcl","classes/Tk/Itcl.html#method-c-is_itcl_instance","(klass, target)",""],["is_itcl_object","Tk::Itcl","classes/Tk/Itcl.html#method-c-is_itcl_object","(target)",""],["is_macosx?","Object","classes/Object.html#method-i-is_macosx-3F","()",""],["is_rubytk?","RemoteTkIp","classes/RemoteTkIp.html#method-i-is_rubytk-3F","()",""],["is_scalar?","TkVariable","classes/TkVariable.html#method-i-is_scalar-3F","()",""],["is_scalar?","TkVariable","classes/TkVariable.html#method-i-is_scalar-3F","()",""],["is_system_font?","TkFont","classes/TkFont.html#method-c-is_system_font-3F","(fnt)","<p>class methods\n"],["is_system_font?","TkFont","classes/TkFont.html#method-c-is_system_font-3F","(fnt)","<p>class methods\n"],["is_version_1_2?","Net::HTTP","classes/Net/HTTP.html#method-c-is_version_1_2-3F","()",""],["is_version_1_2?","Net::HTTP","classes/Net/HTTP.html#method-c-is_version_1_2-3F","()",""],["is_win32?","Object","classes/Object.html#method-i-is_win32-3F","()","<p>fuctions\n"],["isa","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-isa","(klass)",""],["isa","Tk::Tcllib::Widget","classes/Tk/Tcllib/Widget.html#method-c-isa","(compare_as, *args)",""],["isatty","IO","classes/IO.html#method-i-isatty","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre><code>File.new(&quot;testfile&quot;).isatty ...</code></pre>\n"],["isatty","StringIO","classes/StringIO.html#method-i-isatty","()",""],["isatty","TkTextIO","classes/TkTextIO.html#method-i-isatty","()",""],["isdst","Time","classes/Time.html#method-i-isdst","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre><code># CST6CDT:\n  Time.local(2000, ...</code></pre>\n"],["iseuc","Kconv","classes/Kconv.html#method-c-iseuc","(str)","<p>Returns whether input encoding is EUC-JP or not.\n<p><strong>Note</strong> don&#39;t expect this return value is MatchData …\n"],["iseuc","String","classes/String.html#method-i-iseuc","()","<p>Returns whether <code>self</code>&#39;s encoding is EUC-JP or not.\n"],["isjis","Kconv","classes/Kconv.html#method-c-isjis","(str)","<p>Returns whether input encoding is ISO-2022-JP or not.\n"],["isjis","String","classes/String.html#method-i-isjis","()","<p>Returns whether <code>self</code>&#39;s encoding is ISO-2022-JP or not.\n"],["iso8601","Date","classes/Date.html#method-i-iso8601","()","<p>This method is equivalent to strftime(&#39;%F&#39;).\n"],["iso8601","Date","classes/Date.html#method-c-iso8601","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical ISO 8601 formats.\n<p>For example: …\n"],["iso8601","DateTime","classes/DateTime.html#method-c-iso8601","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical ISO 8601 formats.\n<p>For example: …\n"],["iso8601","DateTime","classes/DateTime.html#method-i-iso8601","(p1 = v1)","<p>This method is equivalent to strftime(&#39;%FT%T&#39;).  The optional\nargument n is length of fractional …\n"],["iso8601","Time","classes/Time.html#method-i-iso8601","(date)",""],["issetugid","Process::Sys","classes/Process/Sys.html#method-c-issetugid","()","<p>Returns <code>true</code> if the process was created as a result of an\nexecve(2) system call which had either of the …\n"],["issjis","Kconv","classes/Kconv.html#method-c-issjis","(str)","<p>Returns whether input encoding is Shift_JIS or not.\n"],["issjis","String","classes/String.html#method-i-issjis","()","<p>Returns whether <code>self</code>&#39;s encoding is Shift_JIS or not.\n"],["issue","Tk::Iwidgets::Messagebox","classes/Tk/Iwidgets/Messagebox.html#method-i-issue","(string, type=None, *args)",""],["issuer","OpenSSL::PKCS7::RecipientInfo","classes/OpenSSL/PKCS7/RecipientInfo.html#method-i-issuer","()",""],["issuer","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-i-issuer","()",""],["issuer","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-issuer","()",""],["issuer","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-issuer","()",""],["issuer=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-issuer-3D","(p1)",""],["issuer=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-issuer-3D","(p1)",""],["issuer_certificate=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-issuer_certificate-3D","(p1)",""],["isutf8","Kconv","classes/Kconv.html#method-c-isutf8","(str)","<p>Returns whether input encoding is UTF-8 or not.\n"],["isutf8","String","classes/String.html#method-i-isutf8","()","<p>Returns whether <code>self</code>&#39;s encoding is UTF-8 or not.\n"],["isvalid?","Tk::Iwidgets::Datefield","classes/Tk/Iwidgets/Datefield.html#method-i-isvalid-3F","()",""],["isvalid?","Tk::Iwidgets::Timefield","classes/Tk/Iwidgets/Timefield.html#method-i-isvalid-3F","()",""],["italy","Date","classes/Date.html#method-i-italy","()","<p>This method is equivalent to new_start(Date::ITALY).\n"],["itcl_kind_of?","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-itcl_kind_of-3F","(klass)",""],["item","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-item","()","<p>PTR item collection of nodes\n\n<pre><code>I4 arg0 --- index [IN]</code></pre>\n"],["item","IXMLDOMNodeList","classes/IXMLDOMNodeList.html#method-i-item","()","<p>PTR item collection of nodes\n\n<pre><code>I4 arg0 --- index [IN]</code></pre>\n"],["itemDrag","Object","classes/Object.html#method-i-itemDrag","(c,x,y)",""],["itemEnter","Object","classes/Object.html#method-i-itemEnter","(c)",""],["itemLeave","Object","classes/Object.html#method-i-itemLeave","(c)",""],["itemMark","Object","classes/Object.html#method-i-itemMark","(c,x,y)","<p>Utility methods for stroking out a rectangle and printing what&#39;s\nunderneath the rectangle&#39;s area. …\n"],["itemStartDrag","Object","classes/Object.html#method-i-itemStartDrag","(c,x,y)","<p>Utility methods to support dragging of items.\n"],["itemStroke","Object","classes/Object.html#method-i-itemStroke","(c,x,y)",""],["item_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_cget","(tagOrId, option)",""],["item_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_cget_strict","(tagOrId, option)",""],["item_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_cget_tkstring","(tagOrId, option)",""],["item_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_configinfo","(tagOrId, slot=nil)",""],["item_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_configure","(tagOrId, slot, value=None)",""],["item_element_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_element_cget","(item, column, elem, option)",""],["item_element_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_element_cget_strict","(item, column, elem, option)",""],["item_element_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_element_cget_tkstring","(item, column, elem, option)",""],["item_element_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_element_configinfo","(item, column, elem, slot=nil)",""],["item_element_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-item_element_configure","(item, column, elem, slot, value=None)",""],["itembind","Tk::Canvas","classes/Tk/Canvas.html#method-i-itembind","(tag, context, *args)","<p>def itembind(tag, context, cmd=Proc.new, *args)\n\n<pre><code>_bind([path, &quot;bind&quot;, tagid(tag)], context, cmd, *args) ...</code></pre>\n"],["itembind","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-itembind","(tag, context, *args)","<p>def itembind(tag, context, cmd=Proc.new, *args)\n\n<pre><code>_bind([path, &quot;bind&quot;, tagid(tag)], context, cmd, *args) ...</code></pre>\n"],["itembind_append","Tk::Canvas","classes/Tk/Canvas.html#method-i-itembind_append","(tag, context, *args)","<p>def itembind_append(tag, context, cmd=Proc.new, *args)\n\n<pre><code>_bind_append([path, &quot;bind&quot;, tagid(tag)], context, ...</code></pre>\n"],["itembind_append","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-itembind_append","(tag, context, *args)","<p>def itembind_append(tag, context, cmd=Proc.new, *args)\n\n<pre><code>_bind_append([path, &quot;bind&quot;, tagid(tag)], context, ...</code></pre>\n"],["itembind_remove","Tk::Canvas","classes/Tk/Canvas.html#method-i-itembind_remove","(tag, context)",""],["itembind_remove","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-itembind_remove","(tag, context)",""],["itembindinfo","Tk::Canvas","classes/Tk/Canvas.html#method-i-itembindinfo","(tag, context=nil)",""],["itembindinfo","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-itembindinfo","(tag, context=nil)",""],["itemcget","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-itemcget","(container, item, option)",""],["itemcget","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-itemcget","(tagOrId, option)",""],["itemcget_strict","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-itemcget_strict","(container, item, option)",""],["itemcget_strict","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-itemcget_strict","(tagOrId, option)",""],["itemcget_tkstring","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-itemcget_tkstring","(container, item, option)",""],["itemcget_tkstring","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-itemcget_tkstring","(tagOrId, option)","<p>Treeview Item\n"],["itemconfig_hash_kv","TkItemConfigOptkeys","classes/TkItemConfigOptkeys.html#method-i-itemconfig_hash_kv","(id, keys, enc_mode = nil, conf = nil)",""],["itemconfiginfo","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-itemconfiginfo","(container, *args)",""],["itemconfiginfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-itemconfiginfo","(tagOrId, slot = nil)",""],["itemconfigure","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-itemconfigure","(container, *args)",""],["itemconfigure","Tk::ItemValidateConfigure","classes/Tk/ItemValidateConfigure.html#method-i-itemconfigure","(tagOrId, slot, value=TkComm::None)",""],["itemconfigure","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-itemconfigure","(tagOrId, slot, value=None)",""],["itemfocus","Tk::Canvas","classes/Tk/Canvas.html#method-i-itemfocus","(tagOrId=nil)",""],["itemfocus","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-itemfocus","(tagOrId=nil)",""],["itemid","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-itemid","(item)",""],["itemid","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-itemid","()",""],["iteminfo","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-iteminfo","(container, item)",""],["items","RSS::Atom::Entry","classes/RSS/Atom/Entry.html#method-i-items","()",""],["items","RSS::Rss","classes/RSS/Rss.html#method-i-items","()",""],["items","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-items","(first=None, last=None)",""],["items","Tk::BWidget::PanelFrame","classes/Tk/BWidget/PanelFrame.html#method-i-items","()",""],["items","Tk::BWidget::StatusBar","classes/Tk/BWidget/StatusBar.html#method-i-items","()",""],["items","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-items","()",""],["items","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-items","()",""],["items","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-i-items","(pat=None)",""],["items","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-items","(pattern)",""],["itemsUnderArea","Object","classes/Object.html#method-i-itemsUnderArea","(c)",""],["itemtype","Tk::Canvas","classes/Tk/Canvas.html#method-i-itemtype","(tag)",""],["itemtype","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-itemtype","(tag)",""],["itemtype","TkImage","classes/TkImage.html#method-i-itemtype","()",""],["itemtype","TkcTagAccess","classes/TkcTagAccess.html#method-i-itemtype","()",""],["iterator?","Kernel","classes/Kernel.html#method-i-iterator-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["iv=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-iv-3D","(p1)","<p>Sets the cipher IV. Please note that since you should never be using ECB\nmode, an IV is always explicitly …\n"],["jacobian","Jacobian","classes/Jacobian.html#method-i-jacobian","(f,fx,x)","<p>Computes the Jacobian of f at x. fx is the value of f at x.\n"],["jd","Date","classes/Date.html#method-i-jd","()","<p>Returns the Julian day number.  This is a whole number, which is adjusted\nby the offset as the local …\n"],["jd","Date","classes/Date.html#method-c-jd","(p1 = v1, p2 = v2)","<p>Creates a date object denoting the given chronological Julian day number.\n<p>For example:\n\n<pre><code>Date.jd(2451944) ...</code></pre>\n"],["jd","DateTime","classes/DateTime.html#method-c-jd","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6)","<p>Creates a datetime object denoting the given chronological Julian day\nnumber.\n<p>For example:\n\n<pre><code>DateTime.jd(2451944) ...</code></pre>\n"],["jisx0301","Date","classes/Date.html#method-i-jisx0301","()","<p>Returns a string in a JIS X 0301 format.\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).jisx0301       #=&gt; &quot;H13.02.03&quot;\n</code></pre>\n"],["jisx0301","Date","classes/Date.html#method-c-jisx0301","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical JIS X 0301 formats.\n<p>For example: …\n"],["jisx0301","DateTime","classes/DateTime.html#method-i-jisx0301","(p1 = v1)","<p>Returns a string in a JIS X 0301 format.  The optional argument n is length\nof fractional seconds.\n<p>For …\n"],["jisx0301","DateTime","classes/DateTime.html#method-c-jisx0301","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical JIS X 0301 formats.\n<p>For example: …\n"],["jobs","Shell","classes/Shell.html#method-i-jobs","()","<p>process management\n"],["jobs","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-jobs","()",""],["jobs_exist?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-jobs_exist-3F","()",""],["join","Array","classes/Array.html#method-i-join","(p1 = v1)","<p>Returns a string created by converting each element of the array to a\nstring, separated by <em>sep</em>.\n\n<pre><code>[ &quot;a&quot;, ...</code></pre>\n"],["join","File","classes/File.html#method-c-join","(*args)","<p>Returns a new string formed by joining the strings using\n<code>File::SEPARATOR</code>.\n\n<pre><code>File.join(&quot;usr&quot;, &quot;mail&quot;, &quot;gumby&quot;) ...</code></pre>\n"],["join","GServer","classes/GServer.html#method-i-join","()","<p>Join with the server thread\n"],["join","Pathname","classes/Pathname.html#method-i-join","(*args)","<p>Pathname#join joins pathnames.\n<p><code>path0.join(path1, ..., pathN)</code> is the same as <code>path0 +\npath1 + ... + pathN</code> …\n"],["join","Shellwords","classes/Shellwords.html#method-c-join","(array)",""],["join","Thread","classes/Thread.html#method-i-join","(p1 = v1)","<p>The calling thread will suspend execution and run <em>thr</em>. Does not\nreturn until <em>thr</em> exits or until <em>limit</em> …\n"],["join","ThreadsWait","classes/ThreadsWait.html#method-i-join","(*threads)","<p>Waits for specified threads to terminate, and returns when one of the\nthreads terminated.\n"],["join","ThreadsWait","classes/ThreadsWait.html#method-i-join","(*threads)","<p>Waits for specified threads to terminate, and returns when one of the\nthreads terminated.\n"],["join","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-join","(container, first, last)",""],["join","URI","classes/URI.html#method-c-join","(*str)","<p>Synopsis\n\n<pre><code>URI::join(str[, str, ...])</code></pre>\n<p>Args\n"],["join","URI::Parser","classes/URI/Parser.html#method-i-join","(*uris)","<p>Args\n<p><code>uris</code> &mdash; an Array of Strings\n\n<p>Description\n"],["join_nowait","ThreadsWait","classes/ThreadsWait.html#method-i-join_nowait","(*threads)","<p>Specifies the threads that this object will wait for, but does not actually\nwait.\n"],["join_nowait","ThreadsWait","classes/ThreadsWait.html#method-i-join_nowait","(*threads)","<p>Specifies the threads that this object will wait for, but does not actually\nwait.\n"],["json_create","Complex","classes/Complex.html#method-c-json_create","(object)",""],["json_create","Date","classes/Date.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> to …\n"],["json_create","DateTime","classes/DateTime.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset <code>of</code> …\n"],["json_create","Exception","classes/Exception.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Exception object with message\n<code>m</code> and backtrace <code>b</code> serialized …\n"],["json_create","JSON::Ext::Generator::GeneratorMethods::String::Extend","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html#method-i-json_create","(p1)","<p>Raw Strings are JSON Objects (the raw bytes are stored in an array for the\nkey “raw”). The …\n"],["json_create","Range","classes/Range.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Range object with arguments\n<code>a</code> serialized by <code>to_json</code>.\n"],["json_create","Rational","classes/Rational.html#method-c-json_create","(object)",""],["json_create","Regexp","classes/Regexp.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Regexp object with source\n<code>s</code> (Regexp or String) and options …\n"],["json_create","Struct","classes/Struct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>v</code> serialized by <code>to_json</code>.\n"],["json_create","Symbol","classes/Symbol.html#method-c-json_create","(o)","<p>Deserializes JSON string by converting the <code>string</code> value stored\nin the object to a Symbol\n"],["json_create","Time","classes/Time.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting time since epoch to Time\n"],["julian","Date","classes/Date.html#method-i-julian","()","<p>This method is equivalent to new_start(Date::JULIAN).\n"],["julian?","Date","classes/Date.html#method-i-julian-3F","()","<p>Retruns true if the date is before the day of calendar reform.\n<p>For example:\n\n<pre><code>Date.new(1582,10,15).julian? ...</code></pre>\n"],["julian_leap?","Date","classes/Date.html#method-c-julian_leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Julian\ncalendar.\n<p>For example:\n\n<pre><code>Date.julian_leap?(1900) ...</code></pre>\n"],["justify","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-justify","(dir)",""],["justify","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-justify","(dir)",""],["justify","Tk::Iwidgets::Scrolledframe","classes/Tk/Iwidgets/Scrolledframe.html#method-i-justify","(dir)",""],["justify","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-justify","(dir)",""],["kanji_actual","TkFont","classes/TkFont.html#method-i-kanji_actual","(option=nil)",""],["kanji_actual","TkFont","classes/TkFont.html#method-i-kanji_actual","(option=nil)",""],["kanji_actual_displayof","TkFont","classes/TkFont.html#method-i-kanji_actual_displayof","(win, option=nil)",""],["kanji_actual_displayof","TkFont","classes/TkFont.html#method-i-kanji_actual_displayof","(win, option=nil)",""],["kanji_actual_hash","TkFont","classes/TkFont.html#method-i-kanji_actual_hash","(option=nil)",""],["kanji_actual_hash","TkFont","classes/TkFont.html#method-i-kanji_actual_hash","(option=nil)",""],["kanji_actual_hash_displayof","TkFont","classes/TkFont.html#method-i-kanji_actual_hash_displayof","(win, option=nil)",""],["kanji_actual_hash_displayof","TkFont","classes/TkFont.html#method-i-kanji_actual_hash_displayof","(win, option=nil)",""],["kanji_configinfo","TkFont","classes/TkFont.html#method-i-kanji_configinfo","(slot=nil)",""],["kanji_configinfo","TkFont","classes/TkFont.html#method-i-kanji_configinfo","(slot=nil)",""],["kanji_configure","TkFont","classes/TkFont.html#method-i-kanji_configure","(slot, value=None)",""],["kanji_configure","TkFont","classes/TkFont.html#method-i-kanji_configure","(slot, value=None)",""],["kanji_current_configinfo","TkFont","classes/TkFont.html#method-i-kanji_current_configinfo","(slot=nil)",""],["kanji_current_configinfo","TkFont","classes/TkFont.html#method-i-kanji_current_configinfo","(slot=nil)",""],["kanji_font","TkFont","classes/TkFont.html#method-i-kanji_font","()",""],["kanji_font","TkFont","classes/TkFont.html#method-i-kanji_font","()",""],["kanji_font_id","TkFont","classes/TkFont.html#method-i-kanji_font_id","()",""],["kanji_font_id","TkFont","classes/TkFont.html#method-i-kanji_font_id","()",""],["kanji_font_id","TkNamedFont","classes/TkNamedFont.html#method-i-kanji_font_id","()",""],["kanji_input_end","TkKinput","classes/TkKinput.html#method-i-kanji_input_end","()",""],["kanji_input_start","TkKinput","classes/TkKinput.html#method-i-kanji_input_start","(keys=nil)",""],["kanji_metrics","TkFont","classes/TkFont.html#method-i-kanji_metrics","(option=nil)",""],["kanji_metrics","TkFont","classes/TkFont.html#method-i-kanji_metrics","(option=nil)",""],["kanji_metrics_displayof","TkFont","classes/TkFont.html#method-i-kanji_metrics_displayof","(win, option=nil)",""],["kanji_metrics_displayof","TkFont","classes/TkFont.html#method-i-kanji_metrics_displayof","(win, option=nil)",""],["kanji_metrics_hash","TkFont","classes/TkFont.html#method-i-kanji_metrics_hash","(option=nil)",""],["kanji_metrics_hash","TkFont","classes/TkFont.html#method-i-kanji_metrics_hash","(option=nil)",""],["kanji_metrics_hash_displayof","TkFont","classes/TkFont.html#method-i-kanji_metrics_hash_displayof","(win, option=nil)",""],["kanji_metrics_hash_displayof","TkFont","classes/TkFont.html#method-i-kanji_metrics_hash_displayof","(win, option=nil)",""],["kanji_replace","TkFont","classes/TkFont.html#method-i-kanji_replace","(knj)",""],["kanji_replace","TkFont","classes/TkFont.html#method-i-kanji_replace","(knj)",""],["kanjifont","TkFont","classes/TkFont.html#method-i-kanjifont","()",""],["kanjifont","TkFont","classes/TkFont.html#method-i-kanjifont","()",""],["kanjifont_configure","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-kanjifont_configure","(knj, keys=nil)",""],["kanjifont_copy","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-kanjifont_copy","(tagOrId, win, wintag=nil, winkey=nil, targetkey=nil)",""],["kanjifont_copy","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-kanjifont_copy","(win, wintag=nil)",""],["kanjitagfont_configure","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-kanjitagfont_configure","(tagOrId, knj, keys=nil)",""],["kconv","Kconv","classes/Kconv.html#method-c-kconv","(str, to_enc, from_enc=nil)","<p>Convert <code>str</code> to <code>to_enc</code>. <code>to_enc</code> and\n<code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["kconv","String","classes/String.html#method-i-kconv","(to_enc, from_enc=nil)","<p>Convert <code>self</code> to <code>to_enc</code>. <code>to_enc</code> and\n<code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["keep_alive?","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-keep_alive-3F","()","<p>Should the connection this request was made on be kept alive?\n"],["keep_alive?","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-keep_alive-3F","()","<p>Will this response&#39;s connection be kept alive?\n"],["keep_if","Array","classes/Array.html#method-i-keep_if","()","<p>Deletes every element of <code>self</code> for which <em>block</em>\nevaluates to false. See also <code>Array#select!</code>\n<p>If no block is …\n"],["keep_if","ENV","classes/ENV.html#method-c-keep_if","()","<p>Deletes every environment variable where the block evaluates to\n<code>false</code>.\n<p>Returns an enumerator if no block …\n"],["keep_if","Hash","classes/Hash.html#method-i-keep_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to false.\n<p>If no block is given, an enumerator …\n"],["keep_if","Set","classes/Set.html#method-i-keep_if","()","<p>Deletes every element of the set for which block evaluates to false, and\nreturns self.\n"],["keep_minsize","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-keep_minsize","(bool)",""],["keep_minsize","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-keep_minsize","(bool)",""],["keep_minsize?","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-keep_minsize-3F","()","<p>keep_minsize?\n"],["keep_minsize?","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-keep_minsize-3F","()","<p>keep_minsize?\n"],["key","DBM","classes/DBM.html#method-i-key","(p1)","<p>Returns the key for the specified value.\n"],["key","ENV","classes/ENV.html#method-c-key","(p1)","<p>Returns the name of the environment variable with <code>value</code>.  If\nthe value is not found <code>nil</code> is returned. …\n"],["key","GDBM","classes/GDBM.html#method-i-key","(p1)","<p>Returns the <em>key</em> for a given <em>value</em>. If several keys may\nmap to the same value, the key that is found first …\n"],["key","Hash","classes/Hash.html#method-i-key","(p1)","<p>Returns the key of an occurrence of a given value. If the value is not\nfound, returns <code>nil</code>.\n\n<pre><code>h = { &quot;a&quot; =&gt; ...\n</code></pre>\n"],["key","SDBM","classes/SDBM.html#method-i-key","(p1)",""],["key=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-key-3D","(p1)","<p>Sets the cipher key. To generate a key, you should either use a secure\nrandom byte string or, if the …\n"],["key?","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-key-3F","(*args)",""],["key?","DBM","classes/DBM.html#method-i-key-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["key?","ENV","classes/ENV.html#method-c-key-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["key?","GDBM","classes/GDBM.html#method-i-key-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["key?","Hash","classes/Hash.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_key?(&quot;a&quot;)   #=&gt; ...\n</code></pre>\n"],["key?","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-key-3F","(key)","<p>true if <code>key</code> header exists.\n"],["key?","SDBM","classes/SDBM.html#method-i-key-3F","(p1)",""],["key?","Thread","classes/Thread.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nthread-local variable.\n\n<pre><code>me = Thread.current\nme[:oliver] ...</code></pre>\n"],["key_len=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-key_len-3D","(p1)","<p>Sets the key length of the cipher.  If the cipher is a fixed length cipher\nthen attempting to set the …\n"],["key_press","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-key_press","(w, keysym)",""],["keyname","Curses","classes/Curses.html#method-c-keyname","(p1)","<p>Returns the character string corresponding to key <code>c</code>\n"],["keypad","Curses::Window","classes/Curses/Window.html#method-i-keypad","(p1)","<p>Enables the keypad of the user&#39;s terminal.\n<p>If enabled (<code>bool</code> is <code>true</code>), the user can press a\nfunction …\n"],["keypad=","Curses::Window","classes/Curses/Window.html#method-i-keypad-3D","(p1)","<p>Enables the keypad of the user&#39;s terminal.\n<p>If enabled (<code>bool</code> is <code>true</code>), the user can press a\nfunction …\n"],["keys","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-keys","(*args)","<p>Return all query parameter names as an array of String.\n"],["keys","DBM","classes/DBM.html#method-i-keys","()","<p>Returns an array of all the string keys in the database.\n"],["keys","ENV","classes/ENV.html#method-c-keys","()","<p>Returns every environment variable name in an Array\n"],["keys","GDBM","classes/GDBM.html#method-i-keys","()","<p>Returns an array of all keys of this database.\n"],["keys","Hash","classes/Hash.html#method-i-keys","()","<p>Returns a new array populated with the keys from this hash. See also\n<code>Hash#values</code>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...\n</code></pre>\n"],["keys","SDBM","classes/SDBM.html#method-i-keys","()",""],["keys","Thread","classes/Thread.html#method-i-keys","()","<p>Returns an an array of the names of the thread-local variables (as\nSymbols).\n\n<pre><code>thr = Thread.new do\n  Thread.current[:cat] ...</code></pre>\n"],["keys","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-keys","()",""],["keys","Tk::WinRegistry","classes/Tk/WinRegistry.html#method-c-keys","(keynam, pattern=nil)",""],["keys","TkVariable","classes/TkVariable.html#method-i-keys","()",""],["keys","TkVariable","classes/TkVariable.html#method-i-keys","()",""],["keys","Win32::Registry","classes/Win32/Registry.html#method-i-keys","()","<p>return keys as an array\n"],["kikaku","Object","classes/Object.html#method-i-kikaku","(a)",""],["kill","IRB::JobManager","classes/IRB/JobManager.html#method-i-kill","(*keys)",""],["kill","Process","classes/Process.html#method-c-kill","(*args)","<p>Sends the given signal to the specified process id(s), or to the current\nprocess if <em>pid</em> is zero. <em>signal</em> …\n"],["kill","Shell","classes/Shell.html#method-i-kill","(sig, command)",""],["kill","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-kill","(sig)",""],["kill","Thread","classes/Thread.html#method-c-kill","(p1)","<p>Causes the given <em>thread</em> to exit (see <code>Thread::exit</code>).\n\n<pre><code>count = 0\na = Thread.new { loop { count += 1 } }\nsleep(0.1) ...</code></pre>\n"],["kill","Thread","classes/Thread.html#method-i-kill","()","<p>Terminates <em>thr</em> and schedules another thread to be run. If this\nthread is already marked to be killed, …\n"],["killClone","Object","classes/Object.html#method-i-killClone","(win, cnt)",""],["kill_job","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-kill_job","(sig, command)","<p>kill a job\n"],["kind_of?","Object","classes/Object.html#method-i-kind_of-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["kind_of?","Rake::FileList","classes/Rake/FileList.html#method-i-kind_of-3F","(klass)",""],["kinput_attribute_config","TkKinput","classes/TkKinput.html#method-i-kinput_attribute_config","(slot, value=None)",""],["kinput_attribute_info","TkKinput","classes/TkKinput.html#method-i-kinput_attribute_info","(slot=nil)",""],["kinput_send_spot","TkKinput","classes/TkKinput.html#method-i-kinput_send_spot","()",""],["kinput_start","TkKinput","classes/TkKinput.html#method-i-kinput_start","(style=None)",""],["kjust","String","classes/String.html#method-i-kjust","(len)",""],["kroc_rb_settings","Object","classes/Object.html#method-i-kroc_rb_settings","()",""],["l","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-l","()",""],["label","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-label","(text = nil)",""],["label","Tk::Tcllib::Tkpiechart::Slice","classes/Tk/Tcllib/Tkpiechart/Slice.html#method-i-label","(text)",""],["label=","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-label-3D","(text)",""],["labelat","TkTree","classes/TkTree.html#method-i-labelat","(xpos, ypos)",""],["labelwidget","Tk::Tcllib::Widget::SuperFrame","classes/Tk/Tcllib/Widget/SuperFrame.html#method-i-labelwidget","()",""],["lambda","Kernel","classes/Kernel.html#method-i-lambda","()","<p>Equivalent to <code>Proc.new</code>, except the resulting Proc objects\ncheck the number of parameters passed when …\n"],["lambda?","Proc","classes/Proc.html#method-i-lambda-3F","()","<p>Returns <code>true</code> for a Proc object for which argument handling is\nrigid. Such procs are typically generated …\n"],["lang","REXML::Functions","classes/REXML/Functions.html#method-c-lang","( language )","<p>UNTESTED\n"],["lappend","TkVariable","classes/TkVariable.html#method-i-lappend","(*elems)",""],["lappend","TkVariable","classes/TkVariable.html#method-i-lappend","(*elems)",""],["last","Array","classes/Array.html#method-i-last","(*args)","<p>Returns the last element(s) of <code>self</code>. If the array is empty,\nthe first form returns <code>nil</code>.\n\n<pre><code>a = [ &quot;w&quot;, &quot;x&quot;, ...</code></pre>\n"],["last","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-last","()","<p>Returns the last item in the list\n"],["last","REXML::Functions","classes/REXML/Functions.html#method-c-last","( )","<p>Returns the last node of the given list of nodes.\n"],["last","Range","classes/Range.html#method-i-last","(*args)","<p>Returns the last object in <em>rng</em>, or the last <code>n</code>\nelements.\n"],["last","TkTextTag","classes/TkTextTag.html#method-i-last","()",""],["last","TkTextTag","classes/TkTextTag.html#method-i-last","()",""],["lastChild","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXMLDOMText","classes/IXMLDOMText.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","IXTLRuntime","classes/IXTLRuntime.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["lastChild","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-lastChild","()","<p>IXMLDOMNode lastChild first child of the node\n"],["last_child","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-last_child","()",""],["last_error","DL::CFunc","classes/DL/CFunc.html#method-c-last_error","()","<p>Returns the last error for the current executing thread\n"],["last_error","Encoding::Converter","classes/Encoding/Converter.html#method-i-last_error","()","<p>Returns an exception object for the last conversion. Returns nil if the\nlast conversion did not produce …\n"],["last_error","Fiddle","classes/Fiddle.html#method-c-last_error","()","<p>Returns the last <code>Error</code> of the current executing\n<code>Thread</code> or nil if none\n"],["last_error=","Fiddle","classes/Fiddle.html#method-c-last_error-3D","(error)","<p>Sets the last <code>Error</code> of the current executing\n<code>Thread</code> to <code>error</code>\n"],["last_match","Regexp","classes/Regexp.html#method-c-last_match","(p1 = v1)","<p>The first form returns the <code>MatchData</code> object generated by the\nlast successful pattern match. Equivalent …\n"],["last_modified","OpenURI::Meta","classes/OpenURI/Meta.html#method-i-last_modified","()","<p>returns a Time that represents the Last-Modified field.\n"],["last_modified","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-last_modified","()","<p>Time this file was last modified, if known\n"],["last_update","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-last_update","()",""],["last_update=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-last_update-3D","(p1)",""],["latest_load_paths","Gem","classes/Gem.html#method-c-latest_load_paths","()","<p>Return a list of all possible load paths for the latest version for all\ngems in the Gem installation. …\n"],["latest_rubygems_version","Gem","classes/Gem.html#method-c-latest_rubygems_version","()",""],["latest_spec_for","Gem","classes/Gem.html#method-c-latest_spec_for","(name)",""],["latest_specs","Gem::Server","classes/Gem/Server.html#method-i-latest_specs","(req, res)",""],["latest_specs","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-latest_specs","(include_prerelease=false)","<p>Returns an Array specifications for the latest released versions of each\ngem in this index.\n"],["latest_specs","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-latest_specs","(include_prerelease=false)","<p>Returns an Array specifications for the latest released versions of each\ngem in this index.\n"],["latest_specs","Gem::Specification","classes/Gem/Specification.html#method-c-latest_specs","(prerelease = false)","<p>Return the latest specs, optionally including prerelease specs if\n<code>prerelease</code> is true.\n"],["latest_version_for","Gem","classes/Gem.html#method-c-latest_version_for","(name)",""],["latin_actual","TkFont","classes/TkFont.html#method-i-latin_actual","(option=nil)",""],["latin_actual","TkFont","classes/TkFont.html#method-i-latin_actual","(option=nil)",""],["latin_actual_displayof","TkFont","classes/TkFont.html#method-i-latin_actual_displayof","(win, option=nil)",""],["latin_actual_displayof","TkFont","classes/TkFont.html#method-i-latin_actual_displayof","(win, option=nil)",""],["latin_actual_hash","TkFont","classes/TkFont.html#method-i-latin_actual_hash","(option=nil)",""],["latin_actual_hash","TkFont","classes/TkFont.html#method-i-latin_actual_hash","(option=nil)",""],["latin_actual_hash_displayof","TkFont","classes/TkFont.html#method-i-latin_actual_hash_displayof","(win, option=nil)",""],["latin_actual_hash_displayof","TkFont","classes/TkFont.html#method-i-latin_actual_hash_displayof","(win, option=nil)",""],["latin_configinfo","TkFont","classes/TkFont.html#method-i-latin_configinfo","(slot=nil)",""],["latin_configinfo","TkFont","classes/TkFont.html#method-i-latin_configinfo","(slot=nil)",""],["latin_configure","TkFont","classes/TkFont.html#method-i-latin_configure","(slot, value=None)",""],["latin_configure","TkFont","classes/TkFont.html#method-i-latin_configure","(slot, value=None)",""],["latin_current_configinfo","TkFont","classes/TkFont.html#method-i-latin_current_configinfo","(slot=nil)",""],["latin_current_configinfo","TkFont","classes/TkFont.html#method-i-latin_current_configinfo","(slot=nil)",""],["latin_font","TkFont","classes/TkFont.html#method-i-latin_font","()",""],["latin_font","TkFont","classes/TkFont.html#method-i-latin_font","()",""],["latin_font_id","TkFont","classes/TkFont.html#method-i-latin_font_id","()",""],["latin_font_id","TkFont","classes/TkFont.html#method-i-latin_font_id","()",""],["latin_font_id","TkNamedFont","classes/TkNamedFont.html#method-i-latin_font_id","()",""],["latin_metrics","TkFont","classes/TkFont.html#method-i-latin_metrics","(option=nil)",""],["latin_metrics","TkFont","classes/TkFont.html#method-i-latin_metrics","(option=nil)",""],["latin_metrics_displayof","TkFont","classes/TkFont.html#method-i-latin_metrics_displayof","(win, option=nil)",""],["latin_metrics_displayof","TkFont","classes/TkFont.html#method-i-latin_metrics_displayof","(win, option=nil)",""],["latin_metrics_hash","TkFont","classes/TkFont.html#method-i-latin_metrics_hash","(option=nil)",""],["latin_metrics_hash","TkFont","classes/TkFont.html#method-i-latin_metrics_hash","(option=nil)",""],["latin_metrics_hash_displayof","TkFont","classes/TkFont.html#method-i-latin_metrics_hash_displayof","(win, option=nil)",""],["latin_metrics_hash_displayof","TkFont","classes/TkFont.html#method-i-latin_metrics_hash_displayof","(win, option=nil)",""],["latin_replace","TkFont","classes/TkFont.html#method-i-latin_replace","(ltn)",""],["latin_replace","TkFont","classes/TkFont.html#method-i-latin_replace","(ltn)",""],["latinfont","TkFont","classes/TkFont.html#method-i-latinfont","()",""],["latinfont","TkFont","classes/TkFont.html#method-i-latinfont","()",""],["latinfont_configure","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-latinfont_configure","(ltn, keys=nil)",""],["latinfont_copy","TkTreatTagFont","classes/TkTreatTagFont.html#method-i-latinfont_copy","(win, wintag=nil)",""],["latintagfont_configure","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-latintagfont_configure","(tagOrId, ltn, keys=nil)",""],["latintagfont_copy","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-latintagfont_copy","(tagOrId, win, wintag=nil, winkey=nil, targetkey=nil)",""],["launch","Gem::Server","classes/Gem/Server.html#method-i-launch","()",""],["layout","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-layout","()",""],["layout","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-layout","(style=nil, spec=nil)",""],["lchmod","File","classes/File.html#method-c-lchmod","(p1, *args)","<p>Equivalent to <code>File::chmod</code>, but does not follow symbolic links\n(so it will change the permissions associated …\n"],["lchmod","Pathname","classes/Pathname.html#method-i-lchmod","(p1)","<p>See <code>File.lchmod</code>.\n"],["lchown","File","classes/File.html#method-c-lchown","(p1, p2, *args)","<p>Equivalent to <code>File::chown</code>, but does not follow symbolic links\n(so it will change the owner associated …\n"],["lchown","Pathname","classes/Pathname.html#method-i-lchown","(p1, p2)","<p>See <code>File.lchown</code>.\n"],["lcm","Integer","classes/Integer.html#method-i-lcm","(p1)","<p>Returns the least common multiple (always positive).  0.lcm(x) and x.lcm(0)\nreturn zero.\n<p>For example: …\n"],["lcm","Integer","classes/Integer.html#method-i-lcm","(p1)","<p>Returns the least common multiple (always positive).  0.lcm(x) and x.lcm(0)\nreturn zero.\n<p>For example: …\n"],["ld","Date","classes/Date.html#method-i-ld","()","<p>Returns the Lilian day number.  This is a whole number, which is adjusted\nby the offset as the local …\n"],["ldexp","Math","classes/Math.html#method-c-ldexp","(p1, p2)","<p>Returns the value of <em>flt</em>*(2**<em>int</em>).\n\n<pre><code>fraction, exponent = Math.frexp(1234)\nMath.ldexp(fraction, exponent) ...</code></pre>\n"],["leaf?","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-leaf-3F","()",""],["leap?","Date","classes/Date.html#method-i-leap-3F","()","<p>Returns true if the year is a leap year.\n<p>For example:\n\n<pre><code>Date.new(2000).leap?      #=&gt; true\nDate.new(2001).leap? ...\n</code></pre>\n"],["leap?","Date","classes/Date.html#method-c-leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Gregorian\ncalendar.\n<p>For example:\n\n<pre><code>Date.gregorian_leap?(1900) ...</code></pre>\n"],["left","Board","classes/Board.html#method-i-left","()",""],["legend","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-legend","(series, text)",""],["legend_activate","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_activate","(*pats)",""],["legend_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_bind","(tag, context, *args)",""],["legend_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_bind_append","(tag, context, *args)",""],["legend_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_bind_remove","(tag, context)",""],["legend_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_bindinfo","(tag, context=nil)",""],["legend_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_cget","(option)",""],["legend_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_cget_strict","(option)",""],["legend_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_cget_tkstring","(option)",""],["legend_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_configinfo","(slot=nil)",""],["legend_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_configure","(slot, value=None)",""],["legend_deactivate","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_deactivate","(*pats)",""],["legend_get","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_get","(pos, y=nil)",""],["legend_window_create","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-legend_window_create","(parent=nil, keys=nil)",""],["legendconfig","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-legendconfig","(key, value=None)",""],["length","Array","classes/Array.html#method-i-length","()","<p>Returns the number of elements in <code>self</code>. May be zero.\n\n<pre><code>[ 1, 2, 3, 4, 5 ].length   #=&gt; 5\n</code></pre>\n"],["length","ArrayCode","classes/ArrayCode.html#method-i-length","()",""],["length","DBM","classes/DBM.html#method-i-length","()","<p>Returns the number of entries in the database.\n"],["length","Digest::Instance","classes/Digest/Instance.html#method-i-length","()","<p>Returns digest_obj.digest_length().\n"],["length","ENV","classes/ENV.html#method-c-length","()","<p>Returns the number of environment variables.\n"],["length","GDBM","classes/GDBM.html#method-i-length","()","<p>Returns the number of key-value pairs in this database.\n"],["length","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-length","()",""],["length","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-length","()",""],["length","Hash","classes/Hash.html#method-i-length","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre><code>h = { &quot;d&quot; =&gt; 100, &quot;a&quot; =&gt; 200, &quot;v&quot; =&gt; 300, &quot;e&quot; =&gt; 400 ...\n</code></pre>\n"],["length","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-length","()","<p>I4 length number of characters in value\n"],["length","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-length","()","<p>I4 length number of characters in value\n"],["length","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-length","()","<p>I4 length number of characters in value\n"],["length","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-length","()","<p>I4 length number of nodes in the collection\n"],["length","IXMLDOMNodeList","classes/IXMLDOMNodeList.html#method-i-length","()","<p>I4 length number of nodes in the collection\n"],["length","IXMLDOMText","classes/IXMLDOMText.html#method-i-length","()","<p>I4 length number of characters in value\n"],["length","MatchData","classes/MatchData.html#method-i-length","()","<p>Returns the number of elements in the match array.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...</code></pre>\n"],["length","Queue","classes/Queue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["length","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-length","()","<p>Length of parts in the ListItem\n"],["length","REXML::Parent","classes/REXML/Parent.html#method-i-length","()",""],["length","REXML::SyncEnumerator","classes/REXML/SyncEnumerator.html#method-i-length","()","<p>Returns the number of enumerated Enumerable objects, i.e. the size of each\nrow.\n"],["length","SDBM","classes/SDBM.html#method-i-length","()",""],["length","Set","classes/Set.html#method-i-length","()",""],["length","String","classes/String.html#method-i-length","()","<p>Returns the character length of <em>str</em>.\n"],["length","StringIO","classes/StringIO.html#method-i-length","()","<p>Returns the size of the buffer string.\n"],["length","Struct","classes/Struct.html#method-i-length","()","<p>Returns the number of instance variables.\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</code></pre>\n"],["length","Symbol","classes/Symbol.html#method-i-length","()","<p>Same as <code>sym.to_s.length</code>.\n"],["length","Tempfile","classes/Tempfile.html#method-i-length","()",""],["length","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-length","()",""],["length=","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-length-3D","(size)",""],["level","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-level","()","<p>returns the cmsg level as an integer.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).level\n#=&gt; ...\n</code></pre>\n"],["level","Socket::Option","classes/Socket/Option.html#method-i-level","()","<p>returns the socket level as an integer.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).level ...</code></pre>\n"],["level","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-level","()","<p>Returns compression level.\n"],["level=","IRB::Notifier::CompositeNotifier","classes/IRB/Notifier/CompositeNotifier.html#method-i-level-3D","(value)",""],["level=","Logger::Application","classes/Logger/Application.html#method-i-level-3D","(level)","<p>Set the logging threshold, just like <code>Logger#level=</code>.\n"],["level_notifier=","IRB::Notifier::CompositeNotifier","classes/IRB/Notifier/CompositeNotifier.html#method-i-level_notifier-3D","(value)",""],["levenshtein_distance","Gem::Text","classes/Gem/Text.html#method-i-levenshtein_distance","(str1, str2)","<p>This code is based directly on the Text gem implementation Returns a value\nrepresenting the “cost” …\n"],["lex","Ripper","classes/Ripper.html#method-c-lex","(src, filename = '-', lineno = 1)","<p>Tokenizes the Ruby program and returns an array of an array, which is\nformatted like <code>[[lineno, column],</code> …\n"],["lex","RubyLex","classes/RubyLex.html#method-i-lex","()",""],["lex_init","RubyLex","classes/RubyLex.html#method-i-lex_init","()",""],["lex_int2","RubyLex","classes/RubyLex.html#method-i-lex_int2","()",""],["lfEnableButtons","Object","classes/Object.html#method-i-lfEnableButtons","(w)",""],["lgamma","Math","classes/Math.html#method-c-lgamma","(p1)","<p>Calculates the logarithmic gamma of x and the sign of gamma of x.\n<p>Math.lgamma(x) is same as\n\n<pre><code>[Math.log(Math.gamma(x).abs), ...</code></pre>\n"],["lget","TkVariable","classes/TkVariable.html#method-i-lget","(idx)",""],["lget","TkVariable","classes/TkVariable.html#method-i-lget","(idx)",""],["lget_f","TkVariable","classes/TkVariable.html#method-i-lget_f","(idx)",""],["lget_f","TkVariable","classes/TkVariable.html#method-i-lget_f","(idx)",""],["lget_i","TkVariable","classes/TkVariable.html#method-i-lget_i","(idx)",""],["lget_i","TkVariable","classes/TkVariable.html#method-i-lget_i","(idx)",""],["lib_dirs_for","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-lib_dirs_for","(spec)","<p>Returns library directories glob for a gemspec.  For example,\n\n<pre><code>&#39;/usr/local/lib/ruby/gems/1.8/gems/foobar-1.0/{lib,ext}&#39;</code></pre>\n"],["lib_dirs_glob","Gem::Specification","classes/Gem/Specification.html#method-i-lib_dirs_glob","()","<p>Returns a string usable in Dir.glob to match all requirable paths for this\nspec.\n"],["lib_files","Gem::Specification","classes/Gem/Specification.html#method-i-lib_files","()","<p>Files in the Gem under one of the require_paths\n"],["libcheck_for_tclConfig","Object","classes/Object.html#method-i-libcheck_for_tclConfig","(tcldir, tkdir, tclconf, tkconf)",""],["library","Tk::BWidget","classes/Tk/BWidget.html#method-c-library","(klass, *klasses)",""],["library_name","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-library_name","()","<p>Returns library name. If the method fails to access library name,\nWIN32OLERuntimeError is raised.\n\n<pre><code>tlib ...</code></pre>\n"],["libyaml_version","Psych","classes/Psych.html#method-c-libyaml_version","()","<p>Returns the version of libyaml being used\n"],["license","Gem::Specification","classes/Gem/Specification.html#method-i-license","()","<p>Singular accessor for #licenses\n"],["license=","Gem::Specification","classes/Gem/Specification.html#method-i-license-3D","(o)","<p>Singular accessor for #licenses\n"],["licenses","Gem::Specification","classes/Gem/Specification.html#method-i-licenses","()","<p>The license(s) for the library.  Each license must be a short name, no more\nthan 64 characters.\n"],["licenses=","Gem::Specification","classes/Gem/Specification.html#method-i-licenses-3D","(licenses)","<p>Set licenses to <code>licenses</code>, ensuring it is an array.\n"],["limit","BigDecimal","classes/BigDecimal.html#method-c-limit","(p1 = v1)","<p>Limit the number of significant digits in newly created BigDecimal numbers\nto the specified value. Rounding …\n"],["limits","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-limits","()",""],["lindex","TkVariable","classes/TkVariable.html#method-i-lindex","(idx)",""],["lindex","TkVariable","classes/TkVariable.html#method-i-lindex","(idx)",""],["line","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-line","(line_no)",""],["line","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-line","(line_no)",""],["line","IXMLDOMParseError","classes/IXMLDOMParseError.html#method-i-line","()","<p>I4 line the line number in the XML document where the error occurred\n"],["line","REXML::ParseException","classes/REXML/ParseException.html#method-i-line","()",""],["line","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-line","(node)",""],["line","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-line","(*args)",""],["line","Tk::Tcllib::Plotchart::RibbonChart3D","classes/Tk/Tcllib/Plotchart/RibbonChart3D.html#method-i-line","(*args)",""],["line","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-line","(mod)",""],["line_activate","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_activate","(*args)",""],["line_at","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-line_at","(file, line)",""],["line_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_bind","(tag, context, *args)",""],["line_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_bind_append","(tag, context, *args)",""],["line_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_bind_remove","(tag, context)",""],["line_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_bindinfo","(tag, context=nil)",""],["line_buffer","Readline","classes/Readline.html#method-c-line_buffer","()","<p>Returns the full line that is being edited. This is useful from within the\ncomplete_proc for determining …\n"],["line_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_cget","(id, option)",""],["line_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_cget_strict","(id, option)",""],["line_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_cget_tkstring","(id, option)",""],["line_closest","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_closest","(x, y, var, *args)",""],["line_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_configinfo","(id, slot=nil)",""],["line_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_configure","(*args)",""],["line_create","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_create","(id=nil, keys={})",""],["line_deactivate","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_deactivate","(*ids)",""],["line_delete","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_delete","(*ids)",""],["line_exist?","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_exist-3F","(id)",""],["line_names","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_names","(*pats)",""],["line_pos","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-line_pos","(str)",""],["line_show","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_show","(*names)",""],["line_type","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-line_type","(id)",""],["line_width","Psych::Emitter","classes/Psych/Emitter.html#method-i-line_width","()","<p>Get the preferred line width.\n"],["line_width=","Psych::Emitter","classes/Psych/Emitter.html#method-i-line_width-3D","(p1)","<p>Set the preferred line with to <code>width</code>.\n"],["lineend","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-lineend","()",""],["lineno","ARGF","classes/ARGF.html#method-i-lineno","()","<p>Returns the current line number of ARGF as a whole. This value can be set\nmanually with <code>ARGF.lineno=</code> …\n"],["lineno","IO","classes/IO.html#method-i-lineno","()","<p>Returns the current line number in <em>ios</em>.  The stream must be opened\nfor reading. <code>lineno</code> counts the number …\n"],["lineno","Ripper::Filter","classes/Ripper/Filter.html#method-i-lineno","()","<p>The line number of the current token. This value starts from 1. This method\nis valid only in event handlers. …\n"],["lineno","StringIO","classes/StringIO.html#method-i-lineno","()","<p>Returns the current line number in <strong>strio</strong>. The stringio\nmust be opened for reading. <code>lineno</code> counts the …\n"],["lineno","TkTextIO","classes/TkTextIO.html#method-i-lineno","()",""],["lineno","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-lineno","()","<p>The line number of the last row read from this file.\n"],["lineno=","ARGF","classes/ARGF.html#method-i-lineno-3D","(p1)","<p>Sets the line number of <code>ARGF</code> as a whole to the given\n<code>Integer</code>.\n<p><code>ARGF</code> sets the line number automatically …\n"],["lineno=","IO","classes/IO.html#method-i-lineno-3D","(p1)","<p>Manually sets the current line number to the given value. <code>$.</code>\nis updated only on the next read.\n\n<pre><code>f = File.new(&quot;testfile&quot;) ...</code></pre>\n"],["lineno=","StringIO","classes/StringIO.html#method-i-lineno-3D","(p1)","<p>Manually sets the current line number to the given value. <code>$.</code>\nis updated only on the next read.\n"],["lineno=","TkTextIO","classes/TkTextIO.html#method-i-lineno-3D","(num)",""],["lineno=","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-lineno-3D","(p1)","<p>Specify line number of the last row read from this file.\n"],["linepos","IXMLDOMParseError","classes/IXMLDOMParseError.html#method-i-linepos","()","<p>I4 linepos the character position in the line containing the error\n"],["lines","ARGF","classes/ARGF.html#method-i-lines","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["lines","Curses","classes/Curses.html#method-c-lines","()","<p>Returns the number of lines on the screen\n"],["lines","IO","classes/IO.html#method-i-lines","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["lines","String","classes/String.html#method-i-lines","(p1 = v1)","<p>Splits <em>str</em> using the supplied parameter as the record separator\n(<code>$/</code> by default), passing each substring …\n"],["lines","StringIO","classes/StringIO.html#method-i-lines","(*args)","<p>See IO#each.\n"],["lines","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-lines","(mod)",""],["lines","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-lines","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["linestart","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-linestart","()",""],["linestyle","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-linestyle","(style=None)",""],["linewidth","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-linewidth","(pixels=None)",""],["linger","Socket::Option","classes/Socket/Option.html#method-c-linger","(p1, p2)","<p>Creates a new Socket::Option object for SOL_SOCKET/SO_LINGER.\n<p><em>onoff</em> should be an integer or a boolean. …\n"],["linger","Socket::Option","classes/Socket/Option.html#method-i-linger","()","<p>Returns the linger data in <em>sockopt</em> as a pair of boolean and\ninteger.\n\n<pre><code>sockopt = Socket::Option.linger(true, ...</code></pre>\n"],["link","File","classes/File.html#method-c-link","(p1, p2)","<p>Creates a new name for an existing file using a hard link. Will not\noverwrite <em>new_name</em> if it already …\n"],["link","FileUtils","classes/FileUtils.html#method-c-link","(src, dest, options = {})",""],["link","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-link","(name, text)","<p>Creates an HTML link to <code>name</code> with the given <code>text</code>.\n"],["link","Sys","classes/Sys.html#method-i-link","(file_name, dest_file)","<p>Link <code>file_name</code> to <code>dest_file</code>.\n"],["link?","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-link-3F","()",""],["link_files","Sys","classes/Sys.html#method-i-link_files","(wildcard, dest_dir)","<p>Link all files matching <code>wildcard</code> into the directory\n<code>dest_dir</code>.\n"],["list","Encoding","classes/Encoding.html#method-c-list","()","<p>Returns the list of loaded encodings.\n\n<pre><code>Encoding.list\n#=&gt; [#&lt;Encoding:ASCII-8BIT&gt;, #&lt;Encoding:UTF-8&gt;,\n  ...\n</code></pre>\n"],["list","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-list","(all = false, prerelease = false)","<p>Returns a list of gems available for each source in Gem::sources.  If\n<code>all</code> is true, all released versions …\n"],["list","Iconv","classes/Iconv.html#method-c-list","()","<p>Iterates each alias sets.\n"],["list","Inspector","classes/Inspector.html#method-i-list","(idx = -1)",""],["list","Net::FTP","classes/Net/FTP.html#method-i-list","(*args)","<p>Returns an array of file information in the directory (the output is like\n`ls -l`).  If a block is given, …\n"],["list","Net::IMAP","classes/Net/IMAP.html#method-i-list","(refname, mailbox)","<p>Sends a LIST command, and returns a subset of names from the complete set\nof all names available to the …\n"],["list","Signal","classes/Signal.html#method-c-list","()","<p>Returns a list of signal names mapped to the corresponding underlying\nsignal numbers.\n\n<pre><code>Signal.list   #=&gt; ...\n</code></pre>\n"],["list","Thread","classes/Thread.html#method-c-list","()","<p>Returns an array of <code>Thread</code> objects for all threads that are\neither runnable or stopped.\n\n<pre><code>Thread.new { sleep(200) ...</code></pre>\n"],["list","ThreadGroup","classes/ThreadGroup.html#method-i-list","()","<p>Returns an array of all existing <code>Thread</code> objects that belong to\nthis group.\n\n<pre><code>ThreadGroup::Default.list  ...</code></pre>\n"],["list","Tk::MacResource","classes/Tk/MacResource.html#method-c-list","(rsrcType, rsrcRef=nil)",""],["list","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-list","(file, keys=nil)",""],["list","TkComm","classes/TkComm.html#method-c-list","(val, depth=0, enc=true)","<p>### –&gt; definition is moved to TkUtil module def _symbolkey2str(keys)\n\n<pre><code>h = {}\nkeys.each{|key,value| ...\n</code></pre>\n"],["list","TkVariable","classes/TkVariable.html#method-i-list","()",""],["list","TkVariable","classes/TkVariable.html#method-i-list","()",""],["list","TkcTagAccess","classes/TkcTagAccess.html#method-i-list","()",""],["list","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-list","()",""],["list=","TkVariable","classes/TkVariable.html#method-i-list-3D","(val)",""],["list=","TkVariable","classes/TkVariable.html#method-i-list-3D","(val)",""],["list_element","TkVariable","classes/TkVariable.html#method-i-list_element","(*idxs)",""],["list_element","TkVariable","classes/TkVariable.html#method-i-list_element","(*idxs)",""],["list_end_for","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-list_end_for","(list_type)","<p>Returns the HTML end-tag for <code>list_type</code>\n"],["list_files_in_directory","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-list_files_in_directory","(dir)","<p>Return a list of the files to be processed in a directory. We know that\nthis directory doesn&#39;t have …\n"],["list_index","Tk::RbWidget::Combobox","classes/Tk/RbWidget/Combobox.html#method-i-list_index","(idx)",""],["list_item_start","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-list_item_start","(list_item, list_type)","<p>Returns the HTML tag for <code>list_type</code>, possible using a label\nfrom <code>list_item</code>\n"],["list_known_classes","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-list_known_classes","(names = [])","<p>Lists classes known to ri starting with <code>names</code>.  If\n<code>names</code> is empty all known classes are shown.\n"],["list_methods_matching","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-list_methods_matching","(name)","<p>Returns an Array of methods matching <code>name</code>\n"],["list_name","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-list_name","()",""],["list_name_full","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-list_name_full","()",""],["list_place","Inspector","classes/Inspector.html#method-i-list_place","()",""],["list_type=","TkVariable","classes/TkVariable.html#method-i-list_type-3D","(val)",""],["list_type=","TkVariable","classes/TkVariable.html#method-i-list_type-3D","(val)",""],["listbox","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-listbox","()",""],["listboxborder","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-listboxborder","(width)","<p>set listbox borders\n"],["listboxborder","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-listboxborder","(width)","<p>set listbox borders\n"],["listboxrelief","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-listboxrelief","(relief)","<p>set listbox relief\n"],["listboxrelief","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-listboxrelief","(relief)","<p>set listbox relief\n"],["listen","Addrinfo","classes/Addrinfo.html#method-i-listen","(backlog=5)","<p>creates a listening socket bound to self.\n"],["listen","ChatEntry","classes/ChatEntry.html#method-i-listen","(str)",""],["listen","Gem::Server","classes/Gem/Server.html#method-i-listen","(addresses = @addresses)","<p>Creates server sockets based on the addresses option.  If no addresses were\ngiven a server socket for …\n"],["listen","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-listen","( *args, &blok )","<p>Listen arguments:\n<p>Symbol, Array, Block\n\n<pre><code>Listen to Symbol events on Array elements</code></pre>\n"],["listen","Socket","classes/Socket.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the …\n"],["listen","TCPServer","classes/TCPServer.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the …\n"],["listen","UNIXServer","classes/UNIXServer.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the …\n"],["listen","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-listen","(address, port)",""],["listener","RSS::REXMLParser","classes/RSS/REXMLParser.html#method-i-listener","()",""],["listener","RSS::XMLParserParser","classes/RSS/XMLParserParser.html#method-i-listener","()",""],["listener","RSS::XMLScanParser","classes/RSS/XMLScanParser.html#method-i-listener","()",""],["listener=","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-listener-3D","(listener)",""],["listup","Object","classes/Object.html#method-i-listup","(items)",""],["ljust","String","classes/String.html#method-i-ljust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em> left\njustified …\n"],["ln","FileUtils","classes/FileUtils.html#method-c-ln","(src, dest, options = {})","<p>Options: force noop verbose\n<p><strong><code>ln(old, new, options = {})</code></strong>\n<p>Creates a hard link <code>new</code> which points to <code>old</code>. If …\n"],["ln","Object","classes/Object.html#method-i-ln","()","<p>Create a link to the specified TARGET with LINK_NAME.\n\n<pre><code>ruby -run -e ln -- [OPTION] TARGET LINK_NAME\n\n-s ...</code></pre>\n"],["ln_s","FileUtils","classes/FileUtils.html#method-c-ln_s","(src, dest, options = {})","<p>Options: force noop verbose\n<p><strong><code>ln_s(old, new, options = {})</code></strong>\n<p>Creates a symbolic link <code>new</code> which points to <code>old</code> …\n"],["ln_sf","FileUtils","classes/FileUtils.html#method-c-ln_sf","(src, dest, options = {})","<p>Options: noop verbose\n<p>Same as\n\n<pre><code>#ln_s(src, dest, :force)</code></pre>\n"],["lo","JISX0208::Char","classes/JISX0208/Char.html#method-i-lo","()",""],["lo_function","Object","classes/Object.html#method-i-lo_function","(num)",""],["load","CSV","classes/CSV.html#method-c-load","(io_or_str, options = Hash.new)","<p>This method is the reading counterpart to CSV::dump().  See that method for\na detailed description of …\n"],["load","Gem::Specification","classes/Gem/Specification.html#method-c-load","(file)","<p>Loads Ruby format gemspec from <code>file</code>.\n"],["load","IRB::Locale","classes/IRB/Locale.html#method-i-load","(file, priv=nil)",""],["load","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-load","(arg0)","<p>BOOL load load document from the specified XML source\n\n<pre><code>VARIANT arg0 --- xmlSource [IN]</code></pre>\n"],["load","JSON","classes/JSON.html#method-i-load","(source, proc = nil, options = {})","<p>Load a ruby data structure from a JSON <em>source</em> and return it. A\nsource can either be a string-like object, …\n"],["load","Kernel","classes/Kernel.html#method-i-load","(p1, p2 = v2)","<p>Loads and executes the Ruby program in the file <em>filename</em>. If the\nfilename does not resolve to an absolute …\n"],["load","Marshal","classes/Marshal.html#method-c-load","(p1, p2 = v2)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["load","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-load","(arg0)","<p>BOOL load load document from the specified XML source\n\n<pre><code>VARIANT arg0 --- xmlSource [IN]</code></pre>\n"],["load","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-load","(arg0)","<p>BOOL load load document from the specified XML source\n\n<pre><code>VARIANT arg0 --- xmlSource [IN]</code></pre>\n"],["load","Object::Syck::Parser","classes/Object/Syck/Parser.html#method-i-load","(p1, p2 = v2)","<p>YAML::Syck::Parser.load( IO or String )\n"],["load","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-c-load","(p1 = v1)",""],["load","OptionParser","classes/OptionParser.html#method-i-load","(filename = nil)","<p>Loads options from file names as <code>filename</code>. Does nothing when\nthe file is not present. Returns whether …\n"],["load","Psych","classes/Psych.html#method-c-load","(yaml, filename = nil)","<p>Load <code>yaml</code> in to a Ruby data structure.  If multiple documents\nare provided, the object contained in the …\n"],["load","Rake::DefaultLoader","classes/Rake/DefaultLoader.html#method-i-load","(fn)",""],["load","Rake::MakefileLoader","classes/Rake/MakefileLoader.html#method-i-load","(fn)","<p>Load the makefile dependencies in <code>fn</code>.\n"],["load","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-load","(p1, p2 = v2)",""],["load","Syck","classes/Syck.html#method-c-load","( io )","<p>Load a document from the current <em>io</em> stream.\n\n<pre><code>File.open( &#39;animals.yaml&#39; ) { |yf| YAML::load( yf ) }\n   #=&gt; ...\n</code></pre>\n"],["load","Syck","classes/Syck.html#method-c-load","( io )","<p>Load a document from the current <em>io</em> stream.\n\n<pre><code>File.open( &#39;animals.yaml&#39; ) { |yf| YAML::load( yf ) }\n   #=&gt; ...\n</code></pre>\n"],["load","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-load","(dir)",""],["load","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-load","(dir)",""],["load","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-load","(dir)",""],["load","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-load","(dir)",""],["loadDir","Object","classes/Object.html#method-i-loadDir","(w)",""],["loadDir3","Object","classes/Object.html#method-i-loadDir3","(w)",""],["loadIcons","Object","classes/Object.html#method-i-loadIcons","(file)",""],["loadImage","Object","classes/Object.html#method-i-loadImage","(img,w,x,y)",""],["loadImage3","Object","classes/Object.html#method-i-loadImage3","(w,x,y)",""],["loadXML","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-loadXML","(arg0)","<p>BOOL loadXML load the document from a string\n\n<pre><code>BSTR arg0 --- bstrXML [IN]</code></pre>\n"],["loadXML","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-loadXML","(arg0)","<p>BOOL loadXML load the document from a string\n\n<pre><code>BSTR arg0 --- bstrXML [IN]</code></pre>\n"],["loadXML","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-loadXML","(arg0)","<p>BOOL loadXML load the document from a string\n\n<pre><code>BSTR arg0 --- bstrXML [IN]</code></pre>\n"],["load_api_keys","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-load_api_keys","()",""],["load_cache","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-load_cache","()","<p>Loads cache file for this store\n"],["load_call","XMLRPC::Marshal","classes/XMLRPC/Marshal.html#method-i-load_call","( stringOrReadable )",""],["load_class","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-load_class","(klass_name)","<p>Loads ri data for <code>klass_name</code>\n"],["load_documents","Object::Syck::Parser","classes/Object/Syck/Parser.html#method-i-load_documents","(p1, &block)","<p>YAML::Syck::Parser.load_documents( IO or String ) { |doc| }\n"],["load_documents","Psych","classes/Psych.html#method-c-load_documents","(yaml, &block)",""],["load_documents","Syck","classes/Syck.html#method-c-load_documents","( io, &doc_proc )","<p>Calls <em>block</em> with each consecutive document in the YAML stream\ncontained in <em>io</em>.\n\n<pre><code>File.open( &#39;many-docs.yaml&#39; ...</code></pre>\n"],["load_documents","Syck","classes/Syck.html#method-c-load_documents","( io, &doc_proc )","<p>Calls <em>block</em> with each consecutive document in the YAML stream\ncontained in <em>io</em>.\n\n<pre><code>File.open( &#39;many-docs.yaml&#39; ...</code></pre>\n"],["load_env_plugins","Gem","classes/Gem.html#method-c-load_env_plugins","()","<p>Find all &#39;rubygems_plugin&#39; files in $LOAD_PATH and load them\n"],["load_file","FileViewer","classes/FileViewer.html#method-i-load_file","(filename)","<p>Load the file into memory, and put the first part on the curses display.\n"],["load_file","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-load_file","(filename)",""],["load_file","IRB::IrbLoader","classes/IRB/IrbLoader.html#method-i-load_file","(path, priv = nil)",""],["load_file","Psych","classes/Psych.html#method-c-load_file","(filename)","<p>Load the document contained in <code>filename</code>.  Returns the yaml\ncontained in <code>filename</code> as a ruby object\n"],["load_file","Syck","classes/Syck.html#method-c-load_file","( filepath )","<p>Load a document from the file located at <em>filepath</em>.\n\n<pre><code>YAML.load_file( &#39;animals.yaml&#39; )\n   #=&gt; [&#39;badger&#39;, ...\n</code></pre>\n"],["load_file","Syck","classes/Syck.html#method-c-load_file","( filepath )","<p>Load a document from the file located at <em>filepath</em>.\n\n<pre><code>YAML.load_file( &#39;animals.yaml&#39; )\n   #=&gt; [&#39;badger&#39;, ...\n</code></pre>\n"],["load_file","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-load_file","(name)","<p>Load a file into the HTML widget\n"],["load_font","Tk::BWidget::SelectFont","classes/Tk/BWidget/SelectFont.html#method-c-load_font","()",""],["load_gems_in","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-load_gems_in","(*spec_dirs)","<p>Reconstruct the source index from the specifications in\n<code>spec_dirs</code>.\n"],["load_gems_in","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-load_gems_in","(*spec_dirs)","<p>Reconstruct the source index from the specifications in\n<code>spec_dirs</code>.\n"],["load_gemspec","Gem::Commands::BuildCommand","classes/Gem/Commands/BuildCommand.html#method-i-load_gemspec","(filename)",""],["load_gemspec","Gem::Package::TarInput","classes/Gem/Package/TarInput.html#method-i-load_gemspec","(io)","<p>Attempt to YAML-load a gemspec from the given <em>io</em> parameter. \nReturn nil if it fails.\n"],["load_history","IRB::HistorySavingAbility","classes/IRB/HistorySavingAbility.html#method-i-load_history","()",""],["load_images","Tk::Tile","classes/Tk/Tile.html#method-c-load_images","(imgdir, pat=nil)",""],["load_images","Tk::Tile","classes/Tk/Tile.html#method-c-load_images","(imgdir, pat=nil)",""],["load_images","Tk::Tile","classes/Tk/Tile.html#method-c-load_images","(imgdir, pat=nil)",""],["load_imports","Rake::Application","classes/Rake/Application.html#method-i-load_imports","()","<p>Load the pending list of imported files.\n"],["load_imports","Rake::Application","classes/Rake/Application.html#method-i-load_imports","()","<p>Load the pending list of imported files.\n"],["load_method","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-load_method","(store, cache, klass, type, name)","<p>Loads RI data for method <code>name</code> on <code>klass</code> from\n<code>store</code>.  <code>type</code> and <code>cache</code> indicate if\nit is a class or instance …\n"],["load_method","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-load_method","(klass_name, method_name)","<p>Loads ri data for <code>method_name</code> in <code>klass_name</code>\n"],["load_methods_matching","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-load_methods_matching","(name)","<p>Returns an Array of RI data for methods matching <code>name</code>\n"],["load_mime_types","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-load_mime_types","(file)","<p>Load Apache compatible mime.types file.\n"],["load_modules","IRB","classes/IRB.html#method-c-load_modules","()","<p>loading modules\n"],["load_path_insert_index","Gem","classes/Gem.html#method-c-load_path_insert_index","()","<p>The index to insert activated gem paths into the $LOAD_PATH.\n<p>Defaults to the site lib directory unless …\n"],["load_pem_file","CHashDir","classes/CHashDir.html#method-i-load_pem_file","(filepath)",""],["load_photo","PhotoCanvas","classes/PhotoCanvas.html#method-i-load_photo","(filename)",""],["load_plugin_files","Gem","classes/Gem.html#method-c-load_plugin_files","(plugins)","<p>Load <code>plugins</code> as ruby files\n"],["load_plugins","Gem","classes/Gem.html#method-c-load_plugins","()","<p>Find all &#39;rubygems_plugin&#39; files in installed gems and load them\n"],["load_private_key","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-load_private_key","(p1 = v1, p2 = v2)",""],["load_public_key","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-load_public_key","(p1 = v1, p2 = v2)",""],["load_rakefile","Rake","classes/Rake.html#method-i-load_rakefile","(path)","<p>Load a rakefile.\n"],["load_rakefile","Rake::Application","classes/Rake/Application.html#method-i-load_rakefile","()","<p>Find the rakefile and then load it and any pending imports.\n"],["load_rakefile","Rake::Application","classes/Rake/Application.html#method-i-load_rakefile","()","<p>Find the rakefile and then load it and any pending imports.\n"],["load_rb","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-load_rb","(dir)",""],["load_rb","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-load_rb","(dir)",""],["load_rb","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-load_rb","(dir)",""],["load_rb","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-load_rb","(dir)",""],["load_rdoc","Gem::DocManager","classes/Gem/DocManager.html#method-c-load_rdoc","()","<p>Load RDoc from a gem if it is available, otherwise from Ruby&#39;s stdlib\n"],["load_rdoc","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_response","XMLRPC::Marshal","classes/XMLRPC/Marshal.html#method-i-load_response","( stringOrReadable )",""],["load_specification","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-load_specification","(file_name)","<p>Loads a ruby-format specification from <code>file_name</code> and returns\nthe loaded spec.\n"],["load_specification","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-load_specification","(file_name)","<p>Loads a ruby-format specification from <code>file_name</code> and returns\nthe loaded spec.\n"],["load_specs","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-load_specs","(source_uri, file)","<p>Loads specs in <code>file</code>, fetching from <code>source_uri</code> if\nthe on-disk cache is out of date.\n"],["load_stream","Psych","classes/Psych.html#method-c-load_stream","(yaml, filename = nil)","<p>Load multiple documents given in <code>yaml</code>.  Returns the parsed\ndocuments as a list.  If a block is given, …\n"],["load_stream","Syck","classes/Syck.html#method-c-load_stream","( io )","<p>Loads all documents from the current <em>io</em> stream, returning a\n+YAML::Stream+ object containing all loaded …\n"],["load_stream","Syck","classes/Syck.html#method-c-load_stream","( io )","<p>Loads all documents from the current <em>io</em> stream, returning a\n+YAML::Stream+ object containing all loaded …\n"],["load_tclscript_rsrc","Tk","classes/Tk.html#method-c-load_tclscript_rsrc","(resource_name, file=None)",""],["load_tclscript_rsrcid","Tk","classes/Tk.html#method-c-load_tclscript_rsrcid","(resource_id, file=None)",""],["load_tk","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-load_tk","(dir)",""],["load_tk","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-load_tk","(dir)",""],["load_tk","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-load_tk","(dir)",""],["load_tk","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-load_tk","(dir)",""],["load_yaml","Gem","classes/Gem.html#method-c-load_yaml","()","<p>Loads YAML, preferring Psych\n"],["loaded_from=","Gem::Specification","classes/Gem/Specification.html#method-i-loaded_from-3D","(path)","<p>Set the location a Specification was loaded from. <code>obj</code> is\nconverted to a String.\n"],["loaded_path?","Gem","classes/Gem.html#method-c-loaded_path-3F","(path)",""],["local","Gem::Platform","classes/Gem/Platform.html#method-c-local","()",""],["local","Time","classes/Time.html#method-c-local","(*args)","<p>Same as <code>Time::gm</code>, but interprets the values in the local time\nzone.\n\n<pre><code>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...</code></pre>\n"],["local?","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-local-3F","()","<p>Is local fetching enabled?\n"],["local_address","BasicSocket","classes/BasicSocket.html#method-i-local_address","()","<p>Returns an Addrinfo object for local address obtained by getsockname.\n<p>Note that addrinfo.protocol is filled …\n"],["local_name","REXML::Functions","classes/REXML/Functions.html#method-c-local_name","( node_set=nil )","<p>UNTESTED\n"],["local_name","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-local_name","()",""],["local_name=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-local_name-3D","( name_str )",""],["local_variables","Kernel","classes/Kernel.html#method-i-local_variables","()","<p>Returns the names of the current local variables.\n\n<pre><code>fred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables ...</code></pre>\n"],["locale","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-locale","()",""],["locale","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-locale","()",""],["locale","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-locale","()",""],["locale","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-locale","()",""],["locale","WIN32OLE","classes/WIN32OLE.html#method-c-locale","()","<p>Returns current locale id (lcid). The default locale is\nLOCALE_SYSTEM_DEFAULT.\n\n<pre><code>lcid = WIN32OLE.locale</code></pre>\n"],["locale=","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-locale-3D","(locale)",""],["locale=","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-locale-3D","(locale)",""],["locale=","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-locale-3D","(locale)",""],["locale=","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-locale-3D","(locale)",""],["locale=","WIN32OLE","classes/WIN32OLE.html#method-c-locale-3D","(p1)","<p>Sets current locale id (lcid).\n\n<pre><code>WIN32OLE.locale = 1033 # set locale English(U.S)\nobj = WIN32OLE_VARIANT.new(&quot;$100,000&quot;, ...</code></pre>\n"],["locale_charmap","Encoding","classes/Encoding.html#method-c-locale_charmap","()","<p>Returns the locale charmap name. It returns nil if no appropriate\ninformation.\n\n<pre><code>Debian GNU/Linux\n  LANG=C ...</code></pre>\n"],["localtime","Time","classes/Time.html#method-i-localtime","(p1 = v1)","<p>Converts <em>time</em> to local time (using the local time zone in effect\nfor this process) modifying the receiver. …\n"],["locate","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-locate","(container, x, y)",""],["location","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-location","(x=None, y=None)",""],["location","TkGrid","classes/TkGrid.html#method-c-location","(master, x, y)",""],["location","TkGrid","classes/TkGrid.html#method-c-location","(master, x, y)",""],["location_of_caller","Gem","classes/Gem.html#method-c-location_of_caller","()","<p>The file name and line number of the caller of the caller of this method.\n"],["lock","Mutex","classes/Mutex.html#method-i-lock","()","<p>Attempts to grab the lock and waits if it isn&#39;t available. Raises\n<code>ThreadError</code> if <code>mutex</code> was locked …\n"],["lock","Net::HTTP","classes/Net/HTTP.html#method-i-lock","(path, body, initheader = nil)","<p>Sends a LOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["lock","Net::HTTP","classes/Net/HTTP.html#method-i-lock","(path, body, initheader = nil)","<p>Sends a LOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["lockcopy","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-lockcopy","(src, dst)",""],["locked?","Mutex","classes/Mutex.html#method-i-locked-3F","()","<p>Returns <code>true</code> if this lock is currently held by some thread.\n"],["log","BigMath","classes/BigMath.html#method-c-log","(p1, p2)","<p>Computes the natural logarithm of x to the specified number of digits of\nprecision.\n<p>If x is zero or negative, …\n"],["log","CMath","classes/CMath.html#method-c-log","(*args)","<p>Returns the natural logarithm of Complex.  If a second argument is given,\nit will be the base of logarithm. …\n"],["log","GServer","classes/GServer.html#method-i-log","(msg)","<p>Log a message to #stdlog, if it&#39;s defined.  This implementation outputs\nthe timestamp and message …\n"],["log","Logger","classes/Logger.html#method-i-log","(severity, message = nil, progname = nil, &block)",""],["log","Logger::Application","classes/Logger/Application.html#method-i-log","(severity, message = nil, &block)","<p>See Logger#add.  This application&#39;s <code>appname</code> is used.\n"],["log","Math","classes/Math.html#method-c-log","(p1, p2 = v2)","<p>Returns the natural logarithm of <em>numeric</em>. If additional second\nargument is given, it will be the base …\n"],["log","Sys","classes/Sys.html#method-i-log","(msg)","<p>Write a message to standard error if $verbose is enabled.\n"],["log","Syslog","classes/Syslog.html#method-c-log","(*args)","<p>Log a message with the specified priority. Example:\n\n<pre><code>Syslog.log(Syslog::LOG_CRIT, &quot;Out of disk space&quot;) ...</code></pre>\n"],["log","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-log","(level, data)","<p>Logs <code>data</code> at <code>level</code> if the given level is above\nthe current log level.\n"],["log","WEBrick::Log","classes/WEBrick/Log.html#method-i-log","(level, data)","<p>Same as BasicLog#log\n"],["log!","CMath","classes/CMath.html#method-c-log-21","(*args)",""],["log10","CMath","classes/CMath.html#method-c-log10","(z)","<p>returns the base 10 logarithm of <code>z</code>\n"],["log10","Math","classes/Math.html#method-c-log10","(p1)","<p>Returns the base 10 logarithm of <em>numeric</em>.\n\n<pre><code>Math.log10(1)       #=&gt; 0.0\nMath.log10(10)      #=&gt; 1.0\nMath.log10(10**100) ...\n</code></pre>\n"],["log10!","CMath","classes/CMath.html#method-c-log10-21","(z)",""],["log2","CMath","classes/CMath.html#method-c-log2","(z)","<p>returns the base 2 logarithm of <code>z</code>\n"],["log2","Math","classes/Math.html#method-c-log2","(p1)","<p>Returns the base 2 logarithm of <em>numeric</em>.\n\n<pre><code>Math.log2(1)      #=&gt; 0.0\nMath.log2(2)      #=&gt; 1.0\nMath.log2(32768) ...\n</code></pre>\n"],["log2!","CMath","classes/CMath.html#method-c-log2-21","(z)",""],["log=","Logger::Application","classes/Logger/Application.html#method-i-log-3D","(logdev)",""],["logger","Logger::Application","classes/Logger/Application.html#method-i-logger","()","<p>Logger for this application.  See the class Logger for an explanation.\n"],["logger=","Logger::Application","classes/Logger/Application.html#method-i-logger-3D","(logger)","<p>Sets the logger for this application.  See the class Logger for an\nexplanation.\n"],["logging","Net::POP3","classes/Net/POP3.html#method-i-logging","(msg)","<p>deguging output for <code>msg</code>\n"],["logging","Net::POP3","classes/Net/POP3.html#method-i-logging","(msg)","<p>deguging output for <code>msg</code>\n"],["logging","Net::POP3","classes/Net/POP3.html#method-i-logging","(msg)","<p>deguging output for <code>msg</code>\n"],["logging","Net::POP3","classes/Net/POP3.html#method-i-logging","(msg)","<p>deguging output for <code>msg</code>\n"],["login","Net::FTP","classes/Net/FTP.html#method-i-login","(user = \"anonymous\", passwd = nil, acct = nil)","<p>Logs in to the remote host. The session must have been previously\nconnected.  If <code>user</code> is the string “anonymous” …\n"],["login","Net::IMAP","classes/Net/IMAP.html#method-i-login","(user, password)","<p>Sends a LOGIN command to identify the client and carries the plaintext\n<code>password</code> authenticating this  …\n"],["login","Net::Telnet","classes/Net/Telnet.html#method-i-login","(options, password = nil)","<p>Login to the host with a given username and password.\n<p>The username and password can either be provided …\n"],["logout","Net::IMAP","classes/Net/IMAP.html#method-i-logout","()","<p>Sends a LOGOUT command to inform the server that the client is done with\nthe connection.\n"],["look_for_directives_in","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-look_for_directives_in","(context, comment)","<p>Look for directives in a normal comment block:\n\n<pre><code>* :title: My Awesome Project</code></pre>\n<p>This method modifies the <code>comment</code> …\n"],["look_for_directives_in","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-look_for_directives_in","(context, comment)","<p>Look for directives in a normal comment block:\n\n<pre><code># :stopdoc:\n# Don&#39;t display comment from this point forward</code></pre>\n"],["lookup","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-lookup","(name)",""],["lookup","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-lookup","(task_name, initial_scope=nil)","<p>Lookup a task, using scope and the scope hints in the task name. This\nmethod performs straight lookups …\n"],["lookup","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-lookup","(style, opt, state=None, fallback_value=None)",""],["lookup_ring","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-i-lookup_ring","(timeout=5, &block)","<p>Looks up RingServers waiting <code>timeout</code> seconds.  RingServers\nwill be given <code>block</code> as a callback, which will …\n"],["lookup_ring_any","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-i-lookup_ring_any","(timeout=5)","<p>Returns the first found remote TupleSpace.  Any further recovered\nTupleSpaces can be found by calling …\n"],["lookup_server","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-lookup_server","(req)","<p>Finds the appropriate virtual host to handle <code>req</code>\n"],["loop","Kernel","classes/Kernel.html#method-i-loop","()","<p>Repeatedly executes the block.\n<p>If no block is given, an enumerator is returned instead.\n\n<pre><code>loop do\n  print ...</code></pre>\n"],["loop_rest","TkTimer","classes/TkTimer.html#method-i-loop_rest","()",""],["loop_rest","TkTimer","classes/TkTimer.html#method-i-loop_rest","()",""],["loop_rest=","TkTimer","classes/TkTimer.html#method-i-loop_rest-3D","(rest)",""],["loop_rest=","TkTimer","classes/TkTimer.html#method-i-loop_rest-3D","(rest)",""],["loupe","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-loupe","(img, x, y, w, h, zoom)",""],["loupe","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-loupe","(img, x, y, w, h, zoom)",""],["lower","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-lower","(*wins)",""],["lower","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-lower","(*wins)",""],["lower","Tk::Canvas","classes/Tk/Canvas.html#method-i-lower","(tag, below=nil)","\n<pre><code>def itemcget(tagOrId, option)\n  case option.to_s\n  when &#39;dash&#39;, &#39;activedash&#39;, &#39;disableddash&#39;\n    conf ...\n</code></pre>\n"],["lower","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-lower","(tag, below=nil)",""],["lower","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-lower","(target=None)",""],["lower","TkTextTag","classes/TkTextTag.html#method-i-lower","(below=None)",""],["lower","TkTextTag","classes/TkTextTag.html#method-i-lower","(below=None)",""],["lower","TkcTagAccess","classes/TkcTagAccess.html#method-i-lower","(belowthis=None)",""],["lower","Win32::SSPI::SecurityHandle","classes/Win32/SSPI/SecurityHandle.html#method-i-lower","()",""],["lower_triangular?","Matrix","classes/Matrix.html#method-i-lower_triangular-3F","()","<p>Returns <code>true</code> is this is a lower triangular matrix.\n"],["lreorder","Tk::BWidget","classes/Tk/BWidget.html#method-c-lreorder","(list, neworder)",""],["ls","Net::FTP","classes/Net/FTP.html#method-i-ls","(*args)",""],["lset","TkVariable","classes/TkVariable.html#method-i-lset","(idx, val)",""],["lset","TkVariable","classes/TkVariable.html#method-i-lset","(idx, val)",""],["lstat","File","classes/File.html#method-c-lstat","(p1)","<p>Same as <code>File::stat</code>, but does not follow the last symbolic\nlink. Instead, reports on the link itself. …\n"],["lstat","File","classes/File.html#method-i-lstat","()","<p>Same as <code>IO#stat</code>, but does not follow the last symbolic link.\nInstead, reports on the link itself.\n\n<pre><code>File.symlink(&quot;testfile&quot;, ...</code></pre>\n"],["lstat","Pathname","classes/Pathname.html#method-i-lstat","()","<p>See <code>File.lstat</code>.\n"],["lstat","RubyVM::VPATH","classes/RubyVM/VPATH.html#method-i-lstat","(*args, &block)",""],["lstrip","String","classes/String.html#method-i-lstrip","()","<p>Returns a copy of <em>str</em> with leading whitespace removed. See also\n<code>String#rstrip</code> and <code>String#strip</code>.\n\n<pre><code>&quot;  hello ...</code></pre>\n"],["lstrip!","String","classes/String.html#method-i-lstrip-21","()","<p>Removes leading whitespace from <em>str</em>, returning <code>nil</code> if\nno change was made. See also <code>String#rstrip!</code> and …\n"],["lsub","Net::IMAP","classes/Net/IMAP.html#method-i-lsub","(refname, mailbox)","<p>Sends a LSUB command, and returns a subset of names from the set of names\nthat the user has declared …\n"],["ludecomp","LUSolve","classes/LUSolve.html#method-i-ludecomp","(a,n,zero=0,one=1)","<p>Performs LU decomposition of the n by n matrix a.\n"],["lup","Matrix","classes/Matrix.html#method-i-lup","()","<p>Returns the LUP decomposition of the matrix; see\n<code>LUPDecomposition</code>.\n\n<pre><code>a = Matrix[[1, 2], [3, 4]]\nl, u, p ...</code></pre>\n"],["lup_decomposition","Matrix","classes/Matrix.html#method-i-lup_decomposition","()",""],["lusolve","LUSolve","classes/LUSolve.html#method-i-lusolve","(a,b,ps,zero=0.0)","<p>Solves a*x = b for x, using LU decomposition.\n<p>a is a matrix, b is a constant vector, x is the solution …\n"],["m","C","classes/C.html#method-i-m","()",""],["m","C1","classes/C1.html#method-i-m","()",""],["m","C2","classes/C2.html#method-i-m","()",""],["m","CC","classes/CC.html#method-i-m","()",""],["m","Object","classes/Object.html#method-i-m","()",""],["magnitude","Bignum","classes/Bignum.html#method-i-magnitude","()","<p>Returns the absolute value of <em>big</em>.\n\n<pre><code>-1234567890987654321.abs   #=&gt; 1234567890987654321\n</code></pre>\n"],["magnitude","Complex","classes/Complex.html#method-i-magnitude","()","<p>Returns the absolute part of its polar form.\n"],["magnitude","Fixnum","classes/Fixnum.html#method-i-magnitude","()","<p>Returns the absolute value of <em>fix</em>.\n\n<pre><code>-12345.abs   #=&gt; 12345\n12345.abs    #=&gt; 12345\n</code></pre>\n"],["magnitude","Float","classes/Float.html#method-i-magnitude","()","<p>Returns the absolute value of <em>flt</em>.\n\n<pre><code>(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n</code></pre>\n"],["magnitude","Numeric","classes/Numeric.html#method-i-magnitude","()","<p>Returns the absolute value of <em>num</em>.\n\n<pre><code>12.abs         #=&gt; 12\n(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n</code></pre>\n"],["magnitude","Vector","classes/Vector.html#method-i-magnitude","()","<p>Returns the modulus (Pythagorean distance) of the vector.\n\n<pre><code>Vector[5,8,2].r =&gt; 9.643650761\n</code></pre>\n"],["mail","Net::POPMail","classes/Net/POPMail.html#method-i-mail","( dest = '' )",""],["mailfrom","Net::SMTP","classes/Net/SMTP.html#method-i-mailfrom","(from_addr)",""],["mailfrom","Net::SMTP","classes/Net/SMTP.html#method-i-mailfrom","(from_addr)",""],["mails","Net::POP3","classes/Net/POP3.html#method-i-mails","()","<p>Returns an array of Net::POPMail objects, representing all the messages on\nthe server.  This array is …\n"],["mails","Net::POP3","classes/Net/POP3.html#method-i-mails","()","<p>Returns an array of Net::POPMail objects, representing all the messages on\nthe server.  This array is …\n"],["mails","Net::POP3","classes/Net/POP3.html#method-i-mails","()","<p>Returns an array of Net::POPMail objects, representing all the messages on\nthe server.  This array is …\n"],["mails","Net::POP3","classes/Net/POP3.html#method-i-mails","()","<p>Returns an array of Net::POPMail objects, representing all the messages on\nthe server.  This array is …\n"],["main","IRB::Context","classes/IRB/Context.html#method-i-main","()",""],["main","Object","classes/Object.html#method-i-main","()",""],["main","Thread","classes/Thread.html#method-c-main","()","<p>Returns the main thread.\n"],["main_irb","IRB::JobManager","classes/IRB/JobManager.html#method-i-main_irb","()",""],["main_thread","IRB::JobManager","classes/IRB/JobManager.html#method-i-main_thread","()",""],["main_type","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-main_type","()","<p>Returns a content type string such as “text”. This method returns nil if\nContent-Type: header …\n"],["maininterp_eval","TkConsole","classes/TkConsole.html#method-c-maininterp_eval","(tcl_script)",""],["maininterp_record","TkConsole","classes/TkConsole.html#method-c-maininterp_record","(tcl_script)",""],["mainloop","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop","(check_root = true)",""],["mainloop","MultiTkIp","classes/MultiTkIp.html#method-c-mainloop","(check_root = true)",""],["mainloop","MultiTkIp","classes/MultiTkIp.html#method-c-mainloop","(check_root = true)",""],["mainloop","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop","(check_root = true)",""],["mainloop","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop","(check_root = true)",""],["mainloop","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop","(check_root = true)",""],["mainloop","MultiTkIp","classes/MultiTkIp.html#method-c-mainloop","(check_root = true)",""],["mainloop","MultiTkIp","classes/MultiTkIp.html#method-c-mainloop","(check_root = true)",""],["mainloop","RemoteTkIp","classes/RemoteTkIp.html#method-i-mainloop","()",""],["mainloop","TclTkIp","classes/TclTkIp.html#method-i-mainloop","(*args)",""],["mainloop","TclTkLib","classes/TclTkLib.html#method-i-mainloop","(check_root = true)",""],["mainloop","TclTkLib","classes/TclTkLib.html#method-c-mainloop","(p1 = v1)","<p>execute Tk_MainLoop\n"],["mainloop_abort_on_exception","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_abort_on_exception","()",""],["mainloop_abort_on_exception","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_abort_on_exception","()",""],["mainloop_abort_on_exception","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_abort_on_exception","()",""],["mainloop_abort_on_exception","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_abort_on_exception","()",""],["mainloop_abort_on_exception","RemoteTkIp","classes/RemoteTkIp.html#method-i-mainloop_abort_on_exception","()",""],["mainloop_abort_on_exception","TclTkIp","classes/TclTkIp.html#method-i-mainloop_abort_on_exception","()",""],["mainloop_abort_on_exception","TclTkLib","classes/TclTkLib.html#method-c-mainloop_abort_on_exception","()",""],["mainloop_abort_on_exception=","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_abort_on_exception-3D","(mode)",""],["mainloop_abort_on_exception=","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_abort_on_exception-3D","(mode)",""],["mainloop_abort_on_exception=","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_abort_on_exception-3D","(mode)",""],["mainloop_abort_on_exception=","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_abort_on_exception-3D","(mode)",""],["mainloop_abort_on_exception=","RemoteTkIp","classes/RemoteTkIp.html#method-i-mainloop_abort_on_exception-3D","(mode)",""],["mainloop_abort_on_exception=","TclTkIp","classes/TclTkIp.html#method-i-mainloop_abort_on_exception-3D","(p1)",""],["mainloop_abort_on_exception=","TclTkLib","classes/TclTkLib.html#method-c-mainloop_abort_on_exception-3D","(p1)",""],["mainloop_thread?","TclTkLib","classes/TclTkLib.html#method-c-mainloop_thread-3F","()",""],["mainloop_watchdog","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_watchdog","(check_root = true)",""],["mainloop_watchdog","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_watchdog","(check_root = true)",""],["mainloop_watchdog","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_watchdog","(check_root = true)",""],["mainloop_watchdog","MultiTkIp","classes/MultiTkIp.html#method-i-mainloop_watchdog","(check_root = true)",""],["mainloop_watchdog","RemoteTkIp","classes/RemoteTkIp.html#method-i-mainloop_watchdog","()",""],["mainloop_watchdog","TclTkIp","classes/TclTkIp.html#method-i-mainloop_watchdog","(*args)",""],["mainloop_watchdog","TclTkLib","classes/TclTkLib.html#method-c-mainloop_watchdog","(p1 = v1)",""],["mainloop_watchdog","TclTkLib","classes/TclTkLib.html#method-i-mainloop_watchdog","(check_root = true)",""],["major_version","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-major_version","()","<p>Returns major version.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;)\nputs ...</code></pre>\n"],["major_version","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-major_version","()","<p>Returns the type library major version.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...</code></pre>\n"],["make","Gem::Ext::Builder","classes/Gem/Ext/Builder.html#method-c-make","(dest_path, results)",""],["make","RSS::Maker","classes/RSS/Maker.html#method-i-make","(version, &block)",""],["makeClone","Object","classes/Object.html#method-i-makeClone","(count, win, txt)","<p>Procedures to make and kill clones; most of this is just so that the demo\nlooks nice…\n"],["makeCompoundMenu","Object","classes/Object.html#method-i-makeCompoundMenu","(mb)","<p>Toolbar :compound control:\n"],["makeNotebook","Object","classes/Object.html#method-i-makeNotebook","()","<p>Notebook demonstration:\n"],["makeThemeControl","Object","classes/Object.html#method-i-makeThemeControl","(parent)",""],["makeThemeMenu","Object","classes/Object.html#method-i-makeThemeMenu","(parent)",""],["makeToolbars","Object","classes/Object.html#method-i-makeToolbars","()","<p>Toolbar button standard vs. tile comparison:\n"],["make_SeeDismiss","Knights_Tour","classes/Knights_Tour.html#method-i-make_SeeDismiss","()",""],["make_affine!","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-make_affine-21","()",""],["make_const","Object","classes/Object.html#method-i-make_const","(prop, data, name)","<p>make_const(property, pairs, name): Prints a &#39;static const&#39;\nstructure for a given property, group …\n"],["make_destination_dirs","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-make_destination_dirs","(install_destdir)",""],["make_expires","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-make_expires","(sec=nil)","<p>Returns an expiry Time based on <code>sec</code> which can be one of:\n<p>Numeric &mdash; <code>sec</code> seconds into the future\n<p><code>true</code> &mdash; the expiry …\n"],["make_link","Pathname","classes/Pathname.html#method-i-make_link","(p1)","<p>See <code>File.link</code>.  Creates a hard link at <em>pathname</em>.\n"],["make_message","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-make_message","(message)","<p>Adds useful info about the parser to <code>message</code>\n"],["make_pairs","Object","classes/Object.html#method-i-make_pairs","(code_map)",""],["make_partial_content","WEBrick::HTTPServlet::DefaultFileHandler","classes/WEBrick/HTTPServlet/DefaultFileHandler.html#method-i-make_partial_content","(req, res, filename, filesize)",""],["make_passwd","WEBrick::HTTPAuth::BasicAuth","classes/WEBrick/HTTPAuth/BasicAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a basic password entry\n"],["make_passwd","WEBrick::HTTPAuth::DigestAuth","classes/WEBrick/HTTPAuth/DigestAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a digest password entry\n"],["make_passwd","WEBrick::HTTPAuth::UserDB","classes/WEBrick/HTTPAuth/UserDB.html#method-i-make_passwd","(realm, user, pass)","<p>Creates an obscured password in <code>realm</code> with <code>user</code>\nand <code>password</code> using the auth_type of this database.\n"],["make_random_fasta","Object","classes/Object.html#method-i-make_random_fasta","(id, desc, table, n)",""],["make_regexp","URI::Parser","classes/URI/Parser.html#method-i-make_regexp","(schemes = nil)","<p>returns Regexp that is default self.regexp, unless <code>schemes</code> is\nprovided. Then it is a Regexp.union with …\n"],["make_repeat_fasta","Object","classes/Object.html#method-i-make_repeat_fasta","(id, desc, src, n)",""],["make_safe","MultiTkIp","classes/MultiTkIp.html#method-i-make_safe","()",""],["make_safe","MultiTkIp","classes/MultiTkIp.html#method-i-make_safe","()",""],["make_safe","MultiTkIp","classes/MultiTkIp.html#method-i-make_safe","()",""],["make_safe","MultiTkIp","classes/MultiTkIp.html#method-i-make_safe","()",""],["make_safe","RemoteTkIp","classes/RemoteTkIp.html#method-i-make_safe","()",""],["make_safe","TclTkIp","classes/TclTkIp.html#method-i-make_safe","()",""],["make_signature","Object","classes/Object.html#method-i-make_signature","(filename, src)",""],["make_stream","Syck","classes/Syck.html#method-c-make_stream","( io )","<p>Class method for creating streams\n"],["make_stream","Syck","classes/Syck.html#method-c-make_stream","( io )","<p>Class method for creating streams\n"],["make_switch","OptionParser","classes/OptionParser.html#method-i-make_switch","(opts, block = nil)","<p>Creates an OptionParser::Switch from the parameters. The parsed argument\nvalue is passed to the given …\n"],["make_symlink","Pathname","classes/Pathname.html#method-i-make_symlink","(p1)","<p>See <code>File.symlink</code>.  Creates a symbolic link.\n"],["make_temp_directories","Gem::Indexer","classes/Gem/Indexer.html#method-i-make_temp_directories","()","<p>Make directories for index generation\n"],["make_thread_list","DEBUGGER__","classes/DEBUGGER__.html#method-i-make_thread_list","()",""],["make_tuple","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-make_tuple","(ary)","<p>Creates a Rinda::Tuple for <code>ary</code>.\n"],["makedirs","FileUtils","classes/FileUtils.html#method-c-makedirs","(list, options = {})",""],["makedirs","Rake::FtpUploader","classes/Rake/FtpUploader.html#method-i-makedirs","(path)","<p>Create the directory <code>path</code> in the uploader root path.\n"],["makedirs","Sys","classes/Sys.html#method-i-makedirs","(*dirs)","<p>Make the directories given in <code>dirs</code>.\n"],["maker_target","RSS::Atom::ContentModel","classes/RSS/Atom/ContentModel.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::Feed::Logo","classes/RSS/Atom/Feed/Logo.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::PersonConstruct","classes/RSS/Atom/PersonConstruct.html#method-i-maker_target","(target)",""],["maker_target","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-i-maker_target","(target)",""],["maker_target","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-maker_target","(target)",""],["makers","RSS::Maker","classes/RSS/Maker.html#method-i-makers","()",""],["malloc","DL","classes/DL.html#method-c-malloc","(p1)","<p>Allocate <code>size</code> bytes of memory and return the integer memory\naddress for the allocated memory.\n"],["malloc","DL::CPtr","classes/DL/CPtr.html#method-c-malloc","(p1, p2 = v2)","<p>Allocate <code>size</code> bytes of memory and associate it with an\noptional <code>freefunc</code> that will be called when the …\n"],["malloc","DL::CPtr","classes/DL/CPtr.html#method-c-malloc","(p1, p2 = v2)","<p>Allocate <code>size</code> bytes of memory and associate it with an\noptional <code>freefunc</code> that will be called when the …\n"],["malloc","DL::CStructEntity","classes/DL/CStructEntity.html#method-c-malloc","(types, func = nil)",""],["malloc","DL::CUnionEntity","classes/DL/CUnionEntity.html#method-c-malloc","(types, func=nil)",""],["malloc_allocated_size","GC","classes/GC.html#method-c-malloc_allocated_size","()","<p>The allocated size by malloc().\n<p>It returns the allocated size by malloc().\n"],["malloc_allocations","GC","classes/GC.html#method-c-malloc_allocations","()","<p>The number of allocated memory object by malloc().\n<p>It returns the number of allocated memory object by …\n"],["manage","Tk::Wm","classes/Tk/Wm.html#method-c-manage","(win)",""],["manage_owners","Gem::Commands::OwnerCommand","classes/Gem/Commands/OwnerCommand.html#method-i-manage_owners","(method, name, owners)",""],["manager","TkWinfo","classes/TkWinfo.html#method-c-manager","(win)",""],["manager","TkWinfo","classes/TkWinfo.html#method-c-manager","(win)",""],["mandelbrot?","Object","classes/Object.html#method-i-mandelbrot-3F","(z)",""],["manipulable?","MultiTkIp","classes/MultiTkIp.html#method-c-manipulable-3F","()",""],["manipulable?","MultiTkIp","classes/MultiTkIp.html#method-i-manipulable-3F","()",""],["manipulable?","MultiTkIp","classes/MultiTkIp.html#method-c-manipulable-3F","()",""],["manipulable?","MultiTkIp","classes/MultiTkIp.html#method-i-manipulable-3F","()",""],["manipulable?","MultiTkIp","classes/MultiTkIp.html#method-i-manipulable-3F","()",""],["manipulable?","MultiTkIp","classes/MultiTkIp.html#method-i-manipulable-3F","()",""],["manipulable?","MultiTkIp","classes/MultiTkIp.html#method-c-manipulable-3F","()",""],["manipulable?","MultiTkIp","classes/MultiTkIp.html#method-c-manipulable-3F","()",""],["manipulable?","RemoteTkIp","classes/RemoteTkIp.html#method-i-manipulable-3F","()",""],["manipulable?","RemoteTkIp","classes/RemoteTkIp.html#method-c-manipulable-3F","()",""],["map","Array","classes/Array.html#method-i-map","()","<p>Invokes <em>block</em> once for each element of <code>self</code>. Creates\na new array containing the values returned by the …\n"],["map","Enumerable","classes/Enumerable.html#method-i-map","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n<p>If no block is given, …\n"],["map","Matrix","classes/Matrix.html#method-i-map","()",""],["map","Object::Syck::Out","classes/Object/Syck/Out.html#method-i-map","(p1, p2 = v2)","<p>YAML::Syck::Out::map\n"],["map","Psych::Coder","classes/Psych/Coder.html#method-i-map","(tag = @tag, style = @style)","<p>Emit a map.  The coder will be yielded to the block.\n"],["map","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-map","( type, &e )","<p>Quick mapping\n"],["map","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-map","(*wins)",""],["map","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-map","(*wins)",""],["map","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-map","(style=nil, keys=nil)",""],["map","Vector","classes/Vector.html#method-i-map","()",""],["map!","Array","classes/Array.html#method-i-map-21","()","<p>Invokes the block once for each element of <code>self</code>, replacing the\nelement with the value returned by <em>block</em> …\n"],["map!","Set","classes/Set.html#method-i-map-21","()",""],["map2","Vector","classes/Vector.html#method-i-map2","(v)","<p>Like Vector#collect2, but returns a Vector instead of an Array.\n"],["map=","Psych::Coder","classes/Psych/Coder.html#method-i-map-3D","(map)","<p>Emit a map with <code>value</code>\n"],["map_configinfo","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-map_configinfo","(style=nil, key=None)",""],["map_default_configinfo","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-map_default_configinfo","(key=None)",""],["map_gems_to_specs","Gem::Indexer","classes/Gem/Indexer.html#method-i-map_gems_to_specs","(gems)",""],["mapped?","TkWinfo","classes/TkWinfo.html#method-c-mapped-3F","(win)",""],["mapped?","TkWinfo","classes/TkWinfo.html#method-c-mapped-3F","(win)",""],["mark","Board","classes/Board.html#method-i-mark","()",""],["mark","Psych::Parser","classes/Psych/Parser.html#method-i-mark","()","<p>Returns a Psych::Parser::Mark object that contains line, column, and index\ninformation.\n"],["mark","Tk::Entry","classes/Tk/Entry.html#method-i-mark","(pos)",""],["mark","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-mark","(pos)",""],["mark","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-mark","(pos)",""],["mark","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-mark","(pos)",""],["mark","TkTextImage","classes/TkTextImage.html#method-i-mark","()",""],["mark","TkTextImage","classes/TkTextImage.html#method-i-mark","()",""],["mark","TkTextWindow","classes/TkTextWindow.html#method-i-mark","()",""],["mark","TkTextWindow","classes/TkTextWindow.html#method-i-mark","()",""],["mark_add","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-mark_add","(*nodes)",""],["mark_clear","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-mark_clear","()",""],["mark_get","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-mark_get","()",""],["mark_gravity","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-mark_gravity","(mark, direction=nil)",""],["mark_names","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-mark_names","()",""],["mark_next","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-mark_next","(index)",""],["mark_previous","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-mark_previous","(index)",""],["mark_remove","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-mark_remove","(*nodes)",""],["mark_set","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-mark_set","(mark, index)",""],["mark_trusted","MultiTkIp","classes/MultiTkIp.html#method-i-mark_trusted","(slave = '')",""],["mark_trusted","MultiTkIp","classes/MultiTkIp.html#method-c-mark_trusted","(slave = '')",""],["mark_trusted","MultiTkIp","classes/MultiTkIp.html#method-i-mark_trusted","(slave = '')",""],["mark_trusted","MultiTkIp","classes/MultiTkIp.html#method-c-mark_trusted","(slave = '')",""],["mark_trusted","MultiTkIp","classes/MultiTkIp.html#method-i-mark_trusted","(slave = '')",""],["mark_trusted","MultiTkIp","classes/MultiTkIp.html#method-c-mark_trusted","(slave = '')",""],["mark_trusted","MultiTkIp","classes/MultiTkIp.html#method-c-mark_trusted","(slave = '')",""],["mark_trusted","MultiTkIp","classes/MultiTkIp.html#method-i-mark_trusted","(slave = '')",""],["mark_unset","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-mark_unset","(*marks)",""],["mark_version","Gem::Specification","classes/Gem/Specification.html#method-i-mark_version","()","<p>Sets the rubygems_version to the current RubyGems version.\n"],["marker_after","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_after","(id, target=nil)",""],["marker_before","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_before","(id, target=None)",""],["marker_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_bind","(tag, context, *args)",""],["marker_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_bind_append","(tag, context, *args)",""],["marker_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_bind_remove","(tag, context)",""],["marker_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_bindinfo","(tag, context=nil)",""],["marker_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_cget","(id, option)",""],["marker_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_cget_strict","(id, option)",""],["marker_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_cget_tkstring","(id, option)",""],["marker_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_configinfo","(id, slot=nil)",""],["marker_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_configure","(*args)",""],["marker_create","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_create","(type, keys={})",""],["marker_delete","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_delete","(*ids)",""],["marker_exist?","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_exist-3F","(id)",""],["marker_names","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_names","(*pats)",""],["marker_type","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-marker_type","(id)",""],["markup","RDoc::Text","classes/RDoc/Text.html#method-i-markup","(text)","<p>Convert a string in markup format into HTML.\n<p>Requires the including class to implement #formatter\n"],["markup_code","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-markup_code","()","<p>Turns the method&#39;s token stream into HTML.\n<p>Prepends line numbers if <code>add_line_numbers</code> is true.\n"],["marquee_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-marquee_cget","(option)",""],["marquee_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-marquee_cget_strict","(option)",""],["marquee_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-marquee_cget_tkstring","(option)",""],["marquee_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-marquee_configinfo","(slot=nil)",""],["marquee_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-marquee_configure","(slot, value=None)",""],["marshal_dump","Delegator","classes/Delegator.html#method-i-marshal_dump","()","<p>Serialization support for the object returned by _<em>getobj</em>_.\n"],["marshal_dump","OpenStruct","classes/OpenStruct.html#method-i-marshal_dump","()","<p>Provides marshalling support for use by the Marshal library. Returning the\nunderlying Hash table that …\n"],["marshal_dump","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-marshal_dump","()","<p>Dumps this AnyMethod for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Attr","classes/RDoc/Attr.html#method-i-marshal_dump","()","<p>Dumps this Attr for use by ri.  See also #marshal_load\n"],["marshal_dump","Time","classes/Time.html#method-i-marshal_dump","()","<p>undocumented\n"],["marshal_dump","Version","classes/Version.html#method-i-marshal_dump","()","<p>Dump only the raw version string, not the complete object. It&#39;s a\nstring for backwards (RubyGems …\n"],["marshal_load","Delegator","classes/Delegator.html#method-i-marshal_load","(data)","<p>Reinitializes delegation from a serialized object.\n"],["marshal_load","OpenStruct","classes/OpenStruct.html#method-i-marshal_load","(x)","<p>Provides marshalling support for use by the Marshal library. Accepting a\nHash of keys and values which …\n"],["marshal_load","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-marshal_load","(array)","<p>Loads this AnyMethod from <code>array</code>.  For a loaded AnyMethod the\nfollowing methods will return cached values: …\n"],["marshal_load","RDoc::Attr","classes/RDoc/Attr.html#method-i-marshal_load","(array)","<p>Loads this Attr from <code>array</code>.  For a loaded Attr the following\nmethods will return cached values:\n<p>#full_name …\n"],["marshal_load","Time","classes/Time.html#method-i-marshal_load","(p1)","<p>undocumented\n"],["marshal_load","Version","classes/Version.html#method-i-marshal_load","(array)","<p>Load custom marshal format. It&#39;s a string for backwards (RubyGems 1.3.5\nand earlier) compatibility. …\n"],["marshal_version","Gem","classes/Gem.html#method-c-marshal_version","()","<p>The version of the Marshal format for your Ruby.\n"],["mask","IPAddr","classes/IPAddr.html#method-i-mask","(prefixlen)","<p>Returns a new ipaddr built by masking IP address with the given\nprefixlen/netmask. (e.g. 8, 64, “255.255.255.0”, …\n"],["mask","Syslog","classes/Syslog.html#method-c-mask","()","<p>Returns the log priority mask in effect. The mask is not reset by opening\nor closing syslog.\n"],["mask!","IPAddr","classes/IPAddr.html#method-i-mask-21","(mask)","<p>Set current netmask to given mask.\n"],["mask=","Syslog","classes/Syslog.html#method-c-mask-3D","(p1)","<p>Sets the log priority mask. A method LOG_UPTO is defined to make it easier\nto set mask values. Example: …\n"],["mask_protected_sequences","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-mask_protected_sequences","()","<p>Escapes special sequences of text to prevent conversion to RDoc\n"],["master?","MultiTkIp","classes/MultiTkIp.html#method-c-master-3F","()",""],["master?","MultiTkIp","classes/MultiTkIp.html#method-i-master-3F","()",""],["master?","MultiTkIp","classes/MultiTkIp.html#method-i-master-3F","()",""],["master?","MultiTkIp","classes/MultiTkIp.html#method-c-master-3F","()",""],["master?","MultiTkIp","classes/MultiTkIp.html#method-i-master-3F","()",""],["master?","MultiTkIp","classes/MultiTkIp.html#method-c-master-3F","()",""],["master?","MultiTkIp","classes/MultiTkIp.html#method-i-master-3F","()",""],["master?","MultiTkIp","classes/MultiTkIp.html#method-c-master-3F","()",""],["match","ACL::ACLEntry","classes/ACL/ACLEntry.html#method-i-match","(addr)","<p>Matches <code>addr</code> against this entry.\n"],["match","ACL::ACLList","classes/ACL/ACLList.html#method-i-match","(addr)","<p>Matches <code>addr</code> against each ACLEntry in this list.\n"],["match","Gem::Platform","classes/Gem/Platform.html#method-c-match","(platform)",""],["match","IRB::SLex","classes/IRB/SLex.html#method-i-match","(token)",""],["match","IRB::SLex::Node","classes/IRB/SLex/Node.html#method-i-match","(chrs, op = \"\")","<p>chrs: String\n\n<pre><code>character array\nio must have getc()/ungetc(); and ungetc() must be\nable to be called arbitrary ...</code></pre>\n"],["match","OptionParser::CompletingHash","classes/OptionParser/CompletingHash.html#method-i-match","(key)","<p>Completion for hash key.\n"],["match","REXML::IOSource","classes/REXML/IOSource.html#method-i-match","( pattern, cons=false )",""],["match","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-match","(element, path, namespaces=EMPTY_HASH)",""],["match","REXML::Source","classes/REXML/Source.html#method-i-match","(pattern, cons=false)",""],["match","REXML::XPath","classes/REXML/XPath.html#method-c-match","(element, path=nil, namespaces=nil, variables={})","<p>Returns an array of nodes matching a given XPath.\n"],["match","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-match","( path_stack, nodeset )",""],["match","Regexp","classes/Regexp.html#method-i-match","(p1, p2 = v2)","<p>Returns a <code>MatchData</code> object describing the match, or\n<code>nil</code> if there was no match. This is equivalent to …\n"],["match","Rinda::Template","classes/Rinda/Template.html#method-i-match","(tuple)","<p>Matches this template against <code>tuple</code>.  The <code>tuple</code>\nmust be the same size as the template.  An element with …\n"],["match","Rinda::TemplateEntry","classes/Rinda/TemplateEntry.html#method-i-match","(tuple)","<p>Matches this TemplateEntry against <code>tuple</code>.  See Template#match\nfor details on how a Template matches a …\n"],["match","String","classes/String.html#method-i-match","(*args)","<p>Converts <em>pattern</em> to a <code>Regexp</code> (if it isn&#39;t already\none), then invokes its <code>match</code> method on <em>str</em>.  If …\n"],["match","Symbol","classes/Symbol.html#method-i-match","(p1)","<p>Returns <code>sym.to_s =~ obj</code>.\n"],["match","TupleSpace::Template","classes/TupleSpace/Template.html#method-i-match","(tuple)",""],["match?","Gem::Dependency","classes/Gem/Dependency.html#method-i-match-3F","(name, version)",""],["match?","StringScanner","classes/StringScanner.html#method-i-match-3F","(p1)","<p>Tests whether the given <code>pattern</code> is matched from the current\nscan pointer. Returns the length of the match, …\n"],["match_cert","CertStore","classes/CertStore.html#method-i-match_cert","(cert1, cert2)",""],["match_io","IRB::SLex::Node","classes/IRB/SLex/Node.html#method-i-match_io","(io, op = \"\")",""],["match_path","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-match_path","( ypath_str )","<p>YPath search returning a complete depth array\n"],["match_segment","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-match_segment","( ypath, depth )","<p>Search a node for a single YPath segment\n"],["match_to","REXML::Source","classes/REXML/Source.html#method-i-match_to","( char, pattern )",""],["match_to_consume","REXML::Source","classes/REXML/Source.html#method-i-match_to_consume","( char, pattern )",""],["matched","StringScanner","classes/StringScanner.html#method-i-matched","()","<p>Returns the last matched string.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\ns.match?(/\\w+/)     # -&gt; 4\ns.matched ...</code></pre>\n"],["matched?","StringScanner","classes/StringScanner.html#method-i-matched-3F","()","<p>Returns <code>true</code> iff the last match was successful.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\ns.match?(/\\w+/)  ...</code></pre>\n"],["matched_size","StringScanner","classes/StringScanner.html#method-i-matched_size","()","<p>Returns the size of the most recent match (see #matched), or\n<code>nil</code> if there was no recent match.\n\n<pre><code>s = StringScanner.new(&#39;test ...</code></pre>\n"],["matches?","REXML::Entity","classes/REXML/Entity.html#method-c-matches-3F","(string)","<p>Evaluates whether the given string matchs an entity definition, returning\ntrue if so, and false otherwise. …\n"],["matches?","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Optional","classes/REXML/Validation/Optional.html#method-i-matches-3F","(event)",""],["matches?","REXML::Validation::Sequence","classes/REXML/Validation/Sequence.html#method-i-matches-3F","(event)",""],["matches_for_glob","Gem::Specification","classes/Gem/Specification.html#method-i-matches_for_glob","(glob)","<p>Return all files in this gem that match for <code>glob</code>.\n"],["matches_spec?","Gem::Dependency","classes/Gem/Dependency.html#method-i-matches_spec-3F","(spec)",""],["matching_file?","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-matching_file-3F","(spec, path)","<p>Attempts to find a matching path using the require_paths of the given\n<code>spec</code>.\n"],["matching_files","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-matching_files","(spec, path)","<p>Returns files matching <code>path</code> in <code>spec</code>.\n"],["matching_methods","Object","classes/Object.html#method-i-matching_methods","(s='', m=callable_methods)",""],["matching_paths","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-i-matching_paths","(spec, path)",""],["matching_specs","Gem::Dependency","classes/Gem/Dependency.html#method-i-matching_specs","(platform_only = false)",""],["math_mode=","IRB::Context","classes/IRB/Context.html#method-i-math_mode-3D","(opt)",""],["matzruby_exec","Object","classes/Object.html#method-i-matzruby_exec","(file)",""],["max","Enumerable","classes/Enumerable.html#method-i-max","()","<p>Returns the object in <em>enum</em> with the maximum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["max","Range","classes/Range.html#method-i-max","()","<p>Returns the maximum value in <em>rng</em>. The second uses the block to\ncompare values.  Returns nil if the first …\n"],["max","SizedQueue","classes/SizedQueue.html#method-i-max","()","<p>Returns the maximum size of the queue.\n"],["max=","SizedQueue","classes/SizedQueue.html#method-i-max-3D","(max)","<p>Sets the maximum size of the queue.\n"],["max_by","Enumerable","classes/Enumerable.html#method-i-max_by","()","<p>Returns the object in <em>enum</em> that gives the maximum value from the\ngiven block.\n<p>If no block is given, an …\n"],["max_flag_count","Net::IMAP","classes/Net/IMAP.html#method-c-max_flag_count","()","<p>Returns the max number of flags interned to symbols.\n"],["max_flag_count=","Net::IMAP","classes/Net/IMAP.html#method-c-max_flag_count-3D","(count)","<p>Sets the max number of flags interned to symbols.\n"],["max_input_length","ActionMap","classes/ActionMap.html#method-i-max_input_length","()",""],["max_input_length_rec","ActionMap","classes/ActionMap.html#method-i-max_input_length_rec","(tree)",""],["max_nesting","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-max_nesting","()","<p>This integer returns the maximum level of data structure nesting in the\ngenerated JSON, max_nesting = …\n"],["max_nesting=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-max_nesting-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON\nto the integer depth, max_nesting …\n"],["maxgroups","Process","classes/Process.html#method-c-maxgroups","()","<p>Returns the maximum number of gids allowed in the supplemental group access\nlist.\n\n<pre><code>Process.maxgroups   ...</code></pre>\n"],["maxgroups=","Process","classes/Process.html#method-c-maxgroups-3D","(p1)","<p>Sets the maximum number of gids allowed in the supplemental group access\nlist.\n"],["maxlen","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-maxlen","(*src_strings)",""],["maxlen","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-maxlen","(*src_strings)",""],["maxlen","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-maxlen","(*src_strings)",""],["maxlen","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-maxlen","(*src_strings)",""],["maxsize","Tk::Wm","classes/Tk/Wm.html#method-i-maxsize","(*args)",""],["maxsize","Tk::Wm","classes/Tk/Wm.html#method-c-maxsize","(win, *args)","<p>def Wm.manage(win, use_id = nil)\n\n<pre><code># Tcl/Tk 8.5+ feature\n# -------------------------------------------------------------- ...</code></pre>\n"],["maxx","Curses::Window","classes/Curses/Window.html#method-i-maxx","()","<p>A getter for the maximum columns for the window\n"],["maxy","Curses::Window","classes/Curses/Window.html#method-i-maxy","()","<p>A getter for the maximum lines for the window\n"],["maybe_64bit?","Object","classes/Object.html#method-i-maybe_64bit-3F","()",""],["mc","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-mc","(*args)",""],["mc","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-mc","(*args)",""],["mc","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-mc","(*args)",""],["mc","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-mc","(*args)",""],["mday","Date","classes/Date.html#method-i-mday","()","<p>Returns the day of the month (1-31).\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).mday           #=&gt; 3\n</code></pre>\n"],["mday","Time","classes/Time.html#method-i-mday","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:03 -0600\nt.day      ...\n</code></pre>\n"],["mdoc2man","Mdoc2Man","classes/Mdoc2Man.html#method-c-mdoc2man","(i, o)",""],["mdoc2man","Mdoc2Man","classes/Mdoc2Man.html#method-i-mdoc2man","(i, o)",""],["mdtm","Net::FTP","classes/Net/FTP.html#method-i-mdtm","(filename)","<p>Issues the MDTM command.  TODO: more info.\n"],["measure","Benchmark","classes/Benchmark.html#method-c-measure","(label = \"\")","<p>Returns the time used to execute the given block as a Benchmark::Tms\nobject.\n"],["measure","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-measure","(executable, file)",""],["measure","Object","classes/Object.html#method-i-measure","(bench)",""],["measure","TkFont","classes/TkFont.html#method-i-measure","(text)",""],["measure","TkFont","classes/TkFont.html#method-c-measure","(fnt, text)",""],["measure","TkFont","classes/TkFont.html#method-c-measure","(fnt, text)",""],["measure","TkFont","classes/TkFont.html#method-i-measure","(text)",""],["measure2","Object","classes/Object.html#method-i-measure2","()",""],["measure_displayof","TkFont","classes/TkFont.html#method-i-measure_displayof","(win, text)",""],["measure_displayof","TkFont","classes/TkFont.html#method-c-measure_displayof","(fnt, win, text)",""],["measure_displayof","TkFont","classes/TkFont.html#method-i-measure_displayof","(win, text)",""],["measure_displayof","TkFont","classes/TkFont.html#method-c-measure_displayof","(fnt, win, text)",""],["measure_file","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-measure_file","(file)",""],["media_subtype","Net::IMAP::BodyTypeBasic","classes/Net/IMAP/BodyTypeBasic.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMessage","classes/Net/IMAP/BodyTypeMessage.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMultipart","classes/Net/IMAP/BodyTypeMultipart.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeText","classes/Net/IMAP/BodyTypeText.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["member?","DBM","classes/DBM.html#method-i-member-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["member?","ENV","classes/ENV.html#method-c-member-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["member?","Enumerable","classes/Enumerable.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre><code>IO.constants.include? :SEEK_SET ...</code></pre>\n"],["member?","GDBM","classes/GDBM.html#method-i-member-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["member?","Hash","classes/Hash.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_key?(&quot;a&quot;)   #=&gt; ...\n</code></pre>\n"],["member?","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-i-member-3F","(obj)",""],["member?","Rake::InvocationChain::EmptyInvocationChain","classes/Rake/InvocationChain/EmptyInvocationChain.html#method-i-member-3F","(obj)",""],["member?","Range","classes/Range.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an element of <em>rng</em>,\n<code>false</code> otherwise.  If beg and end are numeric, comparison is …\n"],["member?","SDBM","classes/SDBM.html#method-i-member-3F","(p1)",""],["member?","Set","classes/Set.html#method-i-member-3F","(o)",""],["members","Struct","classes/Struct.html#method-i-members","()","<p>Returns an array of strings representing the names of the instance\nvariables.\n\n<pre><code>Customer = Struct.new(:name, ...</code></pre>\n"],["members","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-i-members","(group)","<p>Retrieve the list of members from <code>group</code>\n"],["memberwise","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-memberwise","(op, x)","<p>Returns a new Tms object obtained by memberwise operation <code>op</code>\nof the individual times for this Tms object …\n"],["menu","Tk::BWidget::SelectColor","classes/Tk/BWidget/SelectColor.html#method-i-menu","(*args)",""],["menu","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menu","()",""],["menu","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menu","()",""],["menubar","Tk::Iwidgets::Mainwindow","classes/Tk/Iwidgets/Mainwindow.html#method-i-menubar","(*args)",""],["menubuttons","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-menubuttons","(val = nil)",""],["menucget","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menucget","(key)",""],["menucget","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menucget","(key)",""],["menucget_strict","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menucget_strict","(key)",""],["menucget_strict","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menucget_strict","(key)",""],["menuconfiginfo","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menuconfiginfo","(key=nil)",""],["menuconfiginfo","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menuconfiginfo","(key=nil)",""],["menuconfigure","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menuconfigure","(key, val=None)",""],["menuconfigure","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-menuconfigure","(key, val=None)",""],["menupath","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-menupath","(pat)",""],["menupath_glob","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-menupath_glob","(pat)",""],["menupath_tclregexp","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-menupath_tclregexp","(pat)",""],["menutype","Tk::Menu","classes/Tk/Menu.html#method-i-menutype","(index)",""],["merge","ActionMap","classes/ActionMap.html#method-c-merge","(*mappings, &block)",""],["merge","Gem::Dependency","classes/Gem/Dependency.html#method-i-merge","(other)","<p>Merges the requirements of <code>other</code> into this dependency\n"],["merge","Hash","classes/Hash.html#method-i-merge","(p1)","<p>Returns a new hash containing the contents of <em>other_hash</em> and the\ncontents of <em>hsh</em>. If no block is specified, …\n"],["merge","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-merge","(p1)",""],["merge","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-merge","(class_module)","<p>Merges <code>class_module</code> into this ClassModule.\n<p>The data in <code>class_module</code> is preferred over the receiver.\n"],["merge","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-merge","(other)","<p>When this is a collection of documents (#file is not set and this document\ncontains only other documents …\n"],["merge","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-merge","(other)","<p>Appends <code>other</code>&#39;s parts\n"],["merge","Set","classes/Set.html#method-i-merge","(enum)","<p>Merges the elements of the given enumerable object to the set and returns\nself.\n"],["merge","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-merge","(*vectors)",""],["merge","URI::Generic","classes/URI/Generic.html#method-i-merge","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["merge!","Hash","classes/Hash.html#method-i-merge-21","(p1)","<p>Adds the contents of <em>other_hash</em> to <em>hsh</em>.  If no block is\nspecified, entries with duplicate keys are overwritten …\n"],["merge!","URI::Generic","classes/URI/Generic.html#method-i-merge-21","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["merge2","ActionMap","classes/ActionMap.html#method-c-merge2","(map1, map2, &block)",""],["merge_options","Gem::Command","classes/Gem/Command.html#method-i-merge_options","(new_options)","<p>Merge a set of command options with the set of default options (without\nmodifying the default option …\n"],["merge_rects","ActionMap","classes/ActionMap.html#method-c-merge_rects","(*rects_list)",""],["merged?","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-merged-3F","()","<p>Does this Document contain other Documents?\n"],["message","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-message","(*args)",""],["message","ChatClient","classes/ChatClient.html#method-i-message","(there, str)",""],["message","Exception","classes/Exception.html#method-i-message","()","<p>Returns the result of invoking <code>exception.to_s</code>. Normally this\nreturns the exception&#39;s message or name. …\n"],["message","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-c-message","(klass, exp)",""],["message","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-c-message","(klass, exp)",""],["message","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-message","()","<p>The first line of the human readable reply text\n"],["message","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-message","()","<p>Default stringizing method to emit standard error message.\n"],["message","Rake::RuleRecursionOverflowError","classes/Rake/RuleRecursionOverflowError.html#method-i-message","()",""],["message","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-message","(msg, opts={})",""],["messageReadDelayed","Object","classes/Object.html#method-i-messageReadDelayed","(t)",""],["message_loop","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-c-message_loop","()","<p>Translates and dispatches Windows message.\n"],["message_print","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-message_print","(*args)",""],["meta","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-meta","(w, tag, alist)","<p>This routine is called whenever a “&lt;meta&gt;” markup is seen.\n"],["meta_vars","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-meta_vars","()","<p>This method provides the metavariables defined by the revision 3 of “The\nWWW Common Gateway Interface …\n"],["metafile","Tk::BLT::Barchart","classes/Tk/BLT/Barchart.html#method-i-metafile","(file=None)",""],["metafile","Tk::BLT::Stripchart","classes/Tk/BLT/Stripchart.html#method-i-metafile","(file=None)",""],["method","Object","classes/Object.html#method-i-method","(p1)","<p>Looks up the named method as a receiver in <em>obj</em>, returning a\n<code>Method</code> object (or raising <code>NameError</code>). The …\n"],["methodCall","XMLRPC::Create","classes/XMLRPC/Create.html#method-i-methodCall","(name, *params)",""],["methodResponse","XMLRPC::Create","classes/XMLRPC/Create.html#method-i-methodResponse","(is_ret, *params)","<p>generates a XML-RPC methodResponse document\n<p>if is_ret == false then the params array must contain only …\n"],["method_added","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-method_added","(id)",""],["method_defined?","Module","classes/Module.html#method-i-method_defined-3F","(p1)","<p>Returns <code>true</code> if the named method is defined by <em>mod</em>\n(or its included modules and, if <em>mod</em> is a class, its …\n"],["method_document","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-method_document","(name, filtered)","<p>Builds a RDoc::Markup::Document from <code>found</code>,\n<code>klasess</code> and <code>includes</code>\n"],["method_file","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-method_file","(klass_name, method_name)","<p>Path to the ri data for <code>method_name</code> in <code>klass_name</code>\n"],["method_missing","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)","<p>Routes method calls to the referenced object.\n"],["method_missing","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)","<p>Routes method calls to the referenced object.\n"],["method_missing","Delegator","classes/Delegator.html#method-i-method_missing","(m, *args, &block)","<p>Handles the magic of delegation through _<em>getobj</em>_.\n"],["method_missing","IEHandler","classes/IEHandler.html#method-i-method_missing","(event, *args)",""],["method_missing","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-method_missing","(cmd, *arg)",""],["method_missing","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-method_missing","(cmd, *arg)",""],["method_missing","Microsoft_XMLDSO_1_0","classes/Microsoft_XMLDSO_1_0.html#method-i-method_missing","(cmd, *arg)",""],["method_missing","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-method_missing","(cmd, *arg)",""],["method_missing","Msxml","classes/Msxml.html#method-i-method_missing","(cmd, *arg)",""],["method_missing","MultiTkIp","classes/MultiTkIp.html#method-c-method_missing","(m, *args)",""],["method_missing","MultiTkIp","classes/MultiTkIp.html#method-i-method_missing","(id, *args)",""],["method_missing","MultiTkIp","classes/MultiTkIp.html#method-c-method_missing","(m, *args)",""],["method_missing","MultiTkIp","classes/MultiTkIp.html#method-c-method_missing","(m, *args)",""],["method_missing","MultiTkIp","classes/MultiTkIp.html#method-i-method_missing","(id, *args)",""],["method_missing","MultiTkIp","classes/MultiTkIp.html#method-i-method_missing","(id, *args)",""],["method_missing","MultiTkIp","classes/MultiTkIp.html#method-i-method_missing","(id, *args)",""],["method_missing","MultiTkIp","classes/MultiTkIp.html#method-c-method_missing","(m, *args)",""],["method_missing","Object","classes/Object.html#method-i-method_missing","(id, *args)",""],["method_missing","REXML::Functions","classes/REXML/Functions.html#method-c-method_missing","( id )",""],["method_missing","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-method_missing","( id, *args )",""],["method_missing","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-method_missing","(sym, *args, &block)",""],["method_missing","Tk::Busy","classes/Tk/Busy.html#method-i-method_missing","(id, *args)",""],["method_missing","Tk::HTML_Widget::ClippingWindow","classes/Tk/HTML_Widget/ClippingWindow.html#method-i-method_missing","(m, *args, &b)",""],["method_missing","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-method_missing","(id, *args)",""],["method_missing","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-method_missing","(id, *args)",""],["method_missing","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-method_missing","(id, *args)",""],["method_missing","Tk::Tile","classes/Tk/Tile.html#method-c-method_missing","(*args)",""],["method_missing","Tk::Tile","classes/Tk/Tile.html#method-c-method_missing","(*args)",""],["method_missing","Tk::Tile","classes/Tk/Tile.html#method-c-method_missing","(*args)",""],["method_missing","TkCore::Tk_OBJECT_TABLE","classes/TkCore/Tk_OBJECT_TABLE.html#method-i-method_missing","(m, *args, &b)",""],["method_missing","TkFont","classes/TkFont.html#method-i-method_missing","(id, *args)",""],["method_missing","TkFont","classes/TkFont.html#method-i-method_missing","(id, *args)",""],["method_missing","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-method_missing","(id, *args)",""],["method_missing","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-method_missing","(id, *args)",""],["method_missing","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-method_missing","(id, *args)",""],["method_missing","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-method_missing","(id, *args)",""],["method_missing","WEBrick::FakeProxyURI","classes/WEBrick/FakeProxyURI.html#method-i-method_missing","(meth, *args)",""],["method_missing","WIN32OLE","classes/WIN32OLE.html#method-i-method_missing","(*args)","<p>Calls WIN32OLE#invoke method.\n"],["method_missing","XMLRPC::Client::Proxy","classes/XMLRPC/Client/Proxy.html#method-i-method_missing","(mid, *args)",""],["method_missing","XMLRPC::XMLParser::REXMLStreamParser::StreamListener","classes/XMLRPC/XMLParser/REXMLStreamParser/StreamListener.html#method-i-method_missing","(*a)",""],["method_missing","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-method_missing","(*a)",""],["method_type","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-method_type","(selector)","<p>Returns the type of method (:both, :instance, :class) for\n<code>selector</code>\n"],["methods","Delegator","classes/Delegator.html#method-i-methods","()","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["methods","Object","classes/Object.html#method-i-methods","(p1)","<p>Returns a list of the names of public and protected methods of\n<em>obj</em>. This will include all the methods …\n"],["methods_by_type","RDoc::Context","classes/RDoc/Context.html#method-i-methods_by_type","(section = nil)","<p>Breaks method_list into a nested hash by type (<code>&#39;class&#39;</code>\nor <code>&#39;instance&#39;</code>) and visibility …\n"],["methods_matching","RDoc::Context","classes/RDoc/Context.html#method-i-methods_matching","(methods, singleton = false, &block)","<p>Yields AnyMethod and Attr entries matching the list of names in\n<code>methods</code>.\n"],["metrics","TkFont","classes/TkFont.html#method-i-metrics","(option=nil)",""],["metrics","TkFont","classes/TkFont.html#method-c-metrics","(fnt, option=nil)",""],["metrics","TkFont","classes/TkFont.html#method-c-metrics","(fnt, option=nil)",""],["metrics","TkFont","classes/TkFont.html#method-i-metrics","(option=nil)",""],["metrics_displayof","TkFont","classes/TkFont.html#method-c-metrics_displayof","(fnt, win, option=nil)",""],["metrics_displayof","TkFont","classes/TkFont.html#method-c-metrics_displayof","(fnt, win, option=nil)",""],["metrics_displayof","TkFont","classes/TkFont.html#method-i-metrics_displayof","(win, option=nil)",""],["metrics_displayof","TkFont","classes/TkFont.html#method-i-metrics_displayof","(win, option=nil)",""],["metrics_hash","TkFont","classes/TkFont.html#method-i-metrics_hash","(option=nil)",""],["metrics_hash","TkFont","classes/TkFont.html#method-i-metrics_hash","(option=nil)",""],["metrics_hash","TkFont","classes/TkFont.html#method-c-metrics_hash","(fnt, option=nil)",""],["metrics_hash","TkFont","classes/TkFont.html#method-c-metrics_hash","(fnt, option=nil)",""],["metrics_hash_displayof","TkFont","classes/TkFont.html#method-c-metrics_hash_displayof","(fnt, win, option=nil)",""],["metrics_hash_displayof","TkFont","classes/TkFont.html#method-i-metrics_hash_displayof","(win, option=nil)",""],["metrics_hash_displayof","TkFont","classes/TkFont.html#method-c-metrics_hash_displayof","(fnt, win, option=nil)",""],["metrics_hash_displayof","TkFont","classes/TkFont.html#method-i-metrics_hash_displayof","(win, option=nil)",""],["microseconds","Tk::Clock","classes/Tk/Clock.html#method-c-microseconds","()",""],["milestone","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-milestone","(txt, time, col=None)",""],["milestone","Tk::Tcllib::Plotchart::Timechart","classes/Tk/Tcllib/Plotchart/Timechart.html#method-i-milestone","(txt, time, col=None)",""],["milliseconds","Tk::Clock","classes/Tk/Clock.html#method-c-milliseconds","()",""],["mime_split","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-mime_split","()",""],["mime_type","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-mime_type","(filename, mime_tab)",""],["min","Enumerable","classes/Enumerable.html#method-i-min","()","<p>Returns the object in <em>enum</em> with the minimum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["min","Range","classes/Range.html#method-i-min","()","<p>Returns the minimum value in <em>rng</em>. The second uses the block to\ncompare values.  Returns nil if the first …\n"],["min","Time","classes/Time.html#method-i-min","()","<p>Returns the minute of the hour (0..59) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:25:51 -0600\nt.min   ...\n</code></pre>\n"],["min=","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-min-3D","(value)",""],["min_by","Enumerable","classes/Enumerable.html#method-i-min_by","()","<p>Returns the object in <em>enum</em> that gives the minimum value from the\ngiven block.\n<p>If no block is given, an …\n"],["minmax","Enumerable","classes/Enumerable.html#method-i-minmax","()","<p>Returns two elements array which contains the minimum and the maximum value\nin the enumerable.  The first …\n"],["minmax_by","Enumerable","classes/Enumerable.html#method-i-minmax_by","()","<p>Returns two elements array array containing the objects in <em>enum</em>\nthat gives the minimum and maximum values …\n"],["minor","Matrix","classes/Matrix.html#method-i-minor","(*param)","<p>Returns a section of the matrix.  The parameters are either:\n<p>start_row, nrows, start_col, ncols; OR\n<p>row_range …\n"],["minor_version","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-minor_version","()","<p>Returns minor version.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;)\nputs ...</code></pre>\n"],["minor_version","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-minor_version","()","<p>Returns the type library minor version.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...</code></pre>\n"],["minsize","Tk::Wm","classes/Tk/Wm.html#method-i-minsize","(*args)",""],["minsize","Tk::Wm","classes/Tk/Wm.html#method-c-minsize","(win, *args)",""],["minute=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-minute-3D","(minute)",""],["minute=","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-minute-3D","(minute)",""],["mjd","Date","classes/Date.html#method-i-mjd","()","<p>Returns the modified Julian day number.  This is a whole number, which is\nadjusted by the offset as the …\n"],["mkTextConfig","Object","classes/Object.html#method-i-mkTextConfig","(w,x,y,option,value,color)","<p>Next, create some items that allow the text&#39;s anchor position to be\nedited.\n"],["mkboard","Object","classes/Object.html#method-i-mkboard","()",""],["mkcol","Net::HTTP","classes/Net/HTTP.html#method-i-mkcol","(path, body = nil, initheader = nil)","<p>Sends a MKCOL request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["mkcol","Net::HTTP","classes/Net/HTTP.html#method-i-mkcol","(path, body = nil, initheader = nil)","<p>Sends a MKCOL request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["mkdir","Dir","classes/Dir.html#method-c-mkdir","(p1, p2 = v2)","<p>Makes a new directory named by <em>string</em>, with permissions specified\nby the optional parameter <em>anInteger</em> …\n"],["mkdir","FileUtils","classes/FileUtils.html#method-c-mkdir","(list, options = {})","<p>Options: mode noop verbose\n<p>Creates one or more directories.\n\n<pre><code>FileUtils.mkdir &#39;test&#39;\nFileUtils.mkdir %w( ...</code></pre>\n"],["mkdir","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-i-mkdir","(name, mode)","<p>Creates a new directory in the tar file <code>name</code> with\n<code>mode</code>\n"],["mkdir","Net::FTP","classes/Net/FTP.html#method-i-mkdir","(dirname)","<p>Creates a remote directory.\n"],["mkdir","Object","classes/Object.html#method-i-mkdir","()","<p>Create the DIR, if they do not already exist.\n\n<pre><code>ruby -run -e mkdir -- [OPTION] DIR\n\n-p          no error ...</code></pre>\n"],["mkdir","Pathname","classes/Pathname.html#method-i-mkdir","(p1 = v1)","<p>See <code>Dir.mkdir</code>.  Create the referenced directory.\n"],["mkdir","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-mkdir","(*path)","<p>Dir related methods\n<p>Shell#mkdir Shell#rmdir\n"],["mkdir_p","FileUtils","classes/FileUtils.html#method-c-mkdir_p","(list, options = {})","<p>Options: mode noop verbose\n<p>Creates a directory and all its parent directories. For example,\n\n<pre><code>FileUtils.mkdir_p ...</code></pre>\n"],["mkmatrix","Object","classes/Object.html#method-i-mkmatrix","(rows, cols)",""],["mkmf","Object","classes/Object.html#method-i-mkmf","()","<p>Create makefile using mkmf.\n\n<pre><code>ruby -run -e mkmf -- [OPTION] EXTNAME [OPTION]\n\n-d ARGS     run dir_config ...</code></pre>\n"],["mkpath","FileUtils","classes/FileUtils.html#method-c-mkpath","(list, options = {})",""],["mkpath","Pathname","classes/Pathname.html#method-i-mkpath","()","<p>See <code>FileUtils.mkpath</code>.  Creates a full path, including any\nintermediate directories that don&#39;t yet …\n"],["mkpieces","Object","classes/Object.html#method-i-mkpieces","()",""],["mktime","Time","classes/Time.html#method-c-mktime","(*args)","<p>Same as <code>Time::gm</code>, but interprets the values in the local time\nzone.\n\n<pre><code>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...</code></pre>\n"],["mktmpdir","Dir","classes/Dir.html#method-c-mktmpdir","(prefix_suffix=nil, *rest)","<p>Dir.mktmpdir creates a temporary directory.\n<p>The directory is created with 0700 permission.\n<p>The prefix and …\n"],["mmult","Object","classes/Object.html#method-i-mmult","(rows, cols, m1, m2)",""],["moddir","DemoTree","classes/DemoTree.html#method-c-moddir","(idx, tree, node)",""],["mode","BigDecimal","classes/BigDecimal.html#method-c-mode","(p1, p2 = v2)","<p>Controls handling of arithmetic exceptions and rounding. If no value is\nsupplied, the current value is …\n"],["mode","File::Stat","classes/File/Stat.html#method-i-mode","()","<p>Returns an integer representing the permission bits of <em>stat</em>. The\nmeaning of the bits is platform dependent; …\n"],["mode","Rake::FtpFile","classes/Rake/FtpFile.html#method-i-mode","()",""],["mode","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-mode","(sel_mode)","<p>set &#39;mode&#39; option of listboxes\n"],["mode","TkMultiListbox","classes/TkMultiListbox.html#method-i-mode","(sel_mode)","<p>set &#39;mode&#39; option of listboxes\n"],["models","RSS::Element","classes/RSS/Element.html#method-i-models","()",""],["modifiable","OpenStruct","classes/OpenStruct.html#method-i-modifiable","()","<p>#modifiable is used internally to check if the OpenStruct is able to be\nmodified before granting access …\n"],["modified?","PhotoCanvas","classes/PhotoCanvas.html#method-i-modified-3F","()",""],["modified?","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-modified-3F","(mode)",""],["modify_taskbar","Tk::Winico","classes/Tk/Winico.html#method-i-modify_taskbar","(keys = {})",""],["module","RDoc::Include","classes/RDoc/Include.html#method-i-module","()","<p>Attempts to locate the included module object.  Returns the name if not\nknown.\n<p>The scoping rules of Ruby …\n"],["module?","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-module-3F","()","<p>Does this object represent a module?\n"],["module?","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-module-3F","()","<p>This is a module, returns true\n"],["module_eval","Module","classes/Module.html#method-i-module_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>. This can be\nused to add methods to a class. <code>module_eval</code> …\n"],["module_exec","Module","classes/Module.html#method-i-module_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["modules","RDoc::Context","classes/RDoc/Context.html#method-i-modules","()","<p>Array of modules in this context\n"],["modules","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-modules","()","<p>Modules cache accessor.  An Array of all the modules (and classes) in the\nstore.\n"],["modules","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-modules","()",""],["modules_hash","RDoc::Context","classes/RDoc/Context.html#method-i-modules_hash","()","<p>Hash of modules keyed by module name\n"],["modules_hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-modules_hash","()",""],["modulo","BigDecimal","classes/BigDecimal.html#method-i-modulo","(p1)","<p>Returns the modulus from dividing by b. See divmod.\n"],["modulo","Bignum","classes/Bignum.html#method-i-modulo","(p1)","<p>Returns big modulo other. See Numeric.divmod for more information.\n"],["modulo","Fixnum","classes/Fixnum.html#method-i-modulo","(p1)","<p>Returns <code>fix</code> modulo <code>other</code>. See\n<code>numeric.divmod</code> for more information.\n"],["modulo","Float","classes/Float.html#method-i-modulo","(p1)","<p>Return the modulo after division of <code>flt</code> by <code>other</code>.\n\n<pre><code>6543.21.modulo(137)      #=&gt; 104.21\n6543.21.modulo(137.24) ...\n</code></pre>\n"],["modulo","Numeric","classes/Numeric.html#method-i-modulo","(p1)","\n<pre><code>x.modulo(y) means x-y*(x/y).floor</code></pre>\n<p>Equivalent to <em>num.divmod(aNumeric)</em>.\n<p>See <code>Numeric#divmod</code>.\n"],["mon","Date","classes/Date.html#method-i-mon","()","<p>Returns the month (1-12).\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).mon            #=&gt; 2\n</code></pre>\n"],["mon","Time","classes/Time.html#method-i-mon","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:30 -0600\nt.mon    ...\n</code></pre>\n"],["mon=","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-mon-3D","(value)",""],["mon_enter","MonitorMixin","classes/MonitorMixin.html#method-i-mon_enter","()","<p>Enters exclusive section.\n"],["mon_exit","MonitorMixin","classes/MonitorMixin.html#method-i-mon_exit","()","<p>Leaves exclusive section.\n"],["mon_synchronize","MonitorMixin","classes/MonitorMixin.html#method-i-mon_synchronize","()","<p>Enters exclusive section and executes the block.  Leaves the exclusive\nsection automatically when the …\n"],["mon_try_enter","MonitorMixin","classes/MonitorMixin.html#method-i-mon_try_enter","()","<p>Attempts to enter exclusive section.  Returns <code>false</code> if lock\nfails.\n"],["monday?","Date","classes/Date.html#method-i-monday-3F","()","<p>Returns true if the date is Monday.\n"],["monday?","Time","classes/Time.html#method-i-monday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Monday.\n\n<pre><code>t = Time.local(2003, 8, 4)       #=&gt; 2003-08-04 00:00:00 -0500 ...\n</code></pre>\n"],["month","Date","classes/Date.html#method-i-month","()","<p>Returns the month (1-12).\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).mon            #=&gt; 2\n</code></pre>\n"],["month","Time","classes/Time.html#method-i-month","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:30 -0600\nt.mon    ...\n</code></pre>\n"],["month=","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-month-3D","(value)",""],["monthly","Cal","classes/Cal.html#method-i-monthly","(y, m)",""],["mount","Tk::Trofs","classes/Tk/Trofs.html#method-c-mount","(archive, mountpoint=None)",""],["mount","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-mount","(dir, servlet, *options)","<p>Mounts <code>servlet</code> on <code>dir</code> passing\n<code>options</code> to the servlet at creation time\n"],["mount_proc","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-mount_proc","(dir, proc=nil, &block)","<p>Mounts <code>proc</code> or <code>block</code> on <code>dir</code> and\ncalls it with a WEBrick::HTTPRequest and WEBrick::HTTPResponse\n"],["mountpoint?","Pathname","classes/Pathname.html#method-i-mountpoint-3F","()","<p>mountpoint? returns <code>true</code> if <code>self</code> points to a\nmountpoint.\n"],["mousebar","Tk::Iwidgets::Mainwindow","classes/Tk/Iwidgets/Mainwindow.html#method-i-mousebar","(*args)",""],["mouseinterval","Curses","classes/Curses.html#method-c-mouseinterval","(p1)","<p>The Curses.mouseinterval function sets the maximum time (in thousands of a\nsecond) that can elapse between …\n"],["mousemask","Curses","classes/Curses.html#method-c-mousemask","(p1)","<p>Returns the <code>mask</code> of the reportable events\n"],["move","AnimatedWaveDemo","classes/AnimatedWaveDemo.html#method-i-move","()","<p>animation control\n"],["move","Curses::Window","classes/Curses/Window.html#method-i-move","(p1, p2)","<p>Moves the window so that the upper left-hand corner is at position\n(<code>y</code>, <code>x</code>)\n"],["move","FileUtils","classes/FileUtils.html#method-c-move","(src, dest, options = {})",""],["move","Net::HTTP","classes/Net/HTTP.html#method-i-move","(path, initheader = nil)","<p>Sends a MOVE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["move","Net::HTTP","classes/Net/HTTP.html#method-i-move","(path, initheader = nil)","<p>Sends a MOVE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["move","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-move","(port, tuple, sec=nil)","<p>Moves <code>tuple</code> to <code>port</code>.\n"],["move","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-move","(dest, keys={})",""],["move","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-move","(win, x, y)",""],["move","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-move","(win, x, y)",""],["move","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-move","(item, idx)",""],["move","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-move","(index)",""],["move","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-move","(page, index)",""],["move","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-move","(parent, node, idx)",""],["move","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-move","(index, parent=nil)",""],["move","Tk::Canvas","classes/Tk/Canvas.html#method-i-move","(tag, dx, dy)",""],["move","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-move","(tag, x, y)",""],["move","TkcTagAccess","classes/TkcTagAccess.html#method-i-move","(xamount, yamount)",""],["move","TupleSpace","classes/TupleSpace.html#method-i-move","(dest, template, non_block=false)",""],["move0","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move0","(step = nil)",""],["move1","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move1","(step = nil)",""],["move10","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move10","(step = nil)",""],["move11","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move11","(step = nil)",""],["move12","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move12","(step = nil)",""],["move13","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move13","(step = nil)",""],["move14","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move14","(step = nil)",""],["move15","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move15","(step = nil)",""],["move15a","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move15a","()",""],["move16","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move16","(step = nil)",""],["move17","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move17","(step = nil)",""],["move18","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move18","(step = nil)",""],["move19","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move19","(step = nil)",""],["move2","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move2","(step = nil)",""],["move20","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move20","(step = nil)",""],["move21","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move21","(step = nil)",""],["move22","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move22","(step = nil)",""],["move23","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move23","(step = nil)",""],["move24","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move24","(step = nil)",""],["move25","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move25","(step = nil)","<p>Displaying the message\n"],["move26","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move26","(step = nil)","<p>Collapsing balloon\n"],["move3","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move3","(step = nil)",""],["move4","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move4","(step = nil)",""],["move5","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move5","(step = nil)",""],["move6","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move6","(step = nil)",""],["move7","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move7","(step = nil)",""],["move8","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move8","(step = nil)",""],["move9","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move9","(step = nil)",""],["move_abs","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-move_abs","(item, xy)",""],["move_after","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-move_after","(index, base_idx)",""],["move_after","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-move_after","(idx)",""],["move_after","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-move_after","(tag, dest)",""],["move_after","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-move_after","(dest)",""],["move_before","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-move_before","(index, base_idx)",""],["move_before","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-move_before","(idx)",""],["move_before","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-move_before","(tag, dest)",""],["move_before","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-move_before","(dest)",""],["move_big_image","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-move_big_image","(b)",""],["move_from_i","Planet","classes/Planet.html#method-i-move_from_i","(bodies, nbodies, dt, i)",""],["move_into","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-move_into","(tag, dest)",""],["move_into","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-move_into","(dest)",""],["move_piece","Knights_Tour","classes/Knights_Tour.html#method-i-move_piece","(last, square)","<p>Perform a Knight&#39;s move and schedule the next move.\n"],["move_to","Tk::Canvas","classes/Tk/Canvas.html#method-i-move_to","(tag, x, y)",""],["move_to","TkcTagAccess","classes/TkcTagAccess.html#method-i-move_to","(x, y)",""],["moveobject","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-moveobject","(obj)",""],["moveto","Tk::Canvas","classes/Tk/Canvas.html#method-i-moveto","(tag, x, y)",""],["moveto","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-moveto","(fraction)",""],["moveto","TkcTagAccess","classes/TkcTagAccess.html#method-i-moveto","(x, y)",""],["msgd","Tk::Iwidgets::Mainwindow","classes/Tk/Iwidgets/Mainwindow.html#method-i-msgd","(*args)",""],["mtime","File","classes/File.html#method-c-mtime","(p1)","<p>Returns the modification time for the named file as a Time object.\n\n<pre><code>File.mtime(&quot;testfile&quot;)   #=&gt; Tue Apr ...\n</code></pre>\n"],["mtime","File","classes/File.html#method-i-mtime","()","<p>Returns the modification time for <em>file</em>.\n\n<pre><code>File.new(&quot;testfile&quot;).mtime   #=&gt; Wed Apr 09 08:53:14 CDT 2003\n</code></pre>\n"],["mtime","File::Stat","classes/File/Stat.html#method-i-mtime","()","<p>Returns the modification time of <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).mtime   #=&gt; Wed Apr 09 08:53:14 CDT 2003\n</code></pre>\n"],["mtime","Net::FTP","classes/Net/FTP.html#method-i-mtime","(filename, local = false)","<p>Returns the last modification time of the (remote) file.  If\n<code>local</code> is <code>true</code>, it is returned as a local …\n"],["mtime","Pathname","classes/Pathname.html#method-i-mtime","()","<p>See <code>File.mtime</code>.  Returns last modification time.\n"],["mtime","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-mtime","()","<p>Returns last modification time recorded in the gzip file header.\n"],["mtime=","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-mtime-3D","(p1)","<p>Specify the modification time (<code>mtime</code>) in the gzip header.\nUsing a Fixnum or Integer\n"],["mu_extended","Mutex_m","classes/Mutex_m.html#method-i-mu_extended","()",""],["mu_lock","Mutex_m","classes/Mutex_m.html#method-i-mu_lock","()",""],["mu_locked?","Mutex_m","classes/Mutex_m.html#method-i-mu_locked-3F","()",""],["mu_synchronize","Mutex_m","classes/Mutex_m.html#method-i-mu_synchronize","(&block)","<p>locking\n"],["mu_try_lock","Mutex_m","classes/Mutex_m.html#method-i-mu_try_lock","()",""],["mu_unlock","Mutex_m","classes/Mutex_m.html#method-i-mu_unlock","()",""],["mult","BigDecimal","classes/BigDecimal.html#method-i-mult","(p1, p2)",""],["multicall","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-multicall","(*methods)","<p>Multicall methods ————————————————————–\n"],["multicall2","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-multicall2","(*methods)",""],["multicall2_async","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-multicall2_async","(*methods)",""],["multicall_async","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-multicall_async","(*methods)",""],["multipart?","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-multipart-3F","()","<p>Returns whether the form contained multipart/form-data\n"],["multipart?","Net::IMAP::BodyTypeBasic","classes/Net/IMAP/BodyTypeBasic.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMessage","classes/Net/IMAP/BodyTypeMessage.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMultipart","classes/Net/IMAP/BodyTypeMultipart.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeText","classes/Net/IMAP/BodyTypeText.html#method-i-multipart-3F","()",""],["multipart_form","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-multipart_form","(action = nil, enctype = \"multipart/form-data\")","<p>Generate a Form element with multipart encoding as a String.\n<p>Multipart encoding is used for forms that …\n"],["must_C_version","StringScanner","classes/StringScanner.html#method-c-must_C_version","()","<p>This method is defined for backward compatibility.\n"],["must_call_validators","RSS::Element","classes/RSS/Element.html#method-i-must_call_validators","()",""],["mutex","DRb","classes/DRb.html#method-c-mutex","()",""],["mutex","MultiTkIp","classes/MultiTkIp.html#method-c-mutex","()",""],["mutex","MultiTkIp","classes/MultiTkIp.html#method-i-mutex","()",""],["mutex","MultiTkIp","classes/MultiTkIp.html#method-i-mutex","()",""],["mutex","MultiTkIp","classes/MultiTkIp.html#method-c-mutex","()",""],["mutex","MultiTkIp","classes/MultiTkIp.html#method-i-mutex","()",""],["mutex","MultiTkIp","classes/MultiTkIp.html#method-c-mutex","()",""],["mutex","MultiTkIp","classes/MultiTkIp.html#method-c-mutex","()",""],["mutex","MultiTkIp","classes/MultiTkIp.html#method-i-mutex","()",""],["mutex","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-mutex","()",""],["mutex","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-mutex","()",""],["mutex","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-mutex","()",""],["mutex","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-mutex","()",""],["mutex","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-mutex","()",""],["mutex","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-i-mutex","()",""],["mutex","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-i-mutex","()",""],["mutex","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-mutex","()",""],["mutex","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-mutex","()",""],["mutex","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-i-mutex","()",""],["mutex","Tk::Tcllib::Plotchart::PlotSeries","classes/Tk/Tcllib/Plotchart/PlotSeries.html#method-i-mutex","()",""],["mutex","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-mutex","()",""],["mutex","TkComm","classes/TkComm.html#method-i-mutex","()",""],["mutex","TkCore::Tk_OBJECT_TABLE","classes/TkCore/Tk_OBJECT_TABLE.html#method-i-mutex","()",""],["mutex","TkFont","classes/TkFont.html#method-i-mutex","()",""],["mutex","TkFont","classes/TkFont.html#method-i-mutex","()",""],["mutex","TkImage","classes/TkImage.html#method-i-mutex","()",""],["mutex","TkNamespace","classes/TkNamespace.html#method-i-mutex","()",""],["mutex","TkOptionDB","classes/TkOptionDB.html#method-i-mutex","()",""],["mutex","TkOptionDB","classes/TkOptionDB.html#method-i-mutex","()",""],["mutex","TkOptionDB","classes/TkOptionDB.html#method-i-mutex","()",""],["mutex","TkTextMark","classes/TkTextMark.html#method-i-mutex","()",""],["mutex","TkTextMark","classes/TkTextMark.html#method-i-mutex","()",""],["mutex","TkTextTag","classes/TkTextTag.html#method-i-mutex","()",""],["mutex","TkTextTag","classes/TkTextTag.html#method-i-mutex","()",""],["mutex","TkTimer","classes/TkTimer.html#method-i-mutex","()",""],["mutex","TkTimer","classes/TkTimer.html#method-i-mutex","()",""],["mutex","TkVariable","classes/TkVariable.html#method-i-mutex","()",""],["mutex","TkVariable","classes/TkVariable.html#method-i-mutex","()",""],["mutex","TkVirtualEvent","classes/TkVirtualEvent.html#method-i-mutex","()",""],["mutex","TkVirtualEvent","classes/TkVirtualEvent.html#method-i-mutex","()",""],["mutex","TkcGroup","classes/TkcGroup.html#method-i-mutex","()",""],["mutex","TkcTag","classes/TkcTag.html#method-i-mutex","()",""],["mv","FileUtils","classes/FileUtils.html#method-c-mv","(src, dest, options = {})","<p>Options: force noop verbose\n<p>Moves file(s) <code>src</code> to <code>dest</code>.  If <code>file</code>\nand <code>dest</code> exist on the different disk partition, …\n"],["mv","Object","classes/Object.html#method-i-mv","()","<p>Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.\n\n<pre><code>ruby -run -e mv -- [OPTION] SOURCE DEST\n\n-v    ...</code></pre>\n"],["mv","TupleSpace","classes/TupleSpace.html#method-i-mv","(dest, template, non_block=false)",""],["n_bytes","Net::POP3","classes/Net/POP3.html#method-i-n_bytes","()","<p>Returns the total size in bytes of all the messages on the POP server.\n"],["n_bytes","Net::POP3","classes/Net/POP3.html#method-i-n_bytes","()","<p>Returns the total size in bytes of all the messages on the POP server.\n"],["n_bytes","Net::POP3","classes/Net/POP3.html#method-i-n_bytes","()","<p>Returns the total size in bytes of all the messages on the POP server.\n"],["n_bytes","Net::POP3","classes/Net/POP3.html#method-i-n_bytes","()","<p>Returns the total size in bytes of all the messages on the POP server.\n"],["n_jobs","IRB::JobManager","classes/IRB/JobManager.html#method-i-n_jobs","()",""],["n_mails","Net::POP3","classes/Net/POP3.html#method-i-n_mails","()","<p>Returns the number of messages on the POP server.\n"],["n_mails","Net::POP3","classes/Net/POP3.html#method-i-n_mails","()","<p>Returns the number of messages on the POP server.\n"],["n_mails","Net::POP3","classes/Net/POP3.html#method-i-n_mails","()","<p>Returns the number of messages on the POP server.\n"],["n_mails","Net::POP3","classes/Net/POP3.html#method-i-n_mails","()","<p>Returns the number of messages on the POP server.\n"],["name","DL::CFunc","classes/DL/CFunc.html#method-i-name","()","<p>Get the name of this function\n"],["name","DL::Function","classes/DL/Function.html#method-i-name","()",""],["name","Encoding","classes/Encoding.html#method-i-name","()","<p>Returns the name of the encoding.\n\n<pre><code>Encoding::UTF_8.name      #=&gt; &quot;UTF-8&quot;\n</code></pre>\n"],["name","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-name","()","<p>BSTR name get name of the attribute\n"],["name","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-name","()","<p>BSTR name name of the document type (root of the tree)\n"],["name","Method","classes/Method.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","Module","classes/Module.html#method-i-name","()","<p>Returns the name of the module <em>mod</em>.  Returns nil for anonymous\nmodules.\n"],["name","NameError","classes/NameError.html#method-i-name","()","<p>Return the name associated with this NameError exception.\n"],["name","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-name","()","<p>Returns the name of the cipher which may differ slightly from the original\nname provided.\n"],["name","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-name","()","<p>Returns the sn of this Digest instance.\n<p>Example\n\n<pre><code>digest = OpenSSL::Digest::SHA512.new\nputs digest.name # ...</code></pre>\n"],["name","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-name","()",""],["name","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-i-name","()",""],["name","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-name","()","<p>Method name\n<p>If the method has no assigned name, it extracts it from #call_seq.\n"],["name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-name","()",""],["name","REXML::Document","classes/REXML/Document.html#method-i-name","()",""],["name","REXML::Functions","classes/REXML/Functions.html#method-c-name","( node_set=nil )",""],["name","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-name","()",""],["name","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-name","()",""],["name","Rake::Task","classes/Rake/Task.html#method-i-name","()","<p>Name of the task, including any namespace qualifiers.\n"],["name","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-name","()",""],["name","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-name","()",""],["name","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-name","()",""],["name","Tk::ICONS","classes/Tk/ICONS.html#method-i-name","()",""],["name","TkDialogObj","classes/TkDialogObj.html#method-i-name","()",""],["name","TkDialogObj","classes/TkDialogObj.html#method-i-name","()",""],["name","TkFont","classes/TkFont.html#method-i-name","()",""],["name","TkFont","classes/TkFont.html#method-i-name","()",""],["name","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-name","()",""],["name","UnboundMethod","classes/UnboundMethod.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-name","()","<p>call-seq\n\n<pre><code>WIN32OLE_METHOD#name</code></pre>\n<p>Returns the name of the method.\n"],["name","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-name","()","<p>Returns name.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;)\nmethod = WIN32OLE_METHOD.new(tobj, ...</code></pre>\n"],["name","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-name","()","<p>Returns OLE type name.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;)\nputs ...</code></pre>\n"],["name","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-name","()","<p>Returns the type library name.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;)\nname ...</code></pre>\n"],["name","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-name","()","<p>Returns the name of variable.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...</code></pre>\n"],["name","Win32::Registry","classes/Win32/Registry.html#method-i-name","()","<p>Full path of key such as &#39;HKEY_CURRENT_USERSOFTWAREfoobar&#39;.\n"],["name=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-name-3D","(new_name)","<p>Allows overriding the initial name.\n<p>Used for modules and classes that are constant aliases.\n"],["name=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-name-3D","( name_str, ns=nil )",""],["name=","REXML::Namespace","classes/REXML/Namespace.html#method-i-name-3D","( name )","<p>Sets the name and the expanded name\n"],["name_for_path","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-name_for_path","()","<p>Name to use to generate the url: modules and classes that are aliases for\nanother module or class return …\n"],["name_for_path","RDoc::Context","classes/RDoc/Context.html#method-i-name_for_path","()","<p>Name to use to generate the url. <code>#full_name</code> by default.\n"],["name_list","Encoding","classes/Encoding.html#method-c-name_list","()","<p>Returns the list of available encoding names.\n\n<pre><code>Encoding.name_list\n#=&gt; [&quot;US-ASCII&quot;, &quot;ASCII-8BIT&quot;, &quot;UTF-8&quot;, ...\n</code></pre>\n"],["name_prefix","RDoc::Alias","classes/RDoc/Alias.html#method-i-name_prefix","()","<p>&#39;::&#39; for the alias of a singleton method/attribute, &#39;#&#39; for\ninstance-level.\n"],["name_prefix","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-name_prefix","()","<p>&#39;::&#39; for a class method/attribute, &#39;#&#39; for an instance\nmethod.\n"],["name_regexp","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-name_regexp","(name)","<p>Returns a regular expression for <code>name</code> that will match an\nRDoc::AnyMethod&#39;s name.\n"],["named_captures","Regexp","classes/Regexp.html#method-i-named_captures","()","<p>Returns a hash representing information about named captures of\n<em>rxp</em>.\n<p>A key of the hash is a name of the …\n"],["names","Encoding","classes/Encoding.html#method-i-names","()","<p>Returns the list of name and aliases of the encoding.\n\n<pre><code>Encoding::WINDOWS_31J.names  #=&gt; [&quot;Windows-31J&quot;, ...\n</code></pre>\n"],["names","MatchData","classes/MatchData.html#method-i-names","()","<p>Returns a list of names of captures as an array of strings. It is same as\nmtch.regexp.names.\n\n<pre><code>/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/.match(&quot;hoge&quot;).names ...</code></pre>\n"],["names","Regexp","classes/Regexp.html#method-i-names","()","<p>Returns a list of names of captures as an array of strings.\n\n<pre><code>/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/.names\n#=&gt; [&quot;foo&quot;, ...\n</code></pre>\n"],["names","Tk::BLT::Busy","classes/Tk/BLT/Busy.html#method-i-names","(pat=None)",""],["names","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-names","(pat=None)",""],["names","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-c-names","(pat=None)",""],["names","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-c-names","(pat=None)",""],["names","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-c-names","(state = None)",""],["names","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-names","()",""],["names","Tk::Tcllib::Style","classes/Tk/Tcllib/Style.html#method-c-names","()",""],["names","TkFont","classes/TkFont.html#method-c-names","()",""],["names","TkFont","classes/TkFont.html#method-c-names","()",""],["names","TkImage","classes/TkImage.html#method-c-names","()",""],["names","TkPackage","classes/TkPackage.html#method-i-names","()",""],["names_widget","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-names_widget","()",""],["namespace","REXML::Attribute","classes/REXML/Attribute.html#method-i-namespace","(arg=nil)","<p>Returns the namespace URL, if defined, or nil otherwise\n\n<pre><code>e = Element.new(&quot;el&quot;)\ne.add_attributes({&quot;xmlns:ns&quot;, ...</code></pre>\n"],["namespace","REXML::Element","classes/REXML/Element.html#method-i-namespace","(prefix=nil)","<p>Evalutas to the URI for a prefix, or the empty string if no such namespace\nis declared for this element. …\n"],["namespace","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-namespace","( prefix=prefix() )",""],["namespace=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-namespace-3D","( namespace )",""],["namespaceURI","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXMLDOMText","classes/IXMLDOMText.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","IXTLRuntime","classes/IXTLRuntime.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespaceURI","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-namespaceURI","()","<p>BSTR namespaceURI the URI for the namespace applying to the node\n"],["namespace_context","REXML::Functions","classes/REXML/Functions.html#method-c-namespace_context","()",""],["namespace_context=","REXML::Functions","classes/REXML/Functions.html#method-c-namespace_context-3D","(x)",""],["namespace_uri","REXML::Functions","classes/REXML/Functions.html#method-c-namespace_uri","( node_set=nil )",""],["namespaces","REXML::Element","classes/REXML/Element.html#method-i-namespaces","()",""],["namespaces=","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-namespaces-3D","( namespaces )",""],["namespaces=","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-namespaces-3D","( namespaces={} )",""],["nan?","BigDecimal","classes/BigDecimal.html#method-i-nan-3F","()","<p>Returns True if the value is Not a Number\n"],["nan?","Float","classes/Float.html#method-i-nan-3F","()","<p>Returns <code>true</code> if <em>flt</em> is an invalid IEEE floating point\nnumber.\n\n<pre><code>a = -1.0      #=&gt; -1.0\na.nan?        #=&gt; ...\n</code></pre>\n"],["native","IPAddr","classes/IPAddr.html#method-i-native","()","<p>Returns a new ipaddr built by converting the IPv6 address into a native\nIPv4 address.  If the IP address …\n"],["natural","Tk::BLT::Spline","classes/Tk/BLT/Spline.html#method-c-natural","(x, y, sx, sy)",""],["navigate","Object","classes/Object.html#method-i-navigate","(url)",""],["nearest","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-nearest","(x, y)",""],["nearest","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-nearest","(x, y, var=None)",""],["nearest","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-nearest","(y)",""],["nearest","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-nearest","(y)",""],["nearest","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-nearest","(y)",""],["nearest","Tk::Listbox","classes/Tk/Listbox.html#method-i-nearest","(y)",""],["nearest","TkMultiColumnList","classes/TkMultiColumnList.html#method-c-nearest","(y)",""],["need_base64_encode?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-need_base64_encode-3F","()",""],["need_base64_encode?","RSS::Element","classes/RSS/Element.html#method-i-need_base64_encode-3F","()",""],["need_initialize_variables","RSS::Element","classes/RSS/Element.html#method-i-need_initialize_variables","()",""],["need_initialize_variables","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-need_initialize_variables","()",""],["need_parent?","RSS::Atom::CommonModel","classes/RSS/Atom/CommonModel.html#method-i-need_parent-3F","()",""],["need_parent?","RSS::Element","classes/RSS/Element.html#method-i-need_parent-3F","()",""],["needed?","Rake::FileCreationTask","classes/Rake/FileCreationTask.html#method-i-needed-3F","()","<p>Is this file task needed?  Yes if it doesn&#39;t exist.\n"],["needed?","Rake::FileTask","classes/Rake/FileTask.html#method-i-needed-3F","()","<p>Is this file task needed?  Yes if it doesn&#39;t exist, or if its time\nstamp is out of date.\n"],["needed?","Rake::Task","classes/Rake/Task.html#method-i-needed-3F","()","<p>Is this task needed?\n"],["nest","PrettyPrint","classes/PrettyPrint.html#method-i-nest","(indent)","<p>Increases left margin after newline with <code>indent</code> for line\nbreaks added in the block.\n"],["nest","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-nest","(indent)",""],["nesting","Module","classes/Module.html#method-c-nesting","()","<p>Returns the list of <code>Modules</code> nested at the point of call.\n\n<pre><code>module M1\n  module M2\n    $a = Module.nesting ...\n</code></pre>\n"],["new","ACL","classes/ACL.html#method-c-new","(list=nil, order = DENY_ALLOW)","<p>Creates a new ACL from <code>list</code> with an evaluation\n<code>order</code> of DENY_ALLOW or ALLOW_DENY.\n<p>An ACL <code>list</code> is an Array …\n"],["new","ACL::ACLEntry","classes/ACL/ACLEntry.html#method-c-new","(str)","<p>Creates a new entry using <code>str</code>.\n<p><code>str</code> may be “*” or “all” to match any address, an IP …\n"],["new","ACL::ACLList","classes/ACL/ACLList.html#method-c-new","()","<p>Creates an empty ACLList\n"],["new","Action","classes/Action.html#method-c-new","(value)",""],["new","ActionMap","classes/ActionMap.html#method-c-new","(tree)",""],["new","Addrinfo","classes/Addrinfo.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>returns a new instance of Addrinfo. The instance contains sockaddr, family,\nsocktype, protocol. sockaddr …\n"],["new","AnimatedImageLabel","classes/AnimatedImageLabel.html#method-c-new","(*args)",""],["new","AnimatedTextLabel","classes/AnimatedTextLabel.html#method-c-new","(*args)",""],["new","AnimatedWaveDemo","classes/AnimatedWaveDemo.html#method-c-new","(frame, dir=:left)",""],["new","Array","classes/Array.html#method-c-new","(p1 = v1, p2 = v2)","<p>Returns a new array.\n<p>In the first form, if no arguments are sent, the new array will be empty.\nWhen a …\n"],["new","ArrayCode","classes/ArrayCode.html#method-c-new","(type, name)",""],["new","BLT_Calendar_sample","classes/BLT_Calendar_sample.html#method-c-new","()",""],["new","BLT_Graph_Demo","classes/BLT_Graph_Demo.html#method-c-new","()",""],["new","BWidget_Demo","classes/BWidget_Demo.html#method-c-new","()",""],["new","Bar","classes/Bar.html#method-c-new","(foo)",""],["new","BasicObject","classes/BasicObject.html#method-c-new","()","<p>Not documented\n"],["new","Benchmark::Tms","classes/Benchmark/Tms.html#method-c-new","(utime = 0.0, stime = 0.0, cutime = 0.0, cstime = 0.0, real = 0.0, label = nil)","<p>Returns an initialized Tms object which has <em>utime</em> as the user CPU\ntime, <em>stime</em> as the system CPU time, …\n"],["new","BenchmarkDriver","classes/BenchmarkDriver.html#method-c-new","(execs, dir, opt = {})",""],["new","Biff","classes/Biff.html#method-c-new","(filename, interval)",""],["new","BigDecimal","classes/BigDecimal.html#method-c-new","(p1, p2 = v2)","<p>Create a new BigDecimal object.\n<p>initial &mdash; The initial value, as an Integer, a Float, a Rational, a BigDecimal …\n"],["new","Board","classes/Board.html#method-c-new","(h,w,m)",""],["new","Branch","classes/Branch.html#method-c-new","(byte_min, byte_max, child_tree)",""],["new","CGI","classes/CGI.html#method-c-new","(options = {})","<p>Create a new CGI instance.\n<p><code>tag_maker</code> &mdash; This is the same as using the <code>options_hash</code> form with the value\n<code>{</code> …\n"],["new","CGI::Cookie","classes/CGI/Cookie.html#method-c-new","(name = \"\", *value)","<p>Create a new CGI::Cookie object.\n<p><code>name_string</code> &mdash; The name of the cookie; in this form, there is no #domain …\n"],["new","CGI::Session","classes/CGI/Session.html#method-c-new","(request, option={})","<p>Create a new CGI::Session object for <code>request</code>.\n<p><code>request</code> is an instance of the <code>CGI</code> class (see\ncgi.rb). <code>option</code> …\n"],["new","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-c-new","(session, option={})","<p>Create a new FileStore instance.\n<p>This constructor is used internally by CGI::Session.  The user does not …\n"],["new","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-c-new","(session, option=nil)","<p>Create a new MemoryStore instance.\n<p><code>session</code> is the session this instance is associated with.\n<code>option</code> is …\n"],["new","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-c-new","(session, option=nil)","<p>Create a new NullStore instance.\n<p><code>session</code> is the session this instance is associated with.\n<code>option</code> is a …\n"],["new","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-c-new","(session, option={})","<p>Create a new CGI::Session::PStore instance\n<p>This constructor is used internally by CGI::Session.  The user …\n"],["new","CHashDir","classes/CHashDir.html#method-c-new","(dirpath)",""],["new","CSV","classes/CSV.html#method-c-new","(data, options = Hash.new)","<p>This constructor will wrap either a String or IO object passed in\n<code>data</code> for reading and/or writing.   …\n"],["new","CSV::Row","classes/CSV/Row.html#method-c-new","(headers, fields, header_row = false)","<p>Construct a new CSV::Row from <code>headers</code> and <code>fields</code>,\nwhich are expected to be Arrays.  If one Array is shorter …\n"],["new","CSV::Table","classes/CSV/Table.html#method-c-new","(array_of_rows)","<p>Construct a new CSV::Table from <code>array_of_rows</code>, which are\nexpected to be CSV::Row objects.  All rows are …\n"],["new","Cal","classes/Cal.html#method-c-new","()",""],["new","CertStore","classes/CertStore.html#method-c-new","(certs_dir)",""],["new","ChatClient","classes/ChatClient.html#method-c-new","(name)",""],["new","ChatEntry","classes/ChatEntry.html#method-c-new","(server, there)",""],["new","ChatServer","classes/ChatServer.html#method-c-new","()",""],["new","Class","classes/Class.html#method-i-new","(*args)","<p>Calls <code>allocate</code> to create a new object of <em>class</em>&#39;s\nclass, then invokes that object&#39;s <code>initialize</code> …\n"],["new","Class","classes/Class.html#method-c-new","(p1 = v1)","<p>Creates a new anonymous (unnamed) class with the given superclass (or\n<code>Object</code> if no parameter is given). …\n"],["new","Clock","classes/Clock.html#method-c-new","(clock24 = true)",""],["new","CompositePublisher","classes/CompositePublisher.html#method-c-new","()",""],["new","ConditionVariable","classes/ConditionVariable.html#method-c-new","()","<p>Creates a new ConditionVariable\n"],["new","CrlStore","classes/CrlStore.html#method-c-new","(c_store)",""],["new","Curses::Window","classes/Curses/Window.html#method-c-new","(p1, p2, p3, p4)","<p>Contruct a new Curses::Window with constraints of <code>height</code>\nlines, <code>width</code> columns, begin at <code>top</code> line, and …\n"],["new","DBM","classes/DBM.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Open a dbm database with the specified name, which can include a directory\npath. Any file extensions …\n"],["new","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-c-new","()",""],["new","DL::CFunc","classes/DL/CFunc.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Create a new function that points to <code>address</code> with an optional\nreturn type of <code>type</code>, a name of <code>name</code> and …\n"],["new","DL::CPtr","classes/DL/CPtr.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new pointer to <code>address</code> with an optional\n<code>size</code> and <code>freefunc</code>. <code>freefunc</code> will be\ncalled when the …\n"],["new","DL::CPtr","classes/DL/CPtr.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new pointer to <code>address</code> with an optional\n<code>size</code> and <code>freefunc</code>. <code>freefunc</code> will be\ncalled when the …\n"],["new","DL::CStructEntity","classes/DL/CStructEntity.html#method-c-new","(addr, types, func = nil)",""],["new","DL::CarriedFunction","classes/DL/CarriedFunction.html#method-c-new","(cfunc, argtypes, n)",""],["new","DL::CompositeHandler","classes/DL/CompositeHandler.html#method-c-new","(handlers)",""],["new","DL::Function","classes/DL/Function.html#method-c-new","(cfunc, argtypes, abi = nil, &block)",""],["new","DL::Handle","classes/DL/Handle.html#method-c-new","(p1 = v1, p2 = v2)","<p>Create a new handler that opens library named <code>lib</code> with\n<code>flags</code>.  If no library is specified, RTLD_DEFAULT …\n"],["new","DL::Packer","classes/DL/Packer.html#method-c-new","(types)",""],["new","DL::Stack","classes/DL/Stack.html#method-c-new","(types)",""],["new","DQEntry","classes/DQEntry.html#method-c-new","(name)",""],["new","DRb::DRbArray","classes/DRb/DRbArray.html#method-c-new","(ary)",""],["new","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for. \nNormally this …\n"],["new","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for. \nNormally this …\n"],["new","DRb::DRbRemoteError","classes/DRb/DRbRemoteError.html#method-c-new","(error)",""],["new","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-c-new","(uri, soc, config, is_established)",""],["new","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-c-new","(config)",""],["new","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-new","(uri=nil, front=nil, config_or_acl=nil)","<p>Create a new DRbServer instance.\n<p><code>uri</code> is the URI to bind to.  This is normally of the form\n&#39;druby://&lt;hostname&gt;:&lt;port&gt;&#39; …\n"],["new","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-c-new","(uri, soc, config={})","<p>Create a new DRbTCPSocket instance.\n<p><code>uri</code> is the URI we are connected to. <code>soc</code> is the\ntcp socket we are bound …\n"],["new","DRb::DRbUNIXSocket","classes/DRb/DRbUNIXSocket.html#method-c-new","(uri, soc, config={}, server_mode = false)",""],["new","DRb::DRbUnknown","classes/DRb/DRbUnknown.html#method-c-new","(err, buf)","<p>Create a new DRbUnknown object.\n<p><code>buf</code> is a string containing a marshalled object that could not\nbe unmarshalled. …\n"],["new","DRb::DRbUnknownError","classes/DRb/DRbUnknownError.html#method-c-new","(unknown)","<p>Create a new DRbUnknownError for the DRb::DRbUnknown object\n<code>unknown</code>\n"],["new","DRb::ExtServ","classes/DRb/ExtServ.html#method-c-new","(there, name, server=nil)",""],["new","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-c-new","()",""],["new","DRb::GW","classes/DRb/GW.html#method-c-new","()",""],["new","DRb::HTTP0::Callback","classes/DRb/HTTP0/Callback.html#method-c-new","(config, drb)",""],["new","DRb::HTTP0::ClientSide","classes/DRb/HTTP0/ClientSide.html#method-c-new","(uri, config)",""],["new","DRb::HTTP0::Server","classes/DRb/HTTP0/Server.html#method-c-new","(uri, config)",""],["new","DRb::HTTP0::ServerSide","classes/DRb/HTTP0/ServerSide.html#method-c-new","(callback, config)",""],["new","DRb::HTTP0::StrStream","classes/DRb/HTTP0/StrStream.html#method-c-new","(str='')",""],["new","DRb::TimerIdConv","classes/DRb/TimerIdConv.html#method-c-new","(timeout=600)",""],["new","DRb::TimerIdConv::TimerHolder2","classes/DRb/TimerIdConv/TimerHolder2.html#method-c-new","(timeout=600)",""],["new","DRbEx","classes/DRbEx.html#method-c-new","()",""],["new","DRbEx2","classes/DRbEx2.html#method-c-new","(n)",""],["new","DRbEx3","classes/DRbEx3.html#method-c-new","(n)",""],["new","DRbEx4","classes/DRbEx4.html#method-c-new","()",""],["new","DRbNamedIdConv","classes/DRbNamedIdConv.html#method-c-new","()",""],["new","Date","classes/Date.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a date object denoting the given calendar date.\n<p>In this class, BCE years are counted astronomically. …\n"],["new","DateTime","classes/DateTime.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)","<p>Creates a date-time object denoting the given calendar date.\n<p>For example:\n\n<pre><code>DateTime.new(2001,2,3)    #=&gt; ...\n</code></pre>\n"],["new","Delegator","classes/Delegator.html#method-c-new","(obj)","<p>Pass in the <em>obj</em> to delegate method calls to.  All methods\nsupported by <em>obj</em> will be delegated to.\n"],["new","DemoApplication","classes/DemoApplication.html#method-c-new","(config, enctype)",""],["new","Dhasen","classes/Dhasen.html#method-c-new","()",""],["new","Digest::HMAC","classes/Digest/HMAC.html#method-c-new","(key, digester)","<p>Creates a Digest::HMAC instance.\n"],["new","Digest::Instance","classes/Digest/Instance.html#method-i-new","()","<p>Returns a new, initialized copy of the digest object.  Equivalent to\ndigest_obj.clone().reset().\n"],["new","Digest::SHA2","classes/Digest/SHA2.html#method-c-new","(bitlen = 256)","<p>Creates a new SHA2 hash object with a given bit length.\n<p>Valid bit lengths are 256, 384 and 512.\n"],["new","Dir","classes/Dir.html#method-c-new","(p1, p2 = {})","<p>Returns a new directory object for the named directory.\n"],["new","ERB","classes/ERB.html#method-c-new","(str, safe_level=nil, trim_mode=nil, eoutvar='_erbout')","<p>Constructs a new ERB object with the template specified in <em>str</em>.\n<p>An ERB object works by building a chunk …\n"],["new","EmojiTable","classes/EmojiTable.html#method-c-new","(xml_path)",""],["new","Encoding::Converter","classes/Encoding/Converter.html#method-c-new","(*args)","<p>possible options elements:\n\n<pre><code>hash form:\n  :invalid =&gt; nil            # raise error on invalid byte sequence ...\n</code></pre>\n"],["new","Enumerator","classes/Enumerator.html#method-c-new","(*args)","<p>Creates a new Enumerator object, which can be used as an Enumerable.\n<p>In the first form, iteration is defined …\n"],["new","Exception","classes/Exception.html#method-c-new","(p1 = v1)","<p>Construct a new Exception object, optionally passing in a message.\n"],["new","Exports","classes/Exports.html#method-c-new","(objs)",""],["new","Fiddle::Closure","classes/Fiddle/Closure.html#method-c-new","(p1, p2, p3 = v3)","<p>Construct a new Closure object.\n<p><code>ret</code> is the C type to be returned\n<p><code>args</code> are passed the callback\n"],["new","Fiddle::Closure::BlockCaller","classes/Fiddle/Closure/BlockCaller.html#method-c-new","(ctype, args, abi = Fiddle::Function::DEFAULT, &block)","<p>Description\n<p>Construct a new BlockCaller object.\n<p><code>ctype</code> is the C type to be returned\n"],["new","Fiddle::Function","classes/Fiddle/Function.html#method-c-new","(p1, p2, p3, p4 = v4)","<p>Constructs a Function object.\n<p><code>ptr</code> is a referenced function, of a DL::Handle\n<p><code>args</code> is an Array of arguments, …\n"],["new","File","classes/File.html#method-c-new","(*args)","<p>Opens the file named by <code>filename</code> according to\n<code>mode</code> (default is “r”) and returns a new <code>File</code> …\n"],["new","File::Stat","classes/File/Stat.html#method-c-new","(p1)","<p>Create a File::Stat object for the given file name (raising an exception if\nthe file doesn&#39;t exist). …\n"],["new","FileViewer","classes/FileViewer.html#method-c-new","(filename)","<p>Create a new fileviewer, and view the file.\n"],["new","Foo","classes/Foo.html#method-c-new","(str)",""],["new","Front","classes/Front.html#method-c-new","()",""],["new","Function","classes/Function.html#method-c-new","()",""],["new","GDBM","classes/GDBM.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a new GDBM instance by opening a gdbm file named <em>filename</em>.\nIf the file does not exist, a new …\n"],["new","GServer","classes/GServer.html#method-c-new","(port, host = DEFAULT_HOST, maxConnections = 4, stdlog = $stderr, audit = false, debug = false)","<p>Create a new server\n<p><code>port</code> &mdash; the port, as a FixNum, on which to listen.\n<p><code>host</code> &mdash; the host to bind to\n"],["new","Gem::Builder","classes/Gem/Builder.html#method-c-new","(spec)","<p>Constructs a builder instance for the provided specification\n<p>spec &mdash; <p>Gem::Specification &mdash; The specification …\n\n\n"],["new","Gem::Command","classes/Gem/Command.html#method-c-new","(command, summary=nil, defaults={})","<p>Initializes a generic gem command named <code>command</code>. \n<code>summary</code> is a short description displayed in `gem help …\n"],["new","Gem::CommandManager","classes/Gem/CommandManager.html#method-c-new","()","<p>Register all the subcommands supported by the gem command.\n"],["new","Gem::Commands::BuildCommand","classes/Gem/Commands/BuildCommand.html#method-c-new","()",""],["new","Gem::Commands::CertCommand","classes/Gem/Commands/CertCommand.html#method-c-new","()",""],["new","Gem::Commands::CheckCommand","classes/Gem/Commands/CheckCommand.html#method-c-new","()",""],["new","Gem::Commands::CleanupCommand","classes/Gem/Commands/CleanupCommand.html#method-c-new","()",""],["new","Gem::Commands::ContentsCommand","classes/Gem/Commands/ContentsCommand.html#method-c-new","()",""],["new","Gem::Commands::DependencyCommand","classes/Gem/Commands/DependencyCommand.html#method-c-new","()",""],["new","Gem::Commands::EnvironmentCommand","classes/Gem/Commands/EnvironmentCommand.html#method-c-new","()",""],["new","Gem::Commands::FetchCommand","classes/Gem/Commands/FetchCommand.html#method-c-new","()",""],["new","Gem::Commands::GenerateIndexCommand","classes/Gem/Commands/GenerateIndexCommand.html#method-c-new","()",""],["new","Gem::Commands::HelpCommand","classes/Gem/Commands/HelpCommand.html#method-c-new","()",""],["new","Gem::Commands::InstallCommand","classes/Gem/Commands/InstallCommand.html#method-c-new","()",""],["new","Gem::Commands::ListCommand","classes/Gem/Commands/ListCommand.html#method-c-new","()",""],["new","Gem::Commands::LockCommand","classes/Gem/Commands/LockCommand.html#method-c-new","()",""],["new","Gem::Commands::OutdatedCommand","classes/Gem/Commands/OutdatedCommand.html#method-c-new","()",""],["new","Gem::Commands::OwnerCommand","classes/Gem/Commands/OwnerCommand.html#method-c-new","()",""],["new","Gem::Commands::PristineCommand","classes/Gem/Commands/PristineCommand.html#method-c-new","()",""],["new","Gem::Commands::PushCommand","classes/Gem/Commands/PushCommand.html#method-c-new","()",""],["new","Gem::Commands::QueryCommand","classes/Gem/Commands/QueryCommand.html#method-c-new","(name = 'query', summary = 'Query gem information in local or remote repositories')",""],["new","Gem::Commands::RdocCommand","classes/Gem/Commands/RdocCommand.html#method-c-new","()",""],["new","Gem::Commands::SearchCommand","classes/Gem/Commands/SearchCommand.html#method-c-new","()",""],["new","Gem::Commands::ServerCommand","classes/Gem/Commands/ServerCommand.html#method-c-new","()",""],["new","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-c-new","()",""],["new","Gem::Commands::SourcesCommand","classes/Gem/Commands/SourcesCommand.html#method-c-new","()",""],["new","Gem::Commands::SpecificationCommand","classes/Gem/Commands/SpecificationCommand.html#method-c-new","()",""],["new","Gem::Commands::StaleCommand","classes/Gem/Commands/StaleCommand.html#method-c-new","()",""],["new","Gem::Commands::UninstallCommand","classes/Gem/Commands/UninstallCommand.html#method-c-new","()",""],["new","Gem::Commands::UnpackCommand","classes/Gem/Commands/UnpackCommand.html#method-c-new","()",""],["new","Gem::Commands::UpdateCommand","classes/Gem/Commands/UpdateCommand.html#method-c-new","()",""],["new","Gem::Commands::WhichCommand","classes/Gem/Commands/WhichCommand.html#method-c-new","()",""],["new","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-c-new","(arg_list)","<p>Create the config file object.  <code>args</code> is the list of arguments\nfrom the command line.\n<p>The following command …\n"],["new","Gem::ConsoleUI","classes/Gem/ConsoleUI.html#method-c-new","()",""],["new","Gem::Dependency","classes/Gem/Dependency.html#method-c-new","(name, *requirements)","<p>Constructs a dependency with <code>name</code> and\n<code>requirements</code>. The last argument can optionally be the\ndependency …\n"],["new","Gem::DependencyInstaller","classes/Gem/DependencyInstaller.html#method-c-new","(options = {})","<p>Creates a new installer instance.\n<p>Options are:\n<p>:cache_dir &mdash; Alternate repository path to store .gem files …\n"],["new","Gem::DependencyList","classes/Gem/DependencyList.html#method-c-new","(development = false)","<p>Creates a new DependencyList.  If <code>development</code> is true,\ndevelopment dependencies will be included.\n"],["new","Gem::DocManager","classes/Gem/DocManager.html#method-c-new","(spec, rdoc_args=\"\")","<p>Create a document manager for <code>spec</code>. <code>rdoc_args</code>\ncontains arguments for RDoc (template etc.) as a String …\n"],["new","Gem::FilePermissionError","classes/Gem/FilePermissionError.html#method-c-new","(path)",""],["new","Gem::Format","classes/Gem/Format.html#method-c-new","(gem_path)","<p>Constructs a Format representing the gem&#39;s data which came from\n<code>gem_path</code>\n"],["new","Gem::GemNotFoundException","classes/Gem/GemNotFoundException.html#method-c-new","(msg, name=nil, version=nil, errors=nil)",""],["new","Gem::GemPathSearcher","classes/Gem/GemPathSearcher.html#method-c-new","()","<p>Initialise the data we need to make searches later.\n"],["new","Gem::GemRunner","classes/Gem/GemRunner.html#method-c-new","(options={})",""],["new","Gem::Indexer","classes/Gem/Indexer.html#method-c-new","(directory, options = {})","<p>Create an indexer that will index the gems in <code>directory</code>.\n"],["new","Gem::Installer","classes/Gem/Installer.html#method-c-new","(gem, options={})","<p>Constructs an Installer instance that will install the gem located at\n<code>gem</code>.  <code>options</code> is a Hash with the …\n"],["new","Gem::MockGemUi","classes/Gem/MockGemUi.html#method-c-new","(input = \"\")",""],["new","Gem::MockGemUi::TermError","classes/Gem/MockGemUi/TermError.html#method-c-new","(exit_code)",""],["new","Gem::OldFormat","classes/Gem/OldFormat.html#method-c-new","(gem_path)","<p>Constructs an instance of a Format object, representing the gem&#39;s data\nstructure.\n<p>gem &mdash; <p>String &mdash; The file …\n\n\n"],["new","Gem::Package::FormatError","classes/Gem/Package/FormatError.html#method-c-new","(message, path = nil)",""],["new","Gem::Package::TarHeader","classes/Gem/Package/TarHeader.html#method-c-new","(vals)","<p>Creates a new TarHeader using <code>vals</code>\n"],["new","Gem::Package::TarInput","classes/Gem/Package/TarInput.html#method-c-new","(io, security_policy = nil)",""],["new","Gem::Package::TarOutput","classes/Gem/Package/TarOutput.html#method-c-new","(io, signer)","<p>Creates a new TarOutput that will write a gem-format tar file to\n<code>io</code>.  If <code>signer</code> is given, the data.tar.gz …\n"],["new","Gem::Package::TarReader","classes/Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new tar file reader on <code>io</code> which needs to respond to\n#pos, #eof?, #read, #getc and #pos=\n"],["new","Gem::Package::TarReader","classes/Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new TarReader on <code>io</code> and yields it to the block, if\ngiven.\n"],["new","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-c-new","(header, io)","<p>Creates a new tar entry for <code>header</code> that will be read from\n<code>io</code>\n"],["new","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter that will write to <code>io</code>\n"],["new","Gem::Package::TarWriter","classes/Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter, yielding it if a block is given\n"],["new","Gem::Package::TarWriter::BoundedStream","classes/Gem/Package/TarWriter/BoundedStream.html#method-c-new","(io, limit)","<p>Wraps <code>io</code> and allows up to <code>limit</code> bytes to be\nwritten\n"],["new","Gem::Package::TarWriter::RestrictedStream","classes/Gem/Package/TarWriter/RestrictedStream.html#method-c-new","(io)","<p>Creates a new RestrictedStream wrapping <code>io</code>\n"],["new","Gem::PackageTask","classes/Gem/PackageTask.html#method-c-new","(gem_spec)","<p>Create a Gem Package task library.  Automatically define the gem if a block\nis given.  If no block is …\n"],["new","Gem::PathSupport","classes/Gem/PathSupport.html#method-c-new","(env=ENV)","<p>Constructor. Takes a single argument which is to be treated like a\nhashtable, or defaults to ENV, the …\n"],["new","Gem::Platform","classes/Gem/Platform.html#method-c-new","(arch)",""],["new","Gem::PlatformMismatch","classes/Gem/PlatformMismatch.html#method-c-new","(name, version)",""],["new","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-c-new","(proxy = nil)","<p>Initialize a remote fetcher using the source URI and possible proxy\ninformation.\n<p><code>proxy</code>\n<p>[String]: explicit …\n"],["new","Gem::RemoteFetcher::FetchError","classes/Gem/RemoteFetcher/FetchError.html#method-c-new","(message, uri)",""],["new","Gem::Requirement","classes/Gem/Requirement.html#method-c-new","(*requirements)","<p>Constructs a requirement from <code>requirements</code>. Requirements can\nbe Strings, Gem::Versions, or Arrays of …\n"],["new","Gem::Requirement","classes/Gem/Requirement.html#method-c-new","(*requirements)","<p>Constructs a requirement from <code>requirements</code>. Requirements can\nbe Strings, Gem::Versions, or Arrays of …\n"],["new","Gem::Security::Policy","classes/Gem/Security/Policy.html#method-c-new","(policy = {}, opt = {})","<p>Create a new Gem::Security::Policy object with the given mode and options.\n"],["new","Gem::Security::Signer","classes/Gem/Security/Signer.html#method-c-new","(key, cert_chain)",""],["new","Gem::Server","classes/Gem/Server.html#method-c-new","(gem_dirs, port, daemon, launch = nil, addresses = nil)","<p>Only the first directory in gem_dirs is used for serving gems\n"],["new","Gem::SilentUI","classes/Gem/SilentUI.html#method-c-new","()",""],["new","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-new","(specs_or_dirs = [])","<p>Constructs a source index instance from the provided specifications, which\nis a Hash of gem full names …\n"],["new","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-c-new","(specs_or_dirs = [])","<p>Constructs a source index instance from the provided specifications, which\nis a Hash of gem full names …\n"],["new","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-c-new","()",""],["new","Gem::Specification","classes/Gem/Specification.html#method-c-new","(name = nil, version = nil)","<p>Specification constructor. Assigns the default values to the attributes and\nyields itself for further …\n"],["new","Gem::StreamUI","classes/Gem/StreamUI.html#method-c-new","(in_stream, out_stream, err_stream=STDERR, usetty=true)",""],["new","Gem::StreamUI::SilentDownloadReporter","classes/Gem/StreamUI/SilentDownloadReporter.html#method-c-new","(out_stream, *args)",""],["new","Gem::StreamUI::SilentProgressReporter","classes/Gem/StreamUI/SilentProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = nil)",""],["new","Gem::StreamUI::SimpleProgressReporter","classes/Gem/StreamUI/SimpleProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = \"complete\")",""],["new","Gem::StreamUI::VerboseDownloadReporter","classes/Gem/StreamUI/VerboseDownloadReporter.html#method-c-new","(out_stream, *args)",""],["new","Gem::StreamUI::VerboseProgressReporter","classes/Gem/StreamUI/VerboseProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = 'complete')",""],["new","Gem::SystemExitException","classes/Gem/SystemExitException.html#method-c-new","(exit_code)",""],["new","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-c-new","(gem, options = {})","<p>Constructs an uninstaller that will uninstall <code>gem</code>\n"],["new","Gem::Validator","classes/Gem/Validator.html#method-c-new","()",""],["new","GetoptLong","classes/GetoptLong.html#method-c-new","(*arguments)","<p>Set up option processing.\n<p>The options to support are passed to new() as an array of arrays. Each\nsub-array …\n"],["new","Hash","classes/Hash.html#method-c-new","(p1 = v1)","<p>Returns a new, empty hash. If this hash is subsequently accessed by a key\nthat doesn&#39;t correspond …\n"],["new","Hi_Exception","classes/Hi_Exception.html#method-c-new","(num)",""],["new","Hoge","classes/Hoge.html#method-c-new","(s)",""],["new","HttpServer","classes/HttpServer.html#method-c-new","(handle_obj, port = 8080, host = DEFAULT_HOST, maxConnections = 4, stdlog = $stdout, audit = true, debug = true)","<p>handle_obj specifies the object, that receives calls to request_handler and\nip_auth_handler\n"],["new","HttpServer::Request","classes/HttpServer/Request.html#method-c-new","(data, method=nil, path=nil, proto=nil)",""],["new","HttpServer::Response","classes/HttpServer/Response.html#method-c-new","(status=200)",""],["new","HttpServer::Table","classes/HttpServer/Table.html#method-c-new","(hash={})",""],["new","IEHandler","classes/IEHandler.html#method-c-new","()",""],["new","IO","classes/IO.html#method-c-new","(p1, p2 = v2, p3 = {})","<p>Returns a new IO object (a stream) for the given IO object or integer file\ndescriptor and mode string. …\n"],["new","IPAddr","classes/IPAddr.html#method-c-new","(addr = '::', family = Socket::AF_UNSPEC)","<p>Creates a new ipaddr object either from a human readable IP address\nrepresentation in string, or from …\n"],["new","IRB::Context","classes/IRB/Context.html#method-c-new","(irb, workspace = nil, input_method = nil, output_method = nil)","<p>Arguments:\n\n<pre><code>input_method: nil -- stdin or readline\n              String -- File\n              other -- ...</code></pre>\n"],["new","IRB::ExtendCommand::Nop","classes/IRB/ExtendCommand/Nop.html#method-c-new","(conf)",""],["new","IRB::FileInputMethod","classes/IRB/FileInputMethod.html#method-c-new","(file)",""],["new","IRB::Frame","classes/IRB/Frame.html#method-c-new","()",""],["new","IRB::History","classes/IRB/History.html#method-c-new","(size = 16)",""],["new","IRB::InputMethod","classes/IRB/InputMethod.html#method-c-new","(file = STDIN_FILE_NAME)",""],["new","IRB::Inspector","classes/IRB/Inspector.html#method-c-new","(inspect_proc, init_proc = nil)",""],["new","IRB::Irb","classes/IRB/Irb.html#method-c-new","(workspace = nil, input_method = nil, output_method = nil)",""],["new","IRB::JobManager","classes/IRB/JobManager.html#method-c-new","()",""],["new","IRB::Locale","classes/IRB/Locale.html#method-c-new","(locale = nil)",""],["new","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-c-new","(prefix, base_notifier)",""],["new","IRB::Notifier::CompositeNotifier","classes/IRB/Notifier/CompositeNotifier.html#method-c-new","(prefix, base_notifier)",""],["new","IRB::Notifier::LeveledNotifier","classes/IRB/Notifier/LeveledNotifier.html#method-c-new","(base, level, prefix)",""],["new","IRB::Notifier::NoMsgNotifier","classes/IRB/Notifier/NoMsgNotifier.html#method-c-new","()",""],["new","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-c-new","()",""],["new","IRB::SLex","classes/IRB/SLex.html#method-c-new","()",""],["new","IRB::SLex::Node","classes/IRB/SLex/Node.html#method-c-new","(preproc = nil, postproc = nil)","<p>if postproc is nil, this node is an abstract node. if postproc is non-nil,\nthis node is a real node. …\n"],["new","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-c-new","()",""],["new","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-c-new","(*main)","<p>create new workspace. set self to main if specified, otherwise inherit main\nfrom TOPLEVEL_BINDING.\n"],["new","Iconv","classes/Iconv.html#method-c-new","(p1, p2, p3 = v3)","<p>Creates new code converter from a coding-system designated with\n<code>from</code> to another one designated with  …\n"],["new","Iconv::Failure","classes/Iconv/Failure.html#method-c-new","(p1, p2, p3)","<p>Creates new code converter from a coding-system designated with\n<code>from</code> to another one designated with  …\n"],["new","Inspector","classes/Inspector.html#method-c-new","()",""],["new","JISX0208::Char","classes/JISX0208/Char.html#method-c-new","(row, cell=nil)",""],["new","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-c-new","(p1 = v1)","<p>Instantiates a new State object, configured by <em>opts</em>.\n<p><em>opts</em> can have the following keys:\n<p><strong>indent</strong>: a string …\n"],["new","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-c-new","(p1, p2 = v2)","<p>Creates a new JSON::Ext::Parser instance for the string <em>source</em>.\n<p>Creates a new JSON::Ext::Parser instance …\n"],["new","Knights_Tour","classes/Knights_Tour.html#method-c-new","(parent = nil)",""],["new","Lo_Exception","classes/Lo_Exception.html#method-c-new","(num)",""],["new","Logger","classes/Logger.html#method-c-new","(logdev, shift_age = 0, shift_size = 1048576)","<p>Synopsis\n\n<pre><code>Logger.new(name, shift_age = 7, shift_size = 1048576)\nLogger.new(name, shift_age = &#39;weekly&#39;)</code></pre>\n"],["new","Logger::Application","classes/Logger/Application.html#method-c-new","(appname = nil)","<p>Synopsis\n\n<pre><code>Application.new(appname = &#39;&#39;)</code></pre>\n<p>Args\n"],["new","Logger::Formatter","classes/Logger/Formatter.html#method-c-new","()",""],["new","Logger::LogDevice","classes/Logger/LogDevice.html#method-c-new","(log = nil, opt = {})",""],["new","Mail","classes/Mail.html#method-c-new","(f)",""],["new","Mail","classes/Mail.html#method-c-new","(f)",""],["new","Matrix","classes/Matrix.html#method-c-new","(rows, column_size = rows[0].size)","<p>Matrix.new is private; use Matrix.rows, columns, [], etc… to create.\n"],["new","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-c-new","(a)","<p>Constructs the eigenvalue decomposition for a square matrix <code>A</code>\n"],["new","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-c-new","(a)",""],["new","Mdoc2Man","classes/Mdoc2Man.html#method-c-new","()",""],["new","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-c-new","(obj = nil)",""],["new","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-c-new","(obj = nil)",""],["new","Microsoft_XMLDSO_1_0","classes/Microsoft_XMLDSO_1_0.html#method-c-new","(obj = nil)",""],["new","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-c-new","(obj = nil)",""],["new","Module","classes/Module.html#method-c-new","()","<p>Creates a new anonymous module. If a block is given, it is passed the\nmodule object, and the block is …\n"],["new","MonitorMixin","classes/MonitorMixin.html#method-c-new","(*args)","<p>Use <code>extend MonitorMixin</code> or <code>include MonitorMixin</code>\ninstead of this constructor.  Have look at the examples …\n"],["new","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-c-new","(monitor)",""],["new","Msxml","classes/Msxml.html#method-c-new","(obj = nil)",""],["new","MultiTkIp","classes/MultiTkIp.html#method-c-new","(target, ret)",""],["new","MultiTkIp","classes/MultiTkIp.html#method-c-new","(target, ret)",""],["new","MultiTkIp","classes/MultiTkIp.html#method-c-new","(ip, cmd)",""],["new","MultiTkIp","classes/MultiTkIp.html#method-c-new","(ip, cmd)",""],["new","MultiTkIp","classes/MultiTkIp.html#method-c-new","(target, ret)",""],["new","MultiTkIp","classes/MultiTkIp.html#method-c-new","(ip, cmd)",""],["new","MultiTkIp","classes/MultiTkIp.html#method-c-new","(target, ret)",""],["new","MultiTkIp","classes/MultiTkIp.html#method-c-new","(ip, cmd)",""],["new","MultiTkIp::Command_Queue","classes/MultiTkIp/Command_Queue.html#method-c-new","(interp)",""],["new","MultiTkIp_OK","classes/MultiTkIp_OK.html#method-c-new","(ret=nil)",""],["new","Mutex","classes/Mutex.html#method-c-new","()","<p>Creates a new Mutex\n"],["new","Mutex_m","classes/Mutex_m.html#method-c-new","(*args)",""],["new","MyApp","classes/MyApp.html#method-c-new","(a, b, c)",""],["new","MyElem","classes/MyElem.html#method-c-new","(item)","<p>object initializer called from Class#new\n"],["new","NameError","classes/NameError.html#method-c-new","(*args)","<p>Construct a new NameError exception. If given the <em>name</em> parameter\nmay subsequently be examined using the …\n"],["new","Net::FTP","classes/Net/FTP.html#method-c-new","(host = nil, user = nil, passwd = nil, acct = nil)","<p>Creates and returns a new <code>FTP</code> object. If a <code>host</code>\nis given, a connection is made. Additionally, if the …\n"],["new","Net::HTTP","classes/Net/HTTP.html#method-c-new","(address, port = nil, p_addr = nil, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates a new Net::HTTP object without opening a TCP connection or HTTP\nsession. The <code>address</code> should be …\n"],["new","Net::HTTP","classes/Net/HTTP.html#method-c-new","(address, port = nil, p_addr = nil, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates a new Net::HTTP object without opening a TCP connection or HTTP\nsession. The <code>address</code> should be …\n"],["new","Net::HTTP","classes/Net/HTTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::HTTP object for the specified server address, without\nopening the TCP connection or …\n"],["new","Net::HTTP","classes/Net/HTTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::HTTP object for the specified server address, without\nopening the TCP connection or …\n"],["new","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-c-new","(m, reqbody, resbody, path, initheader = nil)",""],["new","Net::HTTPRequest","classes/Net/HTTPRequest.html#method-c-new","(path, initheader = nil)","<p>Creates HTTP request object.\n"],["new","Net::HTTPRequest","classes/Net/HTTPRequest.html#method-c-new","(path, initheader = nil)","<p>Creates HTTP request object.\n"],["new","Net::IMAP","classes/Net/IMAP.html#method-c-new","(host, port_or_options = {}, usessl = false, certs = nil, verify = true)","<p>Creates a new Net::IMAP object and connects it to the specified\n<code>host</code>.\n<p><code>options</code> is an option hash, each …\n"],["new","Net::IMAP::CramMD5Authenticator","classes/Net/IMAP/CramMD5Authenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::DigestMD5Authenticator","classes/Net/IMAP/DigestMD5Authenticator.html#method-c-new","(user, password, authname = nil)",""],["new","Net::IMAP::LoginAuthenticator","classes/Net/IMAP/LoginAuthenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::PlainAuthenticator","classes/Net/IMAP/PlainAuthenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::ResponseError","classes/Net/IMAP/ResponseError.html#method-c-new","(response)",""],["new","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-c-new","(socket, method)",""],["new","Net::POP3","classes/Net/POP3.html#method-c-new","(addr, port = nil, isapop = false)","<p>Creates a new POP3 object.\n<p><code>address</code> is the hostname or ip address of your POP3 server.\n<p>The optional <code>port</code> …\n"],["new","Net::POP3","classes/Net/POP3.html#method-c-new","(addr, port = nil, isapop = false)","<p>Creates a new POP3 object.\n<p><code>address</code> is the hostname or ip address of your POP3 server.\n<p>The optional <code>port</code> …\n"],["new","Net::POP3","classes/Net/POP3.html#method-c-new","(addr, port = nil, isapop = false)","<p>Creates a new POP3 object.\n<p><code>address</code> is the hostname or ip address of your POP3 server.\n<p>The optional <code>port</code> …\n"],["new","Net::POP3","classes/Net/POP3.html#method-c-new","(addr, port = nil, isapop = false)","<p>Creates a new POP3 object.\n<p><code>address</code> is the hostname or ip address of your POP3 server.\n<p>The optional <code>port</code> …\n"],["new","Net::SMTP","classes/Net/SMTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::SMTP object.\n<p><code>address</code> is the hostname or ip address of your SMTP server. \n<code>port</code> is the …\n"],["new","Net::SMTP","classes/Net/SMTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::SMTP object.\n<p><code>address</code> is the hostname or ip address of your SMTP server. \n<code>port</code> is the …\n"],["new","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-c-new","(status, string)","<p>Creates a new instance of the Response class and sets the status and string\nattributes\n"],["new","Net::Telnet","classes/Net/Telnet.html#method-c-new","(options)","<p>Creates a new Net::Telnet object.\n<p>Attempts to connect to the host (unless the Proxy option is provided: …\n"],["new","NoMethodError","classes/NoMethodError.html#method-c-new","(*args)","<p>Construct a NoMethodError exception for a method of the given name called\nwith the given arguments.  …\n"],["new","Notify","classes/Notify.html#method-c-new","(biff, command)",""],["new","NthToggle","classes/NthToggle.html#method-c-new","(start_state, max_counter)",""],["new","OLEProperty","classes/OLEProperty.html#method-c-new","(obj, dispid, gettypes, settypes)",""],["new","Object","classes/Object.html#method-c-new","(src)",""],["new","Object::Syck::BadAlias","classes/Object/Syck/BadAlias.html#method-c-new","(p1)","<p>YAML::Syck::BadAlias.initialize\n"],["new","Object::Syck::DomainType","classes/Object/Syck/DomainType.html#method-c-new","(p1, p2, p3)","<p>YAML::DomainType.initialize\n"],["new","Object::Syck::Emitter","classes/Object/Syck/Emitter.html#method-c-new","(p1 = v1)","<p>YAML::Syck::Emitter.reset( options )\n"],["new","Object::Syck::Map","classes/Object/Syck/Map.html#method-c-new","(p1, p2, p3)","<p>YAML::Syck::Map.initialize\n"],["new","Object::Syck::Object","classes/Object/Syck/Object.html#method-c-new","(p1, p2)","<p>YAML::Object.initialize\n"],["new","Object::Syck::Out","classes/Object/Syck/Out.html#method-c-new","(p1)","<p>YAML::Syck::Out::initialize\n"],["new","Object::Syck::Parser","classes/Object/Syck/Parser.html#method-c-new","(p1 = v1)","<p>YAML::Syck::Parser.initialize( resolver, options )\n"],["new","Object::Syck::PrivateType","classes/Object/Syck/PrivateType.html#method-c-new","(p1, p2)","<p>YAML::PrivateType.initialize\n"],["new","Object::Syck::Resolver","classes/Object/Syck/Resolver.html#method-c-new","()","<p>YAML::Syck::Resolver.initialize\n"],["new","Object::Syck::Scalar","classes/Object/Syck/Scalar.html#method-c-new","(p1, p2, p3)","<p>YAML::Syck::Scalar.initialize\n"],["new","Object::Syck::Seq","classes/Object/Syck/Seq.html#method-c-new","(p1, p2, p3)","<p>YAML::Syck::Seq.initialize\n"],["new","OpenSSL::ASN1::ASN1Data","classes/OpenSSL/ASN1/ASN1Data.html#method-c-new","(p1, p2, p3)","<p><code>value</code>: Please have a look at Constructive and Primitive to see\nhow Ruby types are mapped to ASN.1 types …\n"],["new","OpenSSL::ASN1::Constructive","classes/OpenSSL/ASN1/Constructive.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p><code>value</code>: is mandatory.\n<p><code>tag</code>: optional, may be specified for tagged values. If no\n<code>tag</code> is specified, the UNIVERSAL …\n"],["new","OpenSSL::ASN1::Primitive","classes/OpenSSL/ASN1/Primitive.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p><code>value</code>: is mandatory.\n<p><code>tag</code>: optional, may be specified for tagged values. If no\n<code>tag</code> is specified, the UNIVERSAL …\n"],["new","OpenSSL::BN","classes/OpenSSL/BN.html#method-c-new","(p1, p2 = v2)",""],["new","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-c-new","(*args)",""],["new","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-c-new","(p1)","<p>The string must contain a valid cipher name like “AES-128-CBC” or “3DES”.\n<p>A list of …\n"],["new","OpenSSL::Config","classes/OpenSSL/Config.html#method-c-new","(filename = nil)",""],["new","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-c-new","(p1, p2 = v2)","<p>Creates a Digest instance based on <code>string</code>, which is either the\nln (long name) or sn (short name) of a …\n"],["new","OpenSSL::Digest::Digest","classes/OpenSSL/Digest/Digest.html#method-c-new","(*args)",""],["new","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-c-new","(p1, p2)",""],["new","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-c-new","(*args)",""],["new","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-c-new","(p1, p2, p3 = v3)",""],["new","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::PKCS12","classes/OpenSSL/PKCS12.html#method-c-new","(p1 = v1, p2 = v2)","<p>Parameters\n<p><code>str</code> - Must be a DER encoded PKCS12 string.\n<p><code>pass</code> - string\n"],["new","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-new","(p1 = v1)","<p>Many methods in this class aren&#39;t documented.\n"],["new","OpenSSL::PKCS7::RecipientInfo","classes/OpenSSL/PKCS7/RecipientInfo.html#method-c-new","(p1)",""],["new","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-c-new","(p1, p2, p3)",""],["new","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-c-new","(p1 = v1, p2 = v2)","<p>Either generates a DH instance from scratch or by reading already existing\nDH parameters from <code>string</code> …\n"],["new","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new DSA instance by reading an existing key from\n<code>string</code>.\n<p>Parameters\n<p><code>size</code> is an integer representing …\n"],["new","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-c-new","(p1 = v1, p2 = v2)","<p>See the OpenSSL documentation for:\n\n<pre><code>EC_KEY_*</code></pre>\n"],["new","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>See the OpenSSL documentation for EC_GROUP_*\n"],["new","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-c-new","(p1, p2 = v2)","<p>See the OpenSSL documentation for EC_POINT_*\n"],["new","OpenSSL::PKey::PKey","classes/OpenSSL/PKey/PKey.html#method-c-new","()","<p>Because PKey is an abstract class, actually calling this method explicitly\nwill raise a <code>NotImplementedError</code> …\n"],["new","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Generates or loads an RSA keypair.  If an integer <code>key_size</code> is\ngiven it represents the desired key size. …\n"],["new","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Generates or loads an RSA keypair.  If an integer <code>key_size</code> is\ngiven it represents the desired key size. …\n"],["new","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-c-new","(p1 = v1)","<p>You can get a list of valid methods with OpenSSL::SSL::SSLContext::METHODS\n"],["new","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-c-new","(p1, p2 = v2)","<p>Creates a new SSL socket from <code>io</code> which must be a real ruby\nobject (not an IO-like object that responds …\n"],["new","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-c-new","(p1)","<p>Parameters\n<p><code>SSLSocket</code> is an OpenSSL::SSL::SSLSocket <code>string</code>\nmust be a DER or PEM encoded Session.\n"],["new","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-c-new","(p1, p2 = v2)",""],["new","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates an X509 extension.\n<p>The extension may be created from <code>asn1</code> data or from an\nextension <code>name</code> and  …\n"],["new","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)",""],["new","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-c-new","(p1 = v1, p2 = v2)",""],["new","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-c-new","(*args)",""],["new","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-c-new","(*args)",""],["new","OpenStruct","classes/OpenStruct.html#method-c-new","(hash=nil)","<p>Creates a new OpenStruct object.  By default, the resulting OpenStruct\nobject will have no attributes. …\n"],["new","OpenURI::HTTPError","classes/OpenURI/HTTPError.html#method-c-new","(message, io)",""],["new","OpenURI::HTTPRedirect","classes/OpenURI/HTTPRedirect.html#method-c-new","(message, io, uri)",""],["new","OptionParser","classes/OptionParser.html#method-i-new","()","<p>Pushes a new List.\n"],["new","OptionParser","classes/OptionParser.html#method-c-new","(banner = nil, width = 32, indent = ' ' * 4)","<p>Initializes the instance and yields itself if called with a block.\n<p><code>banner</code> &mdash; Banner message.\n<p><code>width</code> &mdash; Summary …\n"],["new","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-c-new","(*args)",""],["new","OptionParser::List","classes/OptionParser/List.html#method-c-new","()","<p>Just initializes all instance variables.\n"],["new","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-c-new","(*args)",""],["new","OptionParser::Switch","classes/OptionParser/Switch.html#method-c-new","(pattern = nil, conv = nil, short = nil, long = nil, arg = nil, desc = ([] if short or long), block = Proc.new)",""],["new","PStore","classes/PStore.html#method-c-new","(file, thread_safe = false)","<p>To construct a PStore object, pass in the <em>file</em> path where you\nwould like the data to be stored.\n<p>PStore …\n"],["new","Pathname","classes/Pathname.html#method-c-new","(p1)","<p>Create a Pathname object from the given String (or String-like object). If\n<code>path</code> contains a NUL character …\n"],["new","PendulumAnimationDemo","classes/PendulumAnimationDemo.html#method-c-new","(frame)",""],["new","PhotoCanvas","classes/PhotoCanvas.html#method-c-new","(*args)",""],["new","PiDigitSpigot","classes/PiDigitSpigot.html#method-c-new","()",""],["new","Planet","classes/Planet.html#method-c-new","(x, y, z, vx, vy, vz, mass)",""],["new","Point","classes/Point.html#method-c-new","(x, y)",""],["new","Prelude","classes/Prelude.html#method-c-new","(preludes)",""],["new","PrettyPrint","classes/PrettyPrint.html#method-c-new","(output='', maxwidth=79, newline=\"\\n\", &genspace)","<p>Creates a buffer for pretty printing.\n<p><code>output</code> is an output target. If it is not specified, &#39;&#39;\nis …\n"],["new","PrettyPrint::Breakable","classes/PrettyPrint/Breakable.html#method-c-new","(sep, width, q)",""],["new","PrettyPrint::Group","classes/PrettyPrint/Group.html#method-c-new","(depth)",""],["new","PrettyPrint::GroupQueue","classes/PrettyPrint/GroupQueue.html#method-c-new","(*groups)",""],["new","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-c-new","(output, maxwidth=nil, newline=nil)",""],["new","PrettyPrint::Text","classes/PrettyPrint/Text.html#method-c-new","()",""],["new","Prime","classes/Prime.html#method-c-new","()","<p>obsolete. Use <code>Prime</code>::<code>instance</code> or class methods of\n<code>Prime</code>.\n"],["new","Prime::EratosthenesGenerator","classes/Prime/EratosthenesGenerator.html#method-c-new","()",""],["new","Prime::Generator23","classes/Prime/Generator23.html#method-c-new","()",""],["new","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-c-new","(ubound = nil)",""],["new","Prime::TrialDivisionGenerator","classes/Prime/TrialDivisionGenerator.html#method-c-new","()",""],["new","Proc","classes/Proc.html#method-c-new","(*args)","<p>Creates a new <code>Proc</code> object, bound to the current context.\n<code>Proc::new</code> may be called without a block only …\n"],["new","Psych::Coder","classes/Psych/Coder.html#method-c-new","(tag)",""],["new","Psych::Emitter","classes/Psych/Emitter.html#method-c-new","(p1, p2 = v2)","<p>Create a new Psych::Emitter that writes to <code>io</code>.\n"],["new","Psych::Handler::DumperOptions","classes/Psych/Handler/DumperOptions.html#method-c-new","()",""],["new","Psych::Nodes::Alias","classes/Psych/Nodes/Alias.html#method-c-new","(anchor)","<p>Create a new Alias that points to an <code>anchor</code>\n"],["new","Psych::Nodes::Document","classes/Psych/Nodes/Document.html#method-c-new","(version = [], tag_directives = [], implicit = false)","<p>Create a new Psych::Nodes::Document object.\n<p><code>version</code> is a list indicating the YAML version.\n<code>tags_directives</code> …\n"],["new","Psych::Nodes::Mapping","classes/Psych/Nodes/Mapping.html#method-c-new","(anchor = nil, tag = nil, implicit = true, style = BLOCK)","<p>Create a new Psych::Nodes::Mapping object.\n<p><code>anchor</code> is the anchor associated with the map or\n<code>nil</code>. <code>tag</code> is …\n"],["new","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-c-new","()","<p>Create a new Psych::Nodes::Node\n"],["new","Psych::Nodes::Scalar","classes/Psych/Nodes/Scalar.html#method-c-new","(value, anchor = nil, tag = nil, plain = true, quoted = false, style = ANY)","<p>Create a new Psych::Nodes::Scalar object.\n<p><code>value</code> is the string value of the scalar <code>anchor</code> is\nan associated …\n"],["new","Psych::Nodes::Sequence","classes/Psych/Nodes/Sequence.html#method-c-new","(anchor = nil, tag = nil, implicit = true, style = BLOCK)","<p>Create a new object representing a YAML sequence.\n<p><code>anchor</code> is the anchor associated with the sequence or …\n"],["new","Psych::Nodes::Stream","classes/Psych/Nodes/Stream.html#method-c-new","(encoding = UTF8)","<p>Create a new Psych::Nodes::Stream node with an <code>encoding</code> that\ndefaults to Psych::Nodes::Stream::UTF8. …\n"],["new","Psych::Parser","classes/Psych/Parser.html#method-c-new","(handler = Handler.new)","<p>Creates a new Psych::Parser instance with <code>handler</code>.  YAML\nevents will be called on <code>handler</code>.  See Psych::Parser …\n"],["new","Psych::ScalarScanner","classes/Psych/ScalarScanner.html#method-c-new","()","<p>Create a new scanner\n"],["new","Psych::Streaming","classes/Psych/Streaming.html#method-c-new","(io)","<p>Create a new streaming emitter.  Emitter will print to <code>io</code>. \nSee Psych::Stream for an example.\n"],["new","Psych::SyntaxError","classes/Psych/SyntaxError.html#method-c-new","(file, line, col, offset, problem, context)",""],["new","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-c-new","()","<p>Create a new TreeBuilder instance\n"],["new","Psych::Visitors::DepthFirst","classes/Psych/Visitors/DepthFirst.html#method-c-new","(block)",""],["new","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-c-new","(io, options = {})",""],["new","Psych::Visitors::JSONTree","classes/Psych/Visitors/JSONTree.html#method-c-new","(options = {})",""],["new","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-c-new","(ss = ScalarScanner.new)",""],["new","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-c-new","(options = {})",""],["new","Queue","classes/Queue.html#method-c-new","()","<p>Creates a new queue.\n"],["new","RDoc::Alias","classes/RDoc/Alias.html#method-c-new","(text, old_name, new_name, comment, singleton = false)","<p>Creates a new Alias with a token stream of <code>text</code> that aliases\n<code>old_name</code> to <code>new_name</code>, has <code>comment</code>\nand is …\n"],["new","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-c-new","(text, name)","<p>Creates a new AnyMethod with a token stream <code>text</code> and\n<code>name</code>\n"],["new","RDoc::Attr","classes/RDoc/Attr.html#method-c-new","(text, name, rw, comment, singleton = false)","<p>Creates a new Attr with body <code>text</code>, <code>name</code>,\nread/write status <code>rw</code> and <code>comment</code>. \n<code>singleton</code> marks this as a …\n"],["new","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-c-new","(name, superclass = nil)","<p>Creates a new ClassModule with <code>name</code> with optional\n<code>superclass</code>\n<p>This is a constructor for subclasses, and …\n"],["new","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-c-new","()","<p>Creates a new CodeObject that will document itself and its children\n"],["new","RDoc::Constant","classes/RDoc/Constant.html#method-c-new","(name, value, comment)","<p>Creates a new constant with <code>name</code>, <code>value</code> and\n<code>comment</code>\n"],["new","RDoc::Context","classes/RDoc/Context.html#method-c-new","()","<p>Creates an unnamed empty context with public current visibility\n"],["new","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-c-new","(parent, title, comment)","<p>Creates a new section with <code>title</code> and <code>comment</code>\n"],["new","RDoc::CrossReference","classes/RDoc/CrossReference.html#method-c-new","(context)","<p>Allows cross-references to be created based on the given\n<code>context</code> (RDoc::Context).\n"],["new","RDoc::ERBIO","classes/RDoc/ERBIO.html#method-c-new","(str, safe_level = nil, trim_mode = nil, eoutvar = 'io')","<p>Defaults <code>eoutvar</code> to &#39;io&#39;, otherwise is identical to\nERB&#39;s initialize\n"],["new","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-c-new","(options)","<p>Initialize a few instance variables before we start\n"],["new","RDoc::Include","classes/RDoc/Include.html#method-c-new","(name, comment)","<p>Creates a new Include for <code>name</code> with <code>comment</code>\n"],["new","RDoc::Markup","classes/RDoc/Markup.html#method-c-new","(attribute_manager = nil)","<p>Take a block of text and use various heuristics to determine its structure\n(paragraphs, lists, and so …\n"],["new","RDoc::Markup::AttrSpan","classes/RDoc/Markup/AttrSpan.html#method-c-new","(length)","<p>Creates a new AttrSpan for <code>length</code> characters\n"],["new","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-c-new","()","<p>Creates a new attribute manager that understands bold, emphasized and\nteletype text.\n"],["new","RDoc::Markup::BlankLine","classes/RDoc/Markup/BlankLine.html#method-c-new","()","<p>RDoc::Markup::BlankLine is a singleton\n"],["new","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-c-new","(*parts)","<p>Creates a new Document with <code>parts</code>\n"],["new","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-c-new","(markup = nil)","<p>Creates a new Formatter\n"],["new","RDoc::Markup::IndentedParagraph","classes/RDoc/Markup/IndentedParagraph.html#method-c-new","(indent, *parts)","<p>Creates a new IndentedParagraph containing <code>parts</code> indented with\n<code>indent</code> spaces\n"],["new","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-c-new","(type = nil, *items)","<p>Creates a new list of <code>type</code> with <code>items</code>\n"],["new","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-c-new","(label = nil, *parts)","<p>Creates a new ListItem with an optional <code>label</code> containing\n<code>parts</code>\n"],["new","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-c-new","()","<p>Creates a new Parser.  See also ::parse\n"],["new","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-new","(input_file_name, include_path)","<p>Creates a new pre-processor for <code>input_file_name</code> that will look\nfor included files in <code>include_path</code>\n"],["new","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-c-new","(*parts)","<p>Creates a new Raw containing <code>parts</code>\n"],["new","RDoc::Markup::Special","classes/RDoc/Markup/Special.html#method-c-new","(type, text)","<p>Creates a new special sequence of <code>type</code> with <code>text</code>\n"],["new","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-c-new","(markup = nil)","<p>Creates a new ToAnsi visitor that is ready to output vibrant ANSI color!\n"],["new","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-c-new","(markup = nil)","<p>Returns a new ToBs that is ready for hot backspace action!\n"],["new","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output HTML\n"],["new","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-c-new","(from_path, context, show_hash, hyperlink_all = false, markup = nil)","<p>Creates a new crossref resolver that generates links relative to\n<code>context</code> which lives at <code>from_path</code> in …\n"],["new","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output (mostly) RDoc markup\n"],["new","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-c-new","(markup = nil)","<p>Creates a new tt-only formatter.\n"],["new","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-c-new","(text, name)","<p>Creates a new MethodAttr from token stream <code>text</code> and method or\nattribute name <code>name</code>.\n<p>Usually this is called …\n"],["new","RDoc::Parser","classes/RDoc/Parser.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Parser storing <code>top_level</code>,\n<code>file_name</code>, <code>content</code>, <code>options</code> and\n<code>stats</code> in instance variables. …\n"],["new","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepare to parse a C file\n"],["new","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Ruby parser.\n"],["new","RDoc::Parser::Simple","classes/RDoc/Parser/Simple.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepare to parse a plain file\n"],["new","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-new","()","<p>Creates a new RDoc::RDoc instance.  Call #document to parse files and\ngenerate documentation.\n"],["new","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-new","(initial_options = {})","<p>Creates a new driver using <code>initial_options</code> from ::process_args\n"],["new","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-c-new","(path, type = nil)","<p>Creates a new Store of <code>type</code> that will load or save to\n<code>path</code>\n"],["new","RDoc::Require","classes/RDoc/Require.html#method-c-new","(name, comment)","<p>Creates a new Require that loads <code>name</code> with\n<code>comment</code>\n"],["new","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = true, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri\ndata generation can be disabled through …\n"],["new","RDoc::Stats","classes/RDoc/Stats.html#method-c-new","(num_files, verbosity = 1)","<p>Creates a new Stats that will have <code>num_files</code>. \n<code>verbosity</code> defaults to 1 which will create an\nRDoc::Stats::Normal …\n"],["new","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-c-new","(num_files)","<p>Creates a new Quiet that will print nothing\n"],["new","RDoc::Task","classes/RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview\nfor documentation.\n"],["new","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-new","(file_name)","<p>Creates a new TopLevel for <code>file_name</code>\n"],["new","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-new","(file_name)","<p>Creates a new RDoc::TopLevel with <code>file_name</code> only if one with\nthe same name does not exist in all_files. …\n"],["new","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-c-new","(source)","<p>Create an AttlistDecl, pulling the information from a Source.  Notice that\nthis isn&#39;t very convenient; …\n"],["new","REXML::Attribute","classes/REXML/Attribute.html#method-c-new","( first, second=nil, parent=nil )","<p>Constructor. FIXME: The parser doesn&#39;t catch illegal characters in\nattributes\n<p>first &mdash; Either: an Attribute …\n"],["new","REXML::CData","classes/REXML/CData.html#method-c-new","( first, whitespace=true, parent=nil )","\n<pre><code>Constructor.  CData is data between &lt;![CDATA[ ... ]]&gt;</code></pre>\n<p><em>Examples</em>\n\n<pre><code>CData.new( source )\nCData.new( &quot;Here is ...</code></pre>\n"],["new","REXML::Child","classes/REXML/Child.html#method-c-new","( parent = nil )","<p>Constructor.  Any inheritors of this class should call super to make sure\nthis method is called.\n<p>parent … &mdash; "],["new","REXML::Comment","classes/REXML/Comment.html#method-c-new","( first, second = nil )","<p>Constructor.  The first argument can be one of three types: @param first If\nString, the contents of this …\n"],["new","REXML::DTD::ElementDecl","classes/REXML/DTD/ElementDecl.html#method-c-new","(match)","<p>s*(((([“‘]).*?5)|*)*?)(/)?&gt;/um, true)\n"],["new","REXML::DTD::EntityDecl","classes/REXML/DTD/EntityDecl.html#method-c-new","(src)","<p>&lt;!ENTITY name SYSTEM “…”&gt; &lt;!ENTITY name “…”&gt;\n"],["new","REXML::DTD::NotationDecl","classes/REXML/DTD/NotationDecl.html#method-c-new","(src)",""],["new","REXML::DocType","classes/REXML/DocType.html#method-c-new","( first, parent=nil )","<p>Constructor\n\n<pre><code>dt = DocType.new( &#39;foo&#39;, &#39;-//I/Hate/External/IDs&#39; )\n# &lt;!DOCTYPE foo &#39;-//I/Hate/External/IDs&#39;&gt; ...</code></pre>\n"],["new","REXML::Document","classes/REXML/Document.html#method-c-new","( source = nil, context = {} )","<p>Constructor @param source if supplied, must be a Document, String, or IO.\nDocuments have their context …\n"],["new","REXML::Element","classes/REXML/Element.html#method-c-new","( arg = UNDEFINED, parent=nil, context=nil )","<p>Constructor\n<p>arg &mdash; if not supplied, will be set to the default value. If a String, the name of\nthis object …\n"],["new","REXML::Entity","classes/REXML/Entity.html#method-c-new","(stream, value=nil, parent=nil, reference=false)","<p>Create a new entity.  Simple entities can be constructed by passing a name,\nvalue to the constructor; …\n"],["new","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-c-new","( ie_hack=false )","<p>Prints out the XML document with no formatting – except if id_hack is set.\n<p>ie_hack &mdash; If set to true, then …\n\n"],["new","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-c-new","( indentation=2, ie_hack=false )","<p>Create a new pretty printer.\n<p>output &mdash; An object implementing &#39;&lt;&lt;(String)&#39;, to which the output …\n"],["new","REXML::Formatters::Transitive","classes/REXML/Formatters/Transitive.html#method-c-new","( indentation=2, ie_hack=false )",""],["new","REXML::IOSource","classes/REXML/IOSource.html#method-c-new","(arg, block_size=500, encoding=nil)","<p>block_size has been deprecated\n"],["new","REXML::Instruction","classes/REXML/Instruction.html#method-c-new","(target, content=nil)","<p>Constructs a new Instruction @param target can be one of a number of\nthings.  If String, then the target …\n"],["new","REXML::Light::Node","classes/REXML/Light/Node.html#method-c-new","(node=nil)","<p>Create a new element.\n"],["new","REXML::Output","classes/REXML/Output.html#method-c-new","(real_IO, encd=\"iso-8859-1\")",""],["new","REXML::Parent","classes/REXML/Parent.html#method-c-new","(parent=nil)","<p>Constructor @param parent if supplied, will be set as the parent of this\nobject\n"],["new","REXML::ParseException","classes/REXML/ParseException.html#method-c-new","( message, source=nil, parser=nil, exception=nil )",""],["new","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-c-new","( source )",""],["new","REXML::Parsers::LightParser","classes/REXML/Parsers/LightParser.html#method-c-new","(stream)",""],["new","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-c-new","(arg)","<p>The type of this event.  Will be one of :tag_start, :tag_end, :text,\n:processing_instruction, :comment, …\n"],["new","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-c-new","(stream)",""],["new","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-c-new","(source)",""],["new","REXML::Parsers::StreamParser","classes/REXML/Parsers/StreamParser.html#method-c-new","(source, listener)",""],["new","REXML::Parsers::TreeParser","classes/REXML/Parsers/TreeParser.html#method-c-new","( source, build_context = Document.new )",""],["new","REXML::Parsers::UltraLightParser","classes/REXML/Parsers/UltraLightParser.html#method-c-new","(stream)",""],["new","REXML::Source","classes/REXML/Source.html#method-c-new","(arg, encoding=nil)","<p>Constructor @param arg must be a String, and should be a valid XML document\n@param encoding if non-null, …\n"],["new","REXML::SyncEnumerator","classes/REXML/SyncEnumerator.html#method-c-new","(*enums)","<p>Creates a new SyncEnumerator which enumerates rows of given Enumerable\nobjects.\n"],["new","REXML::Text","classes/REXML/Text.html#method-c-new","(arg, respect_whitespace=false, parent=nil, raw=nil, entity_filter=nil, illegal=NEEDS_A_SECOND_CHECK )","<p>Constructor <code>arg</code> if a String, the content is set to the String.\nIf a Text, the object is shallowly cloned. …\n"],["new","REXML::UndefinedNamespaceException","classes/REXML/UndefinedNamespaceException.html#method-c-new","( prefix, source, parser )",""],["new","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-c-new","(context)",""],["new","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-c-new","(event_type, event_arg=nil )",""],["new","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-c-new","(context)",""],["new","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-c-new","(context)",""],["new","REXML::Validation::Ref","classes/REXML/Validation/Ref.html#method-c-new","(value)",""],["new","REXML::Validation::RelaxNG","classes/REXML/Validation/RelaxNG.html#method-c-new","(source)","<p>FIXME: Namespaces\n"],["new","REXML::Validation::State","classes/REXML/Validation/State.html#method-c-new","( context )",""],["new","REXML::Validation::ValidationException","classes/REXML/Validation/ValidationException.html#method-c-new","(msg)",""],["new","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-c-new","(version=DEFAULT_VERSION, encoding=nil, standalone=nil)",""],["new","REXML::XPathParser","classes/REXML/XPathParser.html#method-c-new","( )",""],["new","RSS::Atom::Entry","classes/RSS/Atom/Entry.html#method-c-new","(version=nil, encoding=nil, standalone=nil)",""],["new","RSS::Atom::Feed","classes/RSS/Atom/Feed.html#method-c-new","(version=nil, encoding=nil, standalone=nil)",""],["new","RSS::BaseParser","classes/RSS/BaseParser.html#method-c-new","(rss)",""],["new","RSS::ConversionError","classes/RSS/ConversionError.html#method-c-new","(string, to, from)",""],["new","RSS::Converter","classes/RSS/Converter.html#method-c-new","(to_enc, from_enc=nil)",""],["new","RSS::Element","classes/RSS/Element.html#method-c-new","(do_validate=true, attrs=nil)",""],["new","RSS::ITunesChannelModel::ITunesCategory","classes/RSS/ITunesChannelModel/ITunesCategory.html#method-c-new","(*args)",""],["new","RSS::ITunesChannelModel::ITunesImage","classes/RSS/ITunesChannelModel/ITunesImage.html#method-c-new","(*args)",""],["new","RSS::ITunesChannelModel::ITunesOwner","classes/RSS/ITunesChannelModel/ITunesOwner.html#method-c-new","(*args)",""],["new","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-c-new","(*args)",""],["new","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-c-new","(*args)",""],["new","RSS::ImageItemModel::ImageItem","classes/RSS/ImageItemModel/ImageItem.html#method-c-new","(*args)",""],["new","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-c-new","()",""],["new","RSS::Maker::Atom::Entry","classes/RSS/Maker/Atom/Entry.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::Atom::Feed","classes/RSS/Maker/Atom/Feed.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-new","(maker)",""],["new","RSS::Maker::RSS09","classes/RSS/Maker/RSS09.html#method-c-new","(feed_version)",""],["new","RSS::Maker::RSS091","classes/RSS/Maker/RSS091.html#method-c-new","(feed_version=\"0.91\")",""],["new","RSS::Maker::RSS092","classes/RSS/Maker/RSS092.html#method-c-new","(feed_version=\"0.92\")",""],["new","RSS::Maker::RSS10","classes/RSS/Maker/RSS10.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::RSS20","classes/RSS/Maker/RSS20.html#method-c-new","(feed_version=\"2.0\")",""],["new","RSS::MissingAttributeError","classes/RSS/MissingAttributeError.html#method-c-new","(tag, attribute)",""],["new","RSS::MissingTagError","classes/RSS/MissingTagError.html#method-c-new","(tag, parent)",""],["new","RSS::NSError","classes/RSS/NSError.html#method-c-new","(tag, prefix, require_uri)",""],["new","RSS::NotAvailableValueError","classes/RSS/NotAvailableValueError.html#method-c-new","(tag, value, attribute=nil)",""],["new","RSS::NotExpectedTagError","classes/RSS/NotExpectedTagError.html#method-c-new","(tag, uri, parent)",""],["new","RSS::NotExpectedTagError","classes/RSS/NotExpectedTagError.html#method-c-new","(tag, uri, parent)",""],["new","RSS::NotSetError","classes/RSS/NotSetError.html#method-c-new","(name, variables)",""],["new","RSS::NotValidXMLParser","classes/RSS/NotValidXMLParser.html#method-c-new","(parser)",""],["new","RSS::NotWellFormedError","classes/RSS/NotWellFormedError.html#method-c-new","(line=nil, element=nil)","<p>Create a new NotWellFormedError for an error at <code>line</code> in\n<code>element</code>.  If a block is given the return value …\n"],["new","RSS::OverlappedPrefixError","classes/RSS/OverlappedPrefixError.html#method-c-new","(prefix)",""],["new","RSS::Parser","classes/RSS/Parser.html#method-c-new","(rss, parser_class=self.class.default_parser)",""],["new","RSS::RDF","classes/RSS/RDF.html#method-c-new","(version=nil, encoding=nil, standalone=nil)",""],["new","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-c-new","(*args)",""],["new","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-c-new","(*args)",""],["new","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-c-new","(feed_version, version=nil, encoding=nil, standalone=nil)",""],["new","RSS::Rss","classes/RSS/Rss.html#method-c-new","(feed_version, version=nil, encoding=nil, standalone=nil)",""],["new","RSS::Rss::Channel::Cloud","classes/RSS/Rss/Channel/Cloud.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Image","classes/RSS/Rss/Channel/Image.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Category","classes/RSS/Rss/Channel/Item/Category.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Enclosure","classes/RSS/Rss/Channel/Item/Enclosure.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Guid","classes/RSS/Rss/Channel/Item/Guid.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Source","classes/RSS/Rss/Channel/Item/Source.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::SkipDays::Day","classes/RSS/Rss/Channel/SkipDays/Day.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::SkipHours::Hour","classes/RSS/Rss/Channel/SkipHours/Hour.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::TextInput","classes/RSS/Rss/Channel/TextInput.html#method-c-new","(*args)",""],["new","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-c-new","(*args)",""],["new","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-c-new","(*args)",""],["new","RSS::TooMuchTagError","classes/RSS/TooMuchTagError.html#method-c-new","(tag, parent)",""],["new","RSS::TrackBackModel10::TrackBackAbout","classes/RSS/TrackBackModel10/TrackBackAbout.html#method-c-new","(*args)",""],["new","RSS::TrackBackModel10::TrackBackPing","classes/RSS/TrackBackModel10/TrackBackPing.html#method-c-new","(*args)",""],["new","RSS::TrackBackModel20::TrackBackAbout","classes/RSS/TrackBackModel20/TrackBackAbout.html#method-c-new","(*args)",""],["new","RSS::TrackBackModel20::TrackBackPing","classes/RSS/TrackBackModel20/TrackBackPing.html#method-c-new","(*args)",""],["new","RSS::UnknownConversionMethodError","classes/RSS/UnknownConversionMethodError.html#method-c-new","(to, from)",""],["new","RSS::UnknownConversionMethodError","classes/RSS/UnknownConversionMethodError.html#method-c-new","(to, from)",""],["new","RSS::UnknownTagError","classes/RSS/UnknownTagError.html#method-c-new","(tag, uri)",""],["new","RSS::UnsupportedMakerVersionError","classes/RSS/UnsupportedMakerVersionError.html#method-c-new","(version)",""],["new","RSS::XML::Element","classes/RSS/XML/Element.html#method-c-new","(name, prefix=nil, uri=nil, attributes={}, children=[])",""],["new","RSS::XMLParserNotFound","classes/RSS/XMLParserNotFound.html#method-c-new","()",""],["new","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-c-new","(*attrs)",""],["new","RSS::XMLStyleSheetMixin","classes/RSS/XMLStyleSheetMixin.html#method-c-new","(*args)",""],["new","Rake::Application","classes/Rake/Application.html#method-c-new","()","<p>Initialize a Rake::Application object.\n"],["new","Rake::Application","classes/Rake/Application.html#method-c-new","()","<p>Initialize a Rake::Application object.\n"],["new","Rake::CompositePublisher","classes/Rake/CompositePublisher.html#method-c-new","()",""],["new","Rake::FileList","classes/Rake/FileList.html#method-c-new","(*patterns)","<p>Create a file list from the globbable patterns given.  If you wish to\nperform multiple includes or excludes …\n"],["new","Rake::FtpFile","classes/Rake/FtpFile.html#method-c-new","(path, entry)",""],["new","Rake::FtpUploader","classes/Rake/FtpUploader.html#method-c-new","(path, host, account, password)","<p>Create an FTP uploader targeting the directory <code>path</code> on\n<code>host</code> using the given account and password.  <code>path</code>\n…\n"],["new","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-c-new","(value, tail)",""],["new","Rake::NameSpace","classes/Rake/NameSpace.html#method-c-new","(task_manager, scope_list)","<p>Create a namespace lookup object using the given task manager and the list\nof scopes.\n"],["new","Rake::PackageTask","classes/Rake/PackageTask.html#method-c-new","(name=nil, version=nil)","<p>Create a Package Task with the given name and version.  Use\n<code>:noversion</code> as the version to build a package …\n"],["new","Rake::PseudoStatus","classes/Rake/PseudoStatus.html#method-c-new","(code=0)",""],["new","Rake::RubyForgePublisher","classes/Rake/RubyForgePublisher.html#method-c-new","(projname, user)",""],["new","Rake::RuleRecursionOverflowError","classes/Rake/RuleRecursionOverflowError.html#method-c-new","(*args)",""],["new","Rake::SshDirPublisher","classes/Rake/SshDirPublisher.html#method-c-new","(host, remote_dir, local_dir)",""],["new","Rake::SshFilePublisher","classes/Rake/SshFilePublisher.html#method-c-new","(host, remote_dir, local_dir, *files)","<p>Create a publisher using the give host information.\n"],["new","Rake::Task","classes/Rake/Task.html#method-c-new","(task_name, app)","<p>Create a task named <code>task_name</code> with no actions or\nprerequisites. Use <code>enhance</code> to add actions and prerequisites. …\n"],["new","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-c-new","(names, values, parent=nil)","<p>Create a TaskArgument object with a list of named arguments (given by\n:names) and a set of associated …\n"],["new","Rake::TaskManager","classes/Rake/TaskManager.html#method-c-new","()",""],["new","Random","classes/Random.html#method-c-new","(p1 = v1)","<p>Creates new Mersenne Twister based pseudorandom number generator with seed.\nWhen the argument seed is …\n"],["new","Range","classes/Range.html#method-c-new","(p1, p2, p3 = v3)","<p>Constructs a range using the given <em>start</em> and <em>end</em>. If the\nthird parameter is omitted or is <code>false</code>, the …\n"],["new","Regexp","classes/Regexp.html#method-c-new","(*args)","<p>Constructs a new regular expression from <em>pattern</em>, which can be\neither a <code>String</code> or a <code>Regexp</code> (in which …\n"],["new","RemoteTkIp","classes/RemoteTkIp.html#method-c-new","(remote_ip, displayof=nil, timeout=5)",""],["new","RemoteTkIp","classes/RemoteTkIp.html#method-i-new","(*args, &b)",""],["new","Resolv","classes/Resolv.html#method-c-new","(resolvers=[Hosts.new, DNS.new])","<p>Creates a new Resolv using <code>resolvers</code>.\n"],["new","Resolv::DNS","classes/Resolv/DNS.html#method-c-new","(config_info=nil)","<p>Creates a new DNS resolver.\n<p><code>config_info</code> can be:\n<p>nil &mdash; Uses /etc/resolv.conf.\n"],["new","Resolv::DNS::Resource::DomainName","classes/Resolv/DNS/Resource/DomainName.html#method-c-new","(name)","<p>Creates a new DomainName from <code>name</code>.\n"],["new","Resolv::DNS::Resource::Generic","classes/Resolv/DNS/Resource/Generic.html#method-c-new","(data)","<p>Creates a new generic resource.\n"],["new","Resolv::DNS::Resource::HINFO","classes/Resolv/DNS/Resource/HINFO.html#method-c-new","(cpu, os)","<p>Creates a new HINFO running <code>os</code> on <code>cpu</code>.\n"],["new","Resolv::DNS::Resource::IN::A","classes/Resolv/DNS/Resource/IN/A.html#method-c-new","(address)","<p>Creates a new A for <code>address</code>.\n"],["new","Resolv::DNS::Resource::IN::AAAA","classes/Resolv/DNS/Resource/IN/AAAA.html#method-c-new","(address)","<p>Creates a new AAAA for <code>address</code>.\n"],["new","Resolv::DNS::Resource::IN::SRV","classes/Resolv/DNS/Resource/IN/SRV.html#method-c-new","(priority, weight, port, target)","<p>Create a SRV resource record.\n<p>See the documentation for #priority, #weight, #port and #target for\n<code>priority</code> …\n"],["new","Resolv::DNS::Resource::IN::WKS","classes/Resolv/DNS/Resource/IN/WKS.html#method-c-new","(address, protocol, bitmap)",""],["new","Resolv::DNS::Resource::MINFO","classes/Resolv/DNS/Resource/MINFO.html#method-c-new","(rmailbx, emailbx)",""],["new","Resolv::DNS::Resource::MX","classes/Resolv/DNS/Resource/MX.html#method-c-new","(preference, exchange)","<p>Creates a new MX record with <code>preference</code>, accepting mail at\n<code>exchange</code>.\n"],["new","Resolv::DNS::Resource::SOA","classes/Resolv/DNS/Resource/SOA.html#method-c-new","(mname, rname, serial, refresh, retry_, expire, minimum)","<p>Creates a new SOA record.  See the attr documentation for the details of\neach argument.\n"],["new","Resolv::DNS::Resource::TXT","classes/Resolv/DNS/Resource/TXT.html#method-c-new","(first_string, *rest_strings)",""],["new","Resolv::Hosts","classes/Resolv/Hosts.html#method-c-new","(filename = DefaultFileName)","<p>Creates a new Resolv::Hosts, using <code>filename</code> for its data\nsource.\n"],["new","Rinda::DRbObjectTemplate","classes/Rinda/DRbObjectTemplate.html#method-c-new","(uri=nil, ref=nil)","<p>Creates a new DRbObjectTemplate that will match against <code>uri</code>\nand <code>ref</code>.\n"],["new","Rinda::NotifyTemplateEntry","classes/Rinda/NotifyTemplateEntry.html#method-c-new","(place, event, tuple, expires=nil)","<p>Creates a new NotifyTemplateEntry that watches <code>place</code> for\n+event+s that match <code>tuple</code>.\n"],["new","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-c-new","(broadcast_list=@@broadcast_list, port=Ring_PORT)","<p>Creates a new RingFinger that will look for RingServers at\n<code>port</code> on the addresses in <code>broadcast_list</code>.\n"],["new","Rinda::RingProvider","classes/Rinda/RingProvider.html#method-c-new","(klass, front, desc, renewer = nil)","<p>Creates a RingProvider that will provide a <code>klass</code> service\nrunning on <code>front</code>, with a <code>description</code>. \n<code>renewer</code> …\n"],["new","Rinda::RingServer","classes/Rinda/RingServer.html#method-c-new","(ts, port=Ring_PORT)","<p>Advertises <code>ts</code> on the UDP broadcast address at\n<code>port</code>.\n"],["new","Rinda::SimpleRenewer","classes/Rinda/SimpleRenewer.html#method-c-new","(sec=180)","<p>Creates a new SimpleRenewer that keeps an object alive for another\n<code>sec</code> seconds.\n"],["new","Rinda::Tuple","classes/Rinda/Tuple.html#method-c-new","(ary_or_hash)","<p>Creates a new Tuple from <code>ary_or_hash</code> which must be an Array or\nHash.\n"],["new","Rinda::TupleBag::TupleBin","classes/Rinda/TupleBag/TupleBin.html#method-c-new","()",""],["new","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-c-new","(ary, sec=nil)","<p>Creates a TupleEntry based on <code>ary</code> with an optional renewer or\nexpiry time <code>sec</code>.\n<p>A renewer must implement …\n"],["new","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-c-new","(period=60)","<p>Creates a new TupleSpace.  <code>period</code> is used to control how often\nto look for dead tuples after modifications …\n"],["new","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-c-new","(ts)","<p>Creates a new TupleSpaceProxy to wrap <code>ts</code>.\n"],["new","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-c-new","(place, ary, expires=nil)",""],["new","RingEcho","classes/RingEcho.html#method-c-new","(name)",""],["new","Ripper::Filter","classes/Ripper/Filter.html#method-c-new","(src, filename = '-', lineno = 1)",""],["new","Ripper::TokenPattern::MatchData","classes/Ripper/TokenPattern/MatchData.html#method-c-new","(tokens, match)",""],["new","RubyLex","classes/RubyLex.html#method-c-new","()",""],["new","RubyToken::TkId","classes/RubyToken/TkId.html#method-c-new","(seek, line_no, char_no, name)",""],["new","RubyToken::TkNode","classes/RubyToken/TkNode.html#method-c-new","(seek, line_no, char_no)",""],["new","RubyToken::TkOPASGN","classes/RubyToken/TkOPASGN.html#method-c-new","(seek, line_no, char_no, op)",""],["new","RubyToken::TkUnknownChar","classes/RubyToken/TkUnknownChar.html#method-c-new","(seek, line_no, char_no, id)",""],["new","RubyToken::TkVal","classes/RubyToken/TkVal.html#method-c-new","(seek, line_no, char_no, value = nil)",""],["new","RubyToken::Token","classes/RubyToken/Token.html#method-c-new","(seek, line_no, char_no)",""],["new","RubyVM::Instruction","classes/RubyVM/Instruction.html#method-c-new","(name, opes, pops, rets, comm, body, tvars, sp_inc, orig = self, defopes = [], type = nil, nsc = [], psc = [[], []])",""],["new","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = v5)",""],["new","RubyVM::InstructionsLoader","classes/RubyVM/InstructionsLoader.html#method-c-new","(opts = {})",""],["new","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-c-new","(insns)",""],["new","SDBM","classes/SDBM.html#method-c-new","(p1, p2 = v2)",""],["new","SOCKSSocket","classes/SOCKSSocket.html#method-c-new","(p1, p2)","<p>Opens a SOCKS connection to <code>host</code> via the SOCKS server\n<code>serv</code>.\n"],["new","SOCKSSocket","classes/SOCKSSocket.html#method-c-new","(host, serv)",""],["new","Seq","classes/Seq.html#method-c-new","(v, name)",""],["new","Set","classes/Set.html#method-c-new","(enum = nil)","<p>Creates a new set containing the elements of the given enumerable object.\n<p>If a block is given, the elements …\n"],["new","Shell","classes/Shell.html#method-c-new","(pwd = Dir.pwd, umask = nil)",""],["new","Shell::AppendFile","classes/Shell/AppendFile.html#method-c-new","(sh, to_filename, filter)",""],["new","Shell::AppendIO","classes/Shell/AppendIO.html#method-c-new","(sh, io, filter)",""],["new","Shell::Cat","classes/Shell/Cat.html#method-c-new","(sh, *filenames)",""],["new","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-new","(shell)",""],["new","Shell::Concat","classes/Shell/Concat.html#method-c-new","(sh, *jobs)",""],["new","Shell::Echo","classes/Shell/Echo.html#method-c-new","(sh, *strings)",""],["new","Shell::Filter","classes/Shell/Filter.html#method-c-new","(sh)",""],["new","Shell::Glob","classes/Shell/Glob.html#method-c-new","(sh, pattern)",""],["new","Shell::ProcessController","classes/Shell/ProcessController.html#method-c-new","(shell)",""],["new","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-c-new","(sh, command, *opts)",""],["new","Shell::Tee","classes/Shell/Tee.html#method-c-new","(sh, filename)",""],["new","Shell::Void","classes/Shell/Void.html#method-c-new","(sh, *opts)",""],["new","SignalException","classes/SignalException.html#method-c-new","(*args)","<p>Construct a new SignalException object.  <code>sig_name</code> should be a\nknown signal name.\n"],["new","SimpleTupleSpace","classes/SimpleTupleSpace.html#method-c-new","()",""],["new","SizedQueue","classes/SizedQueue.html#method-c-new","(max)","<p>Creates a fixed-length queue with a maximum size of <code>max</code>.\n"],["new","Socket","classes/Socket.html#method-c-new","(p1, p2, p3 = v3)","<p>Creates a new socket object.\n<p><em>domain</em> should be a communications domain such as: :INET, :INET6,\n:UNIX, etc. …\n"],["new","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-new","(p1, p2, p3, p4)","<p><em>family</em> should be an integer, a string or a symbol.\n<p>Socket::AF_INET, “AF_INET”, “INET”, …\n"],["new","Socket::Option","classes/Socket/Option.html#method-c-new","(p1, p2, p3, p4)","<p>Returns a new Socket::Option object.\n\n<pre><code>sockopt = Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, [1].pack(&quot;i&quot;)) ...</code></pre>\n"],["new","Socket::UDPSource","classes/Socket/UDPSource.html#method-c-new","(remote_address, local_address, &reply_proc)","<p><code>remote_adress</code> is an Addrinfo object.\n<p><code>local_adress</code> is an Addrinfo object.\n<p><code>reply_proc</code> is a Proc used to send …\n"],["new","Spinner_demo","classes/Spinner_demo.html#method-c-new","(parent=nil)",""],["new","SshDirPublisher","classes/SshDirPublisher.html#method-c-new","(host, remote_dir, local_dir)",""],["new","SshFilePublisher","classes/SshFilePublisher.html#method-c-new","(host, remote_dir, local_dir, *files)","<p>Create a publisher using the give host information.\n"],["new","String","classes/String.html#method-c-new","(p1 = v1)","<p>Returns a new string object containing a copy of <em>str</em>.\n"],["new","StringIO","classes/StringIO.html#method-c-new","(string=\"\")",""],["new","StringIO","classes/StringIO.html#method-c-new","(*args)","<p>Creates new StringIO instance from with <em>string</em> and <em>mode</em>.\n"],["new","StringScanner","classes/StringScanner.html#method-c-new","(p1, p2 = v2)","<p>Creates a new StringScanner object to scan over the given\n<code>string</code>. <code>dup</code> argument is obsolete and not used …\n"],["new","Struct","classes/Struct.html#method-c-new","(p1, *args)","<p>Creates a new class, named by <em>aString</em>, containing accessor methods\nfor the given symbols. If the name …\n"],["new","Syck::DomainType","classes/Syck/DomainType.html#method-c-new","( domain, type, val )",""],["new","Syck::PrivateType","classes/Syck/PrivateType.html#method-c-new","( type, val )",""],["new","Syck::Stream","classes/Syck/Stream.html#method-c-new","( opts = {} )",""],["new","Syck::YPath","classes/Syck/YPath.html#method-c-new","( str )",""],["new","Syck::YamlNode","classes/Syck/YamlNode.html#method-c-new","(t, v)",""],["new","Sync_m","classes/Sync_m.html#method-c-new","(*args)",""],["new","Sync_m","classes/Sync_m.html#method-c-new","(*args)",""],["new","SystemCallError","classes/SystemCallError.html#method-c-new","(p1, p2 = v2)","<p>If <em>errno</em> corresponds to a known system error code, constructs the\nappropriate <code>Errno</code> class for that error, …\n"],["new","SystemExit","classes/SystemExit.html#method-c-new","(*args)","<p>Create a new <code>SystemExit</code> exception with the given status.\n"],["new","TCPServer","classes/TCPServer.html#method-c-new","(p1 = v1, p2)","<p>Creates a new server socket bound to <em>port</em>.\n<p>If <em>hostname</em> is given, the socket is bound to it.\n\n<pre><code>serv = TCPServer.new(&quot;127.0.0.1&quot;, ...</code></pre>\n"],["new","TCPSocket","classes/TCPSocket.html#method-c-new","(host, serv, *rest)",""],["new","TCPSocket","classes/TCPSocket.html#method-c-new","(p1, p2, p3 = v3, p4 = v4)","<p>Opens a TCP connection to <code>remote_host</code> on\n<code>remote_port</code>.  If <code>local_host</code> and\n<code>local_port</code> are specified, then …\n"],["new","TclTkIp","classes/TclTkIp.html#method-c-new","(p1 = v1, p2 = v2)","<p>initialize interpreter\n"],["new","TclTkIp","classes/TclTkIp.html#method-i-new","(*args)",""],["new","TclTkIp","classes/TclTkIp.html#method-c-new","(*args)",""],["new","Tempfile","classes/Tempfile.html#method-c-new","(basename, *rest)","<p>Creates a temporary file with permissions 0600 (= only readable and\nwritable by the owner) and opens …\n"],["new","Test1","classes/Test1.html#method-c-new","()","<p>初期化(インタプリタを生成してウィジェットを生成する).\n"],["new","Thread","classes/Thread.html#method-c-new","(*arg, &block)",""],["new","ThreadsWait","classes/ThreadsWait.html#method-c-new","(*threads)","<p>Creates a ThreadsWait object, specifying the threads to wait on.\nNon-blocking.\n"],["new","ThreadsWait","classes/ThreadsWait.html#method-c-new","(*threads)","<p>Creates a ThreadsWait object, specifying the threads to wait on.\nNon-blocking.\n"],["new","Tick","classes/Tick.html#method-c-new","()",""],["new","Time","classes/Time.html#method-c-new","(*args)","<p>Returns a <code>Time</code> object.\n<p>It is initialized to the current system time if no argument.\n<strong>Note:</strong> The object created …\n"],["new","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-new","(data, keys={})",""],["new","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-c-new","(type, name, data, keys = {})",""],["new","Tk::BLT::Busy::Shield","classes/Tk/BLT/Busy/Shield.html#method-c-new","(win)",""],["new","Tk::BLT::DragDrop::Token","classes/Tk/BLT/DragDrop/Token.html#method-c-new","(arg)",""],["new","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-c-new","(chart, axis=nil, keys={})",""],["new","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-c-new","(chart, axis=nil, keys={})",""],["new","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-c-new","(chart, keys={})",""],["new","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-c-new","(chart, keys={})",""],["new","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-c-new","(chart, element=nil, keys={})",""],["new","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-c-new","(chart, element=nil, keys={})",""],["new","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-c-new","(chart, keys={})",""],["new","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-c-new","(chart, keys={})",""],["new","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-c-new","(chart, keys={})",""],["new","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-c-new","(chart, keys={})",""],["new","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-c-new","(parent, *args)",""],["new","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-c-new","(chart, pen=nil, keys={})",""],["new","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-c-new","(chart, pen=nil, keys={})",""],["new","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-c-new","(chart, keys={})",""],["new","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-c-new","(chart, keys={})",""],["new","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-c-new","(printer)",""],["new","Tk::BLT::Tabnotebook::Tab","classes/Tk/BLT/Tabnotebook/Tab.html#method-c-new","(parent, pos=nil, name=nil, keys={})",""],["new","Tk::BLT::Tabnotebook::Tab","classes/Tk/BLT/Tabnotebook/Tab.html#method-c-new","(parent, pos, name, keys)",""],["new","Tk::BLT::Tabset::NamedTab","classes/Tk/BLT/Tabset/NamedTab.html#method-c-new","(parent, name)",""],["new","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-c-new","(parent, pos=nil, name=nil, keys={})",""],["new","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-c-new","(parent, pos, name, keys)",""],["new","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-c-new","(tree, parent, keys={})",""],["new","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-c-new","(tree, parent, keys={})",""],["new","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-c-new","(tree, tag_str = nil)",""],["new","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-c-new","(size=nil, keys={})",""],["new","Tk::BLT::VectorAccess","classes/Tk/BLT/VectorAccess.html#method-c-new","(name)",""],["new","Tk::BLT::VectorAccess","classes/Tk/BLT/VectorAccess.html#method-c-new","(vec_name)",""],["new","Tk::BLT::Watch","classes/Tk/BLT/Watch.html#method-c-new","(name = nil, keys = {})",""],["new","Tk::BWidget::Bitmap","classes/Tk/BWidget/Bitmap.html#method-c-new","(name)",""],["new","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-c-new","(parent=nil, keys=nil)",""],["new","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-c-new","(lbox, *args)",""],["new","Tk::BWidget::MessageDlg","classes/Tk/BWidget/MessageDlg.html#method-c-new","(parent=nil, keys=nil)",""],["new","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-c-new","(tree, *args)",""],["new","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-new","(str, enc = nil)",""],["new","Tk::Frame","classes/Tk/Frame.html#method-c-new","(parent=nil, keys=nil)",""],["new","Tk::HTML_Widget::ClippingWindow","classes/Tk/HTML_Widget/ClippingWindow.html#method-c-new","(parent, keys={})",""],["new","Tk::HTML_Widget::ClippingWindow","classes/Tk/HTML_Widget/ClippingWindow.html#method-c-new","(parent)",""],["new","Tk::ICONS","classes/Tk/ICONS.html#method-c-new","(name, keys=nil)",""],["new","Tk::ICONS","classes/Tk/ICONS.html#method-i-new","(name, keys=nil)",""],["new","Tk::Itcl::ItclObject","classes/Tk/Itcl/ItclObject.html#method-c-new","(*args)",""],["new","Tk::Iwidgets::Scopedobject","classes/Tk/Iwidgets/Scopedobject.html#method-c-new","(obj_name, keys={})",""],["new","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-c-new","(*args)",""],["new","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-c-new","(*args)",""],["new","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-c-new","(*args)",""],["new","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-c-new","(*args)",""],["new","Tk::MenuClone","classes/Tk/MenuClone.html#method-c-new","(src_menu, *args)","<p>def initialize(parent, type=None)\n\n<pre><code>widgetname = nil\nif parent.kind_of? Hash\n  keys = _symbolkey2str(parent) ...</code></pre>\n"],["new","Tk::MenuClone","classes/Tk/MenuClone.html#method-c-new","(src_menu, *args)","<p>def initialize(parent, type=None)\n\n<pre><code>widgetname = nil\nif parent.kind_of? Hash\n  keys = _symbolkey2str(parent) ...</code></pre>\n"],["new","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-c-new","(*args)",""],["new","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-c-new","(*args)",""],["new","Tk::OptionMenubutton::OptionMenu","classes/Tk/OptionMenubutton/OptionMenu.html#method-c-new","(path)",""],["new","Tk::OptionObj","classes/Tk/OptionObj.html#method-c-new","(hash = nil)",""],["new","Tk::RbWidget::AlignBox","classes/Tk/RbWidget/AlignBox.html#method-c-new","(*args)",""],["new","Tk::RbWidget::BalloonHelp","classes/Tk/RbWidget/BalloonHelp.html#method-c-new","(parent=nil, keys={})",""],["new","Tk::Root","classes/Tk/Root.html#method-c-new","(keys=nil, &b)",""],["new","Tk::SystemMenu","classes/Tk/SystemMenu.html#method-c-new","(parent, keys=nil)",""],["new","Tk::SystemMenu","classes/Tk/SystemMenu.html#method-c-new","(parent, keys=nil)",""],["new","Tk::SystemMenu","classes/Tk/SystemMenu.html#method-c-new","(parent, keys=nil)",""],["new","Tk::TclX::XPG3_MsgCat","classes/Tk/TclX/XPG3_MsgCat.html#method-c-new","(catname, fail_mode=false)",""],["new","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-c-new","(*args)",""],["new","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-new","(file, index, keys=nil)",""],["new","Tk::Tcllib::Plotchart::Barchart","classes/Tk/Tcllib/Plotchart/Barchart.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::Barchart3D","classes/Tk/Tcllib/Plotchart/Barchart3D.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::Boxplot","classes/Tk/Tcllib/Plotchart/Boxplot.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::Piechart","classes/Tk/Tcllib/Plotchart/Piechart.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::PlotSeries","classes/Tk/Tcllib/Plotchart/PlotSeries.html#method-c-new","(chart, keys=nil)",""],["new","Tk::Tcllib::Plotchart::PolarPlot","classes/Tk/Tcllib/Plotchart/PolarPlot.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::PolarPlot","classes/Tk/Tcllib/Plotchart/PolarPlot.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::Radialchart","classes/Tk/Tcllib/Plotchart/Radialchart.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::RibbonChart3D","classes/Tk/Tcllib/Plotchart/RibbonChart3D.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::RightAxis","classes/Tk/Tcllib/Plotchart/RightAxis.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::Timechart","classes/Tk/Tcllib/Plotchart/Timechart.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-c-new","(*args)",""],["new","Tk::Tcllib::Tkpiechart::Slice","classes/Tk/Tcllib/Tkpiechart/Slice.html#method-c-new","(pie, *args)",""],["new","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-c-new","(keys={})",""],["new","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-c-new","(parent, keys=nil)",""],["new","Tk::TkTable::NamedCellTag","classes/Tk/TkTable/NamedCellTag.html#method-c-new","(parent, name, keys=nil)",""],["new","Tk::TkTable::NamedCellTag","classes/Tk/TkTable/NamedCellTag.html#method-c-new","(parent, name, keys=nil)",""],["new","Tk::Toplevel","classes/Tk/Toplevel.html#method-c-new","(parent=nil, screen=nil, classname=nil, keys=nil)",""],["new","Tk::UTF8_String","classes/Tk/UTF8_String.html#method-c-new","(str)",""],["new","Tk::Winico","classes/Tk/Winico.html#method-c-new","(file_name, resource_name=nil, winico_id=nil)",""],["new","TkBitmapImage","classes/TkBitmapImage.html#method-c-new","(*args)",""],["new","TkBitmapImage","classes/TkBitmapImage.html#method-c-new","(*args)",""],["new","TkComposite","classes/TkComposite.html#method-c-new","(*args)","<p>def initialize(parent=nil, *args)\n"],["new","TkCore","classes/TkCore.html#method-c-new","(ip, cmd)",""],["new","TkCore::Tk_OBJECT_TABLE","classes/TkCore/Tk_OBJECT_TABLE.html#method-c-new","(id)",""],["new","TkDialog","classes/TkDialog.html#method-c-new","(*args)",""],["new","TkFont","classes/TkFont.html#method-c-new","(ltn=nil, knj=nil, keys=nil)",""],["new","TkFont","classes/TkFont.html#method-c-new","(ltn=nil, knj=nil, keys=nil)",""],["new","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-c-new","(compound, type)",""],["new","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-c-new","(parent)",""],["new","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-c-new","(file = nil)",""],["new","TkImage","classes/TkImage.html#method-c-new","(keys=nil)",""],["new","TkImage","classes/TkImage.html#method-c-new","(keys=nil)",""],["new","TkImg_demo","classes/TkImg_demo.html#method-c-new","()",""],["new","TkKernel","classes/TkKernel.html#method-c-new","(*args)",""],["new","TkMenubar","classes/TkMenubar.html#method-c-new","(parent = nil, spec = nil, options = {})",""],["new","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-new","(namespace = nil)",""],["new","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-new","(namespace = nil)",""],["new","TkNamedFont","classes/TkNamedFont.html#method-c-new","(name, keys=nil)",""],["new","TkNamedFont","classes/TkNamedFont.html#method-c-new","(name, keys=nil)",""],["new","TkNamespace::Ensemble","classes/TkNamespace/Ensemble.html#method-c-new","(keys = {})",""],["new","TkPhotoImage","classes/TkPhotoImage.html#method-c-new","(*args)","<p>Create a new image with the given options.\n<p>Examples of use :\n<p>Create an empty image of 300x200 pixels\n"],["new","TkPhotoImage","classes/TkPhotoImage.html#method-c-new","(*args)","<p>Create a new image with the given options.\n<p>Examples of use :\n<p>Create an empty image of 300x200 pixels\n"],["new","TkPixmapImage","classes/TkPixmapImage.html#method-c-new","(*args)",""],["new","TkRTTimer","classes/TkRTTimer.html#method-c-new","(*args, &b)",""],["new","TkTextImage","classes/TkTextImage.html#method-c-new","(parent, index, keys)",""],["new","TkTextImage","classes/TkTextImage.html#method-c-new","(parent, index, keys)",""],["new","TkTextMark","classes/TkTextMark.html#method-c-new","(parent, index)",""],["new","TkTextMark","classes/TkTextMark.html#method-c-new","(parent, index)",""],["new","TkTextMarkAnchor","classes/TkTextMarkAnchor.html#method-c-new","(parent,*args)",""],["new","TkTextMarkAnchor","classes/TkTextMarkAnchor.html#method-c-new","(parent,*args)",""],["new","TkTextMarkCurrent","classes/TkTextMarkCurrent.html#method-c-new","(parent,*args)",""],["new","TkTextMarkCurrent","classes/TkTextMarkCurrent.html#method-c-new","(parent,*args)",""],["new","TkTextMarkInsert","classes/TkTextMarkInsert.html#method-c-new","(parent,*args)",""],["new","TkTextMarkInsert","classes/TkTextMarkInsert.html#method-c-new","(parent,*args)",""],["new","TkTextNamedMark","classes/TkTextNamedMark.html#method-c-new","(parent, name, index=nil)",""],["new","TkTextNamedMark","classes/TkTextNamedMark.html#method-c-new","(parent, name, index=nil)",""],["new","TkTextNamedMark","classes/TkTextNamedMark.html#method-c-new","(parent, name, index=nil)",""],["new","TkTextNamedMark","classes/TkTextNamedMark.html#method-c-new","(parent, name, index=nil)",""],["new","TkTextNamedTag","classes/TkTextNamedTag.html#method-c-new","(parent, name, *args)",""],["new","TkTextNamedTag","classes/TkTextNamedTag.html#method-c-new","(parent, name, *args)",""],["new","TkTextNamedTag","classes/TkTextNamedTag.html#method-c-new","(parent, name, *args)",""],["new","TkTextNamedTag","classes/TkTextNamedTag.html#method-c-new","(parent, name, *args)",""],["new","TkTextTag","classes/TkTextTag.html#method-c-new","(parent, *args)",""],["new","TkTextTag","classes/TkTextTag.html#method-c-new","(parent, *args)",""],["new","TkTextTagSel","classes/TkTextTagSel.html#method-c-new","(parent, *args)",""],["new","TkTextTagSel","classes/TkTextTagSel.html#method-c-new","(parent, *args)",""],["new","TkTextWindow","classes/TkTextWindow.html#method-c-new","(parent, index, keys = {})",""],["new","TkTextWindow","classes/TkTextWindow.html#method-c-new","(parent, index, keys = {})",""],["new","TkTimer","classes/TkTimer.html#method-c-new","(*args, &b)",""],["new","TkTimer","classes/TkTimer.html#method-c-new","(*args, &b)",""],["new","TkTreeCtrl_demo","classes/TkTreeCtrl_demo.html#method-c-new","(dir)",""],["new","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-new","(*args)",""],["new","TkValidateCommand","classes/TkValidateCommand.html#method-c-new","(cmd = Proc.new, *args)",""],["new","TkVarAccess","classes/TkVarAccess.html#method-c-new","(name, *args)",""],["new","TkVarAccess","classes/TkVarAccess.html#method-c-new","(varname, val=nil)",""],["new","TkVariable","classes/TkVariable.html#method-c-new","(val=\"\", type=nil)",""],["new","TkVariable","classes/TkVariable.html#method-c-new","(val=\"\", type=nil)",""],["new","TkVirtualEvent::PreDefVirtEvent","classes/TkVirtualEvent/PreDefVirtEvent.html#method-c-new","(event, *sequences)",""],["new","TkVirtualEvent::PreDefVirtEvent","classes/TkVirtualEvent/PreDefVirtEvent.html#method-c-new","(event, *sequences)",""],["new","TkVirtualEvent::PreDefVirtEvent","classes/TkVirtualEvent/PreDefVirtEvent.html#method-c-new","(event, *sequences)",""],["new","TkVirtualEvent::PreDefVirtEvent","classes/TkVirtualEvent/PreDefVirtEvent.html#method-c-new","(event, *sequences)",""],["new","TkVirtualEvent::PreDefVirtEvent","classes/TkVirtualEvent/PreDefVirtEvent.html#method-c-new","(event, *sequences)",""],["new","TkVirtualEvent::PreDefVirtEvent","classes/TkVirtualEvent/PreDefVirtEvent.html#method-c-new","(event, *sequences)",""],["new","TkWarning","classes/TkWarning.html#method-c-new","(*args)",""],["new","TkWarningObj","classes/TkWarningObj.html#method-c-new","(parent = nil, mes = nil)",""],["new","TkWarningObj","classes/TkWarningObj.html#method-c-new","(parent = nil, mes = nil)",""],["new","TkcGroup","classes/TkcGroup.html#method-c-new","(parent, *args)","<p>def create_self(parent, *args)\n"],["new","TkcItem","classes/TkcItem.html#method-c-new","(parent, *args)",""],["new","TkcTag","classes/TkcTag.html#method-c-new","(parent, mode=nil, *args)",""],["new","TkcTagAll","classes/TkcTagAll.html#method-c-new","(parent)",""],["new","TkcTagCurrent","classes/TkcTagCurrent.html#method-c-new","(parent)",""],["new","TkcTagString","classes/TkcTagString.html#method-c-new","(parent, name, mode=nil, *args)",""],["new","TkcTagString","classes/TkcTagString.html#method-c-new","(parent, name, mode=nil, *args)",""],["new","TkcTagString","classes/TkcTagString.html#method-c-new","(parent, name, mode=nil, *args)",""],["new","TkcTagString","classes/TkcTagString.html#method-c-new","(parent, name, mode=nil, *args)",""],["new","Toggle","classes/Toggle.html#method-c-new","(start_state)",""],["new","Transformation","classes/Transformation.html#method-c-new","(q, r, s, t)",""],["new","TupleSpace","classes/TupleSpace.html#method-c-new","()",""],["new","TupleSpace::Template","classes/TupleSpace/Template.html#method-c-new","(list)",""],["new","UDPSocket","classes/UDPSocket.html#method-c-new","(p1 = v1)","<p>Creates a new UDPSocket object.\n<p><em>address_family</em> should be an integer, a string or a symbol:\nSocket::AF_INET …\n"],["new","UNIXServer","classes/UNIXServer.html#method-c-new","(p1)","<p>Creates a new UNIX server socket bound to <em>path</em>.\n\n<pre><code>serv = UNIXServer.new(&quot;/tmp/sock&quot;)\ns = serv.accept\np s.read</code></pre>\n"],["new","UNIXSocket","classes/UNIXSocket.html#method-c-new","(p1)","<p>Creates a new UNIX client socket connected to <em>path</em>.\n\n<pre><code>s = UNIXSocket.new(&quot;/tmp/sock&quot;)\ns.send &quot;hello&quot;, 0</code></pre>\n"],["new","URI::FTP","classes/URI/FTP.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::FTP object from generic URL components with no syntax\nchecking.\n<p>Unlike build(), …\n"],["new","URI::Generic","classes/URI/Generic.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)","<p>Args\n<p><code>scheme</code> &mdash; Protocol scheme, i.e. &#39;http&#39;,&#39;ftp&#39;,&#39;mailto&#39; and so\non.\n<p><code>userinfo</code> &mdash; User …\n"],["new","URI::HTTP","classes/URI/HTTP.html#method-c-new","(*arg)","<p>Description\n<p>Create a new URI::HTTP object from generic URI components as per RFC 2396.\nNo HTTP-specific …\n"],["new","URI::LDAP","classes/URI/LDAP.html#method-c-new","(*arg)","<p>Description\n<p>Create a new URI::LDAP object from generic URI components as per RFC 2396.\nNo LDAP-specific …\n"],["new","URI::MailTo","classes/URI/MailTo.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::MailTo object from generic URL components with no syntax\nchecking.\n<p>This …\n"],["new","URI::Parser","classes/URI/Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre><code>URI::Parser.new([opts])</code></pre>\n<p>Args\n"],["new","Unicodeout_SampleFrame","classes/Unicodeout_SampleFrame.html#method-c-new","(base)","<p>@@font = &#39;Helvetica 14&#39; @@font = &#39;Courier 12&#39; @@font =\n&#39;clearlyu 16&#39; @@font = …\n"],["new","VCS","classes/VCS.html#method-c-new","(path)",""],["new","Vector","classes/Vector.html#method-c-new","(array)","<p>Vector.new is private; use Vector[] or Vector.elements to create.\n"],["new","Version","classes/Version.html#method-c-new","(version)","<p>Constructs a Version from the <code>version</code> string.  A version\nstring is a series of digits or ASCII letters …\n"],["new","ViewIcons","classes/ViewIcons.html#method-c-new","(init_path = Tk::LIBRARY)",""],["new","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-c-new","(log_file=nil, level=nil)","<p>Initializes a new logger for <code>log_file</code> that outputs messages at\n<code>level</code> or higher.  <code>log_file</code> can be a filename, …\n"],["new","WEBrick::CGI","classes/WEBrick/CGI.html#method-c-new","(*args)",""],["new","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-c-new","(config, env, stdin, stdout)",""],["new","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-c-new","(name, value)","<p>attr_accessor :comment_url, :discard, :port\n"],["new","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-c-new","(config={}, default=Config::General)",""],["new","WEBrick::HTTPAuth::BasicAuth","classes/WEBrick/HTTPAuth/BasicAuth.html#method-c-new","(config, default=Config::BasicAuth)","<p>Creates a new BasicAuth instance.\n<p>See WEBrick::Config::BasicAuth for default configuration entries\n<p>You …\n"],["new","WEBrick::HTTPAuth::DigestAuth","classes/WEBrick/HTTPAuth/DigestAuth.html#method-c-new","(config, default=Config::DigestAuth)","<p>Creates a new DigestAuth instance.  Be sure to use the same DigestAuth\ninstance for multiple requests …\n"],["new","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-c-new","(path)","<p>Open a digest password database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-c-new","(path)","<p>Open a group database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-c-new","(path)","<p>Open a password database at <code>path</code>\n"],["new","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Proxy server configurations.  The proxy server handles the following\nconfiguration items in addition …\n"],["new","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-c-new","(config)",""],["new","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-c-new","(config)","<p>Creates a new HTTP response object\n"],["new","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Creates a new HTTP server according to <code>config</code>\n<p>An HTTP server uses the following attributes:\n<p>:AccessLog … &mdash; "],["new","WEBrick::HTTPServer::MountTable","classes/WEBrick/HTTPServer/MountTable.html#method-c-new","()",""],["new","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-c-new","(server, *options)","<p>Initializes a new servlet for <code>server</code> using\n<code>options</code> which are stored as-is in +@options+.  +@logger+ is …\n"],["new","WEBrick::HTTPServlet::CGIHandler","classes/WEBrick/HTTPServlet/CGIHandler.html#method-c-new","(server, name)",""],["new","WEBrick::HTTPServlet::DefaultFileHandler","classes/WEBrick/HTTPServlet/DefaultFileHandler.html#method-c-new","(server, local_path)",""],["new","WEBrick::HTTPServlet::ERBHandler","classes/WEBrick/HTTPServlet/ERBHandler.html#method-c-new","(server, name)","<p>Creates a new ERBHandler on <code>server</code> that will evaluate and\nserve the ERB file <code>name</code>\n"],["new","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-c-new","(server, root, options={}, default=Config::FileHandler)","<p>Creates a FileHandler servlet on <code>server</code> that serves files\nstarting at directory <code>root</code>\n<p>If <code>options</code> is a  …\n"],["new","WEBrick::HTTPServlet::ProcHandler","classes/WEBrick/HTTPServlet/ProcHandler.html#method-c-new","(proc)",""],["new","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-c-new","(*args)",""],["new","WEBrick::HTTPVersion","classes/WEBrick/HTTPVersion.html#method-c-new","(version)",""],["new","WEBrick::Log","classes/WEBrick/Log.html#method-c-new","(log_file=nil, level=nil)","<p>Same as BasicLog#initialize\n<p>You can set the timestamp format through #time_format\n"],["new","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-c-new","()",""],["new","WIN32COMGen","classes/WIN32COMGen.html#method-c-new","(typelib)",""],["new","WIN32OLE","classes/WIN32OLE.html#method-c-new","(p1, p2 = v2, *args)","<p>Returns a new WIN32OLE object(OLE Automation object). The first argument\nserver specifies OLE Automation …\n"],["new","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-c-new","(*args)","<p>Returns OLE event object. The first argument specifies WIN32OLE object. The\nsecond argument specifies …\n"],["new","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-c-new","(p1, p2)","<p>Returns a new WIN32OLE_METHOD object which represents the information about\nOLE method. The first argument …\n"],["new","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-c-new","(p1, p2)",""],["new","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-c-new","(p1, p2)","<p>Returns a new WIN32OLE_TYPE object. The first argument <em>typelib</em>\nspecifies OLE type library name. The second …\n"],["new","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-c-new","(*args)","<p>Returns a new WIN32OLE_TYPELIB object.\n<p>The first argument <em>typelib</em>  specifies OLE type library name or …\n"],["new","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-c-new","(*args)","<p>Returns Ruby object wrapping OLE variant. The first argument specifies Ruby\nobject to convert OLE variant …\n"],["new","WeakRef","classes/WeakRef.html#method-c-new","(orig)","<p>Creates a weak reference to <code>orig</code>\n"],["new","Win32::Registry","classes/Win32/Registry.html#method-c-new","(hkey, parent, keyname, disposition)","<p>initialize\n"],["new","Win32::Registry::Error","classes/Win32/Registry/Error.html#method-c-new","(code)",""],["new","Win32::Registry::PredefinedKey","classes/Win32/Registry/PredefinedKey.html#method-c-new","(hkey, keyname)",""],["new","Win32::SSPI::Identity","classes/Win32/SSPI/Identity.html#method-c-new","(user = nil, domain = nil, password = nil)",""],["new","Win32::SSPI::NegotiateAuth","classes/Win32/SSPI/NegotiateAuth.html#method-c-new","(user = nil, domain = nil)","<p>Creates a new instance ready for authentication as the given user in the\ngiven domain. Defaults to current …\n"],["new","Win32::SSPI::SSPIResult","classes/Win32/SSPI/SSPIResult.html#method-c-new","(value)",""],["new","Win32::SSPI::SecurityBuffer","classes/Win32/SSPI/SecurityBuffer.html#method-c-new","(buffer = nil)",""],["new","Win32API","classes/Win32API.html#method-c-new","(dllname, func, import, export = \"0\", calltype = :stdcall)",""],["new","XMLRPC::Base64","classes/XMLRPC/Base64.html#method-c-new","(str, state = :dec)",""],["new","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-c-new","(class_delim=\".\")",""],["new","XMLRPC::CGIServer","classes/XMLRPC/CGIServer.html#method-c-new","(*a)",""],["new","XMLRPC::CGIServer","classes/XMLRPC/CGIServer.html#method-c-new","(*a)",""],["new","XMLRPC::Client","classes/XMLRPC/Client.html#method-c-new","(host=nil, path=nil, port=nil, proxy_host=nil, proxy_port=nil, user=nil, password=nil, use_ssl=nil, timeout=nil)","<p>Constructors ——————————————————————-\n"],["new","XMLRPC::Client::Proxy","classes/XMLRPC/Client/Proxy.html#method-c-new","(server, prefix, args=[], meth=:call, delim=\".\")",""],["new","XMLRPC::Create","classes/XMLRPC/Create.html#method-c-new","(xml_writer = nil)",""],["new","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-c-new","(year, month, day, hour, min, sec)",""],["new","XMLRPC::FaultException","classes/XMLRPC/FaultException.html#method-c-new","(faultCode, faultString)",""],["new","XMLRPC::Marshal","classes/XMLRPC/Marshal.html#method-c-new","( parser = nil, writer = nil )","<p>instance methods —————————-\n"],["new","XMLRPC::ModRubyServer","classes/XMLRPC/ModRubyServer.html#method-c-new","(*a)",""],["new","XMLRPC::Server","classes/XMLRPC/Server.html#method-c-new","(port=8080, host=\"127.0.0.1\", maxConnections=4, stdlog=$stdout, audit=true, debug=true, *a)",""],["new","XMLRPC::Service::BasicInterface","classes/XMLRPC/Service/BasicInterface.html#method-c-new","(prefix)",""],["new","XMLRPC::Service::Interface","classes/XMLRPC/Service/Interface.html#method-c-new","(prefix, &p)",""],["new","XMLRPC::Service::PublicInstanceMethodsInterface","classes/XMLRPC/Service/PublicInstanceMethodsInterface.html#method-c-new","(prefix)",""],["new","XMLRPC::WEBrickServlet","classes/XMLRPC/WEBrickServlet.html#method-c-new","(*a)",""],["new","XMLRPC::XMLParser::NQXMLStreamParser","classes/XMLRPC/XMLParser/NQXMLStreamParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::NQXMLTreeParser","classes/XMLRPC/XMLParser/NQXMLTreeParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::NQXMLTreeParser","classes/XMLRPC/XMLParser/NQXMLTreeParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::REXMLStreamParser","classes/XMLRPC/XMLParser/REXMLStreamParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::StreamParserMixin","classes/XMLRPC/XMLParser/StreamParserMixin.html#method-c-new","(*a)",""],["new","XMLRPC::XMLParser::XMLScanStreamParser","classes/XMLRPC/XMLParser/XMLScanStreamParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::XMLStreamParser","classes/XMLRPC/XMLParser/XMLStreamParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::XMLTreeParser","classes/XMLRPC/XMLParser/XMLTreeParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::XMLTreeParser","classes/XMLRPC/XMLParser/XMLTreeParser.html#method-c-new","()",""],["new","XMLRPC::XMLWriter::XMLParser","classes/XMLRPC/XMLWriter/XMLParser.html#method-c-new","()",""],["new","XMP","classes/XMP.html#method-c-new","(bind = nil)",""],["new","XMP::StringInputMethod","classes/XMP/StringInputMethod.html#method-c-new","()",""],["new","YAML::Store","classes/YAML/Store.html#method-c-new","( *o )","<p>Creates a new YAML::Store object, which will store data in\n<code>file_name</code>. If the file does not already exist, …\n"],["new","Zlib::Deflate","classes/Zlib/Deflate.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Arguments\n<p><code>level</code> &mdash; An Integer compression level between BEST_SPEED and BEST_COMPRESSION\n<p><code>windowBits</code> &mdash; An Integer …\n"],["new","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-c-new","(p1, p2 = {})","<p>Creates a GzipReader object associated with <code>io</code>. The GzipReader\nobject reads gzipped data from <code>io</code>, and …\n"],["new","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a GzipWriter object associated with <code>io</code>.\n<code>level</code> and <code>strategy</code> should be the same as the\narguments …\n"],["new","Zlib::Inflate","classes/Zlib/Inflate.html#method-c-new","(p1 = v1)","<p>Arguments\n<p><code>windowBits</code> &mdash; An Integer for the windowBits size. Should be in the range 8..15, larger\nvalues of …\n\n"],["new2","URI::FTP","classes/URI/FTP.html#method-c-new2","(user, password, host, port, path, typecode = nil, arg_check = true)","<p>alternate initialization Creates a new URI::FTP object.\n<p>Unlike build(), this method does not escape the …\n"],["new2","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-new2","(uri, proxy=nil, timeout=nil)",""],["new3","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-new3","(hash={})",""],["newRoom","Object","classes/Object.html#method-i-newRoom","(w)","<p>newRoom – This method is invoked whenever the mouse enters a room in the\nfloorplan.  It changes tags …\n"],["newRoom2","Object","classes/Object.html#method-i-newRoom2","(w)","<p>newRoom2 – This method is invoked whenever the mouse enters a room in the\nfloorplan.  It changes tags …\n"],["newWrapRegexp","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-newWrapRegexp","()",""],["newWrapRegexp=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-newWrapRegexp-3D","(val)",""],["new_alias_name","IRB::MethodExtender","classes/IRB/MethodExtender.html#method-i-new_alias_name","(name, prefix = \"__alias_of__\", postfix = \"__\")","<p>return #{prefix}#{name}#{postfix}&lt;num&gt;\n"],["new_cond","MonitorMixin","classes/MonitorMixin.html#method-i-new_cond","()","<p>Creates a new MonitorMixin::ConditionVariable associated with the receiver.\n"],["new_from_file","Tk::Winico","classes/Tk/Winico.html#method-c-new_from_file","(file_name)",""],["new_from_resource","Tk::Winico","classes/Tk/Winico.html#method-c-new_from_resource","(resource_name, file_name = nil)",""],["new_hash","TkVarAccess","classes/TkVarAccess.html#method-c-new_hash","(name, *args)",""],["new_hash","TkVariable","classes/TkVariable.html#method-c-new_hash","(val = {})",""],["new_hash","TkVariable","classes/TkVariable.html#method-c-new_hash","(val = {})",""],["new_master","MultiTkIp","classes/MultiTkIp.html#method-i-new_master","(safe=nil, keys={}, &blk)",""],["new_master","MultiTkIp","classes/MultiTkIp.html#method-i-new_master","(safe=nil, keys={}, &blk)",""],["new_master","MultiTkIp","classes/MultiTkIp.html#method-i-new_master","(safe=nil, keys={}, &blk)",""],["new_master","MultiTkIp","classes/MultiTkIp.html#method-i-new_master","(safe=nil, keys={}, &blk)",""],["new_menuspec","Tk::Menu","classes/Tk/Menu.html#method-c-new_menuspec","(menu_spec, parent = nil, tearoff = false, keys = nil)",""],["new_ntoh","IPAddr","classes/IPAddr.html#method-c-new_ntoh","(addr)","<p>Creates a new ipaddr containing the given network byte ordered string form\nof an IP address.\n"],["new_ostruct_member","OpenStruct","classes/OpenStruct.html#method-i-new_ostruct_member","(name)","<p>new_ostruct_member is used internally to defined properties on the\nOpenStruct. It does this by using …\n"],["new_proc_class","TkOptionDB","classes/TkOptionDB.html#method-c-new_proc_class","(klass, func, safe = 4, add = false, parent = nil, &b)","<p>define new proc class : If you want to modify the new class or create a new\nsubclass, you must do such …\n"],["new_proc_class","TkOptionDB","classes/TkOptionDB.html#method-c-new_proc_class","(klass, func, safe = 4, add = false, parent = nil, &b)","<p>define new proc class : If you want to modify the new class or create a new\nsubclass, you must do such …\n"],["new_proc_class","TkOptionDB","classes/TkOptionDB.html#method-c-new_proc_class","(klass, func, safe = 4, add = false, parent = nil, &b)","<p>define new proc class : If you want to modify the new class or create a new\nsubclass, you must do such …\n"],["new_proc_class_random","TkOptionDB","classes/TkOptionDB.html#method-c-new_proc_class_random","(klass, func, safe = 4, add = false, &b)",""],["new_proc_class_random","TkOptionDB","classes/TkOptionDB.html#method-c-new_proc_class_random","(klass, func, safe = 4, add = false, &b)",""],["new_proc_class_random","TkOptionDB","classes/TkOptionDB.html#method-c-new_proc_class_random","(klass, func, safe = 4, add = false, &b)",""],["new_safe_slave","MultiTkIp","classes/MultiTkIp.html#method-i-new_safe_slave","(safe=4, keys={}, &blk)",""],["new_safe_slave","MultiTkIp","classes/MultiTkIp.html#method-i-new_safe_slave","(safe=4, keys={}, &blk)",""],["new_safe_slave","MultiTkIp","classes/MultiTkIp.html#method-i-new_safe_slave","(safe=4, keys={}, &blk)",""],["new_safe_slave","MultiTkIp","classes/MultiTkIp.html#method-i-new_safe_slave","(safe=4, keys={}, &blk)",""],["new_scope","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-new_scope","(names)","<p>Create a new argument scope using the prerequisite argument names.\n"],["new_seed","Random","classes/Random.html#method-c-new_seed","()","<p>Returns arbitrary value for seed.\n"],["new_slave","MultiTkIp","classes/MultiTkIp.html#method-i-new_slave","(safe=nil, keys={}, &blk)",""],["new_slave","MultiTkIp","classes/MultiTkIp.html#method-i-new_slave","(safe=nil, keys={}, &blk)",""],["new_slave","MultiTkIp","classes/MultiTkIp.html#method-i-new_slave","(safe=nil, keys={}, &blk)",""],["new_slave","MultiTkIp","classes/MultiTkIp.html#method-i-new_slave","(safe=nil, keys={}, &blk)",""],["new_slice","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-new_slice","(text=None)",""],["new_start","Date","classes/Date.html#method-i-new_start","(p1 = v1)","<p>Duplicates self and resets its the day of calendar reform.\n<p>For example:\n\n<pre><code>d = Date.new(1582,10,15)\nd.new_start(Date::JULIAN) ...</code></pre>\n"],["new_with","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new_with","(uri, ref)",""],["new_with","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new_with","(uri, ref)",""],["new_with_name","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-new_with_name","(name, data, keys={})",""],["new_with_uri","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_uri","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_utf_backslash","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-new_with_utf_backslash","(str, enc = nil)",""],["new_with_value_if_need","RSS::Utils","classes/RSS/Utils.html#method-i-new_with_value_if_need","(klass, value)","<p>If <code>value</code> is an instance of class <code>klass</code>, return\nit, else create a new instance of <code>klass</code> with value\n<code>value</code> …\n"],["new_without_utf_backslash","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-new_without_utf_backslash","(str, enc = nil)",""],["newitem","TkTree","classes/TkTree.html#method-i-newitem","(itempath, keys = nil)",""],["newobj","Net::HTTP","classes/Net/HTTP.html#method-c-newobj","(address, port = nil, p_addr = nil, p_port = nil, p_user = nil, p_pass = nil)",""],["newobj","Net::HTTP","classes/Net/HTTP.html#method-c-newobj","(address, port = nil, p_addr = nil, p_port = nil, p_user = nil, p_pass = nil)",""],["next","Date","classes/Date.html#method-i-next","()","<p>Returns a date object denoting the following day.\n"],["next","Enumerator","classes/Enumerator.html#method-i-next","()","<p>Returns the next object in the enumerator, and move the internal position\nforward.  When the position …\n"],["next","Integer","classes/Integer.html#method-i-next","()","<p>Returns the <code>Integer</code> equal to <em>int</em> + 1.\n\n<pre><code>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n</code></pre>\n"],["next","Integer","classes/Integer.html#method-i-next","()","<p>Returns the <code>Integer</code> equal to <em>int</em> + 1.\n\n<pre><code>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n</code></pre>\n"],["next","Prime::EratosthenesGenerator","classes/Prime/EratosthenesGenerator.html#method-i-next","()",""],["next","Prime::Generator23","classes/Prime/Generator23.html#method-i-next","()",""],["next","Prime::OldCompatibility","classes/Prime/OldCompatibility.html#method-i-next","()",""],["next","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-next","()","<p>alias of <code>succ</code>.\n"],["next","Prime::TrialDivisionGenerator","classes/Prime/TrialDivisionGenerator.html#method-i-next","()",""],["next","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-next","( event )",""],["next","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-next","( event )",""],["next","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-i-next","( event )",""],["next","REXML::Validation::Optional","classes/REXML/Validation/Optional.html#method-i-next","( event )",""],["next","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-next","( event )",""],["next","REXML::Validation::ZeroOrMore","classes/REXML/Validation/ZeroOrMore.html#method-i-next","( event )",""],["next","String","classes/String.html#method-i-next","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["next","Symbol","classes/Symbol.html#method-i-next","()","<p>Same as <code>sym.to_s.succ.intern</code>.\n"],["next","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-next","()",""],["next","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-next","()",""],["next","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-next","()",""],["next","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-next","()",""],["next","TkManageFocus","classes/TkManageFocus.html#method-c-next","(win)",""],["next","TkTextMark","classes/TkTextMark.html#method-i-next","(index = nil)",""],["next","TkTextMark","classes/TkTextMark.html#method-i-next","(index = nil)",""],["next!","PiDigitSpigot","classes/PiDigitSpigot.html#method-i-next-21","()",""],["next!","String","classes/String.html#method-i-next-21","()","<p>Equivalent to <code>String#succ</code>, but modifies the receiver in place.\n"],["next!","Transformation","classes/Transformation.html#method-i-next-21","()",""],["nextNode","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-nextNode","()","<p>IXMLDOMNode nextNode get next node from iterator\n"],["nextNode","IXMLDOMNodeList","classes/IXMLDOMNodeList.html#method-i-nextNode","()","<p>IXMLDOMNode nextNode get next node from iterator\n"],["nextSibling","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXMLDOMText","classes/IXMLDOMText.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","IXTLRuntime","classes/IXTLRuntime.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["nextSibling","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nextSibling","()","<p>IXMLDOMNode nextSibling right sibling of the node\n"],["next_current","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-next_current","( event )",""],["next_day","Date","classes/Date.html#method-i-next_day","(p1 = v1)","<p>This method is equivalent to d + n.\n"],["next_element","REXML::Element","classes/REXML/Element.html#method-i-next_element","()","<p>Returns the next sibling that is an element, or nil if there is no Element\nsibling after this one\n\n<pre><code>doc ...</code></pre>\n"],["next_entry","Tk::Menu::TkInternalFunction","classes/Tk/Menu/TkInternalFunction.html#method-i-next_entry","(menu, delta)",""],["next_mark","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-next_mark","(index)",""],["next_menu","Tk::Menu::TkInternalFunction","classes/Tk/Menu/TkInternalFunction.html#method-i-next_menu","(menu, dir='next')","<p>These methods calls internal functions of Tcl/Tk. So, They may not work on\nyour Tcl/Tk.\n"],["next_month","Date","classes/Date.html#method-i-next_month","(p1 = v1)","<p>This method is equivalent to d &gt;&gt; n\n"],["next_sibling","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-next_sibling","()",""],["next_sibling=","REXML::Child","classes/REXML/Child.html#method-i-next_sibling-3D","( other )","<p>Sets the next sibling of this child.  This can be used to insert a child\nafter some other child.\n\n<pre><code>a = Element.new(&quot;a&quot;) ...</code></pre>\n"],["next_sibling_node","REXML::Node","classes/REXML/Node.html#method-i-next_sibling_node","()","<p>@return the next sibling (nil if unset)\n"],["next_square","Knights_Tour","classes/Knights_Tour.html#method-i-next_square","(square)","<p>Select the next square to move to. Returns -1 if there are no available\nsquares remaining that we can …\n"],["next_step","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-next_step","()",""],["next_to","Prime::EratosthenesSieve","classes/Prime/EratosthenesSieve.html#method-i-next_to","(n)","<p>returns the least odd prime number which is greater than <code>n</code>.\n"],["next_update","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-next_update","()",""],["next_update=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-next_update-3D","(p1)",""],["next_value","Seq","classes/Seq.html#method-i-next_value","()",""],["next_values","Enumerator","classes/Enumerator.html#method-i-next_values","()","<p>Returns the next object as an array in the enumerator, and move the\ninternal position forward.  When …\n"],["next_wait","ThreadsWait","classes/ThreadsWait.html#method-i-next_wait","(nonblock = nil)","<p>Waits until any of the specified threads has terminated, and returns the\none that does.\n<p>If there is no …\n"],["next_wait","ThreadsWait","classes/ThreadsWait.html#method-i-next_wait","(nonblock = nil)","<p>Waits until any of the specified threads has terminated, and returns the\none that does.\n<p>If there is no …\n"],["next_year","Date","classes/Date.html#method-i-next_year","(p1 = v1)","<p>This method is equivalent to d &gt;&gt; (n * 12)\n"],["nextrange","TkTextTag","classes/TkTextTag.html#method-i-nextrange","(first, last=None)",""],["nextrange","TkTextTag","classes/TkTextTag.html#method-i-nextrange","(first, last=None)",""],["nil?","NilClass","classes/NilClass.html#method-i-nil-3F","()","<p>call_seq:\n\n<pre><code>nil.nil?               -&gt; true</code></pre>\n<p>Only the object <em>nil</em> responds <code>true</code> to\n<code>nil?</code>.\n"],["nil?","Object","classes/Object.html#method-i-nil-3F","()","<p>call_seq:\n\n<pre><code>nil.nil?               -&gt; true\n&lt;anything_else&gt;.nil?   -&gt; false</code></pre>\n<p>Only the object <em>nil</em> responds  …\n"],["nkf","NKF","classes/NKF.html#method-c-nkf","(p1, p2)","<p>Convert <em>str</em> and return converted result. Conversion details are\nspecified by <em>opt</em> as String.\n\n<pre><code>require &#39;nkf&#39; ...\n</code></pre>\n"],["nl","Curses","classes/Curses.html#method-c-nl","()","<p>Enable the underlying display device to translate the return key into\nnewline on input, and whether it …\n"],["nlink","File::Stat","classes/File/Stat.html#method-i-nlink","()","<p>Returns the number of hard links to <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).nlink             #=&gt; 1\nFile.link(&quot;testfile&quot;, ...\n</code></pre>\n"],["nlsolve","Newton","classes/Newton.html#method-i-nlsolve","(f,x)",""],["nlst","Net::FTP","classes/Net/FTP.html#method-i-nlst","(dir = nil)","<p>Returns an array of filenames in the remote directory.\n"],["nm","Exports::Cygwin","classes/Exports/Cygwin.html#method-c-nm","()",""],["nocbreak","Curses","classes/Curses.html#method-c-nocbreak","()","<p>Put the terminal into normal mode (out of cbreak mode).\n<p>See Curses.cbreak for more detail.\n"],["nocrmode","Curses","classes/Curses.html#method-c-nocrmode","()","<p>Put the terminal into normal mode (out of cbreak mode).\n<p>See Curses.cbreak for more detail.\n"],["nodeFromID","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nodeFromID","(arg0)","<p>IXMLDOMNode nodeFromID retrieve node from it&#39;s ID\n\n<pre><code>BSTR arg0 --- idString [IN]</code></pre>\n"],["nodeFromID","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nodeFromID","(arg0)","<p>IXMLDOMNode nodeFromID retrieve node from it&#39;s ID\n\n<pre><code>BSTR arg0 --- idString [IN]</code></pre>\n"],["nodeFromID","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nodeFromID","(arg0)","<p>IXMLDOMNode nodeFromID retrieve node from it&#39;s ID\n\n<pre><code>BSTR arg0 --- idString [IN]</code></pre>\n"],["nodeName","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXMLDOMText","classes/IXMLDOMText.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","IXTLRuntime","classes/IXTLRuntime.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nodeName","()","<p>BSTR nodeName name of the node\n"],["nodeName","NQXML::Node","classes/NQXML/Node.html#method-i-nodeName","()",""],["nodeType","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXMLDOMText","classes/IXMLDOMText.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","IXTLRuntime","classes/IXTLRuntime.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nodeType","()","<p>DOMNodeType nodeType the node&#39;s type\n"],["nodeType","NQXML::Node","classes/NQXML/Node.html#method-i-nodeType","()",""],["nodeTypeString","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXMLDOMText","classes/IXMLDOMText.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","IXTLRuntime","classes/IXTLRuntime.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypeString","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nodeTypeString","()","<p>BSTR nodeTypeString the type of node in string form\n"],["nodeTypedValue","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXMLDOMText","classes/IXMLDOMText.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","IXTLRuntime","classes/IXTLRuntime.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nodeTypedValue","()","<p>VARIANT nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXMLDOMText","classes/IXMLDOMText.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","IXTLRuntime","classes/IXTLRuntime.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeTypedValue=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nodeTypedValue-3D","(arg0)","<p>VOID nodeTypedValue get the strongly typed value of the node\n"],["nodeValue","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXMLDOMText","classes/IXMLDOMText.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","IXTLRuntime","classes/IXTLRuntime.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nodeValue","()","<p>VARIANT nodeValue value stored in the node\n"],["nodeValue","NQXML::Node","classes/NQXML/Node.html#method-i-nodeValue","()",""],["nodeValue=","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXMLDOMText","classes/IXMLDOMText.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","IXTLRuntime","classes/IXTLRuntime.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["nodeValue=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-nodeValue-3D","(arg0)","<p>VOID nodeValue value stored in the node\n"],["node_export","Object::Syck::Emitter","classes/Object/Syck/Emitter.html#method-i-node_export","(p1)","<p>YAML::Syck::Emitter#node_export\n"],["node_import","Object::Syck::Resolver","classes/Object/Syck/Resolver.html#method-i-node_import","(p1)","<p>YAML::Syck::Resolver#node_import\n"],["node_text","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-node_text","( value, block = nil )","<p>Emit plain, normal flowing text\n"],["node_type","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-node_type","()",""],["node_type","REXML::Attribute","classes/REXML/Attribute.html#method-i-node_type","()",""],["node_type","REXML::Comment","classes/REXML/Comment.html#method-i-node_type","()",""],["node_type","REXML::DocType","classes/REXML/DocType.html#method-i-node_type","()",""],["node_type","REXML::Document","classes/REXML/Document.html#method-i-node_type","()",""],["node_type","REXML::Element","classes/REXML/Element.html#method-i-node_type","()",""],["node_type","REXML::Instruction","classes/REXML/Instruction.html#method-i-node_type","()",""],["node_type","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-node_type","()",""],["node_type","REXML::Text","classes/REXML/Text.html#method-i-node_type","()",""],["node_type","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-node_type","()",""],["nodelay=","Curses::Window","classes/Curses/Window.html#method-i-nodelay-3D","(p1)","<p>Causes Curses::Window.getch to be a non-blocking call.  If no input is\nready, getch returns ERR.\n<p>If disabled …\n"],["nodes","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-i-nodes","()",""],["nodes","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-nodes","(node, first=None, last=None)",""],["nodoc","RDoc::Stats::Verbose","classes/RDoc/Stats/Verbose.html#method-i-nodoc","(co)","<p>Returns a marker for RDoc::CodeObject <code>co</code> being undocumented\n"],["noecho","Curses","classes/Curses.html#method-c-noecho","()","<p>Disables characters typed by the user to be echoed by Curses.getch as they\nare typed.\n"],["noecho","Gem::MockGemUi::TTY","classes/Gem/MockGemUi/TTY.html#method-i-noecho","()",""],["noecho","IO","classes/IO.html#method-i-noecho","()","<p>Yields <code>self</code> with disabling echo back.\n\n<pre><code>STDIN.noecho(&amp;:gets)</code></pre>\n<p>will read and return a line without echo back. …\n"],["non_aliases","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-non_aliases","()","<p>Returns the classes and modules that are not constants aliasing another\nclass or module. For use by formatters …\n"],["non_nil_attributes","Gem::Specification","classes/Gem/Specification.html#method-c-non_nil_attributes","()","<p>Specification attributes that must be non-nil\n"],["none?","Enumerable","classes/Enumerable.html#method-i-none-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["none?","Gem::Requirement","classes/Gem/Requirement.html#method-i-none-3F","()",""],["none?","Gem::Requirement","classes/Gem/Requirement.html#method-i-none-3F","()",""],["nonl","Curses","classes/Curses.html#method-c-nonl","()","<p>Disable the underlying display device to translate the return key into\nnewline on input\n<p>See Curses.nl …\n"],["nonzero?","BigDecimal","classes/BigDecimal.html#method-i-nonzero-3F","()","<p>Returns self if the value is non-zero, nil otherwise.\n"],["nonzero?","Numeric","classes/Numeric.html#method-i-nonzero-3F","()","<p>Returns <code>self</code> if <em>num</em> is not zero, <code>nil</code>\notherwise. This behavior is useful when chaining comparisons:\n\n<pre><code>a = ...</code></pre>\n"],["nonzero?","TkVariable","classes/TkVariable.html#method-i-nonzero-3F","()",""],["nonzero?","TkVariable","classes/TkVariable.html#method-i-nonzero-3F","()",""],["noop","Net::FTP","classes/Net/FTP.html#method-i-noop","()","<p>Issues a NOOP command.\n<p>Does nothing except return a response.\n"],["noop","Net::IMAP","classes/Net/IMAP.html#method-i-noop","()","<p>Sends a NOOP command to the server. It does nothing.\n"],["noraw","Curses","classes/Curses.html#method-c-noraw","()","<p>Put the terminal out of raw mode.\n<p>see Curses.raw for more detail\n"],["norm","Newton","classes/Newton.html#method-i-norm","(fv,zero=0.0)",""],["norm","Vector","classes/Vector.html#method-i-norm","()",""],["normal?","Matrix","classes/Matrix.html#method-i-normal-3F","()","<p>Returns <code>true</code> is this is a normal matrix. Raises an error if\nmatrix is not square.\n"],["normalize","Gem::Specification","classes/Gem/Specification.html#method-i-normalize","()","<p>Normalize the list of files so that:\n<p>All file lists have redundancies removed.\n<p>Files referenced in the …\n"],["normalize","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-normalize","()","<p>VOID normalize collapse all adjacent text nodes in sub-tree\n"],["normalize","RDoc::Markup::Verbatim","classes/RDoc/Markup/Verbatim.html#method-i-normalize","()","<p>Collapses 3+ newlines into two newlines\n"],["normalize","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-normalize","( input, entities=nil, entity_filter=nil )","<p>Escapes all possible entities\n"],["normalize","REXML::Text","classes/REXML/Text.html#method-c-normalize","( input, doctype=nil, entity_filter=nil )","<p>Escapes all possible entities\n"],["normalize","Rake::Win32","classes/Rake/Win32.html#method-i-normalize","(path)","<p>Normalize a win32 path so that the slashes are all forward slashes.\n"],["normalize","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-normalize","(vec=None)",""],["normalize","URI::Generic","classes/URI/Generic.html#method-i-normalize","()","<p>Returns normalized URI\n"],["normalize","Vector","classes/Vector.html#method-i-normalize","()","<p>Returns a new vector with the same direction but with norm 1.\n\n<pre><code>v = Vector[5,8,2].normalize\n# =&gt; Vector[0.5184758473652127, ...\n</code></pre>\n"],["normalize!","URI::Generic","classes/URI/Generic.html#method-i-normalize-21","()","<p>Destructive version of #normalize\n"],["normalize_comment","RDoc::Text","classes/RDoc/Text.html#method-i-normalize_comment","(text)","<p>Strips hashes, expands tabs then flushes <code>text</code> to the left\n"],["normalize_path","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-normalize_path","(path)",""],["normalize_propname","Object","classes/Object.html#method-i-normalize_propname","(name)",""],["normalize_space","REXML::Functions","classes/REXML/Functions.html#method-c-normalize_space","( string=nil )","<p>UNTESTED\n"],["normalize_uri","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-normalize_uri","(uri)","<p>Normalize the URI by adding “http://” if it is missing.\n"],["normalize_yaml_input","Gem::Specification","classes/Gem/Specification.html#method-c-normalize_yaml_input","(input)","<p>Make sure the YAML specification is properly formatted with dashes\n"],["normalized","REXML::Entity","classes/REXML/Entity.html#method-i-normalized","()","<p>Returns the value of this entity unprocessed – raw.  This is the normalized\nvalue; that is, with all …\n"],["normalized_file_list","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-normalized_file_list","(relative_files, force_doc = false, exclude_pattern = nil)","<p>Given a list of files and directories, create a list of all the Ruby files\nthey contain.\n<p>If <code>force_doc</code> …\n"],["not","REXML::Functions","classes/REXML/Functions.html#method-c-not","( object )","<p>UNTESTED\n"],["not_after","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-not_after","()",""],["not_after=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-not_after-3D","(p1)",""],["not_available","Tk::Tcllib::Autoscroll","classes/Tk/Tcllib/Autoscroll.html#method-c-not_available","()",""],["not_available","Tk::Tcllib::Cursor","classes/Tk/Tcllib/Cursor.html#method-c-not_available","()",""],["not_available","Tk::Tcllib::Style","classes/Tk/Tcllib/Style.html#method-c-not_available","()",""],["not_before","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-not_before","()",""],["not_before=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-not_before-3D","(p1)",""],["not_modified?","WEBrick::HTTPServlet::DefaultFileHandler","classes/WEBrick/HTTPServlet/DefaultFileHandler.html#method-i-not_modified-3F","(req, res, mtime, etag)",""],["not_set_name","RSS::Maker::Atom::Entry::Channel::Generator","classes/RSS/Maker/Atom/Entry/Channel/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Categories::Category","classes/RSS/Maker/Atom/Feed/Channel/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Generator","classes/RSS/Maker/Atom/Feed/Channel/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Links::Link","classes/RSS/Maker/Atom/Feed/Channel/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Categories::Category","classes/RSS/Maker/Atom/Feed/Items/Item/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Links::Link","classes/RSS/Maker/Atom/Feed/Items/Item/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Categories::Category","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Generator","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Links::Link","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Logo","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Logo.html#method-c-not_set_name","()",""],["notation","REXML::DocType","classes/REXML/DocType.html#method-i-notation","(name)","<p>Retrieves a named notation. Only notations declared in the internal DTD\nsubset can be retrieved.\n<p>Method …\n"],["notationName","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-notationName","()","<p>BSTR notationName the name of the notation\n"],["notationdecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-notationdecl","(content)","<p>&lt;!NOTATION …&gt;\n"],["notationdecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-notationdecl","(content)","<p>&lt;!NOTATION …&gt;\n"],["notationdecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-notationdecl-3F","()","<p>Content: [ String text ]\n"],["notations","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-notations","()","<p>IXMLDOMNamedNodeMap notations a list of notations in the document\n"],["notations","REXML::DocType","classes/REXML/DocType.html#method-i-notations","()","<p>This method returns a list of notations that have been declared in the\n<em>internal</em> DTD subset. Notations …\n"],["notify","Rinda::NotifyTemplateEntry","classes/Rinda/NotifyTemplateEntry.html#method-i-notify","(ev)","<p>Called by TupleSpace to notify this NotifyTemplateEntry of a new event.\n"],["notify","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-notify","(event, tuple, sec=nil)","<p>Registers for notifications of <code>event</code>.  Returns a\nNotifyTemplateEntry. See NotifyTemplateEntry for examples …\n"],["notify","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-notify","(ev, tuple, sec=nil)","<p>Registers for notifications of event <code>ev</code> on the proxied\nTupleSpace. See TupleSpace#notify\n"],["notify","Shell","classes/Shell.html#method-c-notify","(*opts, &block)",""],["notify","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-notify","(*opts, &block)","<p>%pwd, %cwd -&gt; @pwd\n"],["notify","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-notify","(*opts, &block)","<p>ex)\n\n<pre><code>if you wish to output:\n   &quot;shell: job(#{@command}:#{@pid}) close pipe-out.&quot;\nthen\n   mes: &quot;job(%id) ...</code></pre>\n"],["notify","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-notify","(keyword)",""],["notify","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-notify","(target = nil)",""],["notify?","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-notify-3F","()",""],["notify?","IRB::Notifier::LeveledNotifier","classes/IRB/Notifier/LeveledNotifier.html#method-i-notify-3F","()",""],["notify?","IRB::Notifier::NoMsgNotifier","classes/IRB/Notifier/NoMsgNotifier.html#method-i-notify-3F","()",""],["notify_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-notify_cget","(win, pattern, option)",""],["notify_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-notify_cget_strict","(win, pattern, option)",""],["notify_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-notify_cget_tkstring","(win, pattern, option)",""],["notify_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-notify_configinfo","(win, pattern, slot=nil)",""],["notify_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-notify_configure","(win, pattern, slot, value=None)",""],["notify_observers","DRb::DRbObservable","classes/DRb/DRbObservable.html#method-i-notify_observers","(*arg)",""],["notify_observers","Observable","classes/Observable.html#method-i-notify_observers","(*arg)","<p>Notify observers of a change in state <strong>if</strong> this object&#39;s\nchanged state is <code>true</code>.\n<p>This will invoke the …\n"],["noutrefresh","Curses::Window","classes/Curses/Window.html#method-i-noutrefresh","()","<p>Refreshes the windows and lines.\n<p>Curses::Window.noutrefresh allows multiple updates with more efficiency …\n"],["now","DateTime","classes/DateTime.html#method-c-now","(p1 = v1)","<p>Creates a date-time object denoting the present time.\n<p>For example:\n\n<pre><code>DateTime.now              #=&gt; #&lt;DateTime: ...\n</code></pre>\n"],["now","Time","classes/Time.html#method-c-now","()","<p>Synonym for <code>Time.new</code>. Returns a <code>Time</code> object\ninitialized to the current system time.\n"],["nowrite","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-nowrite","()",""],["nowrite","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-nowrite","(value=nil)","<p>Get/set the nowrite flag controlling output from the FileUtils utilities. \nIf verbose is true, then the …\n"],["nread","IO","classes/IO.html#method-i-nread","()","<p>Returns number of bytes that can be read without blocking. Returns zero if\nno information available. …\n"],["nsec","Time","classes/Time.html#method-i-nsec","()","<p>Returns just the number of nanoseconds for <em>time</em>.\n\n<pre><code>t = Time.now        #=&gt; 2007-11-17 15:18:03 +0900\n&quot;%10.9f&quot; ...\n</code></pre>\n"],["ntop","IPAddr","classes/IPAddr.html#method-c-ntop","(addr)","<p>Convert a network byte ordered string form of an IP address into human\nreadable form.\n"],["null?","DL::CPtr","classes/DL/CPtr.html#method-i-null-3F","()","<p>Returns true if this is a null pointer.\n"],["null?","DL::CPtr","classes/DL/CPtr.html#method-i-null-3F","()","<p>Returns true if this is a null pointer.\n"],["num_of_mainwindows","TclTkLib","classes/TclTkLib.html#method-c-num_of_mainwindows","()",""],["num_or_nil","TkUtil","classes/TkUtil.html#method-i-num_or_nil","(p1)",""],["num_or_nil","TkUtil","classes/TkUtil.html#method-c-num_or_nil","(p1)",""],["num_or_str","TkUtil","classes/TkUtil.html#method-i-num_or_str","(p1)",""],["num_or_str","TkUtil","classes/TkUtil.html#method-c-num_or_str","(p1)",""],["num_waiting","Queue","classes/Queue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["num_waiting","SizedQueue","classes/SizedQueue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["number","REXML::Functions","classes/REXML/Functions.html#method-c-number","( object=nil )","<p>a string that consists of optional whitespace followed by an optional minus\nsign followed by a Number …\n"],["number","TkUtil","classes/TkUtil.html#method-c-number","(p1)",""],["number","TkUtil","classes/TkUtil.html#method-i-number","(p1)",""],["numerator","Complex","classes/Complex.html#method-i-numerator","()","<p>Returns the numerator.\n<p>For example:\n\n<pre><code>    1   2       3+4i  &lt;-  numerator\n    - + -i  -&gt;  ----\n    2   3 ...</code></pre>\n"],["numerator","Float","classes/Float.html#method-i-numerator","()","<p>Returns the numerator.  The result is machine dependent.\n<p>For example:\n\n<pre><code>n = 0.3.numerator    #=&gt; 5404319552844595 ...\n</code></pre>\n"],["numerator","Integer","classes/Integer.html#method-i-numerator","()","<p>Returns self.\n"],["numerator","Integer","classes/Integer.html#method-i-numerator","()","<p>Returns self.\n"],["numerator","Numeric","classes/Numeric.html#method-i-numerator","()","<p>Returns the numerator.\n"],["numerator","Rational","classes/Rational.html#method-i-numerator","()","<p>Returns the numerator.\n<p>For example:\n\n<pre><code>Rational(7).numerator        #=&gt; 7\nRational(7, 1).numerator     #=&gt; ...\n</code></pre>\n"],["numeric","TkVariable","classes/TkVariable.html#method-i-numeric","()",""],["numeric","TkVariable","classes/TkVariable.html#method-i-numeric","()",""],["numeric=","TkVariable","classes/TkVariable.html#method-i-numeric-3D","(val)",""],["numeric=","TkVariable","classes/TkVariable.html#method-i-numeric-3D","(val)",""],["numeric_element","TkVariable","classes/TkVariable.html#method-i-numeric_element","(*idxs)",""],["numeric_element","TkVariable","classes/TkVariable.html#method-i-numeric_element","(*idxs)",""],["numeric_type=","TkVariable","classes/TkVariable.html#method-i-numeric_type-3D","(val)",""],["numeric_type=","TkVariable","classes/TkVariable.html#method-i-numeric_type-3D","(val)",""],["numlist","TkVariable","classes/TkVariable.html#method-i-numlist","()",""],["numlist","TkVariable","classes/TkVariable.html#method-i-numlist","()",""],["numlist=","TkVariable","classes/TkVariable.html#method-i-numlist-3D","(val)",""],["numlist=","TkVariable","classes/TkVariable.html#method-i-numlist-3D","(val)",""],["numlist_element","TkVariable","classes/TkVariable.html#method-i-numlist_element","(*idxs)",""],["numlist_element","TkVariable","classes/TkVariable.html#method-i-numlist_element","(*idxs)",""],["numlist_type=","TkVariable","classes/TkVariable.html#method-i-numlist_type-3D","(val)",""],["numlist_type=","TkVariable","classes/TkVariable.html#method-i-numlist_type-3D","(val)",""],["object_address_group","PP::PPMethods","classes/PP/PPMethods.html#method-i-object_address_group","(obj, &block)",""],["object_class","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-object_class","()","<p>Returns the NormalClass “Object”, creating it if not found.\n<p>Records <code>self</code> as a location in “Object”. …\n"],["object_group","PP::PPMethods","classes/PP/PPMethods.html#method-i-object_group","(obj)","<p>A convenience method which is same as follows:\n\n<pre><code>group(1, &#39;#&lt;&#39; + obj.class.name, &#39;&gt;&#39;) { ... }</code></pre>\n"],["object_id","Object","classes/Object.html#method-i-object_id","()","<p>Returns an integer identifier for <em>obj</em>. The same number will be\nreturned on all calls to <code>id</code> for a given …\n"],["object_maker","Psych","classes/Psych.html#method-c-object_maker","(klass, hash)",""],["object_maker","Syck","classes/Syck.html#method-c-object_maker","( obj_class, val )","<p>Allocate blank object\n"],["object_maker","Syck","classes/Syck.html#method-c-object_maker","( obj_class, val )","<p>Allocate blank object\n"],["object_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-object_nl","()","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["object_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-object_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["observ_info","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-observ_info","()",""],["observs","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-observs","()",""],["oct","String","classes/String.html#method-i-oct","()","<p>Treats leading characters of <em>str</em> as a string of octal digits (with\nan optional sign) and returns the …\n"],["odd?","Bignum","classes/Bignum.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <em>big</em> is an odd number.\n"],["odd?","Fixnum","classes/Fixnum.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <em>fix</em> is an odd number.\n"],["odd?","Integer","classes/Integer.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <em>int</em> is an odd number.\n"],["odd?","Integer","classes/Integer.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <em>int</em> is an odd number.\n"],["off","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-off","()",""],["off","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-off","()",""],["off","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-c-off","(w)",""],["off","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-off","()",""],["off","Tracer","classes/Tracer.html#method-c-off","()","<p>Disable tracing\n"],["off_event","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-off_event","(p1 = v1)","<p>removes the callback of event.\n\n<pre><code>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;)\nev = WIN32OLE_EVENT.new(ie) ...</code></pre>\n"],["off_tags","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-off_tags","(res, item)","<p>Turns off tags for <code>item</code> on <code>res</code>\n"],["offset","MatchData","classes/MatchData.html#method-i-offset","(p1)","<p>Returns a two-element array containing the beginning and ending offsets of\nthe <em>n</em>th match. <em>n</em> can be a …\n"],["offset","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-offset","()",""],["offset=","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-offset-3D","(val)",""],["offset_momentum","Object","classes/Object.html#method-i-offset_momentum","(bodies)",""],["offset_vtbl","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-offset_vtbl","()","<p>Returns the offset ov VTBL.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...</code></pre>\n"],["oflush","IO","classes/IO.html#method-i-oflush","()","<p>Flushes output buffer in kernel.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["oid","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-oid","()",""],["oid","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-oid","()",""],["oid=","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-oid-3D","(p1)",""],["oid=","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-oid-3D","(p1)",""],["ok?","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-ok-3F","()","<p>Are all the dependencies in the list satisfied?\n"],["ok?","Win32::SSPI::SSPIResult","classes/Win32/SSPI/SSPIResult.html#method-i-ok-3F","()",""],["ok_to_remove?","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-ok_to_remove-3F","(full_name)","<p>Is is ok to remove a gemspec from the dependency list?\n<p>If removing the gemspec creates breaks a currently …\n"],["old","IRB::IrbLoader","classes/IRB/IrbLoader.html#method-i-old","()",""],["old_enc=","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-old_enc-3D","( enc )",""],["old_inspect","Enumerator","classes/Enumerator.html#method-i-old_inspect","()",""],["old_to_s","Array","classes/Array.html#method-i-old_to_s","()",""],["old_to_s","FalseClass","classes/FalseClass.html#method-i-old_to_s","()",""],["ole_activex_initialize","WIN32OLE","classes/WIN32OLE.html#method-i-ole_activex_initialize","()","<p>Initialize WIN32OLE object(ActiveX Control) by calling\nIPersistMemory::InitNew.\n<p>Before calling OLE method, …\n"],["ole_classes","WIN32COMGen","classes/WIN32COMGen.html#method-i-ole_classes","(typelib)",""],["ole_classes","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-c-ole_classes","(p1)","<p>Returns array of WIN32OLE_TYPE objects defined by the <em>typelib</em> type\nlibrary. This method will be OBSOLETE …\n"],["ole_classes","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-ole_classes","()",""],["ole_free","WIN32OLE","classes/WIN32OLE.html#method-c-ole_free","(p1)","<p>Invokes Release method of Dispatch interface of WIN32OLE object. You should\nnot use this method because …\n"],["ole_free","WIN32OLE","classes/WIN32OLE.html#method-i-ole_free","()","<p>invokes Release method of Dispatch interface of WIN32OLE object. Usually,\nyou do not need to call this …\n"],["ole_func_methods","WIN32OLE","classes/WIN32OLE.html#method-i-ole_func_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (settable) of WIN32OLE …\n"],["ole_get_methods","WIN32OLE","classes/WIN32OLE.html#method-i-ole_get_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (gettable) of WIN32OLE …\n"],["ole_initialize","WIN32OLE","classes/WIN32OLE.html#method-c-ole_initialize","()","<p>:nodoc\n"],["ole_method","WIN32OLE","classes/WIN32OLE.html#method-i-ole_method","(p1)","<p>Returns WIN32OLE_METHOD object corresponding with method specified by 1st\nargument.\n\n<pre><code>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...</code></pre>\n"],["ole_method_help","WIN32OLE","classes/WIN32OLE.html#method-i-ole_method_help","(p1)",""],["ole_methods","WIN32OLE","classes/WIN32OLE.html#method-i-ole_methods","()","<p>Returns the array of WIN32OLE_METHOD object. The element is OLE method of\nWIN32OLE object.\n\n<pre><code>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...</code></pre>\n"],["ole_methods","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-ole_methods","()","<p>Returns array of WIN32OLE_METHOD objects which represent OLE method defined\nin OLE type library.\n\n<pre><code>tobj ...</code></pre>\n"],["ole_obj_help","WIN32OLE","classes/WIN32OLE.html#method-i-ole_obj_help","()",""],["ole_put_methods","WIN32OLE","classes/WIN32OLE.html#method-i-ole_put_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (settable) of WIN32OLE …\n"],["ole_query_interface","WIN32OLE","classes/WIN32OLE.html#method-i-ole_query_interface","(p1)","<p>Returns WIN32OLE object for a specific dispatch or dual interface specified\nby iid.\n\n<pre><code>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;) ...</code></pre>\n"],["ole_reference_count","WIN32OLE","classes/WIN32OLE.html#method-c-ole_reference_count","(p1)","<p>Returns reference counter of Dispatch interface of WIN32OLE object. You\nshould not use this method because …\n"],["ole_respond_to?","WIN32OLE","classes/WIN32OLE.html#method-i-ole_respond_to-3F","(p1)","<p>Returns true when OLE object has OLE method, otherwise returns false.\n\n<pre><code>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;) ...</code></pre>\n"],["ole_show_help","WIN32OLE","classes/WIN32OLE.html#method-c-ole_show_help","(p1, p2 = v2)","<p>Displays helpfile. The 1st argument specifies WIN32OLE_TYPE object or\nWIN32OLE_METHOD object or helpfile. …\n"],["ole_type","WIN32OLE","classes/WIN32OLE.html#method-i-ole_type","()","<p>Returns WIN32OLE_TYPE object.\n\n<pre><code>excel = WIN32OLE.new(&#39;Excel.Application&#39;)\ntobj = excel.ole_type</code></pre>\n"],["ole_type","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-ole_type","()","<p>Returns OLE type of WIN32OLE_PARAM object(parameter of OLE method).\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["ole_type","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-ole_type","()","<p>returns type of OLE class.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;) ...</code></pre>\n"],["ole_type","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-ole_type","()","<p>Returns OLE type string.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...</code></pre>\n"],["ole_type_detail","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-ole_type_detail","()","<p>Returns detail information of type of argument.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["ole_type_detail","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-ole_type_detail","()","<p>Returns detail information of type. The information is array of type.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;DirectX ...</code></pre>\n"],["ole_typelib","WIN32OLE","classes/WIN32OLE.html#method-i-ole_typelib","()","<p>Returns the WIN32OLE_TYPELIB object. The object represents the type library\nwhich contains the WIN32OLE …\n"],["ole_typelib","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-ole_typelib","()","<p>Returns the WIN32OLE_TYPELIB object which is including the WIN32OLE_TYPE\nobject. If it is not found, …\n"],["ole_types","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-ole_types","()","<p>Returns the type library file path.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...</code></pre>\n"],["ole_uninitialize","WIN32OLE","classes/WIN32OLE.html#method-c-ole_uninitialize","()","<p>:nodoc\n"],["on","OptionParser","classes/OptionParser.html#method-i-on","(*opts, &block)","<p>Add option switch and handler. See #make_switch for an explanation of\nparameters.\n"],["on","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-on","()",""],["on","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-on","()",""],["on","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-c-on","(w, keys={})",""],["on","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-on","()",""],["on","Tracer","classes/Tracer.html#method-c-on","()","<p>Start tracing\n<p>Example\n\n<pre><code>Tracer.on\n# code to trace here\nTracer.off</code></pre>\n"],["onNavigateComplete2","IEHandler","classes/IEHandler.html#method-i-onNavigateComplete2","(pdisp, url)",""],["onOnQuit","IEHandler","classes/IEHandler.html#method-i-onOnQuit","()",""],["on_attr_charref","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attr_charref","(code)",""],["on_attr_charref_hex","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attr_charref_hex","(code)",""],["on_attr_entityref","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attr_entityref","(ref)",""],["on_attr_value","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attr_value","(str)",""],["on_attribute","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attribute","(name)",""],["on_cdata","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_cdata","(str)",""],["on_chardata","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_chardata","(str)",""],["on_charref","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_charref","(code)",""],["on_charref","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_charref","(code)",""],["on_charref_hex","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_charref_hex","(code)",""],["on_charref_hex","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_charref_hex","(code)",""],["on_comment","CommentStripper","classes/CommentStripper.html#method-i-on_comment","(token, data)",""],["on_comment","Ruby2HTML","classes/Ruby2HTML.html#method-i-on_comment","(tok, f)",""],["on_curve?","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-on_curve-3F","()",""],["on_default","CommentStripper","classes/CommentStripper.html#method-i-on_default","(event, token, data)",""],["on_default","Ruby2HTML","classes/Ruby2HTML.html#method-i-on_default","(event, tok, f)",""],["on_entityref","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_entityref","(ref)",""],["on_entityref","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_entityref","(ent)",""],["on_etag","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_etag","(name)",""],["on_event","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-on_event","(*args)","<p>Defines the callback event. If argument is omitted, this method defines the\ncallback of all events.  …\n"],["on_event_with_outargs","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-on_event_with_outargs","(*args)","<p>Defines the callback of event. If you want modify argument in callback, you\ncould use this method instead …\n"],["on_head","OptionParser","classes/OptionParser.html#method-i-on_head","(*opts, &block)","<p>Add option switch like with #on, but at head of summary.\n"],["on_kw","Ruby2HTML","classes/Ruby2HTML.html#method-i-on_kw","(tok, f)",""],["on_screen","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-on_screen","(id, x, y)",""],["on_stag","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_stag","(name)",""],["on_stag_end","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_stag_end","(name)",""],["on_stag_end","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_stag_end","(name)",""],["on_stag_end_empty","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_stag_end_empty","(name)",""],["on_stag_end_empty","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_stag_end_empty","(name)",""],["on_tags","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-on_tags","(res, item)","<p>Turns on tags for <code>item</code> on <code>res</code>\n"],["on_tail","OptionParser","classes/OptionParser.html#method-i-on_tail","(*opts, &block)","<p>Add option switch like with #on, but at tail of summary.\n"],["on_tstring_beg","Ruby2HTML","classes/Ruby2HTML.html#method-i-on_tstring_beg","(tok, f)",""],["on_tstring_end","Ruby2HTML","classes/Ruby2HTML.html#method-i-on_tstring_end","(tok, f)",""],["on_xmldecl_encoding","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_xmldecl_encoding","(str)",""],["on_xmldecl_end","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_xmldecl_end","()",""],["on_xmldecl_standalone","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_xmldecl_standalone","(str)",""],["on_xmldecl_version","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_xmldecl_version","(str)",""],["ondataavailable","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-ondataavailable","()","<p>HRESULT ondataavailable EVENT in XMLDOMDocumentEvents\n"],["ondataavailable","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-ondataavailable","()","<p>HRESULT ondataavailable EVENT in XMLDOMDocumentEvents\n"],["ondataavailable=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-ondataavailable-3D","(arg0)","<p>VOID ondataavailable register an ondataavailable event handler\n"],["ondataavailable=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-ondataavailable-3D","(arg0)","<p>VOID ondataavailable register an ondataavailable event handler\n"],["ondataavailable=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-ondataavailable-3D","(arg0)","<p>VOID ondataavailable register an ondataavailable event handler\n"],["one","Function","classes/Function.html#method-i-one","()",""],["one?","Enumerable","classes/Enumerable.html#method-i-one-3F","()","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block returns …\n"],["ongoing_visibility=","RDoc::Context","classes/RDoc/Context.html#method-i-ongoing_visibility-3D","(visibility)","<p>Changes the visibility for new methods to <code>visibility</code>\n"],["onreadystatechange","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-onreadystatechange","()","<p>HRESULT onreadystatechange EVENT in XMLDOMDocumentEvents\n"],["onreadystatechange","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-onreadystatechange","()","<p>HRESULT onreadystatechange EVENT in XMLDOMDocumentEvents\n"],["onreadystatechange=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-onreadystatechange-3D","(arg0)","<p>VOID onreadystatechange register a readystatechange event handler\n"],["onreadystatechange=","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-onreadystatechange-3D","(arg0)","<p>VOID onreadystatechange Register a complete event handler\n"],["onreadystatechange=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-onreadystatechange-3D","(arg0)","<p>VOID onreadystatechange register a readystatechange event handler\n"],["onreadystatechange=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-onreadystatechange-3D","(arg0)","<p>VOID onreadystatechange register a readystatechange event handler\n"],["onreadystatechange=","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-onreadystatechange-3D","(arg0)","<p>VOID onreadystatechange Register a complete event handler\n"],["onsig","Object","classes/Object.html#method-i-onsig","(sig)",""],["ontransformnode=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-ontransformnode-3D","(arg0)","<p>VOID ontransformnode register an ontransformnode event handler\n"],["ontransformnode=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-ontransformnode-3D","(arg0)","<p>VOID ontransformnode register an ontransformnode event handler\n"],["ontransformnode=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-ontransformnode-3D","(arg0)","<p>VOID ontransformnode register an ontransformnode event handler\n"],["opaque=","URI::Generic","classes/URI/Generic.html#method-i-opaque-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["open","Board","classes/Board.html#method-i-open","(x=@cx,y=@cy)",""],["open","CSV","classes/CSV.html#method-c-open","(*args)","<p>This method opens an IO object, and wraps that with CSV.  This is intended\nas the primary interface for …\n"],["open","DBM","classes/DBM.html#method-c-open","(*args)","<p>Open a dbm database and yields it if a block is given. See also\n<code>DBM.new</code>.\n"],["open","DRb::DRbProtocol","classes/DRb/DRbProtocol.html#method-c-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration\n<code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-c-open","(uri, config)",""],["open","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-c-open","(uri, config)","<p>Open a client connection to <code>uri</code> using configuration\n<code>config</code>.\n"],["open","DRb::DRbUNIXSocket","classes/DRb/DRbUNIXSocket.html#method-c-open","(uri, config)",""],["open","DRb::HTTP0","classes/DRb/HTTP0.html#method-c-open","(uri, config)",""],["open","Dir","classes/Dir.html#method-c-open","(*args)","<p>With no block, <code>open</code> is a synonym for <code>Dir::new</code>. If\na block is present, it is passed <em>aDir</em> as a parameter. …\n"],["open","File","classes/File.html#method-c-open","(*args)","<p>With no associated block, <code>File.open</code> is a synonym for File.new.\nIf the optional code block is given, it …\n"],["open","GDBM","classes/GDBM.html#method-c-open","(*args)","<p>If called without a block, this is synonymous to GDBM::new. If a block is\ngiven, the new GDBM instance …\n"],["open","Gem::Package","classes/Gem/Package.html#method-c-open","(io, mode = \"r\", signer = nil, &block)","<p>FIX: zenspider said: does it really take an IO? passed to a method called\nopen?!? that seems stupid. …\n"],["open","Gem::Package::TarInput","classes/Gem/Package/TarInput.html#method-c-open","(io, security_policy = nil, &block)",""],["open","Gem::Package::TarOutput","classes/Gem/Package/TarOutput.html#method-c-open","(io, signer = nil)","<p>Creates a new TarOutput which will yield a TarWriter object for the\ndata.tar.gz portion of a gem-format …\n"],["open","IO","classes/IO.html#method-c-open","(*args)","<p>With no associated block, <code>IO.open</code> is a synonym for IO.new. If\nthe optional code block is given, it will …\n"],["open","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-open","(arg0, arg1, arg2=nil, arg3=nil, arg4=nil)","<p>VOID open Open HTTP connection\n\n<pre><code>BSTR arg0 --- bstrMethod [IN]\nBSTR arg1 --- bstrUrl [IN]\nVARIANT arg2 --- ...</code></pre>\n"],["open","Iconv","classes/Iconv.html#method-c-open","(p1, p2, p3 = v3)","<p>Equivalent to Iconv.new except that when it is called with a block, it\nyields with the new instance and …\n"],["open","Kernel","classes/Kernel.html#method-c-open","(*args)","<p>Creates an <code>IO</code> object connected to the given stream, file, or\nsubprocess.\n<p>If <em>path</em> does not start with a …\n"],["open","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-open","(arg0, arg1, arg2=nil, arg3=nil, arg4=nil)","<p>VOID open Open HTTP connection\n\n<pre><code>BSTR arg0 --- bstrMethod [IN]\nBSTR arg1 --- bstrUrl [IN]\nVARIANT arg2 --- ...</code></pre>\n"],["open","Net::FTP","classes/Net/FTP.html#method-c-open","(host, user = nil, passwd = nil, acct = nil)","<p>A synonym for <code>FTP.new</code>, but with a mandatory host parameter.\n<p>If a block is given, it is passed the <code>FTP</code> …\n"],["open","OpenURI::OpenRead","classes/OpenURI/OpenRead.html#method-i-open","(*rest, &block)","<p>OpenURI::OpenRead#open provides `open&#39; for URI::HTTP and URI::FTP.\n<p>OpenURI::OpenRead#open takes optional …\n"],["open","PTY","classes/PTY.html#method-c-open","()","<p>Allocates a pty (pseudo-terminal).\n<p>In the non-block form, returns a two element array, <code>[master_io,\nslave_file</code> …\n"],["open","Pathname","classes/Pathname.html#method-i-open","(p1 = v1, p2 = v2, p3 = v3)","<p>See <code>File.open</code>.  Opens the file for reading or writing.\n"],["open","Resolv::DNS","classes/Resolv/DNS.html#method-c-open","(*args)","<p>Creates a new DNS resolver.  See Resolv::DNS.new for argument details.\n<p>Yields the created DNS resolver …\n"],["open","RubyVM::VPATH","classes/RubyVM/VPATH.html#method-i-open","(*args)",""],["open","SDBM","classes/SDBM.html#method-c-open","(*args)",""],["open","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-open","(path, mode = nil, perm = 0666, &b)","<p>CommandProcessor#open(path, mode)\n\n<pre><code>  path:   String\n  mode:   String\n  return: File or Dir\nSame as:\n  File#open ...</code></pre>\n"],["open","StringIO","classes/StringIO.html#method-c-open","(*args)","<p>Equivalent to StringIO.new except that when it is called with a block, it\nyields with the new instance …\n"],["open","Syslog","classes/Syslog.html#method-c-open","(p1 = v1, p2 = v2, p3 = v3)","<p>Open the syslog facility. Raises a runtime exception if it is already open.\n<p>Can be called with or without …\n"],["open","Tempfile","classes/Tempfile.html#method-i-open","()","<p>Opens or reopens the file with mode “r+”.\n"],["open","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-c-open","(printer)",""],["open","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-open","(*tags)",""],["open","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-open","()",""],["open","Tk::MacResource","classes/Tk/MacResource.html#method-c-open","(fname, access=nil)",""],["open","Win32::Registry","classes/Win32/Registry.html#method-c-open","(hkey, subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED)","<p>— Registry.open(key, subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED)\n<p>— Registry.open(key, subkey, …\n"],["open","Win32::Registry","classes/Win32/Registry.html#method-i-open","(subkey, desired = KEY_READ, opt = REG_OPTION_RESERVED, &blk)","<p>Same as Win32::Registry.open (self, subkey, desired, opt)\n"],["open","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> as a gzipped file, and\nreturns a GzipReader object associated with …\n"],["open","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> for writing gzip compressed\ndata, and returns a GzipWriter object …\n"],["open!","Syslog","classes/Syslog.html#method-c-open-21","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["open?","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-open-3F","(node)",""],["open?","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-open-3F","()",""],["open?","Win32::Registry","classes/Win32/Registry.html#method-i-open-3F","()","<p>Returns if key is not closed.\n"],["open_file","Object","classes/Object.html#method-i-open_file","(canvas, fname)","<p>define methods for menu\n"],["open_message_stream","Net::SMTP","classes/Net/SMTP.html#method-i-open_message_stream","(from_addr, *to_addrs)","<p>Opens a message writer stream and gives it to the block. The stream is\nvalid only in the block, and has …\n"],["open_message_stream","Net::SMTP","classes/Net/SMTP.html#method-i-open_message_stream","(from_addr, *to_addrs)","<p>Opens a message writer stream and gives it to the block. The stream is\nvalid only in the block, and has …\n"],["open_recurse","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-open_recurse","(*tags)",""],["open_recurse","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-open_recurse","()",""],["open_server","DRb::DRbProtocol","classes/DRb/DRbProtocol.html#method-c-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with\nconfiguration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-c-open_server","(uri, config)",""],["open_server","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-c-open_server","(uri, config)","<p>Open a server listening for connections at <code>uri</code> using\nconfiguration <code>config</code>.\n"],["open_server","DRb::DRbUNIXSocket","classes/DRb/DRbUNIXSocket.html#method-c-open_server","(uri, config)",""],["open_server","DRb::HTTP0","classes/DRb/HTTP0.html#method-c-open_server","(uri, config)",""],["open_server_inaddr_any","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-c-open_server_inaddr_any","(host, port)",""],["open_tree","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-open_tree","(node, recurse=None)",""],["open_tree","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-open_tree","(recurse=None)",""],["open_uri_or_path","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-open_uri_or_path","(uri, last_modified = nil, head = false, depth = 0)","<p>Read the data from the (source based) URI, but if it is a file:// URI, read\nfrom the filesystem instead. …\n"],["opendir","Pathname","classes/Pathname.html#method-i-opendir","()","<p>See <code>Dir.open</code>.\n"],["opened?","Syslog","classes/Syslog.html#method-c-opened-3F","()","<p>Returns true if the syslog is open.\n"],["opt_c","Cal","classes/Cal.html#method-i-opt_c","(arg=DEFAULT_START)",""],["opt_j","Cal","classes/Cal.html#method-i-opt_j","(flag=false)",""],["opt_m","Cal","classes/Cal.html#method-i-opt_m","(flag=false)",""],["opt_t","Cal","classes/Cal.html#method-i-opt_t","(flag=false)",""],["opt_y","Cal","classes/Cal.html#method-i-opt_y","(flag=false)",""],["optionButton1","Object","classes/Object.html#method-i-optionButton1","(w, x, y)",""],["optionButton1_2","Object","classes/Object.html#method-i-optionButton1_2","(w, x, y)",""],["optionLeave1","Object","classes/Object.html#method-i-optionLeave1","(w, x, y)",""],["optionMenu","Object","classes/Object.html#method-i-optionMenu","(menubutton, varName, firstValue, *rest)",""],["optionMotion1","Object","classes/Object.html#method-i-optionMotion1","(w, x, y)",""],["optionRelease1","Object","classes/Object.html#method-i-optionRelease1","(w, x, y)",""],["option_list","RDoc::Task","classes/RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["option_methods","TkComposite","classes/TkComposite.html#method-i-option_methods","(*opts)",""],["optional?","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-optional-3F","()","<p>Returns true if argument is optional.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;) ...</code></pre>\n"],["options","Net::HTTP","classes/Net/HTTP.html#method-i-options","(path, initheader = nil)","<p>Sends a OPTIONS request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["options","Net::HTTP","classes/Net/HTTP.html#method-i-options","(path, initheader = nil)","<p>Sends a OPTIONS request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["options","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-options","()","<p>Actual OptionParser object, automatically created if nonexistent.\n<p>If called with a block, yields the  …\n"],["options","Rake::Application","classes/Rake/Application.html#method-i-options","()","<p>Application options from the command line\n"],["options","Rake::Application","classes/Rake/Application.html#method-i-options","()","<p>Application options from the command line\n"],["options","Regexp","classes/Regexp.html#method-i-options","()","<p>Returns the set of bits corresponding to the options used when creating\nthis Regexp (see <code>Regexp::new</code> …\n"],["options","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-options","( opt = nil )",""],["options","Syslog","classes/Syslog.html#method-c-options","()","<p>Returns the options bitmask used in the last call to open()\n"],["options=","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-options-3D","(opt)","<p>Sets OptionParser object, when <code>opt</code> is <code>false</code> or\n<code>nil</code>, methods OptionParser::Arguable#options and\nOptionParser::Arguable#options= …\n"],["options=","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-options-3D","( opt )",""],["optname","Socket::Option","classes/Socket/Option.html#method-i-optname","()","<p>returns the socket option name as an integer.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).optname ...</code></pre>\n"],["ord","Integer","classes/Integer.html#method-i-ord","()","<p>Returns the int itself.\n\n<pre><code>?a.ord    #=&gt; 97\n</code></pre>\n<p>This method is intended for compatibility to character constant …\n"],["ord","Integer","classes/Integer.html#method-i-ord","()","<p>Returns the int itself.\n\n<pre><code>?a.ord    #=&gt; 97\n</code></pre>\n<p>This method is intended for compatibility to character constant …\n"],["ord","String","classes/String.html#method-i-ord","()","<p>Return the <code>Integer</code> ordinal of a one-character string.\n\n<pre><code>&quot;a&quot;.ord         #=&gt; 97\n</code></pre>\n"],["order","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-order","()","<p>See the OpenSSL documentation for EC_GROUP_get_order()\n"],["order","OptionParser","classes/OptionParser.html#method-i-order","(*argv, &block)","<p>Parses command line arguments <code>argv</code> in order. When a block is\ngiven, each non-option argument is yielded. …\n"],["order!","OptionParser","classes/OptionParser.html#method-i-order-21","(argv = default_argv, &nonopt)","<p>Same as #order, but removes switches destructively.\n"],["order!","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-order-21","(&blk)","<p>Parses <code>self</code> destructively in order and returns\n<code>self</code> containing the rest arguments left unparsed.\n"],["ordering=","GetoptLong","classes/GetoptLong.html#method-i-ordering-3D","(ordering)","<p>Set the handling of the ordering of options and arguments. A RuntimeError\nis raised if option processing …\n"],["ordinal","Date","classes/Date.html#method-c-ordinal","(p1 = v1, p2 = v2, p3 = v3)","<p>Creates a date object denoting the given ordinal date.\n<p>The day of year should be a negative or a positive …\n"],["ordinal","DateTime","classes/DateTime.html#method-c-ordinal","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)","<p>Creates a date-time object denoting the given ordinal date.\n<p>For example:\n\n<pre><code>DateTime.ordinal(2001,34) #=&gt; ...\n</code></pre>\n"],["org_initialize","Thread","classes/Thread.html#method-i-org_initialize","(*arg, &block)",""],["orig_meta_vars","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-orig_meta_vars","()",""],["orig_name","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-orig_name","()","<p>Returns original filename recorded in the gzip file header, or\n<code>nil</code> if original filename is not present. …\n"],["orig_name=","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-orig_name-3D","(p1)","<p>Specify the original name (<code>str</code>) in the gzip header.\n"],["orig_parse","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-orig_parse","(socket=nil)",""],["orig_parse_uri","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-orig_parse_uri","(str, scheme=\"http\")",""],["original_dir","Rake","classes/Rake.html#method-i-original_dir","()","<p>Return the original directory where the Rake application was started.\n"],["orthogonal?","Matrix","classes/Matrix.html#method-i-orthogonal-3F","()","<p>Returns <code>true</code> is this is an orthogonal matrix Raises an error\nif matrix is not square.\n"],["os_code","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-os_code","()","<p>Returns OS code number recorded in the gzip file header.\n"],["other_elements","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-other_elements","()",""],["out","CGI","classes/CGI.html#method-i-out","(options = \"text/html\")","<p>Print an HTTP header and body to $DEFAULT_OUTPUT ($&gt;)\n<p><code>content_type_string</code> &mdash; If a string is passed, it …\n"],["out","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-out","(dev = STDOUT, &block)","<p>internal commands\n"],["out","SimpleTupleSpace","classes/SimpleTupleSpace.html#method-i-out","(key, obj)",""],["out","TupleSpace","classes/TupleSpace.html#method-i-out","(*tuples)",""],["out_of_line?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-out_of_line-3F","()",""],["outdated","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-outdated","()","<p>Returns an Array of Gem::Specifications that are not up to date.\n"],["outdated","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-outdated","()","<p>Returns an Array of Gem::Specifications that are not up to date.\n"],["outdated","Gem::Specification","classes/Gem/Specification.html#method-c-outdated","()","<p>Return a list of all outdated specifications. This method is HEAVY as it\nmust go fetch specifications …\n"],["output","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-output","(*args)",""],["output","Exports","classes/Exports.html#method-c-output","(output = $output, &block)",""],["output","Gem::MockGemUi","classes/Gem/MockGemUi.html#method-i-output","()",""],["output","PrettyPrint::Breakable","classes/PrettyPrint/Breakable.html#method-i-output","(out, output_width)",""],["output","PrettyPrint::Text","classes/PrettyPrint/Text.html#method-i-output","(out, output_width)",""],["output","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-output","(file=nil, keys={})",""],["output=","Object","classes/Object.html#method-c-output-3D","(output)",""],["output=","Readline","classes/Readline.html#method-c-output-3D","(p1)","<p>Specifies a File object <code>output</code> that is output stream for\nReadline.readline method.\n<p>Raises SecurityError …\n"],["output?","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-output-3F","()","<p>Returns true if argument is output.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Internet Controls&#39;, &#39;DWebBrowserEvents&#39;) ...</code></pre>\n"],["output_encoding=","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-output_encoding-3D","(enc)",""],["output_flag_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-output_flag_file","(op_dir)","<p>Return the path name of the flag file in an output directory.\n"],["output_path","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-i-output_path","(fn)",""],["output_value","IRB::Irb","classes/IRB/Irb.html#method-i-output_value","()",""],["over","Board","classes/Board.html#method-i-over","(win)",""],["over","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-over","(x, y)",""],["over?","Board","classes/Board.html#method-i-over-3F","()",""],["over_attr","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-over_attr","(x, y, attrs)",""],["over_markup","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-over_markup","(x, y)",""],["overlapping","TkcTag","classes/TkcTag.html#method-i-overlapping","(x1, y1, x2, y2)",""],["overrideredirect","Tk::Wm","classes/Tk/Wm.html#method-i-overrideredirect","(mode=TkComm::None)",""],["overrideredirect","Tk::Wm","classes/Tk/Wm.html#method-c-overrideredirect","(win, mode=TkComm::None)",""],["overwrite","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-overwrite","()",""],["overwrite=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-overwrite-3D","(mode)",""],["overwrite=","TkTextIO","classes/TkTextIO.html#method-i-overwrite-3D","(ovwt)",""],["overwrite?","TkTextIO","classes/TkTextIO.html#method-i-overwrite-3F","()",""],["owned?","File","classes/File.html#method-c-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","File::Stat","classes/File/Stat.html#method-i-owned-3F","()","<p>Returns <code>true</code> if the effective user id of the process is the\nsame as the owner of <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).owned? ...</code></pre>\n"],["owned?","FileTest","classes/FileTest.html#method-i-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","Pathname","classes/Pathname.html#method-i-owned-3F","()","<p>See <code>FileTest.owned?</code>.\n"],["owner","Method","classes/Method.html#method-i-owner","()","<p>Returns the class or module that defines the method.\n"],["owner","UnboundMethod","classes/UnboundMethod.html#method-i-owner","()","<p>Returns the class or module that defines the method.\n"],["ownerDocument","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXMLDOMText","classes/IXMLDOMText.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","IXTLRuntime","classes/IXTLRuntime.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["ownerDocument","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-ownerDocument","()","<p>IXMLDOMDocument ownerDocument document that contains the node\n"],["p","Kernel","classes/Kernel.html#method-i-p","(*args)","<p>For each object, directly writes <em>obj</em>.<code>inspect</code> followed\nby a newline to the program&#39;s standard output. …\n"],["p","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-p","()","<p>Returns the permutation matrix <code>P</code>\n"],["pack","Array","classes/Array.html#method-i-pack","(p1)","<p>Packs the contents of <em>arr</em> into a binary sequence according to the\ndirectives in <em>aTemplateString</em> (see …\n"],["pack","DL::Packer","classes/DL/Packer.html#method-i-pack","(ary)",""],["pack","DL::Stack","classes/DL/Stack.html#method-i-pack","(ary)",""],["pack","Gem::Package","classes/Gem/Package.html#method-c-pack","(src, destname, signer = nil)",""],["pack","TkPack","classes/TkPack.html#method-c-pack","(*args)",""],["pack","TkPack","classes/TkPack.html#method-c-pack","(*args)",""],["pack_sockaddr_in","Socket","classes/Socket.html#method-c-pack_sockaddr_in","(p1, p2)","<p>Packs <em>port</em> and <em>host</em> as an AF_INET/AF_INET6 sockaddr\nstring.\n\n<pre><code>Socket.sockaddr_in(80, &quot;127.0.0.1&quot;)\n#=&gt; &quot;\\x02\\x00\\x00P\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; ...\n</code></pre>\n"],["pack_sockaddr_un","Socket","classes/Socket.html#method-c-pack_sockaddr_un","(p1)","<p>Packs <em>path</em> as an AF_UNIX sockaddr string.\n\n<pre><code>Socket.sockaddr_un(&quot;/tmp/sock&quot;) #=&gt; &quot;\\x01\\x00/tmp/sock\\x00\\x00...&quot;\n</code></pre>\n"],["package_dir_path","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-package_dir_path","()",""],["package_name","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-package_name","()",""],["package_name","Tk::BLT","classes/Tk/BLT.html#method-c-package_name","()",""],["package_name","Tk::BWidget","classes/Tk/BWidget.html#method-c-package_name","()",""],["package_name","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-package_name","()",""],["package_name","Tk::ICONS","classes/Tk/ICONS.html#method-c-package_name","()",""],["package_name","Tk::Img","classes/Tk/Img.html#method-c-package_name","()",""],["package_name","Tk::Img::BMP","classes/Tk/Img/BMP.html#method-c-package_name","()",""],["package_name","Tk::Img::GIF","classes/Tk/Img/GIF.html#method-c-package_name","()",""],["package_name","Tk::Img::ICO","classes/Tk/Img/ICO.html#method-c-package_name","()",""],["package_name","Tk::Img::JPEG","classes/Tk/Img/JPEG.html#method-c-package_name","()",""],["package_name","Tk::Img::PCX","classes/Tk/Img/PCX.html#method-c-package_name","()",""],["package_name","Tk::Img::PIXMAP","classes/Tk/Img/PIXMAP.html#method-c-package_name","()",""],["package_name","Tk::Img::PNG","classes/Tk/Img/PNG.html#method-c-package_name","()",""],["package_name","Tk::Img::PPM","classes/Tk/Img/PPM.html#method-c-package_name","()",""],["package_name","Tk::Img::PS","classes/Tk/Img/PS.html#method-c-package_name","()",""],["package_name","Tk::Img::SGI","classes/Tk/Img/SGI.html#method-c-package_name","()",""],["package_name","Tk::Img::SUN","classes/Tk/Img/SUN.html#method-c-package_name","()",""],["package_name","Tk::Img::TGA","classes/Tk/Img/TGA.html#method-c-package_name","()",""],["package_name","Tk::Img::TIFF","classes/Tk/Img/TIFF.html#method-c-package_name","()",""],["package_name","Tk::Img::WINDOW","classes/Tk/Img/WINDOW.html#method-c-package_name","()",""],["package_name","Tk::Img::XBM","classes/Tk/Img/XBM.html#method-c-package_name","()",""],["package_name","Tk::Img::XPM","classes/Tk/Img/XPM.html#method-c-package_name","()",""],["package_name","Tk::Itcl","classes/Tk/Itcl.html#method-c-package_name","()",""],["package_name","Tk::Itk","classes/Tk/Itk.html#method-c-package_name","()",""],["package_name","Tk::Iwidgets","classes/Tk/Iwidgets.html#method-c-package_name","()",""],["package_name","Tk::MacResource","classes/Tk/MacResource.html#method-c-package_name","()",""],["package_name","Tk::TclX","classes/Tk/TclX.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Autoscroll","classes/Tk/Tcllib/Autoscroll.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Cursor","classes/Tk/Tcllib/Cursor.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Datefield","classes/Tk/Tcllib/Datefield.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Datefield","classes/Tk/Tcllib/Datefield.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::IP_Entry","classes/Tk/Tcllib/IP_Entry.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::IP_Entry","classes/Tk/Tcllib/IP_Entry.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::KHIM","classes/Tk/Tcllib/KHIM.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Style","classes/Tk/Tcllib/Style.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Tkpiechart","classes/Tk/Tcllib/Tkpiechart.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget","classes/Tk/Tcllib/Widget.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Calendar","classes/Tk/Tcllib/Widget/Calendar.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Dateentry","classes/Tk/Tcllib/Widget/Dateentry.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Dateentry","classes/Tk/Tcllib/Widget/Dateentry.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Menuentry","classes/Tk/Tcllib/Widget/Menuentry.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Menuentry","classes/Tk/Tcllib/Widget/Menuentry.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Ruler","classes/Tk/Tcllib/Widget/Ruler.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Scrolledwindow","classes/Tk/Tcllib/Widget/Scrolledwindow.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Scrolledwindow","classes/Tk/Tcllib/Widget/Scrolledwindow.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::SuperFrame","classes/Tk/Tcllib/Widget/SuperFrame.html#method-c-package_name","()",""],["package_name","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-c-package_name","()",""],["package_name","Tk::Tile","classes/Tk/Tile.html#method-c-package_name","()",""],["package_name","Tk::Tile","classes/Tk/Tile.html#method-c-package_name","()",""],["package_name","Tk::Tile","classes/Tk/Tile.html#method-c-package_name","()",""],["package_name","Tk::TkDND","classes/Tk/TkDND.html#method-c-package_name","()",""],["package_name","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-c-package_name","()",""],["package_name","Tk::TkTable","classes/Tk/TkTable.html#method-c-package_name","()",""],["package_name","Tk::TkTrans","classes/Tk/TkTrans.html#method-c-package_name","()",""],["package_name","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-package_name","()",""],["package_name","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-package_name","()",""],["package_name","Tk::Trofs","classes/Tk/Trofs.html#method-c-package_name","()",""],["package_name","Tk::Vu","classes/Tk/Vu.html#method-c-package_name","()",""],["package_name","Tk::WinDDE","classes/Tk/WinDDE.html#method-c-package_name","()",""],["package_name","Tk::Winico","classes/Tk/Winico.html#method-c-package_name","()",""],["package_name","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-package_name","()",""],["package_name","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-package_name","()",""],["package_patchlevel","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-i-package_patchlevel","()",""],["package_version","Tk::BLT","classes/Tk/BLT.html#method-c-package_version","()",""],["package_version","Tk::BWidget","classes/Tk/BWidget.html#method-c-package_version","()",""],["package_version","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-package_version","()",""],["package_version","Tk::ICONS","classes/Tk/ICONS.html#method-c-package_version","()",""],["package_version","Tk::Img","classes/Tk/Img.html#method-c-package_version","()",""],["package_version","Tk::Img::BMP","classes/Tk/Img/BMP.html#method-c-package_version","()",""],["package_version","Tk::Img::GIF","classes/Tk/Img/GIF.html#method-c-package_version","()",""],["package_version","Tk::Img::ICO","classes/Tk/Img/ICO.html#method-c-package_version","()",""],["package_version","Tk::Img::JPEG","classes/Tk/Img/JPEG.html#method-c-package_version","()",""],["package_version","Tk::Img::PCX","classes/Tk/Img/PCX.html#method-c-package_version","()",""],["package_version","Tk::Img::PIXMAP","classes/Tk/Img/PIXMAP.html#method-c-package_version","()",""],["package_version","Tk::Img::PNG","classes/Tk/Img/PNG.html#method-c-package_version","()",""],["package_version","Tk::Img::PPM","classes/Tk/Img/PPM.html#method-c-package_version","()",""],["package_version","Tk::Img::PS","classes/Tk/Img/PS.html#method-c-package_version","()",""],["package_version","Tk::Img::SGI","classes/Tk/Img/SGI.html#method-c-package_version","()",""],["package_version","Tk::Img::SUN","classes/Tk/Img/SUN.html#method-c-package_version","()",""],["package_version","Tk::Img::TGA","classes/Tk/Img/TGA.html#method-c-package_version","()",""],["package_version","Tk::Img::TIFF","classes/Tk/Img/TIFF.html#method-c-package_version","()",""],["package_version","Tk::Img::WINDOW","classes/Tk/Img/WINDOW.html#method-c-package_version","()",""],["package_version","Tk::Img::XBM","classes/Tk/Img/XBM.html#method-c-package_version","()",""],["package_version","Tk::Img::XPM","classes/Tk/Img/XPM.html#method-c-package_version","()",""],["package_version","Tk::Itcl","classes/Tk/Itcl.html#method-c-package_version","()",""],["package_version","Tk::Itk","classes/Tk/Itk.html#method-c-package_version","()",""],["package_version","Tk::Iwidgets","classes/Tk/Iwidgets.html#method-c-package_version","()",""],["package_version","Tk::TclX","classes/Tk/TclX.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Autoscroll","classes/Tk/Tcllib/Autoscroll.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Cursor","classes/Tk/Tcllib/Cursor.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Datefield","classes/Tk/Tcllib/Datefield.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Datefield","classes/Tk/Tcllib/Datefield.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::IP_Entry","classes/Tk/Tcllib/IP_Entry.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::IP_Entry","classes/Tk/Tcllib/IP_Entry.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::KHIM","classes/Tk/Tcllib/KHIM.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Style","classes/Tk/Tcllib/Style.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Tkpiechart","classes/Tk/Tcllib/Tkpiechart.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget","classes/Tk/Tcllib/Widget.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Calendar","classes/Tk/Tcllib/Widget/Calendar.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Dateentry","classes/Tk/Tcllib/Widget/Dateentry.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Dateentry","classes/Tk/Tcllib/Widget/Dateentry.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Menuentry","classes/Tk/Tcllib/Widget/Menuentry.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Menuentry","classes/Tk/Tcllib/Widget/Menuentry.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Ruler","classes/Tk/Tcllib/Widget/Ruler.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Scrolledwindow","classes/Tk/Tcllib/Widget/Scrolledwindow.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Scrolledwindow","classes/Tk/Tcllib/Widget/Scrolledwindow.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::SuperFrame","classes/Tk/Tcllib/Widget/SuperFrame.html#method-c-package_version","()",""],["package_version","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-c-package_version","()",""],["package_version","Tk::Tile","classes/Tk/Tile.html#method-c-package_version","()",""],["package_version","Tk::Tile","classes/Tk/Tile.html#method-c-package_version","()",""],["package_version","Tk::Tile","classes/Tk/Tile.html#method-c-package_version","()",""],["package_version","Tk::TkDND","classes/Tk/TkDND.html#method-c-package_version","()",""],["package_version","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-i-package_version","()",""],["package_version","Tk::TkTable","classes/Tk/TkTable.html#method-c-package_version","()",""],["package_version","Tk::TkTrans","classes/Tk/TkTrans.html#method-c-package_version","()",""],["package_version","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-package_version","()",""],["package_version","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-package_version","()",""],["package_version","Tk::Trofs","classes/Tk/Trofs.html#method-c-package_version","()",""],["package_version","Tk::Vu","classes/Tk/Vu.html#method-c-package_version","()",""],["package_version","Tk::Winico","classes/Tk/Winico.html#method-c-package_version","()",""],["packdw","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-packdw","(dw)",""],["packqw","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-packqw","(qw)",""],["padding=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-padding-3D","(p1)","<p>Enables or disables padding. By default encryption operations are padded\nusing standard block padding …\n"],["padx","Tk::RbWidget::AlignBox","classes/Tk/RbWidget/AlignBox.html#method-i-padx","(size = nil)",""],["pady","Tk::RbWidget::AlignBox","classes/Tk/RbWidget/AlignBox.html#method-i-pady","(size = nil)",""],["page","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-page","()","<p>Paginates output through a pager program.\n"],["pages","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-pages","(first=None, last=None)",""],["pages","Tk::BWidget::PagesManager","classes/Tk/BWidget/PagesManager.html#method-i-pages","(first=None, last=None)",""],["paging?","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-paging-3F","()","<p>Are we using a pager?\n"],["pair","Socket","classes/Socket.html#method-c-pair","(p1, p2, p3 = v3)","<p>Creates a pair of sockets connected each other.\n<p><em>domain</em> should be a communications domain such as: :INET, …\n"],["pair","UNIXSocket","classes/UNIXSocket.html#method-c-pair","(p1 = v1, p2 = v2)","<p>Creates a pair of sockets connected each other.\n<p><em>socktype</em> should be a socket type such as: :STREAM, :DGRAM, …\n"],["pair_codepoints","Object","classes/Object.html#method-i-pair_codepoints","(codepoints)",""],["pair_content","Curses","classes/Curses.html#method-c-pair_content","(p1)","<p>Returns a 2 item Array, with the foreground and background color, in\n<code>pair</code>\n"],["pair_number","Curses","classes/Curses.html#method-c-pair_number","(p1)","<p>Returns the Fixnum color pair number of attributes <code>attrs</code>.\n"],["pane_cget","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-pane_cget","(pane, slot)",""],["pane_cget_strict","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-pane_cget_strict","(pane, slot)",""],["pane_cget_tkstring","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-pane_cget_tkstring","(pane, slot)",""],["pane_config","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-pane_config","(win, key, value=nil)",""],["pane_config","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-pane_config","(win, key, value=nil)",""],["pane_config","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-pane_config","(pane, key, value=nil)",""],["pane_configinfo","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-pane_configinfo","(win, key=nil)",""],["pane_configinfo","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-pane_configinfo","(win, key=nil)",""],["pane_configinfo","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-pane_configinfo","(win)",""],["pane_configure","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-pane_configure","(pane, key, value=nil)",""],["panecget","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-panecget","(win, key)",""],["panecget","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-panecget","(win, key)",""],["panecget","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-panecget","(pane, slot)",""],["panecget_strict","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-panecget_strict","(win, key)",""],["panecget_strict","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-panecget_strict","(win, key)",""],["panecget_strict","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-panecget_strict","(pane, slot)",""],["panecget_tkstring","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-panecget_tkstring","(pane, slot)",""],["paneconfiginfo","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-paneconfiginfo","(win, key=nil)",""],["paneconfiginfo","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-paneconfiginfo","(win, key=nil)",""],["paneconfiginfo","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-paneconfiginfo","(win)",""],["paneconfigure","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-paneconfigure","(win, key, value=nil)",""],["paneconfigure","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-paneconfigure","(win, key, value=nil)",""],["paneconfigure","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-paneconfigure","(pane, key, value=nil)",""],["panes","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-panes","()",""],["panes","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-panes","()",""],["panes","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-panes","()",""],["param_list","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-param_list","()","<p>A list of this method&#39;s method and yield parameters. \n<code>call-seq</code> params are preferred over parsed method …\n"],["param_seq","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-param_seq","()","<p>Pretty parameter list for this method.  If the method&#39;s parameters were\ngiven by <code>call-seq</code> it is preferred …\n"],["parameters","Method","classes/Method.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n"],["parameters","Proc","classes/Proc.html#method-i-parameters","()","<p>Returns the parameter information of this proc.\n\n<pre><code>prc = lambda{|x, y=42, *other|}\nprc.parameters  #=&gt; [[:req, ...\n</code></pre>\n"],["parameters","UnboundMethod","classes/UnboundMethod.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n"],["params","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-params","()","<p>Stores all parameters of key to the hash INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use …\n"],["params","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-params","()","<p>Stores all parameters of key to the hash INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use …\n"],["params","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-params","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Stores all parameters of key to the hash. …\n"],["params","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-params","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Stores all parameters of key to the hash. …\n"],["params","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-params","()","<p>returns array of WIN32OLE_PARAM object corresponding with method\nparameters.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["params","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-params","(p1, p2)","<p>Changes the parameters of the deflate stream. See zlib.h for details. The\noutput from the stream by changing …\n"],["params=","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-params-3D","(hash)","<p>Set all the parameters.\n"],["params_ok?","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-params_ok-3F","()","<p>Validates the Diffie-Hellman parameters associated with this instance. It\nchecks whether a safe prime …\n"],["paranoid","Gem::Indexer","classes/Gem/Indexer.html#method-i-paranoid","(path, extension)","<p>Ensure <code>path</code> and path with <code>extension</code> are\nidentical.\n"],["parent","Pathname","classes/Pathname.html#method-i-parent","()","<p>#parent returns the parent directory.\n<p>This is same as <code>self + &#39;..&#39;</code>.\n"],["parent","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-parent","()",""],["parent","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-parent","()",""],["parent","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-parent","(node)",""],["parent","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-parent","()",""],["parent","TkWinfo","classes/TkWinfo.html#method-c-parent","(win)",""],["parent","TkWinfo","classes/TkWinfo.html#method-c-parent","(win)",""],["parent=","REXML::Child","classes/REXML/Child.html#method-i-parent-3D","( other )","<p>Sets the parent of this child to the supplied argument.\n<p>other &mdash; Must be a Parent object.  If this object …\n"],["parent=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-parent-3D","( node )",""],["parent=","REXML::Text","classes/REXML/Text.html#method-i-parent-3D","(parent)",""],["parent?","REXML::Node","classes/REXML/Node.html#method-i-parent-3F","()",""],["parent?","REXML::Parent","classes/REXML/Parent.html#method-i-parent-3F","()",""],["parentNode","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXMLDOMText","classes/IXMLDOMText.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","IXTLRuntime","classes/IXTLRuntime.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parentNode","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-parentNode","()","<p>IXMLDOMNode parentNode parent of the node\n"],["parent_file_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-parent_file_name","()","<p>File name of our parent\n"],["parent_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-parent_name","()","<p>Name of our parent\n"],["parent_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-parent_name","()","<p>Name of our parent with special handling for un-marshaled methods\n"],["parse","ActionMap","classes/ActionMap.html#method-c-parse","(mapping)",""],["parse","CGI","classes/CGI.html#method-c-parse","(query)","<p>Parse an HTTP query string into a hash of key=&gt;value pairs.\n\n<pre><code>params = CGI::parse(&quot;query_string&quot;)\n  # ...</code></pre>\n"],["parse","CGI::Cookie","classes/CGI/Cookie.html#method-c-parse","(raw_cookie)","<p>Parse a raw cookie string into a hash of cookie-name=&gt;Cookie pairs.\n\n<pre><code>cookies = CGI::Cookie::parse(&quot;raw_cookie_string&quot;) ...</code></pre>\n"],["parse","CSV","classes/CSV.html#method-c-parse","(*args, &block)","<p>This method can be used to easily parse CSV out of a String.  You may\neither provide a <code>block</code> which will …\n"],["parse","Date","classes/Date.html#method-c-parse","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time, and creates a date\nobject.\n<p>If the optional second argument …\n"],["parse","DateTime","classes/DateTime.html#method-c-parse","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time, and creates a date\nobject.\n<p>If the optional second argument …\n"],["parse","Gem::Requirement","classes/Gem/Requirement.html#method-c-parse","(obj)","<p>Parse <code>obj</code>, returning an <code>[op, version]</code> pair.\n<code>obj</code> can be a String or a Gem::Version.\n<p>If <code>obj</code> is a String …\n"],["parse","Gem::Requirement","classes/Gem/Requirement.html#method-c-parse","(obj)","<p>Parse <code>obj</code>, returning an <code>[op, version]</code> pair.\n<code>obj</code> can be a String or a Gem::Version.\n<p>If <code>obj</code> is a String …\n"],["parse","JSON","classes/JSON.html#method-i-parse","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it.\n<p><em>opts</em> can have the following keys: …\n"],["parse","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-i-parse","()","<p>Parses the current JSON text <em>source</em> and returns the complete data\nstructure as a result.\n"],["parse","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-c-parse","(str)","<p>Parses the received response and separates the reply code and the human\nreadable reply text\n"],["parse","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-parse","(str)",""],["parse","OptionParser","classes/OptionParser.html#method-i-parse","(*argv)","<p>Parses command line arguments <code>argv</code> in order when environment\nvariable POSIXLY_CORRECT is set, and in …\n"],["parse","OptionParser::Switch::NoArgument","classes/OptionParser/Switch/NoArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if any arguments given.\n"],["parse","OptionParser::Switch::OptionalArgument","classes/OptionParser/Switch/OptionalArgument.html#method-i-parse","(arg, argv, &error)","<p>Parses argument if given, or uses default value.\n"],["parse","OptionParser::Switch::PlacedArgument","classes/OptionParser/Switch/PlacedArgument.html#method-i-parse","(arg, argv, &error)","<p>Returns nil if argument is not present or begins with &#39;-&#39;.\n"],["parse","OptionParser::Switch::RequiredArgument","classes/OptionParser/Switch/RequiredArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if argument is not present.\n"],["parse","Psych","classes/Psych.html#method-c-parse","(yaml, filename = nil)","<p>Parse a YAML string in <code>yaml</code>.  Returns the first object of a\nYAML AST. <code>filename</code> is used in the exception …\n"],["parse","Psych::Parser","classes/Psych/Parser.html#method-i-parse","(p1, p2 = v2)","<p>Parse the YAML document contained in <code>yaml</code>.  Events will be\ncalled on the handler set on the parser instance. …\n"],["parse","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-parse","(comment_location)","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document\ncomposed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-parse","(parent, indent = 0)","<p>Parses the tokens into an array of RDoc::Markup::XXX objects, and appends\nthem to the passed <code>parent</code>  …\n"],["parse","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-c-parse","(str)","<p>Parses <code>str</code> into a Document\n"],["parse","RDoc::Options","classes/RDoc/Options.html#method-i-parse","(argv)","<p>Parses command line options.\n"],["parse","RDoc::Text","classes/RDoc/Text.html#method-i-parse","(text)","<p>Normalizes <code>text</code> then builds a RDoc::Markup::Document from it\n"],["parse","REXML::DTD::Parser","classes/REXML/DTD/Parser.html#method-c-parse","( input )",""],["parse","REXML::Parsers::LightParser","classes/REXML/Parsers/LightParser.html#method-i-parse","()",""],["parse","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-parse","()",""],["parse","REXML::Parsers::StreamParser","classes/REXML/Parsers/StreamParser.html#method-i-parse","()",""],["parse","REXML::Parsers::TreeParser","classes/REXML/Parsers/TreeParser.html#method-i-parse","()",""],["parse","REXML::Parsers::UltraLightParser","classes/REXML/Parsers/UltraLightParser.html#method-i-parse","()",""],["parse","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-parse","(path)",""],["parse","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-parse","(path, nodeset)",""],["parse","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-parse","()",""],["parse","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-parse","(duration, do_validate=true)",""],["parse","RSS::Parser","classes/RSS/Parser.html#method-i-parse","(rss, do_validate=true, ignore_unknown_element=true, parser_class=default_parser)",""],["parse","RSS::Utils::CSV","classes/RSS/Utils/CSV.html#method-i-parse","(value, &block)",""],["parse","RSS::Utils::YesCleanOther","classes/RSS/Utils/YesCleanOther.html#method-i-parse","(value)",""],["parse","RSS::Utils::YesOther","classes/RSS/Utils/YesOther.html#method-i-parse","(value)",""],["parse","Ripper","classes/Ripper.html#method-c-parse","(src, filename = '(ripper)', lineno = 1)","<p>Parses Ruby program read from <em>src</em>. <em>src</em> must be a String\nor a IO or a object which has #gets method.\n"],["parse","Ripper::Filter","classes/Ripper/Filter.html#method-i-parse","(init = nil)","<p>Starts parsing.  <em>init</em> is a data accumulator. It is passed to the\nnext event handler (as of Enumerable#inject …\n"],["parse","Syck","classes/Syck.html#method-c-parse","( io )","<p>Parse the first document from the current <em>io</em> stream\n\n<pre><code>File.open( &#39;animals.yaml&#39; ) { |yf| YAML::load( yf ...\n</code></pre>\n"],["parse","Syck","classes/Syck.html#method-c-parse","( io )","<p>Parse the first document from the current <em>io</em> stream\n\n<pre><code>File.open( &#39;animals.yaml&#39; ) { |yf| YAML::load( yf ...\n</code></pre>\n"],["parse","Time","classes/Time.html#method-i-parse","(date, now=self.now)","<p>Parses <code>date</code> using Date._parse and converts it to a Time\nobject.\n<p>If a block is given, the year described …\n"],["parse","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-parse","(txt)",""],["parse","URI","classes/URI.html#method-c-parse","(uri)","<p>Synopsis\n\n<pre><code>URI::parse(uri_str)</code></pre>\n<p>Args\n"],["parse","URI::Parser","classes/URI/Parser.html#method-i-parse","(uri)","<p>Args\n<p><code>uri</code> &mdash; String\n\n<p>Description\n"],["parse","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-c-parse","(str)","<p>Cookie::parse()\n\n<pre><code>It parses Cookie field sent from the user agent.</code></pre>\n"],["parse","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-parse","(socket=nil)",""],["parse","XMLRPC::XMLParser::NQXMLStreamParser::XMLRPCParser","classes/XMLRPC/XMLParser/NQXMLStreamParser/XMLRPCParser.html#method-i-parse","(str)",""],["parse","XMLRPC::XMLParser::REXMLStreamParser::StreamListener","classes/XMLRPC/XMLParser/REXMLStreamParser/StreamListener.html#method-i-parse","(str)",""],["parse","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","classes/XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-parse","(str)",""],["parse!","JSON","classes/JSON.html#method-i-parse-21","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it. The bang version of the parse …\n"],["parse!","OptionParser","classes/OptionParser.html#method-i-parse-21","(argv = default_argv)","<p>Same as #parse, but removes switches destructively.\n"],["parse!","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-parse-21","()","<p>Parses <code>self</code> destructively and returns <code>self</code>\ncontaining the rest arguments left unparsed.\n"],["parseError","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-parseError","()","<p>IXMLDOMParseError parseError get the last parser error\n"],["parseError","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-parseError","()","<p>IXMLDOMParseError parseError get the last parser error\n"],["parseError","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-parseError","()","<p>IXMLDOMParseError parseError get the last parser error\n"],["parseMethodCall","XMLRPC::XMLParser::AbstractStreamParser","classes/XMLRPC/XMLParser/AbstractStreamParser.html#method-i-parseMethodCall","(str)",""],["parseMethodCall","XMLRPC::XMLParser::AbstractTreeParser","classes/XMLRPC/XMLParser/AbstractTreeParser.html#method-i-parseMethodCall","(str)",""],["parseMethodResponse","XMLRPC::XMLParser::AbstractStreamParser","classes/XMLRPC/XMLParser/AbstractStreamParser.html#method-i-parseMethodResponse","(str)",""],["parseMethodResponse","XMLRPC::XMLParser::AbstractTreeParser","classes/XMLRPC/XMLParser/AbstractTreeParser.html#method-i-parseMethodResponse","(str)",""],["parse_TK_LIBS","Object","classes/Object.html#method-i-parse_TK_LIBS","(tklibs)",""],["parse_age","Object","classes/Object.html#method-i-parse_age","(data)","<p>According to Unicode6.0.0/ch03.pdf, Section 3.1, “An update version never\ninvolves any additions …\n"],["parse_alias","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_alias","(context, single, tk, comment)","<p>Parses an <code>alias</code> in <code>context</code> with\n<code>comment</code>\n"],["parse_aliases","Object","classes/Object.html#method-i-parse_aliases","(data)",""],["parse_args","Object","classes/Object.html#method-i-parse_args","()",""],["parse_args","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-parse_args","( element, string )",""],["parse_attr","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_attr","(context, single, tk, comment)","<p>Creates an RDoc::Attr for the name following <code>tk</code>, setting the\ncomment to <code>comment</code>.\n"],["parse_attr_accessor","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_attr_accessor","(context, single, tk, comment)","<p>Creates an RDoc::Attr for each attribute listed after <code>tk</code>,\nsetting the comment for each to <code>comment</code>.\n"],["parse_call_parameters","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_call_parameters","(tk)","<p>Extracts call parameters from the token stream.\n"],["parse_class","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_class","(container, single, tk, comment)","<p>Parses a class in <code>context</code> with <code>comment</code>\n"],["parse_comment","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_comment","(container, tk, comment)","<p>Generates an RDoc::Method or RDoc::Attr from <code>comment</code> by\nlooking for :method: or :attr: directives in …\n"],["parse_config","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-parse_config","(io)",""],["parse_constant","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_constant","(container, tk, comment)","<p>Parses a constant in <code>context</code> with <code>comment</code>\n"],["parse_content_type","XMLRPC::ParseContentType","classes/XMLRPC/ParseContentType.html#method-i-parse_content_type","(str)",""],["parse_csv","String","classes/String.html#method-i-parse_csv","(options = Hash.new)","<p>Equivalent to <code>CSV::parse_line(self, options)</code>.\n"],["parse_ctype","DL::CParser","classes/DL/CParser.html#method-i-parse_ctype","(ty, tymap=nil)",""],["parse_documents","Syck","classes/Syck.html#method-c-parse_documents","( io, &doc_proc )","<p>Calls <em>block</em> with a tree of +YAML::BaseNodes+, one tree for each\nconsecutive document in the YAML stream …\n"],["parse_documents","Syck","classes/Syck.html#method-c-parse_documents","( io, &doc_proc )","<p>Calls <em>block</em> with a tree of +YAML::BaseNodes+, one tree for each\nconsecutive document in the YAML stream …\n"],["parse_dot_doc_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_dot_doc_file","(in_dir, filename)","<p>The .document file contains a list of file and directory name patterns,\nrepresenting candidates for documentation. …\n"],["parse_file","Psych","classes/Psych.html#method-c-parse_file","(filename)","<p>Parse a file at <code>filename</code>. Returns the YAML AST.\n<p>Raises a Psych::SyntaxError when a YAML syntax error is …\n"],["parse_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_file","(filename)","<p>Parses <code>filename</code> and returns an RDoc::TopLevel\n"],["parse_file","Syck","classes/Syck.html#method-c-parse_file","( filepath )","<p>Parse a document from the file located at <em>filepath</em>.\n\n<pre><code>YAML.parse_file( &#39;animals.yaml&#39; )\n   #=&gt; #&lt;YAML::Syck::Node:0x82ccce0 ...\n</code></pre>\n"],["parse_file","Syck","classes/Syck.html#method-c-parse_file","( filepath )","<p>Parse a document from the file located at <em>filepath</em>.\n\n<pre><code>YAML.parse_file( &#39;animals.yaml&#39; )\n   #=&gt; #&lt;YAML::Syck::Node:0x82ccce0 ...\n</code></pre>\n"],["parse_files","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_files","(files)","<p>Parse each file on the command line, recursively entering directories.\n"],["parse_files_matching","RDoc::Parser","classes/RDoc/Parser.html#method-c-parse_files_matching","(regexp)","<p>Record which file types this parser can understand.\n<p>It is ok to call this multiple times.\n"],["parse_header","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-parse_header","(raw)",""],["parse_helper","REXML::DTD::Parser","classes/REXML/DTD/Parser.html#method-c-parse_helper","( input )","<p>Takes a String and parses it out\n"],["parse_include","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_include","(context, comment)","<p>Parses an <code>include</code> in <code>context</code> with\n<code>comment</code>\n"],["parse_line","CSV","classes/CSV.html#method-c-parse_line","(line, options = Hash.new)","<p>This method is a shortcut for converting a single line of a CSV String into\na into an Array.  Note that …\n"],["parse_macro","Mdoc2Man","classes/Mdoc2Man.html#method-i-parse_macro","(line)",""],["parse_meta_attr","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_meta_attr","(context, single, tk, comment)","<p>Parses a meta-programmed attribute and creates an RDoc::Attr.\n<p>To create foo and bar attributes on class …\n"],["parse_meta_method","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_meta_method","(container, single, tk, comment)","<p>Parses a meta-programmed method\n"],["parse_method","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_method","(container, single, tk, comment)","<p>Parses a normal method defined by <code>def</code>\n"],["parse_method_or_yield_parameters","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_method_or_yield_parameters","(method = nil, modifiers = RDoc::METHOD_MODIFIERS)","<p>Extracts <code>yield</code> parameters from <code>method</code>\n"],["parse_method_parameters","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_method_parameters","(method)","<p>Capture the method&#39;s parameters. Along the way, look for a comment\ncontaining:\n\n<pre><code># yields: ....</code></pre>\n<p>and add …\n"],["parse_module","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_module","(container, single, tk, comment)","<p>Parses an RDoc::NormalModule in <code>container</code> with\n<code>comment</code>\n"],["parse_name","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-parse_name","(name)","<p>Extracts the class, selector and method name parts from <code>name</code>\nlike Foo::Bar#baz.\n<p>NOTE: Given Foo::Bar, …\n"],["parse_openssl","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-parse_openssl","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse_opts","IRB","classes/IRB.html#method-c-parse_opts","()","<p>option analyzing\n"],["parse_printf_format","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-parse_printf_format","(format, opts)","<p>% &lt;flag&gt;  [#0- +] &lt;minimum field width&gt; (*|*[1-9]*$|[1-9]*)\n&lt;precision>.(*|*[0-9]*$| …\n"],["parse_qvalues","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-parse_qvalues","(value)",""],["parse_range_header","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-parse_range_header","(ranges_specifier)",""],["parse_require","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_require","(context, comment)","<p>Parses an RDoc::Require in <code>context</code> containing\n<code>comment</code>\n"],["parse_result","Object","classes/Object.html#method-i-parse_result","(data)",""],["parse_rfc2253","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-parse_rfc2253","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse_scripts","Object","classes/Object.html#method-i-parse_scripts","(data)",""],["parse_set_cookie","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-c-parse_set_cookie","(str)",""],["parse_set_cookies","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-c-parse_set_cookies","(str)",""],["parse_signature","DL::CParser","classes/DL/CParser.html#method-i-parse_signature","(signature, tymap=nil)",""],["parse_source","REXML::DTD::EntityDecl","classes/REXML/DTD/EntityDecl.html#method-c-parse_source","(source, listener)",""],["parse_source","REXML::DTD::NotationDecl","classes/REXML/DTD/NotationDecl.html#method-c-parse_source","(source, listener)",""],["parse_statements","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_statements","(container, single = NORMAL, current_method = nil, comment = '')","<p>The core of the ruby parser.\n"],["parse_stream","Psych","classes/Psych.html#method-c-parse_stream","(yaml, filename = nil, &block)","<p>Parse a YAML string in <code>yaml</code>.  Returns the full AST for the\nYAML document. This method can handle multiple …\n"],["parse_stream","REXML::Document","classes/REXML/Document.html#method-c-parse_stream","( source, listener )",""],["parse_struct_signature","DL::CParser","classes/DL/CParser.html#method-i-parse_struct_signature","(signature, tymap=nil)",""],["parse_symbol_arg","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_symbol_arg","(no = nil)","<p>Parse up to <code>no</code> symbol arguments\n"],["parse_symbol_in_arg","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_symbol_in_arg","()","<p>Returns symbol text from the next token\n"],["parse_task_string","Rake::Application","classes/Rake/Application.html#method-i-parse_task_string","(string)",""],["parse_task_string","Rake::Application","classes/Rake/Application.html#method-i-parse_task_string","(string)",""],["parse_tclConfig","Object","classes/Object.html#method-i-parse_tclConfig","(file)",""],["parse_time","Psych::ScalarScanner","classes/Psych/ScalarScanner.html#method-i-parse_time","(string)","<p>Parse and return a Time from <code>string</code>\n"],["parse_to_rects","ActionMap","classes/ActionMap.html#method-c-parse_to_rects","(mapping)",""],["parse_top_level_statements","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_top_level_statements","(container)","<p>Parses statements in the top-level <code>container</code>\n"],["parse_unicode_data","Object","classes/Object.html#method-i-parse_unicode_data","(file)",""],["parse_uri","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-c-parse_uri","(uri)",""],["parse_uri","DRb::DRbUNIXSocket","classes/DRb/DRbUNIXSocket.html#method-c-parse_uri","(uri)",""],["parse_visibility","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_visibility","(container, single, tk)","<p>Determines the visibility in <code>container</code> from <code>tk</code>\n"],["parse_yield","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_yield","(context, single, tk, method)","<p>Determines the block parameter for <code>context</code>\n"],["parsed","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXMLDOMText","classes/IXMLDOMText.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","IXTLRuntime","classes/IXTLRuntime.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parsed","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-parsed","()","<p>BOOL parsed has sub-tree been completely parsed\n"],["parser","Psych","classes/Psych.html#method-c-parser","()","<p>Returns a default parser\n"],["parser","Syck","classes/Syck.html#method-c-parser","()","<p>Returns a new default parser\n"],["parser","Syck","classes/Syck.html#method-c-parser","()","<p>Returns a new default parser\n"],["parser","URI::Generic","classes/URI/Generic.html#method-i-parser","()","<p>returns the parser to be used.\n<p>Unless a URI::Parser is defined, then DEFAULT_PARSER is used.\n"],["parsetext","Tk::BWidget","classes/Tk/BWidget.html#method-c-parsetext","(text)",""],["partition","Enumerable","classes/Enumerable.html#method-i-partition","()","<p>Returns two arrays, the first containing the elements of <em>enum</em> for\nwhich the block evaluates to true, …\n"],["partition","String","classes/String.html#method-i-partition","(p1)","<p>Searches <em>sep</em> or pattern (<em>regexp</em>) in the string and\nreturns the part before it, the match, and the part …\n"],["pass","Thread","classes/Thread.html#method-c-pass","()","<p>Give the thread scheduler a hint to pass execution to another thread. A\nrunning thread may or may not …\n"],["passwd","Etc","classes/Etc.html#method-c-passwd","()","<p>Provides a convenient Ruby iterator which executes a block for each entry\nin the /etc/passwd file.\n<p>The …\n"],["password","URI::Generic","classes/URI/Generic.html#method-i-password","()","<p>returns the password component\n"],["password=","URI::Generic","classes/URI/Generic.html#method-i-password-3D","(password)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["password=","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-password-3D","(new_password)",""],["password_field","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-password_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a Password Input element as a string.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nits default …\n"],["paste","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-paste","()",""],["patch","Net::HTTP","classes/Net/HTTP.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["patch","Net::HTTP","classes/Net/HTTP.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["path","ARGF","classes/ARGF.html#method-i-path","()","<p>Returns the current filename. “-” is returned when the current file is\nSTDIN.\n<p>For example:\n\n<pre><code>$ ...</code></pre>\n"],["path","Dir","classes/Dir.html#method-i-path","()","<p>Returns the path parameter passed to <em>dir</em>&#39;s constructor.\n\n<pre><code>d = Dir.new(&quot;..&quot;)\nd.path   #=&gt; &quot;..&quot;\n</code></pre>\n"],["path","File","classes/File.html#method-i-path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n\n<pre><code>File.new(&quot;testfile&quot;).path ...</code></pre>\n"],["path","File","classes/File.html#method-c-path","(p1)","<p>Returns the string representation of the path\n\n<pre><code>File.path(&quot;/dev/null&quot;)          #=&gt; &quot;/dev/null&quot;\nFile.path(Pathname.new(&quot;/tmp&quot;)) ...\n</code></pre>\n"],["path","Gem","classes/Gem.html#method-c-path","()",""],["path","MultiTkIp","classes/MultiTkIp.html#method-i-path","()",""],["path","MultiTkIp","classes/MultiTkIp.html#method-c-path","()",""],["path","MultiTkIp","classes/MultiTkIp.html#method-i-path","()",""],["path","MultiTkIp","classes/MultiTkIp.html#method-c-path","()",""],["path","MultiTkIp","classes/MultiTkIp.html#method-i-path","()",""],["path","MultiTkIp","classes/MultiTkIp.html#method-c-path","()",""],["path","MultiTkIp","classes/MultiTkIp.html#method-c-path","()",""],["path","MultiTkIp","classes/MultiTkIp.html#method-i-path","()",""],["path","PStore","classes/PStore.html#method-i-path","()","<p>Returns the path to the data store file.\n"],["path","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-path","()","<p>Path to this class or module\n"],["path","RDoc::Constant","classes/RDoc/Constant.html#method-i-path","()","<p>Path to this constant\n"],["path","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-path","()","<p>Path to this method\n"],["path","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-path","(system, site, home, gems, *extra_dirs)","<p>Returns existing directories from the selected documentation directories as\nan Array.\n<p>See also ::each …\n"],["path","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-path","()","<p>Path to this file\n"],["path","Rake::FtpFile","classes/Rake/FtpFile.html#method-i-path","()",""],["path","Tempfile","classes/Tempfile.html#method-i-path","()","<p>Returns the full path name of the temporary file. This will be nil if\n#unlink has been called.\n"],["path","Tk::Root","classes/Tk/Root.html#method-i-path","()",""],["path","TkObject","classes/TkObject.html#method-i-path","()","<p>/\n"],["path","UNIXSocket","classes/UNIXSocket.html#method-i-path","()","<p>Returns the path of the local address of unixsocket.\n\n<pre><code>s = UNIXServer.new(&quot;/tmp/sock&quot;)\np s.path #=&gt; &quot;/tmp/sock&quot;\n</code></pre>\n"],["path","URI::FTP","classes/URI/FTP.html#method-i-path","()","<p>Returns the path from an FTP URI.\n<p>RFC 1738 specifically states that the path for an FTP URI does not include\n…\n"],["path","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-path","()","<p>Returns the type library file path.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...</code></pre>\n"],["path=","URI::Generic","classes/URI/Generic.html#method-i-path-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["path_ok?","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-path_ok-3F","(gem_dir, spec)","<p>Is <code>spec</code> in <code>gem_dir</code>?\n"],["pathmap","String","classes/String.html#method-i-pathmap","(spec=nil, &block)","<p>Map the path according to the given specification.  The specification\ncontrols the details of the mapping. …\n"],["pathmap_explode","String","classes/String.html#method-i-pathmap_explode","()","<p>Explode a path into individual components.  Used by <code>pathmap</code>.\n"],["pathmap_partial","String","classes/String.html#method-i-pathmap_partial","(n)","<p>Extract a partial path from the path.  Include <code>n</code> directories\nfrom the front end (left hand side) if  …\n"],["pathmap_replace","String","classes/String.html#method-i-pathmap_replace","(patterns, &block)","<p>Preform the pathmap replacement operations on the given path. The patterns\ntake the form &#39;pat1,rep1;pat2,rep2…&#39;. …\n"],["paths","Gem","classes/Gem.html#method-c-paths","()",""],["paths=","Gem","classes/Gem.html#method-c-paths-3D","(env)",""],["pattern","OptionParser::Switch","classes/OptionParser/Switch.html#method-c-pattern","()",""],["pattern","OptionParser::Switch::NoArgument","classes/OptionParser/Switch/NoArgument.html#method-c-pattern","()",""],["pbMode","Object","classes/Object.html#method-i-pbMode","(progress, vprogress)",""],["pbStart","Object","classes/Object.html#method-i-pbStart","(progress, vprogress)",""],["pbStop","Object","classes/Object.html#method-i-pbStop","(progress, vprogress)",""],["pbkdf2_hmac","OpenSSL::PKCS5","classes/OpenSSL/PKCS5.html#method-c-pbkdf2_hmac","(p1, p2, p3, p4, p5)","<p>Parameters\n<p><code>pass</code> - string\n<p><code>salt</code> - string\n"],["pbkdf2_hmac_sha1","OpenSSL::PKCS5","classes/OpenSSL/PKCS5.html#method-c-pbkdf2_hmac_sha1","(p1, p2, p3, p4)","<p>Parameters\n<p><code>pass</code> - string\n<p><code>salt</code> - string\n"],["pboard","Object","classes/Object.html#method-i-pboard","()",""],["peek","DRb::TimerIdConv::TimerHolder2","classes/DRb/TimerIdConv/TimerHolder2.html#method-i-peek","(key)",""],["peek","Enumerator","classes/Enumerator.html#method-i-peek","()","<p>Returns the next object in the enumerator, but doesn&#39;t move the\ninternal position forward.  If the …\n"],["peek","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-peek","(depth=0)","<p>Peek at the <code>depth</code> event in the stack.  The first element on\nthe stack is at depth 0.  If <code>depth</code> is -1, …\n"],["peek","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-peek","(depth=0)",""],["peek","RubyLex","classes/RubyLex.html#method-i-peek","(i = 0)",""],["peek","StringScanner","classes/StringScanner.html#method-i-peek","(p1)","<p>Extracts a string corresponding to <code>string[pos,len]</code>, without\nadvancing the scan pointer.\n\n<pre><code>s = StringScanner.new(&#39;test ...</code></pre>\n"],["peek_equal?","RubyLex","classes/RubyLex.html#method-i-peek_equal-3F","(str)",""],["peek_match?","RubyLex","classes/RubyLex.html#method-i-peek_match-3F","(regexp)",""],["peek_read","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-peek_read","()","<p>Peek equivalent for get_tkread\n"],["peek_tk","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-peek_tk","()","<p>Peek at the next token, but don&#39;t remove it from the stream\n"],["peek_token","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-peek_token","()","<p>Returns the next token on the stream without modifying the stream\n"],["peek_values","Enumerator","classes/Enumerator.html#method-i-peek_values","()","<p>Returns the next object as an array, similar to Enumerator#next_values, but\ndoesn&#39;t move the internal …\n"],["peep","StringScanner","classes/StringScanner.html#method-i-peep","(p1)","<p>Equivalent to #peek. This method is obsolete; use #peek instead.\n"],["peer_cert","Net::HTTP","classes/Net/HTTP.html#method-i-peer_cert","()","<p>Returns the X.509 certificates the server presented.\n"],["peer_cert","Net::HTTP","classes/Net/HTTP.html#method-i-peer_cert","()","<p>Returns the X.509 certificates the server presented.\n"],["peer_cert","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-peer_cert","()","<p>The X509 certificate for this socket&#39;s peer.\n"],["peer_cert","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-peer_cert","()",""],["peer_cert_chain","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-peer_cert_chain","()","<p>The X509 certificate chain for this socket&#39;s peer.\n"],["peer_cert_chain","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-peer_cert_chain","()",""],["peeraddr","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-peeraddr","()","<p>Get the address of our TCP peer (the other end of the socket we are bound\nto.\n"],["peeraddr","IPSocket","classes/IPSocket.html#method-i-peeraddr","(*args)","<p>Returns the remote address as an array which contains address_family, port,\nhostname and numeric_address. …\n"],["peeraddr","UNIXSocket","classes/UNIXSocket.html#method-i-peeraddr","()","<p>Returns the remote address as an array which contains address_family and\nunix_path.\n<p>Example\n\n<pre><code>serv = UNIXServer.new(&quot;/tmp/sock&quot;) ...</code></pre>\n"],["peeraddr","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-peeraddr","()",""],["pen_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-pen_cget","(id, option)",""],["pen_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-pen_cget_strict","(id, option)",""],["pen_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-pen_cget_tkstring","(id, option)",""],["pen_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-pen_configinfo","(id, slot=nil)",""],["pen_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-pen_configure","(*args)",""],["pen_create","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-pen_create","(id=nil, keys={})",""],["pen_delete","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-pen_delete","(*ids)",""],["pen_names","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-pen_names","(*pats)",""],["pending","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-pending","()","<p>The number of bytes that are immediately available for reading\n"],["percent_doc","RDoc::Stats","classes/RDoc/Stats.html#method-i-percent_doc","()","<p>Calculates the percentage of items documented.\n"],["perforation_activate","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-perforation_activate","(mode)",""],["perforation_highlight","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-perforation_highlight","(index, *args)",""],["perforation_highlight","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-perforation_highlight","(mode)",""],["perforation_invoke","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-perforation_invoke","(index=nil)",""],["perforation_invoke","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-perforation_invoke","()",""],["perform_with_block","DRb::DRbServer::InvokeMethod18Mixin","classes/DRb/DRbServer/InvokeMethod18Mixin.html#method-i-perform_with_block","()",""],["period","Tk::Tcllib::Plotchart::Timechart","classes/Tk/Tcllib/Plotchart/Timechart.html#method-i-period","(txt, time_begin, time_end, col=None)",""],["permutation","Array","classes/Array.html#method-i-permutation","(p1 = v1)","<p>When invoked with a block, yield all permutations of length <em>n</em> of\nthe elements of <em>ary</em>, then return the …\n"],["permutation?","Matrix","classes/Matrix.html#method-i-permutation-3F","()","<p>Returns <code>true</code> is this is a permutation matrix Raises an error\nif matrix is not square.\n"],["permute","OptionParser","classes/OptionParser.html#method-i-permute","(*argv)","<p>Parses command line arguments <code>argv</code> in permutation mode and\nreturns list of non-option arguments.\n"],["permute!","OptionParser","classes/OptionParser.html#method-i-permute-21","(argv = default_argv)","<p>Same as #permute, but removes switches destructively.\n"],["permute!","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-permute-21","()","<p>Parses <code>self</code> destructively in permutation mode and returns\n<code>self</code> containing the rest arguments left unparsed. …\n"],["pfamily","Addrinfo","classes/Addrinfo.html#method-i-pfamily","()","<p>returns the protocol family as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).pfamily == Socket::PF_INET #=&gt; ...\n</code></pre>\n"],["phase","Complex","classes/Complex.html#method-i-phase","()","<p>Returns the angle part of its polar form.\n\n<pre><code>Complex.polar(3, Math::PI/2).arg #=&gt; 1.5707963267948966\n</code></pre>\n"],["phase","Float","classes/Float.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["phase","Numeric","classes/Numeric.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["philosopher","Object","classes/Object.html#method-i-philosopher","(n)",""],["phoneSkipLeft","Object","classes/Object.html#method-i-phoneSkipLeft","(widget)","<p>phoneSkipLeft – Skip over fixed characters in a phone-number string when\nmoving left.\n<p>Arguments: widget …\n"],["phoneSkipRight","Object","classes/Object.html#method-i-phoneSkipRight","(widget, add = 0)","<p>phoneSkipRight – Skip over fixed characters in a phone-number string when\nmoving right.\n<p>Arguments: widget …\n"],["pi","XMLRPC::XMLWriter::Simple","classes/XMLRPC/XMLWriter/Simple.html#method-i-pi","(name, *params)",""],["pi","XMLRPC::XMLWriter::XMLParser","classes/XMLRPC/XMLWriter/XMLParser.html#method-i-pi","(name, *params)",""],["pick_font","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-pick_font","(size, attrs)","<p>A font chooser routine.\n<p>html = pick_font\n"],["pick_font_fs","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-pick_font_fs","(size, attrs)","<p>This routine is called to pick fonts for the fullscreen view.\n"],["pict","Cal","classes/Cal.html#method-i-pict","(y, m)",""],["pid","IO","classes/IO.html#method-i-pid","()","<p>Returns the process ID of a child process associated with <em>ios</em>.\nThis will be set by <code>IO.popen</code>.\n\n<pre><code>pipe = IO.popen(&quot;-&quot;) ...</code></pre>\n"],["pid","Process","classes/Process.html#method-c-pid","()","<p>Returns the process id of this process. Not available on all platforms.\n\n<pre><code>Process.pid   #=&gt; 27415\n</code></pre>\n"],["pid","Process::Status","classes/Process/Status.html#method-i-pid","()","<p>Returns the process ID that this status object represents.\n\n<pre><code>fork { exit }   #=&gt; 26569\nProcess.wait    #=&gt; ...\n</code></pre>\n"],["pid","StringIO","classes/StringIO.html#method-i-pid","()",""],["pid","TkTextIO","classes/TkTextIO.html#method-i-pid","()",""],["pie","Tk::Tcllib::Tkpiechart::Slice","classes/Tk/Tcllib/Tkpiechart/Slice.html#method-i-pie","()",""],["piece","Object","classes/Object.html#method-i-piece","(n, a, nb)",""],["pipe","IO","classes/IO.html#method-c-pipe","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a pair of pipe endpoints (connected to each other) and returns them\nas a two-element array of …\n"],["pipe?","File","classes/File.html#method-c-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n"],["pipe?","File::Stat","classes/File/Stat.html#method-i-pipe-3F","()","<p>Returns <code>true</code> if the operating system supports pipes and\n<em>stat</em> is a pipe; <code>false</code> otherwise.\n"],["pipe?","FileTest","classes/FileTest.html#method-i-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n"],["pipe?","Pathname","classes/Pathname.html#method-i-pipe-3F","()","<p>See <code>FileTest.pipe?</code>.\n"],["pipeline","Open3","classes/Open3.html#method-c-pipeline","(*cmds)","<p>Open3.pipeline starts a list of commands as a pipeline. It waits the finish\nof the commands. No pipe …\n"],["pipeline_r","Open3","classes/Open3.html#method-c-pipeline_r","(*cmds, &block)","<p>Open3.pipeline_r starts a list of commands as a pipeline with a pipe which\nconnects stdout of the last …\n"],["pipeline_rw","Open3","classes/Open3.html#method-c-pipeline_rw","(*cmds, &block)","<p>Open3.pipeline_rw starts a list of commands as a pipeline with pipes which\nconnects stdin of the first …\n"],["pipeline_start","Open3","classes/Open3.html#method-c-pipeline_start","(*cmds, &block)","<p>Open3.pipeline_start starts a list of commands as a pipeline. No pipe made\nfor stdin of the first command …\n"],["pipeline_w","Open3","classes/Open3.html#method-c-pipeline_w","(*cmds, &block)","<p>Open3.pipeline_w starts a list of commands as a pipeline with a pipe which\nconnects stdin of the first …\n"],["pixel_to_coords","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-pixel_to_coords","(w, x, y)",""],["pixel_to_coords","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-pixel_to_coords","(x, y)",""],["pixels","TkWinfo","classes/TkWinfo.html#method-c-pixels","(win, dist)",""],["pixels","TkWinfo","classes/TkWinfo.html#method-c-pixels","(win, dist)",""],["pkcs5_keyivgen","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-pkcs5_keyivgen","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Generates and sets the key/IV based on a password.\n<p>WARNING: This method is only PKCS5 v1.5 compliant when …\n"],["place","Tk::BWidget","classes/Tk/BWidget.html#method-c-place","(path, w, h, *args)",""],["place","TkPlace","classes/TkPlace.html#method-c-place","(win, slot, value=None)",""],["place","TkPlace","classes/TkPlace.html#method-c-place","(win, slot, value=None)",""],["plain_text","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-plain_text","(first, last)",""],["plaintext","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-plaintext","(text, width=nil, height=nil)",""],["plaintext","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-plaintext","(*args)",""],["platform","Gem::Specification","classes/Gem/Specification.html#method-i-platform","()","<p>The platform this gem runs on.  See Gem::Platform for details.\n"],["platform=","Gem::Specification","classes/Gem/Specification.html#method-i-platform-3D","(platform)","<p>The platform this gem runs on.  See Gem::Platform for details.\n<p>Setting this to any value other than Gem::Platform::RUBY …\n"],["platforms","Gem","classes/Gem.html#method-c-platforms","()","<p>Array of platforms this RubyGems supports.\n"],["platforms=","Gem","classes/Gem.html#method-c-platforms-3D","(platforms)","<p>Set array of platforms this RubyGems supports (primarily for testing).\n"],["plot","Tk::Tcllib::Plotchart::Barchart","classes/Tk/Tcllib/Plotchart/Barchart.html#method-i-plot","(series, dat, col=None)",""],["plot","Tk::Tcllib::Plotchart::Barchart3D","classes/Tk/Tcllib/Plotchart/Barchart3D.html#method-i-plot","(label, yvalue, color)",""],["plot","Tk::Tcllib::Plotchart::Boxplot","classes/Tk/Tcllib/Plotchart/Boxplot.html#method-i-plot","(label, *values)",""],["plot","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot","(type, *args)",""],["plot","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot","(type, *args)",""],["plot","Tk::Tcllib::Plotchart::Piechart","classes/Tk/Tcllib/Plotchart/Piechart.html#method-i-plot","(*dat)",""],["plot","Tk::Tcllib::Plotchart::PlotSeries","classes/Tk/Tcllib/Plotchart/PlotSeries.html#method-i-plot","(*args)",""],["plot","Tk::Tcllib::Plotchart::PolarPlot","classes/Tk/Tcllib/Plotchart/PolarPlot.html#method-i-plot","(series, radius, angle)",""],["plot","Tk::Tcllib::Plotchart::PolarPlot","classes/Tk/Tcllib/Plotchart/PolarPlot.html#method-i-plot","(series, radius, angle)",""],["plot","Tk::Tcllib::Plotchart::Radialchart","classes/Tk/Tcllib/Plotchart/Radialchart.html#method-i-plot","(data, color, thickness)",""],["plot","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-plot","(series, x, y)",""],["plotDown","Object","classes/Object.html#method-i-plotDown","(w, x, y)","<p>plotDown – This method is invoked when the mouse is pressed over one of the\ndata points.  It sets up …\n"],["plotMove","Object","classes/Object.html#method-i-plotMove","(w, x, y)","<p>plotMove – This method is invoked during mouse motion events.  It drags the\ncurrent item.\n<p>Arguments: …\n"],["plot_circle","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot_circle","(*args)",""],["plot_circle","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot_circle","(*args)",""],["plot_data","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-plot_data","(dat)",""],["plot_filled_circle","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot_filled_circle","(*args)",""],["plot_filled_circle","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot_filled_circle","(*args)",""],["plot_filled_rectangle","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot_filled_rectangle","(*args)",""],["plot_filled_rectangle","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot_filled_rectangle","(*args)",""],["plot_funcont","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-plot_funcont","(conts, cmd=Proc.new)",""],["plot_function","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-plot_function","(cmd=Proc.new)",""],["plot_line","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-plot_line","(dat, color)",""],["plot_rectangle","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot_rectangle","(*args)",""],["plot_rectangle","Tk::Tcllib::Plotchart::IsometricPlot","classes/Tk/Tcllib/Plotchart/IsometricPlot.html#method-i-plot_rectangle","(*args)",""],["plotconfig","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-plotconfig","(*args)",""],["plotpack","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-plotpack","(w, dir, *plots)",""],["plotpack","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-plotpack","(dir, *plots)",""],["plural_forms","RSS::Element","classes/RSS/Element.html#method-i-plural_forms","()",""],["point","Readline","classes/Readline.html#method-c-point","()","<p>Returns the index of the current cursor position in\n<code>Readline.line_buffer</code>.\n<p>The index in <code>Readline.line_buffer</code> …\n"],["point_conversion_form","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-point_conversion_form","()","<p>See the OpenSSL documentation for EC_GROUP_get_point_conversion_form()\n"],["point_conversion_form=","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-point_conversion_form-3D","(p1)","<p>See the OpenSSL documentation for EC_GROUP_set_point_conversion_form()\n"],["pointer","StringScanner","classes/StringScanner.html#method-i-pointer","()","<p>Returns the byte position of the scan pointer.  In the &#39;reset&#39;\nposition, this value is zero. …\n"],["pointer=","StringScanner","classes/StringScanner.html#method-i-pointer-3D","(p1)","<p>Set the byte position of the scan pointer.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\ns.pos = 7            # ...</code></pre>\n"],["pointerx","TkWinfo","classes/TkWinfo.html#method-c-pointerx","(win)",""],["pointerx","TkWinfo","classes/TkWinfo.html#method-c-pointerx","(win)",""],["pointerxy","TkWinfo","classes/TkWinfo.html#method-c-pointerxy","(win)",""],["pointerxy","TkWinfo","classes/TkWinfo.html#method-c-pointerxy","(win)",""],["pointery","TkWinfo","classes/TkWinfo.html#method-c-pointery","(win)",""],["pointery","TkWinfo","classes/TkWinfo.html#method-c-pointery","(win)",""],["poke","Tk::WinDDE","classes/Tk/WinDDE.html#method-c-poke","(service, topic, item, data)",""],["polar","Complex","classes/Complex.html#method-i-polar","()","<p>Returns an array; [cmp.abs, cmp.arg].\n"],["polar","Complex","classes/Complex.html#method-c-polar","(p1, p2 = v2)","<p>Returns a complex object which denotes the given polar form.\n\n<pre><code>Complex.polar(3, 0)           #=&gt; (3.0+0.0i) ...\n</code></pre>\n"],["polar","Numeric","classes/Numeric.html#method-i-polar","()","<p>Returns an array; [num.abs, num.arg].\n"],["polar_coordinates","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-polar_coordinates","(w, radmax)",""],["polar_coordinates","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-polar_coordinates","(radmax)",""],["polar_to_pixel","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-polar_to_pixel","(w, rad, phi)",""],["polar_to_pixel","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-polar_to_pixel","(rad, phi)",""],["pop","Array","classes/Array.html#method-i-pop","(*args)","<p>Removes the last element from <code>self</code> and returns it, or\n<code>nil</code> if the array is empty.\n<p>If a number <em>n</em> is given, …\n"],["pop","Net::POPMail","classes/Net/POPMail.html#method-i-pop","( dest = '' )","<p>This method fetches the message.  If called with a block, the message is\nyielded to the block one chunk …\n"],["pop","Queue","classes/Queue.html#method-i-pop","(non_block=false)","<p>Retrieves data from the queue.  If the queue is empty, the calling thread\nis suspended until data is …\n"],["pop","Rinda::NotifyTemplateEntry","classes/Rinda/NotifyTemplateEntry.html#method-i-pop","()","<p>Retrieves a notification.  Raises RequestExpiredError when this\nNotifyTemplateEntry expires.\n"],["pop","SizedQueue","classes/SizedQueue.html#method-i-pop","(*args)","<p>Retrieves data from the queue and runs a waiting thread, if any.\n"],["pop_inspect_key","PP::PPMethods","classes/PP/PPMethods.html#method-i-pop_inspect_key","(id)",""],["pop_token","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-pop_token","()","<p>Remove the last token from the collected tokens\n"],["pop_up","Object","classes/Object.html#method-i-pop_up","()",""],["pop_workspace","IRB::Context","classes/IRB/Context.html#method-i-pop_workspace","()",""],["popd","Shell","classes/Shell.html#method-i-popd","()",""],["popdir","Shell","classes/Shell.html#method-i-popdir","()",""],["popen","IO","classes/IO.html#method-c-popen","(p1, p2 = v2, p3 = {})","<p>Runs the specified command as a subprocess; the subprocess&#39;s standard\ninput and output will be connected …\n"],["popen2","Open3","classes/Open3.html#method-c-popen2","(*cmd, &block)","<p>Open3.popen2 is similer to Open3.popen3 except it doesn&#39;t make a pipe\nfor the standard error stream. …\n"],["popen2e","Open3","classes/Open3.html#method-c-popen2e","(*cmd, &block)","<p>Open3.popen2e is similer to Open3.popen3 except it merges the standard\noutput stream and the standard …\n"],["popen3","Open3","classes/Open3.html#method-c-popen3","(*cmd, &block)","<p>Open stdin, stdout, and stderr streams and start external executable. In\naddition, a thread for waiting …\n"],["popstate","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-popstate","()",""],["populate","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-populate","(vector, density=None)",""],["populate_roots","Object","classes/Object.html#method-i-populate_roots","(tree)","<p>Code to populate the roots of the tree (can be more than one on Windows)\n"],["populate_tree","Object","classes/Object.html#method-i-populate_tree","(tree, node)","<p>Code to populate a node of the tree\n"],["popup","Tk::Menu","classes/Tk/Menu.html#method-i-popup","(x, y, index=nil)",""],["popup_menu","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-popup_menu","(name = \"\", *values)","<p>Generate a Select element as a string.\n<p><code>name</code> is the name of the element.  The <code>values</code> are\nthe options that …\n"],["port","Net::POP3","classes/Net/POP3.html#method-i-port","()","<p>The port number to connect to.\n"],["port","Net::POP3","classes/Net/POP3.html#method-i-port","()","<p>The port number to connect to.\n"],["port","Net::POP3","classes/Net/POP3.html#method-i-port","()","<p>The port number to connect to.\n"],["port","Net::POP3","classes/Net/POP3.html#method-i-port","()","<p>The port number to connect to.\n"],["port","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-port","()","<p>The port this request is for\n"],["port=","URI::Generic","classes/URI/Generic.html#method-i-port-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["pos","ARGF","classes/ARGF.html#method-i-pos","()","<p>Returns the current offset (in bytes) of the current file in\n<code>ARGF</code>.\n\n<pre><code>ARGF.pos    #=&gt; 0\nARGF.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["pos","Dir","classes/Dir.html#method-i-pos","()","<p>Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;)\nd.tell   #=&gt; 0\nd.read  ...\n</code></pre>\n"],["pos","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-pos","()","<p>The position in the tar entry\n"],["pos","IO","classes/IO.html#method-i-pos","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.pos    #=&gt; 0\nf.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["pos","StringIO","classes/StringIO.html#method-i-pos","()","<p>Returns the current offset (in bytes) of <strong>strio</strong>.\n"],["pos","StringScanner","classes/StringScanner.html#method-i-pos","()","<p>Returns the byte position of the scan pointer.  In the &#39;reset&#39;\nposition, this value is zero. …\n"],["pos","Tk::RbWidget::Editable_Listbox","classes/Tk/RbWidget/Editable_Listbox.html#method-c-pos","()",""],["pos","TkTextIO","classes/TkTextIO.html#method-i-pos","()",""],["pos","TkTextMark","classes/TkTextMark.html#method-i-pos","()","<p># move to Tk::Text::IndexModMethods module def +(mod)\n\n<pre><code>return chars(mod) if mod.kind_of?(Numeric)\n\nmod ...</code></pre>\n"],["pos","TkTextMark","classes/TkTextMark.html#method-i-pos","()","<p># move to Tk::Text::IndexModMethods module def +(mod)\n\n<pre><code>return chars(mod) if mod.kind_of?(Numeric)\n\nmod ...</code></pre>\n"],["pos","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-pos","()","<p>Total number of output bytes output so far.\n"],["pos","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-pos","()","<p>Total number of input bytes read so far.\n"],["pos=","ARGF","classes/ARGF.html#method-i-pos-3D","(p1)","<p>Seeks to the position given by <em>position</em> (in bytes) in\n<code>ARGF</code>.\n<p>For example:\n\n<pre><code>ARGF.pos = 17\nARGF.gets   #=&gt; ...\n</code></pre>\n"],["pos=","Dir","classes/Dir.html#method-i-pos-3D","(p1)","<p>Synonym for <code>Dir#seek</code>, but returns the position parameter.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;)   #=&gt; #&lt;Dir:0x401b3c40&gt; ...\n</code></pre>\n"],["pos=","IO","classes/IO.html#method-i-pos-3D","(p1)","<p>Seeks to the given position (in bytes) in <em>ios</em>.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.pos = 17\nf.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["pos=","StringIO","classes/StringIO.html#method-i-pos-3D","(p1)","<p>Seeks to the given position (in bytes) in <strong>strio</strong>.\n"],["pos=","StringScanner","classes/StringScanner.html#method-i-pos-3D","(p1)","<p>Set the byte position of the scan pointer.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\ns.pos = 7            # ...</code></pre>\n"],["pos=","Tk::RbWidget::Editable_Listbox","classes/Tk/RbWidget/Editable_Listbox.html#method-c-pos-3D","(idx)",""],["pos=","TkTextIO","classes/TkTextIO.html#method-i-pos-3D","(idx)",""],["pos=","TkTextMark","classes/TkTextMark.html#method-i-pos-3D","(where)",""],["pos=","TkTextMark","classes/TkTextMark.html#method-i-pos-3D","(where)",""],["pos_gravity","TkTextIO","classes/TkTextIO.html#method-i-pos_gravity","()",""],["pos_gravity=","TkTextIO","classes/TkTextIO.html#method-i-pos_gravity-3D","(side)",""],["position","REXML::Functions","classes/REXML/Functions.html#method-c-position","( )",""],["position","REXML::IOSource","classes/REXML/IOSource.html#method-i-position","()",""],["position","REXML::ParseException","classes/REXML/ParseException.html#method-i-position","()",""],["position","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-position","()",""],["position","REXML::Source","classes/REXML/Source.html#method-i-position","()",""],["position","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-position","()",""],["position","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-position","(x, y)",""],["positionfrom","Tk::Wm","classes/Tk/Wm.html#method-i-positionfrom","(who=TkComm::None)",""],["positionfrom","Tk::Wm","classes/Tk/Wm.html#method-c-positionfrom","(win, who=TkComm::None)",""],["post","DRb::HTTP0::ClientSide","classes/DRb/HTTP0/ClientSide.html#method-i-post","(url, data)",""],["post","Net::HTTP","classes/Net/HTTP.html#method-i-post","(path, data, initheader = nil, dest = nil)","<p>Posts <code>data</code> (must be a String) to <code>path</code>.\n<code>header</code> must be a Hash like { &#39;Accept&#39; =&gt;\n&#39;<strong>/</strong>&#39;, …\n"],["post","Net::HTTP","classes/Net/HTTP.html#method-i-post","(path, data, initheader = nil, dest = nil)","<p>Posts <code>data</code> (must be a String) to <code>path</code>.\n<code>header</code> must be a Hash like { &#39;Accept&#39; =&gt;\n&#39;<strong>/</strong>&#39;, …\n"],["post","Tk::BWidget::ComboBox","classes/Tk/BWidget/ComboBox.html#method-i-post","()",""],["post","Tk::Menu","classes/Tk/Menu.html#method-i-post","(x, y)",""],["post","Tk::Tcllib::Widget::Dateentry","classes/Tk/Tcllib/Widget/Dateentry.html#method-i-post","()",""],["post","Tk::Tcllib::Widget::Dateentry","classes/Tk/Tcllib/Widget/Dateentry.html#method-i-post","()",""],["post2","Net::HTTP","classes/Net/HTTP.html#method-i-post2","(path, data, initheader = nil)",""],["post2","Net::HTTP","classes/Net/HTTP.html#method-i-post2","(path, data, initheader = nil)",""],["post_build","Gem","classes/Gem.html#method-c-post_build","(&hook)","<p>Adds a post-build hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["post_form","Net::HTTP","classes/Net/HTTP.html#method-c-post_form","(url, params)","<p>Posts HTML form data to the specified URI object. The form data must be\nprovided as a Hash mapping from …\n"],["post_form","Net::HTTP","classes/Net/HTTP.html#method-c-post_form","(url, params)","<p>Posts HTML form data to the specified URI object. The form data must be\nprovided as a Hash mapping from …\n"],["post_install","Gem","classes/Gem.html#method-c-post_install","(&hook)","<p>Adds a post-install hook that will be passed an Gem::Installer instance\nwhen Gem::Installer#install is …\n"],["post_match","MatchData","classes/MatchData.html#method-i-post_match","()","<p>Returns the portion of the original string after the current match.\nEquivalent to the special variable …\n"],["post_match","StringScanner","classes/StringScanner.html#method-i-post_match","()","<p>Return the <strong><em>post</strong>-match</em> (in the regular expression\nsense) of the last scan.\n\n<pre><code>s = StringScanner.new(&#39;test ...</code></pre>\n"],["post_reset","Gem","classes/Gem.html#method-c-post_reset","(&hook)","<p>Adds a hook that will get run after Gem::Specification.reset is run.\n"],["post_uninstall","Gem","classes/Gem.html#method-c-post_uninstall","(&hook)","<p>Adds a post-uninstall hook that will be passed a Gem::Uninstaller instance\nand the spec that was uninstalled …\n"],["postcascade","Tk::Menu","classes/Tk/Menu.html#method-i-postcascade","(index)",""],["postcommand","Tk::Menu","classes/Tk/Menu.html#method-i-postcommand","(cmd=Proc.new)",""],["postproc","IRB::SLex","classes/IRB/SLex.html#method-i-postproc","(token)","<p>\u001b$BMW%A%&#39;%C%/\u001b(B?\n"],["postscript","Tk::Canvas","classes/Tk/Canvas.html#method-i-postscript","(keys)",""],["postscript","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-postscript","(*args)",""],["postscript","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-postscript","(keys)",""],["postscript_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-postscript_cget","(option)",""],["postscript_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-postscript_cget_strict","(option)",""],["postscript_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-postscript_cget_tkstring","(option)",""],["postscript_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-postscript_configinfo","(slot=nil)",""],["postscript_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-postscript_configure","(slot, value=None)",""],["postscript_output","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-postscript_output","(file=nil, keys={})",""],["power","BigDecimal","classes/BigDecimal.html#method-i-power","(p1, p2 = v2)","<p>Returns the value raised to the power of n. Note that n must be an Integer.\n<p>Also available as the operator …\n"],["power!","Bignum","classes/Bignum.html#method-i-power-21","(p1)",""],["power!","Fixnum","classes/Fixnum.html#method-i-power-21","(other)",""],["power!","Float","classes/Float.html#method-i-power-21","(other)",""],["pp","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-pp","(*objs)",""],["pp","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-pp","(*objs)",""],["pp","Kernel","classes/Kernel.html#method-i-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","Kernel","classes/Kernel.html#method-c-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","PP","classes/PP.html#method-c-pp","(obj, out=$>, width=79)","<p>Outputs <code>obj</code> to <code>out</code> in pretty printed format of\n<code>width</code> columns in width.\n<p>If <code>out</code> is omitted, +$&gt;+ is assumed. …\n"],["pp","PP::PPMethods","classes/PP/PPMethods.html#method-i-pp","(obj)","<p>Adds <code>obj</code> to the pretty printing buffer using\nObject#pretty_print or Object#pretty_print_cycle.\n<p>Object#pretty_print_cycle …\n"],["pp_hash","PP::PPMethods","classes/PP/PPMethods.html#method-i-pp_hash","(obj)",""],["pp_object","PP::PPMethods","classes/PP/PPMethods.html#method-i-pp_object","(obj)",""],["ppid","Process","classes/Process.html#method-c-ppid","()","<p>Returns the process id of the parent of this process. Returns untrustworthy\nvalue on Win32/64. Not available …\n"],["ppx","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-ppx","(prefix, *objs)",""],["ppx","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-ppx","(prefix, *objs)",""],["pre_install","Gem","classes/Gem.html#method-c-pre_install","(&hook)","<p>Adds a pre-install hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["pre_match","MatchData","classes/MatchData.html#method-i-pre_match","()","<p>Returns the portion of the original string before the current match.\nEquivalent to the special variable …\n"],["pre_match","StringScanner","classes/StringScanner.html#method-i-pre_match","()","<p>Return the <strong><em>pre</strong>-match</em> (in the regular expression\nsense) of the last scan.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;) ...</code></pre>\n"],["pre_reset","Gem","classes/Gem.html#method-c-pre_reset","(&hook)","<p>Adds a hook that will get run before Gem::Specification.reset is run.\n"],["pre_uninstall","Gem","classes/Gem.html#method-c-pre_uninstall","(&hook)","<p>Adds a pre-uninstall hook that will be passed an Gem::Uninstaller instance\nand the spec that will be …\n"],["precs","BigDecimal","classes/BigDecimal.html#method-i-precs","()","<p>Returns an Array of two Integer values.\n<p>The first value is the current number of significant digits in …\n"],["pred","Integer","classes/Integer.html#method-i-pred","()","<p>Returns the <code>Integer</code> equal to <em>int</em> - 1.\n\n<pre><code>1.pred      #=&gt; 0\n(-1).pred   #=&gt; -2\n</code></pre>\n"],["pred","Integer","classes/Integer.html#method-i-pred","()","<p>Returns the <code>Integer</code> equal to <em>int</em> - 1.\n\n<pre><code>1.pred      #=&gt; 0\n(-1).pred   #=&gt; -2\n</code></pre>\n"],["predicate","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-predicate","(path)",""],["predicate","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-predicate","( elements, path )","<p>A predicate filters a node-set with respect to an axis to produce a new\nnode-set. For each node in the …\n"],["predicate","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-predicate","(path, nodeset)",""],["predicate_to_string","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-predicate_to_string","( path, &block )",""],["prefer","TkPackage","classes/TkPackage.html#method-i-prefer","(setting = None)",""],["preferences","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-preferences","()",""],["preferences","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-preferences","()",""],["preferences","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-preferences","()",""],["preferences","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-preferences","()",""],["prefix","Gem","classes/Gem.html#method-c-prefix","()","<p>The directory prefix this RubyGems was installed at. If your prefix is in a\nstandard location (ie, rubygems …\n"],["prefix","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXMLDOMText","classes/IXMLDOMText.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","IXTLRuntime","classes/IXTLRuntime.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-prefix","()","<p>BSTR prefix the prefix for the namespace applying to the node\n"],["prefix","REXML::Attribute","classes/REXML/Attribute.html#method-i-prefix","()","<p>Returns the namespace of the attribute.\n\n<pre><code>e = Element.new( &quot;elns:myelement&quot; )\ne.add_attribute( &quot;nsa:a&quot;, ...</code></pre>\n"],["prefix","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-prefix","( namespace=nil )",""],["prefixes","REXML::Element","classes/REXML/Element.html#method-i-prefixes","()","<p>Evaluates to an <code>Array</code> containing the prefixes (names) of all\ndefined namespaces at this context node. …\n"],["prelude","Object","classes/Object.html#method-i-prelude","(f, out)",""],["prelude_base","Prelude","classes/Prelude.html#method-i-prelude_base","(filename)",""],["prelude_name","Prelude","classes/Prelude.html#method-i-prelude_name","(filename)",""],["prepare_backtrace","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-prepare_backtrace","(uri, result)",""],["prepare_backtrace","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-prepare_backtrace","(uri, result)",""],["prepare_fasta_output","Object","classes/Object.html#method-i-prepare_fasta_output","(n)","<p>prepare &#39;fasta.output&#39;\n"],["prepare_range","WEBrick::HTTPServlet::DefaultFileHandler","classes/WEBrick/HTTPServlet/DefaultFileHandler.html#method-i-prepare_range","(range, filesize)",""],["prepare_wc_input","Object","classes/Object.html#method-i-prepare_wc_input","()","<p>prepare &#39;wc.input&#39;\n"],["prepend","OptionParser::List","classes/OptionParser/List.html#method-i-prepend","(*args)","<p>Inserts <code>switch</code> at the head of the list, and associates short,\nlong and negated long options. Arguments …\n"],["prepend","String","classes/String.html#method-i-prepend","(p1)","<p>Prepend—Prepend the given string to <em>str</em>.\n<p>a = “world” a.prepend(“hello ”) #=&gt; …\n"],["preproc","IRB::SLex","classes/IRB/SLex.html#method-i-preproc","(token, proc)",""],["preprocess","Net::Telnet","classes/Net/Telnet.html#method-i-preprocess","(string)","<p>Preprocess received data from the host.\n<p>Performs newline conversion and detects telnet command sequences. …\n"],["prerelease?","Gem::Dependency","classes/Gem/Dependency.html#method-i-prerelease-3F","()","<p>Does this dependency require a prerelease?\n"],["prerelease?","Gem::Requirement","classes/Gem/Requirement.html#method-i-prerelease-3F","()",""],["prerelease?","Gem::Requirement","classes/Gem/Requirement.html#method-i-prerelease-3F","()",""],["prerelease?","Version","classes/Version.html#method-i-prerelease-3F","()","<p>A version is considered a prerelease if it contains a letter.\n"],["prerelease_gems","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-prerelease_gems","()",""],["prerelease_gems","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-prerelease_gems","()",""],["prerelease_specs","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-prerelease_specs","()","<p>An array including only the prerelease gemspecs\n"],["prerelease_specs","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-prerelease_specs","()","<p>An array including only the prerelease gemspecs\n"],["prerequisite_tasks","Rake::Task","classes/Rake/Task.html#method-i-prerequisite_tasks","()","<p>List of prerequisite tasks\n"],["present","TkPackage","classes/TkPackage.html#method-i-present","(package, version=None)",""],["present_exact","TkPackage","classes/TkPackage.html#method-i-present_exact","(package, version)",""],["preserveWhiteSpace","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-preserveWhiteSpace","()","<p>BOOL preserveWhiteSpace indicates whether the parser preserves whitespace\n"],["preserveWhiteSpace","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-preserveWhiteSpace","()","<p>BOOL preserveWhiteSpace indicates whether the parser preserves whitespace\n"],["preserveWhiteSpace","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-preserveWhiteSpace","()","<p>BOOL preserveWhiteSpace indicates whether the parser preserves whitespace\n"],["preserveWhiteSpace=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-preserveWhiteSpace-3D","(arg0)","<p>VOID preserveWhiteSpace indicates whether the parser preserves whitespace\n"],["preserveWhiteSpace=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-preserveWhiteSpace-3D","(arg0)","<p>VOID preserveWhiteSpace indicates whether the parser preserves whitespace\n"],["preserveWhiteSpace=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-preserveWhiteSpace-3D","(arg0)","<p>VOID preserveWhiteSpace indicates whether the parser preserves whitespace\n"],["pretty","CGI","classes/CGI.html#method-c-pretty","(string, shift = \" \")","<p>Prettify (indent) an HTML string.\n<p><code>string</code> is the HTML string to indent.  <code>shift</code> is\nthe indentation unit …\n"],["pretty_generate","JSON","classes/JSON.html#method-i-pretty_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. The returned document is a prettier …\n"],["pretty_inspect","Kernel","classes/Kernel.html#method-i-pretty_inspect","()","<p>returns a pretty printed object as a string.\n"],["pretty_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_name","()",""],["pretty_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-pretty_name","()","<p>Method/attribute name with class/instance indicator\n"],["pretty_new_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_new_name","()","<p>New name with prefix &#39;::&#39; or &#39;#&#39;.\n"],["pretty_old_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_old_name","()","<p>Old name with prefix &#39;::&#39; or &#39;#&#39;.\n"],["pretty_print","Array","classes/Array.html#method-i-pretty_print","(q)",""],["pretty_print","ENV","classes/ENV.html#method-i-pretty_print","(q)",""],["pretty_print","File::Stat","classes/File/Stat.html#method-i-pretty_print","(q)",""],["pretty_print","Hash","classes/Hash.html#method-i-pretty_print","(q)",""],["pretty_print","MatchData","classes/MatchData.html#method-i-pretty_print","(q)",""],["pretty_print","Object","classes/Object.html#method-i-pretty_print","(q)",""],["pretty_print","PP::ObjectMixin","classes/PP/ObjectMixin.html#method-i-pretty_print","(q)","<p>A default pretty printing method for general objects. It calls\n#pretty_print_instance_variables to list …\n"],["pretty_print","Range","classes/Range.html#method-i-pretty_print","(q)",""],["pretty_print","Struct","classes/Struct.html#method-i-pretty_print","(q)",""],["pretty_print_cycle","Array","classes/Array.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","Hash","classes/Hash.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","Object","classes/Object.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_cycle","PP::ObjectMixin","classes/PP/ObjectMixin.html#method-i-pretty_print_cycle","(q)","<p>A default pretty printing method for general objects that are detected as\npart of a cycle.\n"],["pretty_print_cycle","Struct","classes/Struct.html#method-i-pretty_print_cycle","(q)",""],["pretty_print_inspect","PP::ObjectMixin","classes/PP/ObjectMixin.html#method-i-pretty_print_inspect","()","<p>Is #inspect implementation using #pretty_print. If you implement\n#pretty_print, it can be used as follows. …\n"],["pretty_print_instance_variables","PP::ObjectMixin","classes/PP/ObjectMixin.html#method-i-pretty_print_instance_variables","()","<p>Returns a sorted array of instance variable names.\n<p>This method should return an array of names of instance …\n"],["prev","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-prev","()",""],["prev","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-prev","()",""],["prev","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-prev","()",""],["prev","TkManageFocus","classes/TkManageFocus.html#method-c-prev","(win)",""],["prev_day","Date","classes/Date.html#method-i-prev_day","(p1 = v1)","<p>This method is equivalent to d - n.\n"],["prev_month","Date","classes/Date.html#method-i-prev_month","(p1 = v1)","<p>This method is equivalent to d &lt;&lt; n\n"],["prev_sibling","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-prev_sibling","()",""],["prev_year","Date","classes/Date.html#method-i-prev_year","(p1 = v1)","<p>This method is equivalent to d &lt;&lt; (n * 12)\n"],["previous","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-previous","()",""],["previous","TkTextMark","classes/TkTextMark.html#method-i-previous","(index = nil)",""],["previous","TkTextMark","classes/TkTextMark.html#method-i-previous","(index = nil)",""],["previous=","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-previous-3D","( previous )",""],["previousSibling","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXMLDOMText","classes/IXMLDOMText.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","IXTLRuntime","classes/IXTLRuntime.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previousSibling","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-previousSibling","()","<p>IXMLDOMNode previousSibling left sibling of the node\n"],["previous_element","REXML::Element","classes/REXML/Element.html#method-i-previous_element","()","<p>Returns the previous sibling that is an element, or nil if there is no\nElement sibling prior to this …\n"],["previous_mark","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-previous_mark","(index)",""],["previous_sibling=","REXML::Child","classes/REXML/Child.html#method-i-previous_sibling-3D","(other)","<p>Sets the previous sibling of this child.  This can be used to insert a\nchild before some other child. …\n"],["previous_sibling_node","REXML::Node","classes/REXML/Node.html#method-i-previous_sibling_node","()","<p>@return the previous sibling (nil if unset)\n"],["prevrange","TkTextTag","classes/TkTextTag.html#method-i-prevrange","(first, last=None)",""],["prevrange","TkTextTag","classes/TkTextTag.html#method-i-prevrange","(first, last=None)",""],["primary","Inspector","classes/Inspector.html#method-i-primary","()",""],["primary","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-c-primary","()","<p>Returns the first advertised TupleSpace.\n"],["prime?","Integer","classes/Integer.html#method-i-prime-3F","()","<p>Returns true if <code>self</code> is a prime number, false for a composite.\n"],["prime?","Integer","classes/Integer.html#method-i-prime-3F","()","<p>Returns true if <code>self</code> is a prime number, false for a composite.\n"],["prime?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-prime-3F","(p1 = v1)","<p>Parameters\n<p><code>checks</code> - integer\n\n"],["prime?","Prime","classes/Prime.html#method-i-prime-3F","(value, generator = Prime::Generator23.new)","<p>Returns true if <code>value</code> is prime, false for a composite.\n<p>Parameters\n<p><code>value</code> &mdash; an arbitrary integer to be checked. …\n"],["prime_division","Integer","classes/Integer.html#method-i-prime_division","(generator = Prime::Generator23.new)","<p>Returns the factorization of <code>self</code>.\n<p>See Prime#prime_division for more details.\n"],["prime_division","Integer","classes/Integer.html#method-i-prime_division","(generator = Prime::Generator23.new)","<p>Returns the factorization of <code>self</code>.\n<p>See Prime#prime_division for more details.\n"],["prime_division","Prime","classes/Prime.html#method-i-prime_division","(value, generator= Prime::Generator23.new)","<p>Returns the factorization of <code>value</code>.\n<p>Parameters\n<p><code>value</code> &mdash; An arbitrary integer.\n"],["prime_fasttest?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-prime_fasttest-3F","(p1 = v1, p2 = v2)","<p>Parameters\n<p><code>checks</code> - integer\n<p><code>trial_div</code> - boolean\n"],["primes","Prime::TrialDivision","classes/Prime/TrialDivision.html#method-i-primes","()",""],["primes_so_far","Prime::TrialDivision","classes/Prime/TrialDivision.html#method-i-primes_so_far","()",""],["primitive_convert","Encoding::Converter","classes/Encoding/Converter.html#method-i-primitive_convert","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = {})","<p>possible opt elements:\n\n<pre><code>hash form:\n  :partial_input =&gt; true           # source buffer may be part of larger ...\n</code></pre>\n"],["primitive_errinfo","Encoding::Converter","classes/Encoding/Converter.html#method-i-primitive_errinfo","()","<p>primitive_errinfo returns important information regarding the last error as\na 5-element array:\n\n<pre><code>[result, ...</code></pre>\n"],["print","ARGF","classes/ARGF.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. The stream must be opened for\nwriting. If the output field separator …\n"],["print","CGI","classes/CGI.html#method-i-print","(*options)","<p>Print an argument or list of arguments to the default output stream\n\n<pre><code>cgi = CGI.new\ncgi.print    # default: ...</code></pre>\n"],["print","Cal","classes/Cal.html#method-i-print","(y, m)",""],["print","IO","classes/IO.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. The stream must be opened for\nwriting. If the output field separator …\n"],["print","IO::writable","classes/IO/writable.html#method-i-print","(*args)","<p>See IO#print.\n"],["print","IRB::Locale","classes/IRB/Locale.html#method-i-print","(*opts)",""],["print","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-print","(*opts)",""],["print","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-print","(*opts)",""],["print","IRB::StdioOutputMethod","classes/IRB/StdioOutputMethod.html#method-i-print","(*opts)",""],["print","Kernel","classes/Kernel.html#method-i-print","(*args)","<p>Prints each object in turn to <code>$stdout</code>. If the output field\nseparator (<code>$,</code>) is not <code>nil</code>, its contents will …\n"],["print","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-print","(str)",""],["print","Net::Telnet","classes/Net/Telnet.html#method-i-print","(string)","<p>Sends a string to the host.\n<p>This does <em>not</em> automatically append a newline to the string. \nEmbedded newlines …\n"],["print","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-print","(*args)","<p>Writes <code>args</code> to the stream.\n<p>See IO#print for full details.\n"],["print","Tk::Iwidgets::Canvasprintbox","classes/Tk/Iwidgets/Canvasprintbox.html#method-i-print","()",""],["print","Tk::Iwidgets::Canvasprintdialog","classes/Tk/Iwidgets/Canvasprintdialog.html#method-i-print","()",""],["print","TkTextIO","classes/TkTextIO.html#method-i-print","(arg=$_, *args)",""],["print","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-print","(*args)","<p>Same as IO.\n"],["print_alias","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_alias","(*)","<p>Prints when an alias is added\n"],["print_attribute","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_attribute","(*)","<p>Prints when an attribute is added\n"],["print_class","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_class","(*)","<p>Prints when a class is added\n"],["print_constant","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_constant","(*)","<p>Prints when a constant is added\n"],["print_dependencies","Gem::Commands::DependencyCommand","classes/Gem/Commands/DependencyCommand.html#method-i-print_dependencies","(spec, level = 0)",""],["print_file","RDoc::Stats::Normal","classes/RDoc/Stats/Normal.html#method-i-print_file","(files_so_far, filename)","<p>Prints a file with a progress bar\n"],["print_file","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_file","(*)","<p>Prints when a file is added\n"],["print_header","Object","classes/Object.html#method-i-print_header","(y, m, d, p, w)",""],["print_key","Tk::BLT","classes/Tk/BLT.html#method-c-print_key","(graph)",""],["print_key","Tk::BLT::GraphCommand","classes/Tk/BLT/GraphCommand.html#method-i-print_key","()",""],["print_method","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_method","(*)","<p>Prints when a method is added\n"],["print_module","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_module","(*)","<p>Prints when a module is added\n"],["print_profile","Profiler__","classes/Profiler__.html#method-i-print_profile","(f)",""],["print_rakefile_directory","Rake::Application","classes/Rake/Application.html#method-i-print_rakefile_directory","(location)",""],["print_rakefile_directory","Rake::Application","classes/Rake/Application.html#method-i-print_rakefile_directory","(location)",""],["print_usage","IRB","classes/IRB.html#method-c-print_usage","()",""],["printf","ARGF","classes/ARGF.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See <code>Kernel#sprintf</code> …\n"],["printf","IO","classes/IO.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See <code>Kernel#sprintf</code> …\n"],["printf","IO::writable","classes/IO/writable.html#method-i-printf","(*args)","<p>See IO#printf.\n"],["printf","IRB::Locale","classes/IRB/Locale.html#method-i-printf","(*opts)",""],["printf","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-printf","(format, *opts)",""],["printf","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-printf","(format, *opts)","<p>extend printf\n"],["printf","Kernel","classes/Kernel.html#method-i-printf","(*args)","<p>Equivalent to:\n\n<pre><code>io.write(sprintf(string, obj, ...)</code></pre>\n<p>or\n"],["printf","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-printf","(*args)",""],["printf","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-printf","(s, *args)","<p>Formats and writes to the stream converting parameters under control of the\nformat string.\n<p>See Kernel#sprintf …\n"],["printf","TkTextIO","classes/TkTextIO.html#method-i-printf","(*args)",""],["printf","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-printf","(*args)","<p>Same as IO.\n"],["printn","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-printn","(*opts)",""],["printn","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-printn","(*opts)",""],["priority","Thread","classes/Thread.html#method-i-priority","()","<p>Returns the priority of <em>thr</em>. Default is inherited from the current\nthread which creating the new thread, …\n"],["priority=","Thread","classes/Thread.html#method-i-priority-3D","(p1)","<p>Sets the priority of <em>thr</em> to <em>integer</em>. Higher-priority\nthreads will run more frequently than lower-priority …\n"],["private?","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-private-3F","()","<p>Indicates whether this DH instance has a private key associated with it or\nnot. The private key may be …\n"],["private?","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-private-3F","()","<p>Indicates whether this DSA instance has a private key associated with it or\nnot. The private key may …\n"],["private?","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private-3F","()","<p>Does this keypair contain a private key?\n"],["private?","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private-3F","()","<p>Does this keypair contain a private key?\n"],["private_class_method","Module","classes/Module.html#method-i-private_class_method","(*args)","<p>Makes existing class methods private. Often used to hide the default\nconstructor <code>new</code>.\n\n<pre><code>class SimpleSingleton ...\n</code></pre>\n"],["private_decrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private_decrypt","(p1, p2 = v2)","<p>Decrypt <code>string</code>, which has been encrypted with the public key,\nwith the private key.  <code>padding</code> defaults …\n"],["private_decrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private_decrypt","(p1, p2 = v2)","<p>Decrypt <code>string</code>, which has been encrypted with the public key,\nwith the private key.  <code>padding</code> defaults …\n"],["private_encrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private_encrypt","(p1, p2 = v2)","<p>Encrypt <code>string</code> with the private key.  <code>padding</code>\ndefaults to PKCS1_PADDING. The encrypted string output …\n"],["private_encrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private_encrypt","(p1, p2 = v2)","<p>Encrypt <code>string</code> with the private key.  <code>padding</code>\ndefaults to PKCS1_PADDING. The encrypted string output …\n"],["private_instance_methods","Module","classes/Module.html#method-i-private_instance_methods","(*args)","<p>Returns a list of the private instance methods defined in <em>mod</em>. If\nthe optional parameter is not <code>false</code> …\n"],["private_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-private_key","()","<p>See the OpenSSL documentation for EC_KEY_get0_private_key()\n"],["private_key=","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-private_key-3D","(p1)","<p>See the OpenSSL documentation for EC_KEY_set_private_key()\n"],["private_key?","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-private_key-3F","()","<p>Both public_key? and private_key? may return false at the same time unlike\nother PKey classes.\n"],["private_method_defined?","Module","classes/Module.html#method-i-private_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named private method is defined by _ mod_\n(or its included modules and, if <em>mod</em> is …\n"],["private_methods","Object","classes/Object.html#method-i-private_methods","(*args)","<p>Returns the list of private methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["proc","Kernel","classes/Kernel.html#method-i-proc","()","<p>Equivalent to <code>Proc.new</code>.\n"],["procedure","TkComm","classes/TkComm.html#method-c-procedure","(val)",""],["procedure","TkVariable","classes/TkVariable.html#method-i-procedure","()",""],["procedure","TkVariable","classes/TkVariable.html#method-i-procedure","()",""],["procedure=","TkVariable","classes/TkVariable.html#method-i-procedure-3D","(cmd)",""],["procedure=","TkVariable","classes/TkVariable.html#method-i-procedure-3D","(cmd)",""],["procedure_element","TkVariable","classes/TkVariable.html#method-i-procedure_element","(*idxs)",""],["procedure_element","TkVariable","classes/TkVariable.html#method-i-procedure_element","(*idxs)",""],["procedure_type=","TkVariable","classes/TkVariable.html#method-i-procedure_type-3D","(cmd)",""],["procedure_type=","TkVariable","classes/TkVariable.html#method-i-procedure_type-3D","(cmd)",""],["process","Net::IMAP::CramMD5Authenticator","classes/Net/IMAP/CramMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::DigestMD5Authenticator","classes/Net/IMAP/DigestMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::LoginAuthenticator","classes/Net/IMAP/LoginAuthenticator.html#method-i-process","(data)",""],["process","Net::IMAP::PlainAuthenticator","classes/Net/IMAP/PlainAuthenticator.html#method-i-process","(data)",""],["process","RubyVM::VPATH","classes/RubyVM/VPATH.html#method-i-process","(*args, &block)",""],["process","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-i-process","(data)",""],["process_args","Gem::CommandManager","classes/Gem/CommandManager.html#method-i-process_args","(args)",""],["process_args","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-process_args","(argv)","<p>Parses <code>argv</code> and returns a Hash of options\n"],["process_directive","RDoc::Parser","classes/RDoc/Parser.html#method-c-process_directive","(code_object, directive, value)","<p>Processes common directives for CodeObjects for the C and Ruby parsers.\n<p>Applies <code>directive</code>&#39;s <code>value</code> …\n"],["process_options","Gem::Installer","classes/Gem/Installer.html#method-i-process_options","()",""],["process_url","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-process_url","(url)","<p>Process the given URL\n"],["processingInstruction","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-processingInstruction","(target, content)",""],["processing_instruction","REXML::Functions","classes/REXML/Functions.html#method-c-processing_instruction","( node )",""],["processing_instruction","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-processing_instruction","(target, data)",""],["produce","PiDigitSpigot","classes/PiDigitSpigot.html#method-i-produce","(i)",""],["product","Array","classes/Array.html#method-i-product","(*args)","<p>Returns an array of all combinations of elements from all arrays. The\nlength of the returned array is …\n"],["progid","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-progid","()","<p>Returns ProgID if it exists. If not found, then returns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel ...</code></pre>\n"],["progids","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-c-progids","()","<p>Returns array of ProgID.\n"],["program_name","OptionParser","classes/OptionParser.html#method-i-program_name","()","<p>Program name to be emitted in error message and default banner, defaults to\n$0.\n"],["progress","Object","classes/Object.html#method-i-progress","(n = 5)",""],["progress","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-progress","(position)",""],["progress_message","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-progress_message","(*args)",""],["progress_reporter","Gem::SilentUI","classes/Gem/SilentUI.html#method-i-progress_reporter","(*args)",""],["progress_reporter","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-progress_reporter","(*args)","<p>Return a progress reporter object chosen from the current verbosity.\n"],["promote_load_path","Gem","classes/Gem.html#method-c-promote_load_path","(gem_name, over_name)","<p>Promotes the load paths of the <code>gem_name</code> over the load paths of\n<code>over_name</code>.  Useful for allowing one gem …\n"],["prompt","IRB::Irb","classes/IRB/Irb.html#method-i-prompt","(prompt, ltype, indent, line_no)",""],["prompt","Object","classes/Object.html#method-i-prompt","(msg)",""],["prompt","RubyLex","classes/RubyLex.html#method-i-prompt","()",""],["prompt_mode=","IRB::Context","classes/IRB/Context.html#method-i-prompt_mode-3D","(mode)",""],["prompting?","IRB::Context","classes/IRB/Context.html#method-i-prompting-3F","()",""],["propagate","TkGrid","classes/TkGrid.html#method-c-propagate","(master, mode=None)",""],["propagate","TkGrid","classes/TkGrid.html#method-c-propagate","(master, mode=None)",""],["propagate","TkPack","classes/TkPack.html#method-c-propagate","(master, mode=None)",""],["propagate","TkPack","classes/TkPack.html#method-c-propagate","(master, mode=None)",""],["propagate_set","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-propagate_set","(src_win, first, last)",""],["proper_subset?","Set","classes/Set.html#method-i-proper_subset-3F","(set)","<p>Returns true if the set is a proper subset of the given set.\n"],["proper_superset?","Set","classes/Set.html#method-i-proper_superset-3F","(set)","<p>Returns true if the set is a proper superset of the given set.\n"],["propfind","Net::HTTP","classes/Net/HTTP.html#method-i-propfind","(path, body = nil, initheader = {'Depth' => '0'})","<p>Sends a PROPFIND request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["propfind","Net::HTTP","classes/Net/HTTP.html#method-i-propfind","(path, body = nil, initheader = {'Depth' => '0'})","<p>Sends a PROPFIND request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["proppatch","Net::HTTP","classes/Net/HTTP.html#method-i-proppatch","(path, body, initheader = nil)","<p>Sends a PROPPATCH request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["proppatch","Net::HTTP","classes/Net/HTTP.html#method-i-proppatch","(path, body, initheader = nil)","<p>Sends a PROPPATCH request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["protected_instance_methods","Module","classes/Module.html#method-i-protected_instance_methods","(*args)","<p>Returns a list of the protected instance methods defined in <em>mod</em>.\nIf the optional parameter is not <code>false</code> …\n"],["protected_method_defined?","Module","classes/Module.html#method-i-protected_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named protected method is defined by\n<em>mod</em> (or its included modules and, if <em>mod</em> is …\n"],["protected_methods","Delegator","classes/Delegator.html#method-i-protected_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["protected_methods","Object","classes/Object.html#method-i-protected_methods","(*args)","<p>Returns the list of protected methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["protocol","Addrinfo","classes/Addrinfo.html#method-i-protocol","()","<p>returns the socket type as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).protocol == Socket::IPPROTO_TCP #=&gt; ...\n</code></pre>\n"],["protocol","Tk::Wm","classes/Tk/Wm.html#method-c-protocol","(win, name=nil, cmd=nil, &b)",""],["protocol","Tk::Wm","classes/Tk/Wm.html#method-i-protocol","(name=nil, cmd=nil, &b)",""],["protocols","Tk::Wm","classes/Tk/Wm.html#method-i-protocols","(kv=nil)",""],["protocols","Tk::Wm","classes/Tk/Wm.html#method-c-protocols","(win, kv=nil)",""],["provide","Rinda::RingProvider","classes/Rinda/RingProvider.html#method-i-provide","()","<p>Advertises this service on the primary remote TupleSpace.\n"],["provide","TkPackage","classes/TkPackage.html#method-i-provide","(package, version=nil)",""],["proxy","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-proxy","(prefix=nil, *args)","<p>Proxy generating methods ——————————————\n"],["proxy2","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-proxy2","(prefix=nil, *args)",""],["proxy2_async","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-proxy2_async","(prefix=nil, *args)",""],["proxy?","Net::HTTP","classes/Net/HTTP.html#method-i-proxy-3F","()","<p>True if self is a HTTP proxy class.\n"],["proxy?","Net::HTTP","classes/Net/HTTP.html#method-i-proxy-3F","()","<p>True if self is a HTTP proxy class.\n"],["proxy_address","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_address","()","<p>A convenience method for accessing value of proxy_address from Net::HTTP.\n"],["proxy_address","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_address","()","<p>A convenience method for accessing value of proxy_address from Net::HTTP.\n"],["proxy_async","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-proxy_async","(prefix=nil, *args)",""],["proxy_auth","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-proxy_auth","(req, res)",""],["proxy_auth_get","Win32::SSPI::NegotiateAuth","classes/Win32/SSPI/NegotiateAuth.html#method-c-proxy_auth_get","(http, path, user = nil, domain = nil)","<p>Given a connection and a request path, performs authentication as the\ncurrent user and returns the response …\n"],["proxy_basic_auth","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-proxy_basic_auth","(account, password)","<p>Set Proxy-Authorization: header for “Basic” authorization.\n"],["proxy_basic_auth","WEBrick::HTTPAuth","classes/WEBrick/HTTPAuth.html#method-i-proxy_basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a proxied request.\nWhen called with a request  …\n"],["proxy_class?","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_class-3F","()","<p>returns true if self is a class which was created by HTTP::Proxy.\n"],["proxy_class?","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_class-3F","()","<p>returns true if self is a class which was created by HTTP::Proxy.\n"],["proxy_coord","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-proxy_coord","()",""],["proxy_coord","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-proxy_coord","()",""],["proxy_forget","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-proxy_forget","()",""],["proxy_forget","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-proxy_forget","()",""],["proxy_pass","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_pass","()","<p>A convenience method for accessing value of proxy_pass from Net::HTTP.\n"],["proxy_pass","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_pass","()","<p>A convenience method for accessing value of proxy_pass from Net::HTTP.\n"],["proxy_place","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-proxy_place","(x, y)",""],["proxy_place","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-proxy_place","(x, y)",""],["proxy_port","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_port","()","<p>A convenience method for accessing value of proxy_port from Net::HTTP.\n"],["proxy_port","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_port","()","<p>A convenience method for accessing value of proxy_port from Net::HTTP.\n"],["proxy_service","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-proxy_service","(req, res)",""],["proxy_uri","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-proxy_uri","(req, res)",""],["proxy_user","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_user","()","<p>A convenience method for accessing value of proxy_user from Net::HTTP.\n"],["proxy_user","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_user","()","<p>A convenience method for accessing value of proxy_user from Net::HTTP.\n"],["proxyaddr","Net::HTTP","classes/Net/HTTP.html#method-i-proxyaddr","()",""],["proxyaddr","Net::HTTP","classes/Net/HTTP.html#method-i-proxyaddr","()",""],["proxyport","Net::HTTP","classes/Net/HTTP.html#method-i-proxyport","()",""],["proxyport","Net::HTTP","classes/Net/HTTP.html#method-i-proxyport","()",""],["prune","Find","classes/Find.html#method-c-prune","()","<p>Skips the current file or directory, restarting the loop with the next\nentry. If the current file is …\n"],["prune","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-prune","(node)",""],["ps_print","Object","classes/Object.html#method-i-ps_print","(canvas, fname)",""],["pseudo_toplevel_evaluable=","MultiTkIp_PseudoToplevel_Evaluable","classes/MultiTkIp_PseudoToplevel_Evaluable.html#method-i-pseudo_toplevel_evaluable-3D","(mode)",""],["pseudo_toplevel_evaluable?","MultiTkIp_PseudoToplevel_Evaluable","classes/MultiTkIp_PseudoToplevel_Evaluable.html#method-i-pseudo_toplevel_evaluable-3F","()","<p>def pseudo_toplevel_eval(body = Proc.new)\n\n<pre><code>Thread.current[:TOPLEVEL] = self\nbegin\n  body.call\nensure\n  ...</code></pre>\n"],["psych_to_yaml","Object","classes/Object.html#method-i-psych_to_yaml","(options = {})","<p>Convert an object to YAML.  See Psych.dump for more information on the\navailable <code>options</code>.\n"],["psych_y","Kernel","classes/Kernel.html#method-i-psych_y","(*objects)",""],["psych_yaml_as","Module","classes/Module.html#method-i-psych_yaml_as","(url)",""],["pthread_check","Object","classes/Object.html#method-i-pthread_check","()",""],["ptr","DL::CFunc","classes/DL/CFunc.html#method-i-ptr","()","<p>Get the underlying function pointer as a DL::CPtr object.\n"],["ptr","DL::CPtr","classes/DL/CPtr.html#method-i-ptr","()","<p>Returns a DL::CPtr that is a dereferenced pointer for this DL::CPtr.\nAnalogous to the star operator in …\n"],["ptr","DL::CPtr","classes/DL/CPtr.html#method-i-ptr","()","<p>Returns a DL::CPtr that is a dereferenced pointer for this DL::CPtr.\nAnalogous to the star operator in …\n"],["ptr=","DL::CFunc","classes/DL/CFunc.html#method-i-ptr-3D","(p1)","<p>Set the underlying function pointer to a DL::CPtr named\n<code>pointer</code>.\n"],["public","REXML::DocType","classes/REXML/DocType.html#method-i-public","()","<p>This method retrieves the public identifier identifying the document&#39;s\nDTD.\n<p>Method contributed by …\n"],["public?","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-public-3F","()","<p>Indicates whether this DH instance has a public key associated with it or\nnot. The public key may be …\n"],["public?","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-public-3F","()","<p>Indicates whether this DSA instance has a public key associated with it or\nnot. The public key may be …\n"],["public?","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public-3F","()","<p>The return value is always true since every private key is also a public\nkey.\n"],["public?","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public-3F","()","<p>The return value is always true since every private key is also a public\nkey.\n"],["publicId","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-publicId","()","<p>VARIANT publicId the public ID\n"],["publicId","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-publicId","()","<p>VARIANT publicId the public ID\n"],["public_class_method","Module","classes/Module.html#method-i-public_class_method","(*args)","<p>Makes a list of existing class methods public.\n"],["public_decrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_decrypt","(p1, p2 = v2)","<p>Decrypt <code>string</code>, which has been encrypted with the private key,\nwith the public key.  <code>padding</code> defaults …\n"],["public_decrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_decrypt","(p1, p2 = v2)","<p>Decrypt <code>string</code>, which has been encrypted with the private key,\nwith the public key.  <code>padding</code> defaults …\n"],["public_encrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_encrypt","(p1, p2 = v2)","<p>Encrypt <code>string</code> with the public key.  <code>padding</code>\ndefaults to PKCS1_PADDING. The encrypted string output can …\n"],["public_encrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_encrypt","(p1, p2 = v2)","<p>Encrypt <code>string</code> with the public key.  <code>padding</code>\ndefaults to PKCS1_PADDING. The encrypted string output can …\n"],["public_instance_method","Module","classes/Module.html#method-i-public_instance_method","(p1)","<p>Similar to <em>instance_method</em>, searches public method only.\n"],["public_instance_methods","Module","classes/Module.html#method-i-public_instance_methods","(*args)","<p>Returns a list of the public instance methods defined in <em>mod</em>. If\nthe optional parameter is not <code>false</code> …\n"],["public_key","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-public_key","()",""],["public_key","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-public_key","()","<p>Returns a new DH instance that carries just the public information, i.e.\nthe prime <code>p</code> and the generator …\n"],["public_key","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-public_key","()","<p>Returns a new DSA instance that carries just the public key information. If\nthe current instance has …\n"],["public_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-public_key","()","<p>See the OpenSSL documentation for EC_KEY_get0_public_key()\n"],["public_key","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_key","()","<p>Makes new RSA instance containing the public key from the private key.\n"],["public_key","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_key","()","<p>Makes new RSA instance containing the public key from the private key.\n"],["public_key","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-public_key","()",""],["public_key","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-public_key","()",""],["public_key=","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-public_key-3D","(p1)",""],["public_key=","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-public_key-3D","(p1)","<p>See the OpenSSL documentation for EC_KEY_set_public_key()\n"],["public_key=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-public_key-3D","(p1)",""],["public_key=","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-public_key-3D","(p1)",""],["public_key?","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-public_key-3F","()","<p>Both public_key? and private_key? may return false at the same time unlike\nother PKey classes.\n"],["public_method","Object","classes/Object.html#method-i-public_method","(p1)","<p>Similar to <em>method</em>, searches public method only.\n"],["public_method_defined?","Module","classes/Module.html#method-i-public_method_defined-3F","(p1)","<p>Returns <code>true</code> if the named public method is defined by\n<em>mod</em> (or its included modules and, if <em>mod</em> is a class, …\n"],["public_methods","Delegator","classes/Delegator.html#method-i-public_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["public_methods","Object","classes/Object.html#method-i-public_methods","(*args)","<p>Returns the list of public methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["public_send","Object","classes/Object.html#method-i-public_send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. Unlike send, public_send …\n"],["pull","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-pull","()","<p>Returns the next event.  This is a <code>PullEvent</code> object.\n"],["pull","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-pull","()",""],["pull","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-pull","(win, fmt)",""],["purpose=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-purpose-3D","(p1)",""],["push","Array","classes/Array.html#method-i-push","(*args)","<p>Append—Pushes the given object(s) on to the end of this array. This\nexpression returns the array itself, …\n"],["push","CSV::Row","classes/CSV/Row.html#method-i-push","(*args)","<p>A shortcut for appending multiple fields.  Equivalent to:\n\n<pre><code>args.each { |arg| csv_row &lt;&lt; arg }\n</code></pre>\n<p>This method …\n"],["push","CSV::Table","classes/CSV/Table.html#method-i-push","(*rows)","<p>A shortcut for appending multiple rows.  Equivalent to:\n\n<pre><code>rows.each { |row| self &lt;&lt; row }\n</code></pre>\n<p>This method returns …\n"],["push","DRb::HTTP0::Server","classes/DRb/HTTP0/Server.html#method-i-push","(callback)",""],["push","IRB::History","classes/IRB/History.html#method-i-push","(no, val)",""],["push","MultiTkIp::Command_Queue","classes/MultiTkIp/Command_Queue.html#method-i-push","(value)",""],["push","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-push","(object)",""],["push","Queue","classes/Queue.html#method-i-push","(obj)","<p>Pushes <code>obj</code> to the queue.\n"],["push","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-push","(*parts)","<p>Appends <code>parts</code> to the document\n"],["push","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-push","(*items)","<p>Appends <code>items</code> to the list\n"],["push","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-push","(*parts)","<p>Adds <code>parts</code> to the ListItem\n"],["push","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-push","(*texts)","<p>Appends <code>texts</code> onto this Paragraph\n"],["push","REXML::Parent","classes/REXML/Parent.html#method-i-push","( object )",""],["push","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-push","(tuple)","<p>Add <code>tuple</code> to the TupleBag.\n"],["push","SizedQueue","classes/SizedQueue.html#method-i-push","(obj)","<p>Pushes <code>obj</code> to the queue.  If there is no space left in the\nqueue, waits until space becomes available. …\n"],["push_inspect_key","PP::PPMethods","classes/PP/PPMethods.html#method-i-push_inspect_key","(id)",""],["push_workspace","IRB::Context","classes/IRB/Context.html#method-i-push_workspace","(*_main)",""],["pushd","Shell","classes/Shell.html#method-i-pushd","(path = nil, verbose = @verbose)",""],["pushdir","Shell","classes/Shell.html#method-i-pushdir","(path = nil, verbose = @verbose)",""],["pushstate","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-pushstate","()",""],["put","Net::FTP","classes/Net/FTP.html#method-i-put","(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE, &block)","<p>Transfers <code>localfile</code> to the server in whatever mode the session\nis set (text or binary).  See #puttextfile …\n"],["put","TkPhotoImage","classes/TkPhotoImage.html#method-i-put","(data, *opts)",""],["put","TkPhotoImage","classes/TkPhotoImage.html#method-i-put","(data, *opts)",""],["put","TupleSpace","classes/TupleSpace.html#method-i-put","(*tuples)",""],["put_urls","IEHandler","classes/IEHandler.html#method-i-put_urls","()",""],["putback","Encoding::Converter","classes/Encoding/Converter.html#method-i-putback","(p1 = v1)","<p>call-seq\n\n<pre><code>ec.putback                    -&gt; string\nec.putback(max_numbytes)      -&gt; string</code></pre>\n<p>Put back the bytes …\n"],["putbinaryfile","Net::FTP","classes/Net/FTP.html#method-i-putbinaryfile","(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE)","<p>Transfers <code>localfile</code> to the server in binary mode, storing the\nresult in <code>remotefile</code>. If a block is supplied, …\n"],["putc","ARGF","classes/ARGF.html#method-i-putc","(p1)","<p>If <em>obj</em> is <code>Numeric</code>, write the character whose code is\nthe least-significant byte of <em>obj</em>, otherwise write …\n"],["putc","IO","classes/IO.html#method-i-putc","(p1)","<p>If <em>obj</em> is <code>Numeric</code>, write the character whose code is\nthe least-significant byte of <em>obj</em>, otherwise write …\n"],["putc","Kernel","classes/Kernel.html#method-i-putc","(p1)","\n<pre><code>Equivalent to:\n\n  $stdout.putc(int)</code></pre>\n<p>Refer to the documentation for IO#putc for important information regarding\n…\n"],["putc","StringIO","classes/StringIO.html#method-i-putc","(p1)","<p>See IO#putc.\n"],["putc","TkTextIO","classes/TkTextIO.html#method-i-putc","(c)",""],["putc","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-putc","(p1)","<p>Same as IO.\n"],["puts","ARGF","classes/ARGF.html#method-i-puts","(*args)","<p>Writes the given objects to <em>ios</em> as with <code>IO#print</code>.\nWrites a record separator (typically a newline) after …\n"],["puts","CSV","classes/CSV.html#method-i-puts","(row)",""],["puts","IO","classes/IO.html#method-i-puts","(*args)","<p>Writes the given objects to <em>ios</em> as with <code>IO#print</code>.\nWrites a record separator (typically a newline) after …\n"],["puts","IO::writable","classes/IO/writable.html#method-i-puts","(*args)","<p>See IO#puts.\n"],["puts","IRB::Locale","classes/IRB/Locale.html#method-i-puts","(*opts)",""],["puts","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-puts","(*objs)",""],["puts","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-puts","(*objs)",""],["puts","Kernel","classes/Kernel.html#method-i-puts","(*args)","<p>Equivalent to\n\n<pre><code>$stdout.puts(obj, ...)</code></pre>\n"],["puts","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-puts","(str = '')",""],["puts","Net::Telnet","classes/Net/Telnet.html#method-i-puts","(string)","<p>Sends a string to the host.\n<p>Same as #print(), but appends a newline to the string.\n"],["puts","Object","classes/Object.html#method-i-puts","(*args)",""],["puts","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-puts","(*args)","<p>Writes <code>args</code> to the stream along with a record separator.\n<p>See IO#puts for full details.\n"],["puts","TkTextIO","classes/TkTextIO.html#method-i-puts","(*args)",""],["puts","XMP","classes/XMP.html#method-i-puts","(exps)",""],["puts","XMP::StringInputMethod","classes/XMP/StringInputMethod.html#method-i-puts","(exps)",""],["puts","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-puts","(*args)","<p>Same as IO.\n"],["puttextfile","Net::FTP","classes/Net/FTP.html#method-i-puttextfile","(localfile, remotefile = File.basename(localfile))","<p>Transfers <code>localfile</code> to the server in ASCII (text) mode,\nstoring the result in <code>remotefile</code>. If callback …\n"],["puzzleSwitch","Object","classes/Object.html#method-i-puzzleSwitch","(w, num)","<p>puzzleSwitch – This procedure is invoked when the user clicks on a\nparticular button; if the button …\n"],["pwd","Dir","classes/Dir.html#method-c-pwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre><code>Dir.chdir(&quot;/tmp&quot;)   #=&gt; ...\n</code></pre>\n"],["pwd","FileUtils","classes/FileUtils.html#method-c-pwd","()","<p>Options: (none)\n<p>Returns the name of the current directory.\n"],["pwd","Net::FTP","classes/Net/FTP.html#method-i-pwd","()","<p>Returns the current remote directory.\n"],["pwd","Pathname","classes/Pathname.html#method-c-pwd","()","<p>See <code>Dir.getwd</code>.  Returns the current working directory as a\nPathname.\n"],["pwd","Tk::Iwidgets::Scrolledhtml","classes/Tk/Iwidgets/Scrolledhtml.html#method-i-pwd","()",""],["qrst","Transformation","classes/Transformation.html#method-i-qrst","(*args)",""],["quadratic","Tk::BLT::Spline","classes/Tk/BLT/Spline.html#method-c-quadratic","(x, y, sx, sy)",""],["quantize","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-quantize","(src, dest, colors)",""],["quantize","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-quantize","(src, dest, colors)",""],["query","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-query","()",""],["query","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-query","()",""],["query","Tk::ICONS","classes/Tk/ICONS.html#method-c-query","(*args)",""],["query","Tk::ICONS","classes/Tk/ICONS.html#method-i-query","(keys={})",""],["query","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-query","()","<p>Request query as a Hash\n"],["query=","URI::Generic","classes/URI/Generic.html#method-i-query-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["quick","Gem::Server","classes/Gem/Server.html#method-i-quick","(req, res)",""],["quick_emit","Syck","classes/Syck.html#method-c-quick_emit","( oid, opts = {}, &e )","<p>Allocate an Emitter if needed\n"],["quick_emit","Syck","classes/Syck.html#method-c-quick_emit","( oid, opts = {}, &e )","<p>Allocate an Emitter if needed\n"],["quiet","RDoc::Options","classes/RDoc/Options.html#method-i-quiet","()","<p>Don&#39;t display progress as we process the files\n"],["quiet","Sys","classes/Sys.html#method-i-quiet","(&block)","<p>Perform a block with $verbose disabled.\n"],["quiet=","RDoc::Options","classes/RDoc/Options.html#method-i-quiet-3D","(bool)","<p>Set quietness to <code>bool</code>\n"],["quirks_mode","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-quirks_mode","()","<p>Returns true, if quirks mode is enabled. Otherwise returns false.\n"],["quirks_mode=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-quirks_mode-3D","(p1)","<p>If set to true, enables the quirks_mode mode.\n"],["quirks_mode?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-quirks_mode-3F","()","<p>Returns true, if quirks mode is enabled. Otherwise returns false.\n"],["quirks_mode?","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-i-quirks_mode-3F","()","<p>Returns a true, if this parser is in quirks_mode, false otherwise.\n"],["quit","Board","classes/Board.html#method-i-quit","()",""],["quit","Net::FTP","classes/Net/FTP.html#method-i-quit","()","<p>Exits the FTP session.\n"],["quit","Net::SMTP","classes/Net/SMTP.html#method-i-quit","()",""],["quit","Net::SMTP","classes/Net/SMTP.html#method-i-quit","()",""],["quit","Object","classes/Object.html#method-i-quit","(canvas)",""],["quo","BigDecimal","classes/BigDecimal.html#method-i-quo","(p1)","<p>Divide by the specified value.\n<p>e.g.\n\n<pre><code>c = a.div(b,n)</code></pre>\n"],["quo","Complex","classes/Complex.html#method-i-quo","(p1)","<p>Performs division.\n<p>For example:\n\n<pre><code>Complex(10.0) / 3  #=&gt; (3.3333333333333335+(0/1)*i)\nComplex(10)   / 3  ...\n</code></pre>\n"],["quo","Float","classes/Float.html#method-i-quo","(p1)","<p>Returns float / numeric.\n"],["quo","Numeric","classes/Numeric.html#method-i-quo","(p1)","<p>Returns most exact division (rational for integers, float for floats).\n"],["quo","Rational","classes/Rational.html#method-i-quo","(p1)","<p>Performs division.\n<p>For example:\n\n<pre><code>Rational(2, 3)  / Rational(2, 3)   #=&gt; (1/1)\nRational(900)   / Rational(1) ...\n</code></pre>\n"],["quote","Regexp","classes/Regexp.html#method-c-quote","(p1)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["quote","String","classes/String.html#method-i-quote","()","<p>Wraps a string in escaped quotes if it contains whitespace.\n"],["quote","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-quote","(str)",""],["quux","Bar","classes/Bar.html#method-i-quux","()",""],["quux","Foo","classes/Foo.html#method-i-quux","()",""],["r","Vector","classes/Vector.html#method-i-r","()",""],["racc_runtime_type","Racc::Parser","classes/Racc/Parser.html#method-c-racc_runtime_type","()",""],["radio_button","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-radio_button","(name = \"\", value = nil, checked = nil)","<p>Generates a radio-button Input element.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nthe value of the …\n"],["radio_group","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-radio_group","(name = \"\", *values)","<p>Generate a sequence of radio button Input elements, as a String.\n<p>This works the same as #checkbox_group() …\n"],["raise","Kernel","classes/Kernel.html#method-i-raise","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\n<code>RuntimeError</code> if <code>$!</code> is <code>nil</code>. With a\nsingle <code>String</code> …\n"],["raise","Thread","classes/Thread.html#method-i-raise","(*args)","<p>Raises an exception (see <code>Kernel::raise</code>) from <em>thr</em>. The\ncaller does not have to be <em>thr</em>.\n\n<pre><code>Thread.abort_on_exception ...</code></pre>\n"],["raise","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-raise","(*wins)",""],["raise","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-raise","(*wins)",""],["raise","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-raise","(page=nil)",""],["raise","Tk::BWidget::PagesManager","classes/Tk/BWidget/PagesManager.html#method-i-raise","(page=None)",""],["raise","Tk::Canvas","classes/Tk/Canvas.html#method-i-raise","(tag, above=nil)",""],["raise","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-raise","(tag, above=nil)",""],["raise","Tk::TkTable::CellTag","classes/Tk/TkTable/CellTag.html#method-i-raise","(target=None)",""],["raise","TkTextTag","classes/TkTextTag.html#method-i-raise","(above=None)",""],["raise","TkTextTag","classes/TkTextTag.html#method-i-raise","(above=None)",""],["raise","TkcTagAccess","classes/TkcTagAccess.html#method-i-raise","(abovethis=None)",""],["raise_for_undefined_entity?","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-raise_for_undefined_entity-3F","()",""],["raise_for_undefined_entity?","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-raise_for_undefined_entity-3F","()",""],["raise_for_undefined_entity?","RSS::REXMLListener","classes/RSS/REXMLListener.html#method-i-raise_for_undefined_entity-3F","()",""],["raise_if_conflicts","Gem::Specification","classes/Gem/Specification.html#method-i-raise_if_conflicts","()","<p>Check the spec for possible conflicts and freak out if there are any.\n"],["rake_check_options","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_check_options","(options, *optdecl)","<p>Check that the options do not contain options not listed in\n<code>optdecl</code>.  An ArgumentError exception is thrown …\n"],["rake_extension","Module","classes/Module.html#method-i-rake_extension","(method)","<p>Check for an existing method in the current class before extending.  IF the\nmethod already exists, then …\n"],["rake_merge_option","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_merge_option","(args, defaults)","<p>Merge the given options with the default values.\n"],["rake_original_const_missing","Module","classes/Module.html#method-i-rake_original_const_missing","(const_name)","<p>Rename the original handler to make it available.\n"],["rake_original_time_compare","Time","classes/Time.html#method-i-rake_original_time_compare","(other)",""],["rake_output_message","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_output_message","(message)","<p>Send the message to the default rake output (which is $stderr).\n"],["rake_require","Rake::Application","classes/Rake/Application.html#method-i-rake_require","(file_name, paths=$LOAD_PATH, loaded=$\")","<p>Similar to the regular Ruby <code>require</code> command, but will check\nfor *.rake files in addition to *.rb files. …\n"],["rake_require","Rake::Application","classes/Rake/Application.html#method-i-rake_require","(file_name, paths=$LOAD_PATH, loaded=$\")","<p>Similar to the regular Ruby <code>require</code> command, but will check\nfor *.rake files in addition to *.rb files. …\n"],["rake_system","Rake::Win32","classes/Rake/Win32.html#method-i-rake_system","(*cmd)","<p>Run a command line on windows.\n"],["rakefile_location","Rake::Application","classes/Rake/Application.html#method-i-rakefile_location","(backtrace = caller)",""],["rakefile_location","Rake::Application","classes/Rake/Application.html#method-i-rakefile_location","(backtrace = caller)",""],["rand","Kernel","classes/Kernel.html#method-i-rand","(p1 = v1)","<p>If <em>max</em> is <code>Range</code>, returns a pseudorandom number where\nrange.member(number) == true.\n<p>Or else converts <em>max</em> …\n"],["rand","Random","classes/Random.html#method-i-rand","(*args)","<p>When the argument is an <code>Integer</code> or a <code>Bignum</code>, it\nreturns a random integer greater than or equal to zero …\n"],["rand","Random","classes/Random.html#method-c-rand","(*args)","<p>Alias of _Random::DEFAULT.rand_.\n"],["rand_bool","Object","classes/Object.html#method-i-rand_bool","()",""],["random","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-random","()",""],["randomAutoScanCheck","Object","classes/Object.html#method-i-randomAutoScanCheck","(t, x, y)","<p>Same as TreeCtrl::AutoScanCheck, but calls RandomMotion and\nRandomAutoScanCheckAux\n"],["randomAutoScanCheckAux","Object","classes/Object.html#method-i-randomAutoScanCheckAux","(t)",""],["randomButton1","Object","classes/Object.html#method-i-randomButton1","(t, x, y)",""],["randomDrop","Object","classes/Object.html#method-i-randomDrop","(t, target, src, pos)",""],["randomLeave1","Object","classes/Object.html#method-i-randomLeave1","(t, x, y)",""],["randomMotion","Object","classes/Object.html#method-i-randomMotion","(t, x, y)",""],["randomMotion1","Object","classes/Object.html#method-i-randomMotion1","(t, x, y)",""],["randomRelease1","Object","classes/Object.html#method-i-randomRelease1","(t, x, y)",""],["random_N","Object","classes/Object.html#method-i-random_N","()",""],["random_bytes","SecureRandom","classes/SecureRandom.html#method-c-random_bytes","(n=nil)","<p>SecureRandom.random_bytes generates a random binary string.\n<p>The argument <em>n</em> specifies the length of the …\n"],["random_iv","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-random_iv","()","<p>Generate, set, and return a random iv. You must call cipher.encrypt or\ncipher.decrypt before calling …\n"],["random_key","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-random_key","()","<p>Generate, set, and return a random key. You must call cipher.encrypt or\ncipher.decrypt before calling …\n"],["random_number","SecureRandom","classes/SecureRandom.html#method-c-random_number","(n=0)","<p>SecureRandom.random_number generates a random number.\n<p>If a positive integer is given as <em>n</em>, SecureRandom.random_number …\n"],["random_string","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-random_string","(len)","<p>Generates a random string of length <code>len</code>\n"],["ranf","Object","classes/Object.html#method-i-ranf","()",""],["range","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-range","()","<p>Returns an Array of Range objects which represent the Range: HTTP header\nfield, or <code>nil</code> if there is no …\n"],["range","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-range","(from=None, to=None)",""],["range","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-range","(first, last)",""],["range","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-range","(first, last=None)",""],["range=","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-range-3D","(r, e = nil)",""],["range_length","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-range_length","()","<p>The length of the range represented in Content-Range: header.\n"],["range_open","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-range_open","(first, last)",""],["range_open_to","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-range_open_to","(tag)",""],["range_to","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-range_to","(tag)",""],["ranges","TkTextTag","classes/TkTextTag.html#method-i-ranges","()",""],["ranges","TkTextTag","classes/TkTextTag.html#method-i-ranges","()",""],["rank","Matrix","classes/Matrix.html#method-i-rank","()","<p>Returns the rank of the matrix. Beware that using Float values can yield\nerroneous results because of …\n"],["rank_e","Matrix","classes/Matrix.html#method-i-rank_e","()","<p>deprecated; use Matrix#rank\n"],["rassoc","Array","classes/Array.html#method-i-rassoc","(p1)","<p>Searches through the array whose elements are also arrays. Compares\n<em>obj</em> with the second element of each …\n"],["rassoc","ENV","classes/ENV.html#method-c-rassoc","(p1)","<p>Returns an Array of the name and value of the environment variable with\n<code>value</code> or <code>nil</code> if the value cannot …\n"],["rassoc","Hash","classes/Hash.html#method-i-rassoc","(p1)","<p>Searches through the hash comparing <em>obj</em> with the value using\n<code>==</code>. Returns the first key-value pair (two-element …\n"],["rationalize","Complex","classes/Complex.html#method-i-rationalize","(p1 = v1)","<p>If the imaginary part is exactly 0, returns the real part as a Rational,\notherwise a RangeError is raised. …\n"],["rationalize","Float","classes/Float.html#method-i-rationalize","(p1 = v1)","<p>Returns a simpler approximation of the value (flt-|eps| &lt;= result &lt;=\nflt+|eps|).  if eps is not …\n"],["rationalize","Integer","classes/Integer.html#method-i-rationalize","(p1 = v1)","<p>Returns the value as a rational.  An optional argument eps is always\nignored.\n"],["rationalize","Integer","classes/Integer.html#method-i-rationalize","(p1 = v1)","<p>Returns the value as a rational.  An optional argument eps is always\nignored.\n"],["rationalize","NilClass","classes/NilClass.html#method-i-rationalize","(p1 = v1)","<p>Returns zero as a rational.  An optional argument eps is always ignored.\n"],["rationalize","Rational","classes/Rational.html#method-i-rationalize","(p1 = v1)","<p>Returns a simpler approximation of the value if an optional argument eps is\ngiven (rat-|eps| &lt;= result …\n"],["raw","Curses","classes/Curses.html#method-c-raw","()","<p>Put the terminal into raw mode.\n<p>Raw mode is similar to Curses.cbreak mode, in that characters typed are …\n"],["raw","IO","classes/IO.html#method-i-raw","(*args)","<p>Yields <code>self</code> within raw mode.\n\n<pre><code>STDIN.raw(&amp;:gets)</code></pre>\n<p>will read and return a line without echo back and line editing. …\n"],["raw","REXML::Element","classes/REXML/Element.html#method-i-raw","()","<p>Evaluates to <code>true</code> if raw mode is set for this element.  This\nis the case if the context has :<code>raw</code> set …\n"],["raw!","IO","classes/IO.html#method-i-raw-21","(*args)","<p>Enables raw mode.\n<p>If the terminal mode needs to be back, use io.raw { … }.\n<p>You must require &#39;io/console&#39; …\n"],["raw_cookie","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-raw_cookie","()","<p>Get the raw cookies as a string.\n"],["raw_cookie2","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-raw_cookie2","()","<p>Get the raw RFC2965 cookies as a string.\n"],["raw_path","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-raw_path","(system, site, home, gems, *extra_dirs)","<p>Returns selected documentation directories including nonexistent\ndirectories.\n<p>See also ::each\n"],["rb_appsend","RemoteTkIp","classes/RemoteTkIp.html#method-i-rb_appsend","(async, *args)",""],["rb_scan_args","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-rb_scan_args","(method_body)","<p>Extracts parameters from the <code>method_body</code> and returns a method\nparameter string.  Follows 1.9.3dev&#39;s …\n"],["rc_file","IRB","classes/IRB.html#method-c-rc_file","(ext = IRBRC_EXT)",""],["rc_file_generators","IRB","classes/IRB.html#method-c-rc_file_generators","()","<p>enumerate possible rc-file base name generators\n"],["rchars","Tk::Canvas","classes/Tk/Canvas.html#method-i-rchars","(tag, first, last, str_or_coords)",""],["rchars","TkcTagAccess","classes/TkcTagAccess.html#method-i-rchars","(first, last, str_or_coords)",""],["rchart","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-rchart","(series, xcrd, ycrd)",""],["rcptto","Net::SMTP","classes/Net/SMTP.html#method-i-rcptto","(to_addr)",""],["rcptto","Net::SMTP","classes/Net/SMTP.html#method-i-rcptto","(to_addr)",""],["rcptto_list","Net::SMTP","classes/Net/SMTP.html#method-i-rcptto_list","(to_addrs)",""],["rcptto_list","Net::SMTP","classes/Net/SMTP.html#method-i-rcptto_list","(to_addrs)",""],["rd","TupleSpace","classes/TupleSpace.html#method-i-rd","(template, non_block=false)",""],["rd_order","Object","classes/Object.html#method-i-rd_order","(na)",""],["rdev","File::Stat","classes/File/Stat.html#method-i-rdev","()","<p>Returns an integer representing the device type on which <em>stat</em>\nresides. Returns <code>nil</code> if the operating system …\n"],["rdev_major","File::Stat","classes/File/Stat.html#method-i-rdev_major","()","<p>Returns the major part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre><code>File.stat(&quot;/dev/fd1&quot;).rdev_major   #=&gt; 2\nFile.stat(&quot;/dev/tty&quot;).rdev_major ...\n</code></pre>\n"],["rdev_minor","File::Stat","classes/File/Stat.html#method-i-rdev_minor","()","<p>Returns the minor part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre><code>File.stat(&quot;/dev/fd1&quot;).rdev_minor   #=&gt; 1\nFile.stat(&quot;/dev/tty&quot;).rdev_minor ...\n</code></pre>\n"],["rdoc","Gem::Server","classes/Gem/Server.html#method-i-rdoc","(req, res)","<p>Can be used for quick navigation to the rdoc documentation.  You can then\ndefine a search shortcut for …\n"],["rdoc_installed?","Gem::DocManager","classes/Gem/DocManager.html#method-i-rdoc_installed-3F","()","<p>Is the RDoc documentation installed?\n"],["rdoc_installed?","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_options","Gem::Specification","classes/Gem/Specification.html#method-i-rdoc_options","()","<p>An ARGV style array of options to RDoc\n"],["rdoc_options=","Gem::Specification","classes/Gem/Specification.html#method-i-rdoc_options-3D","(options)","<p>Sets rdoc_options to <code>value</code>, ensuring it is an array. Don&#39;t\nuse this, push onto the array instead. …\n"],["rdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["rdoc_version","Gem::DocManager","classes/Gem/DocManager.html#method-c-rdoc_version","()",""],["re_exchange","Process::GID","classes/Process/GID.html#method-c-re_exchange","()","<p>Exchange real and effective group IDs and return the new effective group\nID. Not available on all platforms. …\n"],["re_exchange","Process::UID","classes/Process/UID.html#method-c-re_exchange","()","<p>Exchange real and effective user IDs and return the new effective user ID.\nNot available on all platforms. …\n"],["re_exchangeable?","Process::GID","classes/Process/GID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective group IDs of a process\nmay be exchanged on the current platform. …\n"],["re_exchangeable?","Process::UID","classes/Process/UID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective user IDs of a process\nmay be exchanged on the current platform. …\n"],["read","ARGF","classes/ARGF.html#method-i-read","(p1 = v1, p2 = v2)","\n<pre><code>Reads _length_ bytes from ARGF. The files named on the command line\nare concatenated and treated as a ...</code></pre>\n"],["read","CSV","classes/CSV.html#method-c-read","(path, *options)","<p>Use to slurp a CSV file into an Array of Arrays.  Pass the\n<code>path</code> to the file and any <code>options</code> CSV::new() …\n"],["read","CSV","classes/CSV.html#method-i-read","()","<p>Slurps the remaining rows and returns an Array of Arrays.\n<p>The data source must be open for reading.\n"],["read","DRb::HTTP0::StrStream","classes/DRb/HTTP0/StrStream.html#method-i-read","(n)",""],["read","Dir","classes/Dir.html#method-i-read","()","<p>Reads the next entry from <em>dir</em> and returns it as a string. Returns\n<code>nil</code> at the end of the stream.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;) ...</code></pre>\n"],["read","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-read","(len = nil)","<p>Reads <code>len</code> bytes from the tar file entry, or the rest of the\nentry if nil\n"],["read","IO","classes/IO.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from the I/O stream.\n<p><em>length</em> must be a non-negative integer or <code>nil</code>.\n<p>If <em>length</em> is a positive …\n"],["read","IO","classes/IO.html#method-c-read","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Opens the file, optionally seeks to the given <em>offset</em>, then returns\n<em>length</em> bytes (defaulting to the rest …\n"],["read","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-read","(size=nil, buf=nil)","<p>Reads <code>size</code> bytes from the stream.  If <code>buf</code> is\nprovided it must reference a string which will receive the …\n"],["read","OpenSSL::PKey","classes/OpenSSL/PKey.html#method-c-read","(p1, p2 = v2)","<p>Parameters\n<p><code>string</code> is a DER- or PEM-encoded string containing an arbitrary\nprivate\n\n<p>or public key.\n"],["read","OpenURI::OpenRead","classes/OpenURI/OpenRead.html#method-i-read","(options={})","<p>OpenURI::OpenRead#read() reads a content referenced by self and returns the\ncontent as string. The string …\n"],["read","Pathname","classes/Pathname.html#method-i-read","(p1 = v1, p2 = v2, p3 = v3)","<p>See <code>IO.read</code>.  Returns all data from the file, or the first\n<code>N</code> bytes if specified.\n"],["read","REXML::IOSource","classes/REXML/IOSource.html#method-i-read","()",""],["read","REXML::Source","classes/REXML/Source.html#method-i-read","()",""],["read","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-read","(tuple, sec=nil)","<p>Reads <code>tuple</code>, but does not remove it.\n"],["read","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-read","(tuple, sec=nil, &block)","<p>Reads <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#read.\n"],["read","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-i-read","(tuple)",""],["read","RubyVM::VPATH","classes/RubyVM/VPATH.html#method-i-read","(*args)",""],["read","StringIO","classes/StringIO.html#method-i-read","(*args)","<p>See IO#read.\n"],["read","Tk::MacResource","classes/Tk/MacResource.html#method-c-read","(rsrcType, rsrcID, rsrcRef=nil)",""],["read","TkPhotoImage","classes/TkPhotoImage.html#method-i-read","(file, *opts)",""],["read","TkPhotoImage","classes/TkPhotoImage.html#method-i-read","(file, *opts)",""],["read","TkTextIO","classes/TkTextIO.html#method-i-read","(len=nil, buf=nil)",""],["read","TupleSpace","classes/TupleSpace.html#method-i-read","(template, non_block=false)",""],["read","WEBrick::CGI::Socket","classes/WEBrick/CGI/Socket.html#method-i-read","(size=nil)",""],["read","WEBrick::NullReader","classes/WEBrick/NullReader.html#method-i-read","(*args)",""],["read","Win32::Registry","classes/Win32/Registry.html#method-i-read","(name, *rtype)","<p>Read a registry value named name and return array of [ type, data ]. When\nname is nil, the `default&#39; …\n"],["read","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-read","(p1 = v1)","<p>See Zlib::GzipReader documentation for a description.\n"],["read_all","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-read_all","(tuple)","<p>Returns all tuples matching <code>tuple</code>.  Does not remove the found\ntuples.\n"],["read_all","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-read_all","(tuple)","<p>Reads all tuples matching <code>tuple</code> from the proxied TupleSpace. \nSee TupleSpace#read_all.\n"],["read_bin","Win32::Registry","classes/Win32/Registry.html#method-i-read_bin","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry\nvalue named name.\n<p>If the values …\n"],["read_binary","Gem","classes/Gem.html#method-c-read_binary","(path)","<p>Safely read a file in binary mode on all platforms.\n"],["read_body","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-read_body","(dest = nil, &block)","<p>Gets the entity body returned by the remote HTTP server.\n<p>If a block is given, the body is passed to the …\n"],["read_directive","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-read_directive","(allowed)","<p>Directives are modifier comments that can appear after class, module, or\nmethod names. For example:\n\n<pre><code>def ...\n</code></pre>\n"],["read_documentation_modifiers","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-read_documentation_modifiers","(context, allow)","<p>Handles the directive for <code>context</code> if the directive is listed\nin <code>allow</code>. This method is called for directives …\n"],["read_entries","TkOptionDB","classes/TkOptionDB.html#method-c-read_entries","(file, f_enc=nil)",""],["read_entries","TkOptionDB","classes/TkOptionDB.html#method-c-read_entries","(file, f_enc=nil)",""],["read_entries","TkOptionDB","classes/TkOptionDB.html#method-c-read_entries","(file, f_enc=nil)",""],["read_escape","RubyLex","classes/RubyLex.html#method-i-read_escape","()",""],["read_file","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-read_file","(filename, encoding, force_transcode = false)","<p>Reads the contents of <code>filename</code> and handles any encoding\ndirectives in the file.\n<p>The content will be converted …\n"],["read_file","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-read_file","(name)","<p>Read a file\n"],["read_file","TkOptionDB","classes/TkOptionDB.html#method-c-read_file","(file, pri=None)",""],["read_file","TkOptionDB","classes/TkOptionDB.html#method-c-read_file","(file, pri=None)",""],["read_file","TkOptionDB","classes/TkOptionDB.html#method-c-read_file","(file, pri=None)",""],["read_i","Win32::Registry","classes/Win32/Registry.html#method-i-read_i","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry\nvalue named name.\n<p>If the values …\n"],["read_ids1","Object","classes/Object.html#method-i-read_ids1","(path)",""],["read_ids1_with_locations","Object","classes/Object.html#method-i-read_ids1_with_locations","(path)",""],["read_ids2","Object","classes/Object.html#method-i-read_ids2","(path)",""],["read_jpeg","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-read_jpeg","(file, photo)",""],["read_jpeg","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-read_jpeg","(file, photo)",""],["read_nonblock","ARGF","classes/ARGF.html#method-i-read_nonblock","(*args)","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream in non-blocking\nmode.\n"],["read_nonblock","IO","classes/IO.html#method-i-read_nonblock","(*args)","<p>Reads at most <em>maxlen</em> bytes from <em>ios</em> using the read(2)\nsystem call after O_NONBLOCK is set for the underlying …\n"],["read_nonblock","IO::readable","classes/IO/readable.html#method-i-read_nonblock","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead\nof returning <code>nil</code>, as well as IO#sysread …\n"],["read_nonblock","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-read_nonblock","(maxlen, buf=nil)","<p>Reads at most <code>maxlen</code> bytes in the non-blocking manner.\n<p>When no data can be read without blocking it raises …\n"],["read_s","Win32::Registry","classes/Win32/Registry.html#method-i-read_s","(name)","<p>Read a REG_SZ(read_s), REG_DWORD(read_i), or REG_BINARY(read_bin) registry\nvalue named name.\n<p>If the values …\n"],["read_s_expand","Win32::Registry","classes/Win32/Registry.html#method-i-read_s_expand","(name)","<p>Read a REG_SZ or REG_EXPAND_SZ registry value named name.\n<p>If the value type is REG_EXPAND_SZ, environment …\n"],["read_smime","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-read_smime","(p1)",""],["read_timeout=","Net::HTTP","classes/Net/HTTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["read_timeout=","Net::HTTP","classes/Net/HTTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["read_timeout=","Net::POP3","classes/Net/POP3.html#method-i-read_timeout-3D","(sec)","<p>Set the read timeout.\n"],["read_timeout=","Net::POP3","classes/Net/POP3.html#method-i-read_timeout-3D","(sec)","<p>Set the read timeout.\n"],["read_timeout=","Net::POP3","classes/Net/POP3.html#method-i-read_timeout-3D","(sec)","<p>Set the read timeout.\n"],["read_timeout=","Net::POP3","classes/Net/POP3.html#method-i-read_timeout-3D","(sec)","<p>Set the read timeout.\n"],["read_timeout=","Net::SMTP","classes/Net/SMTP.html#method-i-read_timeout-3D","(sec)","<p>Set the number of seconds to wait until timing-out a read(2) call.\n"],["read_timeout=","Net::SMTP","classes/Net/SMTP.html#method-i-read_timeout-3D","(sec)","<p>Set the number of seconds to wait until timing-out a read(2) call.\n"],["read_type_class","Psych","classes/Psych.html#method-c-read_type_class","(type, reference)",""],["read_type_class","Syck","classes/Syck.html#method-c-read_type_class","( type, obj_class )","<p>Method to extract colon-seperated type and class, returning the type and\nthe constant of the class\n"],["read_type_class","Syck","classes/Syck.html#method-c-read_type_class","( type, obj_class )","<p>Method to extract colon-seperated type and class, returning the type and\nthe constant of the class\n"],["read_with_encoding","TkOptionDB","classes/TkOptionDB.html#method-c-read_with_encoding","(file, f_enc=nil, pri=None)",""],["read_with_encoding","TkOptionDB","classes/TkOptionDB.html#method-c-read_with_encoding","(file, f_enc=nil, pri=None)",""],["read_with_encoding","TkOptionDB","classes/TkOptionDB.html#method-c-read_with_encoding","(file, f_enc=nil, pri=None)",""],["read_with_substitution","REXML::Text","classes/REXML/Text.html#method-c-read_with_substitution","( input, illegal=nil )","<p>Reads text, substituting entities\n"],["readable?","File","classes/File.html#method-c-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser id of this process.\n"],["readable?","File::Stat","classes/File/Stat.html#method-i-readable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the effective\nuser id of this process.\n\n<pre><code>File.stat(&quot;testfile&quot;).readable? ...</code></pre>\n"],["readable?","FileTest","classes/FileTest.html#method-i-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser id of this process.\n"],["readable?","Pathname","classes/Pathname.html#method-i-readable-3F","()","<p>See <code>FileTest.readable?</code>.\n"],["readable_atfer_eof?","IRB::InputMethod","classes/IRB/InputMethod.html#method-i-readable_atfer_eof-3F","()",""],["readable_atfer_eof?","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-readable_atfer_eof-3F","()",""],["readable_atfer_eof?","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-readable_atfer_eof-3F","()",""],["readable_real?","File","classes/File.html#method-c-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user id\nof this process.\n"],["readable_real?","File::Stat","classes/File/Stat.html#method-i-readable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the real user id\nof this process.\n\n<pre><code>File.stat(&quot;testfile&quot;).readable_real? ...</code></pre>\n"],["readable_real?","FileTest","classes/FileTest.html#method-i-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user id\nof this process.\n"],["readable_real?","Pathname","classes/Pathname.html#method-i-readable_real-3F","()","<p>See <code>FileTest.readable_real?</code>.\n"],["readagain_bytes","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-readagain_bytes","()","<p>Returns the bytes to be read again when Encoding::InvalidByteSequenceError\noccurs.\n"],["readbyte","ARGF","classes/ARGF.html#method-i-readbyte","()","<p>Reads the next 8-bit byte from ARGF and returns it as a\n<code>Fixnum</code>. Raises an <code>EOFError</code> after the last byte …\n"],["readbyte","IO","classes/IO.html#method-i-readbyte","()","<p>Reads a byte as with <code>IO#getbyte</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readbyte","IO::readable","classes/IO/readable.html#method-i-readbyte","()","<p>See IO#readbyte.\n"],["readbyte","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readchar","ARGF","classes/ARGF.html#method-i-readchar","()","<p>Reads the next character from <code>ARGF</code> and returns it as a\n<code>String</code>. Raises an <code>EOFError</code> after the last\ncharacter …\n"],["readchar","IO","classes/IO.html#method-i-readchar","()","<p>Reads a one-character string from <em>ios</em>. Raises an\n<code>EOFError</code> on end of file.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.readchar ...</code></pre>\n"],["readchar","IO::readable","classes/IO/readable.html#method-i-readchar","()","<p>See IO#readchar.\n"],["readchar","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-readchar","()","<p>Reads a one-character string from the stream.  Raises an EOFError at end of\nfile.\n"],["readchar","TkTextIO","classes/TkTextIO.html#method-i-readchar","()",""],["readchar","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readchar","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readfile","TkOptionDB","classes/TkOptionDB.html#method-c-readfile","(file, pri=None)",""],["readfile","TkOptionDB","classes/TkOptionDB.html#method-c-readfile","(file, pri=None)",""],["readfile","TkOptionDB","classes/TkOptionDB.html#method-c-readfile","(file, pri=None)",""],["readline","ARGF","classes/ARGF.html#method-i-readline","(*args)","<p>Returns the next line from the current file in <code>ARGF</code>.\n<p>By default lines are assumed to be separated by +$/+; …\n"],["readline","CSV","classes/CSV.html#method-i-readline","()",""],["readline","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-readline","(prompt, hist)",""],["readline","IO","classes/IO.html#method-i-readline","(*args)","<p>Reads a line as with <code>IO#gets</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readline","IO::readable","classes/IO/readable.html#method-i-readline","(*args)","<p>See IO#readline.\n"],["readline","IRB::Locale","classes/IRB/Locale.html#method-i-readline","(*rs)",""],["readline","Kernel","classes/Kernel.html#method-i-readline","(*args)","<p>Equivalent to <code>Kernel::gets</code>, except <code>readline</code>\nraises <code>EOFError</code> at end of file.\n"],["readline","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-readline","(eol=$/)","<p>Reads a line from the stream which is separated by <code>eol</code>.\n<p>Raises EOFError if at end of file.\n"],["readline","Readline","classes/Readline.html#method-c-readline","(p1 = v1, p2 = v2)","<p>Shows the <code>prompt</code> and reads the inputted line with line\nediting. The inputted line is added to the history …\n"],["readline","StringIO","classes/StringIO.html#method-i-readline","(rs=$/)",""],["readline","TkTextIO","classes/TkTextIO.html#method-i-readline","(rs = $/)",""],["readline","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readline","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlines","ARGF","classes/ARGF.html#method-i-readlines","(*args)","<p>Reads <code>ARGF</code>&#39;s current file in its entirety, returning an\n<code>Array</code> of its lines, one line per element. …\n"],["readlines","CSV","classes/CSV.html#method-c-readlines","(*args)","<p>Alias for CSV::read().\n"],["readlines","CSV","classes/CSV.html#method-i-readlines","()",""],["readlines","IO","classes/IO.html#method-c-readlines","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Reads the entire file specified by <em>name</em> as individual lines, and\nreturns those lines in an array. Lines …\n"],["readlines","IO","classes/IO.html#method-i-readlines","(*args)","<p>Reads all of the lines in <em>ios</em>, and returns them in\n<em>anArray</em>. Lines are separated by the optional <em>sep</em>. …\n"],["readlines","Kernel","classes/Kernel.html#method-i-readlines","(*args)","<p>Returns an array containing the lines returned by calling\n<code>Kernel.gets(<em>sep</em>)</code> until the end of file.\n"],["readlines","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-readlines","(eol=$/)","<p>Reads lines from the stream which are separated by <code>eol</code>.\n<p>See also #gets\n"],["readlines","Pathname","classes/Pathname.html#method-i-readlines","(p1 = v1, p2 = v2, p3 = v3)","<p>See <code>IO.readlines</code>.  Returns all the lines from the file.\n"],["readlines","StringIO","classes/StringIO.html#method-i-readlines","(*args)","<p>See IO#readlines.\n"],["readlines","TkTextIO","classes/TkTextIO.html#method-i-readlines","(rs = $/)",""],["readlines","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readlines","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlink","File","classes/File.html#method-c-readlink","(p1)","<p>Returns the name of the file referenced by the given link. Not available on\nall platforms.\n\n<pre><code>File.symlink(&quot;testfile&quot;, ...</code></pre>\n"],["readlink","Pathname","classes/Pathname.html#method-i-readlink","()","<p>See <code>File.readlink</code>.  Read symbolic link.\n"],["readpartial","ARGF","classes/ARGF.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream. It blocks only if\n<code>ARGF</code> has no data immediately available. …\n"],["readpartial","IO","classes/IO.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the I/O stream. It blocks only if\n<em>ios</em> has no data immediately available. …\n"],["readpartial","IO::readable","classes/IO/readable.html#method-i-readpartial","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead\nof returning <code>nil</code>, as well as IO#sysread …\n"],["readpartial","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-readpartial","(maxlen, buf=nil)","<p>Reads at most <code>maxlen</code> bytes from the stream.  If\n<code>buf</code> is provided it must reference a string which will …\n"],["readpartial","TkTextIO","classes/TkTextIO.html#method-i-readpartial","(maxlen, buf=nil)",""],["readpartial","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readpartial","(p1, p2 = v2)","<p>Reads at most <em>maxlen</em> bytes from the gziped stream but it blocks\nonly if <em>gzipreader</em> has no data immediately …\n"],["ready","Net::SMTP","classes/Net/SMTP.html#method-i-ready","(from_addr, *to_addrs)",""],["ready","Net::SMTP","classes/Net/SMTP.html#method-i-ready","(from_addr, *to_addrs)",""],["ready?","IO","classes/IO.html#method-i-ready-3F","()","<p>Returns true if input available without blocking, or false. Returns nil if\nno information available. …\n"],["ready?","RemoteTkIp","classes/RemoteTkIp.html#method-i-ready-3F","(timeout=5)",""],["readyState","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-readyState","()","<p>I4 readyState get the state of the XML document\n"],["readyState","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-readyState","()","<p>I4 readyState Get ready state\n"],["readyState","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-readyState","()","<p>I4 readyState get the state of the XML document\n"],["readyState","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-readyState","()","<p>I4 readyState get the state of the XML document\n"],["readyState","Microsoft_XMLDSO_1_0","classes/Microsoft_XMLDSO_1_0.html#method-i-readyState","()","<p>I4 readyState\n"],["readyState","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-readyState","()","<p>I4 readyState Get ready state\n"],["readyState","Msxml","classes/Msxml.html#method-i-readyState","()","<p>HRESULT readyState get ready state.\n\n<pre><code>I4 arg0 --- pl [OUT]</code></pre>\n"],["real","Complex","classes/Complex.html#method-i-real","()","<p>Returns the real part.\n"],["real","Matrix","classes/Matrix.html#method-i-real","()","<p>Returns the real part of the matrix.\n\n<pre><code>Matrix[[Complex(1,2), Complex(0,1), 0], [1, 2, 3]]\n  =&gt; 1+2i  i  ...\n</code></pre>\n"],["real","Numeric","classes/Numeric.html#method-i-real","()","<p>Returns self.\n"],["real?","Complex","classes/Complex.html#method-i-real-3F","()","<p>Returns false.\n"],["real?","Matrix","classes/Matrix.html#method-i-real-3F","()","<p>Returns <code>true</code> if all entries of the matrix are real.\n"],["real?","Numeric","classes/Numeric.html#method-i-real-3F","()","<p>Returns <code>true</code> if <em>num</em> is a <code>Real</code> (i.e. non\n<code>Complex</code>).\n"],["real_inspect","IRB::History","classes/IRB/History.html#method-i-real_inspect","()",""],["realdirpath","File","classes/File.html#method-c-realdirpath","(p1, p2 = v2)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual\nfilesystem. The real pathname doesn&#39;t …\n"],["realdirpath","Pathname","classes/Pathname.html#method-i-realdirpath","(p1 = v1)","<p>Returns the real (absolute) pathname of <code>self</code> in the actual\nfilesystem. The real pathname doesn&#39;t …\n"],["realloc","DL","classes/DL.html#method-c-realloc","(p1, p2)","<p>Change the size of the memory allocated at the memory location\n<code>addr</code> to <code>size</code> bytes.  Returns the memory …\n"],["really_verbose","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-really_verbose","()","<p>Really verbose mode gives you extra output.\n"],["realpath","File","classes/File.html#method-c-realpath","(p1, p2 = v2)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual\nfilesystem not containing symlinks or …\n"],["realpath","Pathname","classes/Pathname.html#method-i-realpath","(p1 = v1)","<p>Returns the real (absolute) pathname of <code>self</code> in the actual\nfilesystem not containing symlinks or useless …\n"],["realtime","Benchmark","classes/Benchmark.html#method-c-realtime","()","<p>Returns the elapsed real time used to execute the given block.\n"],["reason","IXMLDOMParseError","classes/IXMLDOMParseError.html#method-i-reason","()","<p>BSTR reason the cause of the error\n"],["reason","LocalJumpError","classes/LocalJumpError.html#method-i-reason","()","<p>The reason this block was terminated: :break, :redo, :retry, :next,\n:return, or :noreason.\n"],["reason","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-reason","()","<p>Returns error reason. Override this for I18N.\n"],["reason_phrase","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-reason_phrase","(code)","<p>Returns the description corresponding to the HTTP status <code>code</code>\n\n<pre><code>WEBrick::HTTPStatus.reason_phrase 404\n=&gt; ...\n</code></pre>\n"],["reason_phrase","WEBrick::HTTPStatus::Status","classes/WEBrick/HTTPStatus/Status.html#method-i-reason_phrase","()","<p>Returns the HTTP status description\n"],["receive","REXML::Validation::RelaxNG","classes/REXML/Validation/RelaxNG.html#method-i-receive","(event)",""],["receiver","Method","classes/Method.html#method-i-receiver","()","<p>Returns the bound receiver of the method object.\n"],["recipients","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-recipients","()",""],["recolorTree","TkPalette","classes/TkPalette.html#method-i-recolorTree","(colors)",""],["recolorTree","TkPalette","classes/TkPalette.html#method-c-recolorTree","(win, colors)",""],["recomputeAngle","PendulumAnimationDemo","classes/PendulumAnimationDemo.html#method-i-recomputeAngle","()","<p>This procedure is the “business” part of the simulation that does simple\nnumerical integration …\n"],["record_entity_expansion","REXML::Document","classes/REXML/Document.html#method-i-record_entity_expansion","()",""],["record_location","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-record_location","(top_level)","<p>Records the RDoc::TopLevel (file) where this code object was defined\n"],["record_location","RDoc::Context","classes/RDoc/Context.html#method-i-record_location","(top_level)","<p>Record <code>top_level</code> as a file <code>self</code> is in.\n"],["recover","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-recover","(argv)","<p>Pushes back erred argument(s) to <code>argv</code>.\n"],["rect","Complex","classes/Complex.html#method-i-rect","()","<p>Returns an array; [cmp.real, cmp.imag].\n"],["rect","Complex","classes/Complex.html#method-c-rect","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n"],["rect","Matrix","classes/Matrix.html#method-i-rect","()","<p>Returns an array containing matrices corresponding to the real and\nimaginary parts of the matrix\n<p>m.rect …\n"],["rect","Numeric","classes/Numeric.html#method-i-rect","()","<p>Returns an array; [num, 0].\n"],["rectangular","Complex","classes/Complex.html#method-c-rectangular","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n"],["rectangular","Complex","classes/Complex.html#method-i-rectangular","()","<p>Returns an array; [cmp.real, cmp.imag].\n"],["rectangular","Matrix","classes/Matrix.html#method-i-rectangular","()",""],["rectangular","Numeric","classes/Numeric.html#method-i-rectangular","()","<p>Returns an array; [num, 0].\n"],["recurse_proc","JSON","classes/JSON.html#method-i-recurse_proc","(result, &proc)","<p>Recursively calls passed <em>Proc</em> if the parsed data structure is an\n<em>Array</em> or <em>Hash</em>\n"],["recursion_limit","MultiTkIp","classes/MultiTkIp.html#method-i-recursion_limit","(slave = '', limit = None)",""],["recursion_limit","MultiTkIp","classes/MultiTkIp.html#method-i-recursion_limit","(slave = '', limit = None)",""],["recursion_limit","MultiTkIp","classes/MultiTkIp.html#method-c-recursion_limit","(slave = '', limit = None)",""],["recursion_limit","MultiTkIp","classes/MultiTkIp.html#method-c-recursion_limit","(slave = '', limit = None)",""],["recursion_limit","MultiTkIp","classes/MultiTkIp.html#method-c-recursion_limit","(slave = '', limit = None)",""],["recursion_limit","MultiTkIp","classes/MultiTkIp.html#method-c-recursion_limit","(slave = '', limit = None)",""],["recursion_limit","MultiTkIp","classes/MultiTkIp.html#method-i-recursion_limit","(slave = '', limit = None)",""],["recursion_limit","MultiTkIp","classes/MultiTkIp.html#method-i-recursion_limit","(slave = '', limit = None)",""],["recv","BasicSocket","classes/BasicSocket.html#method-i-recv","(*args)","<p>Receives a message.\n<p><em>maxlen</em> is the maximum number of bytes to receive.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* …\n"],["recv_io","UNIXSocket","classes/UNIXSocket.html#method-i-recv_io","(p1 = v1, p2 = v2)","<p>UNIXServer.open(“/tmp/sock”) {|serv|\n\n<pre><code>UNIXSocket.open(&quot;/tmp/sock&quot;) {|c|\n  s = serv.accept\n\n  ...\n</code></pre>\n"],["recv_nonblock","BasicSocket","classes/BasicSocket.html#method-i-recv_nonblock","(*args)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recv_reply","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-recv_reply","()","<p>On the client side, receive a reply from the server.\n"],["recv_reply","DRb::HTTP0::ClientSide","classes/DRb/HTTP0/ClientSide.html#method-i-recv_reply","()",""],["recv_request","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-recv_request","()","<p>On the server side, receive a request from the client.\n"],["recv_request","DRb::HTTP0::ServerSide","classes/DRb/HTTP0/ServerSide.html#method-i-recv_request","()",""],["recvfrom","IPSocket","classes/IPSocket.html#method-i-recvfrom","(*args)","<p>Receives a message and return the message as a string and an address which\nthe message come from.\n<p><em>maxlen</em> …\n"],["recvfrom","Socket","classes/Socket.html#method-i-recvfrom","(*args)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code>.\n<em>flags</em> is zero or more of the <code>MSG_</code> options. The first\nelement …\n"],["recvfrom","UNIXSocket","classes/UNIXSocket.html#method-i-recvfrom","(*args)","<p>Receives a message via <em>unixsocket</em>.\n<p><em>maxlen</em> is the maximum number of bytes to receive.\n<p><em>flags</em> should be a …\n"],["recvfrom_nonblock","Socket","classes/Socket.html#method-i-recvfrom_nonblock","(*args)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvfrom_nonblock","UDPSocket","classes/UDPSocket.html#method-i-recvfrom_nonblock","(*args)","<p>Receives up to <em>maxlen</em> bytes from <code>udpsocket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvmsg","BasicSocket","classes/BasicSocket.html#method-i-recvmsg","(*args)","<p>recvmsg receives a message using recvmsg(2) system call in blocking manner.\n<p><em>maxmesglen</em> is the maximum …\n"],["recvmsg_nonblock","BasicSocket","classes/BasicSocket.html#method-i-recvmsg_nonblock","(*args)","<p>recvmsg receives a message using recvmsg(2) system call in non-blocking\nmanner.\n<p>It is similar to BasicSocket#recvmsg …\n"],["redirect?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-redirect-3F","(code)","<p>Is <code>code</code> a redirection status?\n"],["redirector","Gem::Ext::Builder","classes/Gem/Ext/Builder.html#method-c-redirector","()",""],["redither","TkPhotoImage","classes/TkPhotoImage.html#method-i-redither","()",""],["redither","TkPhotoImage","classes/TkPhotoImage.html#method-i-redither","()",""],["redraw","Tk::Tcllib::Widget::Ruler","classes/Tk/Tcllib/Widget/Ruler.html#method-i-redraw","()",""],["reduce","Enumerable","classes/Enumerable.html#method-i-reduce","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["reenable","Rake::Task","classes/Rake/Task.html#method-i-reenable","()","<p>Reenable the task, allowing its tasks to be executed if the task is invoked\nagain.\n"],["ref","DL::CPtr","classes/DL/CPtr.html#method-i-ref","()","<p>Returns a DL::CPtr that is a reference pointer for this DL::CPtr. Analogous\nto the ampersand operator …\n"],["ref","DL::CPtr","classes/DL/CPtr.html#method-i-ref","()","<p>Returns a DL::CPtr that is a reference pointer for this DL::CPtr. Analogous\nto the ampersand operator …\n"],["ref","TkVariable","classes/TkVariable.html#method-i-ref","(*idxs)",""],["ref","TkVariable","classes/TkVariable.html#method-i-ref","(*idxs)",""],["reformat","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-reformat","(src, dst, txt)","<p>class methods\n"],["refresh","Curses","classes/Curses.html#method-c-refresh","()","<p>Refreshes the windows and lines.\n"],["refresh","Curses::Window","classes/Curses/Window.html#method-i-refresh","()","<p>Refreshes the windows and lines.\n"],["refresh","Gem","classes/Gem.html#method-c-refresh","()","<p>Refresh source_index from disk and clear searcher.\n"],["refresh","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-refresh","(*opts)",""],["refresh","Tk::Iwidgets::Canvasprintbox","classes/Tk/Iwidgets/Canvasprintbox.html#method-i-refresh","()",""],["refresh","Tk::Iwidgets::Canvasprintdialog","classes/Tk/Iwidgets/Canvasprintdialog.html#method-i-refresh","()",""],["refresh","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-refresh","(node)",""],["refresh","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-refresh","(*args)","<p>Refresh the current file.\n"],["refresh!","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-refresh-21","()","<p>Replaces the gems in the source index from specifications in the\ndirectories this source index was created …\n"],["refresh!","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-refresh-21","()","<p>Replaces the gems in the source index from specifications in the\ndirectories this source index was created …\n"],["refresh_line","Readline","classes/Readline.html#method-c-refresh_line","()","<p>Clear the current input line.\n<p>Raises SecurityError exception if $SAFE is 4.\n"],["regexp","MatchData","classes/MatchData.html#method-i-regexp","()","<p>Returns the regexp.\n\n<pre><code>m = /a.*b/.match(&quot;abc&quot;)\nm.regexp #=&gt; /a.*b/\n</code></pre>\n"],["regexp","OptionParser::Completion","classes/OptionParser/Completion.html#method-c-regexp","(key, icase)",""],["regexp","URI","classes/URI.html#method-c-regexp","(schemes = nil)","<p>Synopsis\n\n<pre><code>URI::regexp([match_schemes])</code></pre>\n<p>Args\n"],["regist","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-i-regist","(name, ro)",""],["regist_server","DRb","classes/DRb.html#method-c-regist_server","(server)",""],["register","Gem::NoAliasYAMLTree","classes/Gem/NoAliasYAMLTree.html#method-i-register","(target, obj)","<p>Noop this out so there are no anchors\n"],["register","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-register","(directive, &block)","<p>Registers <code>directive</code> as one handled by RDoc.  If a block is\ngiven the directive will be replaced by the …\n"],["register","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-register","(win, keys={})",""],["register","Tk::BWidget::DragSite","classes/Tk/BWidget/DragSite.html#method-c-register","(path, keys={})",""],["register","Tk::BWidget::DropSite","classes/Tk/BWidget/DropSite.html#method-c-register","(path, keys={})",""],["register","Tk::Tcllib::Tooltip","classes/Tk/Tcllib/Tooltip.html#method-c-register","(widget, msg, keys=nil)",""],["register","VCS","classes/VCS.html#method-c-register","(dir)",""],["register","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-c-register","(seconds, exception)","<p>Registers a new timeout handler\n<p><code>time</code> &mdash; Timeout in seconds\n<p><code>exception</code> &mdash; Exception to raise when timeout elapsed …\n"],["register","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-i-register","(thread, time, exception)","<p>Registers a new timeout handler\n<p><code>time</code> &mdash; Timeout in seconds\n<p><code>exception</code> &mdash; Exception to raise when timeout elapsed …\n"],["register_command","Gem::CommandManager","classes/Gem/CommandManager.html#method-i-register_command","(command)","<p>Register the Symbol <code>command</code> as a gem command.\n"],["register_uri","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-register_uri","(uri, name)","<p>register uri against this name.\n"],["registered","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-registered","()","<p>Registered directives\n"],["registry=","URI::Generic","classes/URI/Generic.html#method-i-registry-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["regular?","Matrix","classes/Matrix.html#method-i-regular-3F","()","<p>Returns <code>true</code> if this is a regular (i.e. non-singular) matrix.\n"],["rehash","ENV","classes/ENV.html#method-c-rehash","()","<p>Re-hashing the environment variables does nothing.  It is provided for\ncompatibility with Hash.\n"],["rehash","Hash","classes/Hash.html#method-i-rehash","()","<p>Rebuilds the hash based on the current hash values for each key. If values\nof key objects have changed …\n"],["rehash","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-rehash","()","<p>ProcessCommand#rehash\n\n<pre><code>clear command hash table.</code></pre>\n"],["reject","Array","classes/Array.html#method-i-reject","()","<p>Returns a new array containing the items in <code>self</code> for which the\nblock is not true. See also <code>Array#delete_if</code> …\n"],["reject","DBM","classes/DBM.html#method-i-reject","()","<p>Converts the contents of the database to an in-memory Hash, then calls\nHash#reject with the specified …\n"],["reject","ENV","classes/ENV.html#method-c-reject","()","<p>Same as ENV#delete_if, but works on (and returns) a copy of the\nenvironment.\n"],["reject","Enumerable","classes/Enumerable.html#method-i-reject","()","<p>Returns an array for all elements of <em>enum</em> for which <em>block</em>\nis false (see also <code>Enumerable#find_all</code>).\n<p>If …\n"],["reject","GDBM","classes/GDBM.html#method-i-reject","()","<p>Returns a hash copy of <em>gdbm</em> where all key-value pairs from\n<em>gdbm</em> for which <em>block</em> evaluates to true are …\n"],["reject","Hash","classes/Hash.html#method-i-reject","()","<p>Same as <code>Hash#delete_if</code>, but works on (and returns) a copy of\nthe <em>hsh</em>. Equivalent to <code><em>hsh</em>.dup.delete_if</code> …\n"],["reject","OptionParser","classes/OptionParser.html#method-c-reject","(*args, &blk)","<p>See #reject.\n"],["reject","OptionParser","classes/OptionParser.html#method-i-reject","(*args, &blk)","<p>Directs to reject specified class argument.\n<p><code>t</code> &mdash; Argument class specifier, any object including Class.\n\n\n<pre><code>reject(t)</code></pre>\n"],["reject","OptionParser::List","classes/OptionParser/List.html#method-i-reject","(t)","<p>See OptionParser.reject.\n"],["reject","SDBM","classes/SDBM.html#method-i-reject","()",""],["reject","YAML::DBM","classes/YAML/DBM.html#method-i-reject","()","<p>Converts the contents of the database to an in-memory Hash, then calls\nHash#reject with the specified …\n"],["reject!","Array","classes/Array.html#method-i-reject-21","()","<p>Equivalent to <code>Array#delete_if</code>, deleting elements from\n<code>self</code> for which the block evaluates to true, but …\n"],["reject!","DBM","classes/DBM.html#method-i-reject-21","()","<p>Deletes all entries for which the code block returns true. Returns self.\n"],["reject!","ENV","classes/ENV.html#method-c-reject-21","()","<p>Equivalent to ENV#delete_if but returns <code>nil</code> if no changes were\nmade.\n<p>Returns an Enumerator if no block …\n"],["reject!","GDBM","classes/GDBM.html#method-i-reject-21","()","<p>Deletes every key-value pair from <em>gdbm</em> for which <em>block</em>\nevaluates to true.\n"],["reject!","Hash","classes/Hash.html#method-i-reject-21","()","<p>Equivalent to <code>Hash#delete_if</code>, but returns <code>nil</code> if\nno changes were made.\n"],["reject!","SDBM","classes/SDBM.html#method-i-reject-21","()",""],["reject!","Set","classes/Set.html#method-i-reject-21","()","<p>Equivalent to Set#delete_if, but returns nil if no changes were made.\n"],["relative?","Pathname","classes/Pathname.html#method-i-relative-3F","()","<p>The opposite of #absolute?\n"],["relative?","URI::Generic","classes/URI/Generic.html#method-i-relative-3F","()","<p>Checks if URI is relative\n"],["relative_path_from","Pathname","classes/Pathname.html#method-i-relative_path_from","(base_directory)","<p>#relative_path_from returns a relative path from the argument to the\nreceiver.  If <code>self</code> is absolute, …\n"],["relative_to","VCS","classes/VCS.html#method-i-relative_to","(path)",""],["release","OptionParser","classes/OptionParser.html#method-i-release","()","<p>Release code\n"],["release","Tk::BLT::Busy","classes/Tk/BLT/Busy.html#method-i-release","(*wins)",""],["release","Version","classes/Version.html#method-i-release","()","<p>The release for this version (e.g. 1.2.0.a -&gt; 1.2.0). Non-prerelease\nversions return themselves.\n"],["released_gems","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-released_gems","()",""],["released_gems","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-released_gems","()",""],["released_specs","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-released_specs","()","<p>An array including only the released gemspecs\n"],["released_specs","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-released_specs","()","<p>An array including only the released gemspecs\n"],["reload","DRb::DRbUnknown","classes/DRb/DRbUnknown.html#method-i-reload","()","<p>Attempt to load the wrapped marshalled object again.\n<p>If the class of the object is now known locally, …\n"],["reload","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-reload","()","<p>Reloads passwords from the database\n"],["reload","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-i-reload","()","<p>Reload groups from the database\n"],["reload","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-reload","()","<p>Reload passwords from the database\n"],["remainder","BigDecimal","classes/BigDecimal.html#method-i-remainder","(p1)","<p>Returns the remainder from dividing by the value.\n<p>x.remainder(y) means x-y*(x/y).truncate\n"],["remainder","Bignum","classes/Bignum.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <em>big</em> by <em>numeric</em>.\n\n<pre><code>-1234567890987654321.remainder(13731)      #=&gt; -6966 ...\n</code></pre>\n"],["remainder","Numeric","classes/Numeric.html#method-i-remainder","(p1)","\n<pre><code>x.remainder(y) means x-y*(x/y).truncate</code></pre>\n<p>See <code>Numeric#divmod</code>.\n"],["remote?","Gem::LocalRemoteOptions","classes/Gem/LocalRemoteOptions.html#method-i-remote-3F","()","<p>Is remote fetching enabled?\n"],["remote_address","BasicSocket","classes/BasicSocket.html#method-i-remote_address","()","<p>Returns an Addrinfo object for remote address obtained by getpeername.\n<p>Note that addrinfo.protocol is …\n"],["remote_ip","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-remote_ip","()","<p>The client&#39;s IP address\n"],["remove","FileUtils","classes/FileUtils.html#method-c-remove","(list, options = {})",""],["remove","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-remove","(spec)","<p>spec &mdash; the spec of the gem to be uninstalled\n<p>list &mdash; the list of all such gems\n\n<p>Warning: this method modifies …\n"],["remove","OptionParser","classes/OptionParser.html#method-i-remove","()","<p>Removes the last List.\n"],["remove","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove","REXML::Attribute","classes/REXML/Attribute.html#method-i-remove","()","<p>Removes this Attribute from the tree, and returns true if successfull\n<p>This method is usually not called …\n"],["remove","REXML::Child","classes/REXML/Child.html#method-i-remove","()","<p>Removes this child from the parent.\n<p>Returns &mdash; self\n\n"],["remove","Tk::BWidget::PanelFrame","classes/Tk/BWidget/PanelFrame.html#method-i-remove","(*wins)",""],["remove","Tk::BWidget::StatusBar","classes/Tk/BWidget/StatusBar.html#method-i-remove","(*wins)",""],["remove","Tk::Canvas","classes/Tk/Canvas.html#method-i-remove","(*args)",""],["remove","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-remove","(*args)",""],["remove","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-remove","(win, *wins)",""],["remove","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-remove","(win, *wins)",""],["remove","Tk::RbWidget::Combobox","classes/Tk/RbWidget/Combobox.html#method-i-remove","(ent)",""],["remove","Tk::Tcllib::History","classes/Tk/Tcllib/History.html#method-c-remove","(entry)",""],["remove","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-remove","(*wins)",""],["remove","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-remove","(*wins)",""],["remove","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-i-remove","(*wins)",""],["remove","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-remove","(*items)",""],["remove","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-remove","()",""],["remove","TkGrid","classes/TkGrid.html#method-c-remove","(*args)",""],["remove","TkGrid","classes/TkGrid.html#method-c-remove","(*args)",""],["remove","TkTextTag","classes/TkTextTag.html#method-i-remove","(*indices)",""],["remove","TkTextTag","classes/TkTextTag.html#method-i-remove","(*indices)",""],["remove","TkVariable","classes/TkVariable.html#method-i-remove","(*elems)",""],["remove","TkVariable","classes/TkVariable.html#method-i-remove","(*elems)",""],["remove","TkcItem","classes/TkcItem.html#method-i-remove","()",""],["remove","TkcTag","classes/TkcTag.html#method-i-remove","()",""],["removeAttribute","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-removeAttribute","(arg0)","<p>VOID removeAttribute remove an attribute by name\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["removeAttributeNode","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-removeAttributeNode","(arg0)","<p>IXMLDOMAttribute removeAttributeNode remove the specified attribute\n\n<pre><code>IXMLDOMAttribute arg0 --- DOMAttribute ...</code></pre>\n"],["removeChild","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXMLDOMText","classes/IXMLDOMText.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","IXTLRuntime","classes/IXTLRuntime.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-removeChild","(arg0)","<p>IXMLDOMNode removeChild remove a child node\n\n<pre><code>IXMLDOMNode arg0 --- childNode [IN]</code></pre>\n"],["removeChild","NQXML::Node","classes/NQXML/Node.html#method-i-removeChild","(node)",""],["removeNamedItem","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-removeNamedItem","(arg0)","<p>IXMLDOMNode removeNamedItem remove item by name\n\n<pre><code>BSTR arg0 --- name [IN]</code></pre>\n"],["removeQualifiedItem","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-removeQualifiedItem","(arg0, arg1)","<p>IXMLDOMNode removeQualifiedItem remove the item by name and namespace\n\n<pre><code>BSTR arg0 --- baseName [IN]\nBSTR ...</code></pre>\n"],["remove_all","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-remove_all","(list)","<p>Removes all gems in <code>list</code>.\n<p>NOTE: removes uninstalled gems from <code>list</code>.\n"],["remove_by_name","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-remove_by_name","(full_name)","<p>Removes the gemspec matching <code>full_name</code> from the dependency\nlist\n"],["remove_callback","DL","classes/DL.html#method-i-remove_callback","(addr, ctype = nil)",""],["remove_callback_internal","DL","classes/DL.html#method-i-remove_callback_internal","(proc_entry, addr_entry, addr, ctype = nil)",""],["remove_cdecl_callback","DL","classes/DL.html#method-i-remove_cdecl_callback","(addr, ctype = nil)",""],["remove_class_variable","Module","classes/Module.html#method-i-remove_class_variable","(p1)","<p>Removes the definition of the <em>sym</em>, returning that constant&#39;s\nvalue.\n\n<pre><code>class Dummy\n  @@var = 99\n  puts ...\n</code></pre>\n"],["remove_coding_comment","RDoc::Parser::Simple","classes/RDoc/Parser/Simple.html#method-i-remove_coding_comment","(text)","<p>Removes the encoding magic comment from <code>text</code>\n"],["remove_commented_out_lines","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-remove_commented_out_lines","()","<p>Removes lines that are commented out that might otherwise get picked up\nwhen scanning for classes and …\n"],["remove_destroy","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-remove_destroy","(*wins)",""],["remove_destroy","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-remove_destroy","(*wins)",""],["remove_dir","FileUtils","classes/FileUtils.html#method-c-remove_dir","(path, force = false)","<p>Removes a directory <code>dir</code> and its contents recursively. This\nmethod ignores StandardError if <code>force</code> is true. …\n"],["remove_entry","FileUtils","classes/FileUtils.html#method-c-remove_entry","(path, force = false)","<p>This method removes a file system entry <code>path</code>.\n<code>path</code> might be a regular file, a directory, or something. …\n"],["remove_entry_secure","FileUtils","classes/FileUtils.html#method-c-remove_entry_secure","(path, force = false)","<p>This method removes a file system entry <code>path</code>. \n<code>path</code> shall be a regular file, a directory, or something. …\n"],["remove_executables","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-remove_executables","(spec)","<p>Removes installed executables and batch files (windows only) for\n<code>gemspec</code>.\n"],["remove_file","FileUtils","classes/FileUtils.html#method-c-remove_file","(path, force = false)","<p>Removes a file <code>path</code>. This method ignores StandardError if\n<code>force</code> is true.\n"],["remove_from_documentation?","RDoc::Context","classes/RDoc/Context.html#method-i-remove_from_documentation-3F","()","<p>Should we remove this context from the documentation?\n<p>The answer is yes if:\n<p>#received_nodoc is <code>true</code>\n"],["remove_handler","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-c-remove_handler","(suffix)","<p>Remove custom handling of requests for files with <code>suffix</code>\n"],["remove_invisible","RDoc::Context","classes/RDoc/Context.html#method-i-remove_invisible","(min_visibility)","<p>Removes methods and attributes with a visibility less than\n<code>min_visibility</code>.\n"],["remove_leading_dot_dir","Gem::Validator","classes/Gem/Validator.html#method-i-remove_leading_dot_dir","(path)",""],["remove_nodoc","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-remove_nodoc","(all_hash)","<p>Removes from <code>all_hash</code> the contexts that are nodoc or have no\ncontent.\n<p>See RDoc::Context#remove_from_documentation? …\n"],["remove_nodoc_children","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-remove_nodoc_children","()","<p>Updates the child modules or classes of class/module <code>parent</code> by\ndeleting the ones that have been removed …\n"],["remove_old_bin_files","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-remove_old_bin_files","(bin_dir)",""],["remove_option","Gem::Command","classes/Gem/Command.html#method-i-remove_option","(name)","<p>Remove previously defined command-line argument <code>name</code>.\n"],["remove_owners","Gem::Commands::OwnerCommand","classes/Gem/Commands/OwnerCommand.html#method-i-remove_owners","(name, owners)",""],["remove_private_comments","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-remove_private_comments","(comment)","<p>Removes private comments from <code>comment</code>\n"],["remove_private_comments","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-remove_private_comments","(comment)","<p>Removes private comments from <code>comment</code>\n"],["remove_private_comments","RDoc::Parser::Simple","classes/RDoc/Parser/Simple.html#method-i-remove_private_comments","(text)","<p>Removes comments wrapped in <code>--/++</code>\n"],["remove_response_handler","Net::IMAP","classes/Net/IMAP.html#method-i-remove_response_handler","(handler)","<p>Removes the response handler.\n"],["remove_server","DRb","classes/DRb.html#method-c-remove_server","(server)",""],["remove_siginfo_handler","RDoc::Generator::RI","classes/RDoc/Generator/RI.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_siginfo_handler","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_spec","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-remove_spec","(full_name)","<p>Remove a gem specification named <code>full_name</code>.\n"],["remove_spec","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-remove_spec","(full_name)","<p>Remove a gem specification named <code>full_name</code>.\n"],["remove_spec","Gem::Specification","classes/Gem/Specification.html#method-c-remove_spec","(spec)","<p>Removes <code>spec</code> from the known specs.\n"],["remove_specs_unsatisfied_by","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-remove_specs_unsatisfied_by","(dependencies)","<p>Remove everything in the DependencyList that matches but doesn&#39;t\nsatisfy items in <code>dependencies</code> (a …\n"],["remove_stdcall_callback","DL","classes/DL.html#method-i-remove_stdcall_callback","(addr, ctype = nil)",""],["remove_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-c-remove_tk_procs","(*names)",""],["remove_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-c-remove_tk_procs","(*names)",""],["remove_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-c-remove_tk_procs","(*names)",""],["remove_tk_procs","MultiTkIp","classes/MultiTkIp.html#method-c-remove_tk_procs","(*names)",""],["remove_token_listener","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-remove_token_listener","(obj)","<p>Removes the token listener <code>obj</code>\n"],["remove_unparseable","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-remove_unparseable","(files)","<p>Removes file extensions known to be unparseable from <code>files</code>\n"],["remove_with_destroy","Tk::BWidget::PanelFrame","classes/Tk/BWidget/PanelFrame.html#method-i-remove_with_destroy","(*wins)",""],["remove_with_destroy","Tk::BWidget::StatusBar","classes/Tk/BWidget/StatusBar.html#method-i-remove_with_destroy","(*wins)",""],["remove_with_destroy","Tk::Tcllib::Widget::Statusbar","classes/Tk/Tcllib/Widget/Statusbar.html#method-i-remove_with_destroy","(*wins)",""],["remove_with_destroy","Tk::Tcllib::Widget::Toolbar","classes/Tk/Tcllib/Widget/Toolbar.html#method-i-remove_with_destroy","(*items)",""],["remove_with_destroy","Tk::Tcllib::Widget::ToolbarItem","classes/Tk/Tcllib/Widget/ToolbarItem.html#method-i-remove_with_destroy","()",""],["rename","File","classes/File.html#method-c-rename","(p1, p2)","<p>Renames the given file to the new name. Raises a\n<code>SystemCallError</code> if the file cannot be renamed.\n\n<pre><code>File.rename(&quot;afile&quot;, ...</code></pre>\n"],["rename","Net::FTP","classes/Net/FTP.html#method-i-rename","(fromname, toname)","<p>Renames a file on the server.\n"],["rename","Net::IMAP","classes/Net/IMAP.html#method-i-rename","(mailbox, newname)","<p>Sends a RENAME command to change the name of the <code>mailbox</code> to\n<code>newname</code>.\n<p>A Net::IMAP::NoResponseError is raised …\n"],["rename","Pathname","classes/Pathname.html#method-i-rename","(p1)","<p>See <code>File.rename</code>.  Rename the file.\n"],["render","Tk::Iwidgets::Scrolledhtml","classes/Tk/Iwidgets/Scrolledhtml.html#method-i-render","(htmltext, workdir=None)",""],["render_template","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-render_template","(template_file, out_file)","<p>Load and render the erb template in the given <code>template_file</code>\nand write it out to <code>out_file</code>.\n<p>Both <code>template_file</code> …\n"],["renew","Rinda::SimpleRenewer","classes/Rinda/SimpleRenewer.html#method-i-renew","()","<p>Called by the TupleSpace to check if the object is still alive.\n"],["renew","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-renew","(sec_or_renewer)","<p>Reset the expiry time according to <code>sec_or_renewer</code>.\n<p><code>nil</code> &mdash; it is set to expire in the far future.\n<p><code>false</code> &mdash; it …\n"],["reopen","IO","classes/IO.html#method-i-reopen","(p1, p2 = v2)","<p>Reassociates <em>ios</em> with the I/O stream given in <em>other_IO</em> or\nto a new stream opened on <em>path</em>. This may dynamically …\n"],["reopen","StringIO","classes/StringIO.html#method-i-reopen","(*args)","<p>Reinitializes <strong>strio</strong> with the given <em>other_StrIO</em> or\n<em>string</em> and <em>mode</em> (see StringIO#new).\n"],["reopen","Syslog","classes/Syslog.html#method-c-reopen","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["reopen","TkTextIO","classes/TkTextIO.html#method-i-reopen","(*args)",""],["reorder","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-reorder","(neworder)",""],["reorder","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-reorder","(node, neworder)",""],["reorder","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-reorder","(neworder)",""],["reorganize","GDBM","classes/GDBM.html#method-i-reorganize","()","<p>Reorganizes the database file. This operation removes reserved space of\nelements that have already been …\n"],["rep","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-c-rep","(master, *args)",""],["repair_command","Rake::AltSystem","classes/Rake/AltSystem.html#method-i-repair_command","(cmd)",""],["repeat","PendulumAnimationDemo","classes/PendulumAnimationDemo.html#method-i-repeat","()","<p>This method ties together the simulation engine and the graphical display\ncode that visualizes it.\n"],["repeatDemo","Object","classes/Object.html#method-i-repeatDemo","()","<p>Repeating buttons demo:\n"],["repeated_combination","Array","classes/Array.html#method-i-repeated_combination","(p1)","<p>When invoked with a block, yields all repeated combinations of length\n<em>n</em> of elements from <em>ary</em> and then …\n"],["repeated_permutation","Array","classes/Array.html#method-i-repeated_permutation","(p1)","<p>When invoked with a block, yield all repeated permutations of length\n<em>n</em> of the elements of <em>ary</em>, then return …\n"],["replace","Array","classes/Array.html#method-i-replace","(p1)","<p>Replaces the contents of <code>self</code> with the contents of\n<em>other_ary</em>, truncating or expanding if necessary.\n\n<pre><code>a ...</code></pre>\n"],["replace","DBM","classes/DBM.html#method-i-replace","(p1)","<p>Replaces the contents of the database with the contents of the specified\nobject. Takes any object which …\n"],["replace","ENV","classes/ENV.html#method-c-replace","(p1)","<p>Replaces the contents of the environment variables with the contents of\n<code>hash</code>.\n"],["replace","GDBM","classes/GDBM.html#method-i-replace","(p1)","<p>Replaces the content of <em>gdbm</em> with the key-value pairs of\n<em>other</em>. <em>other</em> must have an each_pair method. …\n"],["replace","Hash","classes/Hash.html#method-i-replace","(p1)","<p>Replaces the contents of <em>hsh</em> with the contents of\n<em>other_hash</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ ...\n</code></pre>\n"],["replace","SDBM","classes/SDBM.html#method-i-replace","(p1)",""],["replace","Set","classes/Set.html#method-i-replace","(enum)","<p>Replaces the contents of the set with the contents of the given enumerable\nobject and returns self.\n"],["replace","String","classes/String.html#method-i-replace","(p1)","<p>Replaces the contents and taintedness of <em>str</em> with the\ncorresponding values in <em>other_str</em>.\n\n<pre><code>s = &quot;hello&quot;  ...</code></pre>\n"],["replace","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-replace","(hash)",""],["replace","TkFont","classes/TkFont.html#method-i-replace","(ltn, knj=None)",""],["replace","TkFont","classes/TkFont.html#method-i-replace","(ltn, knj=None)",""],["replace","YAML::DBM","classes/YAML/DBM.html#method-i-replace","( hsh )","<p>Replaces the contents of the database with the contents of the specified\nobject. Takes any object which …\n"],["replaceChild","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXMLDOMText","classes/IXMLDOMText.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","IXTLRuntime","classes/IXTLRuntime.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceChild","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-replaceChild","(arg0, arg1)","<p>IXMLDOMNode replaceChild replace a child node\n\n<pre><code>IXMLDOMNode arg0 --- newChild [IN]\nIXMLDOMNode arg1 --- ...</code></pre>\n"],["replaceData","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-replaceData","(arg0, arg1, arg2)","<p>VOID replaceData replace string within the value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]\nBSTR arg2 ...</code></pre>\n"],["replaceData","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-replaceData","(arg0, arg1, arg2)","<p>VOID replaceData replace string within the value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]\nBSTR arg2 ...</code></pre>\n"],["replaceData","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-replaceData","(arg0, arg1, arg2)","<p>VOID replaceData replace string within the value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]\nBSTR arg2 ...</code></pre>\n"],["replaceData","IXMLDOMText","classes/IXMLDOMText.html#method-i-replaceData","(arg0, arg1, arg2)","<p>VOID replaceData replace string within the value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]\nBSTR arg2 ...</code></pre>\n"],["replace_chars","Tk::Canvas","classes/Tk/Canvas.html#method-i-replace_chars","(tag, first, last, str_or_coords)",""],["replace_chars","TkcTagAccess","classes/TkcTagAccess.html#method-i-replace_chars","(first, last, str_or_coords)",""],["replace_child","REXML::Parent","classes/REXML/Parent.html#method-i-replace_child","( to_replace, replacement )","<p>Replaces one child with another, making sure the nodelist is correct @param\nto_replace the child to replace …\n"],["replace_coords","Tk::Canvas","classes/Tk/Canvas.html#method-i-replace_coords","(tag, first, last, str_or_coords)",""],["replace_coords","TkcTagAccess","classes/TkcTagAccess.html#method-i-replace_coords","(first, last, str_or_coords)",""],["replace_with","REXML::Child","classes/REXML/Child.html#method-i-replace_with","( child )","<p>Replaces this object with another object.  Basically, calls\nParent.replace_child\n<p>Returns &mdash; self\n\n"],["replacement","Encoding::Converter","classes/Encoding/Converter.html#method-i-replacement","()","<p>Returns the replacement string.\n\n<pre><code>ec = Encoding::Converter.new(&quot;euc-jp&quot;, &quot;us-ascii&quot;)\np ec.replacement   ...</code></pre>\n"],["replacement=","Encoding::Converter","classes/Encoding/Converter.html#method-i-replacement-3D","(p1)","<p>Sets the replacement string.\n\n<pre><code>ec = Encoding::Converter.new(&quot;utf-8&quot;, &quot;us-ascii&quot;, :undef =&gt; :replace)\nec.replacement ...\n</code></pre>\n"],["replicate","Encoding","classes/Encoding.html#method-i-replicate","(p1)","<p>Returns a replicated encoding of <em>enc</em> whose name is <em>name</em>.\nThe new encoding should have the same byte structure …\n"],["reply","DRb::HTTP0::Callback","classes/DRb/HTTP0/Callback.html#method-i-reply","(body)",""],["reply","Socket::UDPSource","classes/Socket/UDPSource.html#method-i-reply","(msg)","<p>Sends the String <code>msg</code> to the source\n"],["reply_service","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-reply_service","()","<p>Creates a thread that notifies waiting clients from the TupleSpace.\n"],["report","GC::Profiler","classes/GC/Profiler.html#method-c-report","(p1 = v1)","<p>Writes the GC::Profiler#result to <code>$stdout</code> or the given IO\nobject.\n"],["report","RDoc::Stats","classes/RDoc/Stats.html#method-i-report","()","<p>Returns a report on which items are not documented\n"],["report_attributes","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_attributes","(cm)","<p>Returns a report on undocumented attributes in ClassModule <code>cm</code>\n"],["report_class_module","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_class_module","(cm)","<p>Returns a report on undocumented items in ClassModule <code>cm</code>\n"],["report_constants","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_constants","(cm)","<p>Returns a report on undocumented constants in ClassModule <code>cm</code>\n"],["report_methods","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_methods","(cm)","<p>Returns a report on undocumented methods in ClassModule <code>cm</code>\n"],["represent_map","Psych::Coder","classes/Psych/Coder.html#method-i-represent_map","(tag, map)","<p>Emit a sequence with <code>map</code> and <code>tag</code>\n"],["represent_object","Psych::Coder","classes/Psych/Coder.html#method-i-represent_object","(tag, obj)","<p>Emit an arbitrary object <code>obj</code> and <code>tag</code>\n"],["represent_scalar","Psych::Coder","classes/Psych/Coder.html#method-i-represent_scalar","(tag, value)","<p>Emit a scalar with <code>value</code> and <code>tag</code>\n"],["represent_seq","Psych::Coder","classes/Psych/Coder.html#method-i-represent_seq","(tag, list)","<p>Emit a sequence with <code>list</code> and <code>tag</code>\n"],["req_body","DRb::HTTP0::Callback","classes/DRb/HTTP0/Callback.html#method-i-req_body","()",""],["reqheight","TkWinfo","classes/TkWinfo.html#method-c-reqheight","(win)",""],["reqheight","TkWinfo","classes/TkWinfo.html#method-c-reqheight","(win)",""],["request","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-request","(uri, request_class, last_modified = nil)","<p>Performs a Net::HTTP request of type <code>request_class</code> on\n<code>uri</code> returning a Net::HTTP response object.  request …\n"],["request","Net::HTTP","classes/Net/HTTP.html#method-i-request","(req, body = nil)","<p>Sends an HTTPRequest object <code>req</code> to the HTTP server.\n<p>If <code>req</code> is a Net::HTTP::Post or Net::HTTP::Put request …\n"],["request","Net::HTTP","classes/Net/HTTP.html#method-i-request","(req, body = nil)","<p>Sends an HTTPRequest object <code>req</code> to the HTTP server.\n<p>If <code>req</code> is a Net::HTTP::Post or Net::HTTP::Put request …\n"],["request","Tk::WinDDE","classes/Tk/WinDDE.html#method-c-request","(service, topic, item)",""],["request_body_permitted?","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-request_body_permitted-3F","()",""],["request_get","Net::HTTP","classes/Net/HTTP.html#method-i-request_get","(path, initheader = nil)","<p>Sends a GET request to the <code>path</code>. Returns the response as a\nNet::HTTPResponse object.\n<p>When called with …\n"],["request_get","Net::HTTP","classes/Net/HTTP.html#method-i-request_get","(path, initheader = nil)","<p>Sends a GET request to the <code>path</code>. Returns the response as a\nNet::HTTPResponse object.\n<p>When called with …\n"],["request_head","Net::HTTP","classes/Net/HTTP.html#method-i-request_head","(path, initheader = nil, &block)","<p>Sends a HEAD request to the <code>path</code> and returns the response as a\nNet::HTTPResponse object.\n<p>Returns the response. …\n"],["request_head","Net::HTTP","classes/Net/HTTP.html#method-i-request_head","(path, initheader = nil, &block)","<p>Sends a HEAD request to the <code>path</code> and returns the response as a\nNet::HTTPResponse object.\n<p>Returns the response. …\n"],["request_post","Net::HTTP","classes/Net/HTTP.html#method-i-request_post","(path, data, initheader = nil)","<p>Sends a POST request to the <code>path</code>.\n<p>Returns the response as a Net::HTTPResponse object.\n<p>When called with …\n"],["request_post","Net::HTTP","classes/Net/HTTP.html#method-i-request_post","(path, data, initheader = nil)","<p>Sends a POST request to the <code>path</code>.\n<p>Returns the response as a Net::HTTPResponse object.\n<p>When called with …\n"],["request_uri","URI::HTTP","classes/URI/HTTP.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for an HTTP request, as required by Net::HTTP::Get.\n<p>If the URI contains …\n"],["require","IRB::Locale","classes/IRB/Locale.html#method-i-require","(file, priv = nil)",""],["require","TkPackage","classes/TkPackage.html#method-i-require","(package, version=None)",""],["require_exact","TkPackage","classes/TkPackage.html#method-i-require_exact","(package, version)",""],["require_path","Gem::Specification","classes/Gem/Specification.html#method-i-require_path","()","<p>Singular accessor for #require_paths\n"],["require_path=","Gem::Specification","classes/Gem/Specification.html#method-i-require_path-3D","(path)","<p>Singular accessor for #require_paths\n"],["require_path_info?","XMLRPC::WEBrickServlet","classes/XMLRPC/WEBrickServlet.html#method-i-require_path_info-3F","()","<p>deprecated from WEBrick/1.2.2. but does not break anything.\n"],["require_relative","Kernel","classes/Kernel.html#method-i-require_relative","(p1)","<p>Ruby tries to load the library named <em>string</em> relative to the\nrequiring file&#39;s path.  If the file&#39;s …\n"],["required_attribute?","Gem::Specification","classes/Gem/Specification.html#method-c-required_attribute-3F","(name)","<p>Is <code>name</code> a required attribute?\n"],["required_attributes","Gem::Specification","classes/Gem/Specification.html#method-c-required_attributes","()","<p>Required specification attributes\n"],["required_location","Gem","classes/Gem.html#method-c-required_location","(gemname, libfile, *requirements)","<p>Full path to <code>libfile</code> in <code>gemname</code>.  Searches for\nthe latest gem unless <code>requirements</code> is given.\n"],["required_prefix","RSS::Element","classes/RSS/Element.html#method-i-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesCategory","classes/RSS/ITunesChannelModel/ITunesCategory.html#method-i-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesImage","classes/RSS/ITunesChannelModel/ITunesImage.html#method-i-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesOwner","classes/RSS/ITunesChannelModel/ITunesOwner.html#method-i-required_prefix","()",""],["required_prefix","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-required_prefix","()",""],["required_prefix","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-required_prefix","()",""],["required_prefix","RSS::ImageItemModel::ImageItem","classes/RSS/ImageItemModel/ImageItem.html#method-i-required_prefix","()",""],["required_prefix","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-i-required_prefix","()",""],["required_prefix","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-required_prefix","()",""],["required_prefix","RSS::TrackBackModel10::TrackBackAbout","classes/RSS/TrackBackModel10/TrackBackAbout.html#method-i-required_prefix","()",""],["required_prefix","RSS::TrackBackModel10::TrackBackPing","classes/RSS/TrackBackModel10/TrackBackPing.html#method-i-required_prefix","()",""],["required_prefix","RSS::TrackBackModel20::TrackBackAbout","classes/RSS/TrackBackModel20/TrackBackAbout.html#method-i-required_prefix","()",""],["required_prefix","RSS::TrackBackModel20::TrackBackPing","classes/RSS/TrackBackModel20/TrackBackPing.html#method-i-required_prefix","()",""],["required_ruby_version=","Gem::Specification","classes/Gem/Specification.html#method-i-required_ruby_version-3D","(req)","<p>The version of ruby required by this gem\n"],["required_rubygems_version=","Gem::Specification","classes/Gem/Specification.html#method-i-required_rubygems_version-3D","(req)","<p>The RubyGems version required by this gem\n"],["required_uri","RSS::Atom::CommonModel","classes/RSS/Atom/CommonModel.html#method-i-required_uri","()",""],["required_uri","RSS::Element","classes/RSS/Element.html#method-i-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesCategory","classes/RSS/ITunesChannelModel/ITunesCategory.html#method-i-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesImage","classes/RSS/ITunesChannelModel/ITunesImage.html#method-i-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesOwner","classes/RSS/ITunesChannelModel/ITunesOwner.html#method-i-required_uri","()",""],["required_uri","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-required_uri","()",""],["required_uri","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-required_uri","()",""],["required_uri","RSS::ImageItemModel::ImageItem","classes/RSS/ImageItemModel/ImageItem.html#method-i-required_uri","()",""],["required_uri","RSS::RDF","classes/RSS/RDF.html#method-i-required_uri","()",""],["required_uri","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-required_uri","()",""],["required_uri","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-required_uri","()",""],["required_uri","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-required_uri","()",""],["required_uri","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-required_uri","()",""],["required_uri","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-required_uri","()",""],["required_uri","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-i-required_uri","()",""],["required_uri","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-required_uri","()",""],["required_uri","RSS::TrackBackModel10::TrackBackAbout","classes/RSS/TrackBackModel10/TrackBackAbout.html#method-i-required_uri","()",""],["required_uri","RSS::TrackBackModel10::TrackBackPing","classes/RSS/TrackBackModel10/TrackBackPing.html#method-i-required_uri","()",""],["required_uri","RSS::TrackBackModel20::TrackBackAbout","classes/RSS/TrackBackModel20/TrackBackAbout.html#method-i-required_uri","()",""],["required_uri","RSS::TrackBackModel20::TrackBackPing","classes/RSS/TrackBackModel20/TrackBackPing.html#method-i-required_uri","()",""],["requirement","Gem::Dependency","classes/Gem/Dependency.html#method-i-requirement","()","<p>What does this dependency require?\n"],["requirements","Gem::Specification","classes/Gem/Specification.html#method-i-requirements","()","<p>An array or things required by this gem.  Not used by anything presently.\n"],["requirements=","Gem::Specification","classes/Gem/Specification.html#method-i-requirements-3D","(req)","<p>Set requirements to <code>req</code>, ensuring it is an array. Don&#39;t\nuse this, push onto the array instead.\n"],["requirements_list","Gem::Dependency","classes/Gem/Dependency.html#method-i-requirements_list","()",""],["reqwidth","TkWinfo","classes/TkWinfo.html#method-c-reqwidth","(win)",""],["reqwidth","TkWinfo","classes/TkWinfo.html#method-c-reqwidth","(win)",""],["rerdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["reread","Tk::TkTable","classes/Tk/TkTable.html#method-i-reread","()","<p>def postscript(*args)\n\n<pre><code>tk_send(&#39;postscript&#39;, *args)</code></pre>\n<p>end\n"],["resample","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-resample","(src, dest, horiz_filter=None, vert_filter=None)",""],["resample","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-resample","(src, dest, horiz_filter=None, vert_filter=None)",""],["rescale","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-rescale","(xscale, yscale)",""],["reset","Board","classes/Board.html#method-i-reset","()",""],["reset","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-reset","(value = nil, name = nil)","<p>Generate a reset button Input element, as a String.\n<p>This resets the values on a form to their initial …\n"],["reset","Digest::HMAC","classes/Digest/HMAC.html#method-i-reset","()","<p>Resets the hmac to the initial state and returns self.\n"],["reset","Digest::Instance","classes/Digest/Instance.html#method-i-reset","()","<p>Resets the digest to the initial state and returns self.\n<p>This method is overridden by each implementation …\n"],["reset","Digest::SHA2","classes/Digest/SHA2.html#method-i-reset","()","<p>Resets the digest to the initial state and returns self.\n"],["reset","Gem::CommandManager","classes/Gem/CommandManager.html#method-c-reset","()","<p>Reset the authoritative instance of the command manager.\n"],["reset","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-reset","(connection)","<p>Resets HTTP connection <code>connection</code>.\n"],["reset","Gem::Specification","classes/Gem/Specification.html#method-c-reset","()","<p>Reset the list of known specs, running pre and post reset hooks registered\nin Gem.\n"],["reset","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-reset","()","<p>VOID reset reset the position of iterator\n"],["reset","IXMLDOMNodeList","classes/IXMLDOMNodeList.html#method-i-reset","()","<p>VOID reset reset the position of iterator\n"],["reset","Net::POP3","classes/Net/POP3.html#method-i-reset","()","<p>Resets the session.  This clears all “deleted” marks from messages.\n<p>This method raises a POPError …\n"],["reset","Net::POP3","classes/Net/POP3.html#method-i-reset","()","<p>Resets the session.  This clears all “deleted” marks from messages.\n<p>This method raises a POPError …\n"],["reset","Net::POP3","classes/Net/POP3.html#method-i-reset","()","<p>Resets the session.  This clears all “deleted” marks from messages.\n<p>This method raises a POPError …\n"],["reset","Net::POP3","classes/Net/POP3.html#method-i-reset","()","<p>Resets the session.  This clears all “deleted” marks from messages.\n<p>This method raises a POPError …\n"],["reset","Object::Syck::Emitter","classes/Object/Syck/Emitter.html#method-i-reset","(p1 = v1)","<p>YAML::Syck::Emitter.reset( options )\n"],["reset","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-reset","()","<p>Fully resets the internal state of the Cipher. By using this, the same\nCipher instance may be used several …\n"],["reset","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-reset","()","<p>Resets the Digest in the sense that any Digest#update that has been\nperformed is abandoned and the Digest …\n"],["reset","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-reset","()",""],["reset","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-c-reset","()","<p>Resets cross-file state.  Call when parsing different projects that need\nseparate documentation.\n"],["reset","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-reset","()","<p>Resets the tools\n"],["reset","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-reset","()","<p>Resets all internal state\n"],["reset","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-reset","()","<p>Empties RDoc of stored class, module and file information\n"],["reset","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-reset","()",""],["reset","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-reset","()",""],["reset","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-i-reset","()",""],["reset","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-reset","()",""],["reset","REXML::Validation::Validator","classes/REXML/Validation/Validator.html#method-i-reset","()",""],["reset","StringScanner","classes/StringScanner.html#method-i-reset","()","<p>Reset the scan pointer (index 0) and clear matching data.\n"],["reset","Tk::Iwidgets::Feedback","classes/Tk/Iwidgets/Feedback.html#method-i-reset","()",""],["reset","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-reset","()",""],["reset","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-reset","()",""],["reset","TkTimer","classes/TkTimer.html#method-i-reset","(*reset_args)",""],["reset","TkTimer","classes/TkTimer.html#method-i-reset","(*reset_args)",""],["reset","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-reset","()","<p>Resets and initializes the stream. All data in both input and output buffer\nare discarded.\n"],["reset_pointadjust","TkFont","classes/TkFont.html#method-i-reset_pointadjust","()",""],["reset_pointadjust","TkFont","classes/TkFont.html#method-i-reset_pointadjust","()",""],["reset_prog_mode","Curses","classes/Curses.html#method-c-reset_prog_mode","()","<p>Reset the current terminal modes to the saved state by the\nCurses.def_prog_mode\n<p>This is done automatically …\n"],["reset_region","PhotoCanvas","classes/PhotoCanvas.html#method-i-reset_region","()",""],["reset_step","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-reset_step","()",""],["resizable","Tk::Wm","classes/Tk/Wm.html#method-i-resizable","(*args)",""],["resizable","Tk::Wm","classes/Tk/Wm.html#method-c-resizable","(win, *args)",""],["resize","Curses","classes/Curses.html#method-c-resize","(p1, p2)","<p>Resize the current term to Fixnum <code>lines</code> and Fixnum\n<code>cols</code>\n"],["resize","Curses::Window","classes/Curses/Window.html#method-i-resize","(p1, p2)","<p>Resize the current window to Fixnum <code>lines</code> and Fixnum\n<code>cols</code>\n"],["resizeterm","Curses","classes/Curses.html#method-c-resizeterm","(p1, p2)","<p>Resize the current term to Fixnum <code>lines</code> and Fixnum\n<code>cols</code>\n"],["resolve","RDoc::CrossReference","classes/RDoc/CrossReference.html#method-i-resolve","(name, text)","<p>Returns a reference to <code>name</code>.\n<p>If the reference is found and <code>name</code> is not documented\n<code>text</code> will be returned. …\n"],["resolve","Rake::FileList","classes/Rake/FileList.html#method-i-resolve","()","<p>Resolve all the pending adds now.\n"],["resolveExternals","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-resolveExternals","()","<p>BOOL resolveExternals indicates whether the parser resolves references to\nexternal DTD/Entities/Schema …\n"],["resolveExternals","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-resolveExternals","()","<p>BOOL resolveExternals indicates whether the parser resolves references to\nexternal DTD/Entities/Schema …\n"],["resolveExternals","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-resolveExternals","()","<p>BOOL resolveExternals indicates whether the parser resolves references to\nexternal DTD/Entities/Schema …\n"],["resolveExternals=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-resolveExternals-3D","(arg0)","<p>VOID resolveExternals indicates whether the parser resolves references to\nexternal DTD/Entities/Schema …\n"],["resolveExternals=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-resolveExternals-3D","(arg0)","<p>VOID resolveExternals indicates whether the parser resolves references to\nexternal DTD/Entities/Schema …\n"],["resolveExternals=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-resolveExternals-3D","(arg0)","<p>VOID resolveExternals indicates whether the parser resolves references to\nexternal DTD/Entities/Schema …\n"],["resolve_add","Rake::FileList","classes/Rake/FileList.html#method-i-resolve_add","(fn)",""],["resolve_aliases","RDoc::Context","classes/RDoc/Context.html#method-i-resolve_aliases","(added)","<p>Tries to resolve unmatched aliases when a method or attribute has just been\nadded.\n"],["resolve_args","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-resolve_args","(args)","<p>Resolve the arguments for a task/rule.  Returns a triplet of [task_name,\narg_name_list, prerequisites]. …\n"],["resolver","Syck","classes/Syck.html#method-c-resolver","()","<p>Returns the default resolver\n"],["resolver","Syck","classes/Syck.html#method-c-resolver","()","<p>Returns the default resolver\n"],["resolver","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-resolver","(*uri_args)",""],["resources","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-resources","()",""],["respond_to?","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)",""],["respond_to?","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)",""],["respond_to?","Object","classes/Object.html#method-i-respond_to-3F","(p1, p2 = v2)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["respond_to_missing?","Delegator","classes/Delegator.html#method-i-respond_to_missing-3F","(m, include_private)","<p>Checks for a method provided by this the delegate object by forwarding the\ncall through _<em>getobj</em>_.\n"],["respond_to_missing?","Object","classes/Object.html#method-i-respond_to_missing-3F","(p1, p2)","<p>Hook method to return whether the <em>obj</em> can respond to <em>id</em>\nmethod or not.\n<p>See #respond_to?.\n"],["responseBody","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-responseBody","()","<p>VARIANT responseBody Get response body\n"],["responseBody","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-responseBody","()","<p>VARIANT responseBody Get response body\n"],["responseStream","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-responseStream","()","<p>VARIANT responseStream Get response body\n"],["responseStream","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-responseStream","()","<p>VARIANT responseStream Get response body\n"],["responseText","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-responseText","()","<p>BSTR responseText Get response body\n"],["responseText","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-responseText","()","<p>BSTR responseText Get response body\n"],["responseXML","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-responseXML","()","<p>DISPATCH responseXML Get response body\n"],["responseXML","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-responseXML","()","<p>DISPATCH responseXML Get response body\n"],["response_body_permitted?","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-response_body_permitted-3F","()",""],["rest","StringScanner","classes/StringScanner.html#method-i-rest","()","<p>Returns the “rest” of the string (i.e. everything after the scan pointer).\nIf there is no more …\n"],["rest?","StringScanner","classes/StringScanner.html#method-i-rest-3F","()","<p>Returns true iff there is more data in the string.  See #eos?. This method\nis obsolete; use #eos? instead. …\n"],["rest_size","StringScanner","classes/StringScanner.html#method-i-rest_size","()","<p><code>s.rest_size</code> is equivalent to <code>s.rest.size</code>.\n"],["restart","MultiTkIp","classes/MultiTkIp.html#method-i-restart","(app_name = nil, keys = {})",""],["restart","MultiTkIp","classes/MultiTkIp.html#method-i-restart","(app_name = nil, keys = {})",""],["restart","MultiTkIp","classes/MultiTkIp.html#method-i-restart","(app_name = nil, keys = {})",""],["restart","MultiTkIp","classes/MultiTkIp.html#method-i-restart","(app_name = nil, keys = {})",""],["restart","RemoteTkIp","classes/RemoteTkIp.html#method-i-restart","()",""],["restart","TclTkIp","classes/TclTkIp.html#method-i-restart","()",""],["restart","TclTkLib","classes/TclTkLib.html#method-i-restart","(*args)",""],["restart","TkTimer","classes/TkTimer.html#method-i-restart","(*restart_args, &b)",""],["restart","TkTimer","classes/TkTimer.html#method-i-restart","(*restart_args, &b)",""],["restore","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-i-restore","()","<p>Restore session state from the session&#39;s FileStore file.\n<p>Returns the session state as a hash.\n"],["restore","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-i-restore","()","<p>Restore session state.\n<p>Returns session data as a hash.\n"],["restore","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-i-restore","()","<p>Restore (empty) session state.\n"],["restore","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-i-restore","()","<p>Restore session state from the session&#39;s PStore file.\n<p>Returns the session state as a hash.\n"],["restore","JSON","classes/JSON.html#method-c-restore","(source, proc = nil, options = {})",""],["restore","Marshal","classes/Marshal.html#method-c-restore","(p1, p2 = v2)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["restore","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-restore","(str, keys={})",""],["restore_from_file","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-restore_from_file","(file, keys={})",""],["restore_overwrite","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-restore_overwrite","(str, keys={})",""],["restore_overwrite_from_file","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-restore_overwrite_from_file","(file, keys={})",""],["restsize","StringScanner","classes/StringScanner.html#method-i-restsize","()","<p><code>s.restsize</code> is equivalent to <code>s.rest_size</code>. This\nmethod is obsolete; use #rest_size instead.\n"],["result","Coverage","classes/Coverage.html#method-c-result","()","<p>Returns a hash that contains filename as key and coverage array as value\nand disables coverage measurement. …\n"],["result","ERB","classes/ERB.html#method-i-result","(b=TOPLEVEL_BINDING)","<p>Executes the generated ERB code to produce a completed template, returning\nthe results of that code. …\n"],["result","GC::Profiler","classes/GC/Profiler.html#method-c-result","()","<p>Returns a profile data report such as:\n\n<pre><code>GC 1 invokes.\nIndex    Invoke Time(sec)       Use Size(byte)   ...</code></pre>\n"],["result","StopIteration","classes/StopIteration.html#method-i-result","()","<p>Returns the return value of the iterator.\n\n<pre><code>o = Object.new\ndef o.each\n  yield 1\n  yield 2\n  yield 3\n  100 ...\n</code></pre>\n"],["resume","DEBUGGER__","classes/DEBUGGER__.html#method-i-resume","()",""],["resume","Fiber","classes/Fiber.html#method-i-resume","(*args)","<p>Resumes the fiber from the point at which the last <code>Fiber.yield</code>\nwas called, or starts running it if it …\n"],["resume_all","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-resume_all","()",""],["ret_val","Tk::BLT::DragDrop::PackageCommand::ValidateArgs","classes/Tk/BLT/DragDrop/PackageCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::BLT::DragDrop::SiteCommand::ValidateArgs","classes/Tk/BLT/DragDrop/SiteCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::BLT::Treeview::FindExecFlagValue::ValidateArgs","classes/Tk/BLT/Treeview/FindExecFlagValue/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::BLT::Treeview::OpenCloseCommand::ValidateArgs","classes/Tk/BLT/Treeview/OpenCloseCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::Iwidgets::Calendar::CalendarCommand::ValidateArgs","classes/Tk/Iwidgets/Calendar/CalendarCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::Iwidgets::Hierarchy::IconCommand::ValidateArgs","classes/Tk/Iwidgets/Hierarchy/IconCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::Iwidgets::Hierarchy::IndicatorCommand::ValidateArgs","classes/Tk/Iwidgets/Hierarchy/IndicatorCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::Iwidgets::Hierarchy::QueryCommand::ValidateArgs","classes/Tk/Iwidgets/Hierarchy/QueryCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::Spinbox::SpinCommand::ValidateArgs","classes/Tk/Spinbox/SpinCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::Tile::TSpinbox::SpinCommand::ValidateArgs","classes/Tk/Tile/TSpinbox/SpinCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::TkTable::BrowseCommand::ValidateArgs","classes/Tk/TkTable/BrowseCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::TkTable::CellCommand::ValidateArgs","classes/Tk/TkTable/CellCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::TkTable::SelectionCommand::ValidateArgs","classes/Tk/TkTable/SelectionCommand/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","Tk::Winico::Winico_callback::ValidateArgs","classes/Tk/Winico/Winico_callback/ValidateArgs.html#method-c-ret_val","(val)",""],["ret_val","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-ret_val","(p1)",""],["ret_val","TkValidateCommand::ValidateArgs","classes/TkValidateCommand/ValidateArgs.html#method-c-ret_val","(val)","<p>def self._get_extra_args_tbl\n\n<pre><code># return an array of convert procs\n[]</code></pre>\n<p>end\n"],["retrbinary","Net::FTP","classes/Net/FTP.html#method-i-retrbinary","(cmd, blocksize, rest_offset = nil)","<p>Puts the connection into binary (image) mode, issues the given command, and\nfetches the data returned, …\n"],["retrlines","Net::FTP","classes/Net/FTP.html#method-i-retrlines","(cmd)","<p>Puts the connection into ASCII (text) mode, issues the given command, and\npasses the resulting data, …\n"],["return_headers?","CSV","classes/CSV.html#method-i-return_headers-3F","()","<p>Returns <code>true</code> if headers will be returned as a row of results.\nSee CSV::new for details.\n"],["return_type","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-return_type","()","<p>Returns string of return value type of method.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["return_type_detail","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-return_type_detail","()","<p>Returns detail information of return value type of method. The information\nis array.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["return_vtype","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-return_vtype","()","<p>Returns number of return value type of method.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["retval?","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-retval-3F","()","<p>Returns true if argument is return value.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;DirectX 7 for Visual Basic Type Library&#39;, ...</code></pre>\n"],["revcomp","Object","classes/Object.html#method-i-revcomp","(seq)",""],["reverse","Array","classes/Array.html#method-i-reverse","()","<p>Returns a new array containing <code>self</code>&#39;s elements in reverse\norder.\n\n<pre><code>[ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ].reverse   #=&gt; [&quot;c&quot;, ...\n</code></pre>\n"],["reverse","IPAddr","classes/IPAddr.html#method-i-reverse","()","<p>Returns a string for DNS reverse lookup.  It returns a string in RFC3172\nform for an IPv6 address.\n"],["reverse","String","classes/String.html#method-i-reverse","()","<p>Returns a new string with the characters from <em>str</em> in reverse\norder.\n\n<pre><code>&quot;stressed&quot;.reverse   #=&gt; &quot;desserts&quot;\n</code></pre>\n"],["reverse!","Array","classes/Array.html#method-i-reverse-21","()","<p>Reverses <code>self</code> in place.\n\n<pre><code>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\na.reverse!       #=&gt; [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]\na                #=&gt; ...\n</code></pre>\n"],["reverse!","String","classes/String.html#method-i-reverse-21","()","<p>Reverses <em>str</em> in place.\n"],["reverse_each","Array","classes/Array.html#method-i-reverse_each","()","<p>Same as <code>Array#each</code>, but traverses <code>self</code> in reverse\norder.\n\n<pre><code>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\na.reverse_each {|x| print ...\n</code></pre>\n"],["reverse_each","Enumerable","classes/Enumerable.html#method-i-reverse_each","(*args)","<p>Builds a temporary array and traverses that array in reverse order.\n<p>If no block is given, an enumerator …\n"],["reverse_each_name","Object","classes/Object.html#method-i-reverse_each_name","(pat)",""],["reverse_each_name_with_prefix_optional","Object","classes/Object.html#method-i-reverse_each_name_with_prefix_optional","(pat, prefix_pat)",""],["reverser","AnimatedWaveDemo","classes/AnimatedWaveDemo.html#method-i-reverser","()","<p>Oscillation handler. This detects whether to reverse the direction of the\nwave by checking to see if …\n"],["revoked","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-revoked","()",""],["revoked=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-revoked-3D","(p1)",""],["rewind","ARGF","classes/ARGF.html#method-i-rewind","()","<p>Positions the current file to the beginning of input, resetting\n<code>ARGF.lineno</code> to zero.\n\n<pre><code>ARGF.readline   #=&gt; ...\n</code></pre>\n"],["rewind","CSV","classes/CSV.html#method-i-rewind","()","<p>Rewinds the underlying IO object and resets CSV&#39;s lineno() counter.\n"],["rewind","Dir","classes/Dir.html#method-i-rewind","()","<p>Repositions <em>dir</em> to the first entry.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;)\nd.read     #=&gt; &quot;.&quot;\nd.rewind   #=&gt; #&lt;Dir:0x401b3fb0&gt; ...\n</code></pre>\n"],["rewind","Enumerator","classes/Enumerator.html#method-i-rewind","()","<p>Rewinds the enumeration sequence to the beginning.\n<p>If the enclosed object responds to a “rewind” …\n"],["rewind","Gem::Package::TarReader","classes/Gem/Package/TarReader.html#method-i-rewind","()","<p>NOTE: Do not call #rewind during #each\n"],["rewind","Gem::Package::TarReader::Entry","classes/Gem/Package/TarReader/Entry.html#method-i-rewind","()","<p>Rewinds to the beginning of the tar file entry\n"],["rewind","IO","classes/IO.html#method-i-rewind","()","<p>Positions <em>ios</em> to the beginning of input, resetting\n<code>lineno</code> to zero.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.readline ...</code></pre>\n"],["rewind","Prime::EratosthenesGenerator","classes/Prime/EratosthenesGenerator.html#method-i-rewind","()",""],["rewind","Prime::Generator23","classes/Prime/Generator23.html#method-i-rewind","()",""],["rewind","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-rewind","()","<p>Rewinds the internal position for enumeration.\n<p>See <code>Enumerator</code>#rewind.\n"],["rewind","Prime::TrialDivisionGenerator","classes/Prime/TrialDivisionGenerator.html#method-i-rewind","()",""],["rewind","REXML::Parsers::LightParser","classes/REXML/Parsers/LightParser.html#method-i-rewind","()",""],["rewind","REXML::Parsers::UltraLightParser","classes/REXML/Parsers/UltraLightParser.html#method-i-rewind","()",""],["rewind","StringIO","classes/StringIO.html#method-i-rewind","()","<p>Positions <strong>strio</strong> to the beginning of input, resetting\n<code>lineno</code> to zero.\n"],["rewind","TkTextIO","classes/TkTextIO.html#method-i-rewind","()",""],["rewind","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-rewind","()","<p>Resets the position of the file pointer to the point created the GzipReader\nobject.  The associated  …\n"],["rfc1123_date","CGI","classes/CGI.html#method-c-rfc1123_date","(time)","<p>Format a <code>Time</code> object as a String using the format specified by\nRFC 1123.\n\n<pre><code>CGI::rfc1123_date(Time.now)\n ...</code></pre>\n"],["rfc2822","Date","classes/Date.html#method-i-rfc2822","()","<p>This method is equivalent to strftime(&#39;%a, %-d %b %Y %T %z&#39;).\n"],["rfc2822","Date","classes/Date.html#method-c-rfc2822","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 2822 formats.\n<p>For example: …\n"],["rfc2822","DateTime","classes/DateTime.html#method-c-rfc2822","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 2822 formats.\n<p>For example: …\n"],["rfc2822","Time","classes/Time.html#method-i-rfc2822","(date)","<p>Parses <code>date</code> as date-time defined by RFC 2822 and converts it\nto a Time object.  The format is identical …\n"],["rfc3339","Date","classes/Date.html#method-i-rfc3339","()","<p>This method is equivalent to strftime(&#39;%FT%T%:z&#39;).\n"],["rfc3339","Date","classes/Date.html#method-c-rfc3339","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 3339 formats.\n<p>For example: …\n"],["rfc3339","DateTime","classes/DateTime.html#method-c-rfc3339","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 3339 formats.\n<p>For example: …\n"],["rfc3339","DateTime","classes/DateTime.html#method-i-rfc3339","(*args)","<p>This method is equivalent to strftime(&#39;%FT%T&#39;).  The optional\nargument n is length of fractional …\n"],["rfc822","Date","classes/Date.html#method-i-rfc822","()","<p>This method is equivalent to strftime(&#39;%a, %-d %b %Y %T %z&#39;).\n"],["rfc822","Date","classes/Date.html#method-c-rfc822","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 2822 formats.\n<p>For example: …\n"],["rfc822","DateTime","classes/DateTime.html#method-c-rfc822","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 2822 formats.\n<p>For example: …\n"],["rfc822","Time","classes/Time.html#method-i-rfc822","(date)",""],["rgb","TkWinfo","classes/TkWinfo.html#method-c-rgb","(win, color)",""],["rgb","TkWinfo","classes/TkWinfo.html#method-c-rgb","(win, color)",""],["ri_dir","Gem::Specification","classes/Gem/Specification.html#method-i-ri_dir","()","<p>Returns the full path to this spec&#39;s ri directory.\n"],["ri_installed?","Gem::DocManager","classes/Gem/DocManager.html#method-i-ri_installed-3F","()","<p>Is the RI documentation installed?\n"],["ri_installed?","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["rid","Process::GID","classes/Process/GID.html#method-c-rid","()","<p>Returns the (real) group ID for this process.\n\n<pre><code>Process.gid   #=&gt; 500\n</code></pre>\n"],["rid","Process::UID","classes/Process/UID.html#method-c-rid","()","<p>Returns the (real) user ID of this process.\n\n<pre><code>Process.uid   #=&gt; 501\n</code></pre>\n"],["right","Board","classes/Board.html#method-i-right","()",""],["rindex","Array","classes/Array.html#method-i-rindex","(p1)","<p>Returns the index of the last object in <code>self</code> <code>==</code>\nto <em>obj</em>. If a block is given instead of an argument, returns …\n"],["rindex","String","classes/String.html#method-i-rindex","(p1, p2 = v2)","<p>Returns the index of the last occurrence of the given <em>substring</em> or\npattern (<em>regexp</em>) in <em>str</em>. Returns  …\n"],["rjust","String","classes/String.html#method-i-rjust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em> right\njustified …\n"],["rl","Object","classes/Object.html#method-i-rl","(a)",""],["rm","FileUtils","classes/FileUtils.html#method-c-rm","(list, options = {})","<p>Options: force noop verbose\n<p>Remove file(s) specified in <code>list</code>.  This method cannot remove\ndirectories. …\n"],["rm","Object","classes/Object.html#method-i-rm","()","<p>Remove the FILE\n\n<pre><code>ruby -run -e rm -- [OPTION] FILE\n\n-f          ignore nonexistent files\n-r          remove ...</code></pre>\n"],["rm_f","FileUtils","classes/FileUtils.html#method-c-rm_f","(list, options = {})","<p>Options: noop verbose\n<p>Equivalent to\n\n<pre><code>#rm(list, :force =&gt; true)\n</code></pre>\n"],["rm_f","Object","classes/Object.html#method-i-rm_f","(*files)",""],["rm_r","FileUtils","classes/FileUtils.html#method-c-rm_r","(list, options = {})","<p>Options: force noop verbose secure\n<p>remove files <code>list[0]</code> <code>list[1]</code>… If\n<code>list[n]</code> is a directory, removes …\n"],["rm_rf","FileUtils","classes/FileUtils.html#method-c-rm_rf","(list, options = {})","<p>Options: noop verbose secure\n<p>Equivalent to\n\n<pre><code>#rm_r(list, :force =&gt; true)\n</code></pre>\n"],["rmdir","Dir","classes/Dir.html#method-c-rmdir","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["rmdir","FileUtils","classes/FileUtils.html#method-c-rmdir","(list, options = {})","<p>Options: noop, verbose\n<p>Removes one or more directories.\n\n<pre><code>FileUtils.rmdir &#39;somedir&#39;\nFileUtils.rmdir %w(somedir ...</code></pre>\n"],["rmdir","Net::FTP","classes/Net/FTP.html#method-i-rmdir","(dirname)","<p>Removes a remote directory.\n"],["rmdir","Object","classes/Object.html#method-i-rmdir","()","<p>Remove the DIR.\n\n<pre><code>ruby -run -e rmdir -- [OPTION] DIR\n\n-p          remove DIRECTORY and its ancestors.\n-v ...</code></pre>\n"],["rmdir","Pathname","classes/Pathname.html#method-i-rmdir","()","<p>See <code>Dir.rmdir</code>.  Remove the referenced directory.\n"],["rmdir","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-rmdir","(*path)","<p>CommandProcessor#rmdir(*path)\n\n<pre><code>  path: String\nsame as Dir.rmdir()</code></pre>\n"],["rmtree","FileUtils","classes/FileUtils.html#method-c-rmtree","(list, options = {})",""],["rmtree","Pathname","classes/Pathname.html#method-i-rmtree","()","<p>See <code>FileUtils.rm_r</code>.  Deletes a directory and all beneath it.\n"],["roomChanged","Object","classes/Object.html#method-i-roomChanged","(w,*args)","<p>roomChanged – This method is invoked whenever the currentRoom variable\nchanges. It highlights the current …\n"],["roomChanged2","Object","classes/Object.html#method-i-roomChanged2","(w,*args)","<p>roomChanged2 – This method is invoked whenever the currentRoom variable\nchanges. It highlights the current …\n"],["root","Gem::Server","classes/Gem/Server.html#method-i-root","(req, res)",""],["root","Msxml","classes/Msxml.html#method-i-root","()","<p>HRESULT root get root IXMLElement of the XML document.\n\n<pre><code>IXMLElement2,IXMLElement2 arg0 --- p [OUT]</code></pre>\n"],["root","Psych::Nodes::Document","classes/Psych/Nodes/Document.html#method-i-root","()","<p>Returns the root node.  A Document may only have one root node:\nyaml.org/spec/1.1/#id898031\n"],["root","REXML::Document","classes/REXML/Document.html#method-i-root","()","<p>@return the root Element of the document, or nil if this document has no\nchildren.\n"],["root","REXML::Element","classes/REXML/Element.html#method-i-root","()",""],["root","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-root","()",""],["root","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-root","()",""],["root?","PStore","classes/PStore.html#method-i-root-3F","(name)","<p>Returns true if the supplied <em>name</em> is currently in the data store.\n<p><strong>WARNING</strong>:  This method is only valid …\n"],["root?","Pathname","classes/Pathname.html#method-i-root-3F","()","<p>#root? is a predicate for root directories.  I.e. it returns\n<code>true</code> if the pathname consists of consecutive …\n"],["root?","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-root-3F","()",""],["root_node","REXML::Element","classes/REXML/Element.html#method-i-root_node","()","<p>Evaluates to the root node of the document that this element belongs to. If\nthis element doesn&#39;t …\n"],["roots","PStore","classes/PStore.html#method-i-roots","()","<p>Returns the names of all object hierarchies currently in the store.\n<p><strong>WARNING</strong>:  This method is only valid …\n"],["rootx","TkWinfo","classes/TkWinfo.html#method-c-rootx","(win)",""],["rootx","TkWinfo","classes/TkWinfo.html#method-c-rootx","(win)",""],["rooty","TkWinfo","classes/TkWinfo.html#method-c-rooty","(win)",""],["rooty","TkWinfo","classes/TkWinfo.html#method-c-rooty","(win)",""],["rotate","Array","classes/Array.html#method-i-rotate","(p1 = v1)","<p>Returns new array by rotating <code>self</code> so that the element at\n<code>cnt</code> in <code>self</code> is the first element of the new …\n"],["rotate","Tk::BLT::CutBuffer","classes/Tk/BLT/CutBuffer.html#method-c-rotate","(count = 1)",""],["rotate!","Array","classes/Array.html#method-i-rotate-21","(p1 = v1)","<p>Rotates <code>self</code> in place so that the element at <code>cnt</code>\ncomes first, and returns <code>self</code>.  If <code>cnt</code> is\nnegative then …\n"],["rotate_c","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-rotate_c","(x, y, ox, oy, beta)",""],["rotate_item","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-rotate_item","(item, ox, oy, beta)",""],["round","BigDecimal","classes/BigDecimal.html#method-i-round","(p1 = v1, p2 = v2)","<p>Round to the nearest 1 (by default), returning the result as a BigDecimal.\n<p>BigDecimal(&#39;3.14159&#39;).round …\n"],["round","Float","classes/Float.html#method-i-round","(p1 = v1)","<p>Rounds <em>flt</em> to a given precision in decimal digits (default 0\ndigits). Precision may be negative.  Returns …\n"],["round","Integer","classes/Integer.html#method-i-round","(p1)","<p>Rounds <em>flt</em> to a given precision in decimal digits (default 0\ndigits). Precision may be negative.  Returns …\n"],["round","Integer","classes/Integer.html#method-i-round","(p1)","<p>Rounds <em>flt</em> to a given precision in decimal digits (default 0\ndigits). Precision may be negative.  Returns …\n"],["round","Matrix","classes/Matrix.html#method-i-round","(ndigits=0)","<p>Returns a matrix with entries rounded to the given precision (see\nFloat#round)\n"],["round","Numeric","classes/Numeric.html#method-i-round","(*args)","<p>Rounds <em>num</em> to a given precision in decimal digits (default 0\ndigits). Precision may be negative.  Returns …\n"],["round","REXML::Functions","classes/REXML/Functions.html#method-c-round","( number )",""],["round","Rational","classes/Rational.html#method-i-round","(*args)","<p>Returns the truncated value (toward the nearest integer; 0.5 =&gt; 1; -0.5\n=&gt; -1).\n<p>For example:\n\n<pre><code>Rational(3).round ...</code></pre>\n"],["round","Time","classes/Time.html#method-i-round","(p1 = v1)","<p>Rounds sub seconds to a given precision in decimal digits (0 digits by\ndefault). It returns a new time …\n"],["round_poly","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-round_poly","(canv, xy, radii, opts)",""],["round_rect","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-round_rect","(xy, radius, opts={})",""],["route_from","URI::Generic","classes/URI/Generic.html#method-i-route_from","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["route_to","URI::Generic","classes/URI/Generic.html#method-i-route_to","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["row","JISX0208::Char","classes/JISX0208/Char.html#method-i-row","()",""],["row","Matrix","classes/Matrix.html#method-i-row","(i)","<p>Returns row vector number <code>i</code> of the matrix as a Vector\n(starting at 0 like an array).  When a block is …\n"],["row","TkGrid","classes/TkGrid.html#method-c-row","(master, index, keys=nil)",""],["row","TkGrid","classes/TkGrid.html#method-c-row","(master, index, keys=nil)",""],["row_index","Tk::TkTable","classes/Tk/TkTable.html#method-i-row_index","(idx)",""],["row_size","Matrix","classes/Matrix.html#method-i-row_size","()","<p>Returns the number of rows.\n"],["row_vector","Matrix","classes/Matrix.html#method-c-row_vector","(row)","<p>Creates a single-row matrix where the values of that row are as given in\n<code>row</code>.\n\n<pre><code>Matrix.row_vector([4,5,6]) ...</code></pre>\n"],["row_vectors","Matrix","classes/Matrix.html#method-i-row_vectors","()","<p>Returns an array of the row vectors of the matrix.  See Vector.\n"],["rowconfiginfo","TkGrid","classes/TkGrid.html#method-c-rowconfiginfo","(master, index, slot=nil)",""],["rowconfiginfo","TkGrid","classes/TkGrid.html#method-c-rowconfiginfo","(master, index, slot=nil)",""],["rowconfigure","TkGrid","classes/TkGrid.html#method-c-rowconfigure","(master, index, args)",""],["rowconfigure","TkGrid","classes/TkGrid.html#method-c-rowconfigure","(master, index, args)",""],["rows","Matrix","classes/Matrix.html#method-c-rows","(rows, copy = true)","<p>Creates a matrix where <code>rows</code> is an array of arrays, each of\nwhich is a row of the matrix.  If the optional …\n"],["rpartition","String","classes/String.html#method-i-rpartition","(p1)","<p>Searches <em>sep</em> or pattern (<em>regexp</em>) in the string from the\nend of the string, and returns the part before …\n"],["rsearch","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-rsearch","(pat,start,stop=None)",""],["rsearch_with_length","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-rsearch_with_length","(pat,start,stop=None)",""],["rsqrt","Math","classes/Math.html#method-c-rsqrt","(a)","<p>Compute square root of a non negative number. This method is internally\nused by <code>Math.sqrt</code>.\n"],["rss","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-rss","()",""],["rstrip","String","classes/String.html#method-i-rstrip","()","<p>Returns a copy of <em>str</em> with trailing whitespace removed. See also\n<code>String#lstrip</code> and <code>String#strip</code>.\n\n<pre><code>&quot;  hello ...</code></pre>\n"],["rstrip!","String","classes/String.html#method-i-rstrip-21","()","<p>Removes trailing whitespace from <em>str</em>, returning <code>nil</code>\nif no change was made. See also <code>String#lstrip!</code> and …\n"],["ruby","FileUtils","classes/FileUtils.html#method-i-ruby","(*args,&block)","<p>Run a Ruby interpreter with the given arguments.\n<p>Example:\n\n<pre><code>ruby %{-pe &#39;$_.upcase!&#39; &lt;README}</code></pre>\n"],["ruby","Gem","classes/Gem.html#method-c-ruby","()","<p>The path to the running Ruby interpreter.\n"],["ruby","Sys","classes/Sys.html#method-i-ruby","(*args)","<p>Run a Ruby interpreter with the given arguments.\n"],["ruby2html","Object","classes/Object.html#method-i-ruby2html","(f, encoding, css, print_line_number)",""],["ruby_engine","Gem","classes/Gem.html#method-c-ruby_engine","()","<p>A wrapper around RUBY_ENGINE const that may not be defined\n"],["ruby_exec","Object","classes/Object.html#method-i-ruby_exec","(file)",""],["ruby_version","Gem","classes/Gem.html#method-c-ruby_version","()","<p>A Gem::Version for the currently running ruby.\n"],["rubygems_api_key=","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-rubygems_api_key-3D","(api_key)",""],["rubygems_api_request","Gem::GemcutterUtilities","classes/Gem/GemcutterUtilities.html#method-i-rubygems_api_request","(method, path, host = Gem.host, &block)",""],["rulerMkTab","Object","classes/Object.html#method-i-rulerMkTab","(c,x,y)","<p>rulerMkTab – This method creates a new triangular polygon in a canvas to\nrepresent a tab stop.\n<p>Arguments: …\n"],["rulerMoveTab","Object","classes/Object.html#method-i-rulerMoveTab","(c,x,y)","<p>rulerMoveTab – This method is invoked during mouse motion events to drag a\ntab. It adjusts the position …\n"],["rulerNewTab","Object","classes/Object.html#method-i-rulerNewTab","(c,x,y)","<p>rulerNewTab – Does all the work of creating a tab stop, including creating\nthe triangle object and adding …\n"],["rulerReleaseTab","Object","classes/Object.html#method-i-rulerReleaseTab","(c)","<p>rulerReleaseTab – This method is invoked during button release events that\nend a tab drag operation. …\n"],["rulerSelectTab","Object","classes/Object.html#method-i-rulerSelectTab","(c,x,y)","<p>rulerSelectTab – This method is invoked when mouse button 1 is pressed over\na tab.  It remembers information …\n"],["run","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-run","()",""],["run","Biff","classes/Biff.html#method-i-run","()",""],["run","ERB","classes/ERB.html#method-i-run","(b=TOPLEVEL_BINDING)","<p>Generate results and print them. (see ERB#result)\n"],["run","Gem::CommandManager","classes/Gem/CommandManager.html#method-i-run","(args)","<p>Run the config specified by <code>args</code>.\n"],["run","Gem::Ext::Builder","classes/Gem/Ext/Builder.html#method-c-run","(command, results)",""],["run","Gem::GemRunner","classes/Gem/GemRunner.html#method-i-run","(args)","<p>Run the gem command with the following arguments.\n"],["run","Gem::Server","classes/Gem/Server.html#method-i-run","()",""],["run","Gem::Server","classes/Gem/Server.html#method-c-run","(options)",""],["run","MyApp","classes/MyApp.html#method-i-run","()",""],["run","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-run","(argv = ARGV)","<p>Runs the ri command line executable using <code>argv</code>\n"],["run","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-run","()","<p>Looks up and displays ri data according to the options given.\n"],["run","Rake::Application","classes/Rake/Application.html#method-i-run","()","<p>Run the Rake application.  The run method performs the following three\nsteps:\n<p>Initialize the command line …\n"],["run","Rake::Application","classes/Rake/Application.html#method-i-run","()","<p>Run the Rake application.  The run method performs the following three\nsteps:\n<p>Initialize the command line …\n"],["run","Sys","classes/Sys.html#method-i-run","(cmd)","<p>Run the system command <code>cmd</code>.\n"],["run","Thread","classes/Thread.html#method-i-run","()","<p>Wakes up <em>thr</em>, making it eligible for scheduling.\n\n<pre><code>a = Thread.new { puts &quot;a&quot;; Thread.stop; puts &quot;c&quot; }\nsleep ...</code></pre>\n"],["run","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-run","(sock)",""],["run","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-run","(sock)","<p>Processes requests on <code>sock</code>\n"],["run_applet","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-run_applet","(size, w, arglist)","<p>This routine is called to run an applet\n"],["run_config","IRB","classes/IRB.html#method-c-run_config","()","<p>running config\n"],["run_config","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-run_config","()","<p>include run file.\n"],["run_rdoc","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-run_rdoc","(*args)",""],["run_rdoc","Gem::DocManager","classes/Gem/DocManager.html#method-i-run_rdoc","(*args)","<p>Run RDoc with <code>args</code>, which is an ARGV style argument list\n"],["runfile","Object","classes/Object.html#method-i-runfile","(file)",""],["running?","TkTimer","classes/TkTimer.html#method-i-running-3F","()",""],["running?","TkTimer","classes/TkTimer.html#method-i-running-3F","()",""],["running_mainloop?","MultiTkIp","classes/MultiTkIp.html#method-i-running_mainloop-3F","()",""],["running_mainloop?","MultiTkIp","classes/MultiTkIp.html#method-i-running_mainloop-3F","()",""],["running_mainloop?","MultiTkIp","classes/MultiTkIp.html#method-i-running_mainloop-3F","()",""],["running_mainloop?","MultiTkIp","classes/MultiTkIp.html#method-i-running_mainloop-3F","()",""],["runtime_dependencies","Gem::Specification","classes/Gem/Specification.html#method-i-runtime_dependencies","()","<p>List of dependencies that will automatically be activated at runtime.\n"],["safe?","MultiTkIp","classes/MultiTkIp.html#method-i-safe-3F","()",""],["safe?","MultiTkIp","classes/MultiTkIp.html#method-i-safe-3F","()",""],["safe?","MultiTkIp","classes/MultiTkIp.html#method-i-safe-3F","()",""],["safe?","MultiTkIp","classes/MultiTkIp.html#method-i-safe-3F","()",""],["safe?","PiDigitSpigot","classes/PiDigitSpigot.html#method-i-safe-3F","(digit)",""],["safe?","RemoteTkIp","classes/RemoteTkIp.html#method-i-safe-3F","()",""],["safe?","TclTkIp","classes/TclTkIp.html#method-i-safe-3F","()","<p>is safe?\n"],["safe_base?","MultiTkIp","classes/MultiTkIp.html#method-i-safe_base-3F","()",""],["safe_base?","MultiTkIp","classes/MultiTkIp.html#method-i-safe_base-3F","()",""],["safe_base?","MultiTkIp","classes/MultiTkIp.html#method-i-safe_base-3F","()",""],["safe_base?","MultiTkIp","classes/MultiTkIp.html#method-i-safe_base-3F","()",""],["safe_base?","RemoteTkIp","classes/RemoteTkIp.html#method-i-safe_base-3F","()",""],["safe_level","MultiTkIp","classes/MultiTkIp.html#method-c-safe_level","()",""],["safe_level","MultiTkIp","classes/MultiTkIp.html#method-i-safe_level","()",""],["safe_level","MultiTkIp","classes/MultiTkIp.html#method-i-safe_level","()",""],["safe_level","MultiTkIp","classes/MultiTkIp.html#method-c-safe_level","()",""],["safe_level","MultiTkIp","classes/MultiTkIp.html#method-c-safe_level","()",""],["safe_level","MultiTkIp","classes/MultiTkIp.html#method-i-safe_level","()",""],["safe_level","MultiTkIp","classes/MultiTkIp.html#method-c-safe_level","()",""],["safe_level","MultiTkIp","classes/MultiTkIp.html#method-i-safe_level","()",""],["safe_level","Thread","classes/Thread.html#method-i-safe_level","()","<p>Returns the safe level in effect for <em>thr</em>. Setting thread-local\nsafe levels can help when implementing …\n"],["safe_level=","MultiTkIp","classes/MultiTkIp.html#method-c-safe_level-3D","(safe)",""],["safe_level=","MultiTkIp","classes/MultiTkIp.html#method-c-safe_level-3D","(safe)",""],["safe_level=","MultiTkIp","classes/MultiTkIp.html#method-c-safe_level-3D","(safe)",""],["safe_level=","MultiTkIp","classes/MultiTkIp.html#method-i-safe_level-3D","(safe)",""],["safe_level=","MultiTkIp","classes/MultiTkIp.html#method-i-safe_level-3D","(safe)",""],["safe_level=","MultiTkIp","classes/MultiTkIp.html#method-i-safe_level-3D","(safe)",""],["safe_level=","MultiTkIp","classes/MultiTkIp.html#method-c-safe_level-3D","(safe)",""],["safe_level=","MultiTkIp","classes/MultiTkIp.html#method-i-safe_level-3D","(safe)",""],["safe_ln","FileUtils","classes/FileUtils.html#method-i-safe_ln","(*args)","<p>Attempt to do a normal file link, but fall back to a copy if the link\nfails.\n"],["safe_unlink","FileUtils","classes/FileUtils.html#method-c-safe_unlink","(list, options = {})",""],["safeip_add_to_access_path","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_add_to_access_path","(dir)",""],["safeip_add_to_access_path","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_add_to_access_path","(dir)",""],["safeip_add_to_access_path","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_add_to_access_path","(dir)",""],["safeip_add_to_access_path","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_add_to_access_path","(dir)",""],["safeip_configinfo","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_configinfo","(slot = nil)",""],["safeip_configinfo","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_configinfo","(slot = nil)",""],["safeip_configinfo","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_configinfo","(slot = nil)",""],["safeip_configinfo","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_configinfo","(slot = nil)",""],["safeip_configure","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_configure","(slot, value=None)",""],["safeip_configure","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_configure","(slot, value=None)",""],["safeip_configure","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_configure","(slot, value=None)",""],["safeip_configure","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_configure","(slot, value=None)",""],["safeip_delete","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_delete","()",""],["safeip_delete","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_delete","()",""],["safeip_delete","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_delete","()",""],["safeip_delete","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_delete","()",""],["safeip_find_in_access_path","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_find_in_access_path","(dir)",""],["safeip_find_in_access_path","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_find_in_access_path","(dir)",""],["safeip_find_in_access_path","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_find_in_access_path","(dir)",""],["safeip_find_in_access_path","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_find_in_access_path","(dir)",""],["safeip_set_log_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_set_log_cmd","(cmd = Proc.new)",""],["safeip_set_log_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_set_log_cmd","(cmd = Proc.new)",""],["safeip_set_log_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_set_log_cmd","(cmd = Proc.new)",""],["safeip_set_log_cmd","MultiTkIp","classes/MultiTkIp.html#method-i-safeip_set_log_cmd","(cmd = Proc.new)",""],["sample","Array","classes/Array.html#method-i-sample","(p1)","<p>Choose a random element or <code>n</code> random elements from the array.\nThe elements are chosen by using random …\n"],["sample","DRbEx","classes/DRbEx.html#method-i-sample","(a, b, c)",""],["sample","DRbEx3","classes/DRbEx3.html#method-i-sample","(list)",""],["sample","Test1","classes/Test1.html#method-i-sample","(ip, parent)","<p>サンプルのためのウィジェットを生成する.\n"],["sanitize","Gem::Indexer","classes/Gem/Indexer.html#method-i-sanitize","(spec)","<p>Sanitize the descriptive fields in the spec.  Sometimes non-ASCII\ncharacters will garble the site index. …\n"],["sanitize_string","Gem::Indexer","classes/Gem/Indexer.html#method-i-sanitize_string","(string)","<p>Sanitize a single string.\n"],["sans_arguments","String","classes/String.html#method-i-sans_arguments","()",""],["sash_coord","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-sash_coord","(index)",""],["sash_coord","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-sash_coord","(index)",""],["sash_dragto","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-sash_dragto","(index, x, y)",""],["sash_dragto","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-sash_dragto","(index, x, y)",""],["sash_mark","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-sash_mark","(index, x, y)",""],["sash_mark","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-sash_mark","(index, x, y)",""],["sash_place","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-sash_place","(index, x, y)",""],["sash_place","Tk::PanedWindow","classes/Tk/PanedWindow.html#method-i-sash_place","(index, x, y)",""],["sashpos","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-i-sashpos","(idx, newpos=None)",""],["satisfied_by?","Gem::Requirement","classes/Gem/Requirement.html#method-i-satisfied_by-3F","(version)","<p>True if <code>version</code> satisfies this Requirement.\n"],["satisfied_by?","Gem::Requirement","classes/Gem/Requirement.html#method-i-satisfied_by-3F","(version)","<p>True if <code>version</code> satisfies this Requirement.\n"],["satisfies_requirement?","Gem::Specification","classes/Gem/Specification.html#method-i-satisfies_requirement-3F","(dependency)","<p>Checks if this specification meets the requirement of\n<code>dependency</code>.\n"],["saturday?","Date","classes/Date.html#method-i-saturday-3F","()","<p>Returns true if the date is Saturday.\n"],["saturday?","Time","classes/Time.html#method-i-saturday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Saturday.\n\n<pre><code>t = Time.local(2006, 6, 10)      #=&gt; 2006-06-10 00:00:00 -0500 ...\n</code></pre>\n"],["save","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-save","(arg0)","<p>VOID save save the document to a specified desination\n\n<pre><code>VARIANT arg0 --- desination [IN]</code></pre>\n"],["save","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-save","(arg0)","<p>VOID save save the document to a specified desination\n\n<pre><code>VARIANT arg0 --- desination [IN]</code></pre>\n"],["save","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-save","(arg0)","<p>VOID save save the document to a specified desination\n\n<pre><code>VARIANT arg0 --- desination [IN]</code></pre>\n"],["save","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-save","(container)",""],["save_cache","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-save_cache","()","<p>Writes the cache file for this store\n"],["save_class","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-save_class","(klass)","<p>Writes the ri data for <code>klass</code>\n"],["save_exception_mode","BigDecimal","classes/BigDecimal.html#method-c-save_exception_mode","()",""],["save_history","IRB::Context","classes/IRB/Context.html#method-i-save_history","()",""],["save_history","IRB::HistorySavingAbility","classes/IRB/HistorySavingAbility.html#method-i-save_history","()",""],["save_history=","IRB::Context","classes/IRB/Context.html#method-i-save_history-3D","(val)",""],["save_limit","BigDecimal","classes/BigDecimal.html#method-c-save_limit","()",""],["save_memo","Object","classes/Object.html#method-i-save_memo","(canvas, fname)",""],["save_method","RDoc::RI::Store","classes/RDoc/RI/Store.html#method-i-save_method","(klass, method)","<p>Writes the ri data for <code>method</code> on <code>klass</code>\n"],["save_plot","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-save_plot","(filename)",""],["save_rounding_mode","BigDecimal","classes/BigDecimal.html#method-c-save_rounding_mode","()",""],["saveps","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-saveps","(filename)",""],["say","ChatEntry","classes/ChatEntry.html#method-i-say","(str)",""],["say","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-say","(statement=\"\")","<p>Display a statement.\n"],["say","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-say","(*args)",""],["sbstub","Object","classes/Object.html#method-i-sbstub","(sb, cmd, num, units = 'units')","<p>sbstub\n\n<pre><code>Used as the :command option for a scrollbar,\nupdates the scrollbar&#39;s position.</code></pre>\n"],["scalar","Matrix","classes/Matrix.html#method-c-scalar","(n, value)","<p>Creates an <code>n</code> by <code>n</code> diagonal matrix where each\ndiagonal element is <code>value</code>.\n\n<pre><code>Matrix.scalar(2, 5)\n  =&gt; 5 0\n ...\n</code></pre>\n"],["scalar","Object::Syck::Out","classes/Object/Syck/Out.html#method-i-scalar","(p1, p2, p3 = v3)","\n<pre><code>YAML::Syck::Out::scalar</code></pre>\n<p>syck_out_scalar( self, type_id, str, style )\n\n<pre><code>VALUE self, type_id, str, style;</code></pre>\n"],["scalar","Psych::Coder","classes/Psych/Coder.html#method-i-scalar","(*args)",""],["scalar","Psych::Emitter","classes/Psych/Emitter.html#method-i-scalar","(p1, p2, p3, p4, p5, p6)","<p>Emit a scalar with <code>value</code>, <code>anchor</code>,\n<code>tag</code>, and a <code>plain</code> or <code>quoted</code> string\ntype with <code>style</code>.\n<p>See Psych::Handler#scalar …\n"],["scalar","Psych::Handler","classes/Psych/Handler.html#method-i-scalar","(value, anchor, tag, plain, quoted, style)","<p>Called when a scalar <code>value</code> is found.  The scalar may have an\n<code>anchor</code>, a <code>tag</code>, be implicitly <code>plain</code>\nor implicitly …\n"],["scalar","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-scalar","(value, anchor, tag, plain, quoted, style)",""],["scalar=","Psych::Coder","classes/Psych/Coder.html#method-i-scalar-3D","(value)","<p>Emit a scalar with <code>value</code>\n"],["scale","Tk::Canvas","classes/Tk/Canvas.html#method-i-scale","(tag, x, y, xs, ys)",""],["scale","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-scale","(tag, x, y, xs, ys)",""],["scale","TkcTagAccess","classes/TkcTagAccess.html#method-i-scale","(xorigin, yorigin, xscale, yscale)",""],["scan","OpenSSL::X509::Name::RFC2253DN","classes/OpenSSL/X509/Name/RFC2253DN.html#method-i-scan","(dn)",""],["scan","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-scan","()","<p>Extracts the classes, modules, methods, attributes, constants and aliases\nfrom a C file and returns an …\n"],["scan","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-scan","()","<p>Scans this ruby file for ruby constructs\n"],["scan","RDoc::Parser::Simple","classes/RDoc/Parser/Simple.html#method-i-scan","()","<p>Extract the file contents and attach them to the TopLevel as a comment\n"],["scan","REXML::IOSource","classes/REXML/IOSource.html#method-i-scan","(pattern, cons=false)",""],["scan","REXML::Source","classes/REXML/Source.html#method-i-scan","(pattern, cons=false)","<p>Scans the source for a given pattern.  Note, that this is not your usual\nscan() method.  For one thing, …\n"],["scan","String","classes/String.html#method-i-scan","(p1)","<p>Both forms iterate through <em>str</em>, matching the pattern (which may be\na <code>Regexp</code> or a <code>String</code>). For each match, …\n"],["scan","StringScanner","classes/StringScanner.html#method-i-scan","(p1)","<p>Tries to match with <code>pattern</code> at the current position. If\nthere&#39;s a match, the scanner advances the …\n"],["scan","Tk::Clock","classes/Tk/Clock.html#method-c-scan","(str, base=nil)",""],["scan","WEBrick::HTTPServer::MountTable","classes/WEBrick/HTTPServer/MountTable.html#method-i-scan","(path)",""],["scanGMT","Tk::Clock","classes/Tk/Clock.html#method-c-scanGMT","(str, base=nil)",""],["scan_args","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-scan_args","(p1, p2)",""],["scan_certs","CertStore","classes/CertStore.html#method-i-scan_certs","()",""],["scan_dragto","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-scan_dragto","(pos)",""],["scan_dragto","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","Tk::Canvas","classes/Tk/Canvas.html#method-i-scan_dragto","(x, y, gain=None)",""],["scan_dragto","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","Tk::TkTable","classes/Tk/TkTable.html#method-i-scan_dragto","(x, y)",""],["scan_dragto","TkTextWin","classes/TkTextWin.html#method-i-scan_dragto","(x, y)",""],["scan_full","StringScanner","classes/StringScanner.html#method-i-scan_full","(p1, p2, p3)","<p>Tests whether the given <code>pattern</code> is matched from the current\nscan pointer. Advances the scan pointer if …\n"],["scan_mark","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-scan_mark","(pos)",""],["scan_mark","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::Canvas","classes/Tk/Canvas.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-scan_mark","(x, y)",""],["scan_mark","Tk::TkTable","classes/Tk/TkTable.html#method-i-scan_mark","(x, y)",""],["scan_mark","TkTextWin","classes/TkTextWin.html#method-i-scan_mark","(x, y)",""],["scan_until","StringScanner","classes/StringScanner.html#method-i-scan_until","(p1)","<p>Scans the string <em>until</em> the <code>pattern</code> is matched. \nReturns the substring up to and including the end of …\n"],["scanf","IO","classes/IO.html#method-i-scanf","(str)","<p>Scans the current string until the match is exhausted, yielding each match\nas it is encountered in the …\n"],["scanf","Kernel","classes/Kernel.html#method-i-scanf","(format, &b)","<p>Scans STDIN for data matching <code>format</code>.  See IO#scanf for\ndetails.\n<p>See Scanf for details on creating a format …\n"],["scanf","String","classes/String.html#method-i-scanf","(fstr)","<p>Scans the current string. If a block is given, it functions exactly like\nblock_scanf.\n\n<pre><code>arr = &quot;123 456&quot;.scanf(&quot;%d%d&quot;) ...</code></pre>\n"],["scheme=","URI::Generic","classes/URI/Generic.html#method-i-scheme-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["scheme_list","URI","classes/URI.html#method-c-scheme_list","()","<p>Returns a Hash of the defined schemes\n"],["scope","Tk::Itcl","classes/Tk/Itcl.html#method-c-scope","(var)",""],["scope","URI::LDAP","classes/URI/LDAP.html#method-i-scope","()","<p>returns scope.\n"],["scope=","URI::LDAP","classes/URI/LDAP.html#method-i-scope-3D","(val)","<p>setter for scope <code>val</code>\n"],["scope_name","Rake::Task","classes/Rake/Task.html#method-i-scope_name","(scope, task_name)","<p>Apply the scope to the task name according to the rules for this kind of\ntask.  Generic tasks will accept …\n"],["screen","TkWinfo","classes/TkWinfo.html#method-c-screen","(win)",""],["screen","TkWinfo","classes/TkWinfo.html#method-c-screen","(win)",""],["screen_bbox","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-screen_bbox","(*tags)",""],["screen_bbox","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-screen_bbox","()",""],["screencells","TkWinfo","classes/TkWinfo.html#method-c-screencells","(win)",""],["screencells","TkWinfo","classes/TkWinfo.html#method-c-screencells","(win)",""],["screendepth","TkWinfo","classes/TkWinfo.html#method-c-screendepth","(win)",""],["screendepth","TkWinfo","classes/TkWinfo.html#method-c-screendepth","(win)",""],["screenheight","TkWinfo","classes/TkWinfo.html#method-c-screenheight","(win)",""],["screenheight","TkWinfo","classes/TkWinfo.html#method-c-screenheight","(win)",""],["screenmmheight","TkWinfo","classes/TkWinfo.html#method-c-screenmmheight","(win)",""],["screenmmheight","TkWinfo","classes/TkWinfo.html#method-c-screenmmheight","(win)",""],["screenmmwidth","TkWinfo","classes/TkWinfo.html#method-c-screenmmwidth","(win)",""],["screenmmwidth","TkWinfo","classes/TkWinfo.html#method-c-screenmmwidth","(win)",""],["screenvisual","TkWinfo","classes/TkWinfo.html#method-c-screenvisual","(win)",""],["screenvisual","TkWinfo","classes/TkWinfo.html#method-c-screenvisual","(win)",""],["screenwidth","TkWinfo","classes/TkWinfo.html#method-c-screenwidth","(win)",""],["screenwidth","TkWinfo","classes/TkWinfo.html#method-c-screenwidth","(win)",""],["script_cmd","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-script_cmd","(*args)","<p>This routine is called for every &lt;SCRIPT&gt; markup\n"],["scrl","Curses","classes/Curses.html#method-c-scrl","(p1)","<p>Scrolls the current window Fixnum <code>num</code> lines. The current\ncursor position is not changed.\n<p>For positive …\n"],["scrl","Curses::Window","classes/Curses/Window.html#method-i-scrl","(p1)","<p>Scrolls the current window Fixnum <code>num</code> lines. The current\ncursor position is not changed.\n<p>For positive …\n"],["scroll","Curses::Window","classes/Curses/Window.html#method-i-scroll","()","<p>Scrolls the current window up one line.\n"],["scroll","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-scroll","(*args)",""],["scrollButton","Object","classes/Object.html#method-i-scrollButton","(c)",""],["scrollEnter","Object","classes/Object.html#method-i-scrollEnter","(c)",""],["scrollLeave","Object","classes/Object.html#method-i-scrollLeave","(c)",""],["scroll_down","FileViewer","classes/FileViewer.html#method-i-scroll_down","()","<p>Scroll the display down by one line\n"],["scroll_pages","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-scroll_pages","(num)",""],["scroll_units","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-scroll_units","(num)",""],["scroll_up","FileViewer","classes/FileViewer.html#method-i-scroll_up","()","<p>Scroll the display up by one line\n"],["scrollbar","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-scrollbar","(bar=nil)",""],["scrollbar","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-scrollbar","(bar=nil)",""],["scrollbar","Tk::RbWidget::AutoScrollListbox","classes/Tk/RbWidget/AutoScrollListbox.html#method-i-scrollbar","(mode)",""],["scrollbar","Tk::RbWidget::Combobox","classes/Tk/RbWidget/Combobox.html#method-i-scrollbar","(mode)",""],["scrollbarResizeDemo","Object","classes/Object.html#method-i-scrollbarResizeDemo","()",""],["scrollbarborder","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-scrollbarborder","(width)","<p>set scrollbar border\n"],["scrollbarborder","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-scrollbarborder","(width)","<p>set scrollbar border\n"],["scrollbarwidth","Tk::RbWidget::ScrollFrame","classes/Tk/RbWidget/ScrollFrame.html#method-i-scrollbarwidth","(width = nil)","<p>set width of scrollbar\n"],["scrollbarwidth","Tk::ScrollbarComposite","classes/Tk/ScrollbarComposite.html#method-i-scrollbarwidth","(width)",""],["scrollbarwidth","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-scrollbarwidth","(width)","<p>set scrollbar width\n"],["scrollbarwidth","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-scrollbarwidth","(width)","<p>set scrollbar width\n"],["scrollbarwidth","TkMultiListbox","classes/TkMultiListbox.html#method-i-scrollbarwidth","(width)","<p>set scrollbar width\n"],["scrollcommand","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-scrollcommand","(cmd=Proc.new)",""],["scrollcommand","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-scrollcommand","(cmd=Proc.new)",""],["scrollcommand","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-scrollcommand","(cmd=Proc.new)",""],["scrolledWidget","Object","classes/Object.html#method-i-scrolledWidget","(parent, klass, themed, *args)",""],["scrolling_list","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-scrolling_list","(name = \"\", *values)",""],["scrollok","Curses::Window","classes/Curses/Window.html#method-i-scrollok","(p1)","<p>Controls what happens when the cursor of a window is moved off the edge of\nthe window or scrolling region, …\n"],["search","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-search","(gem_pattern, platform_or_requirement = false)","<p>Search for a gem by Gem::Dependency <code>gem_pattern</code>.  If\n<code>only_platform</code> is true, only gems matching Gem::Platform.local\n…\n"],["search","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-search","(gem_pattern, platform_or_requirement = false)","<p>Search for a gem by Gem::Dependency <code>gem_pattern</code>.  If\n<code>only_platform</code> is true, only gems matching Gem::Platform.local\n…\n"],["search","IRB::JobManager","classes/IRB/JobManager.html#method-i-search","(key)",""],["search","IRB::SLex","classes/IRB/SLex.html#method-i-search","(token)",""],["search","IRB::SLex::Node","classes/IRB/SLex/Node.html#method-i-search","(chrs, opt = nil)",""],["search","Net::IMAP","classes/Net/IMAP.html#method-i-search","(keys, charset = nil)","<p>Sends a SEARCH command to search the mailbox for messages that match the\ngiven searching criteria, and …\n"],["search","OptionParser::List","classes/OptionParser/List.html#method-i-search","(id, key)","<p>Searches <code>key</code> in <code>id</code> list. The result is returned\nor yielded if a block is given. If it isn&#39;t found, …\n"],["search","RubyVM::VPATH","classes/RubyVM/VPATH.html#method-i-search","(meth, base, *rest)",""],["search","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-search","( ypath_str )","<p>Search for YPath entry and return a list of qualified paths.\n"],["search","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-search","(pat, from=None, to=None)",""],["search","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-search","(container, keys={})",""],["search","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-search","(val1, val2=None)",""],["search","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-search","(pat,start,stop=None)",""],["search_X_libraries","Object","classes/Object.html#method-i-search_X_libraries","()",""],["search_const","OptionParser","classes/OptionParser.html#method-i-search_const","(klass, name)",""],["search_convpath","Encoding::Converter","classes/Encoding/Converter.html#method-c-search_convpath","(*args)","<p>Returns a conversion path.\n\n<pre><code>p Encoding::Converter.search_convpath(&quot;ISO-8859-1&quot;, &quot;EUC-JP&quot;)\n#=&gt; [[#&lt;Encoding:ISO-8859-1&gt;, ...\n</code></pre>\n"],["search_file_from_ruby_path","IRB::IrbLoader","classes/IRB/IrbLoader.html#method-i-search_file_from_ruby_path","(fn)",""],["search_full","StringScanner","classes/StringScanner.html#method-i-search_full","(p1, p2, p3)","<p>Scans the string <em>until</em> the <code>pattern</code> is matched.\nAdvances the scan pointer if <code>advance_pointer_p</code>, otherwise …\n"],["search_servlet","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-search_servlet","(path)","<p>Finds a servlet for <code>path</code>\n"],["search_tclConfig","Object","classes/Object.html#method-i-search_tclConfig","(*paths)",""],["search_vers_on_path","Object","classes/Object.html#method-i-search_vers_on_path","(vers, path, *heads)",""],["search_with_length","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-search_with_length","(pat,start,stop=None)",""],["searcher","Gem","classes/Gem.html#method-c-searcher","()","<p>The GemPathSearcher object used to search for matching installed gems.\n"],["sec","Time","classes/Time.html#method-i-sec","()","<p>Returns the second of the minute (0..60)<em>[Yes, seconds really can range\nfrom zero to 60. This allows the</em> …\n"],["sec=","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-sec-3D","(value)",""],["second=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-second-3D","(second)",""],["second=","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-second-3D","(second)",""],["seconds","Tk::Clock","classes/Tk/Clock.html#method-c-seconds","()",""],["section","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-section","(name)",""],["sections","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-sections","()",""],["sections","RDoc::Context","classes/RDoc/Context.html#method-i-sections","()","<p>Sections in this context\n"],["secure=","CGI::Cookie","classes/CGI/Cookie.html#method-i-secure-3D","(val)","<p>Set whether the Cookie is a secure cookie or not.\n<p><code>val</code> must be a boolean.\n"],["see","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-see","()","<p>A method/attribute to look at, in particular if this method/attribute has\nno documentation.\n<p>It can be …\n"],["see","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-see","(index)",""],["see","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-see","()",""],["see","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-see","(tag)",""],["see","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-see","()",""],["see","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-see","(item)",""],["see","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-see","()",""],["see","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-see","(page)",""],["see","Tk::BWidget::ScrollableFrame","classes/Tk/BWidget/ScrollableFrame.html#method-i-see","(win, vert=None, horiz=None)",""],["see","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-see","(node)",""],["see","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-see","()",""],["see","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-see","(index)",""],["see","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-see","(index)",""],["see","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-see","(index)",""],["see","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-see","(index)",""],["see","Tk::RbWidget::Combobox","classes/Tk/RbWidget/Combobox.html#method-i-see","(idx)",""],["see","Tk::TkTable","classes/Tk/TkTable.html#method-i-see","(idx)",""],["see","TkTextWin","classes/TkTextWin.html#method-i-see","(index)",""],["see_anchor","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-see_anchor","(anchor, tag)",""],["see_anchor","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-see_anchor","(anchor)",""],["seed","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-seed","()","<p>See the OpenSSL documentation for EC_GROUP_get0_seed()\n"],["seed","Random","classes/Random.html#method-i-seed","()","<p>Returns the seed of the generator.\n"],["seed=","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-seed-3D","(p1)","<p>See the OpenSSL documentation for EC_GROUP_set_seed()\n"],["seek","ARGF","classes/ARGF.html#method-i-seek","(*args)","<p>Seeks to offset <em>amount</em> (an <code>Integer</code>) in the\n<code>ARGF</code> stream according to the value of <em>whence</em>. See\n+IO#seek+ …\n"],["seek","Dir","classes/Dir.html#method-i-seek","(p1)","<p>Seeks to a particular location in <em>dir</em>. <em>integer</em> must be a\nvalue returned by <code>Dir#tell</code>.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;) ...</code></pre>\n"],["seek","IO","classes/IO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to a given offset <em>anInteger</em> in the stream according to the\nvalue of <em>whence</em>:\n\n<pre><code>IO::SEEK_CUR  | Seeks ...</code></pre>\n"],["seek","StringIO","classes/StringIO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to a given offset <em>amount</em> in the stream according to the\nvalue of <em>whence</em> (see IO#seek).\n"],["seek","TkTextIO","classes/TkTextIO.html#method-i-seek","(offset, whence=IO::SEEK_SET)",""],["sel_load","TkHTML_File_Viewer","classes/TkHTML_File_Viewer.html#method-i-sel_load","()",""],["select","Array","classes/Array.html#method-i-select","()","<p>Invokes the block passing in successive elements from <code>self</code>,\nreturning an array containing those elements …\n"],["select","DBM","classes/DBM.html#method-i-select","()","<p>Returns a new array consisting of the [key, value] pairs for which the code\nblock returns true.\n"],["select","DemoTree","classes/DemoTree.html#method-c-select","(where, num, tree, list, node)",""],["select","ENV","classes/ENV.html#method-c-select","()","<p>Returns a copy of the environment for entries where the block returns true.\n<p>Returns an Enumerator if no …\n"],["select","Enumerable","classes/Enumerable.html#method-i-select","()","<p>Returns an array containing all elements of <em>enum</em> for which\n<em>block</em> is not <code>false</code> (see also\n<code>Enumerable#reject</code> …\n"],["select","GDBM","classes/GDBM.html#method-i-select","()","<p>Returns a new array of all key-value pairs of the database for which\n<em>block</em> evaluates to true.\n"],["select","Hash","classes/Hash.html#method-i-select","()","<p>Returns a new hash consisting of entries for which the block returns true.\n<p>If no block is given, an enumerator …\n"],["select","IO","classes/IO.html#method-c-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Calls select(2) system call. It monitors given arrays of <code>IO</code>\nobjects, waits one or more of <code>IO</code> objects …\n"],["select","Kernel","classes/Kernel.html#method-i-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Calls select(2) system call. It monitors given arrays of <code>IO</code>\nobjects, waits one or more of <code>IO</code> objects …\n"],["select","Net::IMAP","classes/Net/IMAP.html#method-i-select","(mailbox)","<p>Sends a SELECT command to select a <code>mailbox</code> so that messages in\nthe <code>mailbox</code> can be accessed.\n<p>After you …\n"],["select","SDBM","classes/SDBM.html#method-i-select","()",""],["select","Struct","classes/Struct.html#method-i-select","(*args)","<p>Invokes the block passing in successive elements from <em>struct</em>,\nreturning an array containing those elements …\n"],["select","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-select","( ypath_str )","<p>Search for YPath entry and return qualified nodes.\n"],["select","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-select","(win, x, y, timestamp)",""],["select","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-select","(index)",""],["select","Tk::BLT::Ted","classes/Tk/BLT/Ted.html#method-c-select","(master, *args)",""],["select","Tk::Canvas","classes/Tk/Canvas.html#method-i-select","(mode, *args)",""],["select","Tk::Iwidgets::Calendar","classes/Tk/Iwidgets/Calendar.html#method-i-select","(date)",""],["select","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-select","(idx)",""],["select","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-select","(idx)",""],["select","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-select","(idx)",""],["select","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-select","(idx)",""],["select","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-select","(mode, *args)",""],["select","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-select","(idx)",""],["select","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-select","(idx)",""],["select","Tk::RadioButton","classes/Tk/RadioButton.html#method-i-select","()",""],["select","Tk::RadioButton","classes/Tk/RadioButton.html#method-i-select","()",""],["select","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-select","(idx)",""],["select","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-select","(idx)",""],["select","URI::Generic","classes/URI/Generic.html#method-i-select","(*components)","<p>Args\n<p><code>components</code> &mdash; Multiple Symbol arguments defined in URI::HTTP\n\n<p>Description\n"],["select","YAML::DBM","classes/YAML/DBM.html#method-i-select","( *keys )","<p>If a block is provided, returns a new array containing [key, value] pairs\nfor which the block returns …\n"],["select!","Array","classes/Array.html#method-i-select-21","()","<p>Invokes the block passing in successive elements from <code>self</code>,\ndeleting elements for which the block returns …\n"],["select!","ENV","classes/ENV.html#method-c-select-21","()","<p>Equivalent to ENV#keep_if but returns <code>nil</code> if no changes were\nmade.\n"],["select!","Hash","classes/Hash.html#method-i-select-21","()","<p>Equivalent to <code>Hash#keep_if</code>, but returns <code>nil</code> if no\nchanges were made.\n"],["select!","Set","classes/Set.html#method-i-select-21","()","<p>Equivalent to Set#keep_if, but returns nil if no changes were made.\n"],["select!","Syck::BaseNode","classes/Syck/BaseNode.html#method-i-select-21","( ypath_str )","<p>Search for YPath entry and return transformed nodes.\n"],["selectAndLoadDir3","Object","classes/Object.html#method-i-selectAndLoadDir3","(w, lbox)","<p>selectAndLoadDir3 – This procedure pops up a dialog to ask for a directory\nto load into the listobx …\n"],["selectNodes","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXMLDOMText","classes/IXMLDOMText.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","IXTLRuntime","classes/IXTLRuntime.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectNodes","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-selectNodes","(arg0)","<p>IXMLDOMNodeList selectNodes execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXMLDOMText","classes/IXMLDOMText.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","IXTLRuntime","classes/IXTLRuntime.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["selectSingleNode","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-selectSingleNode","(arg0)","<p>IXMLDOMNode selectSingleNode execute query on the subtree\n\n<pre><code>BSTR arg0 --- queryString [IN]</code></pre>\n"],["select_adjust","Tk::Canvas","classes/Tk/Canvas.html#method-i-select_adjust","(tagOrId, index)",""],["select_adjust","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-select_adjust","(tagOrId, index)",""],["select_adjust","TkcTagAccess","classes/TkcTagAccess.html#method-i-select_adjust","(index)",""],["select_clear","Tk::Canvas","classes/Tk/Canvas.html#method-i-select_clear","()",""],["select_clear","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-select_clear","()",""],["select_clear","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-select_clear","(first, last=None)",""],["select_clear","TkMultiColumnList","classes/TkMultiColumnList.html#method-c-select_clear","(first, last=nil)",""],["select_from","Tk::Canvas","classes/Tk/Canvas.html#method-i-select_from","(tagOrId, index)",""],["select_from","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-select_from","(tagOrId, index)",""],["select_from","TkcTagAccess","classes/TkcTagAccess.html#method-i-select_from","(index)",""],["select_index","TkMultiColumnList","classes/TkMultiColumnList.html#method-c-select_index","()",""],["select_item","Tk::Canvas","classes/Tk/Canvas.html#method-i-select_item","()",""],["select_item","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-select_item","()",""],["select_item","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-select_item","()",""],["select_item","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-select_item","()",""],["select_message","IRB::InputCompletor","classes/IRB/InputCompletor.html#method-c-select_message","(receiver, message, candidates, sep = \".\")",""],["select_node","DemoTree","classes/DemoTree.html#method-c-select_node","(tree, list, node)",""],["select_set","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-select_set","(first, last=None)",""],["select_set","TkMultiColumnList","classes/TkMultiColumnList.html#method-c-select_set","(first, last=nil)",""],["select_to","Tk::Canvas","classes/Tk/Canvas.html#method-i-select_to","(tagOrId, index)",""],["select_to","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-select_to","(tagOrId, index)",""],["select_to","TkcTagAccess","classes/TkcTagAccess.html#method-i-select_to","(index)",""],["selected","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-selected","()",""],["selected","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-selected","()",""],["selected","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-selected","()",""],["selected_item_count","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-selected_item_count","()",""],["selected_slices","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-selected_slices","()",""],["selection_add","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-selection_add","(*args)",""],["selection_add","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-selection_add","()",""],["selection_add","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-selection_add","(*args)",""],["selection_add","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-selection_add","()",""],["selection_add","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-selection_add","(*nodes)",""],["selection_adjust","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-selection_adjust","(index)",""],["selection_adjust","Tk::Entry","classes/Tk/Entry.html#method-i-selection_adjust","(index)",""],["selection_adjust","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-selection_adjust","(index)",""],["selection_adjust","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-selection_adjust","(index)",""],["selection_adjust","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-selection_adjust","(index)",""],["selection_anchor","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_anchor","(tag)",""],["selection_anchor","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-selection_anchor","()",""],["selection_anchor","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-selection_anchor","(index)",""],["selection_anchor","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-selection_anchor","(index)",""],["selection_anchor","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-selection_anchor","(index)",""],["selection_anchor","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-selection_anchor","(index)",""],["selection_anchor","Tk::Listbox","classes/Tk/Listbox.html#method-i-selection_anchor","(index)",""],["selection_anchor","Tk::TkTable","classes/Tk/TkTable.html#method-i-selection_anchor","(idx)",""],["selection_anchor","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-selection_anchor","(index)",""],["selection_anchor","TkMultiListbox","classes/TkMultiListbox.html#method-i-selection_anchor","(index)",""],["selection_cancel","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_cancel","()",""],["selection_clear","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-selection_clear","()",""],["selection_clear","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_clear","(first, last=None)",""],["selection_clear","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-selection_clear","()",""],["selection_clear","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-selection_clear","()",""],["selection_clear","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-selection_clear","()",""],["selection_clear","Tk::Entry","classes/Tk/Entry.html#method-i-selection_clear","()",""],["selection_clear","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-selection_clear","()",""],["selection_clear","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-selection_clear","(first, last=None)",""],["selection_clear","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-selection_clear","()",""],["selection_clear","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-selection_clear","()",""],["selection_clear","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-selection_clear","()",""],["selection_clear","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-selection_clear","(first, last=None)",""],["selection_clear","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-selection_clear","(first, last=None)",""],["selection_clear","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-selection_clear","(first, last=None)",""],["selection_clear","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-selection_clear","()",""],["selection_clear","Tk::Listbox","classes/Tk/Listbox.html#method-i-selection_clear","(first, last=None)",""],["selection_clear","Tk::TkTable","classes/Tk/TkTable.html#method-i-selection_clear","(first, last=None)",""],["selection_clear","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-selection_clear","(first, last=None)",""],["selection_clear","TkMultiListbox","classes/TkMultiListbox.html#method-i-selection_clear","(first, last=None)",""],["selection_clear_all","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_clear_all","()",""],["selection_clear_all","Tk::TkTable","classes/Tk/TkTable.html#method-i-selection_clear_all","()",""],["selection_from","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-selection_from","(index)",""],["selection_from","Tk::Entry","classes/Tk/Entry.html#method-i-selection_from","(index)",""],["selection_from","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-selection_from","(index)",""],["selection_from","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-selection_from","(index)",""],["selection_from","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-selection_from","(index)",""],["selection_get","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-selection_get","(*args)",""],["selection_get","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-selection_get","()",""],["selection_get","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-selection_get","()",""],["selection_include?","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_include-3F","(tag)",""],["selection_include?","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-selection_include-3F","()",""],["selection_include?","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-selection_include-3F","(*args)",""],["selection_include?","Tk::TkTable","classes/Tk/TkTable.html#method-i-selection_include-3F","(idx)",""],["selection_includes","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-selection_includes","(index)",""],["selection_includes","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-selection_includes","(index)",""],["selection_includes","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-selection_includes","(index)",""],["selection_includes","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-selection_includes","(index)",""],["selection_includes","Tk::Listbox","classes/Tk/Listbox.html#method-i-selection_includes","(index)",""],["selection_line","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-selection_line","(index)",""],["selection_mark","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_mark","(tag)",""],["selection_mark","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-selection_mark","()",""],["selection_present","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-selection_present","()",""],["selection_present","Tk::Entry","classes/Tk/Entry.html#method-i-selection_present","()",""],["selection_present","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-selection_present","()",""],["selection_present","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-selection_present","()",""],["selection_present","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-selection_present","()",""],["selection_present","Tk::TkTable","classes/Tk/TkTable.html#method-i-selection_present","()",""],["selection_present?","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_present-3F","()",""],["selection_range","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-selection_range","(first, last)",""],["selection_range","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-selection_range","(*args)",""],["selection_range","Tk::Entry","classes/Tk/Entry.html#method-i-selection_range","(s, e)",""],["selection_range","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-selection_range","(s, e)",""],["selection_range","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-selection_range","(s, e)",""],["selection_range","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-selection_range","(s, e)",""],["selection_remove","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-selection_remove","(*args)",""],["selection_remove","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-selection_remove","()",""],["selection_remove","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-selection_remove","(*args)",""],["selection_remove","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-selection_remove","()",""],["selection_remove","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-selection_remove","(*nodes)",""],["selection_set","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_set","(first, last=None)",""],["selection_set","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-selection_set","()",""],["selection_set","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-selection_set","(*args)",""],["selection_set","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-selection_set","()",""],["selection_set","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-selection_set","(*args)",""],["selection_set","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-selection_set","()",""],["selection_set","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-selection_set","(first, last)",""],["selection_set","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-selection_set","(first, last=None)",""],["selection_set","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-selection_set","(first, last=None)",""],["selection_set","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-selection_set","(first, last=None)",""],["selection_set","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-selection_set","(first, last=None)",""],["selection_set","Tk::Listbox","classes/Tk/Listbox.html#method-i-selection_set","(first, last=None)",""],["selection_set","Tk::TkTable","classes/Tk/TkTable.html#method-i-selection_set","(first, last=None)",""],["selection_set","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-selection_set","(first, last=None)",""],["selection_set","TkMultiListbox","classes/TkMultiListbox.html#method-i-selection_set","(first, last=None)",""],["selection_to","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-selection_to","(index)",""],["selection_to","Tk::Entry","classes/Tk/Entry.html#method-i-selection_to","(index)",""],["selection_to","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-selection_to","(index)",""],["selection_to","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-selection_to","(index)",""],["selection_to","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-selection_to","(index)",""],["selection_toggle","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-selection_toggle","(first, last=None)",""],["selection_toggle","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-selection_toggle","()",""],["selection_toggle","Tk::BWidget::ListBox::Item","classes/Tk/BWidget/ListBox/Item.html#method-i-selection_toggle","()",""],["selection_toggle","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-selection_toggle","(*args)",""],["selection_toggle","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-selection_toggle","()",""],["selection_word","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-selection_word","(index)",""],["send","BasicSocket","classes/BasicSocket.html#method-i-send","(p1, p2, p3 = v3)","<p>send <em>mesg</em> via <em>basicsocket</em>.\n<p><em>mesg</em> should be a string.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* constants. …\n"],["send","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-send","(arg0=nil)","<p>VOID send Send HTTP request\n\n<pre><code>VARIANT arg0 --- varBody [IN]</code></pre>\n"],["send","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-send","(arg0=nil)","<p>VOID send Send HTTP request\n\n<pre><code>VARIANT arg0 --- varBody [IN]</code></pre>\n"],["send","MultiTkIp_OK","classes/MultiTkIp_OK.html#method-c-send","(thread, ret=nil)",""],["send","Object","classes/Object.html#method-i-send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["send","UDPSocket","classes/UDPSocket.html#method-i-send","(p1, p2, p3, p4)","<p>Sends <em>mesg</em> via <em>udpsocket</em>.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* constants.\n\n<pre><code>u1 = UDPSocket.new\nu1.bind(&quot;127.0.0.1&quot;, ...</code></pre>\n"],["send_body","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-send_body","(socket)","<p>Sends the body on <code>socket</code>\n"],["send_gem","Gem::Commands::PushCommand","classes/Gem/Commands/PushCommand.html#method-i-send_gem","(name)",""],["send_header","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-send_header","(socket)","<p>Sends the headers on <code>socket</code>\n"],["send_io","UNIXSocket","classes/UNIXSocket.html#method-i-send_io","(p1)","<p>Sends <em>io</em> as file descriptor passing.\n\n<pre><code>s1, s2 = UNIXSocket.pair\n\ns1.send_io STDOUT\nstdout = s2.recv_io\n ...</code></pre>\n"],["send_mail","Net::SMTP","classes/Net/SMTP.html#method-i-send_mail","(msgstr, from_addr, *to_addrs)",""],["send_mail","Net::SMTP","classes/Net/SMTP.html#method-i-send_mail","(msgstr, from_addr, *to_addrs)",""],["send_message","Net::SMTP","classes/Net/SMTP.html#method-i-send_message","(msgstr, from_addr, *to_addrs)","<p>Sends <code>msgstr</code> as a message.  Single CR (“r”) and LF (“n”) found\nin the <code>msgstr</code>, are …\n"],["send_message","Net::SMTP","classes/Net/SMTP.html#method-i-send_message","(msgstr, from_addr, *to_addrs)","<p>Sends <code>msgstr</code> as a message.  Single CR (“r”) and LF (“n”) found\nin the <code>msgstr</code>, are …\n"],["send_reply","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-send_reply","(succ, result)","<p>On the server side, send a reply to the client.\n"],["send_reply","DRb::HTTP0::ServerSide","classes/DRb/HTTP0/ServerSide.html#method-i-send_reply","(succ, result)",""],["send_request","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-send_request","(ref, msg_id, arg, b)","<p>On the client side, send a request to the server.\n"],["send_request","DRb::HTTP0::ClientSide","classes/DRb/HTTP0/ClientSide.html#method-i-send_request","(ref, msg_id, *arg, &b)",""],["send_request","Net::HTTP","classes/Net/HTTP.html#method-i-send_request","(name, path, data = nil, header = nil)","<p>Sends an HTTP request to the HTTP server. Also sends a DATA string if\n<code>data</code> is given.\n<p>Returns a Net::HTTPResponse …\n"],["send_request","Net::HTTP","classes/Net/HTTP.html#method-i-send_request","(name, path, data = nil, header = nil)","<p>Sends an HTTP request to the HTTP server. Also sends a DATA string if\n<code>data</code> is given.\n<p>Returns a Net::HTTPResponse …\n"],["send_response","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-send_response","(socket)","<p>Sends the response on <code>socket</code>\n"],["send_spot","TkKinput","classes/TkKinput.html#method-c-send_spot","(win)",""],["sendcmd","Net::FTP","classes/Net/FTP.html#method-i-sendcmd","(cmd)","<p>Sends a command and returns the response.\n"],["sender","IRB::Frame","classes/IRB/Frame.html#method-c-sender","()",""],["sendmail","Net::SMTP","classes/Net/SMTP.html#method-i-sendmail","(msgstr, from_addr, *to_addrs)",""],["sendmail","Net::SMTP","classes/Net/SMTP.html#method-i-sendmail","(msgstr, from_addr, *to_addrs)",""],["sendmsg","BasicSocket","classes/BasicSocket.html#method-i-sendmsg","(*args)","<p>sendmsg sends a message using sendmsg(2) system call in blocking manner.\n<p><em>mesg</em> is a string to send.\n<p><em>flags</em> …\n"],["sendmsg_nonblock","BasicSocket","classes/BasicSocket.html#method-i-sendmsg_nonblock","(*args)","<p>sendmsg_nonblock sends a message using sendmsg(2) system call in\nnon-blocking manner.\n<p>It is similar to …\n"],["separator","OptionParser","classes/OptionParser.html#method-i-separator","(string)","<p>Add separator in summary.\n"],["seplist","PP::PPMethods","classes/PP/PPMethods.html#method-i-seplist","(list, sep=nil, iter_method=:each)","<p>Adds a separated list. The list is separated by comma with breakable space,\nby default.\n<p>#seplist iterates …\n"],["seq","Object::Syck::Out","classes/Object/Syck/Out.html#method-i-seq","(p1, p2 = v2)","<p>YAML::Syck::Out::seq\n"],["seq","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-seq","( type, &e )","<p>Quick sequence\n"],["seq","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-seq","(start, finish=None, step=None)",""],["seq=","Psych::Coder","classes/Psych/Coder.html#method-i-seq-3D","(list)","<p>Emit a sequence of <code>list</code>\n"],["seq_map_shortcut","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-seq_map_shortcut","()",""],["sequence","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-sequence","()","<p>Section sequence number (deprecated)\n"],["serial","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-serial","()",""],["serial","OpenSSL::PKCS7::RecipientInfo","classes/OpenSSL/PKCS7/RecipientInfo.html#method-i-serial","()",""],["serial","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-i-serial","()",""],["serial","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-serial","()",""],["serial","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-serial","()",""],["serial=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-serial-3D","(p1)",""],["serial=","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-serial-3D","(p1)",""],["serve","GServer","classes/GServer.html#method-i-serve","(io)",""],["serve","XMLRPC::CGIServer","classes/XMLRPC/CGIServer.html#method-i-serve","()",""],["serve","XMLRPC::ModRubyServer","classes/XMLRPC/ModRubyServer.html#method-i-serve","()",""],["serve","XMLRPC::Server","classes/XMLRPC/Server.html#method-i-serve","()",""],["server","Object","classes/Object.html#method-i-server","(ts, id)",""],["server","TkWinfo","classes/TkWinfo.html#method-c-server","(win)",""],["server","TkWinfo","classes/TkWinfo.html#method-c-server","(win)",""],["server_error?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-server_error-3F","(code)","<p>Is <code>code</code> a server error status?\n"],["server_name","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-server_name","()","<p>The server name this request is for\n"],["servername","Tk::WinDDE","classes/Tk/WinDDE.html#method-c-servername","(*args)","<p>def servername(topic=None)\n\n<pre><code>tk_call(&#39;dde&#39;, &#39;servername&#39;, topic)</code></pre>\n<p>end\n"],["service","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-i-service","(name)",""],["service","WEBrick::CGI","classes/WEBrick/CGI.html#method-i-service","(req, res)",""],["service","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-i-service","(req, res)",""],["service","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-service","(req, res)","<p>Services <code>req</code> and fills in <code>res</code>\n"],["service","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-i-service","(req, res)","<p>Dispatches to a <code>do_</code> method based on <code>req</code> if such a\nmethod is available.  (<code>do_GET</code> for a GET request).  …\n"],["service","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-i-service","(req, res)",""],["service","XMLRPC::WEBrickServlet","classes/XMLRPC/WEBrickServlet.html#method-i-service","(request, response)",""],["services","Tk::WinDDE","classes/Tk/WinDDE.html#method-c-services","(service, topic)",""],["session=","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-session-3D","(p1)","<p>Sets the Session to be used when the connection is established.\n"],["session_add","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_add","(p1)","<p>Adds <code>session</code> to the session cache\n"],["session_cache_mode","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_mode","()","<p>The current session cache mode.\n"],["session_cache_mode=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_mode-3D","(p1)","<p>Sets the SSL session cache mode.  Bitwise-or together the desired\nSESSION_CACHE_* constants to set.  …\n"],["session_cache_size","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_size","()","<p>Returns the current session cache size.  Zero is used to represent an\nunlimited cache size.\n"],["session_cache_size=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_size-3D","(p1)","<p>Sets the session cache size.  Returns the previously valid session cache\nsize.  Zero is used to represent …\n"],["session_cache_stats","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_stats","()","<p>Returns a Hash containing the following keys:\n<p>:accept &mdash; Number of started SSL/TLS handshakes in server mode …\n"],["session_remove","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_remove","(p1)","<p>Removes <code>session</code> from the session cache\n"],["session_reused?","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-session_reused-3F","()","<p>Returns true if a reused session was negotiated during the handshake.\n"],["set","IPAddr","classes/IPAddr.html#method-i-set","(addr, *family)","<p>Set +@addr+, the internal stored ip address, to given <code>addr</code>.\nThe parameter <code>addr</code> is validated using the …\n"],["set","Tk::BLT::CutBuffer","classes/Tk/BLT/CutBuffer.html#method-c-set","(val, num = 0)",""],["set","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-set","(data)",""],["set","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-i-set","(node)",""],["set","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-set","(item)",""],["set","Tk::Entry","classes/Tk/Entry.html#method-i-set","(val)",""],["set","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-set","(val)",""],["set","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-set","(val)",""],["set","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-set","(val)",""],["set","Tk::Scale","classes/Tk/Scale.html#method-i-set","(val)",""],["set","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-set","(first, last)",""],["set","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-set","(str)",""],["set","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-set","(str)",""],["set","Tk::Tile::TCombobox","classes/Tk/Tile/TCombobox.html#method-i-set","(val)",""],["set","Tk::Tile::TCombobox","classes/Tk/Tile/TCombobox.html#method-i-set","(val)",""],["set","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-i-set","(val)",""],["set","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-i-set","(val)",""],["set","Tk::TkTable","classes/Tk/TkTable.html#method-i-set","(*pairs)",""],["set","Tk::Vu::Bargraph","classes/Tk/Vu/Bargraph.html#method-i-set","(val = None)",""],["set","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-set","(val = None)",""],["set","Tk::WinRegistry","classes/Tk/WinRegistry.html#method-c-set","(keynam, valnam=None, data=None, dattype=None)",""],["set","TkClipboard","classes/TkClipboard.html#method-i-set","(data, keys=nil)",""],["set","TkClipboard","classes/TkClipboard.html#method-c-set","(data, keys=nil)",""],["set","TkPalette","classes/TkPalette.html#method-c-set","(*args)",""],["set","TkTextMark","classes/TkTextMark.html#method-i-set","(where)",""],["set","TkTextMark","classes/TkTextMark.html#method-i-set","(where)",""],["setAttribute","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-setAttribute","(arg0, arg1)","<p>VOID setAttribute set the string value of an attribute by name\n\n<pre><code>BSTR arg0 --- name [IN]\nVARIANT arg1 --- ...</code></pre>\n"],["setAttributeNode","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-setAttributeNode","(arg0)","<p>IXMLDOMAttribute setAttributeNode set the specified attribute on the\nelement\n\n<pre><code>IXMLDOMAttribute arg0 --- ...</code></pre>\n"],["setColor","Object","classes/Object.html#method-i-setColor","(w,button,name,options)",""],["setColor_helper","Object","classes/Object.html#method-i-setColor_helper","(w, options, color)",""],["setHeight","Object","classes/Object.html#method-i-setHeight","(w, height)",""],["setNamedItem","IXMLDOMNamedNodeMap","classes/IXMLDOMNamedNodeMap.html#method-i-setNamedItem","(arg0)","<p>IXMLDOMNode setNamedItem set item by name\n\n<pre><code>IXMLDOMNode arg0 --- newItem [IN]</code></pre>\n"],["setPalette","TkPalette","classes/TkPalette.html#method-c-setPalette","(*args)",""],["setRequestHeader","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-setRequestHeader","(arg0, arg1)","<p>VOID setRequestHeader Add HTTP request header\n\n<pre><code>BSTR arg0 --- bstrHeader [IN]\nBSTR arg1 --- bstrValue [IN]</code></pre>\n"],["setRequestHeader","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-setRequestHeader","(arg0, arg1)","<p>VOID setRequestHeader Add HTTP request header\n\n<pre><code>BSTR arg0 --- bstrHeader [IN]\nBSTR arg1 --- bstrValue [IN]</code></pre>\n"],["setState","Object","classes/Object.html#method-i-setState","(root, value, *excepts)","<p>Helper procedure for the top checkbutton\n"],["setTheme","Object","classes/Object.html#method-i-setTheme","(theme)",""],["setWidth","Object","classes/Object.html#method-i-setWidth","(w, width)",""],["set_arg_names","Rake::Task","classes/Rake/Task.html#method-i-set_arg_names","(args)","<p>Set the names of the arguments for this task. <code>args</code> should be\nan array of symbols, one for each argument …\n"],["set_attributes","URI::LDAP","classes/URI/LDAP.html#method-i-set_attributes","(val)","<p>private setter for attributes <code>val</code>\n"],["set_attrs","RDoc::Markup::AttrSpan","classes/RDoc/Markup/AttrSpan.html#method-i-set_attrs","(start, length, bits)","<p>Toggles <code>bits</code> from <code>start</code> to <code>length</code>\n"],["set_attrs","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-i-set_attrs","(var)",""],["set_backtrace","Exception","classes/Exception.html#method-i-set_backtrace","(p1)","<p>Sets the backtrace information associated with <em>exc</em>. The argument\nmust be an array of <code>String</code> objects in …\n"],["set_backtrace","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-set_backtrace","(array)",""],["set_bgerror_handler","MultiTkIp","classes/MultiTkIp.html#method-i-set_bgerror_handler","(cmd = Proc.new, slave = nil, &b)",""],["set_bgerror_handler","MultiTkIp","classes/MultiTkIp.html#method-i-set_bgerror_handler","(cmd = Proc.new, slave = nil, &b)",""],["set_bgerror_handler","MultiTkIp","classes/MultiTkIp.html#method-i-set_bgerror_handler","(cmd = Proc.new, slave = nil, &b)",""],["set_bgerror_handler","MultiTkIp","classes/MultiTkIp.html#method-i-set_bgerror_handler","(cmd = Proc.new, slave = nil, &b)",""],["set_bool","TkVariable","classes/TkVariable.html#method-i-set_bool","(val)",""],["set_bool","TkVariable","classes/TkVariable.html#method-i-set_bool","(val)",""],["set_bool_element","TkVariable","classes/TkVariable.html#method-i-set_bool_element","(idxs, val)",""],["set_bool_element","TkVariable","classes/TkVariable.html#method-i-set_bool_element","(idxs, val)",""],["set_bool_element_type","TkVariable","classes/TkVariable.html#method-i-set_bool_element_type","(idxs, val)",""],["set_bool_element_type","TkVariable","classes/TkVariable.html#method-i-set_bool_element_type","(idxs, val)",""],["set_bool_type","TkVariable","classes/TkVariable.html#method-i-set_bool_type","(val)",""],["set_bool_type","TkVariable","classes/TkVariable.html#method-i-set_bool_type","(val)",""],["set_callback","DL","classes/DL.html#method-i-set_callback","(ty, argc, &cbp)",""],["set_callback","TkTimer","classes/TkTimer.html#method-i-set_callback","(sleep, args=nil)",""],["set_callback","TkTimer","classes/TkTimer.html#method-i-set_callback","(sleep, args=nil)",""],["set_callback_internal","DL","classes/DL.html#method-i-set_callback_internal","(proc_entry, addr_entry, argc, ty, abi = nil, &cbp)",""],["set_canvas","Tk::Iwidgets::Canvasprintbox","classes/Tk/Iwidgets/Canvasprintbox.html#method-i-set_canvas","(win)",""],["set_canvas","Tk::Iwidgets::Canvasprintdialog","classes/Tk/Iwidgets/Canvasprintdialog.html#method-i-set_canvas","(win)",""],["set_cb_error","MultiTkIp","classes/MultiTkIp.html#method-i-set_cb_error","(cmd = Proc.new)",""],["set_cb_error","MultiTkIp","classes/MultiTkIp.html#method-i-set_cb_error","(cmd = Proc.new)",""],["set_cb_error","MultiTkIp","classes/MultiTkIp.html#method-i-set_cb_error","(cmd = Proc.new)",""],["set_cb_error","MultiTkIp","classes/MultiTkIp.html#method-i-set_cb_error","(cmd = Proc.new)",""],["set_cbreak","Object","classes/Object.html#method-i-set_cbreak","(on)",""],["set_cdecl_callback","DL","classes/DL.html#method-i-set_cdecl_callback","(ty, argc, &cbp)",""],["set_close_on_exec","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-set_close_on_exec","(io)","<p>Sets the close on exec flag for <code>io</code>\n"],["set_col","Tk::TkTable","classes/Tk/TkTable.html#method-i-set_col","(*pairs)",""],["set_color","Tk::BWidget::SelectColor","classes/Tk/BWidget/SelectColor.html#method-c-set_color","(idx, color)",""],["set_config","Tk::Tcllib::KHIM","classes/Tk/Tcllib/KHIM.html#method-c-set_config","(*args)",""],["set_content_type","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-set_content_type","(type, params = {})","<p>Sets the content type in an HTTP header. The <code>type</code> should be a\nfull HTTP content type, e.g. “text/html”. …\n"],["set_ctypes","DL::CStructEntity","classes/DL/CStructEntity.html#method-i-set_ctypes","(types)",""],["set_ctypes","DL::CUnionEntity","classes/DL/CUnionEntity.html#method-i-set_ctypes","(types)",""],["set_current_section","RDoc::Context","classes/RDoc/Context.html#method-i-set_current_section","(title, comment)","<p>Sets the current section to a section with <code>title</code>.  See also\n#add_section\n"],["set_cursor","Tk::BWidget::DropSite","classes/Tk/BWidget/DropSite.html#method-c-set_cursor","(cursor)",""],["set_data","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-set_data","(win, fmt=nil, cmd=nil)",""],["set_debug_output","Net::HTTP","classes/Net/HTTP.html#method-i-set_debug_output","(output)","<p><strong>WARNING</strong> This method opens a serious security hole. Never\nuse this method in production code.\n<p>Sets an output …\n"],["set_debug_output","Net::HTTP","classes/Net/HTTP.html#method-i-set_debug_output","(output)","<p><strong>WARNING</strong> This method opens a serious security hole. Never\nuse this method in production code.\n<p>Sets an output …\n"],["set_debug_output","Net::POP3","classes/Net/POP3.html#method-i-set_debug_output","(arg)","<p><strong>WARNING</strong>: This method causes a serious security hole. Use\nthis method only for debugging.\n<p>Set an output …\n"],["set_debug_output","Net::POP3","classes/Net/POP3.html#method-i-set_debug_output","(arg)","<p><strong>WARNING</strong>: This method causes a serious security hole. Use\nthis method only for debugging.\n<p>Set an output …\n"],["set_debug_output","Net::POP3","classes/Net/POP3.html#method-i-set_debug_output","(arg)","<p><strong>WARNING</strong>: This method causes a serious security hole. Use\nthis method only for debugging.\n<p>Set an output …\n"],["set_debug_output","Net::POP3","classes/Net/POP3.html#method-i-set_debug_output","(arg)","<p><strong>WARNING</strong>: This method causes a serious security hole. Use\nthis method only for debugging.\n<p>Set an output …\n"],["set_debug_output","Net::SMTP","classes/Net/SMTP.html#method-i-set_debug_output","(arg)",""],["set_debug_output","Net::SMTP","classes/Net/SMTP.html#method-i-set_debug_output","(arg)",""],["set_default","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-set_default","(p1)",""],["set_default","TkBgError","classes/TkBgError.html#method-c-set_default","()",""],["set_default_element_value_type","TkVariable","classes/TkVariable.html#method-i-set_default_element_value_type","(idxs, type)",""],["set_default_element_value_type","TkVariable","classes/TkVariable.html#method-i-set_default_element_value_type","(idxs, type)",""],["set_default_handler","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-i-set_default_handler","(&handler)",""],["set_default_paths","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-set_default_paths","()",""],["set_default_value","TkVariable","classes/TkVariable.html#method-i-set_default_value","(val)",""],["set_default_value","TkVariable","classes/TkVariable.html#method-i-set_default_value","(val)",""],["set_default_value_type","TkVariable","classes/TkVariable.html#method-i-set_default_value_type","(type)",""],["set_default_value_type","TkVariable","classes/TkVariable.html#method-i-set_default_value_type","(type)",""],["set_delay","Knights_Tour","classes/Knights_Tour.html#method-i-set_delay","(new)",""],["set_dictionary","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>. This method is\navailable just only after Zlib::Deflate.new …\n"],["set_dictionary","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>.  This method is\navailable just only after a Zlib::NeedDict …\n"],["set_dn","URI::LDAP","classes/URI/LDAP.html#method-i-set_dn","(val)","<p>private setter for dn <code>val</code>\n"],["set_drag","Tk::BWidget::DragSite","classes/Tk/BWidget/DragSite.html#method-c-set_drag","(path, subpath, initcmd, endcmd, force=None)",""],["set_drop","Tk::BWidget::DropSite","classes/Tk/BWidget/DropSite.html#method-c-set_drop","(path, subpath, dropover, drop, force=None)",""],["set_element_value","TkVariable","classes/TkVariable.html#method-i-set_element_value","(idxs, val)",""],["set_element_value","TkVariable","classes/TkVariable.html#method-i-set_element_value","(idxs, val)",""],["set_element_value_type","TkVariable","classes/TkVariable.html#method-i-set_element_value_type","(idxs, val)",""],["set_element_value_type","TkVariable","classes/TkVariable.html#method-i-set_element_value_type","(idxs, val)",""],["set_encoding","ARGF","classes/ARGF.html#method-i-set_encoding","(*args)","<p>If single argument is specified, strings read from ARGF are tagged with the\nencoding specified.\n<p>If two …\n"],["set_encoding","IO","classes/IO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>If single argument is specified, read string from io is tagged with the\nencoding specified.  If encoding …\n"],["set_encoding","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-set_encoding","(string)","<p>Sets the encoding of <code>string</code> based on the magic comment\n"],["set_encoding","StringIO","classes/StringIO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>Specify the encoding of the StringIO as <em>ext_enc</em>. Use the default\nexternal encoding if <em>ext_enc</em> is nil. …\n"],["set_eoutvar","ERB","classes/ERB.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Can be used to set <em>eoutvar</em> as described in ERB#new.  It&#39;s\nprobably easier to just use the constructor …\n"],["set_eoutvar","RDoc::ERBIO","classes/RDoc/ERBIO.html#method-i-set_eoutvar","(compiler, io_variable)","<p>Instructs <code>compiler</code> how to write to <code>io_variable</code>\n"],["set_error","GetoptLong","classes/GetoptLong.html#method-i-set_error","(type, message)","<p>Set an error (a protected method).\n"],["set_error","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-set_error","(ex, backtrace=false)","<p>Creates an error page for exception <code>ex</code> with an optional\n<code>backtrace</code>\n"],["set_eventloop_tick","MultiTkIp","classes/MultiTkIp.html#method-i-set_eventloop_tick","(tick)",""],["set_eventloop_tick","MultiTkIp","classes/MultiTkIp.html#method-i-set_eventloop_tick","(tick)",""],["set_eventloop_tick","MultiTkIp","classes/MultiTkIp.html#method-i-set_eventloop_tick","(tick)",""],["set_eventloop_tick","MultiTkIp","classes/MultiTkIp.html#method-i-set_eventloop_tick","(tick)",""],["set_eventloop_tick","RemoteTkIp","classes/RemoteTkIp.html#method-i-set_eventloop_tick","(*args)",""],["set_eventloop_tick","TclTkIp","classes/TclTkIp.html#method-i-set_eventloop_tick","(p1)",""],["set_eventloop_tick","TclTkLib","classes/TclTkLib.html#method-c-set_eventloop_tick","(p1)",""],["set_eventloop_tick","TclTkLib","classes/TclTkLib.html#method-i-set_eventloop_tick","(tick)","<p>def mainloop_abort_on_exception\n\n<pre><code>MultiTkIp.mainloop_abort_on_exception</code></pre>\n<p>end def mainloop_abort_on_exception …\n"],["set_eventloop_weight","MultiTkIp","classes/MultiTkIp.html#method-i-set_eventloop_weight","(loop_max, no_event_tick)",""],["set_eventloop_weight","MultiTkIp","classes/MultiTkIp.html#method-i-set_eventloop_weight","(loop_max, no_event_tick)",""],["set_eventloop_weight","MultiTkIp","classes/MultiTkIp.html#method-i-set_eventloop_weight","(loop_max, no_event_tick)",""],["set_eventloop_weight","MultiTkIp","classes/MultiTkIp.html#method-i-set_eventloop_weight","(loop_max, no_event_tick)",""],["set_eventloop_weight","RemoteTkIp","classes/RemoteTkIp.html#method-i-set_eventloop_weight","(*args)",""],["set_eventloop_weight","TclTkIp","classes/TclTkIp.html#method-i-set_eventloop_weight","(p1, p2)",""],["set_eventloop_weight","TclTkLib","classes/TclTkLib.html#method-i-set_eventloop_weight","(loop_max, no_event_tick)",""],["set_eventloop_weight","TclTkLib","classes/TclTkLib.html#method-c-set_eventloop_weight","(p1, p2)",""],["set_eventloop_window_mode","TclTkLib","classes/TclTkLib.html#method-c-set_eventloop_window_mode","(p1)",""],["set_extensions","URI::LDAP","classes/URI/LDAP.html#method-i-set_extensions","(val)","<p>private setter for extensions <code>val</code>\n"],["set_filter","URI::LDAP","classes/URI/LDAP.html#method-i-set_filter","(val)","<p>private setter for filter <code>val</code>\n"],["set_focus","Tk::BWidget::ButtonBox","classes/Tk/BWidget/ButtonBox.html#method-i-set_focus","(idx)",""],["set_focus","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-set_focus","(idx)",""],["set_focus","Tk::BWidget::Label","classes/Tk/BWidget/Label.html#method-i-set_focus","()",""],["set_focus","Tk::Menu","classes/Tk/Menu.html#method-i-set_focus","()",""],["set_for","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-set_for","(target, title=\"Font\")",""],["set_form","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-set_form","(params, enctype='application/x-www-form-urlencoded', formopt={})","<p>Set a HTML form data set. <code>params</code> is the form data set; it is\nan Array of Arrays or a Hash +enctype is …\n"],["set_form_data","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-set_form_data","(params, sep = '&')","<p>Set header fields and a body from HTML form data. <code>params</code>\nshould be an Array of Arrays or a Hash containing …\n"],["set_fragment","URI::Generic","classes/URI/Generic.html#method-i-set_fragment","(v)","<p>protected setter for the fragment component <code>v</code>\n<p>see also URI::Generic.fragment=\n"],["set_generator","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-set_generator","(p1, p2, p3)","<p>See the OpenSSL documentation for EC_GROUP_set_generator()\n"],["set_get_line_procs","Tracer","classes/Tracer.html#method-c-set_get_line_procs","(file_name, p = proc)","<p>Register an event handler <code>p</code> which is called everytime a line\nin <code>file_name</code> is executed.\n<p>Example:\n\n<pre><code>Tracer.set_get_line_procs(&quot;example.rb&quot;, ...</code></pre>\n"],["set_handler","TkBgError","classes/TkBgError.html#method-c-set_handler","(hdlr = Proc.new)",""],["set_hands","Clock","classes/Clock.html#method-i-set_hands","(hh, mm, ss)",""],["set_headers","URI::MailTo","classes/URI/MailTo.html#method-i-set_headers","(v)","<p>private setter for headers <code>v</code>\n"],["set_height","Tk::TkTable","classes/Tk/TkTable.html#method-i-set_height","(*pairs)",""],["set_host","URI::Generic","classes/URI/Generic.html#method-i-set_host","(v)","<p>protected setter for the host component <code>v</code>\n<p>see also URI::Generic.host=\n"],["set_index_value","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-set_index_value","(idx)",""],["set_input","RubyLex","classes/RubyLex.html#method-i-set_input","(io, p = nil, &block)","<p>io functions\n"],["set_interval","TkRTTimer","classes/TkRTTimer.html#method-i-set_interval","(interval)",""],["set_interval","TkTimer","classes/TkTimer.html#method-i-set_interval","(interval)",""],["set_interval","TkTimer","classes/TkTimer.html#method-i-set_interval","(interval)",""],["set_label","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-set_label","(val, str, *args)",""],["set_label_constrain","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-set_label_constrain","(val, str, *args)",""],["set_last_thread","DEBUGGER__","classes/DEBUGGER__.html#method-i-set_last_thread","(th)",""],["set_last_thread","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-set_last_thread","(th)",""],["set_last_value","IRB::Context","classes/IRB/Context.html#method-i-set_last_value","(value)",""],["set_lhs","Tk::Iwidgets::Disjointlistbox","classes/Tk/Iwidgets/Disjointlistbox.html#method-i-set_lhs","(*items)",""],["set_limit","MultiTkIp","classes/MultiTkIp.html#method-i-set_limit","(limit_type, slave = '', opts = {})",""],["set_limit","MultiTkIp","classes/MultiTkIp.html#method-c-set_limit","(limit_type, slave = '', opts = {})",""],["set_limit","MultiTkIp","classes/MultiTkIp.html#method-i-set_limit","(limit_type, slave = '', opts = {})",""],["set_limit","MultiTkIp","classes/MultiTkIp.html#method-i-set_limit","(limit_type, slave = '', opts = {})",""],["set_limit","MultiTkIp","classes/MultiTkIp.html#method-i-set_limit","(limit_type, slave = '', opts = {})",""],["set_limit","MultiTkIp","classes/MultiTkIp.html#method-c-set_limit","(limit_type, slave = '', opts = {})",""],["set_limit","MultiTkIp","classes/MultiTkIp.html#method-c-set_limit","(limit_type, slave = '', opts = {})",""],["set_limit","MultiTkIp","classes/MultiTkIp.html#method-c-set_limit","(limit_type, slave = '', opts = {})",""],["set_list","TkVariable","classes/TkVariable.html#method-i-set_list","(val)",""],["set_list","TkVariable","classes/TkVariable.html#method-i-set_list","(val)",""],["set_list_element","TkVariable","classes/TkVariable.html#method-i-set_list_element","(idxs, val)",""],["set_list_element","TkVariable","classes/TkVariable.html#method-i-set_list_element","(idxs, val)",""],["set_list_element_type","TkVariable","classes/TkVariable.html#method-i-set_list_element_type","(idxs, val)",""],["set_list_element_type","TkVariable","classes/TkVariable.html#method-i-set_list_element_type","(idxs, val)",""],["set_list_type","TkVariable","classes/TkVariable.html#method-i-set_list_type","(val)",""],["set_list_type","TkVariable","classes/TkVariable.html#method-i-set_list_type","(val)",""],["set_log","Logger::Application","classes/Logger/Application.html#method-i-set_log","(logdev, shift_age = 0, shift_size = 1024000)","<p>Sets the log device for this application.  See <code>Logger.new</code> for\nan explanation of the arguments.\n"],["set_mark","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-set_mark","(mark, index)",""],["set_max_block_time","TclTkIp","classes/TclTkIp.html#method-i-set_max_block_time","(p1)",""],["set_max_block_time","TclTkLib","classes/TclTkLib.html#method-c-set_max_block_time","(p1)",""],["set_menustate","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-set_menustate","(tag, state)",""],["set_msg","Object","classes/Object.html#method-i-set_msg","(x, y, bhelp, parent)","\n<pre><code># CASE1 : command takes no arguemnt\nbh = Tk::RbWidget::BalloonHelp.new(sb, :interval=&gt;500,\n          ...\n</code></pre>\n"],["set_next_callback","TkRTTimer","classes/TkRTTimer.html#method-i-set_next_callback","(args)",""],["set_next_callback","TkTimer","classes/TkTimer.html#method-i-set_next_callback","(args)",""],["set_next_callback","TkTimer","classes/TkTimer.html#method-i-set_next_callback","(args)",""],["set_next_element","RSS::Element","classes/RSS/Element.html#method-i-set_next_element","(tag_name, next_element)",""],["set_no_event_wait","MultiTkIp","classes/MultiTkIp.html#method-i-set_no_event_wait","(tick)",""],["set_no_event_wait","MultiTkIp","classes/MultiTkIp.html#method-i-set_no_event_wait","(tick)",""],["set_no_event_wait","MultiTkIp","classes/MultiTkIp.html#method-i-set_no_event_wait","(tick)",""],["set_no_event_wait","MultiTkIp","classes/MultiTkIp.html#method-i-set_no_event_wait","(tick)",""],["set_no_event_wait","RemoteTkIp","classes/RemoteTkIp.html#method-i-set_no_event_wait","(*args)",""],["set_no_event_wait","TclTkIp","classes/TclTkIp.html#method-i-set_no_event_wait","(p1)",""],["set_no_event_wait","TclTkLib","classes/TclTkLib.html#method-c-set_no_event_wait","(p1)",""],["set_no_event_wait","TclTkLib","classes/TclTkLib.html#method-i-set_no_event_wait","(tick)",""],["set_non_blocking","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-set_non_blocking","(io)","<p>Sets IO operations on <code>io</code> to be non-blocking\n"],["set_numeric","TkVariable","classes/TkVariable.html#method-i-set_numeric","(val)",""],["set_numeric","TkVariable","classes/TkVariable.html#method-i-set_numeric","(val)",""],["set_numeric_element","TkVariable","classes/TkVariable.html#method-i-set_numeric_element","(idxs, val)",""],["set_numeric_element","TkVariable","classes/TkVariable.html#method-i-set_numeric_element","(idxs, val)",""],["set_numeric_element_type","TkVariable","classes/TkVariable.html#method-i-set_numeric_element_type","(idxs, val)",""],["set_numeric_element_type","TkVariable","classes/TkVariable.html#method-i-set_numeric_element_type","(idxs, val)",""],["set_numeric_type","TkVariable","classes/TkVariable.html#method-i-set_numeric_type","(val)",""],["set_numeric_type","TkVariable","classes/TkVariable.html#method-i-set_numeric_type","(val)",""],["set_numlist","TkVariable","classes/TkVariable.html#method-i-set_numlist","(val)",""],["set_numlist","TkVariable","classes/TkVariable.html#method-i-set_numlist","(val)",""],["set_numlist_element","TkVariable","classes/TkVariable.html#method-i-set_numlist_element","(idxs, val)",""],["set_numlist_element","TkVariable","classes/TkVariable.html#method-i-set_numlist_element","(idxs, val)",""],["set_numlist_element_type","TkVariable","classes/TkVariable.html#method-i-set_numlist_element_type","(idxs, val)",""],["set_numlist_element_type","TkVariable","classes/TkVariable.html#method-i-set_numlist_element_type","(idxs, val)",""],["set_numlist_type","TkVariable","classes/TkVariable.html#method-i-set_numlist_type","(val)",""],["set_numlist_type","TkVariable","classes/TkVariable.html#method-i-set_numlist_type","(val)",""],["set_on_display","TkClipboard","classes/TkClipboard.html#method-c-set_on_display","(win, data, keys=nil)",""],["set_opaque","URI::Generic","classes/URI/Generic.html#method-i-set_opaque","(v)","<p>protected setter for the opaque component <code>v</code>\n<p>see also URI::Generic.opaque=\n"],["set_operation","Tk::BWidget::DropSite","classes/Tk/BWidget/DropSite.html#method-c-set_operation","(op)",""],["set_option","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-set_option","(opt, eq)",""],["set_option","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-set_option","(win, option, value)",""],["set_options","GetoptLong","classes/GetoptLong.html#method-i-set_options","(*arguments)","<p>Set options. Takes the same argument as GetoptLong.new.\n<p>Raises a RuntimeError if option processing has …\n"],["set_owner","TkSelection","classes/TkSelection.html#method-i-set_owner","(keys=nil)",""],["set_owner","TkSelection","classes/TkSelection.html#method-c-set_owner","(win, keys=nil)",""],["set_owner","TkSelection","classes/TkSelection.html#method-c-set_owner","(win, keys=nil)",""],["set_owner","TkSelection","classes/TkSelection.html#method-i-set_owner","(keys=nil)",""],["set_params","Cal","classes/Cal.html#method-i-set_params","()",""],["set_params","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-set_params","(params={})",""],["set_parser","XMLRPC::ParserWriterChooseMixin","classes/XMLRPC/ParserWriterChooseMixin.html#method-i-set_parser","(parser)",""],["set_passwd","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code>\nto <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code>\nto <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::UserDB","classes/WEBrick/HTTPAuth/UserDB.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in <code>realm</code> with <code>user</code> and\n<code>password</code> for the auth_type of this database.\n"],["set_password","URI::Generic","classes/URI/Generic.html#method-i-set_password","(v)","<p>protected setter for the password component <code>v</code>\n<p>see also URI::Generic.password=\n"],["set_path","URI::FTP","classes/URI/FTP.html#method-i-set_path","(v)",""],["set_path","URI::Generic","classes/URI/Generic.html#method-i-set_path","(v)","<p>protected setter for the path component <code>v</code>\n<p>see also URI::Generic.path=\n"],["set_port","URI::Generic","classes/URI/Generic.html#method-i-set_port","(v)","<p>protected setter for the port component <code>v</code>\n<p>see also URI::Generic.port=\n"],["set_procedure","TkVariable","classes/TkVariable.html#method-i-set_procedure","(cmd)",""],["set_procedure","TkVariable","classes/TkVariable.html#method-i-set_procedure","(cmd)",""],["set_procedure_element","TkVariable","classes/TkVariable.html#method-i-set_procedure_element","(idxs, cmd)",""],["set_procedure_element","TkVariable","classes/TkVariable.html#method-i-set_procedure_element","(idxs, cmd)",""],["set_procedure_element_type","TkVariable","classes/TkVariable.html#method-i-set_procedure_element_type","(idxs, cmd)",""],["set_procedure_element_type","TkVariable","classes/TkVariable.html#method-i-set_procedure_element_type","(idxs, cmd)",""],["set_procedure_type","TkVariable","classes/TkVariable.html#method-i-set_procedure_type","(cmd)",""],["set_procedure_type","TkVariable","classes/TkVariable.html#method-i-set_procedure_type","(cmd)",""],["set_procs","TkTimer","classes/TkTimer.html#method-i-set_procs","(interval, loop_exec, *procs)",""],["set_procs","TkTimer","classes/TkTimer.html#method-i-set_procs","(interval, loop_exec, *procs)",""],["set_prompt","RubyLex","classes/RubyLex.html#method-i-set_prompt","(p = nil, &block)",""],["set_query","URI::Generic","classes/URI/Generic.html#method-i-set_query","(v)","<p>protected setter for the query component <code>v</code>\n<p>see also URI::Generic.query=\n"],["set_range","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-set_range","(r, e = nil)","<p>Sets the HTTP Range: header. Accepts either a Range object as a single\nargument, or a beginning index …\n"],["set_redirect","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-set_redirect","(status, url)","<p>Redirects to <code>url</code> with a WEBrick::HTTPStatus::Redirect\n<code>status</code>.\n<p>Example:\n\n<pre><code>res.set_redirect WEBrick::HTTPStatus::TemporaryRedirect</code></pre>\n"],["set_registry","URI::Generic","classes/URI/Generic.html#method-i-set_registry","(v)","<p>protected setter for the registry component <code>v</code>\n<p>see also URI::Generic.registry=\n"],["set_resolver","Object::Syck::Emitter","classes/Object/Syck/Emitter.html#method-i-set_resolver","(p1)","<p>YAML::Syck::Emitter#set_resolver\n"],["set_resolver","Object::Syck::Parser","classes/Object/Syck/Parser.html#method-i-set_resolver","(p1)","<p>YAML::Syck::Parser#set_resolver\n"],["set_rhs","Tk::Iwidgets::Disjointlistbox","classes/Tk/Iwidgets/Disjointlistbox.html#method-i-set_rhs","(*items)",""],["set_row","Tk::TkTable","classes/Tk/TkTable.html#method-i-set_row","(*pairs)",""],["set_safe_level","MultiTkIp","classes/MultiTkIp.html#method-i-set_safe_level","(safe)",""],["set_safe_level","MultiTkIp","classes/MultiTkIp.html#method-c-set_safe_level","(safe)",""],["set_safe_level","MultiTkIp","classes/MultiTkIp.html#method-c-set_safe_level","(safe)",""],["set_safe_level","MultiTkIp","classes/MultiTkIp.html#method-i-set_safe_level","(safe)",""],["set_safe_level","MultiTkIp","classes/MultiTkIp.html#method-c-set_safe_level","(safe)",""],["set_safe_level","MultiTkIp","classes/MultiTkIp.html#method-i-set_safe_level","(safe)",""],["set_safe_level","MultiTkIp","classes/MultiTkIp.html#method-i-set_safe_level","(safe)",""],["set_safe_level","MultiTkIp","classes/MultiTkIp.html#method-c-set_safe_level","(safe)",""],["set_sc","RubyVM::Instruction","classes/RubyVM/Instruction.html#method-i-set_sc","()",""],["set_scheme","URI::Generic","classes/URI/Generic.html#method-i-set_scheme","(v)","<p>protected setter for the scheme component <code>v</code>\n<p>see also URI::Generic.scheme=\n"],["set_scope","URI::LDAP","classes/URI/LDAP.html#method-i-set_scope","(val)","<p>private setter for scope <code>val</code>\n"],["set_screen_size","Readline","classes/Readline.html#method-c-set_screen_size","(p1, p2)","<p>Set terminal size to <code>rows</code> and <code>columns</code>.\n<p>See GNU Readline&#39;s rl_set_screen_size function.\n<p>Raises NotImplementedError …\n"],["set_scrollbarwidth","Tk::ScrollbarComposite","classes/Tk/ScrollbarComposite.html#method-i-set_scrollbarwidth","(width)",""],["set_service_hook","XMLRPC::BasicServer","classes/XMLRPC/BasicServer.html#method-i-set_service_hook","(&handler)",""],["set_size","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-set_size","(new_value)",""],["set_socket","Net::FTP","classes/Net/FTP.html#method-i-set_socket","(sock, get_greeting = true)","<p>WRITEME or make private\n"],["set_sockopt","DRb::DRbUNIXSocket","classes/DRb/DRbUNIXSocket.html#method-i-set_sockopt","(soc)",""],["set_spans","Tk::TkTable","classes/Tk/TkTable.html#method-i-set_spans","(*pairs)",""],["set_start_proc","TkTimer","classes/TkTimer.html#method-i-set_start_proc","(sleep=nil, init_proc=nil, *init_args, &b)",""],["set_start_proc","TkTimer","classes/TkTimer.html#method-i-set_start_proc","(sleep=nil, init_proc=nil, *init_args, &b)",""],["set_stdcall_callback","DL","classes/DL.html#method-i-set_stdcall_callback","(ty, argc, &cbp)",""],["set_string","TkVariable","classes/TkVariable.html#method-i-set_string","(val)",""],["set_string","TkVariable","classes/TkVariable.html#method-i-set_string","(val)",""],["set_string_element","TkVariable","classes/TkVariable.html#method-i-set_string_element","(idxs, val)",""],["set_string_element","TkVariable","classes/TkVariable.html#method-i-set_string_element","(idxs, val)",""],["set_string_element_type","TkVariable","classes/TkVariable.html#method-i-set_string_element_type","(idxs, val)",""],["set_string_element_type","TkVariable","classes/TkVariable.html#method-i-set_string_element_type","(idxs, val)",""],["set_string_type","TkVariable","classes/TkVariable.html#method-i-set_string_type","(val)",""],["set_string_type","TkVariable","classes/TkVariable.html#method-i-set_string_type","(val)",""],["set_suspend","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-set_suspend","()",""],["set_symbol","TkVariable","classes/TkVariable.html#method-i-set_symbol","(val)",""],["set_symbol","TkVariable","classes/TkVariable.html#method-i-set_symbol","(val)",""],["set_symbol_element","TkVariable","classes/TkVariable.html#method-i-set_symbol_element","(idxs, val)",""],["set_symbol_element","TkVariable","classes/TkVariable.html#method-i-set_symbol_element","(idxs, val)",""],["set_symbol_element_type","TkVariable","classes/TkVariable.html#method-i-set_symbol_element_type","(idxs, val)",""],["set_symbol_element_type","TkVariable","classes/TkVariable.html#method-i-set_symbol_element_type","(idxs, val)",""],["set_symbol_type","TkVariable","classes/TkVariable.html#method-i-set_symbol_type","(val)",""],["set_symbol_type","TkVariable","classes/TkVariable.html#method-i-set_symbol_type","(val)",""],["set_tag","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-set_tag","(val, str, *args)",""],["set_tag_constrain","Tk::Vu::Dial","classes/Tk/Vu/Dial.html#method-i-set_tag_constrain","(val, str, *args)",""],["set_textborderwidth","TkTextFrame","classes/TkTextFrame.html#method-i-set_textborderwidth","(width)","<p>get/set borderwidth of text widget\n"],["set_theme","Tk::Tile","classes/Tk/Tile.html#method-c-set_theme","(theme)",""],["set_theme","Tk::Tile","classes/Tk/Tile.html#method-c-set_theme","(theme)",""],["set_theme","Tk::Tile","classes/Tk/Tile.html#method-c-set_theme","(theme)",""],["set_to","URI::MailTo","classes/URI/MailTo.html#method-i-set_to","(v)","<p>private setter for to <code>v</code>\n"],["set_to_above","TkcTag","classes/TkcTag.html#method-i-set_to_above","(target)",""],["set_to_all","TkcTag","classes/TkcTag.html#method-i-set_to_all","()",""],["set_to_below","TkcTag","classes/TkcTag.html#method-i-set_to_below","(target)",""],["set_to_closest","TkcTag","classes/TkcTag.html#method-i-set_to_closest","(x, y, halo=None, start=None)",""],["set_to_enclosed","TkcTag","classes/TkcTag.html#method-i-set_to_enclosed","(x1, y1, x2, y2)",""],["set_to_infinity!","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-set_to_infinity-21","()",""],["set_to_overlapping","TkcTag","classes/TkcTag.html#method-i-set_to_overlapping","(x1, y1, x2, y2)",""],["set_to_withtag","TkcTag","classes/TkcTag.html#method-i-set_to_withtag","(target)",""],["set_topic","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-set_topic","(topic)",""],["set_trace","DEBUGGER__","classes/DEBUGGER__.html#method-i-set_trace","( arg )",""],["set_trace","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-set_trace","(arg)",""],["set_trace_all","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-set_trace_all","(arg)",""],["set_trace_func","Kernel","classes/Kernel.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> as the handler for tracing, or disables tracing\nif the parameter is <code>nil</code>. <em>proc</em> takes …\n"],["set_trace_func","Thread","classes/Thread.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> on <em>thr</em> as the handler for tracing, or\ndisables tracing if the parameter is <code>nil</code>. See …\n"],["set_translation","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-set_translation","(locale, src_str, trans_str=None, enc='utf-8')",""],["set_translation","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-set_translation","(locale, src_str, trans_str=None, enc='utf-8')",""],["set_translation","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-set_translation","(locale, src_str, trans_str=None, enc='utf-8')",""],["set_translation","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-set_translation","(locale, src_str, trans_str=None, enc='utf-8')",""],["set_translation_list","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-set_translation_list","(locale, trans_list, enc='utf-8')",""],["set_translation_list","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-set_translation_list","(locale, trans_list, enc='utf-8')",""],["set_translation_list","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-set_translation_list","(locale, trans_list, enc='utf-8')",""],["set_translation_list","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-set_translation_list","(locale, trans_list, enc='utf-8')",""],["set_transparency","TkPhotoImage","classes/TkPhotoImage.html#method-i-set_transparency","(x, y, state)","<p>Makes the pixel at (x,y) transparent if <code>state</code> is true, and\nmakes that pixel opaque otherwise.\n"],["set_transparency","TkPhotoImage","classes/TkPhotoImage.html#method-i-set_transparency","(x, y, state)","<p>Makes the pixel at (x,y) transparent if <code>state</code> is true, and\nmakes that pixel opaque otherwise.\n"],["set_typecode","URI::FTP","classes/URI/FTP.html#method-i-set_typecode","(v)","<p>private setter for the typecode <code>v</code>\n<p>see also URI::FTP.typecode=\n"],["set_update_proc","Tk::Tcllib::CText","classes/Tk/Tcllib/CText.html#method-i-set_update_proc","(cmd=Proc.new)",""],["set_user","URI::Generic","classes/URI/Generic.html#method-i-set_user","(v)","<p>protected setter for the user component <code>v</code>\n<p>see also URI::Generic.user=\n"],["set_userinfo","URI::Generic","classes/URI/Generic.html#method-i-set_userinfo","(user, password = nil)","<p>protect setter for the <code>user</code> component, and\n<code>password</code> if available. (with validation)\n<p>see also URI::Generic.userinfo= …\n"],["set_valid_byte_pattern","Object","classes/Object.html#method-i-set_valid_byte_pattern","(encoding, pattern_or_label)",""],["set_valid_ip","XMLRPC::WEBrickServlet","classes/XMLRPC/WEBrickServlet.html#method-i-set_valid_ip","(*ip_addr)",""],["set_value","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-set_value","(idx)",""],["set_value","Tk::RadioButton","classes/Tk/RadioButton.html#method-i-set_value","(val)",""],["set_value","Tk::RadioButton","classes/Tk/RadioButton.html#method-i-set_value","(val)",""],["set_value","TkVariable","classes/TkVariable.html#method-i-set_value","(val)",""],["set_value","TkVariable","classes/TkVariable.html#method-i-set_value","(val)",""],["set_value_by_index","Tk::BWidget::SpinBox","classes/Tk/BWidget/SpinBox.html#method-i-set_value_by_index","(idx)",""],["set_value_type","TkVariable","classes/TkVariable.html#method-i-set_value_type","(val)",""],["set_value_type","TkVariable","classes/TkVariable.html#method-i-set_value_type","(val)",""],["set_variable","TkVariable","classes/TkVariable.html#method-i-set_variable","(var)",""],["set_variable","TkVariable","classes/TkVariable.html#method-i-set_variable","(var)",""],["set_variable_element","TkVariable","classes/TkVariable.html#method-i-set_variable_element","(idxs, var)",""],["set_variable_element","TkVariable","classes/TkVariable.html#method-i-set_variable_element","(idxs, var)",""],["set_variable_element_type","TkVariable","classes/TkVariable.html#method-i-set_variable_element_type","(idxs, var)",""],["set_variable_element_type","TkVariable","classes/TkVariable.html#method-i-set_variable_element_type","(idxs, var)",""],["set_variable_type","TkVariable","classes/TkVariable.html#method-i-set_variable_type","(var)",""],["set_variable_type","TkVariable","classes/TkVariable.html#method-i-set_variable_type","(var)",""],["set_visibility_for","RDoc::Context","classes/RDoc/Context.html#method-i-set_visibility_for","(methods, visibility, singleton = false)","<p>Given an array <code>methods</code> of method names, set the visibility of\neach to <code>visibility</code>\n"],["set_widget","ScrolledWindow","classes/ScrolledWindow.html#method-i-set_widget","(w)",""],["set_widget","ScrolledWindow","classes/ScrolledWindow.html#method-i-set_widget","(w)",""],["set_widget","Tk::BWidget::ScrolledWindow","classes/Tk/BWidget/ScrolledWindow.html#method-i-set_widget","(win)",""],["set_widget","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-i-set_widget","(widget)",""],["set_widget","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-set_widget","(widget)","<p>def get_frame\n\n<pre><code>window(tk_send(&#39;getframe&#39;))</code></pre>\n<p>end\n"],["set_widget","Tk::Tcllib::Widget::PanelFrame","classes/Tk/Tcllib/Widget/PanelFrame.html#method-i-set_widget","(widget)","<p>def get_frame\n\n<pre><code>window(tk_send(&#39;getframe&#39;))</code></pre>\n<p>end\n"],["set_width","Tk::TkTable","classes/Tk/TkTable.html#method-i-set_width","(*pairs)",""],["set_window","Tk::Winico","classes/Tk/Winico.html#method-i-set_window","(win_id, *opts)",""],["set_window","TkVariable","classes/TkVariable.html#method-i-set_window","(win)",""],["set_window","TkVariable","classes/TkVariable.html#method-i-set_window","(win)",""],["set_window_element","TkVariable","classes/TkVariable.html#method-i-set_window_element","(idxs, win)",""],["set_window_element","TkVariable","classes/TkVariable.html#method-i-set_window_element","(idxs, win)",""],["set_window_element_type","TkVariable","classes/TkVariable.html#method-i-set_window_element_type","(idxs, win)",""],["set_window_element_type","TkVariable","classes/TkVariable.html#method-i-set_window_element_type","(idxs, win)",""],["set_window_type","TkVariable","classes/TkVariable.html#method-i-set_window_type","(win)",""],["set_window_type","TkVariable","classes/TkVariable.html#method-i-set_window_type","(win)",""],["set_writer","XMLRPC::ParserWriterChooseMixin","classes/XMLRPC/ParserWriterChooseMixin.html#method-i-set_writer","(writer)",""],["set_zoom_pan","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-set_zoom_pan","(w)",""],["set_zoom_pan","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-set_zoom_pan","()",""],["setacl","Net::IMAP","classes/Net/IMAP.html#method-i-setacl","(mailbox, user, rights)","<p>Sends the SETACL command along with <code>mailbox</code>, <code>user</code>\nand the <code>rights</code> that user is to have on that mailbox. …\n"],["setbyte","String","classes/String.html#method-i-setbyte","(p1, p2)","<p>modifies the <em>index</em>th byte as <em>int</em>.\n"],["setegid","Process::Sys","classes/Process/Sys.html#method-c-setegid","(p1)","<p>Set the effective group ID of the calling process to <em>integer</em>.  Not\navailable on all platforms.\n"],["seteuid","Process::Sys","classes/Process/Sys.html#method-c-seteuid","(p1)","<p>Set the effective user ID of the calling process to <em>integer</em>.  Not\navailable on all platforms.\n"],["setgid","Process::Sys","classes/Process/Sys.html#method-c-setgid","(p1)","<p>Set the group ID of the current process to <em>integer</em>. Not available\non all platforms.\n"],["setgid?","File","classes/File.html#method-c-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n"],["setgid?","File::Stat","classes/File/Stat.html#method-i-setgid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-group-id permission\nbit set, <code>false</code> if it doesn&#39;t or if the operating …\n"],["setgid?","FileTest","classes/FileTest.html#method-i-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n"],["setgid?","Pathname","classes/Pathname.html#method-i-setgid-3F","()","<p>See <code>FileTest.setgid?</code>.\n"],["setgrent","Etc","classes/Etc.html#method-c-setgrent","()","<p>Resets the process of reading the /etc/group file, so that the next call to\ngetgrent will return the …\n"],["sethelp","Tk::BWidget::DynamicHelp","classes/Tk/BWidget/DynamicHelp.html#method-c-sethelp","(path, subpath, force=None)",""],["setpgid","Process","classes/Process.html#method-c-setpgid","(p1, p2)","<p>Sets the process group ID of <em>pid</em> (0 indicates this process) to\n<em>integer</em>. Not available on all platforms. …\n"],["setpgrp","Process","classes/Process.html#method-c-setpgrp","()","<p>Equivalent to <code>setpgid(0,0)</code>. Not available on all platforms.\n"],["setpiece","Object","classes/Object.html#method-i-setpiece","(a,pos)",""],["setpos","Curses","classes/Curses.html#method-c-setpos","(p1, p2)","<p>A setter for the position of the cursor, using coordinates <code>x</code>\nand <code>y</code>\n"],["setpos","Curses::Window","classes/Curses/Window.html#method-i-setpos","(p1, p2)","<p>A setter for the position of the cursor in the current window, using\ncoordinates <code>x</code> and <code>y</code>\n"],["setpriority","Process","classes/Process.html#method-c-setpriority","(p1, p2, p3)","<p>See <code>Process#getpriority</code>.\n\n<pre><code>Process.setpriority(Process::PRIO_USER, 0, 19)      #=&gt; 0\nProcess.setpriority(Process::PRIO_PROCESS, ...\n</code></pre>\n"],["setproperty","WIN32OLE","classes/WIN32OLE.html#method-i-setproperty","(*args)","<p>Sets property of OLE object. When you want to set property with argument,\nyou can use this method.\n\n<pre><code>excel ...</code></pre>\n"],["setpwent","Etc","classes/Etc.html#method-c-setpwent","()","<p>Resets the process of reading the /etc/passwd file, so that the next call\nto getpwent will return the …\n"],["setquota","Net::IMAP","classes/Net/IMAP.html#method-i-setquota","(mailbox, quota)","<p>Sends a SETQUOTA command along with the specified <code>mailbox</code> and\n<code>quota</code>.  If <code>quota</code> is nil, then quota will …\n"],["setregid","Process::Sys","classes/Process/Sys.html#method-c-setregid","(p1, p2)","<p>Sets the (integer) real and/or effective group IDs of the current process\nto <em>rid</em> and <em>eid</em>, respectively. …\n"],["setresgid","Process::Sys","classes/Process/Sys.html#method-c-setresgid","(p1, p2, p3)","<p>Sets the (integer) real, effective, and saved user IDs of the current\nprocess to <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setresuid","Process::Sys","classes/Process/Sys.html#method-c-setresuid","(p1, p2, p3)","<p>Sets the (integer) real, effective, and saved user IDs of the current\nprocess to <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setreuid","Process::Sys","classes/Process/Sys.html#method-c-setreuid","(p1, p2)","<p>Sets the (integer) real and/or effective user IDs of the current process to\n<em>rid</em> and <em>eid</em>, respectively. …\n"],["setrgid","Process::Sys","classes/Process/Sys.html#method-c-setrgid","(p1)","<p>Set the real group ID of the calling process to <em>integer</em>. Not\navailable on all platforms.\n"],["setrlimit","Process","classes/Process.html#method-c-setrlimit","(p1, p2, p3 = v3)","<p>Sets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["setruid","Process::Sys","classes/Process/Sys.html#method-c-setruid","(p1)","<p>Set the real user ID of the calling process to <em>integer</em>. Not\navailable on all platforms.\n"],["setscrreg","Curses","classes/Curses.html#method-c-setscrreg","(p1, p2)","<p>Set a software scrolling region in a window. <code>top</code> and\n<code>bottom</code> are lines numbers of the margin.\n<p>If this option …\n"],["setscrreg","Curses::Window","classes/Curses/Window.html#method-i-setscrreg","(p1, p2)","<p>Set a software scrolling region in a window. <code>top</code> and\n<code>bottom</code> are lines numbers of the margin.\n<p>If this option …\n"],["setselection","TkTree","classes/TkTree.html#method-i-setselection","(itempath)",""],["setsid","Process","classes/Process.html#method-c-setsid","()","<p>Establishes this process as a new session and process group leader, with no\ncontrolling tty. Returns …\n"],["setsockopt","BasicSocket","classes/BasicSocket.html#method-i-setsockopt","(p1, p2, p3)","<p>Sets a socket option. These are protocol and system specific, see your\nlocal system documentation for …\n"],["setter","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-setter","(uri, tag_name)","<p>return the setter for the uri, tag_name pair, or nil.\n"],["setuid","Process::Sys","classes/Process/Sys.html#method-c-setuid","(p1)","<p>Set the user ID of the current process to <em>integer</em>. Not available\non all platforms.\n"],["setuid?","File","classes/File.html#method-c-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n"],["setuid?","File::Stat","classes/File/Stat.html#method-i-setuid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-user-id permission\nbit set, <code>false</code> if it doesn&#39;t or if the operating …\n"],["setuid?","FileTest","classes/FileTest.html#method-i-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n"],["setuid?","Pathname","classes/Pathname.html#method-i-setuid-3F","()","<p>See <code>FileTest.setuid?</code>.\n"],["setup","IRB","classes/IRB.html#method-c-setup","(ap_path)","<p>initialize config\n"],["setup","Object","classes/Object.html#method-i-setup","(options = \"\", *long_options)",""],["setup","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-setup","()","<p>This method is called automatically when a new SSLSocket is created.\nNormally you do not need to call …\n"],["setup","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup_certificate","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_certificate","()",""],["setup_for_macosx_framework","Object","classes/Object.html#method-i-setup_for_macosx_framework","(tclver, tkver)",""],["setup_generator","RDoc::Options","classes/RDoc/Options.html#method-i-setup_generator","(generator_name = @generator_name)","<p>Set up an output generator for the named <code>generator_name</code>.\n<p>If the found generator responds to :setup_options …\n"],["setup_header","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-setup_header","()","<p>Sets up the headers for sending\n"],["setup_maker","RSS::Atom::Entry","classes/RSS/Atom/Entry.html#method-i-setup_maker","(maker)",""],["setup_maker","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-setup_maker","(maker)",""],["setup_maker","RSS::SetupMaker","classes/RSS/SetupMaker.html#method-i-setup_maker","(maker)",""],["setup_maker","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-i-setup_maker","(maker)",""],["setup_maker_elements","RSS::Rss","classes/RSS/Rss.html#method-i-setup_maker_elements","(maker)",""],["setup_output_dir","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-setup_output_dir","(dir, force)","<p>Create an output dir if it doesn&#39;t exist. If it does exist, but\ndoesn&#39;t contain the flag file …\n"],["setup_pager","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-setup_pager","()","<p>Sets up a pager program to pass output through.  Tries the RI_PAGER and\nPAGER environment variables followed …\n"],["setup_params","WEBrick::AccessLog","classes/WEBrick/AccessLog.html#method-i-setup_params","(config, req, res)","<p>This format specification is a subset of mod_log_config of Apache:\n<p>%a &mdash; Remote IP address\n<p>%b &mdash; Total response …\n"],["setup_rdoc","Gem::DocManager","classes/Gem/DocManager.html#method-i-setup_rdoc","()",""],["setup_ssl_context","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_ssl_context","()",""],["setup_ssl_context","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-setup_ssl_context","(config)",""],["setup_webrick","DRb::HTTP0::Server","classes/DRb/HTTP0/Server.html#method-i-setup_webrick","(uri)",""],["setwidget","ScrolledWindow","classes/ScrolledWindow.html#method-i-setwidget","(w)",""],["setwidget","ScrolledWindow","classes/ScrolledWindow.html#method-i-setwidget","(w)",""],["sexp","Ripper","classes/Ripper.html#method-c-sexp","(src, filename = '-', lineno = 1)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. Returns more readable tree\nrather than Ripper.sexp_raw …\n"],["sexp_raw","Ripper","classes/Ripper.html#method-c-sexp_raw","(src, filename = '-', lineno = 1)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. This method is for mainly\ndevelopper use.\n\n<pre><code>require &#39;ripper&#39; ...\n</code></pre>\n\n"],["sfork","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-sfork","(command, &block)","<p>simple fork\n"],["sh","FileUtils","classes/FileUtils.html#method-i-sh","(*cmd, &block)","<p>Run the system command <code>cmd</code>. If multiple arguments are given\nthe command is not run with the shell (same …\n"],["shade","Tk::Tcllib::Widget::Ruler","classes/Tk/Tcllib/Widget/Ruler.html#method-i-shade","(org, dest, frac)",""],["shape_bounds","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-i-shape_bounds","(kind=nil)",""],["shape_get","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-i-shape_get","(kind=nil)",""],["shape_offset","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-i-shape_offset","(x, y, kind=nil)",""],["shape_set","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-i-shape_set","(*args)",""],["shape_update","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-i-shape_update","(op, *args)",""],["share_stderr","MultiTkIp","classes/MultiTkIp.html#method-i-share_stderr","(dist, src = '')",""],["share_stderr","MultiTkIp","classes/MultiTkIp.html#method-i-share_stderr","(dist, src = '')",""],["share_stderr","MultiTkIp","classes/MultiTkIp.html#method-c-share_stderr","(dist, src = '')",""],["share_stderr","MultiTkIp","classes/MultiTkIp.html#method-i-share_stderr","(dist, src = '')",""],["share_stderr","MultiTkIp","classes/MultiTkIp.html#method-c-share_stderr","(dist, src = '')",""],["share_stderr","MultiTkIp","classes/MultiTkIp.html#method-c-share_stderr","(dist, src = '')",""],["share_stderr","MultiTkIp","classes/MultiTkIp.html#method-c-share_stderr","(dist, src = '')",""],["share_stderr","MultiTkIp","classes/MultiTkIp.html#method-i-share_stderr","(dist, src = '')",""],["share_stdin","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdin","(dist, src = '')",""],["share_stdin","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdin","(dist, src = '')",""],["share_stdin","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdin","(dist, src = '')",""],["share_stdin","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdin","(dist, src = '')",""],["share_stdin","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdin","(dist, src = '')",""],["share_stdin","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdin","(dist, src = '')",""],["share_stdin","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdin","(dist, src = '')",""],["share_stdin","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdin","(dist, src = '')",""],["share_stdio","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdio","(dist, src = '')",""],["share_stdio","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdio","(dist, src = '')",""],["share_stdio","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdio","(dist, src = '')",""],["share_stdio","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdio","(dist, src = '')",""],["share_stdio","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdio","(dist, src = '')",""],["share_stdio","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdio","(dist, src = '')",""],["share_stdio","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdio","(dist, src = '')",""],["share_stdio","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdio","(dist, src = '')",""],["share_stdout","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdout","(dist, src = '')",""],["share_stdout","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdout","(dist, src = '')",""],["share_stdout","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdout","(dist, src = '')",""],["share_stdout","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdout","(dist, src = '')",""],["share_stdout","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdout","(dist, src = '')",""],["share_stdout","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdout","(dist, src = '')",""],["share_stdout","MultiTkIp","classes/MultiTkIp.html#method-i-share_stdout","(dist, src = '')",""],["share_stdout","MultiTkIp","classes/MultiTkIp.html#method-c-share_stdout","(dist, src = '')",""],["shebang","Gem::Installer","classes/Gem/Installer.html#method-i-shebang","(bin_file_name)","<p>Generates a #! line for <code>bin_file_name</code>&#39;s wrapper copying\narguments if necessary.\n"],["shellescape","Shellwords","classes/Shellwords.html#method-c-shellescape","(str)","<p>Escapes a string so that it can be safely used in a Bourne shell command\nline.\n<p>Note that a resulted string …\n"],["shellescape","String","classes/String.html#method-i-shellescape","()","<p>Escapes <code>str</code> so that it can be safely used in a Bourne shell\ncommand line.  See Shellwords::shellescape …\n"],["shelljoin","Array","classes/Array.html#method-i-shelljoin","()","<p>Builds a command line string from an argument list <code>array</code>\njoining all elements escaped for Bourne shell …\n"],["shelljoin","Shellwords","classes/Shellwords.html#method-c-shelljoin","(array)","<p>Builds a command line string from an argument list <code>array</code>\njoining all elements escaped for Bourne shell …\n"],["shellsplit","Shellwords","classes/Shellwords.html#method-c-shellsplit","(line)","<p>Splits a string into an array of tokens in the same way the UNIX Bourne\nshell does.\n\n<pre><code>argv = Shellwords.split(&#39;here ...</code></pre>\n"],["shellsplit","String","classes/String.html#method-i-shellsplit","()","<p>Splits <code>str</code> into an array of tokens in the same way the UNIX\nBourne shell does.  See Shellwords::shellsplit …\n"],["shellwords","Shellwords","classes/Shellwords.html#method-c-shellwords","(line)",""],["shield_path","Tk::BLT::Busy","classes/Tk/BLT/Busy.html#method-c-shield_path","(win)",""],["shield_path","Tk::BLT::Busy::Shield","classes/Tk/BLT/Busy/Shield.html#method-c-shield_path","(win)",""],["shift","Array","classes/Array.html#method-i-shift","(*args)","<p>Returns the first element of <code>self</code> and removes it (shifting all\nother elements down by one). Returns  …\n"],["shift","CSV","classes/CSV.html#method-i-shift","()","<p>The primary read method for wrapped Strings and IOs, a single row is pulled\nfrom the data source, parsed …\n"],["shift","DBM","classes/DBM.html#method-i-shift","()","<p>Removes a [key, value] pair from the database, and returns it. If the\ndatabase is empty, returns nil. …\n"],["shift","ENV","classes/ENV.html#method-c-shift","()","<p>Removes an environment variable name-value pair from ENV and returns it as\nan Array.  Returns <code>nil</code> if …\n"],["shift","GDBM","classes/GDBM.html#method-i-shift","()","<p>Removes a key-value-pair from this database and returns it as a two-item\narray [ <em>key</em>, <em>value</em> ]. Returns …\n"],["shift","Hash","classes/Hash.html#method-i-shift","()","<p>Removes a key-value pair from <em>hsh</em> and returns it as the two-item\narray <code>[</code> <em>key, value</em> <code>]</code>, or the hash&#39;s\n…\n"],["shift","Queue","classes/Queue.html#method-i-shift","(non_block=false)","<p>Alias of pop\n"],["shift","SDBM","classes/SDBM.html#method-i-shift","()",""],["shift","SizedQueue","classes/SizedQueue.html#method-i-shift","(*args)","<p>Alias of pop\n"],["shift","YAML::DBM","classes/YAML/DBM.html#method-i-shift","()","<p>Removes a [key, value] pair from the database, and returns it. If the\ndatabase is empty, returns <code>nil</code> …\n"],["shorten","String","classes/String.html#method-i-shorten","( len = 120 )","<p>From tdiary.rb\n"],["shortest_abbreviation","Object","classes/Object.html#method-i-shortest_abbreviation","(s='', m=callable_methods)",""],["show","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-show","(*tags)",""],["show","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-show","()",""],["show","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-show","(idx)",""],["show","Tk::Iwidgets::Calendar","classes/Tk/Iwidgets/Calendar.html#method-i-show","(date)",""],["show","Tk::Iwidgets::Datefield","classes/Tk/Iwidgets/Datefield.html#method-i-show","(date=None)",""],["show","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-show","(idx)",""],["show","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-show","(idx)",""],["show","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-show","(name)",""],["show","Tk::Iwidgets::Spindate","classes/Tk/Iwidgets/Spindate.html#method-i-show","(date=None)",""],["show","Tk::Iwidgets::Spintime","classes/Tk/Iwidgets/Spintime.html#method-i-show","(date=None)",""],["show","Tk::Iwidgets::Timefield","classes/Tk/Iwidgets/Timefield.html#method-i-show","(time=None)",""],["show","Tk::Iwidgets::Watch","classes/Tk/Iwidgets/Watch.html#method-i-show","(time=None)",""],["show","Tk::RbWidget::BalloonHelp","classes/Tk/RbWidget/BalloonHelp.html#method-i-show","()",""],["show","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-i-show","()",""],["show","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-c-show","(*args)",""],["show","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-show","(file, keys=nil)",""],["show","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-show","()",""],["show","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-c-show","(*args)",""],["show","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-i-show","()",""],["show","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-i-show","()",""],["show","Tk::Tcllib::Widget::ScreenRuler","classes/Tk/Tcllib/Widget/ScreenRuler.html#method-i-show","()",""],["show","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-c-show","(*args)",""],["show","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-i-show","()",""],["show","TkBgError","classes/TkBgError.html#method-c-show","(message)",""],["show","TkConsole","classes/TkConsole.html#method-c-show","()",""],["show","TkDialog","classes/TkDialog.html#method-c-show","(*args)",""],["show","TkDialogObj","classes/TkDialogObj.html#method-c-show","(*args)",""],["show","TkDialogObj","classes/TkDialogObj.html#method-c-show","(*args)",""],["show","TkDialogObj","classes/TkDialogObj.html#method-i-show","()",""],["show","TkDialogObj","classes/TkDialogObj.html#method-i-show","()",""],["show","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-show","()",""],["show","TkWarning","classes/TkWarning.html#method-c-show","(*args)",""],["show","TkWarningObj","classes/TkWarningObj.html#method-i-show","(mes = nil)",""],["show","TkWarningObj","classes/TkWarningObj.html#method-i-show","(mes = nil)",""],["showHelp","Object","classes/Object.html#method-i-showHelp","()",""],["showHelp","Tk::Tcllib::KHIM","classes/Tk/Tcllib/KHIM.html#method-c-showHelp","()",""],["showMessageBox","Object","classes/Object.html#method-i-showMessageBox","(w)",""],["showMessageBox2","Object","classes/Object.html#method-i-showMessageBox2","(w)",""],["showPendulum","PendulumAnimationDemo","classes/PendulumAnimationDemo.html#method-i-showPendulum","(x=nil, y=nil)","<p>This procedure makes the pendulum appear at the correct place on the\ncanvas. If the additional arguments …\n"],["showPhase","PendulumAnimationDemo","classes/PendulumAnimationDemo.html#method-i-showPhase","()","<p>Update the phase-space graph according to the current angle and the rate at\nwhich the angle is changing …\n"],["show_animated_gif","TkImg_demo","classes/TkImg_demo.html#method-i-show_animated_gif","(keys)",""],["show_ctrl","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-show_ctrl","()",""],["show_each_hscr","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-show_each_hscr","()","<p>each hscr\n"],["show_each_hscr","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-show_each_hscr","()","<p>each hscr\n"],["show_help","Gem::Command","classes/Gem/Command.html#method-i-show_help","()","<p>Display the help message for the command.\n"],["show_image","TkImg_demo","classes/TkImg_demo.html#method-i-show_image","(fmt, type, data)",""],["show_lookup_failure","Gem::Command","classes/Gem/Command.html#method-i-show_lookup_failure","(gem_name, version, errors, domain)","<p>Display to the user that a gem couldn&#39;t be found and reasons why\n"],["show_loupe","Object","classes/Object.html#method-i-show_loupe","(setting=nil)",""],["show_message","Object","classes/Object.html#method-i-show_message","(message)",""],["show_mode","TkTextIO","classes/TkTextIO.html#method-i-show_mode","()",""],["show_mode=","TkTextIO","classes/TkTextIO.html#method-i-show_mode-3D","(mode)",""],["show_names","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-show_names","()",""],["show_now","Tk::Iwidgets::Calendar","classes/Tk/Iwidgets/Calendar.html#method-i-show_now","()",""],["show_now","Tk::Iwidgets::Datefield","classes/Tk/Iwidgets/Datefield.html#method-i-show_now","()",""],["show_now","Tk::Iwidgets::Spindate","classes/Tk/Iwidgets/Spindate.html#method-i-show_now","()",""],["show_now","Tk::Iwidgets::Spintime","classes/Tk/Iwidgets/Spintime.html#method-i-show_now","()",""],["show_now","Tk::Iwidgets::Timefield","classes/Tk/Iwidgets/Timefield.html#method-i-show_now","()",""],["show_now","Tk::Iwidgets::Watch","classes/Tk/Iwidgets/Watch.html#method-i-show_now","()",""],["show_owners","Gem::Commands::OwnerCommand","classes/Gem/Commands/OwnerCommand.html#method-i-show_owners","(name)",""],["show_rdoc_for_pattern","Gem::Server","classes/Gem/Server.html#method-i-show_rdoc_for_pattern","(pattern, res)","<p>Returns true and prepares http response, if rdoc for the requested gem name\npattern was found.\n<p>The search …\n"],["show_results","BenchmarkDriver","classes/BenchmarkDriver.html#method-i-show_results","()",""],["show_statusbar","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-show_statusbar","(name)",""],["show_tab","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-show_tab","(idx)",""],["show_tab","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-show_tab","(idx)",""],["show_toolbar","Tk::BWidget::MainFrame","classes/Tk/BWidget/MainFrame.html#method-i-show_toolbar","(idx, mode)",""],["show_topic","Tk::Iwidgets::Hyperhelp","classes/Tk/Iwidgets/Hyperhelp.html#method-i-show_topic","(topic)",""],["show_topic","Tk::Tcllib::ChatWidget","classes/Tk/Tcllib/ChatWidget.html#method-i-show_topic","()",""],["show_version","OptionParser","classes/OptionParser.html#method-i-show_version","(*pkgs)",""],["show_win_hscr","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-show_win_hscr","()","<p>window hscroll\n"],["show_win_hscr","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-show_win_hscr","()","<p>window hscroll\n"],["shuffle","Array","classes/Array.html#method-i-shuffle","(*args)","<p>Returns a new array with elements of this array shuffled.\n\n<pre><code>a = [ 1, 2, 3 ]           #=&gt; [1, 2, 3]\na.shuffle ...\n</code></pre>\n"],["shuffle!","Array","classes/Array.html#method-i-shuffle-21","(*args)","<p>Shuffles elements in <code>self</code> in place. If <code>rng</code> is\ngiven, it will be used as the random number generator. …\n"],["shutdown","BasicSocket","classes/BasicSocket.html#method-i-shutdown","(p1 = v1)","<p>Calls shutdown(2) system call.\n<p>s.shutdown(Socket::SHUT_RD) disallows further read.\n<p>s.shutdown(Socket::SHUT_WR) …\n"],["shutdown","GServer","classes/GServer.html#method-i-shutdown","()","<p>Schedule a shutdown for the server\n"],["shutdown","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-shutdown","()",""],["shutdown","XMLRPC::Server","classes/XMLRPC/Server.html#method-i-shutdown","()",""],["sid_available?","Process::GID","classes/Process/GID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved group ID\nfunctionality.\n"],["sid_available?","Process::UID","classes/Process/UID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved user ID\nfunctionality.\n"],["sieve","Object","classes/Object.html#method-i-sieve","(m)","<p>The Computer Language Shootout shootout.alioth.debian.org/\n<p>contributed by Glenn Parker, March 2005 modified …\n"],["sign","BigDecimal","classes/BigDecimal.html#method-i-sign","()","<p>Returns the sign of the value.\n<p>Returns a positive value if &gt; 0, a negative value if &lt; 0, and a zero\n…\n"],["sign","Gem::Security::Signer","classes/Gem/Security/Signer.html#method-i-sign","(data)","<p>Sign data with given digest algorithm\n"],["sign","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-sign","(p1, p2, p3 = v3, p4 = v4)",""],["sign","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-sign","(p1, p2, p3 = v3, p4 = v4)",""],["sign","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-sign","(p1, p2, p3, p4 = v4, p5 = v5)",""],["sign","OpenSSL::PKey::PKey","classes/OpenSSL/PKey/PKey.html#method-i-sign","(p1, p2)","<p>To sign the <code>String</code> <code>data</code>, <code>digest</code>, an\ninstance of OpenSSL::Digest, must be provided. The return value is …\n"],["sign","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-sign","(p1, p2)",""],["sign_cert","Gem::Security","classes/Gem/Security.html#method-c-sign_cert","(cert, signing_key, signing_cert, opt = {})","<p>Sign the cert cert with @signing_key and @signing_cert, using the digest\nalgorithm opt. Returns the newly …\n"],["sign_in","Gem::GemcutterUtilities","classes/Gem/GemcutterUtilities.html#method-i-sign_in","()",""],["signal","ConditionVariable","classes/ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signal","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signal","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-i-signal","()",""],["signal","Tk::TclX","classes/Tk/TclX.html#method-c-signal","(*args)",""],["signal_handle","IRB::Irb","classes/IRB/Irb.html#method-i-signal_handle","()",""],["signal_restart","Tk::TclX","classes/Tk/TclX.html#method-c-signal_restart","(*args)",""],["signal_status","IRB::Irb","classes/IRB/Irb.html#method-i-signal_status","(status)",""],["signaled?","Process::Status","classes/Process/Status.html#method-i-signaled-3F","()","<p>Returns <code>true</code> if <em>stat</em> terminated because of an\nuncaught signal.\n"],["signature_algorithm","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-signature_algorithm","()",""],["signature_algorithm","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-signature_algorithm","()",""],["signature_algorithm","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-signature_algorithm","()",""],["signed_time","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-i-signed_time","()",""],["signed_value","DL::ValueUtil","classes/DL/ValueUtil.html#method-i-signed_value","(val, ty)",""],["signers","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-signers","()",""],["signo","SignalException","classes/SignalException.html#method-i-signo","()","<p>Returns a signal number.\n"],["simple","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-simple","( value )","<p>Emit a simple, unqouted string\n"],["simplelist","TkComm","classes/TkComm.html#method-c-simplelist","(val, src_enc=true, dst_enc=true)",""],["sin","BigMath","classes/BigMath.html#method-i-sin","(x, prec)","<p>Computes the sine of x to the specified number of digits of precision.\n<p>If x is infinite or NaN, returns …\n"],["sin","CMath","classes/CMath.html#method-c-sin","(z)","<p>returns the sine of <code>z</code>, where <code>z</code> is given in\nradians\n"],["sin","Math","classes/Math.html#method-c-sin","(p1)","<p>Computes the sine of <em>x</em> (expressed in radians). Returns -1..1.\n"],["sin!","CMath","classes/CMath.html#method-c-sin-21","(z)",""],["sine","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-sine","(xy0, amp, freq, opts = {})",""],["single","Syck::BaseEmitter","classes/Syck/BaseEmitter.html#method-i-single","( value )","<p>Emit single-quoted string\n"],["single?","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-single-3F","()",""],["single_delegate","SingleForwardable","classes/SingleForwardable.html#method-i-single_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols. \nThese symbols correspond …\n"],["singleline_format","PrettyPrint","classes/PrettyPrint.html#method-c-singleline_format","(output='', maxwidth=nil, newline=nil, genspace=nil)","<p>This is similar to PrettyPrint::format but the result has no breaks.\n<p><code>maxwidth</code>, <code>newline</code> and <code>genspace</code> are …\n"],["singleline_pp","PP","classes/PP.html#method-c-singleline_pp","(obj, out=$>)","<p>Outputs <code>obj</code> to <code>out</code> like PP.pp but with no indent\nand newline.\n<p>PP.singleline_pp returns <code>out</code>.\n"],["singleton_class","Object","classes/Object.html#method-i-singleton_class","()","<p>Returns the singleton class of <em>obj</em>.  This method creates a new\nsingleton class if <em>obj</em> does not have it. …\n"],["singleton_method_added","Numeric","classes/Numeric.html#method-i-singleton_method_added","(p1)","<p>Trap attempts to add methods to <code>Numeric</code> objects. Always raises\na <code>TypeError</code>\n"],["singleton_methods","Object","classes/Object.html#method-i-singleton_methods","(p1 = v1)","<p>Returns an array of the names of singleton methods for <em>obj</em>. If the\noptional <em>all</em> parameter is true, the …\n"],["singular?","Matrix","classes/Matrix.html#method-i-singular-3F","()","<p>Returns <code>true</code> is this is a singular matrix.\n"],["singular?","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-singular-3F","()","<p>Returns <code>true</code> if <code>U</code>, and hence <code>A</code>, is\nsingular.\n"],["sinh","CMath","classes/CMath.html#method-c-sinh","(z)","<p>returns the hyperbolic sine of <code>z</code>, where <code>z</code> is\ngiven in radians\n"],["sinh","Math","classes/Math.html#method-c-sinh","(p1)","<p>Computes the hyperbolic sine of <em>x</em> (expressed in radians).\n"],["sinh!","CMath","classes/CMath.html#method-c-sinh-21","(z)",""],["site","Net::FTP","classes/Net/FTP.html#method-i-site","(arg)","<p>Issues a SITE command.\n"],["size","Array","classes/Array.html#method-i-size","()",""],["size","Bignum","classes/Bignum.html#method-i-size","()","<p>Returns the number of bytes in the machine representation of <em>big</em>.\n\n<pre><code>(256**10 - 1).size   #=&gt; 12\n(256**20 ...\n</code></pre>\n"],["size","DBM","classes/DBM.html#method-i-size","()","<p>Returns the number of entries in the database.\n"],["size","DL::CPtr","classes/DL/CPtr.html#method-i-size","()","<p>Get the size of this pointer.\n"],["size","DL::CPtr","classes/DL/CPtr.html#method-i-size","()","<p>Get the size of this pointer.\n"],["size","DL::CStructEntity","classes/DL/CStructEntity.html#method-c-size","(types)",""],["size","DL::CUnionEntity","classes/DL/CUnionEntity.html#method-c-size","(types)",""],["size","DL::Packer","classes/DL/Packer.html#method-i-size","()",""],["size","DL::Stack","classes/DL/Stack.html#method-i-size","()",""],["size","Digest::Instance","classes/Digest/Instance.html#method-i-size","()","<p>Returns digest_obj.digest_length().\n"],["size","ENV","classes/ENV.html#method-c-size","()","<p>Returns the number of environment variables.\n"],["size","File","classes/File.html#method-c-size","(p1)","<p>Returns the size of <code>file_name</code>.\n"],["size","File","classes/File.html#method-i-size","()","<p>Returns the size of <em>file</em> in bytes.\n\n<pre><code>File.new(&quot;testfile&quot;).size   #=&gt; 66\n</code></pre>\n"],["size","File::Stat","classes/File/Stat.html#method-i-size","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre><code>File.stat(&quot;testfile&quot;).size   #=&gt; 66\n</code></pre>\n"],["size","FileTest","classes/FileTest.html#method-i-size","(p1)","<p>Returns the size of <code>file_name</code>.\n"],["size","Fixnum","classes/Fixnum.html#method-i-size","()","<p>Returns the number of <em>bytes</em> in the machine representation of a\n<code>Fixnum</code>.\n\n<pre><code>1.size            #=&gt; 4\n-1.size ...\n</code></pre>\n"],["size","GDBM","classes/GDBM.html#method-i-size","()","<p>Returns the number of key-value pairs in this database.\n"],["size","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-size","()",""],["size","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-size","()",""],["size","Hash","classes/Hash.html#method-i-size","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre><code>h = { &quot;d&quot; =&gt; 100, &quot;a&quot; =&gt; 200, &quot;v&quot; =&gt; 300, &quot;e&quot; =&gt; 400 ...\n</code></pre>\n"],["size","IRB::History","classes/IRB/History.html#method-i-size","(size)",""],["size","MatchData","classes/MatchData.html#method-i-size","()","<p>Returns the number of elements in the match array.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...</code></pre>\n"],["size","Net::FTP","classes/Net/FTP.html#method-i-size","(filename)","<p>Returns the size of the given (remote) filename.\n"],["size","Pathname","classes/Pathname.html#method-i-size","()","<p>See <code>FileTest.size</code>.\n"],["size","Queue","classes/Queue.html#method-i-size","()","<p>Alias of length.\n"],["size","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-size","()",""],["size","REXML::Parent","classes/REXML/Parent.html#method-i-size","()","<p>@return the number of children of this parent\n"],["size","REXML::SyncEnumerator","classes/REXML/SyncEnumerator.html#method-i-size","()","<p>Returns the number of enumerated Enumerable objects, i.e. the size of each\nrow.\n"],["size","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-size","()","<p>The number of elements in the tuple.\n"],["size","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-size","()","<p>The size of the tuple.\n"],["size","RubyVM::InstructionsLoader","classes/RubyVM/InstructionsLoader.html#method-i-size","()",""],["size","SDBM","classes/SDBM.html#method-i-size","()",""],["size","Set","classes/Set.html#method-i-size","()","<p>Returns the number of elements.\n"],["size","String","classes/String.html#method-i-size","()","<p>Returns the character length of <em>str</em>.\n"],["size","StringIO","classes/StringIO.html#method-i-size","()","<p>Returns the size of the buffer string.\n"],["size","Struct","classes/Struct.html#method-i-size","()","<p>Returns the number of instance variables.\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</code></pre>\n"],["size","Symbol","classes/Symbol.html#method-i-size","()","<p>Same as <code>sym.to_s.length</code>.\n"],["size","Tempfile","classes/Tempfile.html#method-i-size","()","<p>Returns the size of the temporary file.  As a side effect, the IO buffer is\nflushed before determining …\n"],["size","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-size","()",""],["size","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-size","()",""],["size","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-size","()","<p>listbox methods\n"],["size","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-size","()",""],["size","Tk::Iwidgets::Selectionbox","classes/Tk/Iwidgets/Selectionbox.html#method-i-size","()",""],["size","Tk::Iwidgets::Selectiondialog","classes/Tk/Iwidgets/Selectiondialog.html#method-i-size","()",""],["size","Tk::Listbox","classes/Tk/Listbox.html#method-i-size","()",""],["size","Tk::Tcllib::Tkpiechart::Slice","classes/Tk/Tcllib/Tkpiechart/Slice.html#method-i-size","(share, disp=None)",""],["size","TkGrid","classes/TkGrid.html#method-c-size","(master)",""],["size","TkGrid","classes/TkGrid.html#method-c-size","(master)",""],["size","TkVariable","classes/TkVariable.html#method-i-size","()",""],["size","TkVariable","classes/TkVariable.html#method-i-size","()",""],["size","Vector","classes/Vector.html#method-i-size","()","<p>Returns the number of elements in the vector.\n"],["size=","DL::CPtr","classes/DL/CPtr.html#method-i-size-3D","(p1)","<p>Set the size of this pointer to <code>size</code>\n"],["size=","DL::CPtr","classes/DL/CPtr.html#method-i-size-3D","(p1)","<p>Set the size of this pointer to <code>size</code>\n"],["size=","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-size-3D","(new_value)",""],["size?","File","classes/File.html#method-c-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn&#39;t exist or has\nzero size, the size of the file otherwise.\n"],["size?","File::Stat","classes/File/Stat.html#method-i-size-3F","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre><code>File.stat(&quot;testfile&quot;).size   #=&gt; 66\n</code></pre>\n"],["size?","FileTest","classes/FileTest.html#method-i-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn&#39;t exist or has\nzero size, the size of the file otherwise.\n"],["size?","Pathname","classes/Pathname.html#method-i-size-3F","()","<p>See <code>FileTest.size?</code>.\n"],["size_opt_params","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-size_opt_params","()","<p>Returns the size of optional parameters.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["size_params","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-size_params","()","<p>Returns the size of arguments of the method.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["sizefrom","Tk::Wm","classes/Tk/Wm.html#method-i-sizefrom","(who=TkComm::None)",""],["sizefrom","Tk::Wm","classes/Tk/Wm.html#method-c-sizefrom","(win, who=TkComm::None)",""],["sizeof","DL::Importer","classes/DL/Importer.html#method-i-sizeof","(ty)",""],["sizewindow","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-sizewindow","(*args)",""],["skip","ARGF","classes/ARGF.html#method-i-skip","()","\n<pre><code>Sets the current file to the next file in ARGV. If there aren&#39;t any more\nfiles it has no effect.</code></pre>\n<p>For example: …\n"],["skip","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-skip","(token_type, error = true)","<p>Skips the next token if its type is <code>token_type</code>.\n<p>Optionally raises an error if the next token is not of …\n"],["skip","StringScanner","classes/StringScanner.html#method-i-skip","(p1)","<p>Attempts to skip over the given <code>pattern</code> beginning with the\nscan pointer. If it matches, the scan pointer …\n"],["skip","TkTimer","classes/TkTimer.html#method-i-skip","()",""],["skip","TkTimer","classes/TkTimer.html#method-i-skip","()",""],["skip_blanks?","CSV","classes/CSV.html#method-i-skip_blanks-3F","()","<p>Returns <code>true</code> blank lines are skipped by the parser. See\nCSV::new for details.\n"],["skip_during","Gem::Deprecate","classes/Gem/Deprecate.html#method-c-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["skip_for_variable","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-skip_for_variable","()","<p>skip the var [in] part of a &#39;for&#39; statement\n"],["skip_method","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-skip_method","(container)","<p>Skips the next method in <code>container</code>\n"],["skip_optional_do_after_expression","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-skip_optional_do_after_expression","()","<p>while, until, and for have an optional do\n"],["skip_tkspace","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-skip_tkspace","(skip_nl = true)","<p>Skips whitespace tokens including newlines if <code>skip_nl</code> is true\n"],["skip_tkspace_comment","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-skip_tkspace_comment","(skip_nl = true)","<p>Skip spaces until a comment is found\n"],["skip_until","StringScanner","classes/StringScanner.html#method-i-skip_until","(p1)","<p>Advances the scan pointer until <code>pattern</code> is matched and\nconsumed.  Returns the number of bytes advanced, …\n"],["slanted","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-slanted","(text, width=nil, height=nil, angle=nil)",""],["slave?","MultiTkIp","classes/MultiTkIp.html#method-i-slave-3F","()",""],["slave?","MultiTkIp","classes/MultiTkIp.html#method-i-slave-3F","()",""],["slave?","MultiTkIp","classes/MultiTkIp.html#method-c-slave-3F","()",""],["slave?","MultiTkIp","classes/MultiTkIp.html#method-c-slave-3F","()",""],["slave?","MultiTkIp","classes/MultiTkIp.html#method-c-slave-3F","()",""],["slave?","MultiTkIp","classes/MultiTkIp.html#method-i-slave-3F","()",""],["slave?","MultiTkIp","classes/MultiTkIp.html#method-i-slave-3F","()",""],["slave?","MultiTkIp","classes/MultiTkIp.html#method-c-slave-3F","()",""],["slave_of?","TclTkIp","classes/TclTkIp.html#method-i-slave_of-3F","(p1)","<p>self is slave of master?\n"],["slaves","MultiTkIp","classes/MultiTkIp.html#method-c-slaves","(all = false)",""],["slaves","MultiTkIp","classes/MultiTkIp.html#method-c-slaves","(all = false)",""],["slaves","MultiTkIp","classes/MultiTkIp.html#method-i-slaves","(all = false)",""],["slaves","MultiTkIp","classes/MultiTkIp.html#method-c-slaves","(all = false)",""],["slaves","MultiTkIp","classes/MultiTkIp.html#method-i-slaves","(all = false)",""],["slaves","MultiTkIp","classes/MultiTkIp.html#method-c-slaves","(all = false)",""],["slaves","MultiTkIp","classes/MultiTkIp.html#method-i-slaves","(all = false)",""],["slaves","MultiTkIp","classes/MultiTkIp.html#method-i-slaves","(all = false)",""],["slaves","TkGrid","classes/TkGrid.html#method-c-slaves","(master, keys=nil)",""],["slaves","TkGrid","classes/TkGrid.html#method-c-slaves","(master, keys=nil)",""],["slaves","TkPack","classes/TkPack.html#method-c-slaves","(master)",""],["slaves","TkPack","classes/TkPack.html#method-c-slaves","(master)",""],["slaves","TkPlace","classes/TkPlace.html#method-c-slaves","(master)",""],["slaves","TkPlace","classes/TkPlace.html#method-c-slaves","(master)",""],["sleep","Kernel","classes/Kernel.html#method-i-sleep","(*args)","<p>Suspends the current thread for <em>duration</em> seconds (which may be any\nnumber, including a <code>Float</code> with fractional …\n"],["sleep","Mutex","classes/Mutex.html#method-i-sleep","(p1 = v1)","<p>Releases the lock and sleeps <code>timeout</code> seconds if it is given\nand non-nil or forever.  Raises <code>ThreadError</code> …\n"],["sleep","Mutex_m","classes/Mutex_m.html#method-i-sleep","(timeout = nil)",""],["slice","Array","classes/Array.html#method-i-slice","(p1, p2 = v2)","<p>Element Reference—Returns the element at <em>index</em>, or returns a\nsubarray starting at <em>start</em> and continuing …\n"],["slice","Ripper","classes/Ripper.html#method-c-slice","(src, pattern, n = 0)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and return a string which was matched to\n<code>pattern</code>. <code>pattern</code> should be described …\n"],["slice","String","classes/String.html#method-i-slice","(*args)","<p>Element Reference—If passed a single <code>Fixnum</code>, returns a\nsubstring of one character at that position. …\n"],["slice","Symbol","classes/Symbol.html#method-i-slice","(*args)","<p>Returns <code>sym.to_s[]</code>.\n"],["slice!","Array","classes/Array.html#method-i-slice-21","(p1, p2 = v2)","<p>Deletes the element(s) given by an index (optionally with a length) or by a\nrange. Returns the deleted …\n"],["slice!","String","classes/String.html#method-i-slice-21","(*args)","<p>Deletes the specified portion from <em>str</em>, and returns the portion\ndeleted.\n\n<pre><code>string = &quot;this is a string&quot;\nstring.slice!(2) ...</code></pre>\n"],["slice_ary","TkComm","classes/TkComm.html#method-c-slice_ary","(ary, size)",""],["slice_before","Enumerable","classes/Enumerable.html#method-i-slice_before","(p1 = v1)","\n<pre><code>Creates an enumerator for each chunked elements.\nThe beginnings of chunks are defined by _pattern_ and ...</code></pre>\n"],["snap","Tk::BLT::Barchart","classes/Tk/BLT/Barchart.html#method-i-snap","(output, keys={})",""],["snap","Tk::BLT::Graph","classes/Tk/BLT/Graph.html#method-i-snap","(output, keys={})",""],["snap","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-i-snap","(win)",""],["snap","Tk::BLT::Stripchart","classes/Tk/BLT/Stripchart.html#method-i-snap","(output, keys={})",""],["snap","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-snap","(win, photo)",""],["snap","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-snap","(win, photo)",""],["sockaddr_in","Socket","classes/Socket.html#method-c-sockaddr_in","(p1, p2)","<p>Packs <em>port</em> and <em>host</em> as an AF_INET/AF_INET6 sockaddr\nstring.\n\n<pre><code>Socket.sockaddr_in(80, &quot;127.0.0.1&quot;)\n#=&gt; &quot;\\x02\\x00\\x00P\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; ...\n</code></pre>\n"],["sockaddr_un","Socket","classes/Socket.html#method-c-sockaddr_un","(p1)","<p>Packs <em>path</em> as an AF_UNIX sockaddr string.\n\n<pre><code>Socket.sockaddr_un(&quot;/tmp/sock&quot;) #=&gt; &quot;\\x01\\x00/tmp/sock\\x00\\x00...&quot;\n</code></pre>\n"],["socket?","File","classes/File.html#method-c-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n"],["socket?","File::Stat","classes/File/Stat.html#method-i-socket-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a socket, <code>false</code>\nif it isn&#39;t or if the operating system doesn&#39;t support …\n"],["socket?","FileTest","classes/FileTest.html#method-i-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n"],["socket?","Pathname","classes/Pathname.html#method-i-socket-3F","()","<p>See <code>FileTest.socket?</code>.\n"],["socketpair","Socket","classes/Socket.html#method-c-socketpair","(p1, p2, p3 = v3)","<p>Creates a pair of sockets connected each other.\n<p><em>domain</em> should be a communications domain such as: :INET, …\n"],["socketpair","UNIXSocket","classes/UNIXSocket.html#method-c-socketpair","(p1 = v1, p2 = v2)","<p>Creates a pair of sockets connected each other.\n<p><em>socktype</em> should be a socket type such as: :STREAM, :DGRAM, …\n"],["socktype","Addrinfo","classes/Addrinfo.html#method-i-socktype","()","<p>returns the socket type as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).socktype == Socket::SOCK_STREAM #=&gt; ...\n</code></pre>\n"],["solve","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-solve","(b)","<p>Returns <code>m</code> so that <code>A*m = b</code>, or equivalently so\nthat <code>L*U*m = P*b</code> <code>b</code> can be a Matrix or a Vector\n"],["some_function","Object","classes/Object.html#method-i-some_function","(num)",""],["sort","Array","classes/Array.html#method-i-sort","()","<p>Returns a new array created by sorting <code>self</code>. Comparisons for\nthe sort will be done using the <code>&lt;=&gt;</code> …\n"],["sort","Enumerable","classes/Enumerable.html#method-i-sort","()","<p>Returns an array containing the items in <em>enum</em> sorted, either\naccording to their own <code>&lt;=&gt;</code> method, …\n"],["sort","Net::IMAP","classes/Net/IMAP.html#method-i-sort","(sort_keys, search_keys, charset)","<p>Sends a SORT command to sort messages in the mailbox. Returns an array of\nmessage sequence numbers.  …\n"],["sort","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-sort","(keys={})",""],["sort","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-sort","(*vectors)",""],["sort","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-sort","(*params, &b)",""],["sort","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-sort","(*params, &b)",""],["sort","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-sort","(*params, &b)",""],["sort!","Array","classes/Array.html#method-i-sort-21","()","<p>Sorts <code>self</code>. Comparisons for the sort will be done using the\n<code>&lt;=&gt;</code> operator or using an optional code …\n"],["sort_ascending","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-sort_ascending","()",""],["sort_ascending","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-sort_ascending","()",""],["sort_ascending","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-sort_ascending","()",""],["sort_auto","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-sort_auto","(mode)",""],["sort_auto=","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-sort_auto-3D","(mode)",""],["sort_auto?","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-sort_auto-3F","()",""],["sort_by","Enumerable","classes/Enumerable.html#method-i-sort_by","()","<p>Sorts <em>enum</em> using a set of keys generated by mapping the values in\n<em>enum</em> through the given block.\n<p>If no …\n"],["sort_by","Object","classes/Object.html#method-i-sort_by","(tree, col, direction)","<p>Code to do the sorting of the tree contents when clicked on\n"],["sort_by!","Array","classes/Array.html#method-i-sort_by-21","()","<p>Sorts <code>self</code> in place using a set of keys generated by mapping\nthe values in <code>self</code> through the given block. …\n"],["sort_by_freq","Object","classes/Object.html#method-i-sort_by_freq","( seq,length )",""],["sort_cget","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-sort_cget","(option)",""],["sort_cget_strict","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-sort_cget_strict","(option)",""],["sort_cget_tkstring","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-sort_cget_tkstring","(option)",""],["sort_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-sort_configinfo","(slot=nil)",""],["sort_configure","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-sort_configure","(slot, value=None)",""],["sort_descending","Tk::Iwidgets::Combobox","classes/Tk/Iwidgets/Combobox.html#method-i-sort_descending","()",""],["sort_descending","Tk::Iwidgets::Optionmenu","classes/Tk/Iwidgets/Optionmenu.html#method-i-sort_descending","()",""],["sort_descending","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-sort_descending","()",""],["sort_obj","Gem::Specification","classes/Gem/Specification.html#method-i-sort_obj","()","<p>Returns an object you can use to sort specifications in #sort_by.\n"],["sort_once","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-sort_once","(*tags)",""],["sort_once","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-sort_once","()",""],["sort_once_recurse","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-sort_once_recurse","(*tags)",""],["sort_once_recurse","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-sort_once_recurse","()",""],["sort_reverse","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-sort_reverse","(*vectors)",""],["source","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-i-source","()","<p>Returns a copy of the current <em>source</em> string, that was used to\nconstruct this Parser.\n"],["source","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-source","()",""],["source","Rake::Task","classes/Rake/Task.html#method-i-source","()","<p>First source from a rule (nil if no sources)\n"],["source","Regexp","classes/Regexp.html#method-i-source","()","<p>Returns the original string of the pattern.\n\n<pre><code>/ab+c/ix.source #=&gt; &quot;ab+c&quot;\n</code></pre>\n<p>Note that escape sequences are retained …\n"],["source","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-source","()",""],["source","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-c-source","(name)",""],["source","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-source","()",""],["source","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-source","()",""],["source_configinfo","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-i-source_configinfo","(win, slot=nil)",""],["source_configure","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-i-source_configure","(win, slot, value=None)",""],["source_encoding","Encoding::Converter","classes/Encoding/Converter.html#method-i-source_encoding","()","<p>Returns the source encoding as an Encoding object.\n"],["source_encoding","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding_name","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_encoding_name","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_file","IRB::IrbLoader","classes/IRB/IrbLoader.html#method-i-source_file","(path)",""],["source_handler","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-source_handler","(win, datatype, cmd=Proc.new, *args)",""],["source_handler_info","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-source_handler_info","(win, type)",""],["source_handler_list","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-source_handler_list","(win)",""],["source_index","Gem","classes/Gem.html#method-c-source_index","()","<p>Returns the Gem::SourceIndex of specifications that are in the Gem.path\n"],["source_location","Method","classes/Method.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or\nnil if this method was not …\n"],["source_location","Proc","classes/Proc.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this proc or\n<code>nil</code> if this proc was not defined …\n"],["source_location","UnboundMethod","classes/UnboundMethod.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or\nnil if this method was not …\n"],["source_menu","Tk::MenuClone","classes/Tk/MenuClone.html#method-i-source_menu","()",""],["source_menu","Tk::MenuClone","classes/Tk/MenuClone.html#method-i-source_menu","()",""],["source_names","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-source_names","(pat=None)",""],["source_ole_types","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-source_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["sources","Gem","classes/Gem.html#method-c-sources","()","<p>Returns an Array of sources to fetch remote gems from.  If the sources list\nis empty, attempts to load …\n"],["sources","Rake::Task","classes/Rake/Task.html#method-i-sources","()",""],["sources=","Gem","classes/Gem.html#method-c-sources-3D","(new_sources)","<p>Need to be able to set the sources without calling Gem.sources.replace\nsince that would cause an infinite …\n"],["sp_increase_c_expr","RubyVM::Instruction","classes/RubyVM/Instruction.html#method-i-sp_increase_c_expr","()",""],["space","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space","()","<p>This string is used to insert a space between the tokens in a JSON string.\n"],["space=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space-3D","(p1)","<p>This string is used to insert a space between the tokens in a JSON string.\n"],["space_before","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space_before","()","<p>This string is used to insert a space before the &#39;:&#39; in JSON\nobjects.\n"],["space_before=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space_before-3D","(p1)","<p>This string is used to insert a space before the &#39;:&#39; in JSON\nobjects.\n"],["span","Tk::TkTable","classes/Tk/TkTable.html#method-i-span","(idx)",""],["span_list","Tk::TkTable","classes/Tk/TkTable.html#method-i-span_list","()",""],["spans","Tk::TkTable","classes/Tk/TkTable.html#method-i-spans","()","<p>def set(*pairs) # idx, val, idx, val, …  OR [idx, val], [idx, val], …\n\n<pre><code>if pairs[0].kind_of?(Array) ...</code></pre>\n"],["sparkle","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-sparkle","(oxy, tag)",""],["sparse","Dhasen","classes/Dhasen.html#method-i-sparse","(str, *arg)",""],["spawn","Kernel","classes/Kernel.html#method-i-spawn","(*args)","<p>spawn executes specified command and return its pid.\n<p>This method doesn&#39;t wait for end of the command. …\n"],["spawn","PTY","classes/PTY.html#method-c-spawn","(*args)","<p>Spawns the specified command on a newly allocated pty.\n<p>The command&#39;s controlling tty is set to the …\n"],["spawn","Process","classes/Process.html#method-c-spawn","(*args)","<p>spawn executes specified command and return its pid.\n<p>This method doesn&#39;t wait for end of the command. …\n"],["spec","Gem::Installer","classes/Gem/Installer.html#method-i-spec","()","<p>Lazy accessor for the installer&#39;s spec.\n"],["spec_dir","Gem::Specification","classes/Gem/Specification.html#method-i-spec_dir","()","<p>Returns the full path to the directory containing this spec&#39;s gemspec\nfile. eg: /usr/local/lib/ruby/gems/1.8/specifications …\n"],["spec_file","Gem::Specification","classes/Gem/Specification.html#method-i-spec_file","()","<p>Returns the full path to this spec&#39;s gemspec file. eg:\n/usr/local/lib/ruby/gems/1.8/specifications/mygem-1.0.gemspec …\n"],["spec_name","Gem::Specification","classes/Gem/Specification.html#method-i-spec_name","()","<p>The default name of the gemspec.  See also #file_name\n\n<pre><code>spec.spec_name # =&gt; &quot;example-1.0.gemspec&quot;\n</code></pre>\n"],["spec_path","Gem::Commands::LockCommand","classes/Gem/Commands/LockCommand.html#method-i-spec_path","(gem_full_name)",""],["spec_predecessors","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-spec_predecessors","()","<p>Return a hash of predecessors.  <code>result[spec]</code> is an Array of\ngemspecs that have a dependency satisfied …\n"],["specific?","Gem::Dependency","classes/Gem/Dependency.html#method-i-specific-3F","()","<p>True if the dependency will not always match the latest version.\n"],["specific?","Gem::Requirement","classes/Gem/Requirement.html#method-i-specific-3F","()","<p>True if the requirement will not always match the latest version.\n"],["specific?","Gem::Requirement","classes/Gem/Requirement.html#method-i-specific-3F","()","<p>True if the requirement will not always match the latest version.\n"],["specific_class","Tk::Toplevel","classes/Tk/Toplevel.html#method-i-specific_class","()","<p>def create_self(keys)\n\n<pre><code>if keys and keys != None\n  tk_call_without_enc(&#39;toplevel&#39;, @path, *hash_kv(keys, ...</code></pre>\n"],["specific_extra_args","Gem::Command","classes/Gem/Command.html#method-c-specific_extra_args","(cmd)","<p>Return an array of extra arguments for the command.  The extra arguments\ncome from the gem configuration …\n"],["specific_extra_args_hash","Gem::Command","classes/Gem/Command.html#method-c-specific_extra_args_hash","()","<p>Accessor for the specific extra args hash (self initializing).\n"],["specification","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-specification","(full_name)","<p>The gem specification given a full gem spec name.\n"],["specification","Gem::SourceIndex","classes/Gem/SourceIndex.html#method-i-specification","(full_name)","<p>The gem specification given a full gem spec name.\n"],["specified","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXMLDOMText","classes/IXMLDOMText.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","IXTLRuntime","classes/IXTLRuntime.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specified","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-specified","()","<p>BOOL specified indicates whether node is a default value\n"],["specs","Gem::Server","classes/Gem/Server.html#method-i-specs","(req, res)",""],["spermy_recommendation","Version","classes/Version.html#method-i-spermy_recommendation","()","<p>A recommended version for use with a ~&gt; Requirement.\n"],["spin_month","Spinner_demo","classes/Spinner_demo.html#method-i-spin_month","(step)",""],["spindown","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-spindown","()",""],["spindown","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-spindown","()",""],["spinup","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-spinup","()",""],["spinup","Tk::Spinbox","classes/Tk/Spinbox.html#method-i-spinup","()",""],["split","BigDecimal","classes/BigDecimal.html#method-i-split","()","<p>Splits a BigDecimal number into four parts, returned as an array of values.\n<p>The first value represents …\n"],["split","File","classes/File.html#method-c-split","(p1)","<p>Splits the given string into a directory and a file component and returns\nthem in a two-element array. …\n"],["split","Pathname","classes/Pathname.html#method-i-split","()","<p>See <code>File.split</code>.  Returns the #dirname and the #basename in an\nArray.\n"],["split","Shellwords","classes/Shellwords.html#method-c-split","(line)",""],["split","String","classes/String.html#method-i-split","(p1 = v1, p2 = v2)","<p>Divides <em>str</em> into substrings based on a delimiter, returning an\narray of these substrings.\n<p>If <em>pattern</em> is …\n"],["split","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-split","(container, *args)",""],["split","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-split","(*vectors)",""],["split","URI","classes/URI.html#method-c-split","(uri)","<p>Synopsis\n\n<pre><code>URI::split(uri)</code></pre>\n<p>Args\n"],["split","URI::Parser","classes/URI/Parser.html#method-i-split","(uri)","<p>Returns a split URI against regexp\n"],["splitText","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-splitText","(arg0)","<p>IXMLDOMText splitText split the text node into two text nodes at the\nposition specified\n\n<pre><code>I4 arg0 --- offset ...</code></pre>\n"],["splitText","IXMLDOMText","classes/IXMLDOMText.html#method-i-splitText","(arg0)","<p>IXMLDOMText splitText split the text node into two text nodes at the\nposition specified\n\n<pre><code>I4 arg0 --- offset ...</code></pre>\n"],["split_all","FileUtils","classes/FileUtils.html#method-i-split_all","(path)","<p>Split a file path into individual directory names.\n<p>Example:\n\n<pre><code>split_all(&quot;a/b/c&quot;) =&gt;  [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n</code></pre>\n"],["split_all","Sys","classes/Sys.html#method-i-split_all","(path)","<p>Split a file path into individual directory names.\n<p>For example:\n\n<pre><code>split_all(&quot;a/b/c&quot;) =&gt;  [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n</code></pre>\n"],["split_header_value","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-split_header_value","(str)",""],["split_into_flow","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-split_into_flow","()","<p>Splits the string into chunks by attribute change\n"],["sprintf","Kernel","classes/Kernel.html#method-i-sprintf","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments.  Within the format …\n"],["sqrt","BigDecimal","classes/BigDecimal.html#method-i-sqrt","(p1)","<p>Returns the square root of the value.\n<p>If n is specified, returns at least that many significant digits. …\n"],["sqrt","BigMath","classes/BigMath.html#method-i-sqrt","(x,prec)","<p>Computes the square root of x to the specified number of digits of\nprecision.\n<p>BigDecimal.new(&#39;2&#39;).sqrt(16).to_s …\n"],["sqrt","CMath","classes/CMath.html#method-c-sqrt","(z)","<p>Returns the non-negative square root of Complex.\n\n<pre><code>sqrt(-1)            #=&gt; 0+1.0i\nsqrt(Complex(-1,0)) #=&gt; ...\n</code></pre>\n"],["sqrt","Math","classes/Math.html#method-c-sqrt","(a)","<p>Computes the square root of <code>a</code>.  It makes use of Complex and\nRational to have no rounding errors if possible. …\n"],["sqrt!","CMath","classes/CMath.html#method-c-sqrt-21","(z)",""],["square?","Matrix","classes/Matrix.html#method-i-square-3F","()","<p>Returns <code>true</code> is this is a square matrix.\n"],["squeeze","String","classes/String.html#method-i-squeeze","(*args)","<p>Builds a set of characters from the <em>other_str</em> parameter(s) using\nthe procedure described for <code>String#count</code> …\n"],["squeeze!","String","classes/String.html#method-i-squeeze-21","(*args)","<p>Squeezes <em>str</em> in place, returning either <em>str</em>, or\n<code>nil</code> if no changes were made.\n"],["srand","Kernel","classes/Kernel.html#method-i-srand","(p1 = v1)","<p>Seeds the pseudorandom number generator to the value of <em>number</em>. If\n<em>number</em> is omitted, seeds the generator …\n"],["srand","Random","classes/Random.html#method-c-srand","(p1 = v1)","<p>Seeds the pseudorandom number generator to the value of <em>number</em>. If\n<em>number</em> is omitted, seeds the generator …\n"],["srcText","IXMLDOMParseError","classes/IXMLDOMParseError.html#method-i-srcText","()","<p>BSTR srcText the data where the error occurred\n"],["src_type","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-src_type","()","<p>Returns source class when the OLE class is &#39;Alias&#39;.\n\n<pre><code>tobj =  WIN32OLE_TYPE.new(&#39;Microsoft Office ...</code></pre>\n"],["ssl?","Net::SMTP","classes/Net/SMTP.html#method-i-ssl-3F","()",""],["ssl?","Net::SMTP","classes/Net/SMTP.html#method-i-ssl-3F","()",""],["ssl?","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-ssl-3F","()","<p>Is this an SSL request?\n"],["ssl_available?","Gem","classes/Gem.html#method-i-ssl_available-3F","()","<p>Is SSL (used by the signing commands) available on this platform?\n"],["ssl_context","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-ssl_context","()",""],["ssl_params","Net::POP3","classes/Net/POP3.html#method-c-ssl_params","()","<p>returns the SSL Parameters\n<p>see also POP3.enable_ssl\n"],["ssl_params","Net::POP3","classes/Net/POP3.html#method-c-ssl_params","()","<p>returns the SSL Parameters\n<p>see also POP3.enable_ssl\n"],["ssl_params","Net::POP3","classes/Net/POP3.html#method-c-ssl_params","()","<p>returns the SSL Parameters\n<p>see also POP3.enable_ssl\n"],["ssl_params","Net::POP3","classes/Net/POP3.html#method-c-ssl_params","()","<p>returns the SSL Parameters\n<p>see also POP3.enable_ssl\n"],["ssl_version=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-ssl_version-3D","(p1)","<p>You can get a list of valid versions with OpenSSL::SSL::SSLContext::METHODS\n"],["stack","Cal","classes/Cal.html#method-i-stack","(xs)",""],["stackorder","Tk::Wm","classes/Tk/Wm.html#method-c-stackorder","(win)",""],["stackorder","Tk::Wm","classes/Tk/Wm.html#method-i-stackorder","()",""],["stackorder_is_above","Tk::Wm","classes/Tk/Wm.html#method-i-stackorder_is_above","(target)",""],["stackorder_is_above","Tk::Wm","classes/Tk/Wm.html#method-c-stackorder_is_above","(win, target)",""],["stackorder_is_below","Tk::Wm","classes/Tk/Wm.html#method-i-stackorder_is_below","(target)",""],["stackorder_is_below","Tk::Wm","classes/Tk/Wm.html#method-c-stackorder_is_below","(win, target)",""],["stackorder_isabove","Tk::Wm","classes/Tk/Wm.html#method-c-stackorder_isabove","(win, target)",""],["stackorder_isabove","Tk::Wm","classes/Tk/Wm.html#method-i-stackorder_isabove","(target)",""],["stackorder_isbelow","Tk::Wm","classes/Tk/Wm.html#method-c-stackorder_isbelow","(win, target)",""],["stackorder_isbelow","Tk::Wm","classes/Tk/Wm.html#method-i-stackorder_isbelow","(target)",""],["stand_alone?","REXML::Document","classes/REXML/Document.html#method-i-stand_alone-3F","()","<p>@return the XMLDecl standalone value of this document as a String. If no\nXMLDecl has been set, returns …\n"],["standard_exception_handling","Rake::Application","classes/Rake/Application.html#method-i-standard_exception_handling","()","<p>Provide standard exception handling for the given block.\n"],["standard_exception_handling","Rake::Application","classes/Rake/Application.html#method-i-standard_exception_handling","()","<p>Provide standard exception handling for the given block.\n"],["standard_rake_options","Rake::Application","classes/Rake/Application.html#method-i-standard_rake_options","()","<p>A list of all the standard options used in rake, suitable for passing to\nOptionParser.\n"],["standard_rake_options","Rake::Application","classes/Rake/Application.html#method-i-standard_rake_options","()","<p>A list of all the standard options used in rake, suitable for passing to\nOptionParser.\n"],["standend","Curses","classes/Curses.html#method-c-standend","()","<p>Enables the Normal display (no highlight)\n<p>This is equivalent to Curses.attron(A_NORMAL)\n<p>see also Curses::Window.attrset …\n"],["standend","Curses::Window","classes/Curses/Window.html#method-i-standend","()","<p>Enables the Normal display (no highlight)\n<p>This is equivalent to Curses::Window.attron(A_NORMAL)\n<p>see also …\n"],["standout","Curses","classes/Curses.html#method-c-standout","()","<p>Enables the best highlighting mode of the terminal.\n<p>This is equivalent to Curses:Window.attron(A_STANDOUT) …\n"],["standout","Curses::Window","classes/Curses/Window.html#method-i-standout","()","<p>Enables the best highlighting mode of the terminal.\n<p>This is equivalent to Curses::Window.attron(A_STANDOUT) …\n"],["start","AnimatedTextLabel","classes/AnimatedTextLabel.html#method-i-start","(interval)",""],["start","Coverage","classes/Coverage.html#method-c-start","()","<p>Enables coverage measurement.\n"],["start","Date","classes/Date.html#method-i-start","()","<p>Returns the Julian day number denoting the day of calendar reform.\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).start ...</code></pre>\n"],["start","GC","classes/GC.html#method-c-start","()","<p>Initiates garbage collection, unless manually disabled.\n"],["start","GServer","classes/GServer.html#method-i-start","(maxConnections = -1)","<p>Start the server if it isn&#39;t already running\n<p><code>maxConnections</code> &mdash; override <code>maxConnections</code> given to the constructor. …\n\n"],["start","IRB","classes/IRB.html#method-c-start","(ap_path = nil)","<p>initialize IRB and start TOP_LEVEL irb\n"],["start","Logger::Application","classes/Logger/Application.html#method-i-start","()","<p>Start the application.  Return the status code.\n"],["start","Net::HTTP","classes/Net/HTTP.html#method-c-start","(address, *arg)","<p>Creates a new Net::HTTP object, then additionally opens the TCP connection\nand HTTP session.\n<p>Arguments …\n"],["start","Net::HTTP","classes/Net/HTTP.html#method-i-start","()","<p>Opens a TCP connection and HTTP session.\n<p>When this method is called with a block, it passes the Net::HTTP …\n"],["start","Net::HTTP","classes/Net/HTTP.html#method-c-start","(address, *arg)","<p>Creates a new Net::HTTP object, then additionally opens the TCP connection\nand HTTP session.\n<p>Arguments …\n"],["start","Net::HTTP","classes/Net/HTTP.html#method-i-start","()","<p>Opens a TCP connection and HTTP session.\n<p>When this method is called with a block, it passes the Net::HTTP …\n"],["start","Net::POP3","classes/Net/POP3.html#method-c-start","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Creates a new POP3 object and open the connection.  Equivalent to\n\n<pre><code>Net::POP3.new(address, port, isapop).start(account, ...</code></pre>\n"],["start","Net::POP3","classes/Net/POP3.html#method-i-start","(account, password)","<p>Starts a POP3 session.\n<p>When called with block, gives a POP3 object to the block and closes the\nsession …\n"],["start","Net::POP3","classes/Net/POP3.html#method-i-start","(account, password)","<p>Starts a POP3 session.\n<p>When called with block, gives a POP3 object to the block and closes the\nsession …\n"],["start","Net::POP3","classes/Net/POP3.html#method-c-start","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Creates a new POP3 object and open the connection.  Equivalent to\n\n<pre><code>Net::POP3.new(address, port, isapop).start(account, ...</code></pre>\n"],["start","Net::POP3","classes/Net/POP3.html#method-i-start","(account, password)","<p>Starts a POP3 session.\n<p>When called with block, gives a POP3 object to the block and closes the\nsession …\n"],["start","Net::POP3","classes/Net/POP3.html#method-i-start","(account, password)","<p>Starts a POP3 session.\n<p>When called with block, gives a POP3 object to the block and closes the\nsession …\n"],["start","Net::POP3","classes/Net/POP3.html#method-c-start","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Creates a new POP3 object and open the connection.  Equivalent to\n\n<pre><code>Net::POP3.new(address, port, isapop).start(account, ...</code></pre>\n"],["start","Net::POP3","classes/Net/POP3.html#method-c-start","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Creates a new POP3 object and open the connection.  Equivalent to\n\n<pre><code>Net::POP3.new(address, port, isapop).start(account, ...</code></pre>\n"],["start","Net::SMTP","classes/Net/SMTP.html#method-c-start","(address, port = nil, helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Creates a new Net::SMTP object and connects to the server.\n<p>This method is equivalent to:\n\n<pre><code>Net::SMTP.new(address, ...</code></pre>\n"],["start","Net::SMTP","classes/Net/SMTP.html#method-c-start","(address, port = nil, helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Creates a new Net::SMTP object and connects to the server.\n<p>This method is equivalent to:\n\n<pre><code>Net::SMTP.new(address, ...</code></pre>\n"],["start","Net::SMTP","classes/Net/SMTP.html#method-i-start","(helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Opens a TCP connection and starts the SMTP session.\n<p>Parameters\n<p><code>helo</code> is the <em>HELO</em> <em>domain</em> that you&#39;ll …\n"],["start","Net::SMTP","classes/Net/SMTP.html#method-i-start","(helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Opens a TCP connection and starts the SMTP session.\n<p>Parameters\n<p><code>helo</code> is the <em>HELO</em> <em>domain</em> that you&#39;ll …\n"],["start","Psych::Streaming","classes/Psych/Streaming.html#method-i-start","(encoding = Nodes::Stream::UTF8)","<p>Start streaming using <code>encoding</code>\n"],["start","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-start","(encoding = Nodes::Stream::UTF8)",""],["start","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-start","()",""],["start","Thread","classes/Thread.html#method-c-start","(*args)","<p>Basically the same as <code>Thread::new</code>. However, if class\n<code>Thread</code> is subclassed, then calling <code>start</code> in that\n…\n"],["start","Tk::Tile::TProgressbar","classes/Tk/Tile/TProgressbar.html#method-i-start","(interval=None)","<p>def step=(amount)\n\n<pre><code>tk_send_without_enc(&#39;step&#39;, amount)</code></pre>\n<p>end\n"],["start","Tk::Tile::TProgressbar","classes/Tk/Tile/TProgressbar.html#method-i-start","(interval=None)","<p>def step=(amount)\n\n<pre><code>tk_send_without_enc(&#39;step&#39;, amount)</code></pre>\n<p>end\n"],["start","TkGoldberg_Demo","classes/TkGoldberg_Demo.html#method-i-start","()",""],["start","TkKinput","classes/TkKinput.html#method-c-start","(win, style=None)",""],["start","TkRTTimer","classes/TkRTTimer.html#method-i-start","(*args, &b)",""],["start","TkTimer","classes/TkTimer.html#method-i-start","(*init_args, &b)",""],["start","TkTimer","classes/TkTimer.html#method-c-start","(*args, &b)","<p>class methods\n"],["start","TkTimer","classes/TkTimer.html#method-c-start","(*args, &b)","<p>class methods\n"],["start","TkTimer","classes/TkTimer.html#method-i-start","(*init_args, &b)",""],["start","WEBrick::CGI","classes/WEBrick/CGI.html#method-i-start","(env=ENV, stdin=$stdin, stdout=$stdout)",""],["start","WEBrick::Daemon","classes/WEBrick/Daemon.html#method-c-start","()","<p>Performs the standard operations for daemonizing a process.  Runs a block,\nif given.\n"],["start","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-start","(&block)",""],["start","WEBrick::SimpleServer","classes/WEBrick/SimpleServer.html#method-c-start","()",""],["startElement","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-startElement","(name, attrs)",""],["startElement","XMLRPC::XMLParser::StreamParserMixin","classes/XMLRPC/XMLParser/StreamParserMixin.html#method-i-startElement","(name, attrs=[])",""],["start_accepting","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-i-start_accepting","()","<p>Starts accepting with a reset screen\n"],["start_accepting","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-start_accepting","()","<p>Prepares the visitor for HTML generation\n"],["start_accepting","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-start_accepting","()","<p>Prepares the visitor for text generation\n"],["start_accepting","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-start_accepting","()","<p>Prepares the visitor for gathering tt sections\n"],["start_collecting_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-start_collecting_tokens","()",""],["start_color","Curses","classes/Curses.html#method-c-start_color","()","<p>Initializes the color attributes, for terminals that support it.\n<p>This must be called, in order to use …\n"],["start_doc","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-start_doc","()","<p>Enable capture of documentation unless documentation has been turned off by\n:endoc:\n"],["start_document","Psych::Emitter","classes/Psych/Emitter.html#method-i-start_document","(p1, p2, p3)","<p>Start a document emission with YAML <code>version</code>,\n<code>tags</code>, and an <code>implicit</code> start.\n<p>See Psych::Handler#start_document …\n"],["start_document","Psych::Handler","classes/Psych/Handler.html#method-i-start_document","(version, tag_directives, implicit)","<p>Called when the document starts with the declared <code>version</code>,\n<code>tag_directives</code>, if the document is <code>implicit</code> …\n"],["start_document","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-start_document","(version, tag_directives, implicit)","<p>Handles start_document events with <code>version</code>,\n<code>tag_directives</code>, and <code>implicit</code> styling.\n<p>See Psych::Handler#start_document …\n"],["start_document","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-start_document","()",""],["start_element","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-start_element","(uri, localname, qname, attributes)",""],["start_element?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-start_element-3F","()","<p>Content: [ String tag_name, Hash attributes ]\n"],["start_export","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-start_export","()",""],["start_import","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-start_import","()",""],["start_job","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-start_job","(command = nil)","<p>start a job\n"],["start_mapping","Psych::Emitter","classes/Psych/Emitter.html#method-i-start_mapping","(p1, p2, p3, p4)","<p>Start emitting a YAML map with <code>anchor</code>, <code>tag</code>, an\n<code>implicit</code> start and end, and <code>style</code>.\n<p>See Psych::Handler#start_mapping …\n"],["start_mapping","Psych::Handler","classes/Psych/Handler.html#method-i-start_mapping","(anchor, tag, implicit, style)","<p>Called when a map starts.\n<p><code>anchor</code> is the anchor associated with the map or\n<code>nil</code>. <code>tag</code> is the tag associated …\n"],["start_prefix_mapping","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-start_prefix_mapping","(prefix, uri)",""],["start_profile","Profiler__","classes/Profiler__.html#method-i-start_profile","()",""],["start_random","Object","classes/Object.html#method-i-start_random","()",""],["start_sequence","Psych::Emitter","classes/Psych/Emitter.html#method-i-start_sequence","(p1, p2, p3, p4)","<p>Start emitting a sequence with <code>anchor</code>, a <code>tag</code>,\n<code>implicit</code> sequence start and end, along with\n<code>style</code>.\n<p>See  …\n"],["start_sequence","Psych::Handler","classes/Psych/Handler.html#method-i-start_sequence","(anchor, tag, implicit, style)","<p>Called when a sequence is started.\n<p><code>anchor</code> is the anchor associated with the sequence or nil.\n<code>tag</code> is the …\n"],["start_service","DRb","classes/DRb.html#method-c-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server\n…\n"],["start_stream","Psych::Emitter","classes/Psych/Emitter.html#method-i-start_stream","(p1)","<p>Start a stream emission with <code>encoding</code>\n<p>See Psych::Handler#start_stream\n"],["start_stream","Psych::Handler","classes/Psych/Handler.html#method-i-start_stream","(encoding)","<p>Called with <code>encoding</code> when the YAML stream starts.  This method\nis called once per stream.  A stream may …\n"],["start_stream","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-start_stream","(encoding)",""],["start_with?","String","classes/String.html#method-i-start_with-3F","(*args)","<p>Returns true if <em>str</em> starts with one of the prefixes given.\n\n<pre><code>p &quot;hello&quot;.start_with?(&quot;hell&quot;)              ...</code></pre>\n"],["started?","Net::HTTP","classes/Net/HTTP.html#method-i-started-3F","()","<p>Returns true if the HTTP session has been started.\n"],["started?","Net::HTTP","classes/Net/HTTP.html#method-i-started-3F","()","<p>Returns true if the HTTP session has been started.\n"],["started?","Net::POP3","classes/Net/POP3.html#method-i-started-3F","()","<p><code>true</code> if the POP3 session has started.\n"],["started?","Net::POP3","classes/Net/POP3.html#method-i-started-3F","()","<p><code>true</code> if the POP3 session has started.\n"],["started?","Net::POP3","classes/Net/POP3.html#method-i-started-3F","()","<p><code>true</code> if the POP3 session has started.\n"],["started?","Net::POP3","classes/Net/POP3.html#method-i-started-3F","()","<p><code>true</code> if the POP3 session has started.\n"],["started?","Net::SMTP","classes/Net/SMTP.html#method-i-started-3F","()","<p><code>true</code> if the SMTP session has been started.\n"],["started?","Net::SMTP","classes/Net/SMTP.html#method-i-started-3F","()","<p><code>true</code> if the SMTP session has been started.\n"],["starting","GServer","classes/GServer.html#method-i-starting","()","<p>Called when the server is starting up, if auditing is enabled.\n"],["starts_with","REXML::Functions","classes/REXML/Functions.html#method-c-starts_with","( string, test )","<p>Fixed by Mike Stok\n"],["starttls","Net::IMAP","classes/Net/IMAP.html#method-i-starttls","(options = {}, verify = true)","<p>Sends a STARTTLS command to start TLS session.\n"],["starttls","Net::SMTP","classes/Net/SMTP.html#method-i-starttls","()","<p>SMTP command dispatcher\n"],["starttls","Net::SMTP","classes/Net/SMTP.html#method-i-starttls","()","<p>SMTP command dispatcher\n"],["starttls?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls-3F","()","<p>Returns truth value if this object uses STARTTLS. If this object always\nuses STARTTLS, returns :always. …\n"],["starttls?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls-3F","()","<p>Returns truth value if this object uses STARTTLS. If this object always\nuses STARTTLS, returns :always. …\n"],["starttls_always?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls_always-3F","()","<p>true if this object uses STARTTLS.\n"],["starttls_always?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls_always-3F","()","<p>true if this object uses STARTTLS.\n"],["starttls_auto?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls_auto-3F","()","<p>true if this object uses STARTTLS when server advertises STARTTLS.\n"],["starttls_auto?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls_auto-3F","()","<p>true if this object uses STARTTLS when server advertises STARTTLS.\n"],["stat","File","classes/File.html#method-c-stat","(p1)","<p>Returns a <code>File::Stat</code> object for the named file (see\n<code>File::Stat</code>).\n\n<pre><code>File.stat(&quot;testfile&quot;).mtime   #=&gt; Tue ...\n</code></pre>\n"],["stat","GC","classes/GC.html#method-c-stat","(p1 = v1)","<p>Returns a Hash containing information about the GC.\n<p>The hash includes information about internal statistics …\n"],["stat","IO","classes/IO.html#method-i-stat","()","<p>Returns status information for <em>ios</em> as an object of type\n<code>File::Stat</code>.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\ns = f.stat ...</code></pre>\n"],["stat","Object","classes/Object.html#method-i-stat","()",""],["stat","Pathname","classes/Pathname.html#method-i-stat","()","<p>See <code>File.stat</code>.  Returns a <code>File::Stat</code> object.\n"],["stat","RubyVM::VPATH","classes/RubyVM/VPATH.html#method-i-stat","(*args, &block)",""],["stat","TkTextIO","classes/TkTextIO.html#method-i-stat","()",""],["state","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-state","()","<p>A description of the current connection state.\n"],["state","Tk::Wm","classes/Tk/Wm.html#method-i-state","(st=nil)",""],["state","Tk::Wm","classes/Tk/Wm.html#method-c-state","(win, st=nil)",""],["stateMonitor","Object","classes/Object.html#method-i-stateMonitor","()",""],["status","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-status","()","<p>I4 status Get HTTP status code\n"],["status","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-status","()","<p>I4 status Get HTTP status code\n"],["status","Net::FTP","classes/Net/FTP.html#method-i-status","()","<p>Returns the status (STAT command).\n"],["status","Net::IMAP","classes/Net/IMAP.html#method-i-status","(mailbox, attr)","<p>Sends a STATUS command, and returns the status of the indicated\n<code>mailbox</code>. <code>attr</code> is a list of one or more …\n"],["status","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-status","()",""],["status","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-status","()",""],["status","PTY::ChildExited","classes/PTY/ChildExited.html#method-i-status","()","<p>Returns the exit status of the child for which PTY#check raised this\nexception\n"],["status","SystemExit","classes/SystemExit.html#method-i-status","()","<p>Return the status value associated with this system exit.\n"],["status","Thread","classes/Thread.html#method-i-status","()","<p>Returns the status of <em>thr</em>: “<code>sleep</code>&#39;&#39; if\n<em>thr</em> is sleeping or waiting on I/O, “<code>run</code>&#39;&#39; if\n…\n"],["status","Tk::BLT::Busy","classes/Tk/BLT/Busy.html#method-i-status","(win)",""],["status","Tk::Busy","classes/Tk/Busy.html#method-i-status","(win)",""],["status","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-i-status","()",""],["status","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-status","()",""],["status=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-status-3D","(status)","<p>Sets the response&#39;s status to the <code>status</code> code\n"],["statusText","IXMLHttpRequest","classes/IXMLHttpRequest.html#method-i-statusText","()","<p>BSTR statusText Get HTTP status text\n"],["statusText","Microsoft_XMLHTTP_1","classes/Microsoft_XMLHTTP_1.html#method-i-statusText","()","<p>BSTR statusText Get HTTP status text\n"],["status_line","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-status_line","()","<p>The response&#39;s HTTP status line\n"],["status_string","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-status_string","()",""],["status_type_char","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-status_type_char","()","<p>Takes the first digit of the reply code to determine the status type\n"],["stdchan","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-stdchan","(cmd, channel)",""],["stdout","DEBUGGER__","classes/DEBUGGER__.html#method-i-stdout","()",""],["stdout","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-stdout","()",""],["stdout=","DEBUGGER__","classes/DEBUGGER__.html#method-i-stdout-3D","(s)",""],["stdscr","Curses","classes/Curses.html#method-c-stdscr","()","<p>The Standard Screen.\n<p>Upon initializing curses, a default window called stdscr, which is the size\nof the …\n"],["step","Date","classes/Date.html#method-i-step","(p1, p2 = v2)","<p>Iterates evaluation of the given block, which takes a date object. The\nlimit should be a date object. …\n"],["step","Numeric","classes/Numeric.html#method-i-step","(*args)","<p>Invokes <em>block</em> with the sequence of numbers starting at\n<em>num</em>, incremented by <em>step</em> (default 1) on each call. …\n"],["step","Range","classes/Range.html#method-i-step","(p1 = v1)","<p>Iterates over <em>rng</em>, passing each <em>n</em>th element to the block.\nIf the range contains numbers, <em>n</em> is added for …\n"],["step","Tk::Iwidgets::Feedback","classes/Tk/Iwidgets/Feedback.html#method-i-step","(inc=1)",""],["step","Tk::Tile::TProgressbar","classes/Tk/Tile/TProgressbar.html#method-i-step","(amount=None)",""],["step","Tk::Tile::TProgressbar","classes/Tk/Tile/TProgressbar.html#method-i-step","(amount=None)",""],["sticky?","File","classes/File.html#method-c-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n"],["sticky?","File::Stat","classes/File/Stat.html#method-i-sticky-3F","()","<p>Returns <code>true</code> if <em>stat</em> has its sticky bit set,\n<code>false</code> if it doesn&#39;t or if the operating system doesn&#39;t\n…\n"],["sticky?","FileTest","classes/FileTest.html#method-i-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n"],["sticky?","Pathname","classes/Pathname.html#method-i-sticky-3F","()","<p>See <code>FileTest.sticky?</code>.\n"],["stop","AnimatedTextLabel","classes/AnimatedTextLabel.html#method-i-stop","()",""],["stop","AnimatedWaveDemo","classes/AnimatedWaveDemo.html#method-i-stop","()",""],["stop","GServer","classes/GServer.html#method-c-stop","(port, host = DEFAULT_HOST)","<p>Stop the server running on the given port, bound to the given host\n<p><code>port</code> &mdash; port, as a FixNum, of the server …\n"],["stop","GServer","classes/GServer.html#method-i-stop","()","<p>Stop the server\n"],["stop","Thread","classes/Thread.html#method-c-stop","()","<p>Stops execution of the current thread, putting it into a “sleep&#39;&#39;\nstate, and schedules execution …\n"],["stop","Tk::Iwidgets::Canvasprintbox","classes/Tk/Iwidgets/Canvasprintbox.html#method-i-stop","()",""],["stop","Tk::Tile::TProgressbar","classes/Tk/Tile/TProgressbar.html#method-i-stop","(amount=None)",""],["stop","Tk::Tile::TProgressbar","classes/Tk/Tile/TProgressbar.html#method-i-stop","(amount=None)",""],["stop","TkRTTimer","classes/TkRTTimer.html#method-i-stop","()",""],["stop","TkTimer","classes/TkTimer.html#method-i-stop","()",""],["stop","TkTimer","classes/TkTimer.html#method-i-stop","()",""],["stop","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-stop","()",""],["stop?","Thread","classes/Thread.html#method-i-stop-3F","()","<p>Returns <code>true</code> if <em>thr</em> is dead or sleeping.\n\n<pre><code>a = Thread.new { Thread.stop }\nb = Thread.current\na.stop?   #=&gt; ...\n</code></pre>\n"],["stop_doc","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-stop_doc","()","<p>Disable capture of documentation\n"],["stop_msg_loop","Object","classes/Object.html#method-i-stop_msg_loop","()",""],["stop_next","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-stop_next","(n=1)",""],["stop_profile","Profiler__","classes/Profiler__.html#method-i-stop_profile","()",""],["stop_service","DRb","classes/DRb.html#method-c-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server\ncurrently …\n"],["stop_service","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-stop_service","()","<p>Stop this server.\n"],["stop_service","DRb::ExtServ","classes/DRb/ExtServ.html#method-i-stop_service","()",""],["stopped?","GServer","classes/GServer.html#method-i-stopped-3F","()","<p>Returns true if the server has stopped.\n"],["stopped?","Process::Status","classes/Process/Status.html#method-i-stopped-3F","()","<p>Returns <code>true</code> if this process is stopped. This is only returned\nif the corresponding <code>wait</code> call had the …\n"],["stopped?","Rake::PseudoStatus","classes/Rake/PseudoStatus.html#method-i-stopped-3F","()",""],["stopping","GServer","classes/GServer.html#method-i-stopping","()","<p>Called when the server is shutting down, if auditing is enabled.\n"],["stopsig","Process::Status","classes/Process/Status.html#method-i-stopsig","()","<p>Returns the number of the signal that caused <em>stat</em> to stop (or\n<code>nil</code> if self is not stopped).\n"],["storbinary","Net::FTP","classes/Net/FTP.html#method-i-storbinary","(cmd, file, blocksize, rest_offset = nil)","<p>Puts the connection into binary (image) mode, issues the given server-side\ncommand (such as “STOR …\n"],["store","DBM","classes/DBM.html#method-i-store","(p1, p2)","<p>Stores the specified string value in the database, indexed via the string\nkey provided.\n"],["store","ENV","classes/ENV.html#method-c-store","(p1, p2)","<p>Sets the environment variable <code>name</code> to <code>value</code>.  If\nthe value given is <code>nil</code> the environment variable is deleted. …\n"],["store","GDBM","classes/GDBM.html#method-i-store","(p1, p2)","<p>Associates the value <em>value</em> with the specified <em>key</em>.\n"],["store","Hash","classes/Hash.html#method-i-store","(p1, p2)","<p>Element Assignment—Associates the value given by <em>value</em> with the\nkey given by <em>key</em>. <em>key</em> should not have …\n"],["store","Net::IMAP","classes/Net/IMAP.html#method-i-store","(set, attr, flags)","<p>Sends a STORE command to alter data associated with messages in the\nmailbox, in particular their flags. …\n"],["store","SDBM","classes/SDBM.html#method-i-store","(p1, p2)",""],["store","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-store","(key, val)",""],["store","YAML::DBM","classes/YAML/DBM.html#method-i-store","( key, val )","<p>Stores <code>value</code> in database with <code>key</code> as the index.\n<code>value</code> is converted to YAML before being stored.\n<p>Returns …\n"],["storlines","Net::FTP","classes/Net/FTP.html#method-i-storlines","(cmd, file)","<p>Puts the connection into ASCII (text) mode, issues the given server-side\ncommand (such as “STOR …\n"],["str_name","ActionMap","classes/ActionMap.html#method-i-str_name","(bytes)",""],["stream","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-i-stream","()",""],["stream","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-i-stream","()","<p>Get the socket.\n"],["stream=","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-stream-3D","( source )",""],["stream_end?","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-stream_end-3F","()","<p>Returns true if the stream is finished.\n"],["streaming?","Psych::Handler","classes/Psych/Handler.html#method-i-streaming-3F","()","<p>Is this handler a streaming handler?\n"],["stress","GC","classes/GC.html#method-c-stress","()","<p>returns current status of GC stress mode.\n"],["stress=","GC","classes/GC.html#method-c-stress-3D","(p1)","<p>Updates the GC stress mode.\n<p>When stress mode is enabled the GC is invoked at every GC opportunity: all\n…\n"],["strftime","Date","classes/Date.html#method-i-strftime","(*args)","\n<pre><code>Formats date according to the directives in the given format\nstring.\nThe directives begins with a percent ...</code></pre>\n"],["strftime","DateTime","classes/DateTime.html#method-i-strftime","(*args)","\n<pre><code>Formats date according to the directives in the given format\nstring.\nThe directives begins with a percent ...</code></pre>\n"],["strftime","Time","classes/Time.html#method-i-strftime","(p1)","<p>Formats <em>time</em> according to the directives in the given format\nstring. The directives begins with a percent …\n"],["strict_decode64","Base64","classes/Base64.html#method-i-strict_decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with RFC 4648. ArgumentError is raised …\n"],["strict_encode64","Base64","classes/Base64.html#method-i-strict_encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with RFC 4648. No line feeds are added. …\n"],["string","MatchData","classes/MatchData.html#method-i-string","()","<p>Returns a frozen copy of the string passed in to <code>match</code>.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.string ...</code></pre>\n"],["string","REXML::Functions","classes/REXML/Functions.html#method-c-string","( object=nil )","<p>A node-set is converted to a string by returning the string-value of the\nnode in the node-set that is …\n"],["string","Ripper::TokenPattern::MatchData","classes/Ripper/TokenPattern/MatchData.html#method-i-string","(n = 0)",""],["string","StringIO","classes/StringIO.html#method-i-string","()","<p>Returns underlying String object, the subject of IO.\n"],["string","StringScanner","classes/StringScanner.html#method-i-string","()","<p>Returns the string being scanned.\n"],["string","TkUtil","classes/TkUtil.html#method-c-string","(p1)",""],["string","TkUtil","classes/TkUtil.html#method-i-string","(p1)",""],["string","TkVariable","classes/TkVariable.html#method-i-string","()",""],["string","TkVariable","classes/TkVariable.html#method-i-string","()",""],["string=","StringIO","classes/StringIO.html#method-i-string-3D","(p1)","<p>Changes underlying String object, the subject of IO.\n"],["string=","StringScanner","classes/StringScanner.html#method-i-string-3D","(p1)","<p>Changes the string being scanned to <code>str</code> and resets the\nscanner. Returns <code>str</code>.\n"],["string=","TkVariable","classes/TkVariable.html#method-i-string-3D","(val)",""],["string=","TkVariable","classes/TkVariable.html#method-i-string-3D","(val)",""],["string_element","TkVariable","classes/TkVariable.html#method-i-string_element","(*idxs)",""],["string_element","TkVariable","classes/TkVariable.html#method-i-string_element","(*idxs)",""],["string_length","REXML::Functions","classes/REXML/Functions.html#method-c-string_length","( string )","<p>UNTESTED\n"],["string_type=","TkVariable","classes/TkVariable.html#method-i-string_type-3D","(val)",""],["string_type=","TkVariable","classes/TkVariable.html#method-i-string_type-3D","(val)",""],["string_value","REXML::Functions","classes/REXML/Functions.html#method-c-string_value","( o )","<p>A node-set is converted to a string by returning the concatenation of the\nstring-value of each of the …\n"],["strip","CommentStripper","classes/CommentStripper.html#method-c-strip","(src)",""],["strip","String","classes/String.html#method-i-strip","()","<p>Returns a copy of <em>str</em> with leading and trailing whitespace\nremoved.\n\n<pre><code>&quot;    hello    &quot;.strip   #=&gt; &quot;hello&quot; ...\n</code></pre>\n"],["strip!","String","classes/String.html#method-i-strip-21","()","<p>Removes leading and trailing whitespace from <em>str</em>. Returns\n<code>nil</code> if <em>str</em> was not altered.\n"],["strip_hashes","RDoc::Text","classes/RDoc/Text.html#method-i-strip_hashes","(text)","<p>Strips leading # characters from <code>text</code>\n"],["strip_locations","Object","classes/Object.html#method-i-strip_locations","(h)",""],["strip_newlines","RDoc::Text","classes/RDoc/Text.html#method-i-strip_newlines","(text)","<p>Strips leading and trailing n characters from <code>text</code>\n"],["strip_stars","RDoc::Text","classes/RDoc/Text.html#method-i-strip_stars","(text)","<p>Strips       style comments\n"],["strongly_connected_components","TSort","classes/TSort.html#method-i-strongly_connected_components","()","<p>Returns strongly connected components as an array of arrays of nodes. The\narray is sorted from children …\n"],["strptime","Date","classes/Date.html#method-c-strptime","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time with the given template,\nand creates a date object. …\n"],["strptime","DateTime","classes/DateTime.html#method-c-strptime","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time with the given template,\nand creates a date object. …\n"],["strptime","Time","classes/Time.html#method-i-strptime","(date, format, now=self.now)","<p>Parses <code>date</code> using Date._strptime and converts it to a Time\nobject.\n<p>If a block is given, the year described …\n"],["struct","DL::Importer","classes/DL/Importer.html#method-i-struct","(signature)",""],["struct","XMLRPC::Convert","classes/XMLRPC/Convert.html#method-c-struct","(hash)",""],["style","Tk::Tile","classes/Tk/Tile.html#method-c-style","(*args)",""],["style","Tk::Tile","classes/Tk/Tile.html#method-c-style","(*args)",""],["style","Tk::Tile","classes/Tk/Tile.html#method-c-style","(*args)",""],["style","Tk::Tile::Dialog","classes/Tk/Tile/Dialog.html#method-c-style","(*args)",""],["style","Tk::Tile::SizeGrip","classes/Tk/Tile/SizeGrip.html#method-c-style","(*args)",""],["style","Tk::Tile::SizeGrip","classes/Tk/Tile/SizeGrip.html#method-c-style","(*args)",""],["style","Tk::Tile::TButton","classes/Tk/Tile/TButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TButton","classes/Tk/Tile/TButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TCheckButton","classes/Tk/Tile/TCheckButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TCheckButton","classes/Tk/Tile/TCheckButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TCheckButton","classes/Tk/Tile/TCheckButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TCheckButton","classes/Tk/Tile/TCheckButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TCombobox","classes/Tk/Tile/TCombobox.html#method-c-style","(*args)",""],["style","Tk::Tile::TCombobox","classes/Tk/Tile/TCombobox.html#method-c-style","(*args)",""],["style","Tk::Tile::TEntry","classes/Tk/Tile/TEntry.html#method-c-style","(*args)",""],["style","Tk::Tile::TEntry","classes/Tk/Tile/TEntry.html#method-c-style","(*args)",""],["style","Tk::Tile::TFrame","classes/Tk/Tile/TFrame.html#method-c-style","(*args)",""],["style","Tk::Tile::TFrame","classes/Tk/Tile/TFrame.html#method-c-style","(*args)",""],["style","Tk::Tile::TLabel","classes/Tk/Tile/TLabel.html#method-c-style","(*args)",""],["style","Tk::Tile::TLabel","classes/Tk/Tile/TLabel.html#method-c-style","(*args)",""],["style","Tk::Tile::TLabelframe","classes/Tk/Tile/TLabelframe.html#method-c-style","(*args)",""],["style","Tk::Tile::TLabelframe","classes/Tk/Tile/TLabelframe.html#method-c-style","(*args)",""],["style","Tk::Tile::TLabelframe","classes/Tk/Tile/TLabelframe.html#method-c-style","(*args)",""],["style","Tk::Tile::TLabelframe","classes/Tk/Tile/TLabelframe.html#method-c-style","(*args)",""],["style","Tk::Tile::TMenubutton","classes/Tk/Tile/TMenubutton.html#method-c-style","(*args)",""],["style","Tk::Tile::TMenubutton","classes/Tk/Tile/TMenubutton.html#method-c-style","(*args)",""],["style","Tk::Tile::TMenubutton","classes/Tk/Tile/TMenubutton.html#method-c-style","(*args)",""],["style","Tk::Tile::TMenubutton","classes/Tk/Tile/TMenubutton.html#method-c-style","(*args)",""],["style","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-c-style","(*args)",""],["style","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-c-style","(*args)",""],["style","Tk::Tile::TPaned","classes/Tk/Tile/TPaned.html#method-c-style","(*args)",""],["style","Tk::Tile::TProgressbar","classes/Tk/Tile/TProgressbar.html#method-c-style","(*args)",""],["style","Tk::Tile::TProgressbar","classes/Tk/Tile/TProgressbar.html#method-c-style","(*args)",""],["style","Tk::Tile::TRadioButton","classes/Tk/Tile/TRadioButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TRadioButton","classes/Tk/Tile/TRadioButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TRadioButton","classes/Tk/Tile/TRadioButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TRadioButton","classes/Tk/Tile/TRadioButton.html#method-c-style","(*args)",""],["style","Tk::Tile::TScale","classes/Tk/Tile/TScale.html#method-c-style","(*args)",""],["style","Tk::Tile::TScale","classes/Tk/Tile/TScale.html#method-c-style","(*args)",""],["style","Tk::Tile::TScrollbar","classes/Tk/Tile/TScrollbar.html#method-c-style","(*args)",""],["style","Tk::Tile::TScrollbar","classes/Tk/Tile/TScrollbar.html#method-c-style","(*args)",""],["style","Tk::Tile::TSeparator","classes/Tk/Tile/TSeparator.html#method-c-style","(*args)",""],["style","Tk::Tile::TSeparator","classes/Tk/Tile/TSeparator.html#method-c-style","(*args)",""],["style","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-c-style","(*args)",""],["style","Tk::Tile::TSpinbox","classes/Tk/Tile/TSpinbox.html#method-c-style","(*args)",""],["style","Tk::Tile::TSquare","classes/Tk/Tile/TSquare.html#method-c-style","(*args)",""],["style","Tk::Tile::TSquare","classes/Tk/Tile/TSquare.html#method-c-style","(*args)",""],["style=","Object::Syck::Map","classes/Object/Syck/Map.html#method-i-style-3D","(p1)","<p>YAML::Syck::Map.style=\n"],["style=","Object::Syck::Scalar","classes/Object/Syck/Scalar.html#method-i-style-3D","(p1)","<p>YAML::Syck::Scalar.style=\n"],["style=","Object::Syck::Seq","classes/Object/Syck/Seq.html#method-i-style-3D","(p1)","<p>YAML::Syck::Seq.style=\n"],["style_cget","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-style_cget","(tagOrId, option)",""],["style_cget_strict","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-style_cget_strict","(tagOrId, option)",""],["style_cget_tkstring","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-style_cget_tkstring","(tagOrId, option)",""],["style_configinfo","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-style_configinfo","(tagOrId, slot=nil)",""],["style_configure","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-style_configure","(tagOrId, slot, value=None)",""],["su","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-su","(user)","<p>Changes the process&#39;s uid and gid to the ones of <code>user</code>\n"],["sub","BigDecimal","classes/BigDecimal.html#method-i-sub","(p1, p2)",""],["sub","Kernel","classes/Kernel.html#method-i-sub","(*args)","<p>Equivalent to <code>$_.sub(<em>args</em>)</code>, except that\n<code>$_</code> will be updated if substitution occurs. Available only when\n…\n"],["sub","Pathname","classes/Pathname.html#method-i-sub","(*args)","<p>Return a pathname which is substituted by String#sub.\n"],["sub","String","classes/String.html#method-i-sub","(*args)","<p>Returns a copy of <em>str</em> with the <em>first</em> occurrence of\n<em>pattern</em> substituted for the second argument. The  …\n"],["sub!","String","classes/String.html#method-i-sub-21","(*args)","<p>Performs the substitutions of <code>String#sub</code> in place, returning\n<em>str</em>, or <code>nil</code> if no substitutions were performed. …\n"],["sub_cget","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-sub_cget","(win, subwidget)",""],["sub_cget_strict","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-sub_cget_strict","(win, subwidget)",""],["sub_ext","Pathname","classes/Pathname.html#method-i-sub_ext","(p1)","<p>Return a pathname which the extension of the basename is substituted by\n<em>repl</em>.\n<p>If self has no extension …\n"],["sub_type","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-sub_type","()","<p>Returns a content type string such as “html”. This method returns nil if\nContent-Type: header …\n"],["subdir_check","Object","classes/Object.html#method-i-subdir_check","(dir, verbose=false)",""],["subdomain_of?","Resolv::DNS::Name","classes/Resolv/DNS/Name.html#method-i-subdomain_of-3F","(other)","<p>Returns true if <code>other</code> is a subdomain.\n<p>Example:\n\n<pre><code>domain = Resolv::DNS::Name.create(&quot;y.z&quot;)\np Resolv::DNS::Name.create(&quot;w.x.y.z&quot;).subdomain_of?(domain) ...</code></pre>\n"],["subject","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-subject","()",""],["subject","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-subject","()",""],["subject=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-subject-3D","(p1)",""],["subject=","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-subject-3D","(p1)",""],["subject_certificate=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-subject_certificate-3D","(p1)",""],["subject_request=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-subject_request-3D","(p1)",""],["submit","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-submit","(value = nil, name = nil)","<p>Generate a submit button Input element, as a String.\n<p><code>value</code> is the text to display on the button.  <code>name</code>\n…\n"],["subsample","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-subsample","(src, dest, x, y, width, height, horiz_filter=None, vert_filter=None)",""],["subsample","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-subsample","(src, dest, x, y, width, height, horiz_filter=None, vert_filter=None)",""],["subscribe","Net::IMAP","classes/Net/IMAP.html#method-i-subscribe","(mailbox)","<p>Sends a SUBSCRIBE command to add the specified <code>mailbox</code> name to\nthe server&#39;s set of “active” …\n"],["subsec","Time","classes/Time.html#method-i-subsec","()","<p>Returns just the fraction for <em>time</em>.\n<p>The result is possibly rational.\n\n<pre><code>t = Time.now        #=&gt; 2009-03-26 ...\n</code></pre>\n"],["subset?","Set","classes/Set.html#method-i-subset-3F","(set)","<p>Returns true if the set is a subset of the given set.\n"],["subst","TkComm","classes/TkComm.html#method-i-subst","(str, *opts)",""],["subst_arg","TkUtil::CallbackSubst","classes/TkUtil/CallbackSubst.html#method-c-subst_arg","(*args)",""],["subst_tk_backslash","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-subst_tk_backslash","(str)",""],["subst_utf_backslash","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-subst_utf_backslash","(str)",""],["substring","REXML::Functions","classes/REXML/Functions.html#method-c-substring","( string, start, length=nil )","<p>Take equal portions of Mike Stok and Sean Russell; mix vigorously, and pour\ninto a tall, chilled glass. …\n"],["substringData","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-substringData","(arg0, arg1)","<p>BSTR substringData retrieve substring of value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]</code></pre>\n"],["substringData","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-substringData","(arg0, arg1)","<p>BSTR substringData retrieve substring of value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]</code></pre>\n"],["substringData","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-substringData","(arg0, arg1)","<p>BSTR substringData retrieve substring of value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]</code></pre>\n"],["substringData","IXMLDOMText","classes/IXMLDOMText.html#method-i-substringData","(arg0, arg1)","<p>BSTR substringData retrieve substring of value\n\n<pre><code>I4 arg0 --- offset [IN]\nI4 arg1 --- count [IN]</code></pre>\n"],["substring_after","REXML::Functions","classes/REXML/Functions.html#method-c-substring_after","( string, test )","<p>Kouhei fixed this too\n"],["substring_before","REXML::Functions","classes/REXML/Functions.html#method-c-substring_before","( string, test )","<p>Kouhei fixed this\n"],["subtract","Set","classes/Set.html#method-i-subtract","(enum)","<p>Deletes every element that appears in the given enumerable object and\nreturns self.\n"],["subwin","Curses::Window","classes/Curses/Window.html#method-i-subwin","(p1, p2, p3, p4)","<p>Contruct a new subwindow with constraints of <code>height</code> lines,\n<code>width</code> columns, begin at <code>top</code> line, and begin …\n"],["succ","Date","classes/Date.html#method-i-succ","()","<p>Returns a date object denoting the following day.\n"],["succ","Fixnum","classes/Fixnum.html#method-i-succ","()","<p>Returns the <code>Integer</code> equal to <em>int</em> + 1.\n\n<pre><code>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n</code></pre>\n"],["succ","IPAddr","classes/IPAddr.html#method-i-succ","()","<p>Returns the successor to the ipaddr.\n"],["succ","Integer","classes/Integer.html#method-i-succ","()","<p>Returns the <code>Integer</code> equal to <em>int</em> + 1.\n\n<pre><code>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n</code></pre>\n"],["succ","Integer","classes/Integer.html#method-i-succ","()","<p>Returns the <code>Integer</code> equal to <em>int</em> + 1.\n\n<pre><code>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n</code></pre>\n"],["succ","JISX0208::Char","classes/JISX0208/Char.html#method-i-succ","()",""],["succ","MyElem","classes/MyElem.html#method-i-succ","()",""],["succ","Prime::EratosthenesGenerator","classes/Prime/EratosthenesGenerator.html#method-i-succ","()",""],["succ","Prime::Generator23","classes/Prime/Generator23.html#method-i-succ","()",""],["succ","Prime::OldCompatibility","classes/Prime/OldCompatibility.html#method-i-succ","()","<p>Returns the next prime number and forwards internal pointer.\n"],["succ","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-succ","()","<p>returns the next pseudo-prime number, and move the internal position\nforward.\n<p><code>PseudoPrimeGenerator</code>#succ …\n"],["succ","Prime::TrialDivisionGenerator","classes/Prime/TrialDivisionGenerator.html#method-i-succ","()",""],["succ","String","classes/String.html#method-i-succ","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["succ","Symbol","classes/Symbol.html#method-i-succ","()","<p>Same as <code>sym.to_s.succ.intern</code>.\n"],["succ","Time","classes/Time.html#method-i-succ","()","<p>Return a new time object, one second later than <code>time</code>.\nTime#succ is obsolete since 1.9.2 for time is not …\n"],["succ!","String","classes/String.html#method-i-succ-21","()","<p>Equivalent to <code>String#succ</code>, but modifies the receiver in place.\n"],["succ=","MyElem","classes/MyElem.html#method-i-succ-3D","(new)","<p>the method invoked by “obj.data = val&#39;&#39;\n"],["success","Gem::Builder","classes/Gem/Builder.html#method-i-success","()",""],["success","Iconv::Failure","classes/Iconv/Failure.html#method-i-success","()","<p>Returns string(s) translated successfully until the exception occurred.\n<p>In the case of failure occurred …\n\n"],["success?","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-success-3F","()","<p>Determines whether the response received was a Positive Completion reply\n(2xx reply code)\n"],["success?","Process::Status","classes/Process/Status.html#method-i-success-3F","()","<p>Returns <code>true</code> if <em>stat</em> is successful,\n<code>false</code> if not. Returns <code>nil</code> if <code>exited?</code>\nis not <code>true</code>.\n"],["success?","SystemExit","classes/SystemExit.html#method-i-success-3F","()","<p>Returns <code>true</code> if exiting successful, <code>false</code> if not.\n"],["success?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-success-3F","(code)","<p>Is <code>code</code> a successful status?\n"],["suffix_pattern","Gem","classes/Gem.html#method-c-suffix_pattern","()","<p>Glob pattern for require-able path suffixes.\n"],["suffixes","Gem","classes/Gem.html#method-c-suffixes","()","<p>Suffixes for require-able paths.\n"],["suggest_gems_from_name","Gem::SpecFetcher","classes/Gem/SpecFetcher.html#method-i-suggest_gems_from_name","(gem_name)","<p>Suggests a gem based on the supplied <code>gem_name</code>. Returns a\nstring of the gem name if an approximate match …\n"],["sum","REXML::Functions","classes/REXML/Functions.html#method-c-sum","( nodes )",""],["sum","String","classes/String.html#method-i-sum","(p1 = v1)","<p>Returns a basic <em>n</em>-bit checksum of the characters in <em>str</em>,\nwhere <em>n</em> is the optional <code>Fixnum</code> parameter, defaulting\n…\n"],["summarize","OptionParser","classes/OptionParser.html#method-i-summarize","(to = [], width = @summary_width, max = width - 1, indent = @summary_indent, &blk)","<p>Puts option summary into <code>to</code> and returns <code>to</code>.\nYields each line if a block is given.\n<p><code>to</code> &mdash; Output destination, …\n"],["summarize","OptionParser::List","classes/OptionParser/List.html#method-i-summarize","(*args, &block)","<p>Creates the summary table, passing each line to the <code>block</code>\n(without newline). The arguments <code>args</code> are passed …\n"],["summarize","OptionParser::Switch","classes/OptionParser/Switch.html#method-i-summarize","(sdone = [], ldone = [], width = 1, max = width - 1, indent = \"\")","<p>Produces the summary text. Each line of the summary is yielded to the block\n(without newline).\n<p><code>sdone</code> &mdash; "],["summary","RDoc::Stats","classes/RDoc/Stats.html#method-i-summary","()","<p>Returns a summary of the collected statistics.\n"],["summary","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-summary","(txt, tasks)",""],["summary=","Gem::Specification","classes/Gem/Specification.html#method-i-summary-3D","(str)","<p>A short summary of this gem&#39;s description.\n"],["sunday?","Date","classes/Date.html#method-i-sunday-3F","()","<p>Returns true if the date is Sunday.\n"],["sunday?","Time","classes/Time.html#method-i-sunday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Sunday.\n\n<pre><code>t = Time.local(1990, 4, 1)       #=&gt; 1990-04-01 00:00:00 -0600 ...\n</code></pre>\n"],["super_each","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-super_each","(rs = nil)",""],["superclass","Class","classes/Class.html#method-i-superclass","()","<p>Returns the superclass of <em>class</em>, or <code>nil</code>.\n\n<pre><code>File.superclass          #=&gt; IO\nIO.superclass            #=&gt; ...\n</code></pre>\n"],["superclass","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-superclass","()","<p>Get the superclass of this class.  Attempts to retrieve the superclass\nobject, returns the name if it …\n"],["superclass","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-superclass","()","<p>Modules don&#39;t have one, raises NoMethodError\n"],["superclass=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-superclass-3D","(superclass)","<p>Set the superclass of this class to <code>superclass</code>\n"],["superset?","Set","classes/Set.html#method-i-superset-3F","(set)","<p>Returns true if the set is a superset of the given set.\n"],["supported?","RSS::Maker","classes/RSS/Maker.html#method-i-supported-3F","(version)",""],["suspend","DEBUGGER__","classes/DEBUGGER__.html#method-i-suspend","()",""],["suspend_all","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-suspend_all","()",""],["suspend_context","IRB::Irb","classes/IRB/Irb.html#method-i-suspend_context","(context)",""],["suspend_input_method","IRB::Irb","classes/IRB/Irb.html#method-i-suspend_input_method","(input_method)",""],["suspend_name","IRB::Irb","classes/IRB/Irb.html#method-i-suspend_name","(path = nil, name = nil)",""],["suspend_workspace","IRB::Irb","classes/IRB/Irb.html#method-i-suspend_workspace","(workspace)",""],["swapcase","String","classes/String.html#method-i-swapcase","()","<p>Returns a copy of <em>str</em> with uppercase alphabetic characters\nconverted to lowercase and lowercase characters …\n"],["swapcase","Symbol","classes/Symbol.html#method-i-swapcase","()","<p>Same as <code>sym.to_s.swapcase.intern</code>.\n"],["swapcase!","String","classes/String.html#method-i-swapcase-21","()","<p>Equivalent to <code>String#swapcase</code>, but modifies the receiver in\nplace, returning <em>str</em>, or <code>nil</code> if no changes …\n"],["switch","IRB::JobManager","classes/IRB/JobManager.html#method-i-switch","(key)",""],["switch","Process::GID","classes/Process/GID.html#method-c-switch","()","<p>Switch the effective and real group IDs of the current process. If a\n<em>block</em> is given, the group IDs will …\n"],["switch","Process::UID","classes/Process/UID.html#method-c-switch","()","<p>Switch the effective and real user IDs of the current process. If a\n<em>block</em> is given, the user IDs will …\n"],["switch_name","OptionParser::Switch","classes/OptionParser/Switch.html#method-i-switch_name","()","<p>Main name of the switch.\n"],["syck_to_yaml","Object","classes/Object.html#method-i-syck_to_yaml","(options = {})",""],["sym","DL::CompositeHandler","classes/DL/CompositeHandler.html#method-i-sym","(symbol)",""],["sym","DL::Handle","classes/DL/Handle.html#method-c-sym","(p1)","\n<pre><code>Document-method: []</code></pre>\n<p>Get the address as an Integer for the function named <code>name</code>.\n"],["sym","DL::Handle","classes/DL/Handle.html#method-i-sym","(p1)","\n<pre><code>Document-method: []</code></pre>\n<p>Get the address as an Integer for the function named <code>name</code>.\n"],["symbol","TkVariable","classes/TkVariable.html#method-i-symbol","()",""],["symbol","TkVariable","classes/TkVariable.html#method-i-symbol","()",""],["symbol=","TkVariable","classes/TkVariable.html#method-i-symbol-3D","(val)",""],["symbol=","TkVariable","classes/TkVariable.html#method-i-symbol-3D","(val)",""],["symbol_element","TkVariable","classes/TkVariable.html#method-i-symbol_element","(*idxs)",""],["symbol_element","TkVariable","classes/TkVariable.html#method-i-symbol_element","(*idxs)",""],["symbol_type=","TkVariable","classes/TkVariable.html#method-i-symbol_type-3D","(val)",""],["symbol_type=","TkVariable","classes/TkVariable.html#method-i-symbol_type-3D","(val)",""],["symlink","File","classes/File.html#method-c-symlink","(p1, p2)","<p>Creates a symbolic link called <em>new_name</em> for the existing file\n<em>old_name</em>. Raises a <code>NotImplemented</code> exception …\n"],["symlink","FileUtils","classes/FileUtils.html#method-c-symlink","(src, dest, options = {})",""],["symlink","Sys","classes/Sys.html#method-i-symlink","(file_name, dest_file)","<p>Symlink <code>file_name</code> to <code>dest_file</code>.\n"],["symlink?","File","classes/File.html#method-c-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["symlink?","File::Stat","classes/File/Stat.html#method-i-symlink-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a symbolic link,\n<code>false</code> if it isn&#39;t or if the operating system doesn&#39;t …\n"],["symlink?","FileTest","classes/FileTest.html#method-i-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["symlink?","Pathname","classes/Pathname.html#method-i-symlink-3F","()","<p>See <code>FileTest.symlink?</code>.\n"],["symlink?","Rake::FtpFile","classes/Rake/FtpFile.html#method-i-symlink-3F","()",""],["symlink_files","Sys","classes/Sys.html#method-i-symlink_files","(wildcard, dest_dir)","<p>Symlink all files matching <code>wildcard</code> into the directory\n<code>dest_dir</code>.\n"],["symmetric?","Matrix","classes/Matrix.html#method-i-symmetric-3F","()","<p>Returns <code>true</code> is this is a symmetric matrix. Raises an error if\nmatrix is not square.\n"],["sync","GDBM","classes/GDBM.html#method-i-sync","()","<p>Unless the <em>gdbm</em> object has been opened with the\n<strong>SYNC</strong> flag, it is not guarenteed that database modification\n…\n"],["sync","IO","classes/IO.html#method-i-sync","()","<p>Returns the current “sync mode&#39;&#39; of <em>ios</em>. When sync mode is\ntrue, all output is immediately flushed …\n"],["sync","StringIO","classes/StringIO.html#method-i-sync","()","<p>Returns <code>true</code> always.\n"],["sync","TkTextIO","classes/TkTextIO.html#method-i-sync","()",""],["sync","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-sync","()","<p>Same as IO#sync\n"],["sync","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-sync","(p1)","<p>Inputs <code>string</code> into the end of input buffer and skips data\nuntil a full flush point can be found.  If …\n"],["sync=","IO","classes/IO.html#method-i-sync-3D","(p1)","<p>Sets the “sync mode&#39;&#39; to <code>true</code> or <code>false</code>.\nWhen sync mode is true, all output is immediately flushed …\n"],["sync=","StringIO","classes/StringIO.html#method-i-sync-3D","(p1)",""],["sync=","TkTextIO","classes/TkTextIO.html#method-i-sync-3D","(mode)",""],["sync=","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-sync-3D","(p1)","<p>Same as IO.  If flag is <code>true</code>, the associated IO object must\nrespond to the <code>flush</code> method.  While <code>sync</code> …\n"],["sync_exclusive?","Sync_m","classes/Sync_m.html#method-i-sync_exclusive-3F","()",""],["sync_exclusive?","Sync_m","classes/Sync_m.html#method-i-sync_exclusive-3F","()",""],["sync_extend","Sync_m","classes/Sync_m.html#method-i-sync_extend","()",""],["sync_extend","Sync_m","classes/Sync_m.html#method-i-sync_extend","()",""],["sync_inspect","Sync_m","classes/Sync_m.html#method-i-sync_inspect","()",""],["sync_inspect","Sync_m","classes/Sync_m.html#method-i-sync_inspect","()",""],["sync_lock","Sync_m","classes/Sync_m.html#method-i-sync_lock","(m = EX)",""],["sync_lock","Sync_m","classes/Sync_m.html#method-i-sync_lock","(m = EX)",""],["sync_locked?","Sync_m","classes/Sync_m.html#method-i-sync_locked-3F","()","<p>accessing\n"],["sync_locked?","Sync_m","classes/Sync_m.html#method-i-sync_locked-3F","()","<p>accessing\n"],["sync_options","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-sync_options","(klass, subclass, subpath, options)",""],["sync_point?","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-sync_point-3F","()","<p>Quoted verbatim from original documentation:\n\n<pre><code>What is this?</code></pre>\n<p><code>:)</code>\n"],["sync_shared?","Sync_m","classes/Sync_m.html#method-i-sync_shared-3F","()",""],["sync_shared?","Sync_m","classes/Sync_m.html#method-i-sync_shared-3F","()",""],["sync_synchronize","Sync_m","classes/Sync_m.html#method-i-sync_synchronize","(mode = EX)",""],["sync_synchronize","Sync_m","classes/Sync_m.html#method-i-sync_synchronize","(mode = EX)",""],["sync_try_lock","Sync_m","classes/Sync_m.html#method-i-sync_try_lock","(mode = EX)","<p>locking methods.\n"],["sync_try_lock","Sync_m","classes/Sync_m.html#method-i-sync_try_lock","(mode = EX)","<p>locking methods.\n"],["sync_unlock","Sync_m","classes/Sync_m.html#method-i-sync_unlock","(m = EX)",""],["sync_unlock","Sync_m","classes/Sync_m.html#method-i-sync_unlock","(m = EX)",""],["synchronize","MonitorMixin","classes/MonitorMixin.html#method-i-synchronize","()",""],["synchronize","Mutex","classes/Mutex.html#method-i-synchronize","()","<p>Obtains a lock, runs the block, and releases the lock when the block\ncompletes.  See the example under …\n"],["syncmode=","GDBM","classes/GDBM.html#method-i-syncmode-3D","(p1)","<p>Turns the database&#39;s synchronization mode on or off. If the\nsynchronization mode is turned on, the …\n"],["synthesize_file_task","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-synthesize_file_task","(task_name)",""],["sysaccept","Socket","classes/Socket.html#method-i-sysaccept","()","<p>Accepts an incoming connection returning an array containing the (integer)\nfile descriptor for the incoming …\n"],["sysaccept","TCPServer","classes/TCPServer.html#method-i-sysaccept","()","<p>Returns a file descriptor of a accepted connection.\n\n<pre><code>TCPServer.open(&quot;127.0.0.1&quot;, 28561) {|serv|\n  fd = ...\n</code></pre>\n"],["sysaccept","UNIXServer","classes/UNIXServer.html#method-i-sysaccept","()","<p>Accepts a new connection. It returns the new file descriptor which is an\ninteger.\n\n<pre><code>UNIXServer.open(&quot;/tmp/sock&quot;) ...</code></pre>\n"],["syscall","Kernel","classes/Kernel.html#method-i-syscall","(*args)","\n<pre><code>Calls the operating system function identified by _num_ and\nreturns the result of the function or raises ...</code></pre>\n"],["sysclose","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-sysclose","()","<p>Shuts down the SSL connection and prepares it for another connection.\n"],["sysconfdir","Etc","classes/Etc.html#method-c-sysconfdir","()","<p>Returns system configuration directory.\n"],["sysopen","IO","classes/IO.html#method-c-sysopen","(p1, p2 = v2, p3 = v3)","<p>Opens the given path, returning the underlying file descriptor as a\n<code>Fixnum</code>.\n\n<pre><code>IO.sysopen(&quot;testfile&quot;)   #=&gt; ...\n</code></pre>\n"],["sysopen","Pathname","classes/Pathname.html#method-i-sysopen","(p1 = v1, p2 = v2)","<p>See <code>IO.sysopen</code>.\n"],["sysquote","Object","classes/Object.html#method-i-sysquote","(x)",""],["sysread","IO","classes/IO.html#method-i-sysread","(p1, p2 = v2)","<p>Reads <em>maxlen</em> bytes from <em>ios</em> using a low-level read and\nreturns them as a string.  Do not mix with other …\n"],["sysread","IO::readable","classes/IO/readable.html#method-i-sysread","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead\nof returning <code>nil</code>, as well as IO#sysread …\n"],["sysread","Object","classes/Object.html#method-i-sysread","(io, size)","<p>cgi_runner.rb – CGI launcher.\n<p>Author: IPR – Internet Programming with Ruby – writers Copyright © …\n"],["sysread","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-sysread","(*args)","<p>Reads <code>length</code> bytes from the SSL connection.  If a\npre-allocated <code>buffer</code> is provided the data will be written …\n"],["sysread","TkTextIO","classes/TkTextIO.html#method-i-sysread","(len, buf=nil)",""],["sysseek","IO","classes/IO.html#method-i-sysseek","(p1, p2 = v2)","<p>Seeks to a given <em>offset</em> in the stream according to the value of\n<em>whence</em> (see <code>IO#seek</code> for values of <em>whence</em> …\n"],["sysseek","TkTextIO","classes/TkTextIO.html#method-i-sysseek","(offset, whence=IO::SEEK_SET)",""],["syssign","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-syssign","(p1)","<p>Computes and returns the DSA signature of <code>string</code>, where\n<code>string</code> is expected to be an already-computed …\n"],["system","Kernel","classes/Kernel.html#method-i-system","(*args)","<p>Executes <em>command…</em> in a subshell. <em>command…</em> is one of\nfollowing forms.\n\n<pre><code>commandline                 : ...</code></pre>\n"],["system","Net::FTP","classes/Net/FTP.html#method-i-system","()","<p>Returns system information.\n"],["system","REXML::DocType","classes/REXML/DocType.html#method-i-system","()","<p>This method retrieves the system identifier identifying the document&#39;s\nDTD\n<p>Method contributed by  …\n"],["system","Rake::AltSystem","classes/Rake/AltSystem.html#method-i-system","(cmd, *args)",""],["system","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-system","(command, *opts)","<p>CommandProcessor#system(command, *opts)\n\n<pre><code>  command: String\n  opts:    String\n  return:  SystemCommand\nSame ...</code></pre>\n"],["systemId","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-systemId","()","<p>VARIANT systemId the system ID\n"],["systemId","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-systemId","()","<p>VARIANT systemId the system ID\n"],["system_dir","Rake::Application","classes/Rake/Application.html#method-i-system_dir","()","<p>The directory path containing the system wide rakefiles.\n"],["system_dir","Rake::Application","classes/Rake/Application.html#method-i-system_dir","()","<p>The directory path containing the system wide rakefiles.\n"],["system_path=","Shell","classes/Shell.html#method-i-system_path-3D","(path)",""],["systmpdir","Etc","classes/Etc.html#method-c-systmpdir","()","<p>Returns system temporary directory.\n"],["sysverify","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-sysverify","(p1, p2)","<p>Verifies whether the signature is valid given the message digest input. It\ndoes so by validating <code>sig</code> …\n"],["syswrite","IO","classes/IO.html#method-i-syswrite","(p1)","<p>Writes the given string to <em>ios</em> using a low-level write. Returns\nthe number of bytes written. Do not mix …\n"],["syswrite","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-syswrite","(p1)","<p>Writes <code>string</code> to the SSL connection.\n"],["syswrite","TkTextIO","classes/TkTextIO.html#method-i-syswrite","(obj)",""],["t","Matrix","classes/Matrix.html#method-i-t","()",""],["tab_dockall","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tab_dockall","()",""],["tab_ids","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tab_ids","(pat=None)",""],["tab_names","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tab_names","(pat=None)",""],["tab_objs","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tab_objs","(pat=None)",""],["tab_pageheight","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tab_pageheight","()",""],["tab_pagewidth","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tab_pagewidth","()",""],["tab_tearoff","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tab_tearoff","(index, parent=None)",""],["tabbind","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tabbind","(tag, context, *args)","<p>def tabbind(tag, context, cmd=Proc.new, *args)\n\n<pre><code>_bind([path, &quot;bind&quot;, tagid(tag)], context, cmd, *args) ...</code></pre>\n"],["tabbind","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-tabbind","(context, *args)","<p>def tabbind(*args)\n\n<pre><code>_bind_for_event_class(Event_for_Tabs, [path, &#39;bindtabs&#39;], *args)\nself</code></pre>\n<p>end\n"],["tabbind_append","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tabbind_append","(tag, context, *args)","<p>def tabbind_append(tag, context, cmd=Proc.new, *args)\n\n<pre><code>_bind_append([path, &quot;bind&quot;, tagid(tag)], context, ...</code></pre>\n"],["tabbind_append","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-tabbind_append","(context, *args)","<p>def tabbind_append(*args)\n\n<pre><code>_bind_append_for_event_class(Event_for_Tabs, [path, &#39;bindtabs&#39;], *args)\nself</code></pre>\n"],["tabbind_remove","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tabbind_remove","(tag, context)",""],["tabbind_remove","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-tabbind_remove","(*args)",""],["tabbindinfo","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tabbindinfo","(tag, context=nil)",""],["tabbindinfo","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-tabbindinfo","(*args)",""],["tabcget","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-tabcget","(tagOrId, option)",""],["tabcget","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-tabcget","(tagOrId, option)",""],["tabcget_strict","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-tabcget_strict","(tagOrId, option)",""],["tabcget_strict","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-tabcget_strict","(tagOrId, option)",""],["tabcget_tkstring","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-tabcget_tkstring","(tagOrId, option)",""],["tabcget_tkstring","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-tabcget_tkstring","(tagOrId, option)",""],["table","CSV","classes/CSV.html#method-c-table","(path, options = Hash.new)","<p>A shortcut for:\n\n<pre><code>CSV.read( path, { headers:           true,\n                  converters:        :numeric, ...</code></pre>\n"],["table","MultiTkIp","classes/MultiTkIp.html#method-c-table","()",""],["table","MultiTkIp","classes/MultiTkIp.html#method-c-table","()",""],["table","MultiTkIp","classes/MultiTkIp.html#method-c-table","()",""],["table","MultiTkIp","classes/MultiTkIp.html#method-c-table","()",""],["table_validate","Object","classes/Object.html#method-i-table_validate","(w, idx)",""],["tabs","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-tabs","()",""],["tabs","Tk::Tile::TNotebook","classes/Tk/Tile/TNotebook.html#method-i-tabs","()",""],["tag","Object","classes/Object.html#method-i-tag","(intv_p = false)",""],["tag","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-tag","()",""],["tag","Tk::Tcllib::Tkpiechart::Slice","classes/Tk/Tcllib/Tkpiechart/Slice.html#method-i-tag","()",""],["tag","XMLRPC::XMLWriter::Abstract","classes/XMLRPC/XMLWriter/Abstract.html#method-i-tag","(name, txt)",""],["tagName","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-tagName","()","<p>BSTR tagName get the tagName of the element\n"],["tag_add","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_add","(tag, *ids)",""],["tag_bind","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_bind","(tag, seq, *args)",""],["tag_bind_append","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_bind_append","(tag, seq, *args)",""],["tag_bind_remove","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_bind_remove","(tag, seq)",""],["tag_bindinfo","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_bindinfo","(tag, seq=nil)",""],["tag_cell","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_cell","(tag, *cells)",""],["tag_cget","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tag_cget","(tagOrId, option)",""],["tag_cget","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-tag_cget","(tagOrId, option)",""],["tag_cget","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-tag_cget","(tagOrId, option)",""],["tag_cget_strict","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tag_cget_strict","(tagOrId, option)",""],["tag_cget_strict","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-tag_cget_strict","(tagOrId, option)",""],["tag_cget_strict","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-tag_cget_strict","(tagOrId, option)",""],["tag_cget_tkstring","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tag_cget_tkstring","(tagOrId, option)",""],["tag_cget_tkstring","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-tag_cget_tkstring","(tagOrId, option)",""],["tag_cget_tkstring","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-tag_cget_tkstring","(tagOrId, option)",""],["tag_class","Syck","classes/Syck.html#method-c-tag_class","( tag, cls )","<p>Associates a taguri <em>tag</em> with a Ruby class <em>cls</em>.  The\ntaguri is used to give types to classes when loading …\n"],["tag_class","Syck","classes/Syck.html#method-c-tag_class","( tag, cls )","<p>Associates a taguri <em>tag</em> with a Ruby class <em>cls</em>.  The\ntaguri is used to give types to classes when loading …\n"],["tag_col","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_col","(tag, *cols)",""],["tag_col_reset","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_col_reset","(*cols)",""],["tag_configinfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tag_configinfo","(tagOrId, slot=nil)",""],["tag_configinfo","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-tag_configinfo","(tagOrId, slot=nil)",""],["tag_configinfo","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-tag_configinfo","(tagOrId, slot=nil)",""],["tag_configure","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tag_configure","(tagOrId, slot, value=None)",""],["tag_configure","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-tag_configure","(tagOrId, slot, value=None)",""],["tag_configure","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-tag_configure","(tagOrId, slot, value=None)",""],["tag_delete","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_delete","(tag, *ids)",""],["tag_delete","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_delete","(tag)",""],["tag_end","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-tag_end","(name)","<p>Called when the end tag is reached.  In the case of &lt;tag/&gt;, tag_end\nwill be called immidiately …\n"],["tag_end","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-tag_end","(name)",""],["tag_exist?","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_exist-3F","(tag)",""],["tag_focus","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_focus","(tag)",""],["tag_forget","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_forget","(tag)",""],["tag_include?","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_include-3F","(tag, idx)",""],["tag_key","Tk::Tcllib::Tkpiechart::Pie","classes/Tk/Tcllib/Tkpiechart/Pie.html#method-i-tag_key","()",""],["tag_key","Tk::Tcllib::Tkpiechart::Slice","classes/Tk/Tcllib/Tkpiechart/Slice.html#method-i-tag_key","()",""],["tag_lower","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_lower","(tag, target=None)",""],["tag_name","RSS::Element","classes/RSS/Element.html#method-i-tag_name","()",""],["tag_names","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_names","(id=nil)",""],["tag_names","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_names","(pat=None)",""],["tag_nodes","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tag_nodes","(tag)",""],["tag_raise","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_raise","(tag, target=None)",""],["tag_reset","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_reset","(*cells)",""],["tag_row","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_row","(tag, *rows)",""],["tag_row_reset","Tk::TkTable","classes/Tk/TkTable.html#method-i-tag_row_reset","(*rows)",""],["tag_start","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-tag_start","(name, attrs)","<p>Called when a tag is encountered. @p name the tag name @p attrs an array of\narrays of attribute/value …\n"],["tag_start","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-tag_start","(name, attributes)",""],["tag_subclasses?","Syck::DomainType","classes/Syck/DomainType.html#method-c-tag_subclasses-3F","()",""],["tag_subclasses?","Syck::Object","classes/Syck/Object.html#method-c-tag_subclasses-3F","()",""],["tag_subclasses?","Syck::PrivateType","classes/Syck/PrivateType.html#method-c-tag_subclasses-3F","()",""],["tagcget","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tagcget","(tagOrId, option)",""],["tagcget_strict","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tagcget_strict","(tagOrId, option)",""],["tagcget_tkstring","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tagcget_tkstring","(tagOrId, option)","<p>Treeview Tag\n"],["tagconfiginfo","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tagconfiginfo","(tagOrId, slot=nil)",""],["tagconfigure","Tk::Tile::TreeviewConfig","classes/Tk/Tile/TreeviewConfig.html#method-i-tagconfigure","(tagOrId, slot, value=None)",""],["tagfont_configinfo","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-tagfont_configinfo","(tagOrId, key = nil)",""],["tagfont_configure","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-tagfont_configure","(tagOrId, slot)",""],["tagfont_copy","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-tagfont_copy","(tagOrId, win, wintag=nil, winkey=nil, targetkey=nil)",""],["tagfontobj","TkTreatItemFont","classes/TkTreatItemFont.html#method-i-tagfontobj","(tagOrId, key = nil)",""],["tagged_classes","Syck","classes/Syck.html#method-c-tagged_classes","()","<p>Returns the complete dictionary of taguris, paired with classes.  The key\nfor the dictionary is the full …\n"],["tagged_classes","Syck","classes/Syck.html#method-c-tagged_classes","()","<p>Returns the complete dictionary of taguris, paired with classes.  The key\nfor the dictionary is the full …\n"],["tagid","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-tagid","(tag)",""],["tagid","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-tagid","(tag)",""],["tagid","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tagid","(tab)",""],["tagid","Tk::BWidget::ButtonBox","classes/Tk/BWidget/ButtonBox.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-tagid","(tag)",""],["tagid","Tk::BWidget::NoteBook","classes/Tk/BWidget/NoteBook.html#method-i-tagid","(id)",""],["tagid","Tk::BWidget::PagesManager","classes/Tk/BWidget/PagesManager.html#method-i-tagid","(id)",""],["tagid","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-tagid","(tag)",""],["tagid","Tk::Iwidgets::Buttonbox","classes/Tk/Iwidgets/Buttonbox.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Checkbox","classes/Tk/Iwidgets/Checkbox.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Dialogshell","classes/Tk/Iwidgets/Dialogshell.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Messagebox","classes/Tk/Iwidgets/Messagebox.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Panedwindow","classes/Tk/Iwidgets/Panedwindow.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Radiobox","classes/Tk/Iwidgets/Radiobox.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Tabset","classes/Tk/Iwidgets/Tabset.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Iwidgets::Toolbar","classes/Tk/Iwidgets/Toolbar.html#method-i-tagid","(tagOrId)",""],["tagid","Tk::Listbox","classes/Tk/Listbox.html#method-i-tagid","(id)",""],["tagid","Tk::Menu","classes/Tk/Menu.html#method-i-tagid","(id)",""],["tagid","Tk::TkTable","classes/Tk/TkTable.html#method-i-tagid","(tag)","<p>def set_spans(*pairs)\n\n<pre><code>if pairs[0].kind_of?(Array)\n  # [idx, val], [idx, val], ...\n  args = []\n  pairs.each{|idx, ...\n</code></pre>\n"],["tagid","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-tagid","(mixed_id)",""],["tagid2obj","Tk::BLT::Table","classes/Tk/BLT/Table.html#method-i-tagid2obj","(tagid)",""],["tagid2obj","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-tagid2obj","(tagid)",""],["tagid2obj","Tk::TkTable","classes/Tk/TkTable.html#method-i-tagid2obj","(tagid)",""],["tagindex","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-tagindex","(tab)",""],["tagurize","Object::Syck::Resolver","classes/Object/Syck/Resolver.html#method-i-tagurize","(p1)","<p>YAML::Syck::Resolver#tagurize\n"],["tagurize","Psych","classes/Psych.html#method-c-tagurize","(thing)",""],["tagurize","Syck","classes/Syck.html#method-c-tagurize","( val )","<p>Convert a type_id to a taguri\n"],["tagurize","Syck","classes/Syck.html#method-c-tagurize","( val )","<p>Convert a type_id to a taguri\n"],["taint","Delegator","classes/Delegator.html#method-i-taint","","<p>Taint both the object returned by _<em>getobj</em>_ and self.\n"],["taint","Object","classes/Object.html#method-i-taint","()","<p>Marks <em>obj</em> as tainted—if the <code>$SAFE</code> level is set\nappropriately, many method calls which might alter the …\n"],["taint","Pathname","classes/Pathname.html#method-i-taint","()",""],["tainted?","Object","classes/Object.html#method-i-tainted-3F","()","<p>Returns <code>true</code> if the object is tainted.\n"],["tak","Object","classes/Object.html#method-i-tak","(x, y, z)",""],["take","Array","classes/Array.html#method-i-take","(p1)","<p>Returns first n elements from <em>ary</em>.\n\n<pre><code>a = [1, 2, 3, 4, 5, 0]\na.take(3)             #=&gt; [1, 2, 3]\n</code></pre>\n"],["take","Enumerable","classes/Enumerable.html#method-i-take","(p1)","<p>Returns first n elements from <em>enum</em>.\n\n<pre><code>a = [1, 2, 3, 4, 5, 0]\na.take(3)             #=&gt; [1, 2, 3]\n</code></pre>\n"],["take","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-take","(tuple, sec=nil, &block)","<p>Removes <code>tuple</code>\n"],["take","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-take","(tuple, sec=nil, &block)","<p>Takes <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#take.\n"],["take","TupleSpace","classes/TupleSpace.html#method-i-take","(template, non_block=false)",""],["take_while","Array","classes/Array.html#method-i-take_while","()","<p>Passes elements to the block until the block returns <code>nil</code> or\n<code>false</code>, then stops iterating and returns an …\n"],["take_while","Enumerable","classes/Enumerable.html#method-i-take_while","()","<p>Passes elements to the block until the block returns <code>nil</code> or\n<code>false</code>, then stops iterating and returns an …\n"],["tan","CMath","classes/CMath.html#method-c-tan","(z)","<p>returns the tangent of <code>z</code>, where <code>z</code> is given in\nradians\n"],["tan","Math","classes/Math.html#method-c-tan","(p1)","<p>Returns the tangent of <em>x</em> (expressed in radians).\n"],["tan!","CMath","classes/CMath.html#method-c-tan-21","(z)",""],["tanh","CMath","classes/CMath.html#method-c-tanh","(z)","<p>returns the hyperbolic tangent of <code>z</code>, where <code>z</code> is\ngiven in radians\n"],["tanh","Math","classes/Math.html#method-c-tanh","(p1)","<p>Computes the hyperbolic tangent of <em>x</em> (expressed in radians).\n"],["tanh!","CMath","classes/CMath.html#method-c-tanh-21","(z)",""],["tap","Object","classes/Object.html#method-i-tap","()","<p>Yields <code>x</code> to the block, and then returns <code>x</code>. The\nprimary purpose of this method is to “tap into” …\n"],["tar_bz2_file","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-tar_bz2_file","()",""],["tar_gz_file","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-tar_gz_file","()",""],["tarai","Object","classes/Object.html#method-i-tarai","( x, y, z )",""],["target","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-target","()","<p>BSTR target the target\n"],["target","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-target","()",""],["target_handler","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-target_handler","(win, datatype, cmd=Proc.new, *args)",""],["target_handler_list","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-target_handler_list","(win)",""],["target_names","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-target_names","(pat=None)",""],["task","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-task","(txt, time_begin, time_end, completed=0.0)",""],["task_defined?","Rake::Task","classes/Rake/Task.html#method-i-task_defined-3F","(task_name)","<p>TRUE if the task name is already defined.\n"],["taskbar_add","Tk::Winico","classes/Tk/Winico.html#method-i-taskbar_add","(keys = {})",""],["taskbar_delete","Tk::Winico","classes/Tk/Winico.html#method-i-taskbar_delete","()",""],["taskbar_modify","Tk::Winico","classes/Tk/Winico.html#method-i-taskbar_modify","(keys = {})",""],["tasks","Rake::NameSpace","classes/Rake/NameSpace.html#method-i-tasks","()","<p>Return the list of tasks defined in this and nested namespaces.\n"],["tasks","Rake::Task","classes/Rake/Task.html#method-i-tasks","()","<p>List of all defined tasks.\n"],["tasks","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-tasks","()","<p>List of all defined tasks in this application.\n"],["tasks_in_scope","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-tasks_in_scope","(scope)","<p>List of all the tasks defined in the given scope (and its sub-scopes).\n"],["tcl_match_endOfWord","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_endOfWord","()",""],["tcl_match_endOfWord=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_endOfWord-3D","(val)",""],["tcl_match_startOfNextWord","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_startOfNextWord","()",""],["tcl_match_startOfNextWord=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_startOfNextWord-3D","(val)",""],["tcl_match_startOfPreviousWord","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_startOfPreviousWord","()",""],["tcl_match_startOfPreviousWord=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_startOfPreviousWord-3D","(val)",""],["tcl_match_wordBreakAfter","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_wordBreakAfter","()",""],["tcl_match_wordBreakAfter=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_wordBreakAfter-3D","(val)",""],["tcl_match_wordBreakBefore","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_wordBreakBefore","()",""],["tcl_match_wordBreakBefore=","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-tcl_match_wordBreakBefore-3D","(val)",""],["tcp","Addrinfo","classes/Addrinfo.html#method-c-tcp","(p1, p2)","<p>returns an addrinfo object for TCP address.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, &quot;smtp&quot;) #=&gt; #&lt;Addrinfo: 127.0.0.1:25 ...\n</code></pre>\n"],["tcp_server_loop","Socket","classes/Socket.html#method-c-tcp_server_loop","(host=nil, port)","<p>creates a TCP/IP server on <em>port</em> and calls the block for each\nconnection accepted. The block is called …\n"],["tcp_server_sockets","Socket","classes/Socket.html#method-c-tcp_server_sockets","(host=nil, port)","<p>creates TCP/IP server sockets for <em>host</em> and <em>port</em>.\n<em>host</em> is optional.\n<p>If no block given, it returns an array …\n"],["tearoff","Tk::BLT::Tabset::Tab","classes/Tk/BLT/Tabset/Tab.html#method-i-tearoff","(name=None)",""],["tearoffcommand","Tk::Menu","classes/Tk/Menu.html#method-i-tearoffcommand","(cmd=Proc.new)",""],["tee","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-tee","(file)",""],["tell","ARGF","classes/ARGF.html#method-i-tell","()","<p>Returns the current offset (in bytes) of the current file in\n<code>ARGF</code>.\n\n<pre><code>ARGF.pos    #=&gt; 0\nARGF.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["tell","Dir","classes/Dir.html#method-i-tell","()","<p>Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;)\nd.tell   #=&gt; 0\nd.read  ...\n</code></pre>\n"],["tell","IO","classes/IO.html#method-i-tell","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.pos    #=&gt; 0\nf.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["tell","StringIO","classes/StringIO.html#method-i-tell","()","<p>Returns the current offset (in bytes) of <strong>strio</strong>.\n"],["tell","TkTextIO","classes/TkTextIO.html#method-i-tell","()",""],["tell","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-tell","()","<p>Total number of output bytes output so far.\n"],["tell","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-tell","()","<p>Total number of input bytes read so far.\n"],["tell_index","TkTextIO","classes/TkTextIO.html#method-i-tell_index","()",""],["telnetmode","Net::Telnet","classes/Net/Telnet.html#method-i-telnetmode","(mode = nil)","<p>Set telnet command interpretation on (<code>mode</code> == true) or off\n(<code>mode</code> == false), or return the current value …\n"],["telnetmode=","Net::Telnet","classes/Net/Telnet.html#method-i-telnetmode-3D","(mode)","<p>Turn telnet command interpretation on (true) or off (false).  It should be\non for true telnet sessions, …\n"],["template_dir_for","RDoc::Options","classes/RDoc/Options.html#method-i-template_dir_for","(template)","<p>Finds the template dir for <code>template</code>\n"],["template_for","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-template_for","(file)","<p>Retrieves a cache template for <code>file</code>, if present, or fills the\ncache.\n"],["template_result","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-template_result","(template, context, template_file)","<p>Creates the result for <code>template</code> with <code>context</code>.  If\nan error is raised a Pathname <code>template_file</code> will indicate …\n"],["ten","Function","classes/Function.html#method-i-ten","()",""],["terminal_width","Rake::Application","classes/Rake/Application.html#method-i-terminal_width","()",""],["terminal_width","Rake::Application","classes/Rake/Application.html#method-i-terminal_width","()",""],["terminate","GetoptLong","classes/GetoptLong.html#method-i-terminate","()","<p>Explicitly terminate option processing.\n"],["terminate","OptionParser","classes/OptionParser.html#method-c-terminate","(arg = nil)",""],["terminate","OptionParser","classes/OptionParser.html#method-i-terminate","(arg = nil)","<p>Terminates option parsing. Optional parameter <code>arg</code> is a string\npushed back to be the first non-option …\n"],["terminate","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-terminate","()",""],["terminate","StringScanner","classes/StringScanner.html#method-i-terminate","()","<p>Set the scan pointer to the end of the string and clear matching data.\n"],["terminate","Thread","classes/Thread.html#method-i-terminate","()","<p>Terminates <em>thr</em> and schedules another thread to be run. If this\nthread is already marked to be killed, …\n"],["terminate_interaction","Gem::MockGemUi","classes/Gem/MockGemUi.html#method-i-terminate_interaction","(status=0)",""],["terminate_interaction","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-terminate_interaction","(status = 0)","<p>Terminate the application with exit code <code>status</code>, running any\nexit handlers that might have been defined. …\n"],["terminate_interaction","Gem::UserInteraction","classes/Gem/UserInteraction.html#method-i-terminate_interaction","(*args)",""],["terminate_job","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-terminate_job","(command)","<p>terminate a job\n"],["terminated?","Gem::MockGemUi","classes/Gem/MockGemUi.html#method-i-terminated-3F","()",""],["terminated?","GetoptLong","classes/GetoptLong.html#method-i-terminated-3F","()","<p>Returns true if option processing has terminated, false otherwise.\n"],["termsig","Process::Status","classes/Process/Status.html#method-i-termsig","()","<p>Returns the number of the signal that caused <em>stat</em> to terminate (or\n<code>nil</code> if self was not terminated by …\n"],["test","Kernel","classes/Kernel.html#method-i-test","(*args)","\n<pre><code>Uses the integer &lt;i&gt;aCmd&lt;/i&gt; to perform various tests on\n&lt;i&gt;file1&lt;/i&gt; (first table below) or on &lt;i&gt;file1&lt;/i&gt; ...</code></pre>\n"],["test","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-test","(command, file1, file2=nil)",""],["test_button","Test1","classes/Test1.html#method-i-test_button","(ip, parent)","<p>button のサンプル.\n"],["test_canvas","Test1","classes/Test1.html#method-i-test_canvas","(ip, parent)","<p>canvas のサンプル.\n"],["test_checkbutton","Test1","classes/Test1.html#method-i-test_checkbutton","(ip, parent)","<p>checkbutton のサンプル.\n"],["test_entry","Test1","classes/Test1.html#method-i-test_entry","(ip, parent)","<p>entry のサンプル.\n"],["test_file","Gem::Specification","classes/Gem/Specification.html#method-i-test_file","()","<p>Singular accessor for #test_files\n"],["test_file=","Gem::Specification","classes/Gem/Specification.html#method-i-test_file-3D","(file)","<p>Singular accessor for #test_files\n"],["test_files","Gem::Specification","classes/Gem/Specification.html#method-i-test_files","()","<p>Test files included in this gem.  You cannot append to this accessor, you\nmust assign to it.\n"],["test_files=","Gem::Specification","classes/Gem/Specification.html#method-i-test_files-3D","(files)","<p>Set test_files to <code>files</code>, ensuring it is an array.\n"],["test_label","Test1","classes/Test1.html#method-i-test_label","(ip, parent)","<p>label のサンプル.\n"],["test_listbox","Test1","classes/Test1.html#method-i-test_listbox","(ip, parent)","<p>listbox のサンプル.\n"],["test_lists","Object","classes/Object.html#method-i-test_lists","()",""],["test_menu","Test1","classes/Test1.html#method-i-test_menu","(ip, parent)","<p>menu のサンプル.\n"],["test_modal","Test1","classes/Test1.html#method-i-test_modal","(ip, parent)","<p>modal なウィジェットのサンプル.\n"],["test_radiobutton","Test1","classes/Test1.html#method-i-test_radiobutton","(ip, parent)","<p>radiobutton のサンプル.\n"],["test_raise","Test1","classes/Test1.html#method-i-test_raise","(ip, parent)","<p>raise/lower のサンプル.\n"],["test_scale","Test1","classes/Test1.html#method-i-test_scale","(ip, parent)","<p>scale のサンプル.\n"],["test_text","Test1","classes/Test1.html#method-i-test_text","(ip, parent)","<p>text のサンプル.\n"],["text","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXMLDOMText","classes/IXMLDOMText.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","IXTLRuntime","classes/IXTLRuntime.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-text","()","<p>BSTR text text content of the node and subtree\n"],["text","PrettyPrint","classes/PrettyPrint.html#method-i-text","(obj, width=obj.length)","<p>This adds <code>obj</code> as a text of <code>width</code> columns in\nwidth.\n<p>If <code>width</code> is not specified, obj.length is used.\n"],["text","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-text","(obj, width=nil)",""],["text","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-text","()","<p>The raw text\n"],["text","RDoc::Markup::Verbatim","classes/RDoc/Markup/Verbatim.html#method-i-text","()","<p>The text of the section\n"],["text","REXML::Element","classes/REXML/Element.html#method-i-text","( path = nil )","<p>A convenience method which returns the String value of the <em>first</em>\nchild text element, if one exists, and …\n"],["text","REXML::Functions","classes/REXML/Functions.html#method-c-text","( )",""],["text","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-text","(text)","<p>Called when text is encountered in the document @p text the text content.\n"],["text","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-text","(data)",""],["text","Tk::BWidget::ProgressDlg","classes/Tk/BWidget/ProgressDlg.html#method-i-text","()",""],["text","XMLRPC::XMLWriter::Simple","classes/XMLRPC/XMLWriter/Simple.html#method-i-text","(txt)",""],["text","XMLRPC::XMLWriter::XMLParser","classes/XMLRPC/XMLWriter/XMLParser.html#method-i-text","(txt)",""],["text=","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXMLDOMText","classes/IXMLDOMText.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","IXTLRuntime","classes/IXTLRuntime.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-text-3D","(arg0)","<p>VOID text text content of the node and subtree\n"],["text=","REXML::Element","classes/REXML/Element.html#method-i-text-3D","( text )","<p>Sets the first Text child of this object.  See text() for a discussion\nabout Text children.\n<p>If a Text …\n"],["text=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-text-3D","( foo )",""],["text=","Tk::BWidget::ProgressDlg","classes/Tk/BWidget/ProgressDlg.html#method-i-text-3D","(txt)",""],["text?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-text-3F","()","<p>Content: [ String raw_text, String unnormalized_text ]\n"],["textB1Move","Object","classes/Object.html#method-i-textB1Move","(w,x,y)",""],["textB1Press","Object","classes/Object.html#method-i-textB1Press","(w,x,y)",""],["textBs","Object","classes/Object.html#method-i-textBs","(w)",""],["textDel","Object","classes/Object.html#method-i-textDel","(w)",""],["textEnter","Object","classes/Object.html#method-i-textEnter","(w)",""],["textInsert","Object","classes/Object.html#method-i-textInsert","(w, string)",""],["textLoadFile","Object","classes/Object.html#method-i-textLoadFile","(w,file)","<p>textLoadFile – This method below loads a file into a text widget,\ndiscarding the previous contents of …\n"],["textPaste","Object","classes/Object.html#method-i-textPaste","(w, pos)",""],["textSearch","Object","classes/Object.html#method-i-textSearch","(w, string, tag)","<p>textSearch – Search for all instances of a given string in a text widget\nand apply a given tag to each …\n"],["textToggle","Object","classes/Object.html#method-i-textToggle","(cmd1,sleep1,cmd2,sleep2)","<p>textToggle – This method is invoked repeatedly to invoke two commands at\nperiodic intervals.  It normally …\n"],["textWinBigB2","Object","classes/Object.html#method-i-textWinBigB2","(w)","<p>methods\n"],["textWinBigH2","Object","classes/Object.html#method-i-textWinBigH2","(w)",""],["textWinBigP2","Object","classes/Object.html#method-i-textWinBigP2","(w)",""],["textWinSmallB2","Object","classes/Object.html#method-i-textWinSmallB2","(w)",""],["textWinSmallH2","Object","classes/Object.html#method-i-textWinSmallH2","(w)",""],["textWinSmallP2","Object","classes/Object.html#method-i-textWinSmallP2","(w)",""],["textWindDel","Object","classes/Object.html#method-i-textWindDel","(w)",""],["textWindDel2","Object","classes/Object.html#method-i-textWindDel2","(w)",""],["textWindOff","Object","classes/Object.html#method-i-textWindOff","(w)",""],["textWindOff2","Object","classes/Object.html#method-i-textWindOff2","(w)",""],["textWindOn","Object","classes/Object.html#method-i-textWindOn","(w,f)",""],["textWindOn2","Object","classes/Object.html#method-i-textWindOn2","(w,f)",""],["textWindPlot","Object","classes/Object.html#method-i-textWindPlot","(t)",""],["textWindPlot2","Object","classes/Object.html#method-i-textWindPlot2","(t)",""],["text_apply","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_apply","()",""],["text_ascii","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-text_ascii","(first, last)",""],["text_break","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-text_break","(idx)",""],["text_cancel","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_cancel","()",""],["text_cget","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-text_cget","(option)",""],["text_cget_strict","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-text_cget_strict","(option)",""],["text_cget_tkstring","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-text_cget_tkstring","(option)",""],["text_configinfo","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-text_configinfo","(slot=nil)",""],["text_configure","Tk::BLT::Treeview::ConfigMethod","classes/Tk/BLT/Treeview/ConfigMethod.html#method-i-text_configure","(slot, value=None)",""],["text_delete","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_delete","(first, last)",""],["text_delete","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-text_delete","(first, last)",""],["text_field","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-text_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a text field Input element, as a String.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nits initial …\n"],["text_find","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-text_find","(txt, *args)",""],["text_format","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-text_format","(dat, len)",""],["text_get","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_get","(x, y)",""],["text_get_root","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_get_root","(x, y)",""],["text_html","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-text_html","(first, last)",""],["text_icursor","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_icursor","(idx)",""],["text_index","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_index","(idx)",""],["text_insert","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_insert","(idx, str)",""],["text_insert","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-text_insert","(idx, txt)",""],["text_layout","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-text_layout","(font, text, keys={})",""],["text_layout","Tk::TreeCtrl","classes/Tk/TreeCtrl.html#method-c-text_layout","(font, text, keys={})",""],["text_selection_adjust","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_selection_adjust","(idx)",""],["text_selection_clear","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_selection_clear","()",""],["text_selection_from","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_selection_from","(idx)",""],["text_selection_present","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_selection_present","()",""],["text_selection_range","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_selection_range","(start, last)",""],["text_selection_to","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-text_selection_to","(idx)",""],["text_table","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-text_table","(idx, imgs=None, attrs=None)",""],["textarea","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-textarea","(name = \"\", cols = 70, rows = 10)","<p>Generate a TextArea element, as a String.\n<p><code>name</code> is the name of the textarea.  <code>cols</code> is the\nnumber of columns …\n"],["textbackground","TkTextFrame","classes/TkTextFrame.html#method-i-textbackground","(color = nil)","<p>set background color of text widget\n"],["textbg_info","TkTextFrame","classes/TkTextFrame.html#method-i-textbg_info","()",""],["textbind","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-textbind","(context, *args)","<p>def textbind(*args)\n\n<pre><code>_bind_for_event_class(Event_for_Items, [path, &#39;bindText&#39;], *args)\nself</code></pre>\n<p>end\n"],["textbind","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-textbind","(context, *args)","<p>def textbind(*args)\n\n<pre><code>_bind_for_event_class(Event_for_Items, [path, &#39;bindText&#39;], *args)\nself</code></pre>\n<p>end\n"],["textbind_append","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-textbind_append","(context, *args)","<p>def textbind_append(*args)\n\n<pre><code>_bind_append_for_event_class(Event_for_Items, [path, &#39;bindText&#39;], *args)\nself</code></pre>\n"],["textbind_append","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-textbind_append","(context, *args)","<p>def textbind_append(*args)\n\n<pre><code>_bind_append_for_event_class(Event_for_Items, [path, &#39;bindText&#39;], *args)\nself</code></pre>\n"],["textbind_remove","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-textbind_remove","(*args)",""],["textbind_remove","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-textbind_remove","(*args)",""],["textbindinfo","Tk::BWidget::ListBox","classes/Tk/BWidget/ListBox.html#method-i-textbindinfo","(*args)",""],["textbindinfo","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-textbindinfo","(*args)",""],["textborderwidth","TkTextFrame","classes/TkTextFrame.html#method-i-textborderwidth","(width = nil)",""],["textcolor","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-textcolor","(name=None)",""],["textfont","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-textfont","(fnt=None)",""],["textinput","RSS::Rss","classes/RSS/Rss.html#method-i-textinput","()",""],["textrelief","TkTextFrame","classes/TkTextFrame.html#method-i-textrelief","(type)","<p>set relief of text widget\n"],["texts","REXML::Element","classes/REXML/Element.html#method-i-texts","()","<p>Get an array of all Text children. IMMUTABLE\n"],["textvariable","Tk::BWidget::ProgressDlg","classes/Tk/BWidget/ProgressDlg.html#method-i-textvariable","()",""],["tgz_file","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-tgz_file","()",""],["the_answer_to_life_the_universe_and_everything","Object","classes/Object.html#method-i-the_answer_to_life_the_universe_and_everything","()",""],["theme_create","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-theme_create","(name, keys=nil)",""],["theme_names","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-theme_names","()",""],["theme_settings","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-theme_settings","(name, cmd=nil, &b)",""],["theme_use","Tk::Tile::Style","classes/Tk/Tile/Style.html#method-i-theme_use","(name)",""],["themes","Tk::Tile","classes/Tk/Tile.html#method-c-themes","(glob_ptn = nil)",""],["themes","Tk::Tile","classes/Tk/Tile.html#method-c-themes","(glob_ptn = nil)",""],["themes","Tk::Tile","classes/Tk/Tile.html#method-c-themes","(glob_ptn = nil)",""],["think","Object","classes/Object.html#method-i-think","(n)",""],["thnum","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-thnum","()",""],["thread","DRb","classes/DRb.html#method-c-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["thread","IRB::JobManager","classes/IRB/JobManager.html#method-i-thread","(key)",""],["thread","Net::IMAP","classes/Net/IMAP.html#method-i-thread","(algorithm, search_keys, charset)","<p>As for #search(), but returns message sequence numbers in threaded format,\nas a Net::IMAP::ThreadMember …\n"],["thread_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-thread_eval_proc","(*args)",""],["thread_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-thread_eval_proc","(*args)",""],["thread_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-thread_eval_proc","(*args)",""],["thread_eval_proc","MultiTkIp","classes/MultiTkIp.html#method-i-thread_eval_proc","(*args)",""],["thread_list","DEBUGGER__","classes/DEBUGGER__.html#method-i-thread_list","(num)",""],["thread_list_all","DEBUGGER__","classes/DEBUGGER__.html#method-i-thread_list_all","()",""],["thread_tkwait","TkTimer","classes/TkTimer.html#method-i-thread_tkwait","()",""],["thread_tkwait","TkTimer","classes/TkTimer.html#method-i-thread_tkwait","()",""],["thread_tkwait","TkVariable","classes/TkVariable.html#method-i-thread_tkwait","()",""],["thread_tkwait","TkVariable","classes/TkVariable.html#method-i-thread_tkwait","()",""],["thread_wait","TkTimer","classes/TkTimer.html#method-i-thread_wait","(check_root = false)",""],["thread_wait","TkTimer","classes/TkTimer.html#method-i-thread_wait","(check_root = false)",""],["thread_wait","TkVariable","classes/TkVariable.html#method-i-thread_wait","(check_root = false)",""],["thread_wait","TkVariable","classes/TkVariable.html#method-i-thread_wait","(check_root = false)",""],["throw","Kernel","classes/Kernel.html#method-i-throw","(p1, p2 = v2)","<p>Transfers control to the end of the active <code>catch</code> block waiting\nfor <em>tag</em>. Raises <code>ArgumentError</code> if there …\n"],["thursday?","Date","classes/Date.html#method-i-thursday-3F","()","<p>Returns true if the date is Thursday.\n"],["thursday?","Time","classes/Time.html#method-i-thursday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Thursday.\n\n<pre><code>t = Time.local(1995, 12, 21)     #=&gt; 1995-12-21 00:00:00 -0600 ...\n</code></pre>\n"],["tick","Object","classes/Object.html#method-i-tick","()",""],["time","Gem","classes/Gem.html#method-c-time","(msg, width = 0, display = Gem.configuration.verbose)","<p>Prints the amount of time the supplied block takes to run using the debug\nUI output.\n"],["time","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-time","()","<p>Gets start time of the session.\n"],["time","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-time","()",""],["time","Rake::FtpFile","classes/Rake/FtpFile.html#method-c-time","()",""],["time2wtime","Win32::Registry","classes/Win32/Registry.html#method-c-time2wtime","(time)","<p>Convert Time object or Integer object into 64-bit FILETIME.\n"],["time=","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-time-3D","(p1)","<p>Sets start time of the session. Time resolution is in seconds.\n"],["time=","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-time-3D","(p1)",""],["time=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-time-3D","(p1)",""],["time_delta_string","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-time_delta_string","(seconds)","<p>Return a string describing the amount of time in the given number of\nseconds in terms a human can understand …\n"],["timeout","Object","classes/Object.html#method-i-timeout","(n, e = nil, &block)","<p>Identical to:\n\n<pre><code>Timeout::timeout(n, e, &amp;block).</code></pre>\n<p>This method is deprecated and provided only for backwards …\n"],["timeout","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-timeout","()","<p>Gets how long until the session expires in seconds.\n"],["timeout","Timeout","classes/Timeout.html#method-c-timeout","(sec, klass = nil)","<p>Perform an operation in a block, raising an error if it takes longer than\n<code>sec</code> seconds to complete.\n<p><code>sec</code> … &mdash; "],["timeout","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-timeout","(seconds, exception=Timeout::Error)","<p>Executes the passed block and raises <code>exception</code> if execution\ntakes more than <code>seconds</code>.\n<p>If <code>seconds</code> is zero …\n"],["timeout=","Curses","classes/Curses.html#method-c-timeout-3D","(p1)","<p>Sets block and non-blocking reads for the window.\n<p>If delay is negative, blocking read is used (i.e., waits …\n"],["timeout=","Curses::Window","classes/Curses/Window.html#method-i-timeout-3D","(p1)","<p>Sets block and non-blocking reads for the window.\n<p>If delay is negative, blocking read is used (i.e., waits …\n"],["timeout=","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-timeout-3D","(p1)","<p>Sets how long until the session expires in seconds.\n"],["timeout=","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-timeout-3D","(new_timeout)",""],["times","Integer","classes/Integer.html#method-i-times","()","<p>Iterates block <em>int</em> times, passing in values from zero to\n<em>int</em> - 1.\n<p>If no block is given, an enumerator …\n"],["times","Integer","classes/Integer.html#method-i-times","()","<p>Iterates block <em>int</em> times, passing in values from zero to\n<em>int</em> - 1.\n<p>If no block is given, an enumerator …\n"],["times","Process","classes/Process.html#method-c-times","()","<p>Returns a <code>Tms</code> structure (see <code>Struct::Tms</code>) that\ncontains user and system CPU times for this process, and …\n"],["timestamp","Rake::FileCreationTask","classes/Rake/FileCreationTask.html#method-i-timestamp","()","<p>Time stamp for file creation task.  This time stamp is earlier than any\nother time stamp.\n"],["timestamp","Rake::FileTask","classes/Rake/FileTask.html#method-i-timestamp","()","<p>Time stamp for file task.\n"],["timestamp","Rake::Task","classes/Rake/Task.html#method-i-timestamp","()","<p>Timestamp for this task.  Basic tasks return the current time for their\ntime stamp.  Other tasks can …\n"],["timestamp","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-timestamp","()","<p>returns the timestamp as a time object.\n<p><em>ancillarydata</em> should be one of following type:\n<p>SOL_SOCKET/SCM_TIMESTAMP …\n"],["title","Tk::Iwidgets::Scrolledhtml","classes/Tk/Iwidgets/Scrolledhtml.html#method-i-title","()",""],["title","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-title","(str)",""],["title","Tk::Wm","classes/Tk/Wm.html#method-c-title","(win, str=nil)",""],["title","Tk::Wm","classes/Tk/Wm.html#method-i-title","(str=nil)",""],["title","TkConsole","classes/TkConsole.html#method-c-title","(str=None)",""],["titlebackground","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-titlebackground","(bg)","<p>set title background color\n"],["titlebackground","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-titlebackground","(bg)","<p>set title background color\n"],["titleborder","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-titleborder","(width)","<p>set title borders\n"],["titleborder","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-titleborder","(width)","<p>set title borders\n"],["titlecommand","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-titlecommand","(idx, cmd=Proc.new)","<p>set title cmds\n"],["titlecommand","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-titlecommand","(idx, cmd=Proc.new)","<p>set title cmds\n"],["titleconfig","TkMultiListbox","classes/TkMultiListbox.html#method-i-titleconfig","(font, fg, bg)","<p>set options of titles\n"],["titlefont","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-titlefont","(font)","<p>set title font\n"],["titlefont","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-titlefont","(font)","<p>set title font\n"],["titleforeground","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-titleforeground","(fg)","<p>set title foreground color\n"],["titleforeground","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-titleforeground","(fg)","<p>set title foreground color\n"],["titleinvoke","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-titleinvoke","(idx)","<p>call title cmds\n"],["titleinvoke","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-titleinvoke","(idx)","<p>call title cmds\n"],["titlelabels","TkMultiColumnList","classes/TkMultiColumnList.html#method-i-titlelabels","(*indices)","<p>get label widgets of listbox titles\n"],["titlelabels","TkMultiListFrame","classes/TkMultiListFrame.html#method-i-titlelabels","(*indices)","<p>get label widgets of listbox titles\n"],["titlelabels","TkMultiListbox","classes/TkMultiListbox.html#method-i-titlelabels","(*indices)","<p>get label widgets of listbox titles\n"],["tk_cmd_tbl","MultiTkIp","classes/MultiTkIp.html#method-c-tk_cmd_tbl","()",""],["tk_cmd_tbl","MultiTkIp","classes/MultiTkIp.html#method-c-tk_cmd_tbl","()",""],["tk_cmd_tbl","MultiTkIp","classes/MultiTkIp.html#method-c-tk_cmd_tbl","()",""],["tk_cmd_tbl","MultiTkIp","classes/MultiTkIp.html#method-c-tk_cmd_tbl","()",""],["tk_object_table","MultiTkIp","classes/MultiTkIp.html#method-c-tk_object_table","(id)",""],["tk_object_table","MultiTkIp","classes/MultiTkIp.html#method-c-tk_object_table","(id)",""],["tk_object_table","MultiTkIp","classes/MultiTkIp.html#method-c-tk_object_table","(id)",""],["tk_object_table","MultiTkIp","classes/MultiTkIp.html#method-c-tk_object_table","(id)",""],["tk_tcl2ruby","TkComm","classes/TkComm.html#method-c-tk_tcl2ruby","(val, enc_mode = false, listobj = true)",""],["tk_windows","MultiTkIp","classes/MultiTkIp.html#method-c-tk_windows","()",""],["tk_windows","MultiTkIp","classes/MultiTkIp.html#method-c-tk_windows","()",""],["tk_windows","MultiTkIp","classes/MultiTkIp.html#method-c-tk_windows","()",""],["tk_windows","MultiTkIp","classes/MultiTkIp.html#method-c-tk_windows","()",""],["tkerror","TkBgError","classes/TkBgError.html#method-c-tkerror","(message)",""],["tkinclude","Tk::BWidget::Widget","classes/Tk/BWidget/Widget.html#method-c-tkinclude","(klass, tkwidget, subpath, *args)",""],["tksearch","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-tksearch","(*args)",""],["tksearch_with_count","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-tksearch_with_count","(*args)",""],["tktrans_get_image","Tk::Root","classes/Tk/Root.html#method-i-tktrans_get_image","()",""],["tktrans_get_image","Tk::Toplevel","classes/Tk/Toplevel.html#method-i-tktrans_get_image","()",""],["tktrans_get_image","TkWindow","classes/TkWindow.html#method-i-tktrans_get_image","()",""],["tktrans_set_image","Tk::Root","classes/Tk/Root.html#method-i-tktrans_set_image","(img)",""],["tktrans_set_image","Tk::Toplevel","classes/Tk/Toplevel.html#method-i-tktrans_set_image","(img)",""],["tktrans_set_image","TkWindow","classes/TkWindow.html#method-i-tktrans_set_image","(img)",""],["tkwait","TkTimer","classes/TkTimer.html#method-i-tkwait","(on_thread = true)",""],["tkwait","TkTimer","classes/TkTimer.html#method-i-tkwait","(on_thread = true)",""],["tkwait","TkVariable","classes/TkVariable.html#method-i-tkwait","(on_thread = true)",""],["tkwait","TkVariable","classes/TkVariable.html#method-i-tkwait","(on_thread = true)",""],["tls?","Net::SMTP","classes/Net/SMTP.html#method-i-tls-3F","()","<p>true if this object uses SMTP/TLS (SMTPS).\n"],["tls?","Net::SMTP","classes/Net/SMTP.html#method-i-tls-3F","()","<p>true if this object uses SMTP/TLS (SMTPS).\n"],["tmpdir","Dir","classes/Dir.html#method-c-tmpdir","()","<p>Returns the operating system&#39;s temporary file path.\n"],["to=","URI::MailTo","classes/URI/MailTo.html#method-i-to-3D","(v)","<p>setter for to <code>v</code>\n"],["to_a","ARGF","classes/ARGF.html#method-i-to_a","(*args)","<p>Reads <code>ARGF</code>&#39;s current file in its entirety, returning an\n<code>Array</code> of its lines, one line per element. …\n"],["to_a","Array","classes/Array.html#method-i-to_a","()","<p>Returns <code>self</code>. If called on a subclass of Array, converts the\nreceiver to an Array object.\n"],["to_a","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-to_a","()","<p>Returns a new 6-element array, consisting of the label, user CPU time,\nsystem CPU time, children&#39;s …\n"],["to_a","CSV::Table","classes/CSV/Table.html#method-i-to_a","()","<p>Returns the table as an Array of Arrays.  Headers will be the first row,\nthen all of the field rows will …\n"],["to_a","DBM","classes/DBM.html#method-i-to_a","()","<p>Converts the contents of the database to an array of [key, value] arrays,\nand returns it.\n"],["to_a","ENV","classes/ENV.html#method-c-to_a","()","<p>Converts the environment variables into an array of names and value arrays.\n\n<pre><code>ENV.to_a # =&gt; [[&quot;TERM&quot; =&gt; ...\n</code></pre>\n"],["to_a","Enumerable","classes/Enumerable.html#method-i-to_a","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre><code>(1..7).to_a                       #=&gt; [1, 2, 3, 4, 5, 6, ...\n</code></pre>\n"],["to_a","GDBM","classes/GDBM.html#method-i-to_a","()","<p>Returns an array of all key-value pairs contained in the database.\n"],["to_a","Gem::Platform","classes/Gem/Platform.html#method-i-to_a","()",""],["to_a","Hash","classes/Hash.html#method-i-to_a","()","<p>Converts <em>hsh</em> to a nested array of <code>[</code> <em>key,\nvalue</em> <code>]</code> arrays.\n\n<pre><code>h = { &quot;c&quot; =&gt; 300, &quot;a&quot; =&gt; 100, &quot;d&quot; =&gt; 400, &quot;c&quot; ...\n</code></pre>\n"],["to_a","MatchData","classes/MatchData.html#method-i-to_a","()","<p>Returns the array of matches.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.to_a   #=&gt; [&quot;HX1138&quot;, &quot;H&quot;, &quot;X&quot;, ...\n</code></pre>\n"],["to_a","Matrix","classes/Matrix.html#method-i-to_a","()","<p>Returns an array of arrays that describe the rows of the matrix.\n"],["to_a","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-to_a","()",""],["to_a","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-to_a","()",""],["to_a","NilClass","classes/NilClass.html#method-i-to_a","()","<p>Always returns an empty array.\n\n<pre><code>nil.to_a   #=&gt; []\n</code></pre>\n"],["to_a","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-to_a","()",""],["to_a","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-to_a","()",""],["to_a","OptionParser","classes/OptionParser.html#method-i-to_a","()","<p>Returns option summary list.\n"],["to_a","REXML::Parent","classes/REXML/Parent.html#method-i-to_a","()",""],["to_a","Rake::FileList","classes/Rake/FileList.html#method-i-to_a","()","<p>Return the internal array object.\n"],["to_a","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-i-to_a","()","<p>Contains all discovered TupleSpaces except for the primary.\n"],["to_a","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-c-to_a","()","<p>Contains all discovered TupleSpaces except for the primary.\n"],["to_a","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-to_a","()",""],["to_a","SDBM","classes/SDBM.html#method-i-to_a","()",""],["to_a","Set","classes/Set.html#method-i-to_a","()","<p>Converts the set to an array.  The order of elements is uncertain.\n"],["to_a","Shell::Filter","classes/Shell/Filter.html#method-i-to_a","()",""],["to_a","String","classes/String.html#method-i-to_a","()",""],["to_a","Struct","classes/Struct.html#method-i-to_a","()","<p>Returns the values for this instance as an array.\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</code></pre>\n"],["to_a","Time","classes/Time.html#method-i-to_a","()","<p>Returns a ten-element <em>array</em> of values for <em>time</em>: {<code>[\nsec, min, hour, day, month, year, wday, yday, isdst,</code> …\n"],["to_a","TkVariable","classes/TkVariable.html#method-i-to_a","()",""],["to_a","TkVariable","classes/TkVariable.html#method-i-to_a","()",""],["to_a","Vector","classes/Vector.html#method-i-to_a","()","<p>Returns the elements of the vector in an array.\n"],["to_a","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-to_a","()",""],["to_a","YAML::DBM","classes/YAML/DBM.html#method-i-to_a","()","<p>Converts the contents of the database to an array of [key, value] arrays,\nand returns it.\n"],["to_ary","Array","classes/Array.html#method-i-to_ary","()","<p>Returns <code>self</code>.\n"],["to_ary","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-to_ary","()","<p>Returns [eigenvector_matrix, eigenvalue_matrix, eigenvector_matrix_inv]\n"],["to_ary","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-to_ary","()","<p>Returns <code>L</code>, <code>U</code>, <code>P</code> in an array\n"],["to_ary","Rake::FileList","classes/Rake/FileList.html#method-i-to_ary","()","<p>Return the internal array object.\n"],["to_ary","TkVariable","classes/TkVariable.html#method-i-to_ary","()",""],["to_ary","TkVariable","classes/TkVariable.html#method-i-to_ary","()",""],["to_ary","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-to_ary","()",""],["to_atom","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-to_atom","(type, &block)",""],["to_backslash","Tk::UTF8_String","classes/Tk/UTF8_String.html#method-i-to_backslash","()",""],["to_backslash_sequence","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-to_backslash_sequence","(str)",""],["to_backslash_sequence","Tk::UTF8_String","classes/Tk/UTF8_String.html#method-i-to_backslash_sequence","()",""],["to_bn","Integer","classes/Integer.html#method-i-to_bn","()",""],["to_bn","Integer","classes/Integer.html#method-i-to_bn","()",""],["to_bn","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-to_bn","()",""],["to_bn","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-to_bn","()","<p>See the OpenSSL documentation for EC_POINT_point2bn()\n"],["to_c","NilClass","classes/NilClass.html#method-i-to_c","()","<p>Returns zero as a complex.\n"],["to_c","Numeric","classes/Numeric.html#method-i-to_c","()","<p>Returns the value as a complex.\n"],["to_c","String","classes/String.html#method-i-to_c","()","<p>Returns a complex which denotes the string form.  The parser ignores\nleading whitespaces and trailing …\n"],["to_class_name","RSS::Utils","classes/RSS/Utils.html#method-i-to_class_name","(name)","<p>Convert a name_with_underscores to CamelCase.\n"],["to_csv","Array","classes/Array.html#method-i-to_csv","(options = Hash.new)","<p>Equivalent to <code>CSV::generate_line(self, options)</code>.\n"],["to_csv","CSV::Row","classes/CSV/Row.html#method-i-to_csv","(options = Hash.new)","<p>Returns the row as a CSV String.  Headers are not used.  Equivalent to:\n\n<pre><code>csv_row.fields.to_csv( options ...</code></pre>\n"],["to_csv","CSV::Table","classes/CSV/Table.html#method-i-to_csv","(options = Hash.new)","<p>Returns the table as a complete CSV String.  Headers will be listed first,\nthen all of the field rows. …\n"],["to_d","BigDecimal","classes/BigDecimal.html#method-i-to_d","()","<p>Returns self.\n"],["to_d","Float","classes/Float.html#method-i-to_d","(precision=nil)","<p>Convert <code>flt</code> to a BigDecimal and return it.\n\n<pre><code>require &#39;bigdecimal&#39;\nrequire &#39;bigdecimal/util&#39;\n\n0.5.to_d\n# ...\n</code></pre>\n"],["to_d","Integer","classes/Integer.html#method-i-to_d","()","<p>Convert <code>int</code> to a BigDecimal and return it.\n\n<pre><code>require &#39;bigdecimal&#39;\nrequire &#39;bigdecimal/util&#39;\n\n42.to_d\n# =&gt; ...\n</code></pre>\n"],["to_d","Integer","classes/Integer.html#method-i-to_d","()","<p>Convert <code>int</code> to a BigDecimal and return it.\n\n<pre><code>require &#39;bigdecimal&#39;\nrequire &#39;bigdecimal/util&#39;\n\n42.to_d\n# =&gt; ...\n</code></pre>\n"],["to_d","Rational","classes/Rational.html#method-i-to_d","(precision=0)","<p>Converts a Rational to a BigDecimal. Takes an optional parameter\n<code>sig</code> to limit the amount of significant …\n"],["to_d","String","classes/String.html#method-i-to_d","()","<p>Convert <code>string</code> to a BigDecimal and return it.\n\n<pre><code>require &#39;bigdecimal&#39;\nrequire &#39;bigdecimal/util&#39;\n\n&quot;0.5&quot;.to_d ...\n</code></pre>\n"],["to_date","Date","classes/Date.html#method-i-to_date","()","<p>Returns self;\n"],["to_date","DateTime","classes/DateTime.html#method-i-to_date","()","<p>Returns a Date object which denotes self.\n"],["to_date","Time","classes/Time.html#method-i-to_date","()","<p>Returns a Date object which denotes self.\n"],["to_date","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-to_date","()",""],["to_datetime","Date","classes/Date.html#method-i-to_datetime","()","<p>Returns a DateTime object which denotes self.\n"],["to_datetime","DateTime","classes/DateTime.html#method-i-to_datetime","()","<p>Returns self.\n"],["to_datetime","Time","classes/Time.html#method-i-to_datetime","()","<p>Returns a DateTime object which denotes self.\n"],["to_der","OpenSSL::ASN1::ASN1Data","classes/OpenSSL/ASN1/ASN1Data.html#method-i-to_der","()","<p>Encodes this ASN1Data into a DER-encoded String value. The result is\nDER-encoded except for the possibility …\n"],["to_der","OpenSSL::ASN1::Constructive","classes/OpenSSL/ASN1/Constructive.html#method-i-to_der","()","<p>See ASN1Data#to_der for details.\n"],["to_der","OpenSSL::ASN1::Primitive","classes/OpenSSL/ASN1/Primitive.html#method-i-to_der","()","<p>See ASN1Data#to_der for details. *\n"],["to_der","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-to_der","()",""],["to_der","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-to_der","()",""],["to_der","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-to_der","()",""],["to_der","OpenSSL::PKCS12","classes/OpenSSL/PKCS12.html#method-i-to_der","()",""],["to_der","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-to_der","()",""],["to_der","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-to_der","()","<p>Encodes this DH to its DER encoding. Note that any existing per-session\npublic/private keys will <strong>not</strong> …\n"],["to_der","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-to_der","()","<p>Encodes this DSA to its DER encoding.\n"],["to_der","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-to_der","()","<p>See the OpenSSL documentation for i2d_ECPrivateKey_bio()\n"],["to_der","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-to_der","()","<p>See the OpenSSL documentation for i2d_ECPKParameters_bio()\n"],["to_der","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_der","()","<p>Outputs this keypair in DER encoding.\n"],["to_der","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_der","()","<p>Outputs this keypair in DER encoding.\n"],["to_der","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-to_der","()","<p>Returns an ASN1 encoded String that contains the Session object.\n"],["to_der","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-to_der","()",""],["to_digits","BigDecimal","classes/BigDecimal.html#method-i-to_digits","()","<p>Converts a BigDecimal to a String of the form “nnnnnn.mmm”. This method is\ndeprecated; use …\n"],["to_element_methods","RSS::Element","classes/RSS/Element.html#method-i-to_element_methods","()",""],["to_enum","Object","classes/Object.html#method-i-to_enum","(*args)","<p>Creates a new Enumerator which will enumerate by on calling\n<code>method</code> on <code>obj</code>.\n<p><code>method</code> &mdash; the method to call on …\n"],["to_eval","MultiTkIp","classes/MultiTkIp.html#method-i-to_eval","()",""],["to_eval","MultiTkIp","classes/MultiTkIp.html#method-i-to_eval","()",""],["to_eval","MultiTkIp","classes/MultiTkIp.html#method-c-to_eval","()",""],["to_eval","MultiTkIp","classes/MultiTkIp.html#method-c-to_eval","()",""],["to_eval","MultiTkIp","classes/MultiTkIp.html#method-i-to_eval","()",""],["to_eval","MultiTkIp","classes/MultiTkIp.html#method-c-to_eval","()",""],["to_eval","MultiTkIp","classes/MultiTkIp.html#method-c-to_eval","()",""],["to_eval","MultiTkIp","classes/MultiTkIp.html#method-i-to_eval","()",""],["to_eval","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-to_eval","()",""],["to_eval","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-to_eval","()",""],["to_eval","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-to_eval","()",""],["to_eval","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-to_eval","()",""],["to_eval","Tk::BLT::PlotComponent::Legend","classes/Tk/BLT/PlotComponent/Legend.html#method-i-to_eval","()",""],["to_eval","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-to_eval","()",""],["to_eval","Tk::BLT::PlotComponent::Pen","classes/Tk/BLT/PlotComponent/Pen.html#method-i-to_eval","()",""],["to_eval","Tk::BLT::PlotComponent::Postscript","classes/Tk/BLT/PlotComponent/Postscript.html#method-i-to_eval","()",""],["to_eval","Tk::Itk::Archetype","classes/Tk/Itk/Archetype.html#method-c-to_eval","()","<p>WidgetClassName = &#39;Archetype&#39;.freeze WidgetClassNames = self\n"],["to_eval","Tk::Root","classes/Tk/Root.html#method-c-to_eval","()",""],["to_eval","TkFont","classes/TkFont.html#method-i-to_eval","()",""],["to_eval","TkFont","classes/TkFont.html#method-i-to_eval","()",""],["to_eval","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-to_eval","()",""],["to_eval","TkValidateCommand","classes/TkValidateCommand.html#method-i-to_eval","()",""],["to_eval","TkVariable","classes/TkVariable.html#method-i-to_eval","()",""],["to_eval","TkVariable","classes/TkVariable.html#method-i-to_eval","()",""],["to_f","BigDecimal","classes/BigDecimal.html#method-i-to_f","()","<p>Returns a new Float object having approximately the same value as the\nBigDecimal number. Normal accuracy …\n"],["to_f","Bignum","classes/Bignum.html#method-i-to_f","()","<p>Converts <em>big</em> to a <code>Float</code>. If <em>big</em> doesn&#39;t\nfit in a <code>Float</code>, the result is infinity.\n"],["to_f","Complex","classes/Complex.html#method-i-to_f","()","<p>Returns the value as a float if possible.\n"],["to_f","Fixnum","classes/Fixnum.html#method-i-to_f","()","<p>Converts <em>fix</em> to a <code>Float</code>.\n"],["to_f","Float","classes/Float.html#method-i-to_f","()","<p>As <code>flt</code> is already a float, returns <code>self</code>.\n"],["to_f","NilClass","classes/NilClass.html#method-i-to_f","()","<p>Always returns zero.\n\n<pre><code>nil.to_f   #=&gt; 0.0\n</code></pre>\n"],["to_f","Rational","classes/Rational.html#method-i-to_f","()","<p>Return the value as a float.\n<p>For example:\n\n<pre><code>Rational(2).to_f      #=&gt; 2.0\nRational(9, 4).to_f   #=&gt; 2.25 ...\n</code></pre>\n"],["to_f","String","classes/String.html#method-i-to_f","()","<p>Returns the result of interpreting leading characters in <em>str</em> as a\nfloating point number. Extraneous characters …\n"],["to_f","Time","classes/Time.html#method-i-to_f","()","<p>Returns the value of <em>time</em> as a floating point number of seconds\nsince the Epoch.\n\n<pre><code>t = Time.now\n&quot;%10.5f&quot; ...</code></pre>\n"],["to_f","TkVariable","classes/TkVariable.html#method-i-to_f","()",""],["to_f","TkVariable","classes/TkVariable.html#method-i-to_f","()",""],["to_feed","RSS::Maker::Atom::Entry::Items","classes/RSS/Maker/Atom/Entry/Items.html#method-i-to_feed","(entry)",""],["to_feed","RSS::Maker::Atom::Entry::Items::Item","classes/RSS/Maker/Atom/Entry/Items/Item.html#method-i-to_feed","(entry)",""],["to_feed","RSS::Maker::Atom::Feed::Channel","classes/RSS/Maker/Atom/Feed/Channel.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::Cloud","classes/RSS/Maker/Atom/Feed/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::SkipDays","classes/RSS/Maker/Atom/Feed/Channel/SkipDays.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::SkipHours","classes/RSS/Maker/Atom/Feed/Channel/SkipHours.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Image","classes/RSS/Maker/Atom/Feed/Image.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items","classes/RSS/Maker/Atom/Feed/Items.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item","classes/RSS/Maker/Atom/Feed/Items/Item.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Content","classes/RSS/Maker/Atom/Feed/Items/Item/Content.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Enclosure","classes/RSS/Maker/Atom/Feed/Items/Item/Enclosure.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Guid","classes/RSS/Maker/Atom/Feed/Items/Item/Guid.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Source","classes/RSS/Maker/Atom/Feed/Items/Item/Source.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Source::Icon","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Icon.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomCategory","classes/RSS/Maker/AtomCategory.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomGenerator","classes/RSS/Maker/AtomGenerator.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomLink","classes/RSS/Maker/AtomLink.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomLogo","classes/RSS/Maker/AtomLogo.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesImageBase","classes/RSS/Maker/ITunesChannelModel/ITunesImageBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesOwnerBase","classes/RSS/Maker/ITunesChannelModel/ITunesOwnerBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ImageFaviconModel::ImageFaviconBase","classes/RSS/Maker/ImageFaviconModel/ImageFaviconBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ImageItemModel::ImageItemBase","classes/RSS/Maker/ImageItemModel/ImageItemBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::RSS09::Channel","classes/RSS/Maker/RSS09/Channel.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Channel::Authors","classes/RSS/Maker/RSS09/Channel/Authors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Authors::Author","classes/RSS/Maker/RSS09/Channel/Authors/Author.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Categories","classes/RSS/Maker/RSS09/Channel/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Channel::Cloud","classes/RSS/Maker/RSS09/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Channel::Contributors","classes/RSS/Maker/RSS09/Channel/Contributors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Copyright","classes/RSS/Maker/RSS09/Channel/Copyright.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Description","classes/RSS/Maker/RSS09/Channel/Description.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Generator","classes/RSS/Maker/RSS09/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Links","classes/RSS/Maker/RSS09/Channel/Links.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Links::Link","classes/RSS/Maker/RSS09/Channel/Links/Link.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipDays","classes/RSS/Maker/RSS09/Channel/SkipDays.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipDays::Day","classes/RSS/Maker/RSS09/Channel/SkipDays/Day.html#method-i-to_feed","(rss, days)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipHours","classes/RSS/Maker/RSS09/Channel/SkipHours.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipHours::Hour","classes/RSS/Maker/RSS09/Channel/SkipHours/Hour.html#method-i-to_feed","(rss, hours)",""],["to_feed","RSS::Maker::RSS09::Channel::Title","classes/RSS/Maker/RSS09/Channel/Title.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Image","classes/RSS/Maker/RSS09/Image.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items","classes/RSS/Maker/RSS09/Items.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items::Item","classes/RSS/Maker/RSS09/Items/Item.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Authors","classes/RSS/Maker/RSS09/Items/Item/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Categories","classes/RSS/Maker/RSS09/Items/Item/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Content","classes/RSS/Maker/RSS09/Items/Item/Content.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Contributors","classes/RSS/Maker/RSS09/Items/Item/Contributors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Description","classes/RSS/Maker/RSS09/Items/Item/Description.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Enclosure","classes/RSS/Maker/RSS09/Items/Item/Enclosure.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Guid","classes/RSS/Maker/RSS09/Items/Item/Guid.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Links","classes/RSS/Maker/RSS09/Items/Item/Links.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Links::Link","classes/RSS/Maker/RSS09/Items/Item/Links/Link.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Rights","classes/RSS/Maker/RSS09/Items/Item/Rights.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source","classes/RSS/Maker/RSS09/Items/Item/Source.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Authors","classes/RSS/Maker/RSS09/Items/Item/Source/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Categories","classes/RSS/Maker/RSS09/Items/Item/Source/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Contributors","classes/RSS/Maker/RSS09/Items/Item/Source/Contributors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Generator","classes/RSS/Maker/RSS09/Items/Item/Source/Generator.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Icon","classes/RSS/Maker/RSS09/Items/Item/Source/Icon.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Links","classes/RSS/Maker/RSS09/Items/Item/Source/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Logo","classes/RSS/Maker/RSS09/Items/Item/Source/Logo.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Rights","classes/RSS/Maker/RSS09/Items/Item/Source/Rights.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Subtitle","classes/RSS/Maker/RSS09/Items/Item/Source/Subtitle.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Title","classes/RSS/Maker/RSS09/Items/Item/Source/Title.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Title","classes/RSS/Maker/RSS09/Items/Item/Title.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Textinput","classes/RSS/Maker/RSS09/Textinput.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Channel","classes/RSS/Maker/RSS10/Channel.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Channel::Authors","classes/RSS/Maker/RSS10/Channel/Authors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Authors::Author","classes/RSS/Maker/RSS10/Channel/Authors/Author.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Categories","classes/RSS/Maker/RSS10/Channel/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Cloud","classes/RSS/Maker/RSS10/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Contributors","classes/RSS/Maker/RSS10/Channel/Contributors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Copyright","classes/RSS/Maker/RSS10/Channel/Copyright.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Description","classes/RSS/Maker/RSS10/Channel/Description.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Generator","classes/RSS/Maker/RSS10/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Links","classes/RSS/Maker/RSS10/Channel/Links.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Links::Link","classes/RSS/Maker/RSS10/Channel/Links/Link.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::SkipDays","classes/RSS/Maker/RSS10/Channel/SkipDays.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::SkipHours","classes/RSS/Maker/RSS10/Channel/SkipHours.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Title","classes/RSS/Maker/RSS10/Channel/Title.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Image","classes/RSS/Maker/RSS10/Image.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items","classes/RSS/Maker/RSS10/Items.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items::Item","classes/RSS/Maker/RSS10/Items/Item.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Authors","classes/RSS/Maker/RSS10/Items/Item/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Categories","classes/RSS/Maker/RSS10/Items/Item/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Content","classes/RSS/Maker/RSS10/Items/Item/Content.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Contributors","classes/RSS/Maker/RSS10/Items/Item/Contributors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Description","classes/RSS/Maker/RSS10/Items/Item/Description.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Enclosure","classes/RSS/Maker/RSS10/Items/Item/Enclosure.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Guid","classes/RSS/Maker/RSS10/Items/Item/Guid.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Links","classes/RSS/Maker/RSS10/Items/Item/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Rights","classes/RSS/Maker/RSS10/Items/Item/Rights.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source","classes/RSS/Maker/RSS10/Items/Item/Source.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Authors","classes/RSS/Maker/RSS10/Items/Item/Source/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Categories","classes/RSS/Maker/RSS10/Items/Item/Source/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Contributors","classes/RSS/Maker/RSS10/Items/Item/Source/Contributors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Generator","classes/RSS/Maker/RSS10/Items/Item/Source/Generator.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Icon","classes/RSS/Maker/RSS10/Items/Item/Source/Icon.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Links","classes/RSS/Maker/RSS10/Items/Item/Source/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Logo","classes/RSS/Maker/RSS10/Items/Item/Source/Logo.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Rights","classes/RSS/Maker/RSS10/Items/Item/Source/Rights.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Subtitle","classes/RSS/Maker/RSS10/Items/Item/Source/Subtitle.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Title","classes/RSS/Maker/RSS10/Items/Item/Source/Title.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Title","classes/RSS/Maker/RSS10/Items/Item/Title.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Textinput","classes/RSS/Maker/RSS10/Textinput.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS20::Channel::Categories","classes/RSS/Maker/RSS20/Channel/Categories.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Categories::Category","classes/RSS/Maker/RSS20/Channel/Categories/Category.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Cloud","classes/RSS/Maker/RSS20/Channel/Cloud.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Generator","classes/RSS/Maker/RSS20/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Authors","classes/RSS/Maker/RSS20/Items/Item/Authors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Authors::Author","classes/RSS/Maker/RSS20/Items/Item/Authors/Author.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Categories","classes/RSS/Maker/RSS20/Items/Item/Categories.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Categories::Category","classes/RSS/Maker/RSS20/Items/Item/Categories/Category.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Enclosure","classes/RSS/Maker/RSS20/Items/Item/Enclosure.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Guid","classes/RSS/Maker/RSS20/Items/Item/Guid.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source","classes/RSS/Maker/RSS20/Items/Item/Source.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source::Links","classes/RSS/Maker/RSS20/Items/Item/Source/Links.html#method-i-to_feed","(rss, source)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source::Links::Link","classes/RSS/Maker/RSS20/Items/Item/Source/Links/Link.html#method-i-to_feed","(rss, source)",""],["to_feed","RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","classes/RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-to_feed","(type, &block)",""],["to_feed_for_categories","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-to_feed_for_categories","(feed, current)",""],["to_h","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-to_h","()","<p>Returns the configuration instance variables as a hash, that can be passed\nto the configure method.\n"],["to_h","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-to_h","()",""],["to_h","XMLRPC::FaultException","classes/XMLRPC/FaultException.html#method-i-to_h","()","<p>returns a hash\n"],["to_hash","CSV::Row","classes/CSV/Row.html#method-i-to_hash","()","<p>Collapses the row into a simple Hash.  Be warning that this discards field\norder and clobbers duplicate …\n"],["to_hash","DBM","classes/DBM.html#method-i-to_hash","()","<p>Converts the contents of the database to an in-memory Hash object, and\nreturns it.\n"],["to_hash","ENV","classes/ENV.html#method-c-to_hash","()","<p>Creates a hash with a copy of the environment variables.\n"],["to_hash","GDBM","classes/GDBM.html#method-i-to_hash","()","<p>Returns a hash of all key-value pairs contained in the database.\n"],["to_hash","Hash","classes/Hash.html#method-i-to_hash","()","<p>Returns <code>self</code>.\n"],["to_hash","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-to_hash","()","<p>Returns a Hash consisting of header names and values. e.g. {“cache-control”\n=&gt; “private”, …\n"],["to_hash","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-to_hash","()",""],["to_hash","SDBM","classes/SDBM.html#method-i-to_hash","()",""],["to_hash","TkVariable","classes/TkVariable.html#method-i-to_hash","()",""],["to_hash","TkVariable","classes/TkVariable.html#method-i-to_hash","()",""],["to_hash","YAML::DBM","classes/YAML/DBM.html#method-i-to_hash","()","<p>Converts the contents of the database to an in-memory Hash object, and\nreturns it.\n"],["to_html","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-to_html","(item)","<p>Converts <code>item</code> to HTML using RDoc::Text#to_html\n"],["to_html","RDoc::Text","classes/RDoc/Text.html#method-i-to_html","(text)","<p>Converts ampersand, dashes, ellipsis, quotes, copyright and registered\ntrademark symbols in <code>text</code> to properly …\n"],["to_i","ARGF","classes/ARGF.html#method-i-to_i","()","<p>Returns an integer representing the numeric file descriptor for the current\nfile. Raises an <code>ArgumentError</code> …\n"],["to_i","BigDecimal","classes/BigDecimal.html#method-i-to_i","()","<p>Returns the value as an integer (Fixnum or Bignum).\n<p>If the BigNumber is infinity or NaN, raises FloatDomainError …\n"],["to_i","Complex","classes/Complex.html#method-i-to_i","()","<p>Returns the value as an integer if possible.\n"],["to_i","DL::CFunc","classes/DL/CFunc.html#method-i-to_i","()","<p>Returns the memory location of this function pointer as an integer.\n"],["to_i","DL::CPtr","classes/DL/CPtr.html#method-i-to_i","()","<p>Returns the integer memory location of this DL::CPtr.\n"],["to_i","DL::CPtr","classes/DL/CPtr.html#method-i-to_i","()","<p>Returns the integer memory location of this DL::CPtr.\n"],["to_i","DL::Function","classes/DL/Function.html#method-i-to_i","()",""],["to_i","DL::Handle","classes/DL/Handle.html#method-i-to_i","()","<p>Returns the memory address for this handle.\n"],["to_i","DRbEx2","classes/DRbEx2.html#method-i-to_i","()",""],["to_i","Fiddle::Closure","classes/Fiddle/Closure.html#method-i-to_i","()","<p>Returns the memory address for this closure\n"],["to_i","Float","classes/Float.html#method-i-to_i","()","<p>Returns <em>flt</em> truncated to an <code>Integer</code>.\n"],["to_i","IO","classes/IO.html#method-i-to_i","()",""],["to_i","IPAddr","classes/IPAddr.html#method-i-to_i","()","<p>Returns the integer representation of the ipaddr.\n"],["to_i","Integer","classes/Integer.html#method-i-to_i","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["to_i","Integer","classes/Integer.html#method-i-to_i","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["to_i","NilClass","classes/NilClass.html#method-i-to_i","()","<p>Always returns zero.\n\n<pre><code>nil.to_i   #=&gt; 0\n</code></pre>\n"],["to_i","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-to_i","()",""],["to_i","Process::Status","classes/Process/Status.html#method-i-to_i","()","<p>Returns the bits in <em>stat</em> as a <code>Fixnum</code>. Poking around\nin these bits is platform dependent.\n\n<pre><code>fork { exit 0xab ...</code></pre>\n"],["to_i","Rake::PseudoStatus","classes/Rake/PseudoStatus.html#method-i-to_i","()",""],["to_i","Rational","classes/Rational.html#method-i-to_i","()","<p>Returns the truncated value as an integer.\n<p>Equivalent to\n\n<pre><code>rat.truncate.</code></pre>\n"],["to_i","String","classes/String.html#method-i-to_i","(p1 = v1)","<p>Returns the result of interpreting leading characters in <em>str</em> as an\ninteger base <em>base</em> (between 2 and 36). …\n"],["to_i","Time","classes/Time.html#method-i-to_i","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nthe Epoch.\n\n<pre><code>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</code></pre>\n"],["to_i","TkVariable","classes/TkVariable.html#method-i-to_i","()",""],["to_i","TkVariable","classes/TkVariable.html#method-i-to_i","()",""],["to_i","WEBrick::HTTPStatus::Status","classes/WEBrick/HTTPStatus/Status.html#method-i-to_i","()",""],["to_id","DRb","classes/DRb.html#method-c-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb::DRbIdConv","classes/DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object&#39;s __id__ in the local …\n"],["to_id","DRb::DRbIdConv","classes/DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object&#39;s __id__ in the local …\n"],["to_id","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-to_id","(obj)","<p>Convert a local object to a dRuby reference.\n"],["to_id","DRb::TimerIdConv","classes/DRb/TimerIdConv.html#method-i-to_id","(obj)",""],["to_id","DRbNamedIdConv","classes/DRbNamedIdConv.html#method-i-to_id","(obj)",""],["to_int","BigDecimal","classes/BigDecimal.html#method-i-to_int","()","<p>Returns the value as an integer (Fixnum or Bignum).\n<p>If the BigNumber is infinity or NaN, raises FloatDomainError …\n"],["to_int","DL::CPtr","classes/DL/CPtr.html#method-i-to_int","()","<p>Returns the integer memory location of this DL::CPtr.\n"],["to_int","DL::CPtr","classes/DL/CPtr.html#method-i-to_int","()","<p>Returns the integer memory location of this DL::CPtr.\n"],["to_int","Float","classes/Float.html#method-i-to_int","()","<p>Returns <em>flt</em> truncated to an <code>Integer</code>.\n"],["to_int","Integer","classes/Integer.html#method-i-to_int","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["to_int","Integer","classes/Integer.html#method-i-to_int","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["to_int","JISX0208::Char","classes/JISX0208/Char.html#method-i-to_int","()",""],["to_int","Numeric","classes/Numeric.html#method-i-to_int","()","<p>Invokes the child class&#39;s <code>to_i</code> method to convert\n<em>num</em> to an integer.\n"],["to_int","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-to_int","()",""],["to_int","TkVariable","classes/TkVariable.html#method-i-to_int","()",""],["to_int","TkVariable","classes/TkVariable.html#method-i-to_int","()",""],["to_io","ARGF","classes/ARGF.html#method-i-to_io","()","<p>Returns an <code>IO</code> object representing the current file. This will\nbe a <code>File</code> object unless the current file …\n"],["to_io","IO","classes/IO.html#method-i-to_io","()","<p>Returns <em>ios</em>.\n"],["to_io","TkTextIO","classes/TkTextIO.html#method-i-to_io","()",""],["to_io","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-to_io","()","<p>Same as IO.\n"],["to_json","Complex","classes/Complex.html#method-i-to_json","(*)",""],["to_json","Date","classes/Date.html#method-i-to_json","(*args)","<p>Stores class name (Date) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> as JSON string …\n"],["to_json","DateTime","classes/DateTime.html#method-i-to_json","(*args)","<p>Stores class name (DateTime) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset  …\n"],["to_json","Exception","classes/Exception.html#method-i-to_json","(*args)","<p>Stores class name (Exception) with message <code>m</code> and backtrace\narray <code>b</code> as JSON string\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Array","classes/JSON/Ext/Generator/GeneratorMethods/Array.html#method-i-to_json","(*args)","<p>Returns a JSON string containing a JSON array, that is generated from this\nArray instance. <em>state</em> is a …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Bignum","classes/JSON/Ext/Generator/GeneratorMethods/Bignum.html#method-i-to_json","(*args)","<p>Returns a JSON string representation for this Integer number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::FalseClass","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html#method-i-to_json","(*args)","<p>Returns a JSON string for false: &#39;false&#39;.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Fixnum","classes/JSON/Ext/Generator/GeneratorMethods/Fixnum.html#method-i-to_json","(*args)","<p>Returns a JSON string representation for this Integer number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Float","classes/JSON/Ext/Generator/GeneratorMethods/Float.html#method-i-to_json","(*args)","<p>Returns a JSON string representation for this Float number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Hash","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html#method-i-to_json","(*args)","<p>Returns a JSON string containing a JSON object, that is generated from this\nHash instance. <em>state</em> is a …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::NilClass","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html#method-i-to_json","(*args)","<p>Returns a JSON string for nil: &#39;null&#39;.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Object","classes/JSON/Ext/Generator/GeneratorMethods/Object.html#method-i-to_json","(p1 = v1)","<p>Converts this object to a string (calling #to_s), converts it to a JSON\nstring, and returns the result. …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json","(*args)","<p>This string should be encoded with UTF-8 A call to this method returns a\nJSON string encoded with UTF16 …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::TrueClass","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html#method-i-to_json","(*args)","<p>Returns a JSON string for true: &#39;true&#39;.\n"],["to_json","Psych","classes/Psych.html#method-c-to_json","(o)","<p>Dump Ruby object <code>o</code> to a JSON string.\n"],["to_json","Range","classes/Range.html#method-i-to_json","(*args)","<p>Stores class name (Range) with JSON array of arguments <code>a</code> which\ninclude <code>first</code> (integer), <code>last</code> (integer), …\n"],["to_json","Rational","classes/Rational.html#method-i-to_json","(*)",""],["to_json","Regexp","classes/Regexp.html#method-i-to_json","(*)","<p>Stores class name (Regexp) with options <code>o</code> and source\n<code>s</code> (Regexp or String) as JSON string\n"],["to_json","Struct","classes/Struct.html#method-i-to_json","(*args)","<p>Stores class name (Struct) with Struct values <code>v</code> as a JSON\nstring. Only named structs are supported.\n"],["to_json","Symbol","classes/Symbol.html#method-i-to_json","(*a)","<p>Stores class name (Symbol) with String representation of Symbol as a JSON\nstring.\n"],["to_json","Time","classes/Time.html#method-i-to_json","(*args)","<p>Stores class name (Time) with number of seconds since epoch and number of\nmicroseconds for Time as JSON …\n"],["to_json_raw","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json_raw","(*args)","<p>This method creates a JSON text from the result of a call to\nto_json_raw_object of this String.\n"],["to_json_raw_object","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json_raw_object","()","<p>This method creates a raw object hash, that can be nested into other data\nstructures and will be generated …\n"],["to_mailtext","URI::MailTo","classes/URI/MailTo.html#method-i-to_mailtext","()","<p>Returns the RFC822 e-mail text equivalent of the URL, as a String.\n<p>Example:\n\n<pre><code>require &#39;uri&#39;\n\nuri = URI.parse(&quot;mailto:ruby-list@ruby-lang.org?Subject=subscribe&amp;cc=myaddr&quot;) ...\n</code></pre>\n"],["to_name","Resolv::IPv4","classes/Resolv/IPv4.html#method-i-to_name","()","<p>Turns this IPv4 address into a Resolv::DNS::Name.\n"],["to_name","Resolv::IPv6","classes/Resolv/IPv6.html#method-i-to_name","()","<p>Turns this IPv6 address into a Resolv::DNS::Name.\n"],["to_obj","DRb","classes/DRb.html#method-c-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb::DRbIdConv","classes/DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbIdConv","classes/DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-to_obj","(ref)","<p>Convert a dRuby reference to the local object it refers to.\n"],["to_obj","DRb::GWIdConv","classes/DRb/GWIdConv.html#method-i-to_obj","(ref)",""],["to_obj","DRb::TimerIdConv","classes/DRb/TimerIdConv.html#method-i-to_obj","(ref)",""],["to_obj","DRbNamedIdConv","classes/DRbNamedIdConv.html#method-i-to_obj","(ref)",""],["to_p","Win32::SSPI::Identity","classes/Win32/SSPI/Identity.html#method-i-to_p","()",""],["to_p","Win32::SSPI::SecurityBuffer","classes/Win32/SSPI/SecurityBuffer.html#method-i-to_p","()",""],["to_p","Win32::SSPI::SecurityHandle","classes/Win32/SSPI/SecurityHandle.html#method-i-to_p","()",""],["to_p","Win32::SSPI::TimeStamp","classes/Win32/SSPI/TimeStamp.html#method-i-to_p","()",""],["to_path","Dir","classes/Dir.html#method-i-to_path","()","<p>Returns the path parameter passed to <em>dir</em>&#39;s constructor.\n\n<pre><code>d = Dir.new(&quot;..&quot;)\nd.path   #=&gt; &quot;..&quot;\n</code></pre>\n"],["to_path","File","classes/File.html#method-i-to_path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n\n<pre><code>File.new(&quot;testfile&quot;).path ...</code></pre>\n"],["to_path","Pathname","classes/Pathname.html#method-i-to_path","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc.\n…\n"],["to_pem","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-to_pem","()",""],["to_pem","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-to_pem","()",""],["to_pem","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-to_pem","()",""],["to_pem","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-to_pem","(p1 = v1, p2 = v2)","<p>Outputs the EC key in PEM encoding.  If <code>cipher</code> and\n<code>pass_phrase</code> are given they will be used to encrypt …\n"],["to_pem","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-to_pem","()","<p>See the OpenSSL documentation for PEM_write_bio_ECPKParameters()\n"],["to_pem","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-to_pem","()","<p>Returns a PEM encoded String that contains the Session object.\n"],["to_pem","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-to_pem","()",""],["to_pem","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-to_pem","()",""],["to_pem","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-to_pem","()",""],["to_proc","Method","classes/Method.html#method-i-to_proc","()","<p>Returns a <code>Proc</code> object corresponding to this method.\n"],["to_proc","Proc","classes/Proc.html#method-i-to_proc","()","<p>Part of the protocol for converting objects to <code>Proc</code> objects.\nInstances of class <code>Proc</code> simply return themselves. …\n"],["to_proc","Symbol","classes/Symbol.html#method-i-to_proc","()","<p>Returns a <em>Proc</em> object which respond to the given method by\n<em>sym</em>.\n\n<pre><code>(1..3).collect(&amp;:to_s)  #=&gt; [&quot;1&quot;, &quot;2&quot;, ...\n</code></pre>\n"],["to_proc","TkVariable","classes/TkVariable.html#method-i-to_proc","()",""],["to_proc","TkVariable","classes/TkVariable.html#method-i-to_proc","()",""],["to_ptr","DL::CPtr","classes/DL/CPtr.html#method-c-to_ptr","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it\nas a DL::CPtr object.\n"],["to_ptr","DL::CPtr","classes/DL/CPtr.html#method-c-to_ptr","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it\nas a DL::CPtr object.\n"],["to_r","BigDecimal","classes/BigDecimal.html#method-i-to_r","()","<p>Converts a BigDecimal to a Rational.\n"],["to_r","Complex","classes/Complex.html#method-i-to_r","()","<p>If the imaginary part is exactly 0, returns the real part as a Rational,\notherwise a RangeError is raised. …\n"],["to_r","Float","classes/Float.html#method-i-to_r","()","<p>Returns the value as a rational.\n<p>NOTE: 0.3.to_r isn&#39;t the same as &#39;0.3&#39;.to_r.  The latter …\n"],["to_r","Integer","classes/Integer.html#method-i-to_r","()","<p>Returns the value as a rational.\n<p>For example:\n\n<pre><code>1.to_r        #=&gt; (1/1)\n(1&lt;&lt;64).to_r  #=&gt; (18446744073709551616/1)\n</code></pre>\n"],["to_r","Integer","classes/Integer.html#method-i-to_r","()","<p>Returns the value as a rational.\n<p>For example:\n\n<pre><code>1.to_r        #=&gt; (1/1)\n(1&lt;&lt;64).to_r  #=&gt; (18446744073709551616/1)\n</code></pre>\n"],["to_r","NilClass","classes/NilClass.html#method-i-to_r","()","<p>Returns zero as a rational.\n"],["to_r","Rational","classes/Rational.html#method-i-to_r","()","<p>Returns self.\n<p>For example:\n\n<pre><code>Rational(2).to_r      #=&gt; (2/1)\nRational(-8, 6).to_r  #=&gt; (-4/3)\n</code></pre>\n"],["to_r","String","classes/String.html#method-i-to_r","()","<p>Returns a rational which denotes the string form.  The parser ignores\nleading whitespaces and trailing …\n"],["to_r","Time","classes/Time.html#method-i-to_r","()","<p>Returns the value of <em>time</em> as a rational number of seconds since\nthe Epoch.\n\n<pre><code>t = Time.now\np t.to_r      ...</code></pre>\n"],["to_range","IPAddr","classes/IPAddr.html#method-i-to_range","()","<p>Creates a Range object for the network address.\n"],["to_rfc822text","URI::MailTo","classes/URI/MailTo.html#method-i-to_rfc822text","()",""],["to_rss","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-to_rss","(type, &block)",""],["to_ruby","Gem::Specification","classes/Gem/Specification.html#method-i-to_ruby","()","<p>Returns a Ruby code representation of this specification, such that it can\nbe eval&#39;ed and reconstruct …\n"],["to_ruby","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-to_ruby","()","<p>Convert this node to Ruby.\n<p>See also Psych::Visitors::ToRuby\n"],["to_ruby_for_cache","Gem::Specification","classes/Gem/Specification.html#method-i-to_ruby_for_cache","()","<p>Returns a Ruby lighter-weight code representation of this specification,\nused for indexing only.\n<p>See  …\n"],["to_s","ARGF","classes/ARGF.html#method-i-to_s","()","<p>Returns “ARGF”.\n"],["to_s","Addrinfo","classes/Addrinfo.html#method-i-to_s","()","<p>returns the socket address as packed struct sockaddr string.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).to_sockaddr ...</code></pre>\n"],["to_s","Array","classes/Array.html#method-i-to_s","()",""],["to_s","ArrayCode","classes/ArrayCode.html#method-i-to_s","()",""],["to_s","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-to_s","()","<p>Same as #format.\n"],["to_s","BigDecimal","classes/BigDecimal.html#method-i-to_s","(p1 = v1)","<p>Converts the value to a string.\n<p>The default format looks like  0.xxxxEnn.\n<p>The optional parameter s consists …\n"],["to_s","Bignum","classes/Bignum.html#method-i-to_s","(p1 = v1)","<p>Returns a string containing the representation of <em>big</em> radix\n<em>base</em> (2 through 36).\n\n<pre><code>12345654321.to_s     ...</code></pre>\n"],["to_s","CGI::Cookie","classes/CGI/Cookie.html#method-i-to_s","()","<p>Convert the Cookie to its string representation.\n"],["to_s","CSV::Row","classes/CSV/Row.html#method-i-to_s","(options = Hash.new)",""],["to_s","CSV::Table","classes/CSV/Table.html#method-i-to_s","(options = Hash.new)",""],["to_s","Complex","classes/Complex.html#method-i-to_s","()","<p>Returns the value as a string.\n"],["to_s","DL::CFunc","classes/DL/CFunc.html#method-i-to_s","()","<p>Returns a string formatted with an easily readable representation of the\ninternal state of the DL::CFunc …\n"],["to_s","DL::CPtr","classes/DL/CPtr.html#method-i-to_s","(p1 = v1)","<p>Returns the pointer contents as a string.  When called with no arguments,\nthis method will return the …\n"],["to_s","DL::CPtr","classes/DL/CPtr.html#method-i-to_s","(p1 = v1)","<p>Returns the pointer contents as a string.  When called with no arguments,\nthis method will return the …\n"],["to_s","DL::CStructEntity","classes/DL/CStructEntity.html#method-i-to_s","()",""],["to_s","DQEntry","classes/DQEntry.html#method-i-to_s","()",""],["to_s","Date","classes/Date.html#method-i-to_s","()","<p>Returns a string in an ISO 8601 format (This method doesn&#39;t use the\nexpanded representations).\n<p>For …\n"],["to_s","DateTime","classes/DateTime.html#method-i-to_s","()","<p>Returns a string in an ISO 8601 format (This method doesn&#39;t use the\nexpanded representations).\n<p>For …\n"],["to_s","Digest::Instance","classes/Digest/Instance.html#method-i-to_s","()","<p>Returns digest_obj.hexdigest().\n"],["to_s","ENV","classes/ENV.html#method-c-to_s","()","<p>Returns “ENV”\n"],["to_s","Encoding","classes/Encoding.html#method-i-to_s","()","<p>Returns the name of the encoding.\n\n<pre><code>Encoding::UTF_8.name      #=&gt; &quot;UTF-8&quot;\n</code></pre>\n"],["to_s","Exception","classes/Exception.html#method-i-to_s","()","<p>Returns exception&#39;s message (or the name of the exception if no message\nis set).\n"],["to_s","FalseClass","classes/FalseClass.html#method-i-to_s","()","<p>&#39;nuf said…\n"],["to_s","Fixnum","classes/Fixnum.html#method-i-to_s","(p1 = v1)","<p>Returns a string containing the representation of <em>fix</em> radix\n<em>base</em> (between 2 and 36).\n\n<pre><code>12345.to_s       ...</code></pre>\n"],["to_s","Float","classes/Float.html#method-i-to_s","()","<p>Returns a string containing a representation of self. As well as a fixed or\nexponential form of the number, …\n"],["to_s","Foo","classes/Foo.html#method-i-to_s","()",""],["to_s","Gem::Platform","classes/Gem/Platform.html#method-i-to_s","()",""],["to_s","Hash","classes/Hash.html#method-i-to_s","()",""],["to_s","Hoge","classes/Hoge.html#method-i-to_s","()",""],["to_s","IPAddr","classes/IPAddr.html#method-i-to_s","()","<p>Returns a string containing the IP address representation.\n"],["to_s","IRB::Context","classes/IRB/Context.html#method-i-to_s","()",""],["to_s","MatchData","classes/MatchData.html#method-i-to_s","()","<p>Returns the entire matched string.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.to_s   #=&gt; &quot;HX1138&quot;\n</code></pre>\n"],["to_s","Matrix","classes/Matrix.html#method-i-to_s","()","<p>Overrides Object#to_s\n"],["to_s","Method","classes/Method.html#method-i-to_s","()","<p>Returns the name of the underlying method.\n\n<pre><code>&quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: String#count&gt;&quot;\n</code></pre>\n"],["to_s","Module","classes/Module.html#method-i-to_s","()","<p>Return a string representing this module or class. For basic classes and\nmodules, this is the name.  …\n"],["to_s","MyList","classes/MyList.html#method-i-to_s","()","<p>the method to convert object into string. redefining this will affect\nprint.\n"],["to_s","NameError","classes/NameError.html#method-i-to_s","()","<p>Produce a nicely-formatted string representing the <code>NameError</code>.\n"],["to_s","NilClass","classes/NilClass.html#method-i-to_s","()","<p>Always returns the empty string.\n"],["to_s","Object","classes/Object.html#method-i-to_s","()","<p>Returns a string representing <em>obj</em>. The default <code>to_s</code>\nprints the object&#39;s class and an encoding of …\n"],["to_s","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-to_s","(p1 = v1)","<p>Parameters\n<p><code>base</code> - integer\n<p><p>Valid values:\n"],["to_s","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-to_s","()",""],["to_s","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-to_s","()",""],["to_s","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-to_s","()",""],["to_s","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-to_s","()",""],["to_s","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-to_s","()",""],["to_s","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-to_s","(p1 = v1, p2 = v2)",""],["to_s","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_s","(p1 = v1, p2 = v2)",""],["to_s","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_s","(p1 = v1, p2 = v2)",""],["to_s","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-to_s","(p1 = v1)",""],["to_s","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-to_s","()",""],["to_s","OpenStruct","classes/OpenStruct.html#method-i-to_s","()",""],["to_s","OptionParser","classes/OptionParser.html#method-i-to_s","()",""],["to_s","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-to_s","()",""],["to_s","Pathname","classes/Pathname.html#method-i-to_s","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc.\n…\n"],["to_s","Point","classes/Point.html#method-i-to_s","()",""],["to_s","Proc","classes/Proc.html#method-i-to_s","()","<p>Returns the unique identifier for this proc, along with an indication of\nwhere the proc was defined. …\n"],["to_s","Process::Status","classes/Process/Status.html#method-i-to_s","()","<p>Show pid and exit status as a string.\n\n<pre><code>system(&quot;false&quot;)\np $?.to_s         #=&gt; &quot;pid 12766 exit 1&quot;\n</code></pre>\n"],["to_s","REXML::Attribute","classes/REXML/Attribute.html#method-i-to_s","()","<p>Returns the attribute value, with entities replaced\n"],["to_s","REXML::CData","classes/REXML/CData.html#method-i-to_s","()","<p>Returns the content of this CData object\n<p><em>Examples</em>\n\n<pre><code>c = CData.new( &quot;Some text&quot; )\nc.to_s        # -&gt; &quot;Some ...</code></pre>\n"],["to_s","REXML::DTD::EntityDecl","classes/REXML/DTD/EntityDecl.html#method-i-to_s","()",""],["to_s","REXML::DTD::NotationDecl","classes/REXML/DTD/NotationDecl.html#method-i-to_s","()",""],["to_s","REXML::Entity","classes/REXML/Entity.html#method-i-to_s","()","<p>Returns this entity as a string.  See write().\n"],["to_s","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-to_s","()",""],["to_s","REXML::Node","classes/REXML/Node.html#method-i-to_s","(indent=nil)","<p>indent &mdash; <strong>DEPRECATED</strong> This parameter is now ignored.  See the\nformatters in the REXML::Formatters package …\n\n"],["to_s","REXML::Output","classes/REXML/Output.html#method-i-to_s","()",""],["to_s","REXML::ParseException","classes/REXML/ParseException.html#method-i-to_s","()",""],["to_s","REXML::Text","classes/REXML/Text.html#method-i-to_s","()","<p>Returns the string value of this text node.  This string is always escaped,\nmeaning that it is a valid …\n"],["to_s","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-to_s","()",""],["to_s","REXML::Validation::Ref","classes/REXML/Validation/Ref.html#method-i-to_s","()",""],["to_s","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-to_s","()",""],["to_s","RSS::Element","classes/RSS/Element.html#method-i-to_s","(need_convert=true, indent='')",""],["to_s","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-to_s","()",""],["to_s","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-i-to_s","()",""],["to_s","Rake::EarlyTime","classes/Rake/EarlyTime.html#method-i-to_s","()",""],["to_s","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-i-to_s","()",""],["to_s","Rake::InvocationChain::EmptyInvocationChain","classes/Rake/InvocationChain/EmptyInvocationChain.html#method-i-to_s","()",""],["to_s","Rake::Task","classes/Rake/Task.html#method-i-to_s","()","<p>Return task name\n"],["to_s","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-to_s","()",""],["to_s","Range","classes/Range.html#method-i-to_s","()","<p>Convert this range object to a printable form.\n"],["to_s","Rational","classes/Rational.html#method-i-to_s","()","<p>Returns the value as a string.\n<p>For example:\n\n<pre><code>Rational(2).to_s      #=&gt; &quot;2/1&quot;\nRational(-8, 6).to_s  #=&gt; &quot;-4/3&quot; ...\n</code></pre>\n"],["to_s","Regexp","classes/Regexp.html#method-i-to_s","()","<p>Returns a string containing the regular expression and its options (using\nthe <code>(?opts:source)</code> notation. …\n"],["to_s","Resolv::DNS::Name","classes/Resolv/DNS/Name.html#method-i-to_s","()","<p>returns the domain name as a string.\n<p>The domain name doesn&#39;t have a trailing dot even if the name …\n"],["to_s","Shell::Filter","classes/Shell/Filter.html#method-i-to_s","()",""],["to_s","Socket::Option","classes/Socket/Option.html#method-i-to_s","()","<p>returns the socket option data as a string.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).data ...</code></pre>\n"],["to_s","String","classes/String.html#method-i-to_s","()","<p>Returns the receiver.\n"],["to_s","Struct","classes/Struct.html#method-i-to_s","()",""],["to_s","Syck::SpecialHash","classes/Syck/SpecialHash.html#method-i-to_s","()",""],["to_s","Symbol","classes/Symbol.html#method-i-to_s","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre><code>:fred.id2name   #=&gt; &quot;fred&quot;\n</code></pre>\n"],["to_s","Time","classes/Time.html#method-i-to_s","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n<code>Time#strftime</code> with a format string of “<code>%Y-%m-%d</code> …\n"],["to_s","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-to_s","()",""],["to_s","TkCore","classes/TkCore.html#method-i-to_s","()",""],["to_s","TkFont","classes/TkFont.html#method-i-to_s","()",""],["to_s","TkFont","classes/TkFont.html#method-i-to_s","()",""],["to_s","TkFont::DescendantFont","classes/TkFont/DescendantFont.html#method-i-to_s","()",""],["to_s","TkVariable","classes/TkVariable.html#method-i-to_s","()",""],["to_s","TkVariable","classes/TkVariable.html#method-i-to_s","()",""],["to_s","TrueClass","classes/TrueClass.html#method-i-to_s","()","<p>The string representation of <code>true</code> is “true”.\n"],["to_s","URI::FTP","classes/URI/FTP.html#method-i-to_s","()",""],["to_s","URI::Generic","classes/URI/Generic.html#method-i-to_s","()","<p>Constructs String from URI\n"],["to_s","URI::MailTo","classes/URI/MailTo.html#method-i-to_s","()","<p>Constructs String from URI\n"],["to_s","UnboundMethod","classes/UnboundMethod.html#method-i-to_s","()","<p>Returns the name of the underlying method.\n\n<pre><code>&quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: String#count&gt;&quot;\n</code></pre>\n"],["to_s","Vector","classes/Vector.html#method-i-to_s","()","<p>Overrides Object#to_s\n"],["to_s","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-i-to_s","()",""],["to_s","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-to_s","()",""],["to_s","WEBrick::HTTPVersion","classes/WEBrick/HTTPVersion.html#method-i-to_s","()",""],["to_s","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-to_s","()",""],["to_s","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-to_s","()",""],["to_s","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-to_s","()",""],["to_s","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-to_s","()",""],["to_s","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-to_s","()",""],["to_s","Win32::SSPI::SSPIResult","classes/Win32/SSPI/SSPIResult.html#method-i-to_s","()",""],["to_set","Enumerable","classes/Enumerable.html#method-i-to_set","(klass = Set, *args, &block)","<p>Makes a set from the enumerable object with given arguments. Needs to\n+require “set”+ to use …\n"],["to_sjis","JISX0208::Char","classes/JISX0208/Char.html#method-i-to_sjis","()",""],["to_sockaddr","Addrinfo","classes/Addrinfo.html#method-i-to_sockaddr","()","<p>returns the socket address as packed struct sockaddr string.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).to_sockaddr ...</code></pre>\n"],["to_spec","Gem::Dependency","classes/Gem/Dependency.html#method-i-to_spec","()",""],["to_specs","Gem::Dependency","classes/Gem/Dependency.html#method-i-to_specs","()",""],["to_str","DL::CPtr","classes/DL/CPtr.html#method-i-to_str","(p1 = v1)","<p>Returns the pointer contents as a string.  When called with no arguments,\nthis method will return the …\n"],["to_str","DL::CPtr","classes/DL/CPtr.html#method-i-to_str","(p1 = v1)","<p>Returns the pointer contents as a string.  When called with no arguments,\nthis method will return the …\n"],["to_str","String","classes/String.html#method-i-to_str","()","<p>Returns the receiver.\n"],["to_str","TkVariable","classes/TkVariable.html#method-i-to_str","()",""],["to_str","TkVariable","classes/TkVariable.html#method-i-to_str","()",""],["to_string","IPAddr","classes/IPAddr.html#method-i-to_string","()","<p>Returns a string containing the IP address representation in canonical\nform.\n"],["to_string","REXML::Attribute","classes/REXML/Attribute.html#method-i-to_string","()","<p>Returns this attribute out as XML source, expanding the name\n\n<pre><code>a = Attribute.new( &quot;x&quot;, &quot;y&quot; )\na.to_string ...</code></pre>\n"],["to_sym","String","classes/String.html#method-i-to_sym","()","<p>Returns the <code>Symbol</code> corresponding to <em>str</em>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code> …\n"],["to_sym","Symbol","classes/Symbol.html#method-i-to_sym","()","<p>In general, <code>to_sym</code> returns the <code>Symbol</code>\ncorresponding to an object. As <em>sym</em> is already a symbol,\n<code>self</code> is …\n"],["to_sym","TkVariable","classes/TkVariable.html#method-i-to_sym","()",""],["to_sym","TkVariable","classes/TkVariable.html#method-i-to_sym","()",""],["to_text","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-to_text","()",""],["to_text","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-to_text","()","<p>Prints all parameters of key to buffer INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use :-)) …\n"],["to_text","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-to_text","()","<p>Prints all parameters of key to buffer INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use :-)) …\n"],["to_text","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-to_text","()","<p>See the OpenSSL documentation for EC_KEY_print()\n"],["to_text","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-to_text","()","<p>See the OpenSSL documentation for ECPKParameters_print()\n"],["to_text","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_text","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Dumps all parameters of a keypair to a String …\n"],["to_text","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_text","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Dumps all parameters of a keypair to a String …\n"],["to_text","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-to_text","()","<p>Shows everything in the Session object.\n"],["to_text","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-to_text","()",""],["to_text","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-to_text","()",""],["to_text","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-to_text","()",""],["to_time","Date","classes/Date.html#method-i-to_time","()","<p>Returns a Time object which denotes self.\n"],["to_time","DateTime","classes/DateTime.html#method-i-to_time","()","<p>Returns a Time object which denotes self.\n"],["to_time","Time","classes/Time.html#method-i-to_time","()","<p>Returns a copy of self as local mode.\n"],["to_time","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-to_time","()",""],["to_value","DL::CPtr","classes/DL/CPtr.html#method-i-to_value","()","<p>Cast this CPtr to a ruby object.\n"],["to_value","DL::CPtr","classes/DL/CPtr.html#method-i-to_value","()","<p>Cast this CPtr to a ruby object.\n"],["to_write_io","ARGF","classes/ARGF.html#method-i-to_write_io","()","<p>Returns IO instance tied to <em>ARGF</em> for writing if inplace mode is\nenabled.\n"],["to_xml","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-to_xml","(type=nil, &block)",""],["to_yaml","Array","classes/Array.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Class","classes/Class.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Complex","classes/Complex.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Date","classes/Date.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Exception","classes/Exception.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","FalseClass","classes/FalseClass.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Float","classes/Float.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Hash","classes/Hash.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Integer","classes/Integer.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Integer","classes/Integer.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","NilClass","classes/NilClass.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Object","classes/Object.html#method-i-to_yaml","(options = {})",""],["to_yaml","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-to_yaml","(io = nil, options = {})",""],["to_yaml","Range","classes/Range.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Rational","classes/Rational.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Regexp","classes/Regexp.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","String","classes/String.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Struct","classes/Struct.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Syck::DomainType","classes/Syck/DomainType.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Syck::Object","classes/Syck/Object.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Syck::Omap","classes/Syck/Omap.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Syck::Pairs","classes/Syck/Pairs.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Syck::PrivateType","classes/Syck/PrivateType.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Syck::SpecialHash","classes/Syck/SpecialHash.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Symbol","classes/Symbol.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","Time","classes/Time.html#method-i-to_yaml","( opts = {} )",""],["to_yaml","TrueClass","classes/TrueClass.html#method-i-to_yaml","( opts = {} )",""],["to_yaml_properties","Object","classes/Object.html#method-i-to_yaml_properties","()",""],["to_yaml_style","Object","classes/Object.html#method-i-to_yaml_style","()",""],["today","Date","classes/Date.html#method-c-today","(p1 = v1)","<p>For example:\n\n<pre><code>Date.today                #=&gt; #&lt;Date: 2011-06-11 ..&gt;\n</code></pre>\n<p>Creates a date object denoting the present …\n"],["toeuc","Kconv","classes/Kconv.html#method-c-toeuc","(str)","<p>Convert <code>str</code> to EUC-JP\n"],["toeuc","String","classes/String.html#method-i-toeuc","()","<p>Convert <code>self</code> to EUC-JP\n"],["toggle","Tk::BLT::PlotComponent::Crosshairs","classes/Tk/BLT/PlotComponent/Crosshairs.html#method-i-toggle","()",""],["toggle","Tk::BLT::PlotComponent::GridLine","classes/Tk/BLT/PlotComponent/GridLine.html#method-i-toggle","()",""],["toggle","Tk::BLT::Treeview","classes/Tk/BLT/Treeview.html#method-i-toggle","(tag)",""],["toggle","Tk::BLT::Treeview::TagOrID_Methods","classes/Tk/BLT/Treeview/TagOrID_Methods.html#method-i-toggle","()",""],["toggle","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-toggle","(node)",""],["toggle","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-toggle","()",""],["toggle","Tk::CheckButton","classes/Tk/CheckButton.html#method-i-toggle","()","<p>def create_self(keys)\n\n<pre><code>if keys and keys != None\n  tk_call_without_enc(&#39;checkbutton&#39;, @path, *hash_kv(keys, ...</code></pre>\n"],["toggle","Tk::CheckButton","classes/Tk/CheckButton.html#method-i-toggle","()","<p>def create_self(keys)\n\n<pre><code>if keys and keys != None\n  tk_call_without_enc(&#39;checkbutton&#39;, @path, *hash_kv(keys, ...</code></pre>\n"],["toggle","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-toggle","(node)",""],["toggle","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-toggle","()",""],["toggle_console","Object","classes/Object.html#method-i-toggle_console","()",""],["tojis","Kconv","classes/Kconv.html#method-c-tojis","(str)","<p>Convert <code>str</code> to ISO-2022-JP\n"],["tojis","String","classes/String.html#method-i-tojis","()","<p>Convert <code>self</code> to ISO-2022-JP\n"],["token","RubyLex","classes/RubyLex.html#method-i-token","()",""],["token","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-c-token","(*args)",""],["token","Tk::BLT::DragDrop","classes/Tk/BLT/DragDrop.html#method-c-token","(win)",""],["token","Win32::SSPI::SecurityBuffer","classes/Win32/SSPI/SecurityBuffer.html#method-i-token","()",""],["token_DOM","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_DOM","(first, last=None)",""],["token_append","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_append","(tag, *args)",""],["token_attrs","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_attrs","(*args)",""],["token_cget","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-token_cget","(win, option)",""],["token_cget_strict","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-token_cget_strict","(win, option)",""],["token_cget_tkstring","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-token_cget_tkstring","(win, option)",""],["token_configinfo","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-token_configinfo","(win, slot=nil)",""],["token_configure","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-token_configure","(win, slot, value=None)",""],["token_define","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_define","(*args)",""],["token_delete","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_delete","(first, last=None)",""],["token_dom","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_dom","(first, last=None)",""],["token_dom_tokens","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_dom_tokens","(first, last=None)",""],["token_domtokens","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_domtokens","(first, last=None)",""],["token_find","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_find","(tag, *args)",""],["token_get","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_get","(first, last=None)",""],["token_get_attr","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_get_attr","(idx, name=None)",""],["token_get_end","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_get_end","(idx)",""],["token_getend","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_getend","(idx)",""],["token_handler","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_handler","(tag, cmd=nil, &b)",""],["token_insert","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_insert","(idx, tag, *args)",""],["token_list","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_list","(first, last=None)",""],["token_listener","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-token_listener","(obj)","<p>Has <code>obj</code> listen to tokens\n"],["token_markup","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_markup","(first, last=None)",""],["token_offset","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_offset","(start, num1, num2)",""],["token_on_events","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_on_events","(*args)",""],["token_pos","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-token_pos","(offset)","<p>Calculates the column and line of the current token based on\n<code>offset</code>.\n"],["token_set_attr","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_set_attr","(idx, name=None, val=None)",""],["token_stream","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-token_stream","()","<p>Current token stream\n"],["token_unique","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-i-token_unique","(*args)",""],["token_windowconfiginfo","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-token_windowconfiginfo","(win, slot=nil)",""],["token_windowconfigure","Tk::BLT::DnD","classes/Tk/BLT/DnD.html#method-i-token_windowconfigure","(win, slot, value=None)",""],["tokenize","Psych::ScalarScanner","classes/Psych/ScalarScanner.html#method-i-tokenize","(string)","<p>Tokenize <code>string</code> returning the ruby object\n"],["tokenize","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-tokenize","(input)","<p>Turns text <code>input</code> into a stream of tokens\n"],["tokenize","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-c-tokenize","(str)","<p>Returns a token stream for <code>str</code>, for testing\n"],["tokenize","Ripper","classes/Ripper.html#method-c-tokenize","(src, filename = '-', lineno = 1)","<p>Tokenizes the Ruby program and returns an array of strings.\n\n<pre><code>p Ripper.tokenize(&quot;def m(a) nil end&quot;)\n   # ...\n</code></pre>\n"],["tokens_to_s","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-tokens_to_s","()","<p>Returns a string representation of the token stream\n"],["tolocale","Kconv","classes/Kconv.html#method-c-tolocale","(str)","<p>Convert <code>self</code> to locale encoding\n"],["tolocale","String","classes/String.html#method-i-tolocale","()","<p>Convert <code>self</code> to locale encoding\n"],["toolbar","Tk::Iwidgets::Mainwindow","classes/Tk/Iwidgets/Mainwindow.html#method-i-toolbar","(*args)",""],["top","IRB::Frame","classes/IRB/Frame.html#method-c-top","(n = 0)",""],["top","IRB::Frame","classes/IRB/Frame.html#method-i-top","(n = 0)",""],["top","Net::POPMail","classes/Net/POPMail.html#method-i-top","(lines, dest = '')","<p>Fetches the message header and <code>lines</code> lines of body.\n<p>The optional <code>dest</code> argument is obsolete.\n<p>This method …\n"],["top","OptionParser","classes/OptionParser.html#method-c-top","()",""],["top","OptionParser","classes/OptionParser.html#method-i-top","()","<p>Subject of #on / #on_head, #accept / #reject\n"],["top_level","RDoc::Context","classes/RDoc/Context.html#method-i-top_level","()","<p>Return the TopLevel that owns us\n"],["top_level","RDoc::Require","classes/RDoc/Require.html#method-i-top_level","()","<p>The RDoc::TopLevel corresponding to this require, or <code>nil</code> if\nnot found.\n"],["top_level","Rake::Application","classes/Rake/Application.html#method-i-top_level","()","<p>Run the top level tasks of a Rake application.\n"],["top_level","Rake::Application","classes/Rake/Application.html#method-i-top_level","()","<p>Run the top level tasks of a Rake application.\n"],["top_level_test","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-top_level_test","(command, file1, file2=nil)","<p>CommandProcessor#test(command, file1, file2) CommandProcessor#[command,\nfile1, file2]\n\n<pre><code>  command: char ...</code></pre>\n"],["toplevel","TkWinfo","classes/TkWinfo.html#method-c-toplevel","(win)",""],["toplevel","TkWinfo","classes/TkWinfo.html#method-c-toplevel","(win)",""],["toplevel_aliases_on_widget_set","Tk","classes/Tk.html#method-i-toplevel_aliases_on_widget_set","(widget_set)",""],["toplevel_load","IRB::Locale","classes/IRB/Locale.html#method-i-toplevel_load","(file, priv=nil)",""],["tosjis","Kconv","classes/Kconv.html#method-c-tosjis","(str)","<p>Convert <code>str</code> to Shift_JIS\n"],["tosjis","String","classes/String.html#method-i-tosjis","()","<p>Convert <code>self</code> to Shift_JIS\n"],["total_in","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-total_in","()","<p>Returns the total bytes of the input data to the stream.  FIXME\n"],["total_out","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-total_out","()","<p>Returns the total bytes of the output data from the stream.  FIXME\n"],["total_time","GC::Profiler","classes/GC/Profiler.html#method-c-total_time","()","<p>The total time used for garbage collection in milliseconds\n"],["touch","FileUtils","classes/FileUtils.html#method-c-touch","(list, options = {})","<p>Options: noop verbose\n<p>Updates modification time (mtime) and access time (atime) of file(s) in\n<code>list</code>.   …\n"],["touch","Object","classes/Object.html#method-i-touch","()","<p>Update the access and modification times of each FILE to the current time.\n\n<pre><code>ruby -run -e touch -- [OPTION] ...</code></pre>\n"],["tour","Knights_Tour","classes/Knights_Tour.html#method-i-tour","(square = nil)","<p>Begin a new tour of the board given a random start position\n"],["toutf16","Kconv","classes/Kconv.html#method-c-toutf16","(str)","<p>Convert <code>str</code> to UTF-16\n"],["toutf16","String","classes/String.html#method-i-toutf16","()","<p>Convert <code>self</code> to UTF-16\n"],["toutf32","Kconv","classes/Kconv.html#method-c-toutf32","(str)","<p>Convert <code>str</code> to UTF-32\n"],["toutf32","String","classes/String.html#method-i-toutf32","()","<p>Convert <code>self</code> to UTF-32\n"],["toutf8","Kconv","classes/Kconv.html#method-c-toutf8","(str)","<p>Convert <code>str</code> to UTF-8\n"],["toutf8","String","classes/String.html#method-i-toutf8","()","<p>Convert <code>self</code> to UTF-8\n"],["tr","Matrix","classes/Matrix.html#method-i-tr","()",""],["tr","String","classes/String.html#method-i-tr","(p1, p2)","<p>Returns a copy of <em>str</em> with the characters in <em>from_str</em>\nreplaced by the corresponding characters in <em>to_str</em> …\n"],["tr!","String","classes/String.html#method-i-tr-21","(p1, p2)","<p>Translates <em>str</em> in place, using the same rules as\n<code>String#tr</code>. Returns <em>str</em>, or <code>nil</code> if no\nchanges were made. …\n"],["tr_cpp","String","classes/String.html#method-i-tr_cpp","()","<p>Generates a string used as cpp macro name.\n"],["tr_s","String","classes/String.html#method-i-tr_s","(p1, p2)","<p>Processes a copy of <em>str</em> as described under <code>String#tr</code>,\nthen removes duplicate characters in regions that …\n"],["tr_s!","String","classes/String.html#method-i-tr_s-21","(p1, p2)","<p>Performs <code>String#tr_s</code> processing on <em>str</em> in place,\nreturning <em>str</em>, or <code>nil</code> if no changes were made.\n"],["trace","Matrix","classes/Matrix.html#method-i-trace","()","<p>Returns the trace (sum of diagonal elements) of the matrix.\n\n<pre><code>Matrix[[7,6], [3,9]].trace\n  =&gt; 16\n</code></pre>\n"],["trace","Net::HTTP","classes/Net/HTTP.html#method-i-trace","(path, initheader = nil)","<p>Sends a TRACE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["trace","Net::HTTP","classes/Net/HTTP.html#method-i-trace","(path, initheader = nil)","<p>Sends a TRACE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["trace","TkVariable","classes/TkVariable.html#method-i-trace","(opts, cmd = Proc.new)",""],["trace","TkVariable","classes/TkVariable.html#method-i-trace","(opts, cmd = Proc.new)",""],["trace?","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-trace-3F","()",""],["trace_callback","TkVariable","classes/TkVariable.html#method-i-trace_callback","(elem, op)",""],["trace_callback","TkVariable","classes/TkVariable.html#method-i-trace_callback","(elem, op)",""],["trace_delete","TkVariable","classes/TkVariable.html#method-i-trace_delete","(opts,cmd)",""],["trace_delete","TkVariable","classes/TkVariable.html#method-i-trace_delete","(opts,cmd)",""],["trace_delete_for_element","TkVariable","classes/TkVariable.html#method-i-trace_delete_for_element","(elem,opts,cmd)",""],["trace_delete_for_element","TkVariable","classes/TkVariable.html#method-i-trace_delete_for_element","(elem,opts,cmd)",""],["trace_element","TkVariable","classes/TkVariable.html#method-i-trace_element","(elem, opts, cmd = Proc.new)",""],["trace_element","TkVariable","classes/TkVariable.html#method-i-trace_element","(elem, opts, cmd = Proc.new)",""],["trace_func","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-trace_func","(event, file, line, id, binding, klass)",""],["trace_func","IRB::Frame","classes/IRB/Frame.html#method-i-trace_func","(event, file, line, id, binding)",""],["trace_func","Tracer","classes/Tracer.html#method-c-trace_func","(*vars)",""],["trace_info","TkVariable","classes/TkVariable.html#method-i-trace_info","()",""],["trace_info","TkVariable","classes/TkVariable.html#method-i-trace_info","()",""],["trace_info_for_element","TkVariable","classes/TkVariable.html#method-i-trace_info_for_element","(elem)",""],["trace_info_for_element","TkVariable","classes/TkVariable.html#method-i-trace_info_for_element","(elem)",""],["trace_remove","TkVariable","classes/TkVariable.html#method-i-trace_remove","(opts,cmd)",""],["trace_remove","TkVariable","classes/TkVariable.html#method-i-trace_remove","(opts,cmd)",""],["trace_remove_for_element","TkVariable","classes/TkVariable.html#method-i-trace_remove_for_element","(elem,opts,cmd)",""],["trace_remove_for_element","TkVariable","classes/TkVariable.html#method-i-trace_remove_for_element","(elem,opts,cmd)",""],["trace_var","Kernel","classes/Kernel.html#method-i-trace_var","(p1, p2 = v2)","<p>Controls tracing of assignments to global variables. The parameter +symbol_\nidentifies the variable (as …\n"],["trace_vdelete","TkVariable","classes/TkVariable.html#method-i-trace_vdelete","(opts,cmd)",""],["trace_vdelete","TkVariable","classes/TkVariable.html#method-i-trace_vdelete","(opts,cmd)",""],["trace_vdelete_for_element","TkVariable","classes/TkVariable.html#method-i-trace_vdelete_for_element","(elem,opts,cmd)",""],["trace_vdelete_for_element","TkVariable","classes/TkVariable.html#method-i-trace_vdelete_for_element","(elem,opts,cmd)",""],["trace_vinfo","TkVariable","classes/TkVariable.html#method-i-trace_vinfo","()",""],["trace_vinfo","TkVariable","classes/TkVariable.html#method-i-trace_vinfo","()",""],["trace_vinfo_for_element","TkVariable","classes/TkVariable.html#method-i-trace_vinfo_for_element","(elem)",""],["trace_vinfo_for_element","TkVariable","classes/TkVariable.html#method-i-trace_vinfo_for_element","(elem)",""],["trackFocus","Object","classes/Object.html#method-i-trackFocus","()",""],["trackStates","Object","classes/Object.html#method-i-trackStates","()",""],["track_off","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-c-track_off","(w)",""],["track_on","Tk::Tcllib::Crosshair","classes/Tk/Tcllib/Crosshair.html#method-c-track_on","(w, &b)",""],["trancate","TkTextIO","classes/TkTextIO.html#method-i-trancate","(len)",""],["trans","Cal","classes/Cal.html#method-i-trans","(xs)",""],["transact","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-transact","(&block)",""],["transaction","PStore","classes/PStore.html#method-i-transaction","(read_only = false)","<p>Opens a new transaction for the data store.  Code executed inside a block\npassed to this method may read …\n"],["transcode_compile_tree","Object","classes/Object.html#method-i-transcode_compile_tree","(name, from, map, valid_encoding)",""],["transcode_generate_node","Object","classes/Object.html#method-i-transcode_generate_node","(am, name_hint=nil)",""],["transcode_generated_code","Object","classes/Object.html#method-i-transcode_generated_code","()",""],["transcode_register_code","Object","classes/Object.html#method-i-transcode_register_code","()",""],["transcode_tbl_only","Object","classes/Object.html#method-i-transcode_tbl_only","(from, to, map, valid_encoding=UnspecifiedValidEncoding)",""],["transcode_tblgen","Object","classes/Object.html#method-i-transcode_tblgen","(from, to, map, valid_encoding=UnspecifiedValidEncoding)",""],["transfer","Fiber","classes/Fiber.html#method-i-transfer","(*args)","<p>Transfer control to another fiber, resuming it from where it last stopped\nor starting it if it was not …\n"],["transfer","Object::Syck::Resolver","classes/Object/Syck/Resolver.html#method-i-transfer","(p1, p2)","<p>YAML::Syck::Resolver#transfer\n"],["transfer","Syck","classes/Syck.html#method-c-transfer","( type_id, obj )","<p>Apply a transfer method to a Ruby object\n"],["transfer","Syck","classes/Syck.html#method-c-transfer","( type_id, obj )","<p>Apply a transfer method to a Ruby object\n"],["transfer_stderr","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stderr","(dist, src = '')",""],["transfer_stderr","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stderr","(dist, src = '')",""],["transfer_stderr","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stderr","(dist, src = '')",""],["transfer_stderr","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stderr","(dist, src = '')",""],["transfer_stderr","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stderr","(dist, src = '')",""],["transfer_stderr","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stderr","(dist, src = '')",""],["transfer_stderr","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stderr","(dist, src = '')",""],["transfer_stderr","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stderr","(dist, src = '')",""],["transfer_stdin","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdin","(dist, src = '')",""],["transfer_stdin","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdin","(dist, src = '')",""],["transfer_stdin","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdin","(dist, src = '')",""],["transfer_stdin","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdin","(dist, src = '')",""],["transfer_stdin","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdin","(dist, src = '')",""],["transfer_stdin","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdin","(dist, src = '')",""],["transfer_stdin","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdin","(dist, src = '')",""],["transfer_stdin","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdin","(dist, src = '')",""],["transfer_stdio","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdio","(dist, src = '')",""],["transfer_stdio","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdio","(dist, src = '')",""],["transfer_stdio","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdio","(dist, src = '')",""],["transfer_stdio","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdio","(dist, src = '')",""],["transfer_stdio","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdio","(dist, src = '')",""],["transfer_stdio","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdio","(dist, src = '')",""],["transfer_stdio","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdio","(dist, src = '')",""],["transfer_stdio","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdio","(dist, src = '')",""],["transfer_stdout","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdout","(dist, src = '')",""],["transfer_stdout","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdout","(dist, src = '')",""],["transfer_stdout","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdout","(dist, src = '')",""],["transfer_stdout","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdout","(dist, src = '')",""],["transfer_stdout","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdout","(dist, src = '')",""],["transfer_stdout","MultiTkIp","classes/MultiTkIp.html#method-i-transfer_stdout","(dist, src = '')",""],["transfer_stdout","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdout","(dist, src = '')",""],["transfer_stdout","MultiTkIp","classes/MultiTkIp.html#method-c-transfer_stdout","(dist, src = '')",""],["transform","Object::Syck::Node","classes/Object/Syck/Node.html#method-i-transform","()","<p>YAML::Syck::Node.transform\n"],["transform","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-transform","()",""],["transform","Syck::YamlNode","classes/Syck/YamlNode.html#method-i-transform","()","<p>Transform this node fully into a native type\n"],["transform","Tk::BLT::Barchart","classes/Tk/BLT/Barchart.html#method-i-transform","(x, y)",""],["transform","Tk::BLT::Graph","classes/Tk/BLT/Graph.html#method-i-transform","(x, y)",""],["transform","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-transform","(val)",""],["transform","Tk::BLT::Stripchart","classes/Tk/BLT/Stripchart.html#method-i-transform","(x, y)",""],["transformNode","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXMLDOMText","classes/IXMLDOMText.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","IXTLRuntime","classes/IXTLRuntime.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNode","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-transformNode","(arg0)","<p>BSTR transformNode apply the stylesheet to the subtree\n\n<pre><code>IXMLDOMNode arg0 --- stylesheet [IN]</code></pre>\n"],["transformNodeToObject","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXMLDOMText","classes/IXMLDOMText.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","IXTLRuntime","classes/IXTLRuntime.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transformNodeToObject","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-transformNodeToObject","(arg0, arg1)","<p>VOID transformNodeToObject apply the stylesheet to the subtree, returning\nthe result through a document …\n"],["transient","Tk::Wm","classes/Tk/Wm.html#method-c-transient","(win, master=nil)",""],["transient","Tk::Wm","classes/Tk/Wm.html#method-i-transient","(master=nil)",""],["translate","Prelude","classes/Prelude.html#method-i-translate","(filename, sub = false)",""],["translate","REXML::Functions","classes/REXML/Functions.html#method-c-translate","( string, tr1, tr2 )","<p>This is entirely Mike Stok&#39;s beast\n"],["translate","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-translate","(*args)",""],["translate","TkMsgCatalog","classes/TkMsgCatalog.html#method-i-translate","(*args)",""],["translate","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-translate","(*args)","<p>*args ::= form, arg, arg, …\n"],["translate","TkMsgCatalog","classes/TkMsgCatalog.html#method-c-translate","(*args)","<p>*args ::= form, arg, arg, …\n"],["transliterate=","Iconv","classes/Iconv.html#method-i-transliterate-3D","(p1)","<p>Sets transliterate flag.\n"],["transliterate?","Iconv","classes/Iconv.html#method-i-transliterate-3F","()","<p>Returns transliterate flag.\n"],["transparent_color","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-transparent_color","(image, color)",""],["transparent_color","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-i-transparent_color","(color)",""],["transpose","Array","classes/Array.html#method-i-transpose","()","<p>Assumes that <code>self</code> is an array of arrays and transposes the\nrows and columns.\n\n<pre><code>a = [[1,2], [3,4], [5,6]] ...</code></pre>\n"],["transpose","Matrix","classes/Matrix.html#method-i-transpose","()","<p>Returns the transpose of the matrix.\n\n<pre><code>Matrix[[1,2], [3,4], [5,6]]\n  =&gt; 1 2\n     3 4\n     5 6\nMatrix[[1,2], ...\n</code></pre>\n"],["trap","Kernel","classes/Kernel.html#method-i-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM&#39;&#39;, …\n"],["trap","Signal","classes/Signal.html#method-c-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM&#39;&#39;, …\n"],["traverse","Gem::Specification","classes/Gem/Specification.html#method-i-traverse","(trail = [], &block)","<p>Recursively walk dependencies of this spec, executing the\n<code>block</code> for each hop.\n"],["traverse","OpenSSL::ASN1","classes/OpenSSL/ASN1.html#method-c-traverse","(p1)","<p>If a block is given, it prints out each of the elements encountered. Block\nparameters are (in that order): …\n"],["tree","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-tree","()",""],["tree","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-tree","()",""],["treectrl_tagid","Tk::TreeCtrl::ConfigMethod","classes/Tk/TreeCtrl/ConfigMethod.html#method-i-treectrl_tagid","(key, obj)",""],["trend","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-trend","(series, xcrd, ycrd)",""],["trivial?","Iconv","classes/Iconv.html#method-i-trivial-3F","()","<p>Returns trivial flag.\n"],["true","REXML::Functions","classes/REXML/Functions.html#method-c-true","( )","<p>UNTESTED\n"],["truncate","BigDecimal","classes/BigDecimal.html#method-i-truncate","(p1 = v1)","<p>Truncate to the nearest 1, returning the result as a BigDecimal.\n<p>BigDecimal(&#39;3.14159&#39;).truncate …\n"],["truncate","File","classes/File.html#method-c-truncate","(p1, p2)","<p>Truncates the file <em>file_name</em> to be at most <em>integer</em> bytes\nlong. Not available on all platforms.\n\n<pre><code>f = File.new(&quot;out&quot;, ...</code></pre>\n"],["truncate","File","classes/File.html#method-i-truncate","(p1)","<p>Truncates <em>file</em> to at most <em>integer</em> bytes. The file must be\nopened for writing. Not available on all platforms. …\n"],["truncate","Float","classes/Float.html#method-i-truncate","()","<p>Returns <em>flt</em> truncated to an <code>Integer</code>.\n"],["truncate","Integer","classes/Integer.html#method-i-truncate","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["truncate","Integer","classes/Integer.html#method-i-truncate","()","<p>As <em>int</em> is already an <code>Integer</code>, all these methods\nsimply return the receiver.\n"],["truncate","Numeric","classes/Numeric.html#method-i-truncate","()","<p>Returns <em>num</em> truncated to an integer. <code>Numeric</code>\nimplements this by converting its value to a float and invoking …\n"],["truncate","Pathname","classes/Pathname.html#method-i-truncate","(p1)","<p>See <code>File.truncate</code>.  Truncate the file to <code>length</code>\nbytes.\n"],["truncate","Rake::Application","classes/Rake/Application.html#method-i-truncate","(string, width)",""],["truncate","Rake::Application","classes/Rake/Application.html#method-i-truncate","(string, width)",""],["truncate","Rational","classes/Rational.html#method-i-truncate","(*args)","<p>Returns the truncated value (toward zero).\n<p>For example:\n\n<pre><code>Rational(3).truncate      #=&gt; 3\nRational(2, 3).truncate ...\n</code></pre>\n"],["truncate","StringIO","classes/StringIO.html#method-i-truncate","(p1)","<p>Truncates the buffer string to at most <em>integer</em> bytes. The\n<strong>strio</strong> must be opened for writing.\n"],["truncate_output?","Rake::Application","classes/Rake/Application.html#method-i-truncate_output-3F","()","<p>We will truncate output if we are outputting to a TTY or if we&#39;ve been\ngiven an explicit column width …\n"],["truncate_output?","Rake::Application","classes/Rake/Application.html#method-i-truncate_output-3F","()","<p>We will truncate output if we are outputting to a TTY or if we&#39;ve been\ngiven an explicit column width …\n"],["trust","Delegator","classes/Delegator.html#method-i-trust","","<p>Trust both the object returned by _<em>getobj</em>_ and self.\n"],["trust","Object","classes/Object.html#method-i-trust","()","<p>Removes the untrusted mark from <em>obj</em>.\n"],["trust=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-trust-3D","(p1)",""],["trusted_cert_path","Gem::Security::Policy","classes/Gem/Security/Policy.html#method-c-trusted_cert_path","(cert, opt = {})","<p>Get the path to the file for this cert.\n"],["try_activate","Gem","classes/Gem.html#method-c-try_activate","(path)","<p>Try to activate a gem containing <code>path</code>. Returns true if\nactivation succeeded or wasn&#39;t needed because …\n"],["try_const","Object","classes/Object.html#method-i-try_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the Constant <code>const</code> is defined.\n<p>See also <code>have_const</code>\n"],["try_convert","Array","classes/Array.html#method-c-try_convert","(p1)","<p>Tries to convert <code>obj</code> into an array, using <code>to_ary</code>\nmethod.  Returns the converted array or <code>nil</code> if\n<code>obj</code> cannot …\n"],["try_convert","Hash","classes/Hash.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a hash, using to_hash method. Returns\nconverted hash or nil if <em>obj</em> cannot be …\n"],["try_convert","IO","classes/IO.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into an IO, using to_io method. Returns\nconverted IO or nil if <em>obj</em> cannot be converted …\n"],["try_convert","Regexp","classes/Regexp.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a Regexp, using to_regexp method. Returns\nconverted regexp or nil if <em>obj</em> cannot …\n"],["try_convert","String","classes/String.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a String, using to_str method. Returns\nconverted string or nil if <em>obj</em> cannot …\n"],["try_cpp","Object","classes/Object.html#method-i-try_cpp","(src, opt=\"\", *opts, &b)",""],["try_func","Object","classes/Object.html#method-i-try_func","(func, libs, headers = nil, opt = \"\", &b)",""],["try_header","Object","classes/Object.html#method-i-try_header","(src, opt=\"\", *opts, &b)",""],["try_implicit","Syck","classes/Syck.html#method-c-try_implicit","( obj )","<p>Apply any implicit a node may qualify for\n"],["try_implicit","Syck","classes/Syck.html#method-c-try_implicit","( obj )","<p>Apply any implicit a node may qualify for\n"],["try_libvar","Object","classes/Object.html#method-i-try_libvar","(var, headers = nil, opt = \"\", &b)",""],["try_lock","Mutex","classes/Mutex.html#method-i-try_lock","()","<p>Attempts to obtain the lock and returns immediately. Returns\n<code>true</code> if the lock was granted.\n"],["try_mon_enter","MonitorMixin","classes/MonitorMixin.html#method-i-try_mon_enter","()","<p>For backward compatibility\n"],["try_type","Object","classes/Object.html#method-i-try_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.\n<p>See also <code>have_type</code>\n"],["try_var","Object","classes/Object.html#method-i-try_var","(var, headers = nil, opt = \"\", &b)",""],["tsort","TSort","classes/TSort.html#method-i-tsort","()","<p>Returns a topologically sorted array of nodes. The array is sorted from\nchildren to parents, i.e. the …\n"],["tsort_each","TSort","classes/TSort.html#method-i-tsort_each","()","<p>The iterator version of the #tsort method.\n<code><em>obj</em>.tsort_each</code> is similar to\n<code><em>obj</em>.tsort.each</code>, but modification …\n"],["tsort_each_child","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-tsort_each_child","(node, &block)",""],["tsort_each_child","TSort","classes/TSort.html#method-i-tsort_each_child","(node)","<p>Should be implemented by a extended class.\n<p>#tsort_each_child is used to iterate for child nodes of <em>node</em> …\n"],["tsort_each_node","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-tsort_each_node","(&block)",""],["tsort_each_node","TSort","classes/TSort.html#method-i-tsort_each_node","()","<p>Should be implemented by a extended class.\n<p>#tsort_each_node is used to iterate for all nodes over a graph. …\n"],["tt?","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-tt-3F","(tag)","<p>Is <code>tag</code> a tt tag?\n"],["tt_sections","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-tt_sections","(text)","<p>Extracts tt sections from <code>text</code>\n"],["tty?","Gem::MockGemUi::TTY","classes/Gem/MockGemUi/TTY.html#method-i-tty-3F","()",""],["tty?","Gem::StreamUI","classes/Gem/StreamUI.html#method-i-tty-3F","()",""],["tty?","IO","classes/IO.html#method-i-tty-3F","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre><code>File.new(&quot;testfile&quot;).isatty ...</code></pre>\n"],["tty?","StringIO","classes/StringIO.html#method-i-tty-3F","()",""],["tty?","TkTextIO","classes/TkTextIO.html#method-i-tty-3F","()",""],["tty_output=","Rake::Application","classes/Rake/Application.html#method-i-tty_output-3D","( tty_output_state )","<p>Override the detected TTY output state (mostly for testing)\n"],["tty_output=","Rake::Application","classes/Rake/Application.html#method-i-tty_output-3D","( tty_output_state )","<p>Override the detected TTY output state (mostly for testing)\n"],["tty_output?","Rake::Application","classes/Rake/Application.html#method-i-tty_output-3F","()","<p>True if we are outputting to TTY, false otherwise\n"],["tty_output?","Rake::Application","classes/Rake/Application.html#method-i-tty_output-3F","()","<p>True if we are outputting to TTY, false otherwise\n"],["tuesday?","Date","classes/Date.html#method-i-tuesday-3F","()","<p>Returns true if the date is Tuesday.\n"],["tuesday?","Time","classes/Time.html#method-i-tuesday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Tuesday.\n\n<pre><code>t = Time.local(1991, 2, 19)      #=&gt; 1991-02-19 00:00:00 -0600 ...\n</code></pre>\n"],["tv_nsec","Time","classes/Time.html#method-i-tv_nsec","()","<p>Returns just the number of nanoseconds for <em>time</em>.\n\n<pre><code>t = Time.now        #=&gt; 2007-11-17 15:18:03 +0900\n&quot;%10.9f&quot; ...\n</code></pre>\n"],["tv_sec","Time","classes/Time.html#method-i-tv_sec","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nthe Epoch.\n\n<pre><code>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</code></pre>\n"],["tv_usec","Time","classes/Time.html#method-i-tv_usec","()","<p>Returns just the number of microseconds for <em>time</em>.\n\n<pre><code>t = Time.now        #=&gt; 2007-11-19 08:03:26 -0600\n&quot;%10.6f&quot; ...\n</code></pre>\n"],["two","Function","classes/Function.html#method-i-two","()",""],["type","Gem::Dependency","classes/Gem/Dependency.html#method-i-type","()","<p>Dependency type.\n"],["type","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-type","()",""],["type","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-type","()","<p>&#39;module&#39; or &#39;class&#39;\n"],["type","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-type","()","<p>Type of method/attribute (class or instance)\n"],["type","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-type","()","<p>returns the cmsg type as an integer.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).type\n#=&gt; ...\n</code></pre>\n"],["type","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-i-type","()",""],["type","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-i-type","()",""],["type","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-type","(key)",""],["type","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-type","(path)",""],["type","Tk::WinRegistry","classes/Tk/WinRegistry.html#method-c-type","(keynam, valnam)",""],["type2class","Tk::BLT::PlotComponent::Element","classes/Tk/BLT/PlotComponent/Element.html#method-c-type2class","(type)",""],["type2class","Tk::BLT::PlotComponent::Marker","classes/Tk/BLT/PlotComponent/Marker.html#method-c-type2class","(type)",""],["type2class","TkcItem","classes/TkcItem.html#method-c-type2class","(type)",""],["type2name","Win32::Registry","classes/Win32/Registry.html#method-c-type2name","(type)","<p>Convert registry type value to readable string.\n"],["type=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-type-3D","(p1)",""],["type_add","Tk::Iwidgets::Messagebox","classes/Tk/Iwidgets/Messagebox.html#method-i-type_add","(tag=nil, keys={})",""],["type_id","TkEvent::Event","classes/TkEvent/Event.html#method-c-type_id","(name)",""],["type_id=","Object::Syck::Node","classes/Object/Syck/Node.html#method-i-type_id-3D","(p1)","<p>YAML::Syck::Node#type_id=\n"],["type_name","TkEvent::Event","classes/TkEvent/Event.html#method-c-type_name","(id)",""],["type_params","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-type_params","()","<p>Any parameters specified for the content type, returned as a Hash. For\nexample, a header of Content-Type: …\n"],["typealias","DL::Importer","classes/DL/Importer.html#method-i-typealias","(alias_type, orig_type)",""],["typecode=","URI::FTP","classes/URI/FTP.html#method-i-typecode-3D","(typecode)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["typekind","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-typekind","()","<p>Returns number which represents type.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;) ...</code></pre>\n"],["typelibs","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-c-typelibs","()","<p>Returns array of type libraries. This method will be OBSOLETE. Use\nWIN32OLE_TYPELIB.typelibs.collect{|t| …\n"],["typelibs","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-c-typelibs","()","<p>Returns the array of WIN32OLE_TYPELIB object.\n\n<pre><code>tlibs = WIN32OLE_TYPELIB.typelibs</code></pre>\n"],["types","DL::Stack","classes/DL/Stack.html#method-i-types","()",""],["types","Tk::MacResource","classes/Tk/MacResource.html#method-c-types","(rsrcRef=nil)",""],["types","TkImage","classes/TkImage.html#method-c-types","()",""],["u","ERB::Util","classes/ERB/Util.html#method-c-u","(s)",""],["u","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-u","()","<p>Returns the upper triangular factor <code>U</code>\n"],["ud","Object","classes/Object.html#method-i-ud","(a)",""],["udp","Addrinfo","classes/Addrinfo.html#method-c-udp","(p1, p2)","<p>returns an addrinfo object for UDP address.\n\n<pre><code>Addrinfo.udp(&quot;localhost&quot;, &quot;daytime&quot;) #=&gt; #&lt;Addrinfo: 127.0.0.1:13 ...\n</code></pre>\n"],["udp_server_loop","Socket","classes/Socket.html#method-c-udp_server_loop","(host=nil, port)","<p>creates a UDP/IP server on <em>port</em> and calls the block for each\nmessage arrived. The block is called with …\n"],["udp_server_loop_on","Socket","classes/Socket.html#method-c-udp_server_loop_on","(sockets)","<p>Run UDP/IP server loop on the given sockets.\n<p>The return value of Socket.udp_server_sockets is appropriate …\n"],["udp_server_recv","Socket","classes/Socket.html#method-c-udp_server_recv","(sockets)","<p>Receive UDP/IP packets from the given <em>sockets</em>. For each packet\nreceived, the block is called.\n<p>The block …\n"],["udp_server_sockets","Socket","classes/Socket.html#method-c-udp_server_sockets","(host=nil, port)","<p>Creates UDP/IP sockets for a UDP server.\n<p>If no block given, it returns an array of sockets.\n<p>If a block …\n"],["ui","Gem","classes/Gem.html#method-c-ui","()","<p>Lazily loads DefaultUserInteraction and returns the default UI.\n"],["ui","Gem::DefaultUserInteraction","classes/Gem/DefaultUserInteraction.html#method-c-ui","()","<p>Return the default UI.\n"],["ui","Gem::DefaultUserInteraction","classes/Gem/DefaultUserInteraction.html#method-i-ui","()","<p>See DefaultUserInteraction::ui\n"],["ui=","Gem::DefaultUserInteraction","classes/Gem/DefaultUserInteraction.html#method-c-ui-3D","(new_ui)","<p>Set the default UI.  If the default UI is never explicitly set, a simple\nconsole based UserInteraction …\n"],["ui=","Gem::DefaultUserInteraction","classes/Gem/DefaultUserInteraction.html#method-i-ui-3D","(new_ui)","<p>See DefaultUserInteraction::ui=\n"],["uid","File::Stat","classes/File/Stat.html#method-i-uid","()","<p>Returns the numeric user id of the owner of <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).uid   #=&gt; 501\n</code></pre>\n"],["uid","Process","classes/Process.html#method-c-uid","()","<p>Returns the (real) user ID of this process.\n\n<pre><code>Process.uid   #=&gt; 501\n</code></pre>\n"],["uid=","Process","classes/Process.html#method-c-uid-3D","(p1)","<p>Sets the (integer) user ID for this process. Not available on all\nplatforms.\n"],["uid_copy","Net::IMAP","classes/Net/IMAP.html#method-i-uid_copy","(set, mailbox)","<p>As for #copy(), but <code>set</code> contains unique identifiers.\n"],["uid_fetch","Net::IMAP","classes/Net/IMAP.html#method-i-uid_fetch","(set, attr)","<p>As for #fetch(), but <code>set</code> contains unique identifiers.\n"],["uid_search","Net::IMAP","classes/Net/IMAP.html#method-i-uid_search","(keys, charset = nil)","<p>As for #search(), but returns unique identifiers.\n"],["uid_sort","Net::IMAP","classes/Net/IMAP.html#method-i-uid_sort","(sort_keys, search_keys, charset)","<p>As for #sort(), but returns an array of unique identifiers.\n"],["uid_store","Net::IMAP","classes/Net/IMAP.html#method-i-uid_store","(set, attr, flags)","<p>As for #store(), but <code>set</code> contains unique identifiers.\n"],["uid_thread","Net::IMAP","classes/Net/IMAP.html#method-i-uid_thread","(algorithm, search_keys, charset)","<p>As for #thread(), but returns unique identifiers instead of message\nsequence numbers.\n"],["uidl","Net::POPMail","classes/Net/POPMail.html#method-i-uidl","()",""],["umask","File","classes/File.html#method-c-umask","(*args)","<p>Returns the current umask value for this process. If the optional argument\nis given, set the umask to …\n"],["umount","Tk::Trofs","classes/Tk/Trofs.html#method-c-umount","(mountpoint)",""],["umount","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-umount","(dir)",""],["unadvise","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-unadvise","()","<p>disconnects OLE server. If this method called, then the WIN32OLE_EVENT\nobject does not receive the OLE …\n"],["unalias_command","Shell","classes/Shell.html#method-c-unalias_command","(ali)",""],["unalias_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-unalias_command","(ali)",""],["unambiguous_action","ActionMap","classes/ActionMap.html#method-c-unambiguous_action","(actions0)",""],["unassign","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-unassign","(*wins)",""],["unautoscroll","Tk::Scrollable","classes/Tk/Scrollable.html#method-i-unautoscroll","(mode = nil)",""],["unautoscroll","Tk::Scrollbar","classes/Tk/Scrollbar.html#method-i-unautoscroll","()",""],["unautoscroll","Tk::Tcllib::Autoscroll","classes/Tk/Tcllib/Autoscroll.html#method-c-unautoscroll","(win)",""],["unbind","DL::Function","classes/DL/Function.html#method-i-unbind","()",""],["unbind","Method","classes/Method.html#method-i-unbind","()","<p>Dissociates <em>meth</em> from its current receiver. The resulting\n<code>UnboundMethod</code> can subsequently be bound to …\n"],["unbind_at_call","DL::Function","classes/DL/Function.html#method-i-unbind_at_call","()",""],["unbind_at_call","DL::TempFunction","classes/DL/TempFunction.html#method-i-unbind_at_call","()",""],["unconverted_fields?","CSV","classes/CSV.html#method-i-unconverted_fields-3F","()","<p>Returns <code>true</code> if unconverted_fields() to parsed results.  See\nCSV::new for details.\n"],["undef_default","TkVariable","classes/TkVariable.html#method-i-undef_default","()",""],["undef_default","TkVariable","classes/TkVariable.html#method-i-undef_default","()",""],["undef_system_command","Shell","classes/Shell.html#method-c-undef_system_command","(command)",""],["undef_system_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-undef_system_command","(command)",""],["undefine_finalizer","ObjectSpace","classes/ObjectSpace.html#method-c-undefine_finalizer","(p1)","<p>Removes all finalizers for <em>obj</em>.\n"],["undoc_params","RDoc::Stats","classes/RDoc/Stats.html#method-i-undoc_params","(method)","<p>Determines which parameters in <code>method</code> were not documented. \nReturns a total parameter count and an Array …\n"],["unescape","CGI","classes/CGI.html#method-c-unescape","(string,encoding=@@accept_charset)","<p>URL-decode a string with encoding(optional).\n\n<pre><code>string = CGI::unescape(&quot;%27Stop%21%27+said+Fred&quot;)\n   # =&gt; ...\n</code></pre>\n"],["unescape","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-unescape","(str)",""],["unescape","Syck","classes/Syck.html#method-c-unescape","( value )","<p>Unescape the condenses escapes\n"],["unescape","Syck","classes/Syck.html#method-c-unescape","( value )","<p>Unescape the condenses escapes\n"],["unescape","URI::Escape","classes/URI/Escape.html#method-i-unescape","(*arg)","<p>Synopsis\n\n<pre><code>URI.unescape(str)</code></pre>\n<p>Args\n"],["unescape","URI::Parser","classes/URI/Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p><code>str</code> &mdash; String to remove escapes from\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to self.regexp\n"],["unescapeElement","CGI","classes/CGI.html#method-c-unescapeElement","(string, *elements)","<p>Undo escaping such as that done by CGI::escapeElement()\n\n<pre><code>print CGI::unescapeElement(\n        CGI::escapeHTML(&#39;&lt;BR&gt;&lt;A ...</code></pre>\n"],["unescapeHTML","CGI","classes/CGI.html#method-c-unescapeHTML","(string)","<p>Unescape a string that has been HTML-escaped\n\n<pre><code>CGI::unescapeHTML(&quot;Usage: foo &amp;quot;bar&amp;quot; &amp;lt;baz&amp;gt;&quot;) ...</code></pre>\n"],["unescape_element","CGI","classes/CGI.html#method-c-unescape_element","(str)","<p>Synonym for CGI::unescapeElement(str)\n"],["unescape_html","CGI","classes/CGI.html#method-c-unescape_html","(str)","<p>Synonym for CGI::unescapeHTML(str)\n"],["unget","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-unget","()","<p>Returns the current token to the token stream\n"],["unget_tk","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-unget_tk","(tk)","<p>Returns <code>tk</code> to the scanner\n"],["ungetbyte","IO","classes/IO.html#method-i-ungetbyte","(p1)","<p>Pushes back bytes (passed as a parameter) onto <em>ios</em>, such that a\nsubsequent buffered read will return …\n"],["ungetbyte","StringIO","classes/StringIO.html#method-i-ungetbyte","(p1)","<p>See IO#ungetbyte\n"],["ungetbyte","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-ungetbyte","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["ungetc","IO","classes/IO.html#method-i-ungetc","(p1)","<p>Pushes back one character (passed as a parameter) onto <em>ios</em>, such\nthat a subsequent buffered character …\n"],["ungetc","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-ungetc","(c)","<p>Pushes character <code>c</code> back onto the stream such that a subsequent\nbuffered character read will return it. …\n"],["ungetc","RubyLex","classes/RubyLex.html#method-i-ungetc","(c = nil)",""],["ungetc","StringIO","classes/StringIO.html#method-i-ungetc","(p1)","<p>Pushes back one character (passed as a parameter) onto\n<strong>strio</strong> such that a subsequent buffered read will …\n"],["ungetc","TkTextIO","classes/TkTextIO.html#method-i-ungetc","(c)",""],["ungetc","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-ungetc","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["ungetch","Curses","classes/Curses.html#method-c-ungetch","(p1)","<p>Places <code>ch</code> back onto the input queue to be returned by the next\ncall to Curses.getch.\n<p>There is just one …\n"],["ungetmouse","Curses","classes/Curses.html#method-c-ungetmouse","(p1)","<p>It pushes a KEY_MOUSE event onto the input queue, and associates with that\nevent the given state data …\n"],["uninstall","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-uninstall","()","<p>Performs the uninstall of the gem.  This removes the spec, the Gem\ndirectory, and the cached .gem file. …\n"],["uninstall_cmd","TkComm","classes/TkComm.html#method-i-uninstall_cmd","(id)",""],["uninstall_cmd","TkComm","classes/TkComm.html#method-c-uninstall_cmd","(id, local_cmdtbl=nil)",""],["uninstall_cmd","TkUtil","classes/TkUtil.html#method-c-uninstall_cmd","(p1)",""],["uninstall_doc","Gem::DocManager","classes/Gem/DocManager.html#method-i-uninstall_doc","()","<p>Remove RDoc and RI documentation\n"],["uninstall_gem","Gem::Uninstaller","classes/Gem/Uninstaller.html#method-i-uninstall_gem","(spec)","<p>Uninstalls gem <code>spec</code>\n"],["uninstall_old_gemcutter","Gem::Commands::SetupCommand","classes/Gem/Commands/SetupCommand.html#method-i-uninstall_old_gemcutter","()",""],["union","DL::Importer","classes/DL/Importer.html#method-i-union","(signature)",""],["union","Regexp","classes/Regexp.html#method-c-union","(*args)","<p>Return a <code>Regexp</code> object that is the union of the given\n<em>pattern</em>s, i.e., will match any of its parts. The …\n"],["union","Set","classes/Set.html#method-i-union","(enum)",""],["uniq","Array","classes/Array.html#method-i-uniq","()","<p>Returns a new array by removing duplicate values in <code>self</code>. If a\nblock is given, it will use the return …\n"],["uniq!","Array","classes/Array.html#method-i-uniq-21","()","<p>Removes duplicate elements from <code>self</code>. If a block is given, it\nwill use the return value of the block …\n"],["uniqueID","IXTLRuntime","classes/IXTLRuntime.html#method-i-uniqueID","(arg0)","<p>I4 uniqueID\n\n<pre><code>IXMLDOMNode arg0 --- pNode [IN]</code></pre>\n"],["unique_classes","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-unique_classes","()","<p>Returns the unique classes discovered by RDoc.\n<p>::complete must have been called prior to using this method. …\n"],["unique_classes_and_modules","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-unique_classes_and_modules","()","<p>Returns the unique classes and modules discovered by RDoc. ::complete must\nhave been called prior to …\n"],["unique_id","Net::POPMail","classes/Net/POPMail.html#method-i-unique_id","()","<p>Returns the unique-id of the message. Normally the unique-id is a hash\nstring of the message.\n<p>This method …\n"],["unique_modules","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-unique_modules","()","<p>Returns the unique modules discovered by RDoc. ::complete must have been\ncalled prior to using this method. …\n"],["unit","Matrix","classes/Matrix.html#method-c-unit","(n)",""],["unitary?","Matrix","classes/Matrix.html#method-i-unitary-3F","()","<p>Returns <code>true</code> is this is a unitary matrix Raises an error if\nmatrix is not square.\n"],["unix","Addrinfo","classes/Addrinfo.html#method-c-unix","(p1, p2 = v2)","<p>returns an addrinfo object for UNIX socket address.\n<p><em>socktype</em> specifies the socket type. If it is omitted, …\n"],["unix","Socket","classes/Socket.html#method-c-unix","(path)","<p>creates a new socket connected to path using UNIX socket socket.\n<p>If a block is given, the block is called …\n"],["unix?","Addrinfo","classes/Addrinfo.html#method-i-unix-3F","()","<p>returns true if addrinfo is UNIX address. returns false otherwise.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).unix? ...</code></pre>\n"],["unix?","Rake::Application","classes/Rake/Application.html#method-i-unix-3F","()",""],["unix?","Rake::Application","classes/Rake/Application.html#method-i-unix-3F","()",""],["unix_path","Addrinfo","classes/Addrinfo.html#method-i-unix_path","()","<p>Returns the socket path as a string.\n\n<pre><code>Addrinfo.unix(&quot;/tmp/sock&quot;).unix_path       #=&gt; &quot;/tmp/sock&quot;\n</code></pre>\n"],["unix_rights","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-unix_rights","()","<p>returns the array of IO objects for SCM_RIGHTS control message in UNIX\ndomain socket.\n<p>The class of the …\n"],["unix_rights","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-unix_rights","(*args)","<p>Creates a new Socket::AncillaryData object which contains file descriptors\nas data.\n\n<pre><code>p Socket::AncillaryData.unix_rights(STDERR) ...</code></pre>\n"],["unix_server_loop","Socket","classes/Socket.html#method-c-unix_server_loop","(path)","<p>creates a UNIX socket server on <em>path</em>. It calls the block for each\nsocket accepted.\n<p>If <em>host</em> is specified, …\n"],["unix_server_socket","Socket","classes/Socket.html#method-c-unix_server_socket","(path)","<p>creates a UNIX server socket on <em>path</em>\n<p>If no block given, it returns a listening socket.\n<p>If a block is given, …\n"],["unknown","Logger","classes/Logger.html#method-i-unknown","(progname = nil, &block)","<p>Log an <code>UNKNOWN</code> message.  This will be printed no matter what\nthe logger&#39;s level.\n<p>See #info for more …\n"],["unknown_proc","TkPackage","classes/TkPackage.html#method-i-unknown_proc","(*arg, &b)",""],["unlines","Cal","classes/Cal.html#method-i-unlines","(xs)",""],["unlink","Dir","classes/Dir.html#method-c-unlink","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["unlink","File","classes/File.html#method-c-unlink","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["unlink","Pathname","classes/Pathname.html#method-i-unlink","()","<p>Removes a file or directory, using <code>File.unlink</code> or\n<code>Dir.unlink</code> as necessary.\n"],["unlink","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-unlink","(path)","<p>CommandProcessor#unlink(path)\n\n<pre><code>same as:\n  Dir#unlink  (when path is directory)\n  File#unlink (when path ...</code></pre>\n"],["unlink","Tempfile","classes/Tempfile.html#method-i-unlink","()","<p>Unlinks (deletes) the file from the filesystem. One should always unlink\nthe file after using it, as …\n"],["unlock","Mutex","classes/Mutex.html#method-i-unlock","()","<p>Releases the lock. Raises <code>ThreadError</code> if <code>mutex</code>\nwasn&#39;t locked by the current thread.\n"],["unlock","Net::HTTP","classes/Net/HTTP.html#method-i-unlock","(path, body, initheader = nil)","<p>Sends a UNLOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["unlock","Net::HTTP","classes/Net/HTTP.html#method-i-unlock","(path, body, initheader = nil)","<p>Sends a UNLOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["unmap","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-unmap","(*wins)",""],["unmap","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-unmap","(*wins)",""],["unmask_protected_sequences","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-unmask_protected_sequences","()","<p>Unescapes special sequences of text\n"],["unmount","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-unmount","(dir)","<p>Unmounts <code>dir</code>\n"],["unnormalize","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-unnormalize","( string, entities=nil, filter=nil )","<p>Unescapes all possible entities\n"],["unnormalize","REXML::Text","classes/REXML/Text.html#method-c-unnormalize","( string, doctype=nil, filter=nil, illegal=nil )","<p>Unescapes all possible entities\n"],["unnormalized","REXML::Entity","classes/REXML/Entity.html#method-i-unnormalized","()","<p>Evaluates to the unnormalized value of this entity; that is, replacing all\nentities – both %ent; and …\n"],["unpack","DL::Packer","classes/DL/Packer.html#method-i-unpack","(ary)",""],["unpack","DL::Stack","classes/DL/Stack.html#method-i-unpack","(ary)",""],["unpack","Gem::Installer","classes/Gem/Installer.html#method-i-unpack","(directory)","<p>Unpacks the gem into the given directory.\n"],["unpack","Socket::Option","classes/Socket/Option.html#method-i-unpack","(p1)","<p>Calls String#unpack on sockopt.data.\n\n<pre><code>sockopt = Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, [1].pack(&quot;i&quot;)) ...</code></pre>\n"],["unpack","String","classes/String.html#method-i-unpack","(p1)","<p>Decodes <em>str</em> (which may contain binary data) according to the\nformat string, returning an array of each …\n"],["unpack_sockaddr_in","Socket","classes/Socket.html#method-c-unpack_sockaddr_in","(p1)","<p>Unpacks <em>sockaddr</em> into port and ip_address.\n<p><em>sockaddr</em> should be a string or an addrinfo for AF_INET/AF_INET6. …\n"],["unpack_sockaddr_un","Socket","classes/Socket.html#method-c-unpack_sockaddr_un","(p1)","<p>Unpacks <em>sockaddr</em> into path.\n<p><em>sockaddr</em> should be a string or an addrinfo for AF_UNIX.\n\n<pre><code>sockaddr = Socket.sockaddr_un(&quot;/tmp/sock&quot;) ...</code></pre>\n"],["unpackdw","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-unpackdw","(dw)",""],["unpackqw","Win32::Registry::API","classes/Win32/Registry/API.html#method-i-unpackqw","(qw)",""],["unpost","Tk::BWidget::ComboBox","classes/Tk/BWidget/ComboBox.html#method-i-unpost","()",""],["unpost","Tk::Menu","classes/Tk/Menu.html#method-i-unpost","()",""],["unpost","Tk::Tcllib::Widget::Dateentry","classes/Tk/Tcllib/Widget/Dateentry.html#method-i-unpost","()",""],["unpost","Tk::Tcllib::Widget::Dateentry","classes/Tk/Tcllib/Widget/Dateentry.html#method-i-unpost","()",""],["unregist","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-i-unregist","(name)",""],["unregister_command","Gem::CommandManager","classes/Gem/CommandManager.html#method-i-unregister_command","(command)","<p>Unregister the Symbol <code>command</code> as a gem command.\n"],["unresolved_deps","Gem","classes/Gem.html#method-c-unresolved_deps","()",""],["unscan","StringScanner","classes/StringScanner.html#method-i-unscan","()","<p>Set the scan pointer to the previous position.  Only one previous position\nis remembered, and it changes …\n"],["unset","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-unset","(*keys)",""],["unset","Tk::BLT::Tree::Tag","classes/Tk/BLT/Tree/Tag.html#method-i-unset","(node)",""],["unset","TkFont::Chooser","classes/TkFont/Chooser.html#method-i-unset","()",""],["unset","TkTextMark","classes/TkTextMark.html#method-i-unset","()",""],["unset","TkTextMark","classes/TkTextMark.html#method-i-unset","()",""],["unset","TkVariable","classes/TkVariable.html#method-i-unset","(*elems)",""],["unset","TkVariable","classes/TkVariable.html#method-i-unset","(*elems)",""],["unset_mark","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-unset_mark","(*marks)",""],["unshift","Array","classes/Array.html#method-i-unshift","(*args)","<p>Prepends objects to the front of <code>self</code>, moving other elements\nupwards.\n\n<pre><code>a = [ &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]\na.unshift(&quot;a&quot;) ...</code></pre>\n"],["unshift","REXML::Parent","classes/REXML/Parent.html#method-i-unshift","( object )",""],["unshift","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-unshift","(token)","<p>Push an event back on the head of the stream.  This method has\n(theoretically) infinite depth.\n"],["unshift","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-unshift","(token)",""],["unsigned_value","DL::ValueUtil","classes/DL/ValueUtil.html#method-i-unsigned_value","(val, ty)",""],["unsubscribe","Net::IMAP","classes/Net/IMAP.html#method-i-unsubscribe","(mailbox)","<p>Sends a UNSUBSCRIBE command to remove the specified <code>mailbox</code>\nname from the server&#39;s set of “active” …\n"],["untaint","Delegator","classes/Delegator.html#method-i-untaint","","<p>Untaint both the object returned by _<em>getobj</em>_ and self.\n"],["untaint","Object","classes/Object.html#method-i-untaint","()","<p>Removes the taint from <em>obj</em>.\n"],["untaint","Pathname","classes/Pathname.html#method-i-untaint","()",""],["untrace_var","Kernel","classes/Kernel.html#method-i-untrace_var","(p1, p2 = v2)","<p>Removes tracing for the specified command on the given global variable and\nreturns <code>nil</code>. If no command …\n"],["untrust","Delegator","classes/Delegator.html#method-i-untrust","","<p>Untrust both the object returned by _<em>getobj</em>_ and self.\n"],["untrust","Object","classes/Object.html#method-i-untrust","()","<p>Marks <em>obj</em> as untrusted.\n"],["untrust","TkUtil","classes/TkUtil.html#method-c-untrust","(p1)","<p>/\n"],["untrusted?","Object","classes/Object.html#method-i-untrusted-3F","()","<p>Returns <code>true</code> if the object is untrusted.\n"],["unused","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-unused","()","<p>Returns the rest of the data which had read for parsing gzip format, or\n<code>nil</code> if the whole gzip file is …\n"],["up","Board","classes/Board.html#method-i-up","()",""],["up","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-up","()",""],["upcase","String","classes/String.html#method-i-upcase","()","<p>Returns a copy of <em>str</em> with all lowercase letters replaced with\ntheir uppercase counterparts. The operation …\n"],["upcase","Symbol","classes/Symbol.html#method-i-upcase","()","<p>Same as <code>sym.to_s.upcase.intern</code>.\n"],["upcase!","String","classes/String.html#method-i-upcase-21","()","<p>Upcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made. Note: case replacement is effective …\n"],["update","CGI::Session","classes/CGI/Session.html#method-i-update","()","<p>Store session data on the server.  For some session storage types, this is\na no-op.\n"],["update","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-i-update","()","<p>Save session state to the session&#39;s FileStore file.\n"],["update","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-i-update","()","<p>Save session state to the session&#39;s PStore file.\n"],["update","Clock","classes/Clock.html#method-i-update","(h, m, s)",""],["update","DBM","classes/DBM.html#method-i-update","(p1)","<p>Updates the database with multiple values from the specified object. Takes\nany object which implements …\n"],["update","Digest::HMAC","classes/Digest/HMAC.html#method-i-update","(text)","<p>Updates the hmac using a given <code>string</code> and returns self.\n"],["update","Digest::Instance","classes/Digest/Instance.html#method-i-update","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["update","Digest::SHA2","classes/Digest/SHA2.html#method-i-update","(str)","<p>Updates the digest using a given <em>string</em> and returns self.\n"],["update","ENV","classes/ENV.html#method-c-update","(p1)","<p>Adds the contents of <code>hash</code> to the environment variables.  If no\nblock is specified entries with duplicate …\n"],["update","GDBM","classes/GDBM.html#method-i-update","(p1)","<p>Adds the key-value pairs of <em>other</em> to <em>gdbm</em>, overwriting\nentries with duplicate keys with those from <em>other</em> …\n"],["update","Gem::StreamUI::SilentDownloadReporter","classes/Gem/StreamUI/SilentDownloadReporter.html#method-i-update","(current)",""],["update","Gem::StreamUI::VerboseDownloadReporter","classes/Gem/StreamUI/VerboseDownloadReporter.html#method-i-update","(bytes)",""],["update","Hash","classes/Hash.html#method-i-update","(p1)","<p>Adds the contents of <em>other_hash</em> to <em>hsh</em>.  If no block is\nspecified, entries with duplicate keys are overwritten …\n"],["update","HttpServer::Table","classes/HttpServer/Table.html#method-i-update","(hash)",""],["update","Notify","classes/Notify.html#method-i-update","(filename, time)",""],["update","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-update","(p1, p2 = v2)","<p>Encrypts data in a streaming fashion. Hand consecutive blocks of data to\nthe <code>update</code> method in order to …\n"],["update","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-update","(p1)","<p>Not every message digest can be computed in one single pass. If a message\ndigest is to be computed from …\n"],["update","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-update","(p1)",""],["update","SDBM","classes/SDBM.html#method-i-update","(p1)",""],["update","Syck::SpecialHash","classes/Syck/SpecialHash.html#method-i-update","( h )",""],["update","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-update","(hash)",""],["update","TkVariable","classes/TkVariable.html#method-i-update","(hash)",""],["update","TkVariable","classes/TkVariable.html#method-i-update","(hash)",""],["update","YAML::DBM","classes/YAML/DBM.html#method-i-update","( hsh )","<p>Updates the database with multiple values from the specified object. Takes\nany object which implements …\n"],["updateStates","Object","classes/Object.html#method-i-updateStates","()",""],["update_aliases","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-update_aliases","()","<p>Updates the child modules &amp; classes by replacing the ones that are\naliases through a constant.\n<p>The …\n"],["update_animated_gif","TkImg_demo","classes/TkImg_demo.html#method-i-update_animated_gif","(w, method, num)",""],["update_checksum","Gem::Package::TarHeader","classes/Gem/Package/TarHeader.html#method-i-update_checksum","()","<p>Updates the TarHeader&#39;s checksum\n"],["update_font","BWidget_Demo","classes/BWidget_Demo.html#method-i-update_font","(newfont)",""],["update_gem","Gem::Commands::UpdateCommand","classes/Gem/Commands/UpdateCommand.html#method-i-update_gem","(name, version = Gem::Requirement.default)",""],["update_gems","Gem::Commands::UpdateCommand","classes/Gem/Commands/UpdateCommand.html#method-i-update_gems","(gems_to_update)",""],["update_includes","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-update_includes","()","<p>Deletes from #includes those whose module has been removed from the\ndocumentation.\n"],["update_index","Gem::Indexer","classes/Gem/Indexer.html#method-i-update_index","()","<p>Perform an in-place update of the repository from newly added gems.  Only\nworks for modern indicies, …\n"],["update_output_dir","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-update_output_dir","(op_dir, time, last = {})","<p>Update the flag file in an output directory.\n"],["update_ri_cache","Gem::DocManager","classes/Gem/DocManager.html#method-c-update_ri_cache","()","<p>Updates the RI cache for RDoc 2 if it is installed\n"],["update_rubygems","Gem::Commands::UpdateCommand","classes/Gem/Commands/UpdateCommand.html#method-i-update_rubygems","()","<p>Update RubyGems software to the latest version.\n"],["update_specs_index","Gem::Indexer","classes/Gem/Indexer.html#method-i-update_specs_index","(index, source, dest)","<p>Combines specs in <code>index</code> and <code>source</code> then writes\nout a new copy to <code>dest</code>.  For a latest index, does not …\n"],["update_without_notify","Tk::OptionObj","classes/Tk/OptionObj.html#method-i-update_without_notify","(hash)",""],["updated","Gem::StreamUI::SilentProgressReporter","classes/Gem/StreamUI/SilentProgressReporter.html#method-i-updated","(message)",""],["updated","Gem::StreamUI::SimpleProgressReporter","classes/Gem/StreamUI/SimpleProgressReporter.html#method-i-updated","(message)","<p>Prints out a dot and ignores <code>message</code>.\n"],["updated","Gem::StreamUI::VerboseProgressReporter","classes/Gem/StreamUI/VerboseProgressReporter.html#method-i-updated","(message)","<p>Prints out the position relative to the total and the <code>message</code>.\n"],["upgrade_to_class","RDoc::Context","classes/RDoc/Context.html#method-i-upgrade_to_class","(mod, class_type, enclosing)","<p>Upgrades NormalModule <code>mod</code> in <code>enclosing</code> to a\n<code>class_type</code>\n"],["upload","CompositePublisher","classes/CompositePublisher.html#method-i-upload","()","<p>Upload all the individual publishers.\n"],["upload","Rake::CompositePublisher","classes/Rake/CompositePublisher.html#method-i-upload","()","<p>Upload all the individual publishers.\n"],["upload","Rake::SshDirPublisher","classes/Rake/SshDirPublisher.html#method-i-upload","()",""],["upload","Rake::SshFilePublisher","classes/Rake/SshFilePublisher.html#method-i-upload","()","<p>Upload the local directory to the remote directory.\n"],["upload","Rake::SshFreshDirPublisher","classes/Rake/SshFreshDirPublisher.html#method-i-upload","()",""],["upload","SshDirPublisher","classes/SshDirPublisher.html#method-i-upload","()",""],["upload","SshFilePublisher","classes/SshFilePublisher.html#method-i-upload","()","<p>Upload the local directory to the remote directory.\n"],["upload","SshFreshDirPublisher","classes/SshFreshDirPublisher.html#method-i-upload","()",""],["upload_files","Rake::FtpUploader","classes/Rake/FtpUploader.html#method-i-upload_files","(wildcard)","<p>Upload all files matching <code>wildcard</code> to the uploader&#39;s root\npath.\n"],["upper","Win32::SSPI::SecurityHandle","classes/Win32/SSPI/SecurityHandle.html#method-i-upper","()",""],["upper_bound","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-upper_bound","()",""],["upper_bound=","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-upper_bound-3D","(ubound)",""],["upper_triangular?","Matrix","classes/Matrix.html#method-i-upper_triangular-3F","()","<p>Returns <code>true</code> is this is an upper triangular matrix.\n"],["upstream_proxy","Object","classes/Object.html#method-i-upstream_proxy","()",""],["upto","Date","classes/Date.html#method-i-upto","(p1)","<p>This method is equivalent to step(max, 1){|date| …}.\n"],["upto","Integer","classes/Integer.html#method-i-upto","(p1)","<p>Iterates <em>block</em>, passing in integer values from <em>int</em> up to\nand including <em>limit</em>.\n<p>If no block is given, an …\n"],["upto","Integer","classes/Integer.html#method-i-upto","(p1)","<p>Iterates <em>block</em>, passing in integer values from <em>int</em> up to\nand including <em>limit</em>.\n<p>If no block is given, an …\n"],["upto","String","classes/String.html#method-i-upto","(p1, p2 = v2)","<p>Iterates through successive values, starting at <em>str</em> and ending at\n<em>other_str</em> inclusive, passing each value …\n"],["uptodate?","FileUtils","classes/FileUtils.html#method-c-uptodate-3F","(new, old_list, options = nil)","<p>Options: (none)\n<p>Returns true if <code>newer</code> is newer than all <code>old_list</code>.\nNon-existent files are older than any …\n"],["uri","DRb","classes/DRb.html#method-c-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri_escaper","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-uri_escaper","()",""],["uri_option","DRb::DRbProtocol","classes/DRb/DRbProtocol.html#method-c-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["uri_option","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-c-uri_option","(uri, config)",""],["uri_option","DRb::DRbTCPSocket","classes/DRb/DRbTCPSocket.html#method-c-uri_option","(uri, config)","<p>Parse <code>uri</code> into a [uri, option] pair.\n"],["uri_option","DRb::DRbUNIXSocket","classes/DRb/DRbUNIXSocket.html#method-c-uri_option","(uri, config)",""],["uri_option","DRb::HTTP0","classes/DRb/HTTP0.html#method-c-uri_option","(uri, config)",""],["uri_registered?","RSS::BaseListener","classes/RSS/BaseListener.html#method-i-uri_registered-3F","(uri, name)","<p>test if this uri is registered against this name\n"],["url","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-url","()","<p>BSTR url get the URL for the loaded XML document\n"],["url","IXMLDOMParseError","classes/IXMLDOMParseError.html#method-i-url","()","<p>BSTR url the URL of the XML document containing the error\n"],["url","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-url","()","<p>BSTR url get the URL for the loaded XML document\n"],["url","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-url","()","<p>BSTR url get the URL for the loaded XML document\n"],["url","Msxml","classes/Msxml.html#method-i-url","()","<p>HRESULT url set URL to load an XML document from the URL.\n\n<pre><code>BSTR arg0 --- p [OUT]</code></pre>\n"],["url=","Msxml","classes/Msxml.html#method-i-url-3D","(arg0)","<p>HRESULT url set URL to load an XML document from the URL.\n\n<pre><code>BSTR arg0 --- p [IN]</code></pre>\n"],["url_encode","ERB::Util","classes/ERB/Util.html#method-c-url_encode","(s)","<p>A utility method for encoding the String <em>s</em> as a URL.\n\n<pre><code>require &quot;erb&quot;\ninclude ERB::Util\n\nputs url_encode(&quot;Programming ...\n</code></pre>\n"],["url_join","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-url_join","(*args)",""],["url_split","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-url_split","(uri)",""],["urlsafe_base64","SecureRandom","classes/SecureRandom.html#method-c-urlsafe_base64","(n=nil, padding=false)","<p>SecureRandom.urlsafe_base64 generates a random URL-safe base64 string.\n<p>The argument <em>n</em> specifies the length …\n"],["urlsafe_decode64","Base64","classes/Base64.html#method-i-urlsafe_decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with “Base 64 Encoding with URL and …\n"],["urlsafe_encode64","Base64","classes/Base64.html#method-i-urlsafe_encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with “Base 64 Encoding with URL and …\n"],["usage","Gem::Command","classes/Gem/Command.html#method-i-usage","()","<p>Override to display the usage for an individual gem command.\n<p>The text “[options]” is automatically …\n"],["usage","Object","classes/Object.html#method-i-usage","(msg)",""],["use","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-use","(name=None)",""],["use","Tk::Tcllib::Style","classes/Tk/Tcllib/Style.html#method-c-use","(style)",""],["use_Tile?","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-use_Tile-3F","()",""],["use_Tile?","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-use_Tile-3F","()",""],["use_Tile?","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-use_Tile-3F","()",""],["use_Tile?","Tk::Tcllib::Tablelist","classes/Tk/Tcllib/Tablelist.html#method-c-use_Tile-3F","()",""],["use_as","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-use_as","(axis)",""],["use_const?","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-i-use_const-3F","()",""],["use_default_colors","Curses","classes/Curses.html#method-c-use_default_colors","()","<p>tells the curses library to use terminal&#39;s default colors.\n<p>see also the system manual for default_colors …\n"],["use_loader","IRB::Context","classes/IRB/Context.html#method-i-use_loader","()",""],["use_loader=","IRB::Context","classes/IRB/Context.html#method-i-use_loader-3D","(opt)",""],["use_loader?","IRB::Context","classes/IRB/Context.html#method-i-use_loader-3F","()",""],["use_paths","Gem","classes/Gem.html#method-c-use_paths","(home, *paths)","<p>Use the <code>home</code> and <code>paths</code> values for Gem.dir and\nGem.path.  Used mainly by the unit tests to provide environment …\n"],["use_prefix","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-use_prefix","()","<p>Adds the stored #prefix to the output and clears it.  Lists generate a\nprefix for later consumption. …\n"],["use_readline=","IRB::Context","classes/IRB/Context.html#method-i-use_readline-3D","(opt)",""],["use_registry","URI::Generic","classes/URI/Generic.html#method-c-use_registry","()","<p>Returns whether a registry of naming authorities are being used.\n"],["use_ssl=","Net::HTTP","classes/Net/HTTP.html#method-i-use_ssl-3D","(flag)","<p>Turn on/off SSL. This flag must be set before starting session. If you\nchange use_ssl value after session …\n"],["use_ssl=","Net::HTTP","classes/Net/HTTP.html#method-i-use_ssl-3D","(flag)","<p>Turn on/off SSL. This flag must be set before starting session. If you\nchange use_ssl value after session …\n"],["use_ssl?","Net::HTTP","classes/Net/HTTP.html#method-i-use_ssl-3F","()","<p>Returns true if SSL/TLS is being used with HTTP.\n"],["use_ssl?","Net::HTTP","classes/Net/HTTP.html#method-i-use_ssl-3F","()","<p>Returns true if SSL/TLS is being used with HTTP.\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-i-use_ssl-3F","()","<p>does this instance use SSL?\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-i-use_ssl-3F","()","<p>does this instance use SSL?\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-c-use_ssl-3F","()","<p>returns <code>true</code> if POP3.ssl_params is set\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-c-use_ssl-3F","()","<p>returns <code>true</code> if POP3.ssl_params is set\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-i-use_ssl-3F","()","<p>does this instance use SSL?\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-c-use_ssl-3F","()","<p>returns <code>true</code> if POP3.ssl_params is set\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-c-use_ssl-3F","()","<p>returns <code>true</code> if POP3.ssl_params is set\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-i-use_ssl-3F","()","<p>does this instance use SSL?\n"],["use_tracer=","IRB::Context","classes/IRB/Context.html#method-i-use_tracer-3D","(opt)",""],["use_types_at","Object::Syck::Resolver","classes/Object/Syck/Resolver.html#method-i-use_types_at","(p1)","<p>YAML::Syck::Resolver#use_types_at\n"],["use_ui","Gem::DefaultUserInteraction","classes/Gem/DefaultUserInteraction.html#method-c-use_ui","(new_ui)","<p>Use <code>new_ui</code> for the duration of <code>block</code>.\n"],["use_ui","Gem::DefaultUserInteraction","classes/Gem/DefaultUserInteraction.html#method-i-use_ui","(new_ui, &block)","<p>See DefaultUserInteraction::use_ui\n"],["usec","Time","classes/Time.html#method-i-usec","()","<p>Returns just the number of microseconds for <em>time</em>.\n\n<pre><code>t = Time.now        #=&gt; 2007-11-19 08:03:26 -0600\n&quot;%10.6f&quot; ...\n</code></pre>\n"],["used","TkFont","classes/TkFont.html#method-i-used","()",""],["used","TkFont","classes/TkFont.html#method-i-used","()",""],["used_on","TkFont","classes/TkFont.html#method-c-used_on","(path=nil)",""],["used_on","TkFont","classes/TkFont.html#method-c-used_on","(path=nil)",""],["usegap","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-usegap","(mode=None)",""],["useinputmethods","TkXIM","classes/TkXIM.html#method-c-useinputmethods","(value = None, win = nil)",""],["useinputmethods","TkXIM","classes/TkXIM.html#method-i-useinputmethods","(value=None)",""],["useinputmethods_displayof","TkXIM","classes/TkXIM.html#method-c-useinputmethods_displayof","(win, value = None)",""],["user","URI::Generic","classes/URI/Generic.html#method-i-user","()","<p>returns the user component\n"],["user=","URI::Generic","classes/URI/Generic.html#method-i-user-3D","(user)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["user=","XMLRPC::Client","classes/XMLRPC/Client.html#method-i-user-3D","(new_user)",""],["user_agent","Gem::RemoteFetcher","classes/Gem/RemoteFetcher.html#method-i-user_agent","()",""],["user_dir","Gem","classes/Gem.html#method-c-user_dir","()","<p>Path for gems in the user&#39;s home directory\n"],["user_home","Gem","classes/Gem.html#method-c-user_home","()","<p>The home directory for the user.\n"],["usercode","Object","classes/Object.html#method-i-usercode","(f, out)",""],["userinfo","URI::Generic","classes/URI/Generic.html#method-i-userinfo","()","<p>returns the userinfo, either as &#39;user&#39; or &#39;user:password&#39;\n"],["userinfo=","URI::Generic","classes/URI/Generic.html#method-i-userinfo-3D","(userinfo)","<p>Sets userinfo, argument is string like &#39;name:pass&#39;\n"],["usual","Tk::Itk","classes/Tk/Itk.html#method-c-usual","(arg, *args)",""],["usual_names","Tk::Itk","classes/Tk/Itk.html#method-c-usual_names","()",""],["utc","Time","classes/Time.html#method-c-utc","(*args)","<p>Creates a time based on given values, interpreted as UTC (GMT). The year\nmust be specified. Other values …\n"],["utc","Time","classes/Time.html#method-i-utc","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:18:31 -0600\nt.gmt? ...\n</code></pre>\n"],["utc?","Time","classes/Time.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre><code>t = Time.now                        #=&gt; 2007-11-19 ...\n</code></pre>\n"],["utc_offset","Time","classes/Time.html#method-i-utc_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=&gt; ...\n</code></pre>\n"],["utf_backslash","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-utf_backslash","(str)",""],["utf_to_backslash","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-utf_to_backslash","(str)",""],["utf_to_backslash_sequence","Tk::EncodedString","classes/Tk/EncodedString.html#method-c-utf_to_backslash_sequence","(str)",""],["utime","File","classes/File.html#method-c-utime","(p1, p2, *args)","<p>Sets the access and modification times of each named file to the first two\narguments. Returns the number …\n"],["utime","Pathname","classes/Pathname.html#method-i-utime","(p1, p2)","<p>See <code>File.utime</code>.  Update the access and modification times.\n"],["uuid","SecureRandom","classes/SecureRandom.html#method-c-uuid","()","<p>SecureRandom.uuid generates a v4 random UUID (Universally Unique\nIDentifier).\n\n<pre><code>p SecureRandom.uuid #=&gt; ...\n</code></pre>\n"],["v","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-v","()",""],["v_inv","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-v_inv","()",""],["valid?","RSS::Element","classes/RSS/Element.html#method-i-valid-3F","(ignore_unknown_element=true)",""],["valid?","Tk::Iwidgets::Datefield","classes/Tk/Iwidgets/Datefield.html#method-i-valid-3F","()",""],["valid?","Tk::Iwidgets::Timefield","classes/Tk/Iwidgets/Timefield.html#method-i-valid-3F","()",""],["valid_civil?","Date","classes/Date.html#method-c-valid_civil-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given calendar date is valid, and false if not.\n<p>For example:\n\n<pre><code>Date.valid_date?(2001,2,3) ...</code></pre>\n"],["valid_commercial?","Date","classes/Date.html#method-c-valid_commercial-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given week date is valid, and false if not.\n<p>For example:\n\n<pre><code>Date.valid_commercial?(2001,5,6) ...</code></pre>\n"],["valid_date?","Date","classes/Date.html#method-c-valid_date-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given calendar date is valid, and false if not.\n<p>For example:\n\n<pre><code>Date.valid_date?(2001,2,3) ...</code></pre>\n"],["valid_encoding?","String","classes/String.html#method-i-valid_encoding-3F","()","<p>Returns true for a string which encoded correctly.\n\n<pre><code>&quot;\\xc2\\xa1&quot;.force_encoding(&quot;UTF-8&quot;).valid_encoding? ...</code></pre>\n"],["valid_fields","TkEvent::Event","classes/TkEvent/Event.html#method-i-valid_fields","(group_flag=nil)",""],["valid_for_generate","TkEvent::Event","classes/TkEvent/Event.html#method-i-valid_for_generate","(group_flag=nil)",""],["valid_jd?","Date","classes/Date.html#method-c-valid_jd-3F","(p1, p2 = v2)","<p>Just returns true.  It&#39;s nonsense, but is for symmetry.\n<p>For example:\n\n<pre><code>Date.valid_jd?(2451944)       ...</code></pre>\n"],["valid_moves","Knights_Tour","classes/Knights_Tour.html#method-i-valid_moves","(square)","<p>Return a list of accessible squares from a given square\n"],["valid_ordinal?","Date","classes/Date.html#method-c-valid_ordinal-3F","(p1, p2, p3 = v3)","<p>Returns true if the given ordinal date is valid, and false if not.\n<p>For example:\n\n<pre><code>Date.valid_ordinal?(2001,34) ...</code></pre>\n"],["validate","Gem::Specification","classes/Gem/Specification.html#method-i-validate","(packaging = true)","<p>Checks that the specification contains all required fields, and does a very\nbasic sanity check.\n<p>Raises …\n"],["validate","REXML::Validation::Validator","classes/REXML/Validation/Validator.html#method-i-validate","( event )",""],["validate","RSS::Element","classes/RSS/Element.html#method-i-validate","(ignore_unknown_element=true)",""],["validate","Tk::Entry","classes/Tk/Entry.html#method-i-validate","(mode = nil)",""],["validate","Tk::Tcllib::Widget","classes/Tk/Tcllib/Widget.html#method-c-validate","(compare_as, *args)",""],["validate","Tk::TkTable","classes/Tk/TkTable.html#method-i-validate","(idx)",""],["validateOnParse","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-validateOnParse","()","<p>BOOL validateOnParse indicates whether the parser performs validation\n"],["validateOnParse","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-validateOnParse","()","<p>BOOL validateOnParse indicates whether the parser performs validation\n"],["validateOnParse","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-validateOnParse","()","<p>BOOL validateOnParse indicates whether the parser performs validation\n"],["validateOnParse=","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-validateOnParse-3D","(arg0)","<p>VOID validateOnParse indicates whether the parser performs validation\n"],["validateOnParse=","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-validateOnParse-3D","(arg0)","<p>VOID validateOnParse indicates whether the parser performs validation\n"],["validateOnParse=","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-validateOnParse-3D","(arg0)","<p>VOID validateOnParse indicates whether the parser performs validation\n"],["validatePhoneChange","Object","classes/Object.html#method-i-validatePhoneChange","(widget, vmode, idx, char)","<p>validatePhoneChange – Checks that the replacement (mapped to a digit) of\nthe given character in an entry …\n"],["validate_duplicate_links","RSS::Atom::DuplicateLinkChecker","classes/RSS/Atom/DuplicateLinkChecker.html#method-i-validate_duplicate_links","(links)",""],["validate_for_stream","RSS::Element","classes/RSS/Element.html#method-i-validate_for_stream","(tags, ignore_unknown_element=true)",""],["validate_one_tag_name","RSS::ImageModelUtils","classes/RSS/ImageModelUtils.html#method-i-validate_one_tag_name","(ignore_unknown_element, name, tags)",""],["validate_proc","Object","classes/Object.html#method-i-validate_proc","(c, val)",""],["value","CGI::Cookie","classes/CGI/Cookie.html#method-i-value","()","<p>Returns the value or list of values for this cookie.\n"],["value","DL::Importer","classes/DL/Importer.html#method-i-value","(ty, val=nil)",""],["value","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-value","()","<p>VARIANT value string value of the attribute\n"],["value","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-value","()","<p>Raises an HTTP error if the response is not 2xx (success).\n"],["value","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-value","(arg1, arg2 = nil)",""],["value","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-value","()",""],["value","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-value","()",""],["value","REXML::Attribute","classes/REXML/Attribute.html#method-i-value","()","<p>Returns the UNNORMALIZED value of this attribute.  That is, entities have\nbeen expanded to their values …\n"],["value","REXML::CData","classes/REXML/CData.html#method-i-value","()",""],["value","REXML::Entity","classes/REXML/Entity.html#method-i-value","()","<p>Returns the value of this entity.  At the moment, only internal entities\nare processed.  If the value …\n"],["value","REXML::Text","classes/REXML/Text.html#method-i-value","()","<p>Returns the string value of this text.  This is the text without entities,\nas it might be used programmatically, …\n"],["value","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-value","()","<p>Return the tuple itself\n"],["value","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-value","()","<p>Return the object which makes up the tuple itself: the Array or Hash.\n"],["value","Thread","classes/Thread.html#method-i-value","()","<p>Waits for <em>thr</em> to complete (via <code>Thread#join</code>) and\nreturns its value.\n\n<pre><code>a = Thread.new { 2 + 2 }\na.value   ...</code></pre>\n"],["value","Tk::BWidget::ProgressDlg","classes/Tk/BWidget/ProgressDlg.html#method-i-value","()",""],["value","Tk::Entry","classes/Tk/Entry.html#method-i-value","()",""],["value","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-value","()",""],["value","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-value","()",""],["value","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-value","()",""],["value","Tk::Listbox","classes/Tk/Listbox.html#method-i-value","()",""],["value","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-value","()",""],["value","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-value","()",""],["value","Tk::Scale","classes/Tk/Scale.html#method-i-value","()",""],["value","Tk::Tcllib::GetString_Dialog","classes/Tk/Tcllib/GetString_Dialog.html#method-i-value","()",""],["value","Tk::Tcllib::Swaplist_Dialog","classes/Tk/Tcllib/Swaplist_Dialog.html#method-i-value","()",""],["value","TkDialogObj","classes/TkDialogObj.html#method-i-value","()",""],["value","TkDialogObj","classes/TkDialogObj.html#method-i-value","()",""],["value","TkVariable","classes/TkVariable.html#method-i-value","()",""],["value","TkVariable","classes/TkVariable.html#method-i-value","()",""],["value","Toggle","classes/Toggle.html#method-i-value","()",""],["value","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-value","()","<p>Returns value if value is exists. If the value does not exist, this method\nreturns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["value","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-value","()","<p>Returns Ruby object value from OLE variant.\n\n<pre><code>obj = WIN32OLE_VARIANT.new(1, WIN32OLE::VARIANT::VT_BSTR) ...</code></pre>\n"],["value=","CGI::Cookie","classes/CGI/Cookie.html#method-i-value-3D","(val)","<p>Replaces the value of this cookie with a new value or list of values.\n"],["value=","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-value-3D","(arg0)","<p>VOID value string value of the attribute\n"],["value=","Object::Syck::Map","classes/Object/Syck/Map.html#method-i-value-3D","(p1)","<p>YAML::Syck::Map.value=\n"],["value=","Object::Syck::Scalar","classes/Object/Syck/Scalar.html#method-i-value-3D","(p1)","<p>YAML::Syck::Scalar.value=\n"],["value=","Object::Syck::Seq","classes/Object/Syck/Seq.html#method-i-value-3D","(p1)","<p>YAML::Syck::Seq.value=\n"],["value=","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-value-3D","(p1)",""],["value=","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-value-3D","(p1)",""],["value=","REXML::Text","classes/REXML/Text.html#method-i-value-3D","( val )","<p>Sets the contents of this text node.  This expects the text to be\nunnormalized.  It returns self.\n\n<pre><code>e = ...</code></pre>\n"],["value=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-value-3D","(value)",""],["value=","Tk::BWidget::ProgressDlg","classes/Tk/BWidget/ProgressDlg.html#method-i-value-3D","(val)",""],["value=","Tk::Entry","classes/Tk/Entry.html#method-i-value-3D","(val)",""],["value=","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-value-3D","(val)",""],["value=","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-value-3D","(val)",""],["value=","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-value-3D","(val)",""],["value=","Tk::Listbox","classes/Tk/Listbox.html#method-i-value-3D","(vals)",""],["value=","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-value-3D","(val)",""],["value=","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-value-3D","(val)",""],["value=","Tk::Scale","classes/Tk/Scale.html#method-i-value-3D","(val)",""],["value=","TkVariable","classes/TkVariable.html#method-i-value-3D","(val)",""],["value=","TkVariable","classes/TkVariable.html#method-i-value-3D","(val)",""],["value=","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-value-3D","(p1)","<p>Sets variant value to val. If the val type does not match variant value\ntype(vartype), then val is changed …\n"],["value?","DBM","classes/DBM.html#method-i-value-3F","(p1)","<p>Returns true if the database contains the specified string value, false\notherwise.\n"],["value?","ENV","classes/ENV.html#method-c-value-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>value</code>.\n"],["value?","GDBM","classes/GDBM.html#method-i-value-3F","(p1)","<p>Returns true if the given value <em>v</em> exists within the database.\nReturns false otherwise.\n"],["value?","Hash","classes/Hash.html#method-i-value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_value?(100) ...\n</code></pre>\n"],["value?","SDBM","classes/SDBM.html#method-i-value-3F","(p1)",""],["value_type=","TkVariable","classes/TkVariable.html#method-i-value_type-3D","(val)",""],["value_type=","TkVariable","classes/TkVariable.html#method-i-value_type-3D","(val)",""],["values","DBM","classes/DBM.html#method-i-values","()","<p>Returns an array of all the string values in the database.\n"],["values","ENV","classes/ENV.html#method-c-values","()","<p>Returns every environment variable value as an Array\n"],["values","Function","classes/Function.html#method-i-values","(x)",""],["values","GDBM","classes/GDBM.html#method-i-values","()","<p>Returns an array of all values of this database.\n"],["values","Hash","classes/Hash.html#method-i-values","()","<p>Returns a new array populated with the values from <em>hsh</em>. See also\n<code>Hash#keys</code>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200, ...\n</code></pre>\n"],["values","SDBM","classes/SDBM.html#method-i-values","()",""],["values","Struct","classes/Struct.html#method-i-values","()","<p>Returns the values for this instance as an array.\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</code></pre>\n"],["values","Tk::BLT::Tree::Node","classes/Tk/BLT/Tree/Node.html#method-i-values","(key=None)",""],["values","Tk::RbWidget::Combobox","classes/Tk/RbWidget/Combobox.html#method-i-values","(ary = nil)",""],["values","Tk::WinRegistry","classes/Tk/WinRegistry.html#method-c-values","(keynam, pattern=nil)",""],["values","YAML::DBM","classes/YAML/DBM.html#method-i-values","()","<p>Returns an array of values from the database.\n"],["values_at","Array","classes/Array.html#method-i-values_at","(*args)","<p>Returns an array containing the elements in <code>self</code> corresponding\nto the given selector(s). The selectors …\n"],["values_at","CSV::Row","classes/CSV/Row.html#method-i-values_at","(*headers_and_or_indices)",""],["values_at","CSV::Table","classes/CSV/Table.html#method-i-values_at","(*indices_or_headers)","<p>The mixed mode default is to treat a list of indices as row access,\nreturning the rows indicated.  Anything …\n"],["values_at","DBM","classes/DBM.html#method-i-values_at","(*args)","<p>Returns an array containing the values associated with the given keys.\n"],["values_at","ENV","classes/ENV.html#method-c-values_at","(*args)","<p>Returns an array containing the environment variable values associated with\nthe given names.  See also …\n"],["values_at","GDBM","classes/GDBM.html#method-i-values_at","(*args)","<p>Returns an array of the values associated with each specified <em>key</em>.\n"],["values_at","Hash","classes/Hash.html#method-i-values_at","(*args)","<p>Return an array containing the values associated with the given keys. Also\nsee <code>Hash.select</code>.\n\n<pre><code>h = { &quot;cat&quot; ...</code></pre>\n"],["values_at","MatchData","classes/MatchData.html#method-i-values_at","(*args)","<p>Uses each <em>index</em> to access the matching values, returning an array\nof the corresponding matches.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138: ...</code></pre>\n"],["values_at","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-values_at","(*keys)",""],["values_at","SDBM","classes/SDBM.html#method-i-values_at","(*args)",""],["values_at","Struct","classes/Struct.html#method-i-values_at","(*args)","<p>Returns an array containing the elements in <code>self</code> corresponding\nto the given selector(s). The selectors …\n"],["values_at","YAML::DBM","classes/YAML/DBM.html#method-i-values_at","( *keys )","<p>Returns an array containing the values associated with the given keys.\n"],["var_list","DEBUGGER__::Context","classes/DEBUGGER__/Context.html#method-i-var_list","(ary, binding)",""],["variable","Tk::BLT::Vector","classes/Tk/BLT/Vector.html#method-i-variable","(var)",""],["variable","Tk::BWidget::ProgressDlg","classes/Tk/BWidget/ProgressDlg.html#method-i-variable","()",""],["variable","TkVariable","classes/TkVariable.html#method-i-variable","()",""],["variable","TkVariable","classes/TkVariable.html#method-i-variable","()",""],["variable=","TkVariable","classes/TkVariable.html#method-i-variable-3D","(var)",""],["variable=","TkVariable","classes/TkVariable.html#method-i-variable-3D","(var)",""],["variable_element","TkVariable","classes/TkVariable.html#method-i-variable_element","(*idxs)",""],["variable_element","TkVariable","classes/TkVariable.html#method-i-variable_element","(*idxs)",""],["variable_is_set?","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-variable_is_set-3F","()",""],["variable_kind","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-variable_kind","()","<p>Returns variable kind string.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...</code></pre>\n"],["variable_type=","TkVariable","classes/TkVariable.html#method-i-variable_type-3D","(var)",""],["variable_type=","TkVariable","classes/TkVariable.html#method-i-variable_type-3D","(var)",""],["variables","REXML::Functions","classes/REXML/Functions.html#method-c-variables","()",""],["variables","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-variables","()","<p>Returns array of WIN32OLE_VARIABLE objects which represent variables\ndefined in OLE class.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["variables=","REXML::Functions","classes/REXML/Functions.html#method-c-variables-3D","(x)",""],["variables=","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-variables-3D","( vars={} )",""],["varkind","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-varkind","()","<p>Returns the number which represents variable kind.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object ...</code></pre>\n"],["vartype","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-vartype","()","<p>Returns OLE variant type.\n\n<pre><code>obj = WIN32OLE_VARIANT.new(&quot;string&quot;)\nobj.vartype # =&gt; WIN32OLE::VARIANT::VT_BSTR\n</code></pre>\n"],["vcompare","TkPackage","classes/TkPackage.html#method-i-vcompare","(version1, version2)",""],["vector","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-vector","(series, xcrd, ycrd, ucmp, vcmp)",""],["vectorconfig","Tk::Tcllib::Plotchart::XYPlot","classes/Tk/Tcllib/Plotchart/XYPlot.html#method-i-vectorconfig","(series, key, value=None)",""],["ver","BigDecimal","classes/BigDecimal.html#method-c-ver","()","<p>Returns the BigDecimal version number.\n<p>Ruby 1.8.0 returns 1.0.0. Ruby 1.8.1 thru 1.8.3 return 1.0.1.\n"],["ver","OptionParser","classes/OptionParser.html#method-i-ver","()","<p>Returns version string from program_name, version and release.\n"],["verbose","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-verbose","()","<p>Get the default value of the :verbose option.\n"],["verbose","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-verbose","()","<p>Get whether the server is in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-verbose","(value=nil)","<p>Get/set the verbose flag controlling output from the FileUtils utilities. \nIf verbose is true, then the …\n"],["verbose","Sys","classes/Sys.html#method-i-verbose","(&block)","<p>Perform a block with $verbose enabled.\n"],["verbose=","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-verbose-3D","(on)","<p>Set the default value of the :verbose option.\n<p>See #new().  The initial default value is false.\n"],["verbose=","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-verbose-3D","(v)","<p>Set whether to operate in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose?","IRB::Context","classes/IRB/Context.html#method-i-verbose-3F","()",""],["verbose?","Object","classes/Object.html#method-i-verbose-3F","()",""],["verbose?","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-i-verbose-3F","()",""],["verify","CertStore","classes/CertStore.html#method-i-verify","(cert)",""],["verify","Net::POP3","classes/Net/POP3.html#method-c-verify","()","<p>returns whether verify_mode is enable from POP3.ssl_params\n"],["verify","Net::POP3","classes/Net/POP3.html#method-c-verify","()","<p>returns whether verify_mode is enable from POP3.ssl_params\n"],["verify","Net::POP3","classes/Net/POP3.html#method-c-verify","()","<p>returns whether verify_mode is enable from POP3.ssl_params\n"],["verify","Net::POP3","classes/Net/POP3.html#method-c-verify","()","<p>returns whether verify_mode is enable from POP3.ssl_params\n"],["verify","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-verify","(p1)","<p>Checks that cert signature is made with PRIVversion of this PUBLIC\n&#39;key&#39;\n"],["verify","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-verify","(p1, p2, p3 = v3)",""],["verify","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-verify","(p1, p2, p3 = v3)",""],["verify","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-verify","(p1, p2, p3 = v3, p4 = v4)",""],["verify","OpenSSL::PKey::PKey","classes/OpenSSL/PKey/PKey.html#method-i-verify","(p1, p2, p3)","<p>To verify the <code>String</code> <code>signature</code>,\n<code>digest</code>, an instance of OpenSSL::Digest, must be provided to\nre-compute …\n"],["verify","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-verify","(p1)",""],["verify","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-verify","(p1)","<p>Checks that cert signature is made with PRIVversion of this PUBLIC\n&#39;key&#39;\n"],["verify","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-verify","(p1)","<p>Checks that cert signature is made with PRIVversion of this PUBLIC\n&#39;key&#39;\n"],["verify","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-verify","(p1, p2 = v2)",""],["verify_api_key","Gem::GemcutterUtilities","classes/Gem/GemcutterUtilities.html#method-i-verify_api_key","(key)",""],["verify_callback=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-verify_callback-3D","(p1)","<p>General callback for OpenSSL verify\n"],["verify_gem","Gem::Security::Policy","classes/Gem/Security/Policy.html#method-i-verify_gem","(signature, data, chain, time = Time.now)","<p>Verify that the gem data with the given signature and signing chain matched\nthis security policy at the …\n"],["verify_gem","Gem::Validator","classes/Gem/Validator.html#method-i-verify_gem","(gem_data)","<p>Given a gem file&#39;s contents, validates against its own MD5 checksum\n<p>gem_data &mdash; <p>String &mdash; Contents of the …\n\n\n"],["verify_gem_file","Gem::Validator","classes/Gem/Validator.html#method-i-verify_gem_file","(gem_path)","<p>Given the path to a gem file, validates against its own MD5 checksum\n<p>gem_path &mdash; <p>String &mdash; Path to gem file …\n\n\n"],["verify_gem_home","Gem::Installer","classes/Gem/Installer.html#method-i-verify_gem_home","(unpack = false)",""],["verify_result","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-verify_result","()","<p>Returns the result of the peer certificates verification.  See verify(1)\nfor error values and descriptions. …\n"],["verify_trust_dir","Gem::Security","classes/Gem/Security.html#method-c-verify_trust_dir","(path, perms)","<p>Make sure the trust directory exists.  If it does exist, make sure it&#39;s\nactually a directory.  If …\n"],["version","ERB","classes/ERB.html#method-c-version","()","<p>Returns revision information for the erb.rb module.\n"],["version","IRB","classes/IRB.html#method-c-version","()","<p>IRB version method\n"],["version","Msxml","classes/Msxml.html#method-i-version","()","<p>HRESULT version get XML version number.\n\n<pre><code>BSTR arg0 --- p [OUT]</code></pre>\n"],["version","Object","classes/Object.html#method-i-version","()",""],["version","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-version","()",""],["version","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-version","()",""],["version","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-version","()",""],["version","OptionParser","classes/OptionParser.html#method-i-version","()","<p>Version\n"],["version","REXML::Document","classes/REXML/Document.html#method-i-version","()","<p>@return the XMLDecl version of this document as a String. If no XMLDecl has\nbeen set, returns the default …\n"],["version","Tk::TkDND::DND","classes/Tk/TkDND/DND.html#method-c-version","()",""],["version","Tk::TkDND::Shape","classes/Tk/TkDND/Shape.html#method-i-version","()",""],["version","TkPixmapImage","classes/TkPixmapImage.html#method-c-version","()",""],["version","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-version","()","<p>Returns the type library version.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;)\nputs ...</code></pre>\n"],["version=","Gem::Specification","classes/Gem/Specification.html#method-i-version-3D","(version)","<p>Set the version to <code>version</code>, potentially also setting\nrequired_rubygems_version if <code>version</code> indicates it …\n"],["version=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-version-3D","(p1)",""],["version=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-version-3D","(p1)",""],["version=","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-version-3D","(p1)",""],["version?","Object","classes/Object.html#method-i-version-3F","(ver)",""],["version_1_2","Net::HTTP","classes/Net/HTTP.html#method-c-version_1_2","()","<p>Turns on net/http 1.2 (ruby 1.8) features. Defaults to ON in ruby 1.8 or\nlater.\n"],["version_1_2","Net::HTTP","classes/Net/HTTP.html#method-c-version_1_2","()","<p>Turns on net/http 1.2 (ruby 1.8) features. Defaults to ON in ruby 1.8 or\nlater.\n"],["version_1_2?","Net::HTTP","classes/Net/HTTP.html#method-c-version_1_2-3F","()","<p>Returns true if net/http is in version 1.2 mode. Defaults to true.\n"],["version_1_2?","Net::HTTP","classes/Net/HTTP.html#method-c-version_1_2-3F","()","<p>Returns true if net/http is in version 1.2 mode. Defaults to true.\n"],["version_up","Object","classes/Object.html#method-i-version_up","()",""],["versions","RSS::Maker","classes/RSS/Maker.html#method-i-versions","()",""],["versions","TkPackage","classes/TkPackage.html#method-i-versions","(package)",""],["vertline","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-vertline","(txt, time)",""],["vertline","Tk::Tcllib::Plotchart::Timechart","classes/Tk/Tcllib/Plotchart/Timechart.html#method-i-vertline","(txt, time)",""],["vi_editing_mode","Readline","classes/Readline.html#method-c-vi_editing_mode","()","<p>Specifies VI editing mode. See the manual of GNU Readline for details of VI\nediting mode.\n<p>Raises NotImplementedError …\n"],["vi_editing_mode?","Readline","classes/Readline.html#method-c-vi_editing_mode-3F","()","<p>Returns true if vi mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["view","Tk::BLT::PlotComponent::Axis","classes/Tk/BLT/PlotComponent/Axis.html#method-i-view","()",""],["view","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-view","(*index)",""],["view","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-view","(*idxs)",""],["view","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-view","(*index)",""],["view_moveto","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-view_moveto","(*idxs)",""],["view_moveto","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-view_moveto","(*index)",""],["view_port","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-view_port","(w, *args)",""],["view_port","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-view_port","(*args)",""],["view_scroll","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-view_scroll","(index, what='pages')",""],["view_scroll","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-view_scroll","(index, what='pages')",""],["viewable","TkWinfo","classes/TkWinfo.html#method-c-viewable","(win)",""],["viewable","TkWinfo","classes/TkWinfo.html#method-c-viewable","(win)",""],["virtual_host","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-virtual_host","(server)","<p>Adds <code>server</code> as a virtual host.\n"],["visible","Tk::BWidget::Tree","classes/Tk/BWidget/Tree.html#method-i-visible","(node)",""],["visible","Tk::BWidget::Tree::Node","classes/Tk/BWidget/Tree/Node.html#method-i-visible","()",""],["visible?","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-visible-3F","()","<p>Returns true if the method is public.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...</code></pre>\n"],["visible?","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-visible-3F","()","<p>Returns true if the OLE class is public.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["visible?","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-visible-3F","()","<p>Returns true if the type library information is not hidden. If wLibFlags of\nTLIBATTR is 0 or LIBFLAG_FRESTRICTED …\n"],["visible?","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-visible-3F","()","<p>Returns true if the variable is public.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["visit_Array","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Array","(o)",""],["visit_BigDecimal","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_BigDecimal","(o)",""],["visit_Class","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Class","(o)",""],["visit_Complex","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Complex","(o)",""],["visit_Date","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Date","(o)",""],["visit_DateTime","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_DateTime","(o)",""],["visit_Exception","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Exception","(o)",""],["visit_FalseClass","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_FalseClass","(o)",""],["visit_Float","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Float","(o)",""],["visit_Hash","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Hash","(o)",""],["visit_Integer","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Integer","(o)",""],["visit_Module","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Module","(o)",""],["visit_NilClass","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_NilClass","(o)",""],["visit_Object","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Object","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Omap","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Psych_Omap","(o)",""],["visit_Psych_Set","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Psych_Set","(o)",""],["visit_Range","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Range","(o)",""],["visit_Rational","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Rational","(o)",""],["visit_Regexp","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Regexp","(o)",""],["visit_String","Gem::NoAliasYAMLTree","classes/Gem/NoAliasYAMLTree.html#method-i-visit_String","(str)",""],["visit_String","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_String","(o)",""],["visit_Struct","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Struct","(o)",""],["visit_Symbol","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Symbol","(o)",""],["visit_Time","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Time","(o)",""],["visit_TrueClass","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_TrueClass","(o)",""],["visual","TkWinfo","classes/TkWinfo.html#method-c-visual","(win)",""],["visual","TkWinfo","classes/TkWinfo.html#method-c-visual","(win)",""],["visualid","TkWinfo","classes/TkWinfo.html#method-c-visualid","(win)",""],["visualid","TkWinfo","classes/TkWinfo.html#method-c-visualid","(win)",""],["visualsavailable","TkWinfo","classes/TkWinfo.html#method-c-visualsavailable","(win, includeids=false)",""],["visualsavailable","TkWinfo","classes/TkWinfo.html#method-c-visualsavailable","(win, includeids=false)",""],["voidcmd","Net::FTP","classes/Net/FTP.html#method-i-voidcmd","(cmd)","<p>Sends a command and expect a response beginning with &#39;2&#39;.\n"],["vpath","RubyVM::SourceCodeGenerator","classes/RubyVM/SourceCodeGenerator.html#method-i-vpath","()",""],["vrootheight","TkWinfo","classes/TkWinfo.html#method-c-vrootheight","(win)",""],["vrootheight","TkWinfo","classes/TkWinfo.html#method-c-vrootheight","(win)",""],["vrootwidth","TkWinfo","classes/TkWinfo.html#method-c-vrootwidth","(win)",""],["vrootwidth","TkWinfo","classes/TkWinfo.html#method-c-vrootwidth","(win)",""],["vrootx","TkWinfo","classes/TkWinfo.html#method-c-vrootx","(win)",""],["vrootx","TkWinfo","classes/TkWinfo.html#method-c-vrootx","(win)",""],["vrooty","TkWinfo","classes/TkWinfo.html#method-c-vrooty","(win)",""],["vrooty","TkWinfo","classes/TkWinfo.html#method-c-vrooty","(win)",""],["vsatisfies","TkPackage","classes/TkPackage.html#method-i-vsatisfies","(version1, version2)",""],["vscroll","Tk::RbWidget::ScrollFrame","classes/Tk/RbWidget/ScrollFrame.html#method-i-vscroll","(mode)","<p>vertical scrollbar : ON/OFF\n"],["vscroll","Tk::ScrollbarComposite","classes/Tk/ScrollbarComposite.html#method-i-vscroll","(mode, *args)","<p>vertical scrollbar : ON/OFF\n"],["vscroll","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-vscroll","(scr)",""],["vscroll","Tk::Tcllib::Plotchart::Timechart","classes/Tk/Tcllib/Plotchart/Timechart.html#method-i-vscroll","(scr)",""],["vscroll=","Tk::Tcllib::Plotchart::Ganttchart","classes/Tk/Tcllib/Plotchart/Ganttchart.html#method-i-vscroll-3D","(scr)",""],["vscroll=","Tk::Tcllib::Plotchart::Timechart","classes/Tk/Tcllib/Plotchart/Timechart.html#method-i-vscroll-3D","(scr)",""],["w3cdtf","Time","classes/Time.html#method-i-w3cdtf","(date)",""],["wait","ConditionVariable","classes/ConditionVariable.html#method-i-wait","(mutex, timeout=nil)","<p>Releases the lock held in <code>mutex</code> and waits; reacquires the lock\non wakeup.\n<p>If <code>timeout</code> is given, this method …\n"],["wait","IO","classes/IO.html#method-i-wait","(p1 = v1)","<p>Waits until input is available or times out and returns self or nil when\nEOF is reached.\n"],["wait","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-wait","(timeout = nil)","<p>Releases the lock held in the associated monitor and waits; reacquires the\nlock on wakeup.\n<p>If <code>timeout</code> …\n"],["wait","Object","classes/Object.html#method-i-wait","()",""],["wait","Process","classes/Process.html#method-c-wait","(p1 = v1, p2 = v2)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a <code>Process::Status</code> object containing …\n"],["wait","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-i-wait","()",""],["wait","TkTimer","classes/TkTimer.html#method-i-wait","(on_thread = true, check_root = false)",""],["wait","TkTimer","classes/TkTimer.html#method-i-wait","(on_thread = true, check_root = false)",""],["wait","TkVariable","classes/TkVariable.html#method-i-wait","(on_thread = false, check_root = false)",""],["wait","TkVariable","classes/TkVariable.html#method-i-wait","(on_thread = false, check_root = false)",""],["wait2","Process","classes/Process.html#method-c-wait2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["wait?","Shell::BuiltInCommand","classes/Shell/BuiltInCommand.html#method-i-wait-3F","()",""],["wait?","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-wait-3F","()",""],["wait_all_jobs_execution","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-wait_all_jobs_execution","()","<p>wait for all jobs to terminate\n"],["wait_on_mainloop=","MultiTkIp","classes/MultiTkIp.html#method-i-wait_on_mainloop-3D","(bool)",""],["wait_on_mainloop=","MultiTkIp","classes/MultiTkIp.html#method-i-wait_on_mainloop-3D","(bool)",""],["wait_on_mainloop=","MultiTkIp","classes/MultiTkIp.html#method-i-wait_on_mainloop-3D","(bool)",""],["wait_on_mainloop=","MultiTkIp","classes/MultiTkIp.html#method-i-wait_on_mainloop-3D","(bool)",""],["wait_on_mainloop?","MultiTkIp","classes/MultiTkIp.html#method-i-wait_on_mainloop-3F","()",""],["wait_on_mainloop?","MultiTkIp","classes/MultiTkIp.html#method-i-wait_on_mainloop-3F","()",""],["wait_on_mainloop?","MultiTkIp","classes/MultiTkIp.html#method-i-wait_on_mainloop-3F","()",""],["wait_on_mainloop?","MultiTkIp","classes/MultiTkIp.html#method-i-wait_on_mainloop-3F","()",""],["wait_to_finish_all_process_controllers","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-wait_to_finish_all_process_controllers","()",""],["wait_until","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-wait_until","()","<p>Calls wait repeatedly until the given block yields a truthy value.\n"],["wait_while","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-wait_while","()","<p>Calls wait repeatedly while the given block yields a truthy value.\n"],["wait_writable","Object","classes/Object.html#method-i-wait_writable","()","<p>Wait until the file becomes writable.\n\n<pre><code>ruby -run -e wait_writable -- [OPTION] FILE\n\n-n RETRY    count to ...</code></pre>\n"],["waitall","Process","classes/Process.html#method-c-waitall","()","<p>Waits for all children, returning an array of <em>pid</em>/<em>status</em>\npairs (where <em>status</em> is a <code>Process::Status</code> object). …\n"],["waitfor","Net::Telnet","classes/Net/Telnet.html#method-i-waitfor","(options)","<p>Read data from the host until a certain sequence is matched.\n<p>If a block is given, the received data will …\n"],["waiting","DEBUGGER__","classes/DEBUGGER__.html#method-i-waiting","()",""],["waiting_job?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-waiting_job-3F","(job)",""],["waiting_jobs","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-waiting_jobs","()",""],["waiting_jobs_exist?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-waiting_jobs_exist-3F","()",""],["waitpid","Process","classes/Process.html#method-c-waitpid","(p1 = v1, p2 = v2)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a <code>Process::Status</code> object containing …\n"],["waitpid2","Process","classes/Process.html#method-c-waitpid2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["wakeup","Thread","classes/Thread.html#method-i-wakeup","()","<p>Marks <em>thr</em> as eligible for scheduling (it may still remain blocked\non I/O, however). Does not invoke the …\n"],["warn","Kernel","classes/Kernel.html#method-i-warn","(p1)","<p>Display the given message (followed by a newline) on STDERR unless warnings\nare disabled (for example …\n"],["warn","Logger","classes/Logger.html#method-i-warn","(progname = nil, &block)","<p>Log a <code>WARN</code> message.\n<p>See #info for more information.\n"],["warn","OptionParser","classes/OptionParser.html#method-i-warn","(mesg = $!)",""],["warn","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-warn","(msg)","<p>Prints <code>msg</code> to +$stderr+ unless we&#39;re being quiet\n"],["warn","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-warn","(msg)","<p>Shortcut for logging a WARN message\n"],["warn?","Logger","classes/Logger.html#method-i-warn-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>WARN</code> messages.\n"],["warn?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-warn-3F","()","<p>Will the logger output WARN messages?\n"],["warpto","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-warpto","(win = None)",""],["warpto","Tk::BLT::Winop","classes/Tk/BLT/Winop.html#method-i-warpto","(win = None)",""],["watch","Tk::Iwidgets::Watch","classes/Tk/Iwidgets/Watch.html#method-i-watch","(*args)",""],["watcher","Object","classes/Object.html#method-i-watcher","(ts)",""],["wday","Date","classes/Date.html#method-i-wday","()","<p>Returns the day of week (0-6, Sunday is zero).\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).wday           #=&gt; 6\n</code></pre>\n"],["wday","Time","classes/Time.html#method-i-wday","()","<p>Returns an integer representing the day of the week, 0..6, with Sunday ==\n0.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-20 ...\n</code></pre>\n"],["weakref_alive?","WeakRef","classes/WeakRef.html#method-i-weakref_alive-3F","()","<p>Returns true if the referenced object is still alive.\n"],["wednesday?","Date","classes/Date.html#method-i-wednesday-3F","()","<p>Returns true if the date is Wednesday.\n"],["wednesday?","Time","classes/Time.html#method-i-wednesday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Wednesday.\n\n<pre><code>t = Time.local(1993, 2, 24)      #=&gt; 1993-02-24 00:00:00 -0600 ...\n</code></pre>\n"],["when_invoked","Gem::Command","classes/Gem/Command.html#method-i-when_invoked","(&block)","<p>Call the given block when invoked.\n<p>Normal command invocations just executes the <code>execute</code> method of\nthe …\n"],["when_writing","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-when_writing","(msg=nil)","<p>Use this function to prevent potentially destructive ruby code from running\nwhen the :nowrite flag is …\n"],["which_to_update","Gem::Commands::UpdateCommand","classes/Gem/Commands/UpdateCommand.html#method-i-which_to_update","(highest_installed_gems, gem_names, system = false)",""],["whitespace","REXML::Element","classes/REXML/Element.html#method-i-whitespace","()","<p>Evaluates to <code>true</code> if whitespace is respected for this element.\nThis is the case if:\n<p>Neither :<code>respect_whitespace</code> …\n"],["why_not_ok?","Gem::DependencyList","classes/Gem/DependencyList.html#method-i-why_not_ok-3F","(quick = false)",""],["widget","TkWinfo","classes/TkWinfo.html#method-c-widget","(id, win=nil)",""],["widget","TkWinfo","classes/TkWinfo.html#method-c-widget","(id, win=nil)",""],["widget_set_symbols","Tk","classes/Tk.html#method-i-widget_set_symbols","()",""],["width","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-i-width","()",""],["width","Tk::BLT::Bitmap","classes/Tk/BLT/Bitmap.html#method-c-width","(name)",""],["width","Tk::TkTable","classes/Tk/TkTable.html#method-i-width","(row)",""],["width","TkImage","classes/TkImage.html#method-i-width","()",""],["width","TkWinfo","classes/TkWinfo.html#method-c-width","(win)",""],["width","TkWinfo","classes/TkWinfo.html#method-c-width","(win)",""],["width_list","Tk::TkTable","classes/Tk/TkTable.html#method-i-width_list","()",""],["win32_last_error","DL::CFunc","classes/DL/CFunc.html#method-c-win32_last_error","()","<p>Returns the last win32 error for the current executing thread\n"],["win32_last_error","Fiddle","classes/Fiddle.html#method-c-win32_last_error","()","<p>Returns the last win32 <code>Error</code> of the current executing\n<code>Thread</code> or nil if none\n"],["win32_last_error=","Fiddle","classes/Fiddle.html#method-c-win32_last_error-3D","(error)","<p>Sets the last win32 <code>Error</code> of the current executing\n<code>Thread</code> to <code>error</code>\n"],["win_platform?","Gem","classes/Gem.html#method-c-win_platform-3F","()","<p>Is this a windows platform?\n"],["window","TkComm","classes/TkComm.html#method-c-window","(val)",""],["window","TkTextWindow","classes/TkTextWindow.html#method-i-window","()",""],["window","TkTextWindow","classes/TkTextWindow.html#method-i-window","()",""],["window","TkVariable","classes/TkVariable.html#method-i-window","()",""],["window","TkVariable","classes/TkVariable.html#method-i-window","()",""],["window=","TkTextWindow","classes/TkTextWindow.html#method-i-window-3D","(value)",""],["window=","TkTextWindow","classes/TkTextWindow.html#method-i-window-3D","(value)",""],["window=","TkVariable","classes/TkVariable.html#method-i-window-3D","(win)",""],["window=","TkVariable","classes/TkVariable.html#method-i-window-3D","(win)",""],["window_cget","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-window_cget","(tagOrId, option)",""],["window_cget","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-window_cget","(tagOrId, option)",""],["window_cget_strict","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-window_cget_strict","(tagOrId, option)",""],["window_cget_strict","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-window_cget_strict","(tagOrId, option)",""],["window_cget_tkstring","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-window_cget_tkstring","(tagOrId, option)",""],["window_cget_tkstring","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-window_cget_tkstring","(tagOrId, option)",""],["window_configinfo","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-window_configinfo","(tagOrId, slot=nil)",""],["window_configinfo","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-window_configinfo","(tagOrId, slot=nil)",""],["window_configure","Tk::TkTable::ConfigMethod","classes/Tk/TkTable/ConfigMethod.html#method-i-window_configure","(tagOrId, slot, value=None)",""],["window_configure","TkTextTagConfig","classes/TkTextTagConfig.html#method-i-window_configure","(tagOrId, slot, value=None)",""],["window_delete","Tk::TkTable","classes/Tk/TkTable.html#method-i-window_delete","(*args)",""],["window_element","TkVariable","classes/TkVariable.html#method-i-window_element","(*idxs)",""],["window_element","TkVariable","classes/TkVariable.html#method-i-window_element","(*idxs)",""],["window_move","Tk::TkTable","classes/Tk/TkTable.html#method-i-window_move","(from_idx, to_idx)",""],["window_names","Tk::TkTable","classes/Tk/TkTable.html#method-i-window_names","(pat=None)",""],["window_type=","TkVariable","classes/TkVariable.html#method-i-window_type-3D","(win)",""],["window_type=","TkVariable","classes/TkVariable.html#method-i-window_type-3D","(win)",""],["windows","Tk::BLT::Htext","classes/Tk/BLT/Htext.html#method-i-windows","(pat=None)",""],["windows?","Rake::Application","classes/Rake/Application.html#method-i-windows-3F","()",""],["windows?","Rake::Application","classes/Rake/Application.html#method-i-windows-3F","()",""],["windows?","Rake::Win32","classes/Rake/Win32.html#method-i-windows-3F","()","<p>True if running on a windows system.\n"],["windows_stub_script","Gem::Installer","classes/Gem/Installer.html#method-i-windows_stub_script","(bindir, bin_file_name)","<p>return the stub script text used to launch the true ruby script\n"],["winfo_appname","TkWinfo","classes/TkWinfo.html#method-i-winfo_appname","()",""],["winfo_appname","TkWinfo","classes/TkWinfo.html#method-i-winfo_appname","()",""],["winfo_atom","TkWinfo","classes/TkWinfo.html#method-i-winfo_atom","(name)",""],["winfo_atom","TkWinfo","classes/TkWinfo.html#method-i-winfo_atom","(name)",""],["winfo_atomname","TkWinfo","classes/TkWinfo.html#method-i-winfo_atomname","(id)",""],["winfo_atomname","TkWinfo","classes/TkWinfo.html#method-i-winfo_atomname","(id)",""],["winfo_cells","TkWinfo","classes/TkWinfo.html#method-i-winfo_cells","()",""],["winfo_cells","TkWinfo","classes/TkWinfo.html#method-i-winfo_cells","()",""],["winfo_children","TkWinfo","classes/TkWinfo.html#method-i-winfo_children","()",""],["winfo_children","TkWinfo","classes/TkWinfo.html#method-i-winfo_children","()",""],["winfo_class","TkWinfo","classes/TkWinfo.html#method-i-winfo_class","()",""],["winfo_class","TkWinfo","classes/TkWinfo.html#method-i-winfo_class","()",""],["winfo_classname","TkWinfo","classes/TkWinfo.html#method-i-winfo_classname","()",""],["winfo_classname","TkWinfo","classes/TkWinfo.html#method-i-winfo_classname","()",""],["winfo_colormapfull","TkWinfo","classes/TkWinfo.html#method-i-winfo_colormapfull","()",""],["winfo_colormapfull","TkWinfo","classes/TkWinfo.html#method-i-winfo_colormapfull","()",""],["winfo_containing","TkWinfo","classes/TkWinfo.html#method-i-winfo_containing","(x, y)",""],["winfo_containing","TkWinfo","classes/TkWinfo.html#method-i-winfo_containing","(x, y)",""],["winfo_depth","TkWinfo","classes/TkWinfo.html#method-i-winfo_depth","()",""],["winfo_depth","TkWinfo","classes/TkWinfo.html#method-i-winfo_depth","()",""],["winfo_exist?","TkWinfo","classes/TkWinfo.html#method-i-winfo_exist-3F","()",""],["winfo_exist?","TkWinfo","classes/TkWinfo.html#method-i-winfo_exist-3F","()",""],["winfo_fpixels","TkWinfo","classes/TkWinfo.html#method-i-winfo_fpixels","(dist)",""],["winfo_fpixels","TkWinfo","classes/TkWinfo.html#method-i-winfo_fpixels","(dist)",""],["winfo_geometry","TkWinfo","classes/TkWinfo.html#method-i-winfo_geometry","()",""],["winfo_geometry","TkWinfo","classes/TkWinfo.html#method-i-winfo_geometry","()",""],["winfo_height","TkWinfo","classes/TkWinfo.html#method-i-winfo_height","()",""],["winfo_height","TkWinfo","classes/TkWinfo.html#method-i-winfo_height","()",""],["winfo_id","TkWinfo","classes/TkWinfo.html#method-i-winfo_id","()",""],["winfo_id","TkWinfo","classes/TkWinfo.html#method-i-winfo_id","()",""],["winfo_interps","TkWinfo","classes/TkWinfo.html#method-i-winfo_interps","()",""],["winfo_interps","TkWinfo","classes/TkWinfo.html#method-i-winfo_interps","()",""],["winfo_manager","TkWinfo","classes/TkWinfo.html#method-i-winfo_manager","()",""],["winfo_manager","TkWinfo","classes/TkWinfo.html#method-i-winfo_manager","()",""],["winfo_mapped?","TkWinfo","classes/TkWinfo.html#method-i-winfo_mapped-3F","()",""],["winfo_mapped?","TkWinfo","classes/TkWinfo.html#method-i-winfo_mapped-3F","()",""],["winfo_parent","TkWinfo","classes/TkWinfo.html#method-i-winfo_parent","()",""],["winfo_parent","TkWinfo","classes/TkWinfo.html#method-i-winfo_parent","()",""],["winfo_pixels","TkWinfo","classes/TkWinfo.html#method-i-winfo_pixels","(dist)",""],["winfo_pixels","TkWinfo","classes/TkWinfo.html#method-i-winfo_pixels","(dist)",""],["winfo_pointerx","TkWinfo","classes/TkWinfo.html#method-i-winfo_pointerx","()",""],["winfo_pointerx","TkWinfo","classes/TkWinfo.html#method-i-winfo_pointerx","()",""],["winfo_pointerxy","TkWinfo","classes/TkWinfo.html#method-i-winfo_pointerxy","()",""],["winfo_pointerxy","TkWinfo","classes/TkWinfo.html#method-i-winfo_pointerxy","()",""],["winfo_pointery","TkWinfo","classes/TkWinfo.html#method-i-winfo_pointery","()",""],["winfo_pointery","TkWinfo","classes/TkWinfo.html#method-i-winfo_pointery","()",""],["winfo_reqheight","TkWinfo","classes/TkWinfo.html#method-i-winfo_reqheight","()",""],["winfo_reqheight","TkWinfo","classes/TkWinfo.html#method-i-winfo_reqheight","()",""],["winfo_reqwidth","TkWinfo","classes/TkWinfo.html#method-i-winfo_reqwidth","()",""],["winfo_reqwidth","TkWinfo","classes/TkWinfo.html#method-i-winfo_reqwidth","()",""],["winfo_rgb","TkWinfo","classes/TkWinfo.html#method-i-winfo_rgb","(color)",""],["winfo_rgb","TkWinfo","classes/TkWinfo.html#method-i-winfo_rgb","(color)",""],["winfo_rootx","TkWinfo","classes/TkWinfo.html#method-i-winfo_rootx","()",""],["winfo_rootx","TkWinfo","classes/TkWinfo.html#method-i-winfo_rootx","()",""],["winfo_rooty","TkWinfo","classes/TkWinfo.html#method-i-winfo_rooty","()",""],["winfo_rooty","TkWinfo","classes/TkWinfo.html#method-i-winfo_rooty","()",""],["winfo_screen","TkWinfo","classes/TkWinfo.html#method-i-winfo_screen","()",""],["winfo_screen","TkWinfo","classes/TkWinfo.html#method-i-winfo_screen","()",""],["winfo_screencells","TkWinfo","classes/TkWinfo.html#method-i-winfo_screencells","()",""],["winfo_screencells","TkWinfo","classes/TkWinfo.html#method-i-winfo_screencells","()",""],["winfo_screendepth","TkWinfo","classes/TkWinfo.html#method-i-winfo_screendepth","()",""],["winfo_screendepth","TkWinfo","classes/TkWinfo.html#method-i-winfo_screendepth","()",""],["winfo_screenheight","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenheight","()",""],["winfo_screenheight","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenheight","()",""],["winfo_screenmmheight","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenmmheight","()",""],["winfo_screenmmheight","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenmmheight","()",""],["winfo_screenmmwidth","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenmmwidth","()",""],["winfo_screenmmwidth","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenmmwidth","()",""],["winfo_screenvisual","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenvisual","()",""],["winfo_screenvisual","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenvisual","()",""],["winfo_screenwidth","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenwidth","()",""],["winfo_screenwidth","TkWinfo","classes/TkWinfo.html#method-i-winfo_screenwidth","()",""],["winfo_server","TkWinfo","classes/TkWinfo.html#method-i-winfo_server","()",""],["winfo_server","TkWinfo","classes/TkWinfo.html#method-i-winfo_server","()",""],["winfo_toplevel","TkWinfo","classes/TkWinfo.html#method-i-winfo_toplevel","()",""],["winfo_toplevel","TkWinfo","classes/TkWinfo.html#method-i-winfo_toplevel","()",""],["winfo_viewable","TkWinfo","classes/TkWinfo.html#method-i-winfo_viewable","()",""],["winfo_viewable","TkWinfo","classes/TkWinfo.html#method-i-winfo_viewable","()",""],["winfo_visual","TkWinfo","classes/TkWinfo.html#method-i-winfo_visual","()",""],["winfo_visual","TkWinfo","classes/TkWinfo.html#method-i-winfo_visual","()",""],["winfo_visualid","TkWinfo","classes/TkWinfo.html#method-i-winfo_visualid","()",""],["winfo_visualid","TkWinfo","classes/TkWinfo.html#method-i-winfo_visualid","()",""],["winfo_visualsavailable","TkWinfo","classes/TkWinfo.html#method-i-winfo_visualsavailable","(includeids=false)",""],["winfo_visualsavailable","TkWinfo","classes/TkWinfo.html#method-i-winfo_visualsavailable","(includeids=false)",""],["winfo_vrootheight","TkWinfo","classes/TkWinfo.html#method-i-winfo_vrootheight","()",""],["winfo_vrootheight","TkWinfo","classes/TkWinfo.html#method-i-winfo_vrootheight","()",""],["winfo_vrootwidth","TkWinfo","classes/TkWinfo.html#method-i-winfo_vrootwidth","()",""],["winfo_vrootwidth","TkWinfo","classes/TkWinfo.html#method-i-winfo_vrootwidth","()",""],["winfo_vrootx","TkWinfo","classes/TkWinfo.html#method-i-winfo_vrootx","()",""],["winfo_vrootx","TkWinfo","classes/TkWinfo.html#method-i-winfo_vrootx","()",""],["winfo_vrooty","TkWinfo","classes/TkWinfo.html#method-i-winfo_vrooty","()",""],["winfo_vrooty","TkWinfo","classes/TkWinfo.html#method-i-winfo_vrooty","()",""],["winfo_widget","TkWinfo","classes/TkWinfo.html#method-i-winfo_widget","(id)",""],["winfo_widget","TkWinfo","classes/TkWinfo.html#method-i-winfo_widget","(id)",""],["winfo_width","TkWinfo","classes/TkWinfo.html#method-i-winfo_width","()",""],["winfo_width","TkWinfo","classes/TkWinfo.html#method-i-winfo_width","()",""],["winfo_x","TkWinfo","classes/TkWinfo.html#method-i-winfo_x","()",""],["winfo_x","TkWinfo","classes/TkWinfo.html#method-i-winfo_x","()",""],["winfo_y","TkWinfo","classes/TkWinfo.html#method-i-winfo_y","()",""],["winfo_y","TkWinfo","classes/TkWinfo.html#method-i-winfo_y","()",""],["winsize","IO","classes/IO.html#method-i-winsize","()","<p>Returns console size.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["winsize=","IO","classes/IO.html#method-i-winsize-3D","(p1)","<p>Tries to set console size.  The effect depends on the platform and the\nrunning environment.\n<p>You must require …\n"],["with","OptionParser","classes/OptionParser.html#method-c-with","(*args, &block)","<p>Initializes a new instance and evaluates the optional block in context of\nthe instance. Arguments <code>args</code> …\n"],["with_config","Object","classes/Object.html#method-i-with_config","(config, default=nil)","<p>Tests for the presence of a –with-<code>config</code> or\n–without-<code>config</code> option. Returns true if the with option …\n"],["with_defaults","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-with_defaults","(defaults)","<p>Specify a hash of default values for task arguments. Use the defaults only\nif there is no specific value …\n"],["with_friend","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-with_friend","(uri)",""],["with_friend","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-with_friend","(uri)",""],["with_index","Enumerator","classes/Enumerator.html#method-i-with_index","(p1 = v1)","<p>Iterates the given block for each element with an index, which starts from\n<code>offset</code>.  If no block is given, …\n"],["with_object","Enumerator","classes/Enumerator.html#method-i-with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object,\n<code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["with_object","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-with_object","(obj)","<p>see <code>Enumerator</code>#with_object.\n"],["with_response","Gem::GemcutterUtilities","classes/Gem/GemcutterUtilities.html#method-i-with_response","(resp)",""],["withdraw","Tk::BWidget::Dialog","classes/Tk/BWidget/Dialog.html#method-i-withdraw","()",""],["withdraw","Tk::Tcllib::Widget::Dialog","classes/Tk/Tcllib/Widget/Dialog.html#method-i-withdraw","()",""],["withdraw","Tk::Wm","classes/Tk/Wm.html#method-i-withdraw","(ex = true)",""],["withdraw","Tk::Wm","classes/Tk/Wm.html#method-c-withdraw","(win, ex = true)",""],["withtag","TkcTag","classes/TkcTag.html#method-i-withtag","(target)",""],["wm_aspect","Tk::Wm","classes/Tk/Wm.html#method-i-wm_aspect","(*args)",""],["wm_attributes","Tk::Wm","classes/Tk/Wm.html#method-i-wm_attributes","(slot=nil,value=TkComm::None)",""],["wm_client","Tk::Wm","classes/Tk/Wm.html#method-i-wm_client","(name=TkComm::None)",""],["wm_colormapwindows","Tk::Wm","classes/Tk/Wm.html#method-i-wm_colormapwindows","(*args)",""],["wm_command","Tk::Wm","classes/Tk/Wm.html#method-i-wm_command","(value=nil)",""],["wm_deiconify","Tk::Wm","classes/Tk/Wm.html#method-i-wm_deiconify","(ex = true)",""],["wm_focusmodel","Tk::Wm","classes/Tk/Wm.html#method-i-wm_focusmodel","(mode = nil)",""],["wm_forget","Tk::Wm","classes/Tk/Wm.html#method-i-wm_forget","()",""],["wm_frame","Tk::Wm","classes/Tk/Wm.html#method-i-wm_frame","()",""],["wm_geometry","Tk::Wm","classes/Tk/Wm.html#method-i-wm_geometry","(geom=nil)",""],["wm_grid","Tk::Wm","classes/Tk/Wm.html#method-i-wm_grid","(*args)",""],["wm_group","Tk::Wm","classes/Tk/Wm.html#method-i-wm_group","(leader = nil)",""],["wm_iconbitmap","Tk::Wm","classes/Tk/Wm.html#method-i-wm_iconbitmap","(bmp=nil)",""],["wm_iconify","Tk::Wm","classes/Tk/Wm.html#method-i-wm_iconify","(ex = true)",""],["wm_iconmask","Tk::Wm","classes/Tk/Wm.html#method-i-wm_iconmask","(bmp=nil)",""],["wm_iconname","Tk::Wm","classes/Tk/Wm.html#method-i-wm_iconname","(name=nil)",""],["wm_iconphoto","Tk::Wm","classes/Tk/Wm.html#method-i-wm_iconphoto","(*imgs)",""],["wm_iconphoto_default","Tk::Wm","classes/Tk/Wm.html#method-i-wm_iconphoto_default","(*imgs)",""],["wm_iconposition","Tk::Wm","classes/Tk/Wm.html#method-i-wm_iconposition","(*args)",""],["wm_iconwindow","Tk::Wm","classes/Tk/Wm.html#method-i-wm_iconwindow","(iconwin = nil)",""],["wm_manage","Tk::Wm","classes/Tk/Wm.html#method-i-wm_manage","()",""],["wm_maxsize","Tk::Wm","classes/Tk/Wm.html#method-i-wm_maxsize","(*args)",""],["wm_minsize","Tk::Wm","classes/Tk/Wm.html#method-i-wm_minsize","(*args)",""],["wm_overrideredirect","Tk::Wm","classes/Tk/Wm.html#method-i-wm_overrideredirect","(mode=TkComm::None)",""],["wm_positionfrom","Tk::Wm","classes/Tk/Wm.html#method-i-wm_positionfrom","(who=TkComm::None)",""],["wm_protocol","Tk::Wm","classes/Tk/Wm.html#method-i-wm_protocol","(name=nil, cmd=nil, &b)",""],["wm_protocols","Tk::Wm","classes/Tk/Wm.html#method-i-wm_protocols","(kv=nil)",""],["wm_resizable","Tk::Wm","classes/Tk/Wm.html#method-i-wm_resizable","(*args)",""],["wm_sizefrom","Tk::Wm","classes/Tk/Wm.html#method-i-wm_sizefrom","(who=TkComm::None)",""],["wm_stackorder","Tk::Wm","classes/Tk/Wm.html#method-i-wm_stackorder","()",""],["wm_stackorder_is_above","Tk::Wm","classes/Tk/Wm.html#method-i-wm_stackorder_is_above","(target)",""],["wm_stackorder_is_below","Tk::Wm","classes/Tk/Wm.html#method-i-wm_stackorder_is_below","(target)",""],["wm_stackorder_isabove","Tk::Wm","classes/Tk/Wm.html#method-i-wm_stackorder_isabove","(target)",""],["wm_stackorder_isbelow","Tk::Wm","classes/Tk/Wm.html#method-i-wm_stackorder_isbelow","(target)",""],["wm_state","Tk::Wm","classes/Tk/Wm.html#method-i-wm_state","(st=nil)",""],["wm_title","Tk::Wm","classes/Tk/Wm.html#method-i-wm_title","(str=nil)",""],["wm_transient","Tk::Wm","classes/Tk/Wm.html#method-i-wm_transient","(master=nil)",""],["wm_withdraw","Tk::Wm","classes/Tk/Wm.html#method-i-wm_withdraw","(ex = true)",""],["wordend","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-wordend","()",""],["wordstart","Tk::Text::IndexModMethods","classes/Tk/Text/IndexModMethods.html#method-i-wordstart","()",""],["wordy","Gem::PlatformMismatch","classes/Gem/PlatformMismatch.html#method-i-wordy","()",""],["workspaces","IRB::Context","classes/IRB/Context.html#method-i-workspaces","()",""],["world_3D_coordinates","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-world_3D_coordinates","(w, *args)",""],["world_3D_coordinates","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-world_3D_coordinates","(*args)",""],["world_coordinates","Tk::Tcllib::Plotchart","classes/Tk/Tcllib/Plotchart.html#method-c-world_coordinates","(w, *args)",""],["world_coordinates","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-world_coordinates","(*args)",""],["world_readable?","File","classes/File.html#method-c-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_readable?","File::Stat","classes/File/Stat.html#method-i-world_readable-3F","()","<p>If <em>stat</em> is readable by others, returns an integer representing the\nfile permission bits of <em>stat</em>. Returns …\n"],["world_readable?","FileTest","classes/FileTest.html#method-i-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_readable?","Pathname","classes/Pathname.html#method-i-world_readable-3F","()","<p>See <code>FileTest.world_readable?</code>.\n"],["world_writable?","File","classes/File.html#method-c-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_writable?","File::Stat","classes/File/Stat.html#method-i-world_writable-3F","()","<p>If <em>stat</em> is writable by others, returns an integer representing the\nfile permission bits of <em>stat</em>. Returns …\n"],["world_writable?","FileTest","classes/FileTest.html#method-i-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_writable?","Pathname","classes/Pathname.html#method-i-world_writable-3F","()","<p>See <code>FileTest.world_writable?</code>.\n"],["wrap","Gem::Command","classes/Gem/Command.html#method-i-wrap","(text, width)","<p>Wraps <code>text</code> to <code>width</code>\n"],["wrap","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-wrap","(text)","<p>Wraps <code>text</code> to #width\n"],["wrap","RDoc::Text","classes/RDoc/Text.html#method-i-wrap","(txt, line_len = 76)","<p>Wraps <code>txt</code> to <code>line_len</code>\n"],["wrap","REXML::Text","classes/REXML/Text.html#method-i-wrap","(string, width, addnewline=false)",""],["wrap","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-c-wrap","(*args)","<p>Creates a GzipFile object associated with <code>io</code>, and executes the\nblock with the newly created GzipFile …\n"],["wrapIndent","Tk::Tcllib::Ntext","classes/Tk/Tcllib/Ntext.html#method-i-wrapIndent","(txt, *args)",""],["wrap_arg","DL::ValueUtil","classes/DL/ValueUtil.html#method-i-wrap_arg","(arg, ty, funcs = [], &block)",""],["wrap_args","DL::ValueUtil","classes/DL/ValueUtil.html#method-i-wrap_args","(args, tys, funcs, &block)",""],["wrap_result","DL::Function","classes/DL/Function.html#method-i-wrap_result","(r)",""],["writable?","File","classes/File.html#method-c-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser id of this process.\n"],["writable?","File::Stat","classes/File/Stat.html#method-i-writable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the effective\nuser id of this process.\n\n<pre><code>File.stat(&quot;testfile&quot;).writable? ...</code></pre>\n"],["writable?","FileTest","classes/FileTest.html#method-i-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser id of this process.\n"],["writable?","Pathname","classes/Pathname.html#method-i-writable-3F","()","<p>See <code>FileTest.writable?</code>.\n"],["writable_real?","File","classes/File.html#method-c-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user id\nof this process.\n"],["writable_real?","File::Stat","classes/File/Stat.html#method-i-writable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the real user id\nof this process.\n\n<pre><code>File.stat(&quot;testfile&quot;).writable_real? ...</code></pre>\n"],["writable_real?","FileTest","classes/FileTest.html#method-i-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user id\nof this process.\n"],["writable_real?","Pathname","classes/Pathname.html#method-i-writable_real-3F","()","<p>See <code>FileTest.writable_real?</code>.\n"],["write","ARGF","classes/ARGF.html#method-i-write","(p1)","<p>Writes <em>string</em> if inplace mode.\n"],["write","DRb::HTTP0::StrStream","classes/DRb/HTTP0/StrStream.html#method-i-write","(s)",""],["write","Gem::ConfigFile","classes/Gem/ConfigFile.html#method-i-write","()","<p>Writes out this config file, replacing its source.\n"],["write","Gem::Package::TarWriter::BoundedStream","classes/Gem/Package/TarWriter/BoundedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO, raising a FileOverflow exception if\nthe number of bytes will be more than #limit …\n"],["write","Gem::Package::TarWriter::RestrictedStream","classes/Gem/Package/TarWriter/RestrictedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO\n"],["write","IO","classes/IO.html#method-c-write","(*args)","<p>Opens the file, optionally seeks to the given <em>offset</em>, writes\n<em>string</em>, then returns the length written. …\n"],["write","IO","classes/IO.html#method-i-write","(p1)","<p>Writes the given string to <em>ios</em>. The stream must be opened for\nwriting. If the argument is not a string, …\n"],["write","Logger::LogDevice","classes/Logger/LogDevice.html#method-i-write","(message)",""],["write","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-write","(str)",""],["write","Net::Telnet","classes/Net/Telnet.html#method-i-write","(string)","<p>Write <code>string</code> to the host.\n<p>Does not perform any conversions on <code>string</code>.  Will log\n<code>string</code> to the dumplog, …\n"],["write","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-write","(s)","<p>Writes <code>s</code> to the stream.  If the argument is not a string it\nwill be converted using String#to_s.  Returns …\n"],["write","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-write","(out, indent=-1)","<p>Write out exactly what we got in.\n"],["write","REXML::Attribute","classes/REXML/Attribute.html#method-i-write","( output, indent=-1 )","<p>Writes this attribute (EG, puts &#39;key=“value”&#39; to the output)\n"],["write","REXML::CData","classes/REXML/CData.html#method-i-write","( output=$stdout, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See the rexml/formatters package\n<p>Generates XML output of this object\n"],["write","REXML::Comment","classes/REXML/Comment.html#method-i-write","( output, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See REXML::Formatters\n<p>output &mdash; Where to write the string\n"],["write","REXML::DTD::EntityDecl","classes/REXML/DTD/EntityDecl.html#method-i-write","( output, indent )",""],["write","REXML::DTD::NotationDecl","classes/REXML/DTD/NotationDecl.html#method-i-write","( output, indent )",""],["write","REXML::DocType","classes/REXML/DocType.html#method-i-write","( output, indent=0, transitive=false, ie_hack=false )","<p>output &mdash; Where to write the string\n<p>indent &mdash; An integer.  If -1, no indentation will be used; otherwise, the …\n"],["write","REXML::Document","classes/REXML/Document.html#method-i-write","( output=$stdout, indent=-1, transitive=false, ie_hack=false )","<p>Write the XML tree out, optionally with indent.  This writes out the entire\nXML document, including  …\n"],["write","REXML::Element","classes/REXML/Element.html#method-i-write","(output=$stdout, indent=-1, transitive=false, ie_hack=false)","<p>DEPRECATED\n<p>See REXML::Formatters\n<p>Writes out this element, and recursively, all children.\n"],["write","REXML::Entity","classes/REXML/Entity.html#method-i-write","(out, indent=-1)","<p>Write out a fully formed, correct entity definition (assuming the Entity\nobject itself is valid.)\n<p>out … &mdash; "],["write","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write","( node, output )","<p>Writes the node to some output.\n<p>node &mdash; The node to write\n<p>output &mdash; A class implementing <code>&amp;lt;&amp;lt;</code>.   …\n"],["write","REXML::Instruction","classes/REXML/Instruction.html#method-i-write","(writer, indent=-1, transitive=false, ie_hack=false)","<p>DEPRECATED\n<p>See the rexml/formatters package\n"],["write","REXML::Text","classes/REXML/Text.html#method-i-write","( writer, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See REXML::Formatters\n"],["write","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-write","(writer, indent=-1, transitive=false, ie_hack=false)","<p>indent &mdash; Ignored.  There must be no whitespace before an XML declaration\n<p>transitive &mdash; Ignored\n<p>ie_hack &mdash; Ignored …\n"],["write","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-write","(tuple, sec=nil)","<p>Adds <code>tuple</code>\n"],["write","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-write","(tuple, sec=nil)","<p>Adds <code>tuple</code> to the proxied TupleSpace.  See TupleSpace#write.\n"],["write","StringIO","classes/StringIO.html#method-i-write","(p1)","<p>Appends the given string to the underlying buffer string of\n<strong>strio</strong>. The stream must be opened for writing. …\n"],["write","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-i-write","(str)",""],["write","Tk::BWidget","classes/Tk/BWidget.html#method-c-write","(file, mode=None)",""],["write","Tk::MacResource","classes/Tk/MacResource.html#method-c-write","(rsrcType, data, opts=nil)",""],["write","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-c-write","(file, index, depth, data, keys=nil)",""],["write","Tk::Tcllib::ICO","classes/Tk/Tcllib/ICO.html#method-i-write","(file, index, depth, keys=nil)",""],["write","TkPhotoImage","classes/TkPhotoImage.html#method-i-write","(file, *opts)",""],["write","TkPhotoImage","classes/TkPhotoImage.html#method-i-write","(file, *opts)",""],["write","TkTextIO","classes/TkTextIO.html#method-i-write","(obj)","<p>end\n"],["write","TupleSpace","classes/TupleSpace.html#method-i-write","(*tuples)",""],["write","Win32::Registry","classes/Win32/Registry.html#method-i-write","(name, type, data)","<p>Write data to a registry value named name. When name is nil, write to the\n`default&#39; value.\n<p>type is …\n"],["write","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-write","(p1)","<p>Same as IO.\n"],["writeTo","HttpServer::Table","classes/HttpServer/Table.html#method-i-writeTo","(port)",""],["write_bin","Win32::Registry","classes/Win32/Registry.html#method-i-write_bin","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["write_cdata","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_cdata","( node, output )",""],["write_cdata","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_cdata","( node, output)",""],["write_comment","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_comment","( node, output )",""],["write_comment","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_comment","( node, output)",""],["write_document","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_document","( node, output )",""],["write_document","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_document","( node, output )",""],["write_element","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_element","( node, output )",""],["write_element","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_element","(node, output)",""],["write_element","REXML::Formatters::Transitive","classes/REXML/Formatters/Transitive.html#method-i-write_element","( node, output )",""],["write_headers?","CSV","classes/CSV.html#method-i-write_headers-3F","()","<p>Returns <code>true</code> if headers are written in output. See CSV::new\nfor details.\n"],["write_i","Win32::Registry","classes/Win32/Registry.html#method-i-write_i","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["write_instruction","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_instruction","( node, output )",""],["write_nonblock","IO","classes/IO.html#method-i-write_nonblock","(p1)","<p>Writes the given string to <em>ios</em> using the write(2) system call\nafter O_NONBLOCK is set for the underlying …\n"],["write_nonblock","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-write_nonblock","(s)","<p>Writes <code>str</code> in the non-blocking manner.\n<p>If there is buffered data, it is flushed first.  This may block. …\n"],["write_require_paths_file_if_needed","Gem::RequirePathsBuilder","classes/Gem/RequirePathsBuilder.html#method-i-write_require_paths_file_if_needed","(spec = @spec, gem_home = @gem_home)",""],["write_s","Win32::Registry","classes/Win32/Registry.html#method-i-write_s","(name, value)","<p>Write value to a registry value named name.\n<p>The value type is REG_SZ(write_s), REG_DWORD(write_i), or …\n"],["write_service","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-write_service","()","<p>Creates a thread that picks up UDP packets and passes them to do_write for\ndecoding.\n"],["write_smime","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-write_smime","(p1, p2 = v2, p3 = v3)",""],["write_spec","Gem::Installer","classes/Gem/Installer.html#method-i-write_spec","()","<p>Writes the .gemspec specification (in Ruby) to the gem home&#39;s\nspecifications directory.\n"],["write_style_sheet","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-write_style_sheet","()","<p>Copy over the stylesheet into the appropriate place in the output\ndirectory.\n"],["write_text","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_text","( node, output )",""],["write_text","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_text","( node, output )",""],["write_text","REXML::Formatters::Transitive","classes/REXML/Formatters/Transitive.html#method-i-write_text","( node, output )",""],["write_with_substitution","REXML::Text","classes/REXML/Text.html#method-i-write_with_substitution","(out, input)","<p>Writes out text, substituting special characters beforehand.\n<code>out</code> A String, IO, or any other object supporting …\n"],["write_with_title","Tk::BLT::Printer","classes/Tk/BLT/Printer.html#method-i-write_with_title","(title, str)",""],["writer","Object","classes/Object.html#method-i-writer","()",""],["wrongNumArgsString","Tk::BWidget","classes/Tk/BWidget.html#method-c-wrongNumArgsString","(str)",""],["wtime2time","Win32::Registry","classes/Win32/Registry.html#method-c-wtime2time","(wtime)","<p>Convert 64-bit FILETIME integer into Time object.\n"],["x","TkWinfo","classes/TkWinfo.html#method-c-x","(win)",""],["x","TkWinfo","classes/TkWinfo.html#method-c-x","(win)",""],["x2axis_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_bind","(context, *args)",""],["x2axis_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_bind_append","(context, *args)",""],["x2axis_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_bind_remove","(context)",""],["x2axis_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_bindinfo","(context=nil)",""],["x2axis_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_cget","(option)",""],["x2axis_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_cget_strict","(option)",""],["x2axis_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_cget_tkstring","(option)",""],["x2axis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_configinfo","(slot=nil)",""],["x2axis_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_configure","(slot, value=None)",""],["x2axis_invtransform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_invtransform","(val)",""],["x2axis_limits","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_limits","()",""],["x2axis_transform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_transform","(val)",""],["x2axis_use","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-x2axis_use","(target=nil)",""],["xaxis_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_bind","(context, *args)",""],["xaxis_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_bind_append","(context, *args)",""],["xaxis_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_bind_remove","(context)",""],["xaxis_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_bindinfo","(context=nil)",""],["xaxis_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_cget","(option)",""],["xaxis_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_cget_strict","(option)",""],["xaxis_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_cget_tkstring","(option)",""],["xaxis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_configinfo","(slot=nil)",""],["xaxis_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_configure","(slot, value=None)",""],["xaxis_invtransform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_invtransform","(val)",""],["xaxis_limits","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_limits","()",""],["xaxis_transform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_transform","(val)",""],["xaxis_use","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-xaxis_use","(target=nil)",""],["xconfig","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-xconfig","(key, value=None)",""],["xgap","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-xgap","(val=None)",""],["xhtml","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-xhtml","()",""],["xhtml","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-i-xhtml","()",""],["xlist","Net::IMAP","classes/Net/IMAP.html#method-i-xlist","(refname, mailbox)","<p>Sends a XLIST command, and returns a subset of names from the complete set\nof all names available to …\n"],["xml","IXMLDOMAttribute","classes/IXMLDOMAttribute.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMCDATASection","classes/IXMLDOMCDATASection.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMCharacterData","classes/IXMLDOMCharacterData.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMComment","classes/IXMLDOMComment.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMDocument","classes/IXMLDOMDocument.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMDocumentFragment","classes/IXMLDOMDocumentFragment.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMDocumentType","classes/IXMLDOMDocumentType.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMElement","classes/IXMLDOMElement.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMEntity","classes/IXMLDOMEntity.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMEntityReference","classes/IXMLDOMEntityReference.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMNode","classes/IXMLDOMNode.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMNotation","classes/IXMLDOMNotation.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMProcessingInstruction","classes/IXMLDOMProcessingInstruction.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXMLDOMText","classes/IXMLDOMText.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","IXTLRuntime","classes/IXTLRuntime.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","Microsoft_FreeThreadedXMLDOM_1_0","classes/Microsoft_FreeThreadedXMLDOM_1_0.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","Microsoft_XMLDOM_1_0","classes/Microsoft_XMLDOM_1_0.html#method-i-xml","()","<p>BSTR xml return the XML source for the node and each of its descendants\n"],["xml","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-xml","()",""],["xmlDecl","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-xmlDecl","(version, encoding, standalone)",""],["xml_decl","REXML::Document","classes/REXML/Document.html#method-i-xml_decl","()","<p>@return the XMLDecl of this document; if no XMLDecl has been set, the\ndefault declaration is returned. …\n"],["xml_getter","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-xml_getter","()",""],["xml_getter","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-i-xml_getter","()",""],["xml_setter","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-xml_setter","()",""],["xml_setter","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-i-xml_setter","()",""],["xmldecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML PI is encountered in the document. EG: &lt;?xml\nversion=“1.0” encoding=“utf”?&gt; …\n"],["xmldecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML PI is encountered in the document. EG: &lt;?xml\nversion=“1.0” encoding=“utf”?&gt; …\n"],["xmldecl","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-xmldecl","(version, encoding, standalone)","<p>set instance vars for version, encoding, standalone\n"],["xmldecl","RSS::REXMLListener","classes/RSS/REXMLListener.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl","RSS::XMLParserListener","classes/RSS/XMLParserListener.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-xmldecl-3F","()","<p>Content: [ String version, String encoding, String standalone ]\n"],["xmlschema","Date","classes/Date.html#method-i-xmlschema","()","<p>This method is equivalent to strftime(&#39;%F&#39;).\n"],["xmlschema","Date","classes/Date.html#method-c-xmlschema","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical XML Schema formats.\n<p>For example: …\n"],["xmlschema","DateTime","classes/DateTime.html#method-i-xmlschema","(p1 = v1)","<p>This method is equivalent to strftime(&#39;%FT%T&#39;).  The optional\nargument n is length of fractional …\n"],["xmlschema","DateTime","classes/DateTime.html#method-c-xmlschema","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical XML Schema formats.\n<p>For example: …\n"],["xmlschema","Time","classes/Time.html#method-i-xmlschema","(date)","<p>Parses <code>date</code> as dateTime defined by XML Schema and converts it\nto a Time object.  The format is restricted …\n"],["xmp","Object","classes/Object.html#method-i-xmp","(exps, bind = nil)",""],["xor","Tk::HTML_Widget","classes/Tk/HTML_Widget.html#method-c-xor","(cmd, *args)",""],["xpath","REXML::Attribute","classes/REXML/Attribute.html#method-i-xpath","()",""],["xpath","REXML::Element","classes/REXML/Element.html#method-i-xpath","()",""],["xpath","REXML::Text","classes/REXML/Text.html#method-i-xpath","()","<p>FIXME This probably won&#39;t work properly\n"],["xposition","Tk::Menu","classes/Tk/Menu.html#method-i-xposition","(index)",""],["xposition","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-xposition","(index)",""],["xposition","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-xposition","(index)",""],["xscrollbar","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-xscrollbar","(bar=nil)",""],["xscrollbar","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-xscrollbar","(bar=nil)",""],["xscrollbar","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xscrollbar","(bar=nil)",""],["xscrollbar","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xscrollbar","(bar=nil)",""],["xscrollcommand","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-xscrollcommand","(cmd=Proc.new)",""],["xscrollcommand","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-xscrollcommand","(cmd=Proc.new)",""],["xscrollcommand","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-xscrollcommand","(cmd=Proc.new)",""],["xscrollcommand","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xscrollcommand","(cmd=Proc.new)",""],["xscrollcommand","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xscrollcommand","(cmd=Proc.new)",""],["xtext","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-xtext","(str)",""],["xticklines","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-xticklines","(color=None)",""],["xview","Tk::BLT::Tabset","classes/Tk/BLT/Tabset.html#method-i-xview","(*index)",""],["xview","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-xview","(*index)","<p>based on tk/scrollable.rb\n"],["xview","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-xview","(*index)","<p>based on tk/scrollable.rb\n"],["xview","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-xview","(*idxs)",""],["xview","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-xview","(*index)",""],["xview","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-xview","(*index)",""],["xview","Tk::Iwidgets::Scrolledframe","classes/Tk/Iwidgets/Scrolledframe.html#method-i-xview","(*index)",""],["xview","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-xview","(*index)",""],["xview","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-xview","(*index)",""],["xview","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-xview","(*index)","<p>based on tk/scrollable.rb\n"],["xview","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-xview","(*index)",""],["xview","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xview","(*index)",""],["xview","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xview","(*index)",""],["xview_moveto","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-xview_moveto","(*idxs)",""],["xview_moveto","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::Iwidgets::Scrolledframe","classes/Tk/Iwidgets/Scrolledframe.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xview_moveto","(*index)",""],["xview_moveto","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xview_moveto","(*index)",""],["xview_scroll","Tk::Iwidgets::Entryfield","classes/Tk/Iwidgets/Entryfield.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-xview_scroll","(index, what='pages')",""],["xview_scroll","Tk::Iwidgets::Promptdialog","classes/Tk/Iwidgets/Promptdialog.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::Iwidgets::Scrolledframe","classes/Tk/Iwidgets/Scrolledframe.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::Iwidgets::Spinner","classes/Tk/Iwidgets/Spinner.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-xview_scroll","(index, what='pages')",""],["xview_scroll","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xview_scroll","(*index)",""],["xview_scroll","Tk::XScrollable","classes/Tk/XScrollable.html#method-i-xview_scroll","(*index)",""],["xy","Object","classes/Object.html#method-i-xy","(a)",""],["y","TkWinfo","classes/TkWinfo.html#method-c-y","(win)",""],["y","TkWinfo","classes/TkWinfo.html#method-c-y","(win)",""],["y2axis_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_bind","(context, *args)",""],["y2axis_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_bind_append","(context, *args)",""],["y2axis_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_bind_remove","(context)",""],["y2axis_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_bindinfo","(context=nil)",""],["y2axis_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_cget","(option)",""],["y2axis_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_cget_strict","(option)",""],["y2axis_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_cget_tkstring","(option)",""],["y2axis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_configinfo","(slot=nil)",""],["y2axis_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_configure","(slot, value=None)",""],["y2axis_invtransform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_invtransform","(val)",""],["y2axis_limits","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_limits","()",""],["y2axis_transform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_transform","(val)",""],["y2axis_use","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-y2axis_use","(target=nil)",""],["yaml","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-yaml","(io = nil, options = {})","<p>Convert this node to YAML.\n<p>See also Psych::Visitors::Emitter\n"],["yaml?","Gem::Commands::BuildCommand","classes/Gem/Commands/BuildCommand.html#method-i-yaml-3F","(filename)",""],["yaml_as","Module","classes/Module.html#method-i-yaml_as","(url)",""],["yaml_initialize","Array","classes/Array.html#method-i-yaml_initialize","( tag, val )",""],["yaml_initialize","Hash","classes/Hash.html#method-i-yaml_initialize","( tag, val )",""],["yaml_initialize","Object::Syck::Object","classes/Object/Syck/Object.html#method-i-yaml_initialize","(p1, p2)","<p>YAML::Object.initialize\n"],["yaml_initialize","Syck::Omap","classes/Syck/Omap.html#method-i-yaml_initialize","( tag, val )",""],["yaml_initialize","Syck::Pairs","classes/Syck/Pairs.html#method-i-yaml_initialize","( tag, val )",""],["yaml_initialize","Version","classes/Version.html#method-i-yaml_initialize","(tag, map)",""],["yaml_new","Complex","classes/Complex.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_new","Exception","classes/Exception.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_new","Range","classes/Range.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_new","Rational","classes/Rational.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_new","Regexp","classes/Regexp.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_new","String","classes/String.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_new","Struct","classes/Struct.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_new","Symbol","classes/Symbol.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_new","Time","classes/Time.html#method-c-yaml_new","( klass, tag, val )",""],["yaml_tag","Object","classes/Object.html#method-c-yaml_tag","(url)",""],["yaml_tag_class_name","Struct","classes/Struct.html#method-c-yaml_tag_class_name","()",""],["yaml_tag_read_class","Struct","classes/Struct.html#method-c-yaml_tag_read_class","( name )",""],["yarv_exec","Object","classes/Object.html#method-i-yarv_exec","(file)",""],["yaxis_bind","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_bind","(context, *args)",""],["yaxis_bind_append","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_bind_append","(context, *args)",""],["yaxis_bind_remove","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_bind_remove","(context)",""],["yaxis_bindinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_bindinfo","(context=nil)",""],["yaxis_cget","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_cget","(option)",""],["yaxis_cget_strict","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_cget_strict","(option)",""],["yaxis_cget_tkstring","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_cget_tkstring","(option)",""],["yaxis_configinfo","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_configinfo","(slot=nil)",""],["yaxis_configure","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_configure","(slot, value=None)",""],["yaxis_invtransform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_invtransform","(val)",""],["yaxis_limits","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_limits","()",""],["yaxis_transform","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_transform","(val)",""],["yaxis_use","Tk::BLT::PlotComponent","classes/Tk/BLT/PlotComponent.html#method-i-yaxis_use","(target=nil)",""],["yconfig","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-yconfig","(key, value=None)",""],["yday","Date","classes/Date.html#method-i-yday","()","<p>Returns the day of the year (1-366).\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).yday           #=&gt; 34\n</code></pre>\n"],["yday","Time","classes/Time.html#method-i-yday","()","<p>Returns an integer representing the day of the year, 1..366.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:32:31 -0600 ...\n</code></pre>\n"],["year","Date","classes/Date.html#method-i-year","()","<p>Returns the year.\n<p>For example:\n\n<pre><code>Date.new(2001,2,3).year           #=&gt; 2001\n(Date.new(1,1,1) - 1).year   ...\n</code></pre>\n"],["year","Time","classes/Time.html#method-i-year","()","<p>Returns the year for <em>time</em> (including the century).\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:51 -0600\nt.year ...\n</code></pre>\n"],["year=","XMLRPC::DateTime","classes/XMLRPC/DateTime.html#method-i-year-3D","(value)",""],["yearly","Cal","classes/Cal.html#method-i-yearly","(y)",""],["ygap","Tk::Tcllib::Diagrams","classes/Tk/Tcllib/Diagrams.html#method-i-ygap","(val=None)",""],["yield","Fiber","classes/Fiber.html#method-c-yield","(*args)","<p>Yields control back to the context that resumed the fiber, passing along\nany arguments that were passed …\n"],["yield","Proc","classes/Proc.html#method-i-yield","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["yposition","Tk::Iwidgets::Menubar","classes/Tk/Iwidgets/Menubar.html#method-i-yposition","(path)",""],["yposition","Tk::Menu","classes/Tk/Menu.html#method-i-yposition","(index)",""],["yposition","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-yposition","(index)",""],["yposition","Tk::OptionMenubutton","classes/Tk/OptionMenubutton.html#method-i-yposition","(index)",""],["yscrollbar","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-yscrollbar","(bar=nil)",""],["yscrollbar","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-yscrollbar","(bar=nil)",""],["yscrollbar","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yscrollbar","(bar=nil)",""],["yscrollbar","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yscrollbar","(bar=nil)",""],["yscrollcommand","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-yscrollcommand","(cmd=Proc.new)",""],["yscrollcommand","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-yscrollcommand","(cmd=Proc.new)",""],["yscrollcommand","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yscrollcommand","(cmd=Proc.new)",""],["yscrollcommand","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yscrollcommand","(cmd=Proc.new)",""],["ytext","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-ytext","(str)",""],["yticklines","Tk::Tcllib::Plotchart::ChartMethod","classes/Tk/Tcllib/Plotchart/ChartMethod.html#method-i-yticklines","(color=None)",""],["yview","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-yview","(*index)",""],["yview","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-yview","(*idxs)",""],["yview","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-yview","(*index)",""],["yview","Tk::Iwidgets::Scrolledframe","classes/Tk/Iwidgets/Scrolledframe.html#method-i-yview","(*index)",""],["yview","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-yview","(*index)",""],["yview","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-yview","(*index)",""],["yview","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-yview","(*index)",""],["yview","Tk::RbWidget::Editable_Listbox","classes/Tk/RbWidget/Editable_Listbox.html#method-i-yview","(*args)",""],["yview","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yview","(*index)",""],["yview","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yview","(*index)",""],["yview_moveto","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-yview_moveto","(*index)",""],["yview_moveto","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-yview_moveto","(*idxs)",""],["yview_moveto","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-yview_moveto","(*index)",""],["yview_moveto","Tk::Iwidgets::Scrolledframe","classes/Tk/Iwidgets/Scrolledframe.html#method-i-yview_moveto","(*index)",""],["yview_moveto","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-yview_moveto","(*index)",""],["yview_moveto","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-yview_moveto","(*index)",""],["yview_moveto","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-yview_moveto","(*index)",""],["yview_moveto","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yview_moveto","(*index)",""],["yview_moveto","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yview_moveto","(*index)",""],["yview_scroll","Tk::Iwidgets::Hierarchy","classes/Tk/Iwidgets/Hierarchy.html#method-i-yview_scroll","(*index)",""],["yview_scroll","Tk::Iwidgets::Notebook","classes/Tk/Iwidgets/Notebook.html#method-i-yview_scroll","(index, what='pages')",""],["yview_scroll","Tk::Iwidgets::Scrolledcanvas","classes/Tk/Iwidgets/Scrolledcanvas.html#method-i-yview_scroll","(*index)",""],["yview_scroll","Tk::Iwidgets::Scrolledframe","classes/Tk/Iwidgets/Scrolledframe.html#method-i-yview_scroll","(*index)",""],["yview_scroll","Tk::Iwidgets::Scrolledlistbox","classes/Tk/Iwidgets/Scrolledlistbox.html#method-i-yview_scroll","(*index)",""],["yview_scroll","Tk::Iwidgets::Scrolledtext","classes/Tk/Iwidgets/Scrolledtext.html#method-i-yview_scroll","(*index)",""],["yview_scroll","Tk::Iwidgets::Tabnotebook","classes/Tk/Iwidgets/Tabnotebook.html#method-i-yview_scroll","(index, what='pages')",""],["yview_scroll","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yview_scroll","(*index)",""],["yview_scroll","Tk::YScrollable","classes/Tk/YScrollable.html#method-i-yview_scroll","(*index)",""],["zconfig","Tk::Tcllib::Plotchart::Plot3D","classes/Tk/Tcllib/Plotchart/Plot3D.html#method-i-zconfig","(key, value=None)",""],["zconfig","Tk::Tcllib::Plotchart::RibbonChart3D","classes/Tk/Tcllib/Plotchart/RibbonChart3D.html#method-i-zconfig","(key, value=None)",""],["zero","Function","classes/Function.html#method-i-zero","()",""],["zero","Matrix","classes/Matrix.html#method-c-zero","(row_size, column_size = row_size)","<p>Creates a zero matrix.\n\n<pre><code>Matrix.zero(2)\n  =&gt; 0 0\n     0 0\n</code></pre>\n"],["zero?","BigDecimal","classes/BigDecimal.html#method-i-zero-3F","()","<p>Returns True if the value is zero.\n"],["zero?","File","classes/File.html#method-c-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n"],["zero?","File::Stat","classes/File/Stat.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a zero-length file;\n<code>false</code> otherwise.\n\n<pre><code>File.stat(&quot;testfile&quot;).zero?   #=&gt; false\n</code></pre>\n"],["zero?","FileTest","classes/FileTest.html#method-i-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n"],["zero?","Fixnum","classes/Fixnum.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>fix</em> is zero.\n"],["zero?","Float","classes/Float.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>flt</em> is 0.0.\n"],["zero?","Matrix","classes/Matrix.html#method-i-zero-3F","()","<p>Returns <code>true</code> is this is a matrix with only zero elements\n"],["zero?","Numeric","classes/Numeric.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>num</em> has a zero value.\n"],["zero?","Pathname","classes/Pathname.html#method-i-zero-3F","()","<p>See <code>FileTest.zero?</code>.\n"],["zero?","TkVariable","classes/TkVariable.html#method-i-zero-3F","()",""],["zero?","TkVariable","classes/TkVariable.html#method-i-zero-3F","()",""],["zip","Array","classes/Array.html#method-i-zip","(*args)","<p>Converts any arguments to arrays, then merges elements of <code>self</code>\nwith corresponding elements from each …\n"],["zip","Enumerable","classes/Enumerable.html#method-i-zip","(*args)","<p>Takes one element from <em>enum</em> and merges corresponding elements from\neach <em>args</em>.  This generates a sequence …\n"],["zip?","RDoc::Parser","classes/RDoc/Parser.html#method-c-zip-3F","(file)","<p>Checks if <code>file</code> is a zip file in disguise.  Signatures from\nwww.garykessler.net/library/file_sigs.html …\n"],["zip_file","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-zip_file","()",""],["zipped_stream","Gem::Package::TarInput","classes/Gem/Package/TarInput.html#method-i-zipped_stream","(entry)","<p>Return an IO stream for the zipped entry.\n<p>NOTE:  Originally this method used two approaches, Return a …\n"],["zlib_version","Zlib","classes/Zlib.html#method-c-zlib_version","()","<p>Returns the string which represents the version of zlib library.\n"],["zone","Object","classes/Object.html#method-i-zone","(*args)",""],["zone","Time","classes/Time.html#method-i-zone","()","<p>Returns the name of the time zone used for <em>time</em>. As of Ruby 1.8,\nreturns “UTC&#39;&#39; rather than …\n"],["zone_offset","Time","classes/Time.html#method-i-zone_offset","(zone, year=self.now.year)",""],["zoom_stack","Tk::BLT","classes/Tk/BLT.html#method-c-zoom_stack","(graph)",""],["zoom_stack","Tk::BLT::GraphCommand","classes/Tk/BLT/GraphCommand.html#method-i-zoom_stack","()",""],["|","Array","classes/Array.html#method-i-7C","(p1)","<p>Set Union—Returns a new array by joining this array with\n<em>other_ary</em>, removing duplicates.\n\n<pre><code>[ &quot;a&quot;, &quot;b&quot;, ...</code></pre>\n"],["|","Bignum","classes/Bignum.html#method-i-7C","(p1)","<p>Performs bitwise <code>or</code> between <em>big</em> and <em>numeric</em>.\n"],["|","FalseClass","classes/FalseClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","Fixnum","classes/Fixnum.html#method-i-7C","(p1)","<p>Bitwise OR.\n"],["|","IPAddr","classes/IPAddr.html#method-i-7C","(other)","<p>Returns a new ipaddr built by bitwise OR.\n"],["|","NilClass","classes/NilClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","Set","classes/Set.html#method-i-7C","(enum)","<p>Returns a new set built by merging the set and the elements of the given\nenumerable object.\n"],["|","Shell::Filter","classes/Shell/Filter.html#method-i-7C","(filter)",""],["|","TkVariable","classes/TkVariable.html#method-i-7C","(other)",""],["|","TkVariable","classes/TkVariable.html#method-i-7C","(other)",""],["|","TkcTagAccess","classes/TkcTagAccess.html#method-i-7C","(tag)",""],["|","TrueClass","classes/TrueClass.html#method-i-7C","(p1)","<p>Or—Returns <code>true</code>. As <em>anObject</em> is an argument to a\nmethod call, it is always evaluated; there is no short-circuit …\n"],["~","Bignum","classes/Bignum.html#method-i-7E","()","<p>Inverts the bits in big. As Bignums are conceptually infinite length, the\nresult acts as if it had an …\n"],["~","Complex","classes/Complex.html#method-i-7E","()","<p>Returns the complex conjugate.\n"],["~","Fixnum","classes/Fixnum.html#method-i-7E","()","<p>One&#39;s complement: returns a number where each bit is flipped.\n"],["~","IPAddr","classes/IPAddr.html#method-i-7E","()","<p>Returns a new ipaddr built by bitwise negation.\n"],["~","Regexp","classes/Regexp.html#method-i-7E","()","<p>Match—Matches <em>rxp</em> against the contents of <code>$_</code>.\nEquivalent to <code><em>rxp</em> =~ $_</code>.\n\n<pre><code>$_ = &quot;input data&quot;\n~ /at/   #=&gt; ...\n</code></pre>\n"],["RUBYDOCS","","files/RUBYDOCS_rdoc.html","","<p>Ruby 1.9.3-p547\n<p>These docs were generated by and are hosted on RubyDocs.\n"],["command_line_usage","","files/doc/rake/command_line_usage_rdoc.html","","<p>Rake Command Line Usage\n<p>Rake is invoked from the command line using:\n\n<pre><code>% rake [&lt;em&gt;options&lt;/em&gt; ...]  [&lt;em&gt;VAR&lt;/em&gt;=&lt;em&gt;VALUE&lt;/em&gt;] ...</code></pre>\n"],["glossary","","files/doc/rake/glossary_rdoc.html","","<p>Glossary\n<p><strong>action</strong> &mdash; Code to be executed in order to perform a task.  Actions in a rakefile are\nspecified in …\n"],["proto_rake","","files/doc/rake/proto_rake_rdoc.html","","<p>Original Prototype Rake\n<p>This is the original 100 line prototype rake program.\n\n<pre><code>#!/usr/bin/env ruby\n\nrequire ...\n</code></pre>\n"],["rakefile","","files/doc/rake/rakefile_rdoc.html","","<p>Rakefile Format (as of version 0.8.3)\n<p>First of all, there is no special format for a Rakefile.  A Rakefile …\n"],["rational","","files/doc/rake/rational_rdoc.html","","<p>Why rake?\n<p>Ok, let me state from the beginning that I never intended to write this\ncode.  I&#39;m not convinced …\n"],["rake-0.8.7","","files/doc/rake/release_notes/rake-0_8_7_rdoc.html","","<p>Rake 0.8.7 Released\n<p>Rake version 0.8.5 introduced greatly improved support for executing\ncommands on  …\n"],["re","","files/doc/re_rdoc.html","","<p>Regular expressions (<em>regexp</em>s) are patterns which describe the\ncontents of a string. They&#39;re used …\n"],["README","","files/lib/xmlrpc/README_rdoc.html","","<p>XMLRPC for Ruby\n<p>Author and Copyright\n<p>Copyright (C) 2001-2004 by Michael Neumann (mneumann@ntecs.de)\n"]]}}